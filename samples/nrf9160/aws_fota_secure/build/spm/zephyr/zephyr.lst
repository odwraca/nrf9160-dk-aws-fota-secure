
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00010200 <_vector_table>:
   10200:	20000a90 	.word	0x20000a90
   10204:	00011629 	.word	0x00011629
   10208:	00013f67 	.word	0x00013f67
   1020c:	00011579 	.word	0x00011579
   10210:	00011579 	.word	0x00011579
   10214:	00011579 	.word	0x00011579
   10218:	00011579 	.word	0x00011579
   1021c:	00011579 	.word	0x00011579
   10220:	00011579 	.word	0x00011579
   10224:	00011579 	.word	0x00011579
   10228:	00011579 	.word	0x00011579
   1022c:	0001146d 	.word	0x0001146d
   10230:	00011579 	.word	0x00011579
   10234:	00011579 	.word	0x00011579
   10238:	00011419 	.word	0x00011419
   1023c:	00013e69 	.word	0x00013e69

00010240 <_irq_vector_table>:
   10240:	000115e9 000115e9 000115e9 000115e9     ................
   10250:	000115e9 000115e9 000115e9 000115e9     ................
   10260:	000115e9 000115e9 000115e9 000115e9     ................
   10270:	000115e9 000115e9 000115e9 000115e9     ................
   10280:	000115e9 000115e9 000115e9 000115e9     ................
   10290:	000115e9 000115e9 000115e9 000115e9     ................
   102a0:	000115e9 000115e9 000115e9 000115e9     ................
   102b0:	000115e9 000115e9 000115e9 000115e9     ................
   102c0:	000115e9 000115e9 000115e9 000115e9     ................
   102d0:	000115e9 000115e9 000115e9 000115e9     ................
   102e0:	000115e9 000115e9 000115e9 000115e9     ................
   102f0:	000115e9 000115e9 000115e9 000115e9     ................
   10300:	000115e9 000115e9 000115e9 000115e9     ................
   10310:	000115e9 000115e9 000115e9 000115e9     ................
   10320:	000115e9 000115e9 000115e9 000115e9     ................
   10330:	000115e9 000115e9 000115e9 000115e9     ................
   10340:	000115e9                                ....

00010344 <_vector_end>:
	...

00010400 <m_firmware_info>:
   10400:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
   10410:	00007e00 00000001 00010200 00010200     .~..............
   10420:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0001043c <__aeabi_uldivmod>:
   1043c:	b953      	cbnz	r3, 10454 <__aeabi_uldivmod+0x18>
   1043e:	b94a      	cbnz	r2, 10454 <__aeabi_uldivmod+0x18>
   10440:	2900      	cmp	r1, #0
   10442:	bf08      	it	eq
   10444:	2800      	cmpeq	r0, #0
   10446:	bf1c      	itt	ne
   10448:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   1044c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   10450:	f000 b96c 	b.w	1072c <__aeabi_idiv0>
   10454:	f1ad 0c08 	sub.w	ip, sp, #8
   10458:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1045c:	f000 f806 	bl	1046c <__udivmoddi4>
   10460:	f8dd e004 	ldr.w	lr, [sp, #4]
   10464:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   10468:	b004      	add	sp, #16
   1046a:	4770      	bx	lr

0001046c <__udivmoddi4>:
   1046c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10470:	9d08      	ldr	r5, [sp, #32]
   10472:	4604      	mov	r4, r0
   10474:	4688      	mov	r8, r1
   10476:	2b00      	cmp	r3, #0
   10478:	d17d      	bne.n	10576 <__udivmoddi4+0x10a>
   1047a:	428a      	cmp	r2, r1
   1047c:	4617      	mov	r7, r2
   1047e:	d93f      	bls.n	10500 <__udivmoddi4+0x94>
   10480:	fab2 f282 	clz	r2, r2
   10484:	b142      	cbz	r2, 10498 <__udivmoddi4+0x2c>
   10486:	f1c2 0020 	rsb	r0, r2, #32
   1048a:	4091      	lsls	r1, r2
   1048c:	4097      	lsls	r7, r2
   1048e:	fa24 f000 	lsr.w	r0, r4, r0
   10492:	4094      	lsls	r4, r2
   10494:	ea40 0801 	orr.w	r8, r0, r1
   10498:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   1049c:	0c23      	lsrs	r3, r4, #16
   1049e:	fa1f fe87 	uxth.w	lr, r7
   104a2:	fbb8 f6fc 	udiv	r6, r8, ip
   104a6:	fb0c 8116 	mls	r1, ip, r6, r8
   104aa:	fb06 f00e 	mul.w	r0, r6, lr
   104ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   104b2:	4298      	cmp	r0, r3
   104b4:	d905      	bls.n	104c2 <__udivmoddi4+0x56>
   104b6:	18fb      	adds	r3, r7, r3
   104b8:	d202      	bcs.n	104c0 <__udivmoddi4+0x54>
   104ba:	4298      	cmp	r0, r3
   104bc:	f200 8124 	bhi.w	10708 <__udivmoddi4+0x29c>
   104c0:	3e01      	subs	r6, #1
   104c2:	1a19      	subs	r1, r3, r0
   104c4:	b2a3      	uxth	r3, r4
   104c6:	fbb1 f0fc 	udiv	r0, r1, ip
   104ca:	fb0c 1110 	mls	r1, ip, r0, r1
   104ce:	fb00 fe0e 	mul.w	lr, r0, lr
   104d2:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   104d6:	45a6      	cmp	lr, r4
   104d8:	d905      	bls.n	104e6 <__udivmoddi4+0x7a>
   104da:	193c      	adds	r4, r7, r4
   104dc:	d202      	bcs.n	104e4 <__udivmoddi4+0x78>
   104de:	45a6      	cmp	lr, r4
   104e0:	f200 810f 	bhi.w	10702 <__udivmoddi4+0x296>
   104e4:	3801      	subs	r0, #1
   104e6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   104ea:	eba4 040e 	sub.w	r4, r4, lr
   104ee:	2600      	movs	r6, #0
   104f0:	b11d      	cbz	r5, 104fa <__udivmoddi4+0x8e>
   104f2:	40d4      	lsrs	r4, r2
   104f4:	2300      	movs	r3, #0
   104f6:	e9c5 4300 	strd	r4, r3, [r5]
   104fa:	4631      	mov	r1, r6
   104fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10500:	b902      	cbnz	r2, 10504 <__udivmoddi4+0x98>
   10502:	deff      	udf	#255	; 0xff
   10504:	fab2 f282 	clz	r2, r2
   10508:	2a00      	cmp	r2, #0
   1050a:	d150      	bne.n	105ae <__udivmoddi4+0x142>
   1050c:	1bcb      	subs	r3, r1, r7
   1050e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   10512:	fa1f f887 	uxth.w	r8, r7
   10516:	2601      	movs	r6, #1
   10518:	0c21      	lsrs	r1, r4, #16
   1051a:	fbb3 fcfe 	udiv	ip, r3, lr
   1051e:	fb0e 301c 	mls	r0, lr, ip, r3
   10522:	460b      	mov	r3, r1
   10524:	fb08 f90c 	mul.w	r9, r8, ip
   10528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   1052c:	4589      	cmp	r9, r1
   1052e:	d90a      	bls.n	10546 <__udivmoddi4+0xda>
   10530:	1879      	adds	r1, r7, r1
   10532:	bf2c      	ite	cs
   10534:	2301      	movcs	r3, #1
   10536:	2300      	movcc	r3, #0
   10538:	4589      	cmp	r9, r1
   1053a:	d902      	bls.n	10542 <__udivmoddi4+0xd6>
   1053c:	2b00      	cmp	r3, #0
   1053e:	f000 80d9 	beq.w	106f4 <__udivmoddi4+0x288>
   10542:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   10546:	eba1 0109 	sub.w	r1, r1, r9
   1054a:	b2a3      	uxth	r3, r4
   1054c:	fbb1 f0fe 	udiv	r0, r1, lr
   10550:	fb0e 1110 	mls	r1, lr, r0, r1
   10554:	fb08 f800 	mul.w	r8, r8, r0
   10558:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   1055c:	45a0      	cmp	r8, r4
   1055e:	d905      	bls.n	1056c <__udivmoddi4+0x100>
   10560:	193c      	adds	r4, r7, r4
   10562:	d202      	bcs.n	1056a <__udivmoddi4+0xfe>
   10564:	45a0      	cmp	r8, r4
   10566:	f200 80c9 	bhi.w	106fc <__udivmoddi4+0x290>
   1056a:	3801      	subs	r0, #1
   1056c:	eba4 0408 	sub.w	r4, r4, r8
   10570:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   10574:	e7bc      	b.n	104f0 <__udivmoddi4+0x84>
   10576:	428b      	cmp	r3, r1
   10578:	d909      	bls.n	1058e <__udivmoddi4+0x122>
   1057a:	2d00      	cmp	r5, #0
   1057c:	f000 80b1 	beq.w	106e2 <__udivmoddi4+0x276>
   10580:	2600      	movs	r6, #0
   10582:	e9c5 0100 	strd	r0, r1, [r5]
   10586:	4630      	mov	r0, r6
   10588:	4631      	mov	r1, r6
   1058a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1058e:	fab3 f683 	clz	r6, r3
   10592:	2e00      	cmp	r6, #0
   10594:	d146      	bne.n	10624 <__udivmoddi4+0x1b8>
   10596:	428b      	cmp	r3, r1
   10598:	f0c0 80a6 	bcc.w	106e8 <__udivmoddi4+0x27c>
   1059c:	4282      	cmp	r2, r0
   1059e:	f240 80a3 	bls.w	106e8 <__udivmoddi4+0x27c>
   105a2:	4630      	mov	r0, r6
   105a4:	2d00      	cmp	r5, #0
   105a6:	d0a8      	beq.n	104fa <__udivmoddi4+0x8e>
   105a8:	e9c5 4800 	strd	r4, r8, [r5]
   105ac:	e7a5      	b.n	104fa <__udivmoddi4+0x8e>
   105ae:	4097      	lsls	r7, r2
   105b0:	f1c2 0320 	rsb	r3, r2, #32
   105b4:	fa01 f002 	lsl.w	r0, r1, r2
   105b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   105bc:	40d9      	lsrs	r1, r3
   105be:	fa24 f303 	lsr.w	r3, r4, r3
   105c2:	fa1f f887 	uxth.w	r8, r7
   105c6:	4094      	lsls	r4, r2
   105c8:	4303      	orrs	r3, r0
   105ca:	fbb1 f0fe 	udiv	r0, r1, lr
   105ce:	0c1e      	lsrs	r6, r3, #16
   105d0:	fb0e 1110 	mls	r1, lr, r0, r1
   105d4:	fb00 fc08 	mul.w	ip, r0, r8
   105d8:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   105dc:	458c      	cmp	ip, r1
   105de:	d909      	bls.n	105f4 <__udivmoddi4+0x188>
   105e0:	1879      	adds	r1, r7, r1
   105e2:	bf2c      	ite	cs
   105e4:	2601      	movcs	r6, #1
   105e6:	2600      	movcc	r6, #0
   105e8:	458c      	cmp	ip, r1
   105ea:	d902      	bls.n	105f2 <__udivmoddi4+0x186>
   105ec:	2e00      	cmp	r6, #0
   105ee:	f000 8093 	beq.w	10718 <__udivmoddi4+0x2ac>
   105f2:	3801      	subs	r0, #1
   105f4:	eba1 010c 	sub.w	r1, r1, ip
   105f8:	b29b      	uxth	r3, r3
   105fa:	fbb1 f6fe 	udiv	r6, r1, lr
   105fe:	fb0e 1116 	mls	r1, lr, r6, r1
   10602:	fb06 fc08 	mul.w	ip, r6, r8
   10606:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   1060a:	458c      	cmp	ip, r1
   1060c:	d905      	bls.n	1061a <__udivmoddi4+0x1ae>
   1060e:	1879      	adds	r1, r7, r1
   10610:	d202      	bcs.n	10618 <__udivmoddi4+0x1ac>
   10612:	458c      	cmp	ip, r1
   10614:	f200 8087 	bhi.w	10726 <__udivmoddi4+0x2ba>
   10618:	3e01      	subs	r6, #1
   1061a:	eba1 030c 	sub.w	r3, r1, ip
   1061e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   10622:	e779      	b.n	10518 <__udivmoddi4+0xac>
   10624:	f1c6 0720 	rsb	r7, r6, #32
   10628:	fa03 f406 	lsl.w	r4, r3, r6
   1062c:	fa02 fc06 	lsl.w	ip, r2, r6
   10630:	fa01 fe06 	lsl.w	lr, r1, r6
   10634:	40fa      	lsrs	r2, r7
   10636:	fa20 f807 	lsr.w	r8, r0, r7
   1063a:	40f9      	lsrs	r1, r7
   1063c:	fa00 f306 	lsl.w	r3, r0, r6
   10640:	4322      	orrs	r2, r4
   10642:	ea48 040e 	orr.w	r4, r8, lr
   10646:	ea4f 4812 	mov.w	r8, r2, lsr #16
   1064a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   1064e:	fa1f f982 	uxth.w	r9, r2
   10652:	fbb1 faf8 	udiv	sl, r1, r8
   10656:	fb08 111a 	mls	r1, r8, sl, r1
   1065a:	fb0a f009 	mul.w	r0, sl, r9
   1065e:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
   10662:	4570      	cmp	r0, lr
   10664:	d90a      	bls.n	1067c <__udivmoddi4+0x210>
   10666:	eb12 0e0e 	adds.w	lr, r2, lr
   1066a:	bf2c      	ite	cs
   1066c:	2101      	movcs	r1, #1
   1066e:	2100      	movcc	r1, #0
   10670:	4570      	cmp	r0, lr
   10672:	d901      	bls.n	10678 <__udivmoddi4+0x20c>
   10674:	2900      	cmp	r1, #0
   10676:	d052      	beq.n	1071e <__udivmoddi4+0x2b2>
   10678:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   1067c:	ebae 0e00 	sub.w	lr, lr, r0
   10680:	b2a4      	uxth	r4, r4
   10682:	fbbe f0f8 	udiv	r0, lr, r8
   10686:	fb08 ee10 	mls	lr, r8, r0, lr
   1068a:	fb00 f909 	mul.w	r9, r0, r9
   1068e:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
   10692:	45f1      	cmp	r9, lr
   10694:	d905      	bls.n	106a2 <__udivmoddi4+0x236>
   10696:	eb12 0e0e 	adds.w	lr, r2, lr
   1069a:	d201      	bcs.n	106a0 <__udivmoddi4+0x234>
   1069c:	45f1      	cmp	r9, lr
   1069e:	d838      	bhi.n	10712 <__udivmoddi4+0x2a6>
   106a0:	3801      	subs	r0, #1
   106a2:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
   106a6:	ebae 0e09 	sub.w	lr, lr, r9
   106aa:	fba0 890c 	umull	r8, r9, r0, ip
   106ae:	45ce      	cmp	lr, r9
   106b0:	4641      	mov	r1, r8
   106b2:	464c      	mov	r4, r9
   106b4:	d302      	bcc.n	106bc <__udivmoddi4+0x250>
   106b6:	d106      	bne.n	106c6 <__udivmoddi4+0x25a>
   106b8:	4543      	cmp	r3, r8
   106ba:	d204      	bcs.n	106c6 <__udivmoddi4+0x25a>
   106bc:	3801      	subs	r0, #1
   106be:	ebb8 010c 	subs.w	r1, r8, ip
   106c2:	eb69 0402 	sbc.w	r4, r9, r2
   106c6:	b315      	cbz	r5, 1070e <__udivmoddi4+0x2a2>
   106c8:	1a5a      	subs	r2, r3, r1
   106ca:	eb6e 0e04 	sbc.w	lr, lr, r4
   106ce:	40f2      	lsrs	r2, r6
   106d0:	fa0e f707 	lsl.w	r7, lr, r7
   106d4:	fa2e f306 	lsr.w	r3, lr, r6
   106d8:	2600      	movs	r6, #0
   106da:	4317      	orrs	r7, r2
   106dc:	e9c5 7300 	strd	r7, r3, [r5]
   106e0:	e70b      	b.n	104fa <__udivmoddi4+0x8e>
   106e2:	462e      	mov	r6, r5
   106e4:	4628      	mov	r0, r5
   106e6:	e708      	b.n	104fa <__udivmoddi4+0x8e>
   106e8:	1a84      	subs	r4, r0, r2
   106ea:	eb61 0103 	sbc.w	r1, r1, r3
   106ee:	2001      	movs	r0, #1
   106f0:	4688      	mov	r8, r1
   106f2:	e757      	b.n	105a4 <__udivmoddi4+0x138>
   106f4:	f1ac 0c02 	sub.w	ip, ip, #2
   106f8:	4439      	add	r1, r7
   106fa:	e724      	b.n	10546 <__udivmoddi4+0xda>
   106fc:	3802      	subs	r0, #2
   106fe:	443c      	add	r4, r7
   10700:	e734      	b.n	1056c <__udivmoddi4+0x100>
   10702:	3802      	subs	r0, #2
   10704:	443c      	add	r4, r7
   10706:	e6ee      	b.n	104e6 <__udivmoddi4+0x7a>
   10708:	3e02      	subs	r6, #2
   1070a:	443b      	add	r3, r7
   1070c:	e6d9      	b.n	104c2 <__udivmoddi4+0x56>
   1070e:	462e      	mov	r6, r5
   10710:	e6f3      	b.n	104fa <__udivmoddi4+0x8e>
   10712:	3802      	subs	r0, #2
   10714:	4496      	add	lr, r2
   10716:	e7c4      	b.n	106a2 <__udivmoddi4+0x236>
   10718:	3802      	subs	r0, #2
   1071a:	4439      	add	r1, r7
   1071c:	e76a      	b.n	105f4 <__udivmoddi4+0x188>
   1071e:	f1aa 0a02 	sub.w	sl, sl, #2
   10722:	4496      	add	lr, r2
   10724:	e7aa      	b.n	1067c <__udivmoddi4+0x210>
   10726:	3e02      	subs	r6, #2
   10728:	4439      	add	r1, r7
   1072a:	e776      	b.n	1061a <__udivmoddi4+0x1ae>

0001072c <__aeabi_idiv0>:
   1072c:	4770      	bx	lr
   1072e:	bf00      	nop

00010730 <__gnu_cmse_nonsecure_call>:
   10730:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
   10734:	4627      	mov	r7, r4
   10736:	46a0      	mov	r8, r4
   10738:	46a1      	mov	r9, r4
   1073a:	46a2      	mov	sl, r4
   1073c:	46a3      	mov	fp, r4
   1073e:	46a4      	mov	ip, r4
   10740:	ed2d 8b10 	vpush	{d8-d15}
   10744:	f04f 0500 	mov.w	r5, #0
   10748:	ec45 5b18 	vmov	d8, r5, r5
   1074c:	ec45 5a19 	vmov	s18, s19, r5, r5
   10750:	ec45 5a1a 	vmov	s20, s21, r5, r5
   10754:	ec45 5a1b 	vmov	s22, s23, r5, r5
   10758:	ec45 5a1c 	vmov	s24, s25, r5, r5
   1075c:	ec45 5a1d 	vmov	s26, s27, r5, r5
   10760:	ec45 5a1e 	vmov	s28, s29, r5, r5
   10764:	ec45 5a1f 	vmov	s30, s31, r5, r5
   10768:	eef1 5a10 	vmrs	r5, fpscr
   1076c:	f64f 7660 	movw	r6, #65376	; 0xff60
   10770:	f6c0 76ff 	movt	r6, #4095	; 0xfff
   10774:	4035      	ands	r5, r6
   10776:	eee1 5a10 	vmsr	fpscr, r5
   1077a:	f384 8800 	msr	CPSR_f, r4
   1077e:	4625      	mov	r5, r4
   10780:	4626      	mov	r6, r4
   10782:	47a4      	blxns	r4
   10784:	ecbd 8b10 	vpop	{d8-d15}
   10788:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

0001078c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   1078c:	680b      	ldr	r3, [r1, #0]
   1078e:	3301      	adds	r3, #1
   10790:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   10792:	4b01      	ldr	r3, [pc, #4]	; (10798 <char_out+0xc>)
   10794:	681b      	ldr	r3, [r3, #0]
   10796:	4718      	bx	r3
   10798:	200013d0 	.word	0x200013d0

0001079c <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
   1079c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   107a0:	ed2d 8b02 	vpush	{d8}
   107a4:	b083      	sub	sp, #12
   107a6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   107a8:	469a      	mov	sl, r3
   107aa:	2c01      	cmp	r4, #1
   107ac:	bfb8      	it	lt
   107ae:	2401      	movlt	r4, #1
   107b0:	2b01      	cmp	r3, #1
   107b2:	bf0c      	ite	eq
   107b4:	2330      	moveq	r3, #48	; 0x30
   107b6:	2320      	movne	r3, #32
   107b8:	4615      	mov	r5, r2
   107ba:	4606      	mov	r6, r0
   107bc:	ee08 3a10 	vmov	s16, r3
   107c0:	2701      	movs	r7, #1
   107c2:	f04f 080a 	mov.w	r8, #10
   107c6:	2200      	movs	r2, #0
   107c8:	f8df b074 	ldr.w	fp, [pc, #116]	; 10840 <_printk_dec_ulong+0xa4>
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
   107cc:	fbb5 f9fb 	udiv	r9, r5, fp
   107d0:	b90a      	cbnz	r2, 107d6 <_printk_dec_ulong+0x3a>
   107d2:	45ab      	cmp	fp, r5
   107d4:	d820      	bhi.n	10818 <_printk_dec_ulong+0x7c>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
   107d6:	f109 0030 	add.w	r0, r9, #48	; 0x30
   107da:	9100      	str	r1, [sp, #0]
   107dc:	47b0      	blx	r6
			found_largest_digit = 1;
   107de:	2201      	movs	r2, #1
			digits++;
   107e0:	3701      	adds	r7, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
   107e2:	9900      	ldr	r1, [sp, #0]
		}
		remaining--;
		remainder %= pos;
		pos /= 10;
   107e4:	230a      	movs	r3, #10
		remaining--;
   107e6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
	while (pos >= 10) {
   107ea:	f1b8 0f01 	cmp.w	r8, #1
		remainder %= pos;
   107ee:	fb0b 5519 	mls	r5, fp, r9, r5
		pos /= 10;
   107f2:	fbbb fbf3 	udiv	fp, fp, r3
	while (pos >= 10) {
   107f6:	d1e9      	bne.n	107cc <_printk_dec_ulong+0x30>
	}
	out((int)(remainder + 48), ctx);
   107f8:	f105 0030 	add.w	r0, r5, #48	; 0x30
   107fc:	9100      	str	r1, [sp, #0]
   107fe:	47b0      	blx	r6

	if (padding == PAD_SPACE_AFTER) {
   10800:	f1ba 0f03 	cmp.w	sl, #3
   10804:	9900      	ldr	r1, [sp, #0]
   10806:	d102      	bne.n	1080e <_printk_dec_ulong+0x72>
		remaining = min_width - digits;
   10808:	1be4      	subs	r4, r4, r7
		while (remaining-- > 0) {
   1080a:	2c00      	cmp	r4, #0
   1080c:	dc11      	bgt.n	10832 <_printk_dec_ulong+0x96>
			out(' ', ctx);
		}
	}
}
   1080e:	b003      	add	sp, #12
   10810:	ecbd 8b02 	vpop	{d8}
   10814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
   10818:	4544      	cmp	r4, r8
   1081a:	dbe3      	blt.n	107e4 <_printk_dec_ulong+0x48>
				&& padding < PAD_SPACE_AFTER) {
   1081c:	f1ba 0f02 	cmp.w	sl, #2
   10820:	d8e0      	bhi.n	107e4 <_printk_dec_ulong+0x48>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
   10822:	ee18 0a10 	vmov	r0, s16
   10826:	e9cd 1200 	strd	r1, r2, [sp]
			digits++;
   1082a:	3701      	adds	r7, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
   1082c:	47b0      	blx	r6
			digits++;
   1082e:	9a01      	ldr	r2, [sp, #4]
   10830:	e7d7      	b.n	107e2 <_printk_dec_ulong+0x46>
			out(' ', ctx);
   10832:	2020      	movs	r0, #32
   10834:	9100      	str	r1, [sp, #0]
   10836:	3c01      	subs	r4, #1
   10838:	47b0      	blx	r6
   1083a:	9900      	ldr	r1, [sp, #0]
   1083c:	e7e5      	b.n	1080a <_printk_dec_ulong+0x6e>
   1083e:	bf00      	nop
   10840:	3b9aca00 	.word	0x3b9aca00

00010844 <__printk_hook_install>:
	_char_out = fn;
   10844:	4b01      	ldr	r3, [pc, #4]	; (1084c <__printk_hook_install+0x8>)
   10846:	6018      	str	r0, [r3, #0]
}
   10848:	4770      	bx	lr
   1084a:	bf00      	nop
   1084c:	200013d0 	.word	0x200013d0

00010850 <z_vprintk>:
{
   10850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
   10854:	2700      	movs	r7, #0
{
   10856:	4605      	mov	r5, r0
   10858:	468b      	mov	fp, r1
	int min_width = -1;
   1085a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
   1085e:	46b8      	mov	r8, r7
{
   10860:	461c      	mov	r4, r3
   10862:	b08d      	sub	sp, #52	; 0x34
   10864:	1e53      	subs	r3, r2, #1
   10866:	9303      	str	r3, [sp, #12]
			might_format = 0;
   10868:	2600      	movs	r6, #0
					break;
   1086a:	e005      	b.n	10878 <z_vprintk+0x28>
		if (!might_format) {
   1086c:	b96e      	cbnz	r6, 1088a <z_vprintk+0x3a>
			if (*fmt != '%') {
   1086e:	2825      	cmp	r0, #37	; 0x25
   10870:	f000 8171 	beq.w	10b56 <z_vprintk+0x306>
				out((int)*fmt, ctx);
   10874:	4659      	mov	r1, fp
   10876:	47a8      	blx	r5
	while (*fmt) {
   10878:	9b03      	ldr	r3, [sp, #12]
   1087a:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   1087e:	9303      	str	r3, [sp, #12]
   10880:	2800      	cmp	r0, #0
   10882:	d1f3      	bne.n	1086c <z_vprintk+0x1c>
}
   10884:	b00d      	add	sp, #52	; 0x34
   10886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
   1088a:	287a      	cmp	r0, #122	; 0x7a
   1088c:	d80a      	bhi.n	108a4 <z_vprintk+0x54>
   1088e:	2862      	cmp	r0, #98	; 0x62
   10890:	d810      	bhi.n	108b4 <z_vprintk+0x64>
   10892:	2830      	cmp	r0, #48	; 0x30
   10894:	d054      	beq.n	10940 <z_vprintk+0xf0>
   10896:	d845      	bhi.n	10924 <z_vprintk+0xd4>
   10898:	2825      	cmp	r0, #37	; 0x25
   1089a:	f000 815a 	beq.w	10b52 <z_vprintk+0x302>
   1089e:	282d      	cmp	r0, #45	; 0x2d
   108a0:	f000 815f 	beq.w	10b62 <z_vprintk+0x312>
					out((int)'%', ctx);
   108a4:	4659      	mov	r1, fp
   108a6:	2025      	movs	r0, #37	; 0x25
   108a8:	47a8      	blx	r5
					out((int)*fmt, ctx);
   108aa:	4659      	mov	r1, fp
   108ac:	9b03      	ldr	r3, [sp, #12]
   108ae:	7818      	ldrb	r0, [r3, #0]
   108b0:	47a8      	blx	r5
   108b2:	e7d9      	b.n	10868 <z_vprintk+0x18>
   108b4:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
   108b8:	2b17      	cmp	r3, #23
   108ba:	d8f3      	bhi.n	108a4 <z_vprintk+0x54>
   108bc:	a201      	add	r2, pc, #4	; (adr r2, 108c4 <z_vprintk+0x74>)
   108be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   108c2:	bf00      	nop
   108c4:	00010b4b 	.word	0x00010b4b
   108c8:	0001098f 	.word	0x0001098f
   108cc:	000108a5 	.word	0x000108a5
   108d0:	000108a5 	.word	0x000108a5
   108d4:	000108a5 	.word	0x000108a5
   108d8:	00010971 	.word	0x00010971
   108dc:	0001098f 	.word	0x0001098f
   108e0:	000108a5 	.word	0x000108a5
   108e4:	000108a5 	.word	0x000108a5
   108e8:	00010971 	.word	0x00010971
   108ec:	000108a5 	.word	0x000108a5
   108f0:	000108a5 	.word	0x000108a5
   108f4:	000108a5 	.word	0x000108a5
   108f8:	00010a31 	.word	0x00010a31
   108fc:	000108a5 	.word	0x000108a5
   10900:	000108a5 	.word	0x000108a5
   10904:	00010b1b 	.word	0x00010b1b
   10908:	000108a5 	.word	0x000108a5
   1090c:	000109ff 	.word	0x000109ff
   10910:	000108a5 	.word	0x000108a5
   10914:	000108a5 	.word	0x000108a5
   10918:	0001092d 	.word	0x0001092d
   1091c:	000108a5 	.word	0x000108a5
   10920:	00010971 	.word	0x00010971
			switch (*fmt) {
   10924:	2839      	cmp	r0, #57	; 0x39
   10926:	d91a      	bls.n	1095e <z_vprintk+0x10e>
   10928:	2858      	cmp	r0, #88	; 0x58
   1092a:	d1bb      	bne.n	108a4 <z_vprintk+0x54>
				if (*fmt == 'p') {
   1092c:	9b03      	ldr	r3, [sp, #12]
   1092e:	781b      	ldrb	r3, [r3, #0]
   10930:	2b70      	cmp	r3, #112	; 0x70
   10932:	f040 8088 	bne.w	10a46 <z_vprintk+0x1f6>
					x = va_arg(ap, unsigned int);
   10936:	f854 3b04 	ldr.w	r3, [r4], #4
   1093a:	2200      	movs	r2, #0
   1093c:	9306      	str	r3, [sp, #24]
   1093e:	e090      	b.n	10a62 <z_vprintk+0x212>
				if (min_width < 0 && padding == PAD_NONE) {
   10940:	f1b9 0f00 	cmp.w	r9, #0
   10944:	da0e      	bge.n	10964 <z_vprintk+0x114>
   10946:	f1b8 0f00 	cmp.w	r8, #0
   1094a:	f000 810d 	beq.w	10b68 <z_vprintk+0x318>
					min_width = *fmt - '0';
   1094e:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   10952:	f1b8 0f00 	cmp.w	r8, #0
   10956:	bf08      	it	eq
   10958:	f04f 0802 	moveq.w	r8, #2
   1095c:	e78c      	b.n	10878 <z_vprintk+0x28>
				if (min_width < 0) {
   1095e:	f1b9 0f00 	cmp.w	r9, #0
   10962:	dbf4      	blt.n	1094e <z_vprintk+0xfe>
					min_width = 10 * min_width + *fmt - '0';
   10964:	230a      	movs	r3, #10
   10966:	fb03 0909 	mla	r9, r3, r9, r0
   1096a:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
   1096e:	e7f0      	b.n	10952 <z_vprintk+0x102>
				if (*fmt == 'h' && length_mod == 'h') {
   10970:	2868      	cmp	r0, #104	; 0x68
   10972:	d103      	bne.n	1097c <z_vprintk+0x12c>
   10974:	2f68      	cmp	r7, #104	; 0x68
   10976:	d106      	bne.n	10986 <z_vprintk+0x136>
					length_mod = 'H';
   10978:	2748      	movs	r7, #72	; 0x48
   1097a:	e77d      	b.n	10878 <z_vprintk+0x28>
				} else if (*fmt == 'l' && length_mod == 'l') {
   1097c:	286c      	cmp	r0, #108	; 0x6c
   1097e:	d102      	bne.n	10986 <z_vprintk+0x136>
   10980:	2f6c      	cmp	r7, #108	; 0x6c
   10982:	f000 80f4 	beq.w	10b6e <z_vprintk+0x31e>
				} else if (length_mod == 0) {
   10986:	2f00      	cmp	r7, #0
   10988:	d18c      	bne.n	108a4 <z_vprintk+0x54>
   1098a:	4607      	mov	r7, r0
   1098c:	e774      	b.n	10878 <z_vprintk+0x28>
				if (length_mod == 'z') {
   1098e:	2f7a      	cmp	r7, #122	; 0x7a
   10990:	d102      	bne.n	10998 <z_vprintk+0x148>
					d = va_arg(ap, int);
   10992:	f854 6b04 	ldr.w	r6, [r4], #4
   10996:	e021      	b.n	109dc <z_vprintk+0x18c>
				} else if (length_mod == 'l') {
   10998:	2f6c      	cmp	r7, #108	; 0x6c
   1099a:	d0fa      	beq.n	10992 <z_vprintk+0x142>
				} else if (length_mod == 'L') {
   1099c:	2f4c      	cmp	r7, #76	; 0x4c
   1099e:	d1f8      	bne.n	10992 <z_vprintk+0x142>
					long long lld = va_arg(ap, long long);
   109a0:	3407      	adds	r4, #7
   109a2:	f024 0407 	bic.w	r4, r4, #7
   109a6:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   109aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
					if (lld > __LONG_MAX__ ||
   109ae:	9b04      	ldr	r3, [sp, #16]
   109b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   109b4:	f113 4100 	adds.w	r1, r3, #2147483648	; 0x80000000
   109b8:	9b05      	ldr	r3, [sp, #20]
   109ba:	9108      	str	r1, [sp, #32]
   109bc:	f143 0100 	adc.w	r1, r3, #0
   109c0:	9109      	str	r1, [sp, #36]	; 0x24
   109c2:	2100      	movs	r1, #0
   109c4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   109c8:	4299      	cmp	r1, r3
   109ca:	bf08      	it	eq
   109cc:	4290      	cmpeq	r0, r2
   109ce:	d204      	bcs.n	109da <z_vprintk+0x18a>
						print_err(out, ctx);
   109d0:	4659      	mov	r1, fp
   109d2:	4628      	mov	r0, r5
   109d4:	f003 f927 	bl	13c26 <print_err>
						break;
   109d8:	e746      	b.n	10868 <z_vprintk+0x18>
					d = lld;
   109da:	9e04      	ldr	r6, [sp, #16]
				if (d < 0) {
   109dc:	2e00      	cmp	r6, #0
   109de:	da05      	bge.n	109ec <z_vprintk+0x19c>
					out((int)'-', ctx);
   109e0:	4659      	mov	r1, fp
   109e2:	202d      	movs	r0, #45	; 0x2d
   109e4:	47a8      	blx	r5
					d = -d;
   109e6:	4276      	negs	r6, r6
					min_width--;
   109e8:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
   109ec:	4643      	mov	r3, r8
   109ee:	4632      	mov	r2, r6
   109f0:	f8cd 9000 	str.w	r9, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
   109f4:	4659      	mov	r1, fp
   109f6:	4628      	mov	r0, r5
   109f8:	f7ff fed0 	bl	1079c <_printk_dec_ulong>
				break;
   109fc:	e734      	b.n	10868 <z_vprintk+0x18>
				if (length_mod == 'z') {
   109fe:	2f7a      	cmp	r7, #122	; 0x7a
   10a00:	d102      	bne.n	10a08 <z_vprintk+0x1b8>
					u = va_arg(ap, unsigned int);
   10a02:	f854 2b04 	ldr.w	r2, [r4], #4
   10a06:	e00f      	b.n	10a28 <z_vprintk+0x1d8>
				} else if (length_mod == 'l') {
   10a08:	2f6c      	cmp	r7, #108	; 0x6c
   10a0a:	d0fa      	beq.n	10a02 <z_vprintk+0x1b2>
				} else if (length_mod == 'L') {
   10a0c:	2f4c      	cmp	r7, #76	; 0x4c
   10a0e:	d1f8      	bne.n	10a02 <z_vprintk+0x1b2>
					if (llu > ~0UL) {
   10a10:	2100      	movs	r1, #0
   10a12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
					unsigned long long llu =
   10a16:	3407      	adds	r4, #7
   10a18:	f024 0407 	bic.w	r4, r4, #7
   10a1c:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
   10a20:	4299      	cmp	r1, r3
   10a22:	bf08      	it	eq
   10a24:	4290      	cmpeq	r0, r2
   10a26:	d3d3      	bcc.n	109d0 <z_vprintk+0x180>
				_printk_dec_ulong(out, ctx, u, padding,
   10a28:	4643      	mov	r3, r8
   10a2a:	f8cd 9000 	str.w	r9, [sp]
   10a2e:	e7e1      	b.n	109f4 <z_vprintk+0x1a4>
				out('0', ctx);
   10a30:	4659      	mov	r1, fp
   10a32:	2030      	movs	r0, #48	; 0x30
   10a34:	47a8      	blx	r5
				out('x', ctx);
   10a36:	4659      	mov	r1, fp
   10a38:	2078      	movs	r0, #120	; 0x78
   10a3a:	47a8      	blx	r5
					min_width = 8;
   10a3c:	f04f 0908 	mov.w	r9, #8
				padding = PAD_ZERO_BEFORE;
   10a40:	f04f 0801 	mov.w	r8, #1
   10a44:	e772      	b.n	1092c <z_vprintk+0xdc>
				} else if (length_mod == 'l') {
   10a46:	2f6c      	cmp	r7, #108	; 0x6c
   10a48:	f43f af75 	beq.w	10936 <z_vprintk+0xe6>
				} else if (length_mod == 'L') {
   10a4c:	2f4c      	cmp	r7, #76	; 0x4c
   10a4e:	f47f af72 	bne.w	10936 <z_vprintk+0xe6>
					x = va_arg(ap, unsigned long long);
   10a52:	1de3      	adds	r3, r4, #7
   10a54:	f023 0307 	bic.w	r3, r3, #7
   10a58:	461c      	mov	r4, r3
   10a5a:	f854 2b08 	ldr.w	r2, [r4], #8
   10a5e:	9206      	str	r2, [sp, #24]
   10a60:	685a      	ldr	r2, [r3, #4]
	int digits = 0;
   10a62:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
   10a64:	2310      	movs	r3, #16
	int shift = sizeof(num) * 8;
   10a66:	f04f 0a40 	mov.w	sl, #64	; 0x40
	int digits = 0;
   10a6a:	9104      	str	r1, [sp, #16]
	int found_largest_digit = 0;
   10a6c:	9107      	str	r1, [sp, #28]
		shift -= 4;
   10a6e:	f1aa 0a04 	sub.w	sl, sl, #4
		nibble = (num >> shift) & 0xf;
   10a72:	9906      	ldr	r1, [sp, #24]
   10a74:	f1ca 0e20 	rsb	lr, sl, #32
   10a78:	f1aa 0c20 	sub.w	ip, sl, #32
   10a7c:	fa21 f00a 	lsr.w	r0, r1, sl
   10a80:	fa02 fe0e 	lsl.w	lr, r2, lr
   10a84:	ea40 000e 	orr.w	r0, r0, lr
   10a88:	fa22 fc0c 	lsr.w	ip, r2, ip
   10a8c:	ea40 000c 	orr.w	r0, r0, ip
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
   10a90:	f010 000f 	ands.w	r0, r0, #15
   10a94:	d107      	bne.n	10aa6 <z_vprintk+0x256>
   10a96:	9907      	ldr	r1, [sp, #28]
   10a98:	b911      	cbnz	r1, 10aa0 <z_vprintk+0x250>
   10a9a:	f1ba 0f00 	cmp.w	sl, #0
   10a9e:	d125      	bne.n	10aec <z_vprintk+0x29c>
			nibble += nibble > 9 ? 87 : 48;
   10aa0:	f04f 0c30 	mov.w	ip, #48	; 0x30
   10aa4:	e005      	b.n	10ab2 <z_vprintk+0x262>
   10aa6:	2809      	cmp	r0, #9
   10aa8:	bf8c      	ite	hi
   10aaa:	f04f 0c57 	movhi.w	ip, #87	; 0x57
   10aae:	f04f 0c30 	movls.w	ip, #48	; 0x30
   10ab2:	4460      	add	r0, ip
			out((int)nibble, ctx);
   10ab4:	4659      	mov	r1, fp
   10ab6:	b240      	sxtb	r0, r0
   10ab8:	920a      	str	r2, [sp, #40]	; 0x28
   10aba:	9307      	str	r3, [sp, #28]
   10abc:	47a8      	blx	r5
			digits++;
   10abe:	9b04      	ldr	r3, [sp, #16]
	while (shift >= 4) {
   10ac0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
			digits++;
   10ac2:	3301      	adds	r3, #1
   10ac4:	9304      	str	r3, [sp, #16]
	while (shift >= 4) {
   10ac6:	9b07      	ldr	r3, [sp, #28]
   10ac8:	f1ba 0f00 	cmp.w	sl, #0
   10acc:	d123      	bne.n	10b16 <z_vprintk+0x2c6>
	if (padding == PAD_SPACE_AFTER) {
   10ace:	f1b8 0f03 	cmp.w	r8, #3
   10ad2:	f47f aec9 	bne.w	10868 <z_vprintk+0x18>
		remaining = min_width * 2 - digits;
   10ad6:	9b04      	ldr	r3, [sp, #16]
   10ad8:	ebc3 0649 	rsb	r6, r3, r9, lsl #1
		while (remaining-- > 0) {
   10adc:	2e00      	cmp	r6, #0
   10ade:	f77f aec3 	ble.w	10868 <z_vprintk+0x18>
			out(' ', ctx);
   10ae2:	4659      	mov	r1, fp
   10ae4:	2020      	movs	r0, #32
   10ae6:	47a8      	blx	r5
   10ae8:	3e01      	subs	r6, #1
   10aea:	e7f7      	b.n	10adc <z_vprintk+0x28c>
		if (remaining-- <= min_width) {
   10aec:	1e59      	subs	r1, r3, #1
   10aee:	4599      	cmp	r9, r3
   10af0:	910a      	str	r1, [sp, #40]	; 0x28
   10af2:	db07      	blt.n	10b04 <z_vprintk+0x2b4>
			if (padding == PAD_ZERO_BEFORE) {
   10af4:	f1b8 0f01 	cmp.w	r8, #1
   10af8:	d106      	bne.n	10b08 <z_vprintk+0x2b8>
				out('0', ctx);
   10afa:	4659      	mov	r1, fp
   10afc:	2030      	movs	r0, #48	; 0x30
   10afe:	920b      	str	r2, [sp, #44]	; 0x2c
				out(' ', ctx);
   10b00:	47a8      	blx	r5
   10b02:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
			nibble += nibble > 9 ? 87 : 48;
   10b04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10b06:	e7b2      	b.n	10a6e <z_vprintk+0x21e>
			} else if (padding == PAD_SPACE_BEFORE) {
   10b08:	f1b8 0f02 	cmp.w	r8, #2
   10b0c:	d1fa      	bne.n	10b04 <z_vprintk+0x2b4>
				out(' ', ctx);
   10b0e:	4659      	mov	r1, fp
   10b10:	2020      	movs	r0, #32
   10b12:	920b      	str	r2, [sp, #44]	; 0x2c
   10b14:	e7f4      	b.n	10b00 <z_vprintk+0x2b0>
			found_largest_digit = 1;
   10b16:	9607      	str	r6, [sp, #28]
   10b18:	e7a9      	b.n	10a6e <z_vprintk+0x21e>
				char *s = va_arg(ap, char *);
   10b1a:	f854 6b04 	ldr.w	r6, [r4], #4
				while (*s) {
   10b1e:	46b2      	mov	sl, r6
   10b20:	4653      	mov	r3, sl
   10b22:	f81a 0b01 	ldrb.w	r0, [sl], #1
   10b26:	b968      	cbnz	r0, 10b44 <z_vprintk+0x2f4>
				if (padding == PAD_SPACE_AFTER) {
   10b28:	f1b8 0f03 	cmp.w	r8, #3
   10b2c:	d121      	bne.n	10b72 <z_vprintk+0x322>
					int remaining = min_width - (s - start);
   10b2e:	1b9e      	subs	r6, r3, r6
   10b30:	eba9 0606 	sub.w	r6, r9, r6
					while (remaining-- > 0) {
   10b34:	2e00      	cmp	r6, #0
   10b36:	f77f ae97 	ble.w	10868 <z_vprintk+0x18>
						out(' ', ctx);
   10b3a:	4659      	mov	r1, fp
   10b3c:	2020      	movs	r0, #32
   10b3e:	47a8      	blx	r5
   10b40:	3e01      	subs	r6, #1
   10b42:	e7f7      	b.n	10b34 <z_vprintk+0x2e4>
					out((int)(*s++), ctx);
   10b44:	4659      	mov	r1, fp
   10b46:	47a8      	blx	r5
   10b48:	e7ea      	b.n	10b20 <z_vprintk+0x2d0>
				out(c, ctx);
   10b4a:	4659      	mov	r1, fp
   10b4c:	f854 0b04 	ldr.w	r0, [r4], #4
   10b50:	e6ae      	b.n	108b0 <z_vprintk+0x60>
				out((int)'%', ctx);
   10b52:	4659      	mov	r1, fp
   10b54:	e6ac      	b.n	108b0 <z_vprintk+0x60>
				length_mod = 0;
   10b56:	4637      	mov	r7, r6
				padding = PAD_NONE;
   10b58:	46b0      	mov	r8, r6
				min_width = -1;
   10b5a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
   10b5e:	2601      	movs	r6, #1
   10b60:	e68a      	b.n	10878 <z_vprintk+0x28>
			switch (*fmt) {
   10b62:	f04f 0803 	mov.w	r8, #3
   10b66:	e687      	b.n	10878 <z_vprintk+0x28>
					padding = PAD_ZERO_BEFORE;
   10b68:	f04f 0801 	mov.w	r8, #1
   10b6c:	e684      	b.n	10878 <z_vprintk+0x28>
					length_mod = 'L';
   10b6e:	274c      	movs	r7, #76	; 0x4c
   10b70:	e682      	b.n	10878 <z_vprintk+0x28>
			might_format = 0;
   10b72:	4606      	mov	r6, r0
		++fmt;
   10b74:	e680      	b.n	10878 <z_vprintk+0x28>
   10b76:	bf00      	nop

00010b78 <vprintk>:
{
   10b78:	b507      	push	{r0, r1, r2, lr}
   10b7a:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
   10b7c:	2100      	movs	r1, #0
{
   10b7e:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
   10b80:	9101      	str	r1, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
   10b82:	4803      	ldr	r0, [pc, #12]	; (10b90 <vprintk+0x18>)
   10b84:	a901      	add	r1, sp, #4
   10b86:	f7ff fe63 	bl	10850 <z_vprintk>
}
   10b8a:	b003      	add	sp, #12
   10b8c:	f85d fb04 	ldr.w	pc, [sp], #4
   10b90:	0001078d 	.word	0x0001078d

00010b94 <nordicsemi_nrf91_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
   10b94:	f04f 0220 	mov.w	r2, #32
   10b98:	f3ef 8311 	mrs	r3, BASEPRI
   10b9c:	f382 8811 	msr	BASEPRI, r2
   10ba0:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   10ba4:	2101      	movs	r1, #1
   10ba6:	4a04      	ldr	r2, [pc, #16]	; (10bb8 <nordicsemi_nrf91_init+0x24>)
   10ba8:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   10bac:	f383 8811 	msr	BASEPRI, r3
   10bb0:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   10bb4:	2000      	movs	r0, #0
   10bb6:	4770      	bx	lr
   10bb8:	50039000 	.word	0x50039000

00010bbc <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
   10bbc:	280a      	cmp	r0, #10
{
   10bbe:	b538      	push	{r3, r4, r5, lr}
   10bc0:	4604      	mov	r4, r0
   10bc2:	4d07      	ldr	r5, [pc, #28]	; (10be0 <console_out+0x24>)
	if ('\n' == c) {
   10bc4:	d104      	bne.n	10bd0 <console_out+0x14>
   10bc6:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
   10bc8:	6843      	ldr	r3, [r0, #4]
   10bca:	210d      	movs	r1, #13
   10bcc:	685b      	ldr	r3, [r3, #4]
   10bce:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
   10bd0:	6828      	ldr	r0, [r5, #0]
   10bd2:	6843      	ldr	r3, [r0, #4]
   10bd4:	b2e1      	uxtb	r1, r4
   10bd6:	685b      	ldr	r3, [r3, #4]
   10bd8:	4798      	blx	r3

	return c;
}
   10bda:	4620      	mov	r0, r4
   10bdc:	bd38      	pop	{r3, r4, r5, pc}
   10bde:	bf00      	nop
   10be0:	20000008 	.word	0x20000008

00010be4 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
   10be4:	b508      	push	{r3, lr}
	__stdout_hook_install(console_out);
   10be6:	4804      	ldr	r0, [pc, #16]	; (10bf8 <uart_console_hook_install+0x14>)
   10be8:	f001 f886 	bl	11cf8 <__stdout_hook_install>
	__printk_hook_install(console_out);
}
   10bec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__printk_hook_install(console_out);
   10bf0:	4801      	ldr	r0, [pc, #4]	; (10bf8 <uart_console_hook_install+0x14>)
   10bf2:	f7ff be27 	b.w	10844 <__printk_hook_install>
   10bf6:	bf00      	nop
   10bf8:	00010bbd 	.word	0x00010bbd

00010bfc <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
   10bfc:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   10bfe:	4804      	ldr	r0, [pc, #16]	; (10c10 <uart_console_init+0x14>)
   10c00:	f001 faa6 	bl	12150 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   10c04:	4b03      	ldr	r3, [pc, #12]	; (10c14 <uart_console_init+0x18>)
   10c06:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
   10c08:	f7ff ffec 	bl	10be4 <uart_console_hook_install>

	return 0;
}
   10c0c:	2000      	movs	r0, #0
   10c0e:	bd08      	pop	{r3, pc}
   10c10:	000148cd 	.word	0x000148cd
   10c14:	20000008 	.word	0x20000008

00010c18 <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
   10c18:	b508      	push	{r3, lr}
#endif
}

NRF_STATIC_INLINE bool nrf_clock_event_check(NRF_CLOCK_Type const * p_reg, nrf_clock_event_t event)
{
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   10c1a:	4b11      	ldr	r3, [pc, #68]	; (10c60 <nrf_power_clock_isr+0x48>)
   10c1c:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
   10c1e:	b16a      	cbz	r2, 10c3c <nrf_power_clock_isr+0x24>
    return p_reg->INTENSET & mask;
   10c20:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
   10c24:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
   10c28:	07d1      	lsls	r1, r2, #31
   10c2a:	d507      	bpl.n	10c3c <nrf_power_clock_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   10c2c:	2200      	movs	r2, #0
	struct device *dev = DEVICE_GET(clock_nrf);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   10c2e:	480d      	ldr	r0, [pc, #52]	; (10c64 <nrf_power_clock_isr+0x4c>)
   10c30:	601a      	str	r2, [r3, #0]

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
   10c32:	6883      	ldr	r3, [r0, #8]
   10c34:	7a59      	ldrb	r1, [r3, #9]
   10c36:	b909      	cbnz	r1, 10c3c <nrf_power_clock_isr+0x24>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   10c38:	f003 f866 	bl	13d08 <clkstarted_handle>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   10c3c:	4b0a      	ldr	r3, [pc, #40]	; (10c68 <nrf_power_clock_isr+0x50>)
   10c3e:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
   10c40:	b16a      	cbz	r2, 10c5e <nrf_power_clock_isr+0x46>
    return p_reg->INTENSET & mask;
   10c42:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
   10c46:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
   10c4a:	0792      	lsls	r2, r2, #30
   10c4c:	d507      	bpl.n	10c5e <nrf_power_clock_isr+0x46>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   10c4e:	2200      	movs	r2, #0
					NRF_CLOCK_INT_LF_STARTED_MASK)) {
		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started(dev);
		}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   10c50:	2101      	movs	r1, #1
   10c52:	601a      	str	r2, [r3, #0]
   10c54:	4803      	ldr	r0, [pc, #12]	; (10c64 <nrf_power_clock_isr+0x4c>)
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
   10c56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   10c5a:	f003 b855 	b.w	13d08 <clkstarted_handle>
}
   10c5e:	bd08      	pop	{r3, pc}
   10c60:	50005100 	.word	0x50005100
   10c64:	20001480 	.word	0x20001480
   10c68:	50005104 	.word	0x50005104

00010c6c <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
   10c6c:	2200      	movs	r2, #0
   10c6e:	4b0d      	ldr	r3, [pc, #52]	; (10ca4 <rtc1_nrf_isr+0x38>)
   10c70:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
   10c74:	f04f 0220 	mov.w	r2, #32
   10c78:	f3ef 8111 	mrs	r1, BASEPRI
   10c7c:	f382 8811 	msr	BASEPRI, r2
   10c80:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
   10c84:	4a08      	ldr	r2, [pc, #32]	; (10ca8 <rtc1_nrf_isr+0x3c>)
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   10c86:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
   10c8a:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
   10c8c:	1ac0      	subs	r0, r0, r3
   10c8e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   10c92:	4403      	add	r3, r0
   10c94:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   10c96:	f381 8811 	msr	BASEPRI, r1
   10c9a:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
   10c9e:	f002 b825 	b.w	12cec <z_clock_announce>
   10ca2:	bf00      	nop
   10ca4:	50015000 	.word	0x50015000
   10ca8:	20000024 	.word	0x20000024

00010cac <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
   10cac:	b570      	push	{r4, r5, r6, lr}
   10cae:	4815      	ldr	r0, [pc, #84]	; (10d04 <z_clock_driver_init+0x58>)
   10cb0:	f001 fa4e 	bl	12150 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL);
	if (!clock) {
   10cb4:	b310      	cbz	r0, 10cfc <z_clock_driver_init+0x50>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
   10cb6:	6843      	ldr	r3, [r0, #4]
   10cb8:	2101      	movs	r1, #1
   10cba:	681b      	ldr	r3, [r3, #0]
   10cbc:	4798      	blx	r3
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
   10cbe:	2400      	movs	r4, #0
    p_reg->CC[ch] = cc_val;
   10cc0:	2601      	movs	r6, #1
    p_reg->INTENSET = mask;
   10cc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   10cc6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
   10cca:	4d0f      	ldr	r5, [pc, #60]	; (10d08 <z_clock_driver_init+0x5c>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
   10ccc:	4631      	mov	r1, r6
   10cce:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
   10cd2:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
   10cd6:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   10cda:	4b0c      	ldr	r3, [pc, #48]	; (10d0c <z_clock_driver_init+0x60>)
   10cdc:	2015      	movs	r0, #21
   10cde:	601c      	str	r4, [r3, #0]
   10ce0:	4b0b      	ldr	r3, [pc, #44]	; (10d10 <z_clock_driver_init+0x64>)
   10ce2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   10ce6:	4622      	mov	r2, r4
   10ce8:	f000 fbe0 	bl	114ac <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
   10cec:	2015      	movs	r0, #21
   10cee:	f000 fbcd 	bl	1148c <arch_irq_enable>

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
   10cf2:	4620      	mov	r0, r4
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   10cf4:	4b07      	ldr	r3, [pc, #28]	; (10d14 <z_clock_driver_init+0x68>)
   10cf6:	601e      	str	r6, [r3, #0]
   10cf8:	602e      	str	r6, [r5, #0]
}
   10cfa:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
   10cfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10d00:	e7fb      	b.n	10cfa <z_clock_driver_init+0x4e>
   10d02:	bf00      	nop
   10d04:	00014a94 	.word	0x00014a94
   10d08:	50015000 	.word	0x50015000
   10d0c:	50015140 	.word	0x50015140
   10d10:	e000e100 	.word	0xe000e100
   10d14:	50015008 	.word	0x50015008

00010d18 <z_clock_set_timeout>:
void z_clock_set_timeout(s32_t ticks, bool idle)
{
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
   10d18:	4b25      	ldr	r3, [pc, #148]	; (10db0 <z_clock_set_timeout+0x98>)
{
   10d1a:	b570      	push	{r4, r5, r6, lr}
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
   10d1c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   10d20:	bf08      	it	eq
   10d22:	4618      	moveq	r0, r3
	__asm__ volatile(
   10d24:	f04f 0220 	mov.w	r2, #32
   10d28:	f3ef 8411 	mrs	r4, BASEPRI
   10d2c:	f382 8811 	msr	BASEPRI, r2
   10d30:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
   10d34:	4a1f      	ldr	r2, [pc, #124]	; (10db4 <z_clock_set_timeout+0x9c>)
   10d36:	f8d2 1504 	ldr.w	r1, [r2, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, dt, t = counter();
	u32_t unannounced = counter_sub(t, last_count);
   10d3a:	4a1f      	ldr	r2, [pc, #124]	; (10db8 <z_clock_set_timeout+0xa0>)
   10d3c:	6812      	ldr	r2, [r2, #0]
	return (a - b) & COUNTER_MAX;
   10d3e:	1a8e      	subs	r6, r1, r2
   10d40:	f026 457f 	bic.w	r5, r6, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
   10d44:	0236      	lsls	r6, r6, #8
   10d46:	d41a      	bmi.n	10d7e <z_clock_set_timeout+0x66>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
   10d48:	3801      	subs	r0, #1
   10d4a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   10d4e:	4298      	cmp	r0, r3
   10d50:	bfa8      	it	ge
   10d52:	4618      	movge	r0, r3
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   10d54:	3501      	adds	r5, #1
   10d56:	4428      	add	r0, r5
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
   10d58:	4298      	cmp	r0, r3
   10d5a:	bf94      	ite	ls
   10d5c:	1813      	addls	r3, r2, r0
   10d5e:	18d3      	addhi	r3, r2, r3
	return (a - b) & COUNTER_MAX;
   10d60:	1a59      	subs	r1, r3, r1
   10d62:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
	 * least on nRF52.  Some experimentation on nrf52840 shows
	 * that you need to be early by about 400 processor cycles
	 * (about 1/5th of a RTC cycle) in order to reliably get the
	 * interrupt.  The docs say two cycles, they mean two cycles.
	 */
	if (counter_sub(cyc, t) > 2) {
   10d66:	2902      	cmp	r1, #2
   10d68:	4912      	ldr	r1, [pc, #72]	; (10db4 <z_clock_set_timeout+0x9c>)
   10d6a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   10d6e:	f8c1 2540 	str.w	r2, [r1, #1344]	; 0x540
   10d72:	d906      	bls.n	10d82 <z_clock_set_timeout+0x6a>
	__asm__ volatile(
   10d74:	f384 8811 	msr	BASEPRI, r4
   10d78:	f3bf 8f6f 	isb	sy
	}
#endif

	k_spin_unlock(&lock, key);
#endif /* CONFIG_TICKLESS_KERNEL */
}
   10d7c:	bd70      	pop	{r4, r5, r6, pc}
		ticks = 0;
   10d7e:	2000      	movs	r0, #0
   10d80:	e7e8      	b.n	10d54 <z_clock_set_timeout+0x3c>
     return p_reg->COUNTER;
   10d82:	f8d1 2504 	ldr.w	r2, [r1, #1284]	; 0x504
		if (dt == 0 || dt > 0x7fffff) {
   10d86:	480d      	ldr	r0, [pc, #52]	; (10dbc <z_clock_set_timeout+0xa4>)
	return (a - b) & COUNTER_MAX;
   10d88:	1a9a      	subs	r2, r3, r2
   10d8a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (dt == 0 || dt > 0x7fffff) {
   10d8e:	1e55      	subs	r5, r2, #1
   10d90:	4285      	cmp	r5, r0
   10d92:	d905      	bls.n	10da0 <z_clock_set_timeout+0x88>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   10d94:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   10d98:	4b09      	ldr	r3, [pc, #36]	; (10dc0 <z_clock_set_timeout+0xa8>)
   10d9a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   10d9e:	e7e9      	b.n	10d74 <z_clock_set_timeout+0x5c>
		} else if (dt == 1) {
   10da0:	2a01      	cmp	r2, #1
			set_comparator(cyc + 2);
   10da2:	bf02      	ittt	eq
   10da4:	3302      	addeq	r3, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   10da6:	f023 437f 	biceq.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   10daa:	f8c1 3540 	streq.w	r3, [r1, #1344]	; 0x540
}
   10dae:	e7e1      	b.n	10d74 <z_clock_set_timeout+0x5c>
   10db0:	00fffffe 	.word	0x00fffffe
   10db4:	50015000 	.word	0x50015000
   10db8:	20000024 	.word	0x20000024
   10dbc:	007ffffe 	.word	0x007ffffe
   10dc0:	e000e100 	.word	0xe000e100

00010dc4 <z_clock_elapsed>:
	__asm__ volatile(
   10dc4:	f04f 0220 	mov.w	r2, #32
   10dc8:	f3ef 8311 	mrs	r3, BASEPRI
   10dcc:	f382 8811 	msr	BASEPRI, r2
   10dd0:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
   10dd4:	4a06      	ldr	r2, [pc, #24]	; (10df0 <z_clock_elapsed+0x2c>)
   10dd6:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
   10dda:	4a06      	ldr	r2, [pc, #24]	; (10df4 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
   10ddc:	6812      	ldr	r2, [r2, #0]
   10dde:	1a80      	subs	r0, r0, r2
   10de0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
   10de4:	f383 8811 	msr	BASEPRI, r3
   10de8:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   10dec:	4770      	bx	lr
   10dee:	bf00      	nop
   10df0:	50015000 	.word	0x50015000
   10df4:	20000024 	.word	0x20000024

00010df8 <config_regions>:
}
#endif /* CONFIG_ARM_FIRMWARE_HAS_SECURE_ENTRY_FUNCS */


static void config_regions(bool ram, size_t start, size_t end, u32_t perm)
{
   10df8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const size_t region_size = ram ? RAM_SECURE_ATTRIBUTION_REGION_SIZE
					: FLASH_SECURE_ATTRIBUTION_REGION_SIZE;
   10dfa:	2800      	cmp	r0, #0
{
   10dfc:	461c      	mov	r4, r3

	for (size_t i = start; i < end; i++) {
   10dfe:	460d      	mov	r5, r1
					: FLASH_SECURE_ATTRIBUTION_REGION_SIZE;
   10e00:	bf14      	ite	ne
   10e02:	f44f 5300 	movne.w	r3, #8192	; 0x2000
   10e06:	f44f 4300 	moveq.w	r3, #32768	; 0x8000
	for (size_t i = start; i < end; i++) {
   10e0a:	4e20      	ldr	r6, [pc, #128]	; (10e8c <config_regions+0x94>)
   10e0c:	4295      	cmp	r5, r2
   10e0e:	d332      	bcc.n	10e76 <config_regions+0x7e>
		} else {
			NRF_SPU->FLASHREGION[i].PERM = perm;
		}
	}

	PRINT("%02u %02u 0x%05x 0x%05x \t", start, end - 1,
   10e10:	fb02 f003 	mul.w	r0, r2, r3
   10e14:	3a01      	subs	r2, #1
   10e16:	434b      	muls	r3, r1
   10e18:	9000      	str	r0, [sp, #0]
   10e1a:	481d      	ldr	r0, [pc, #116]	; (10e90 <config_regions+0x98>)
   10e1c:	f002 ff11 	bl	13c42 <printk>
				region_size * start, region_size * end);
	PRINT("%s", perm & (ram ? SRAM_SECURE : FLASH_SECURE) ? "Secure\t\t" :
   10e20:	4b1c      	ldr	r3, [pc, #112]	; (10e94 <config_regions+0x9c>)
   10e22:	f014 0f10 	tst.w	r4, #16
   10e26:	491c      	ldr	r1, [pc, #112]	; (10e98 <config_regions+0xa0>)
   10e28:	481c      	ldr	r0, [pc, #112]	; (10e9c <config_regions+0xa4>)
   10e2a:	bf08      	it	eq
   10e2c:	4619      	moveq	r1, r3
   10e2e:	f002 ff08 	bl	13c42 <printk>
								"Non-Secure\t");
	PRINT("%c", perm & (ram ? SRAM_READ : FLASH_READ)  ? 'r' : '-');
   10e32:	f014 0f04 	tst.w	r4, #4
   10e36:	bf14      	ite	ne
   10e38:	2172      	movne	r1, #114	; 0x72
   10e3a:	212d      	moveq	r1, #45	; 0x2d
   10e3c:	4818      	ldr	r0, [pc, #96]	; (10ea0 <config_regions+0xa8>)
   10e3e:	f002 ff00 	bl	13c42 <printk>
	PRINT("%c", perm & (ram ? SRAM_WRITE : FLASH_WRITE) ? 'w' : '-');
   10e42:	f014 0f02 	tst.w	r4, #2
   10e46:	bf14      	ite	ne
   10e48:	2177      	movne	r1, #119	; 0x77
   10e4a:	212d      	moveq	r1, #45	; 0x2d
   10e4c:	4814      	ldr	r0, [pc, #80]	; (10ea0 <config_regions+0xa8>)
   10e4e:	f002 fef8 	bl	13c42 <printk>
	PRINT("%c", perm & (ram ? SRAM_EXEC : FLASH_EXEC)  ? 'x' : '-');
   10e52:	f014 0f01 	tst.w	r4, #1
   10e56:	bf0c      	ite	eq
   10e58:	212d      	moveq	r1, #45	; 0x2d
   10e5a:	2178      	movne	r1, #120	; 0x78
   10e5c:	4810      	ldr	r0, [pc, #64]	; (10ea0 <config_regions+0xa8>)
   10e5e:	f002 fef0 	bl	13c42 <printk>
	PRINT("%c", perm & (ram ? SRAM_LOCK : FLASH_LOCK)  ? 'l' : '-');
   10e62:	216c      	movs	r1, #108	; 0x6c
   10e64:	480e      	ldr	r0, [pc, #56]	; (10ea0 <config_regions+0xa8>)
   10e66:	f002 feec 	bl	13c42 <printk>
	PRINT("\n");
   10e6a:	480e      	ldr	r0, [pc, #56]	; (10ea4 <config_regions+0xac>)
}
   10e6c:	b003      	add	sp, #12
   10e6e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	PRINT("\n");
   10e72:	f002 bee6 	b.w	13c42 <printk>
		if (ram) {
   10e76:	b128      	cbz	r0, 10e84 <config_regions+0x8c>
			NRF_SPU->RAMREGION[i].PERM = perm;
   10e78:	f505 77e0 	add.w	r7, r5, #448	; 0x1c0
			NRF_SPU->FLASHREGION[i].PERM = perm;
   10e7c:	f846 4027 	str.w	r4, [r6, r7, lsl #2]
	for (size_t i = start; i < end; i++) {
   10e80:	3501      	adds	r5, #1
   10e82:	e7c3      	b.n	10e0c <config_regions+0x14>
			NRF_SPU->FLASHREGION[i].PERM = perm;
   10e84:	f505 77c0 	add.w	r7, r5, #384	; 0x180
   10e88:	e7f8      	b.n	10e7c <config_regions+0x84>
   10e8a:	bf00      	nop
   10e8c:	50003000 	.word	0x50003000
   10e90:	000148f3 	.word	0x000148f3
   10e94:	000148e7 	.word	0x000148e7
   10e98:	000148de 	.word	0x000148de
   10e9c:	00014a72 	.word	0x00014a72
   10ea0:	0001490d 	.word	0x0001490d
   10ea4:	00014c41 	.word	0x00014c41

00010ea8 <spm_config_peripheral.constprop.0>:
		     SPU_PERIPHID_PERM_SECUREMAPPING_Split;

	return present && (usel || split);
}

static int spm_config_peripheral(u8_t id, bool dma_present)
   10ea8:	b508      	push	{r3, lr}
	 * Assign DMA capabilities and lock down the attribution.
	 *
	 * Note: the function assumes that the peripheral ID matches
	 * the IRQ line.
	 */
	NVIC_DisableIRQ(id);
   10eaa:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   10eac:	2b00      	cmp	r3, #0
   10eae:	db0c      	blt.n	10eca <spm_config_peripheral.constprop.0+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   10eb0:	2201      	movs	r2, #1
   10eb2:	f000 011f 	and.w	r1, r0, #31
   10eb6:	408a      	lsls	r2, r1
   10eb8:	095b      	lsrs	r3, r3, #5
   10eba:	4910      	ldr	r1, [pc, #64]	; (10efc <spm_config_peripheral.constprop.0+0x54>)
   10ebc:	3320      	adds	r3, #32
   10ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   10ec2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   10ec6:	f3bf 8f6f 	isb	sy
	const u32_t perm = NRF_SPU->PERIPHID[id].PERM;
   10eca:	0083      	lsls	r3, r0, #2
   10ecc:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
   10ed0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
   10ed4:	2831      	cmp	r0, #49	; 0x31
	const u32_t perm = NRF_SPU->PERIPHID[id].PERM;
   10ed6:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
   10eda:	d006      	beq.n	10eea <spm_config_peripheral.constprop.0+0x42>
	return present && (usel || split);
   10edc:	2a00      	cmp	r2, #0
   10ede:	da07      	bge.n	10ef0 <spm_config_peripheral.constprop.0+0x48>
	bool usel = (perm & SPU_PERIPHID_PERM_SECUREMAPPING_Msk) ==
   10ee0:	f002 0203 	and.w	r2, r2, #3
	return present && (usel || split);
   10ee4:	3a02      	subs	r2, #2
   10ee6:	2a01      	cmp	r2, #1
   10ee8:	d802      	bhi.n	10ef0 <spm_config_peripheral.constprop.0+0x48>

	if (usel_or_split(id)) {
		NRF_SPU->PERIPHID[id].PERM = PERIPH_PRESENT | PERIPH_NONSEC |
   10eea:	4a05      	ldr	r2, [pc, #20]	; (10f00 <spm_config_peripheral.constprop.0+0x58>)
   10eec:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	}

	/* Even for non-present peripherals we force IRQs to be routed
	 * to Non-Secure state.
	 */
	irq_target_state_set(id, 0);
   10ef0:	2100      	movs	r1, #0
   10ef2:	f003 f809 	bl	13f08 <irq_target_state_set>
	return 0;
}
   10ef6:	2000      	movs	r0, #0
   10ef8:	bd08      	pop	{r3, pc}
   10efa:	bf00      	nop
   10efc:	e000e100 	.word	0xe000e100
   10f00:	80000100 	.word	0x80000100

00010f04 <spm_jump>:
	tz_nonsecure_fpu_access_enable();
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */
}

void spm_jump(void)
{
   10f04:	b530      	push	{r4, r5, lr}
	 * The assumption is that the MSP is located at VTOR_NS[0].
	 */
	u32_t *vtor_ns = (u32_t *)NON_SECURE_APP_ADDRESS;

	PRINT("SPM: NS image at 0x%x\n", (u32_t)vtor_ns);
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
   10f06:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
{
   10f0a:	b085      	sub	sp, #20
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
   10f0c:	4d2e      	ldr	r5, [pc, #184]	; (10fc8 <spm_jump+0xc4>)
	PRINT("SPM: NS image at 0x%x\n", (u32_t)vtor_ns);
   10f0e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   10f12:	482e      	ldr	r0, [pc, #184]	; (10fcc <spm_jump+0xc8>)
   10f14:	f002 fe95 	bl	13c42 <printk>
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
   10f18:	6821      	ldr	r1, [r4, #0]
   10f1a:	482d      	ldr	r0, [pc, #180]	; (10fd0 <spm_jump+0xcc>)
   10f1c:	f002 fe91 	bl	13c42 <printk>
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
   10f20:	6829      	ldr	r1, [r5, #0]
   10f22:	482c      	ldr	r0, [pc, #176]	; (10fd4 <spm_jump+0xd0>)
   10f24:	f002 fe8d 	bl	13c42 <printk>

	/* Configure Non-Secure stack */
	tz_nonsecure_setup_conf_t spm_ns_conf = {
   10f28:	2210      	movs	r2, #16
   10f2a:	2100      	movs	r1, #0
   10f2c:	4668      	mov	r0, sp
   10f2e:	f003 f8b1 	bl	14094 <memset>
		.vtor_ns = (u32_t)vtor_ns,
		.msp_ns = vtor_ns[0],
   10f32:	6823      	ldr	r3, [r4, #0]
	tz_nonsecure_state_setup(spm_ns_conf);
   10f34:	4668      	mov	r0, sp
	tz_nonsecure_setup_conf_t spm_ns_conf = {
   10f36:	9300      	str	r3, [sp, #0]
   10f38:	9402      	str	r4, [sp, #8]
	tz_nonsecure_state_setup(spm_ns_conf);
   10f3a:	f000 fe67 	bl	11c0c <tz_nonsecure_state_setup>
	tz_nonsecure_exception_prio_config(1);
   10f3e:	2001      	movs	r0, #1
   10f40:	f000 fe94 	bl	11c6c <tz_nonsecure_exception_prio_config>
	tz_nbanked_exception_target_state_set(0);
   10f44:	2000      	movs	r0, #0
   10f46:	f000 fe7d 	bl	11c44 <tz_nbanked_exception_target_state_set>
	tz_nonsecure_system_reset_req_block(
   10f4a:	2000      	movs	r0, #0
   10f4c:	f000 fea2 	bl	11c94 <tz_nonsecure_system_reset_req_block>
	tz_sau_configure(0, 1);
   10f50:	2101      	movs	r1, #1
   10f52:	2000      	movs	r0, #0
   10f54:	f000 febc 	bl	11cd0 <tz_sau_configure>
	tz_nonsecure_fpu_access_enable();
   10f58:	f000 feb0 	bl	11cbc <tz_nonsecure_fpu_access_enable>

	spm_configure_ns(&spm_ns_conf);

	/* Generate function pointer for Non-Secure function call. */
	TZ_NONSECURE_FUNC_PTR_DECLARE(reset_ns);
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
   10f5c:	682c      	ldr	r4, [r5, #0]

	if (TZ_NONSECURE_FUNC_PTR_IS_NS(reset_ns)) {
		PRINT("SPM: prepare to jump to Non-Secure image.\n");
   10f5e:	481e      	ldr	r0, [pc, #120]	; (10fd8 <spm_jump+0xd4>)
   10f60:	f002 fe6f 	bl	13c42 <printk>
		/* Note: Move UARTE0 before jumping, if it is
		 * to be used on the Non-Secure domain.
		 */

		/* Configure UARTE0 as non-secure */
		spm_config_peripheral(
   10f64:	2008      	movs	r0, #8
   10f66:	f7ff ff9f 	bl	10ea8 <spm_config_peripheral.constprop.0>
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
   10f6a:	f024 0401 	bic.w	r4, r4, #1
  __ASM volatile ("dsb 0xF":::"memory");
   10f6e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   10f72:	f3bf 8f6f 	isb	sy

		__DSB();
		__ISB();

		/* Jump to Non-Secure firmware */
		reset_ns();
   10f76:	0864      	lsrs	r4, r4, #1
   10f78:	0064      	lsls	r4, r4, #1
   10f7a:	4620      	mov	r0, r4
   10f7c:	4621      	mov	r1, r4
   10f7e:	4622      	mov	r2, r4
   10f80:	4623      	mov	r3, r4
   10f82:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   10f86:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
   10f8a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
   10f8e:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
   10f92:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
   10f96:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
   10f9a:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
   10f9e:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
   10fa2:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
   10fa6:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
   10faa:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
   10fae:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
   10fb2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   10fb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   10fba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   10fbe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   10fc2:	f7ff fbb5 	bl	10730 <__gnu_cmse_nonsecure_call>

		CODE_UNREACHABLE;
   10fc6:	bf00      	nop
   10fc8:	0001c204 	.word	0x0001c204
   10fcc:	00014910 	.word	0x00014910
   10fd0:	00014927 	.word	0x00014927
   10fd4:	0001493c 	.word	0x0001493c
   10fd8:	0001495a 	.word	0x0001495a

00010fdc <spm_config>:
		      (u32_t)reset_ns);
	}
}

void spm_config(void)
{
   10fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("Flash regions\t\tDomain\t\tPermissions\n");
   10fe0:	483b      	ldr	r0, [pc, #236]	; (110d0 <spm_config+0xf4>)
   10fe2:	f002 fe2e 	bl	13c42 <printk>
	config_regions(false, 0, NON_SECURE_FLASH_REGION_INDEX,
   10fe6:	2100      	movs	r1, #0
   10fe8:	f240 1317 	movw	r3, #279	; 0x117
   10fec:	4608      	mov	r0, r1
   10fee:	2203      	movs	r2, #3
   10ff0:	f7ff ff02 	bl	10df8 <config_regions>
	config_regions(false, NON_SECURE_FLASH_REGION_INDEX,
   10ff4:	f240 1307 	movw	r3, #263	; 0x107
   10ff8:	2220      	movs	r2, #32
   10ffa:	2103      	movs	r1, #3
   10ffc:	2000      	movs	r0, #0
   10ffe:	f7ff fefb 	bl	10df8 <config_regions>
	PRINT("\n");
   11002:	4834      	ldr	r0, [pc, #208]	; (110d4 <spm_config+0xf8>)
   11004:	f002 fe1d 	bl	13c42 <printk>
	u32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
   11008:	4b33      	ldr	r3, [pc, #204]	; (110d8 <spm_config+0xfc>)
                                            bool               lock_conf)
{
    NRFX_ASSERT(!(p_reg->FLASHNSC[flash_nsc_id].REGION & SPU_FLASHNSC_REGION_LOCK_Msk));
    NRFX_ASSERT(!(p_reg->FLASHNSC[flash_nsc_id].SIZE & SPU_FLASHNSC_SIZE_LOCK_Msk));

    p_reg->FLASHNSC[flash_nsc_id].REGION = (uint32_t)region_number |
   1100a:	4a34      	ldr	r2, [pc, #208]	; (110dc <spm_config+0x100>)
   1100c:	f3c3 31c4 	ubfx	r1, r3, #15, #5
   11010:	f3c3 030e 	ubfx	r3, r3, #0, #15
   11014:	f5c3 4300 	rsb	r3, r3, #32768	; 0x8000
        (lock_conf ? SPU_FLASHNSC_REGION_LOCK_Msk : 0);
    p_reg->FLASHNSC[flash_nsc_id].SIZE = (uint32_t)flash_nsc_size |
   11018:	f3c3 1343 	ubfx	r3, r3, #5, #4
    p_reg->FLASHNSC[flash_nsc_id].REGION = (uint32_t)region_number |
   1101c:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->FLASHNSC[flash_nsc_id].SIZE = (uint32_t)flash_nsc_size |
   11020:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	PRINT("Non-secure callable region 0 placed in flash region %d with size %d.\n",
   11024:	f8d2 1500 	ldr.w	r1, [r2, #1280]	; 0x500
   11028:	f8d2 2504 	ldr.w	r2, [r2, #1284]	; 0x504
   1102c:	482c      	ldr	r0, [pc, #176]	; (110e0 <spm_config+0x104>)
   1102e:	0152      	lsls	r2, r2, #5
   11030:	f002 fe07 	bl	13c42 <printk>
	PRINT("\n");
   11034:	4827      	ldr	r0, [pc, #156]	; (110d4 <spm_config+0xf8>)
   11036:	f002 fe04 	bl	13c42 <printk>
	int err = spm_secure_services_init();
   1103a:	f002 ff17 	bl	13e6c <spm_secure_services_init>
	if (err != 0) {
   1103e:	4601      	mov	r1, r0
   11040:	b110      	cbz	r0, 11048 <spm_config+0x6c>
		PRINT("Could not initialize secure services (err %d).\n", err);
   11042:	4828      	ldr	r0, [pc, #160]	; (110e4 <spm_config+0x108>)
   11044:	f002 fdfd 	bl	13c42 <printk>
	NRF_SPU->DPPI[0].PERM = mask;
   11048:	2400      	movs	r4, #0
	PRINT("SRAM region\t\tDomain\t\tPermissions\n");
   1104a:	4827      	ldr	r0, [pc, #156]	; (110e8 <spm_config+0x10c>)
   1104c:	f002 fdf9 	bl	13c42 <printk>
	config_regions(true, 0, NON_SECURE_RAM_REGION_INDEX,
   11050:	f240 1317 	movw	r3, #279	; 0x117
   11054:	2208      	movs	r2, #8
   11056:	2100      	movs	r1, #0
   11058:	2001      	movs	r0, #1
   1105a:	f7ff fecd 	bl	10df8 <config_regions>
	NRF_SPU->DPPI[0].PERM = mask;
   1105e:	4d1f      	ldr	r5, [pc, #124]	; (110dc <spm_config+0x100>)
	config_regions(true, NON_SECURE_RAM_REGION_INDEX,
   11060:	f240 1307 	movw	r3, #263	; 0x107
   11064:	2220      	movs	r2, #32
   11066:	2108      	movs	r1, #8
   11068:	2001      	movs	r0, #1
   1106a:	f7ff fec5 	bl	10df8 <config_regions>
	PRINT("\n");
   1106e:	4819      	ldr	r0, [pc, #100]	; (110d4 <spm_config+0xf8>)
   11070:	f002 fde7 	bl	13c42 <printk>
	NRF_SPU->DPPI[0].PERM = mask;
   11074:	f8c5 4480 	str.w	r4, [r5, #1152]	; 0x480
	PRINT("Peripheral\t\tDomain\t\tStatus\n");
   11078:	481c      	ldr	r0, [pc, #112]	; (110ec <spm_config+0x110>)
   1107a:	f002 fde2 	bl	13c42 <printk>
		PRINT("%02u %-21s%s", i, periph[i].name,
   1107e:	4f1c      	ldr	r7, [pc, #112]	; (110f0 <spm_config+0x114>)
		NRF_SPU->GPIOPORT[0].PERM = 0;
   11080:	f8c5 44c0 	str.w	r4, [r5, #1216]	; 0x4c0
		PRINT("%02u %-21s%s", i, periph[i].name,
   11084:	f8df 807c 	ldr.w	r8, [pc, #124]	; 11104 <spm_config+0x128>
   11088:	4d1a      	ldr	r5, [pc, #104]	; (110f4 <spm_config+0x118>)
   1108a:	f8df 907c 	ldr.w	r9, [pc, #124]	; 11108 <spm_config+0x12c>
   1108e:	796e      	ldrb	r6, [r5, #5]
   11090:	4621      	mov	r1, r4
   11092:	2e00      	cmp	r6, #0
   11094:	bf14      	ite	ne
   11096:	463b      	movne	r3, r7
   11098:	4643      	moveq	r3, r8
   1109a:	4648      	mov	r0, r9
   1109c:	682a      	ldr	r2, [r5, #0]
   1109e:	f002 fdd0 	bl	13c42 <printk>
		if (!periph[i].nonsecure) {
   110a2:	b966      	cbnz	r6, 110be <spm_config+0xe2>
			PRINT("\tSKIP\n");
   110a4:	4814      	ldr	r0, [pc, #80]	; (110f8 <spm_config+0x11c>)
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
   110a6:	3401      	adds	r4, #1
			PRINT("\tOK\n");
   110a8:	f002 fdcb 	bl	13c42 <printk>
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
   110ac:	2c1a      	cmp	r4, #26
   110ae:	f105 0508 	add.w	r5, r5, #8
   110b2:	d1ec      	bne.n	1108e <spm_config+0xb2>
	PRINT("\n");
   110b4:	4807      	ldr	r0, [pc, #28]	; (110d4 <spm_config+0xf8>)
	spm_config_flash();
	spm_config_sram();
	spm_config_peripherals();
}
   110b6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("\n");
   110ba:	f002 bdc2 	b.w	13c42 <printk>
		err = spm_config_peripheral(periph[i].id, false);
   110be:	7928      	ldrb	r0, [r5, #4]
   110c0:	f7ff fef2 	bl	10ea8 <spm_config_peripheral.constprop.0>
		if (err) {
   110c4:	b108      	cbz	r0, 110ca <spm_config+0xee>
			PRINT("\tERROR\n");
   110c6:	480d      	ldr	r0, [pc, #52]	; (110fc <spm_config+0x120>)
   110c8:	e7ed      	b.n	110a6 <spm_config+0xca>
			PRINT("\tOK\n");
   110ca:	480d      	ldr	r0, [pc, #52]	; (11100 <spm_config+0x124>)
   110cc:	e7eb      	b.n	110a6 <spm_config+0xca>
   110ce:	bf00      	nop
   110d0:	00014990 	.word	0x00014990
   110d4:	00014c41 	.word	0x00014c41
   110d8:	00017fe0 	.word	0x00017fe0
   110dc:	50003000 	.word	0x50003000
   110e0:	000149b4 	.word	0x000149b4
   110e4:	000149fa 	.word	0x000149fa
   110e8:	00014a2a 	.word	0x00014a2a
   110ec:	00014a4c 	.word	0x00014a4c
   110f0:	00014985 	.word	0x00014985
   110f4:	00014674 	.word	0x00014674
   110f8:	00014a75 	.word	0x00014a75
   110fc:	00014a7c 	.word	0x00014a7c
   11100:	00014a84 	.word	0x00014a84
   11104:	000148eb 	.word	0x000148eb
   11108:	00014a68 	.word	0x00014a68

0001110c <__acle_se_spm_request_read>:
};


__TZ_NONSECURE_ENTRY_FUNC
int spm_request_read(void *destination, u32_t addr, size_t len)
{
   1110c:	b510      	push	{r4, lr}
		 .size = FICR_PUBLIC_SIZE},
		{.start = FICR_RESTRICTED_ADDR,
		 .size = FICR_RESTRICTED_SIZE},
	};

	if (destination == NULL || len <= 0) {
   1110e:	2800      	cmp	r0, #0
   11110:	d050      	beq.n	111b4 <__acle_se_spm_request_read+0xa8>
   11112:	2a00      	cmp	r2, #0
   11114:	d04e      	beq.n	111b4 <__acle_se_spm_request_read+0xa8>

	for (size_t i = 0; i < ARRAY_SIZE(ranges); i++) {
		u32_t start = ranges[i].start;
		u32_t size = ranges[i].size;

		if (addr >= start && addr + len <= start + size) {
   11116:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   1111a:	d348      	bcc.n	111ae <__acle_se_spm_request_read+0xa2>
   1111c:	1853      	adds	r3, r2, r1
   1111e:	f5b3 3f81 	cmp.w	r3, #66048	; 0x10200
   11122:	d906      	bls.n	11132 <__acle_se_spm_request_read+0x26>
   11124:	4c25      	ldr	r4, [pc, #148]	; (111bc <__acle_se_spm_request_read+0xb0>)
   11126:	42a1      	cmp	r1, r4
   11128:	d93b      	bls.n	111a2 <__acle_se_spm_request_read+0x96>
   1112a:	f604 241d 	addw	r4, r4, #2589	; 0xa1d
   1112e:	42a3      	cmp	r3, r4
   11130:	d83a      	bhi.n	111a8 <__acle_se_spm_request_read+0x9c>
			memcpy(destination, (const void *)addr, len);
   11132:	f002 ff84 	bl	1403e <memcpy>
			return 0;
   11136:	2000      	movs	r0, #0
		}
	}

	return -EPERM;
}
   11138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1113c:	4671      	mov	r1, lr
   1113e:	4672      	mov	r2, lr
   11140:	4673      	mov	r3, lr
   11142:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   11146:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
   1114a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
   1114e:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
   11152:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
   11156:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
   1115a:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
   1115e:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
   11162:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
   11166:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
   1116a:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
   1116e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
   11172:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   11176:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   1117a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   1117e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   11182:	f38e 8c00 	msr	CPSR_fs, lr
   11186:	b410      	push	{r4}
   11188:	eef1 ca10 	vmrs	ip, fpscr
   1118c:	f64f 7460 	movw	r4, #65376	; 0xff60
   11190:	f6c0 74ff 	movt	r4, #4095	; 0xfff
   11194:	ea0c 0c04 	and.w	ip, ip, r4
   11198:	eee1 ca10 	vmsr	fpscr, ip
   1119c:	bc10      	pop	{r4}
   1119e:	46f4      	mov	ip, lr
   111a0:	4774      	bxns	lr
		if (addr >= start && addr + len <= start + size) {
   111a2:	4c07      	ldr	r4, [pc, #28]	; (111c0 <__acle_se_spm_request_read+0xb4>)
   111a4:	42a1      	cmp	r1, r4
   111a6:	d902      	bls.n	111ae <__acle_se_spm_request_read+0xa2>
   111a8:	4c06      	ldr	r4, [pc, #24]	; (111c4 <__acle_se_spm_request_read+0xb8>)
   111aa:	42a3      	cmp	r3, r4
   111ac:	d9c1      	bls.n	11132 <__acle_se_spm_request_read+0x26>
	return -EPERM;
   111ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   111b2:	e7c1      	b.n	11138 <__acle_se_spm_request_read+0x2c>
		return -EINVAL;
   111b4:	f06f 0015 	mvn.w	r0, #21
   111b8:	e7be      	b.n	11138 <__acle_se_spm_request_read+0x2c>
   111ba:	bf00      	nop
   111bc:	00ff0203 	.word	0x00ff0203
   111c0:	00ff012f 	.word	0x00ff012f
   111c4:	00ff0138 	.word	0x00ff0138

000111c8 <__acle_se_spm_firmware_info>:


#ifdef CONFIG_SPM_SERVICE_FIND_FIRMWARE_INFO
__TZ_NONSECURE_ENTRY_FUNC
int spm_firmware_info(u32_t fw_address, struct fw_info *info)
{
   111c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   111cc:	4681      	mov	r9, r0
	const struct fw_info *tmp_info;

	if (info == NULL) {
   111ce:	460e      	mov	r6, r1
{
   111d0:	b085      	sub	sp, #20
	if (info == NULL) {
   111d2:	2900      	cmp	r1, #0
   111d4:	d054      	beq.n	11280 <__acle_se_spm_firmware_info+0xb8>
 */
static inline const struct fw_info *fw_info_find(u32_t firmware_address)
{
	const struct fw_info *finfo;

	for (u32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
   111d6:	f04f 0800 	mov.w	r8, #0
   111da:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 11294 <__acle_se_spm_firmware_info+0xcc>
	const u32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
   111de:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 11298 <__acle_se_spm_firmware_info+0xd0>
   111e2:	af01      	add	r7, sp, #4
		finfo = fw_info_check(firmware_address +
						fw_info_allowed_offsets[i]);
   111e4:	f85b 5b04 	ldr.w	r5, [fp], #4
	const u32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
   111e8:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
		finfo = fw_info_check(firmware_address +
   111ec:	444d      	add	r5, r9
	const u32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
   111ee:	e887 0007 	stmia.w	r7, {r0, r1, r2}
	if (memcmp(finfo->magic, fw_info_magic, CONFIG_FW_INFO_MAGIC_LEN)
   111f2:	220c      	movs	r2, #12
   111f4:	4639      	mov	r1, r7
   111f6:	4628      	mov	r0, r5
   111f8:	f002 fefa 	bl	13ff0 <memcmp>
   111fc:	4604      	mov	r4, r0
   111fe:	b908      	cbnz	r0, 11204 <__acle_se_spm_firmware_info+0x3c>
		if (finfo) {
   11200:	2d00      	cmp	r5, #0
   11202:	d140      	bne.n	11286 <__acle_se_spm_firmware_info+0xbe>
	for (u32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
   11204:	f108 0801 	add.w	r8, r8, #1
   11208:	f1b8 0f05 	cmp.w	r8, #5
   1120c:	d1ea      	bne.n	111e4 <__acle_se_spm_firmware_info+0x1c>
	if (tmp_info != NULL) {
		memcpy(info, tmp_info, sizeof(*tmp_info));
		return 0;
	}

	return -EFAULT;
   1120e:	f06f 040d 	mvn.w	r4, #13
}
   11212:	4620      	mov	r0, r4
   11214:	b005      	add	sp, #20
   11216:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   1121a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
   1121e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
   11222:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
   11226:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
   1122a:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
   1122e:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
   11232:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
   11236:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
   1123a:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
   1123e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
   11242:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
   11246:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   1124a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   1124e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   11252:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11256:	4671      	mov	r1, lr
   11258:	4672      	mov	r2, lr
   1125a:	4673      	mov	r3, lr
   1125c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   11260:	f38e 8c00 	msr	CPSR_fs, lr
   11264:	b410      	push	{r4}
   11266:	eef1 ca10 	vmrs	ip, fpscr
   1126a:	f64f 7460 	movw	r4, #65376	; 0xff60
   1126e:	f6c0 74ff 	movt	r4, #4095	; 0xfff
   11272:	ea0c 0c04 	and.w	ip, ip, r4
   11276:	eee1 ca10 	vmsr	fpscr, ip
   1127a:	bc10      	pop	{r4}
   1127c:	46f4      	mov	ip, lr
   1127e:	4774      	bxns	lr
		return -EINVAL;
   11280:	f06f 0415 	mvn.w	r4, #21
   11284:	e7c5      	b.n	11212 <__acle_se_spm_firmware_info+0x4a>
		memcpy(info, tmp_info, sizeof(*tmp_info));
   11286:	223c      	movs	r2, #60	; 0x3c
   11288:	4629      	mov	r1, r5
   1128a:	4630      	mov	r0, r6
   1128c:	f002 fed7 	bl	1403e <memcpy>
		return 0;
   11290:	e7bf      	b.n	11212 <__acle_se_spm_firmware_info+0x4a>
   11292:	bf00      	nop
   11294:	00014744 	.word	0x00014744
   11298:	00014624 	.word	0x00014624

0001129c <nrf_cc310_platform_abort_init>:

/** @brief Function to initialize the nrf_cc310_platform abort APIs.
 */
void nrf_cc310_platform_abort_init(void)
{
	nrf_cc310_platform_set_abort(&apis);
   1129c:	4801      	ldr	r0, [pc, #4]	; (112a4 <nrf_cc310_platform_abort_init+0x8>)
   1129e:	f001 bf91 	b.w	131c4 <nrf_cc310_platform_set_abort>
   112a2:	bf00      	nop
   112a4:	00014758 	.word	0x00014758

000112a8 <mutex_unlock>:
}


/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock(nrf_cc310_platform_mutex_t *mutex) {
   112a8:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   112aa:	b130      	cbz	r0, 112ba <mutex_unlock+0x12>
        return NRF_CC310_PLATFORM_ERROR_PARAM_NULL;
    }

    /* Ensure that the mutex has been initialized */
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID) {
   112ac:	6843      	ldr	r3, [r0, #4]
   112ae:	b13b      	cbz	r3, 112c0 <mutex_unlock+0x18>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    }

    p_mutex = (struct k_mutex *)mutex->mutex;
   112b0:	6800      	ldr	r0, [r0, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
   112b2:	f001 f94b 	bl	1254c <z_impl_k_mutex_unlock>

    k_mutex_unlock(p_mutex);
    return NRF_CC310_PLATFORM_SUCCESS;
   112b6:	2000      	movs	r0, #0
}
   112b8:	bd08      	pop	{r3, pc}
        return NRF_CC310_PLATFORM_ERROR_PARAM_NULL;
   112ba:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   112be:	e7fb      	b.n	112b8 <mutex_unlock+0x10>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   112c0:	4800      	ldr	r0, [pc, #0]	; (112c4 <mutex_unlock+0x1c>)
   112c2:	e7f9      	b.n	112b8 <mutex_unlock+0x10>
   112c4:	ffff8fea 	.word	0xffff8fea

000112c8 <mutex_free>:
static void mutex_free(nrf_cc310_platform_mutex_t *mutex) {
   112c8:	b538      	push	{r3, r4, r5, lr}
    if (mutex == NULL) {
   112ca:	4604      	mov	r4, r0
   112cc:	b918      	cbnz	r0, 112d6 <mutex_free+0xe>
        platform_abort_apis.abort_fn(
   112ce:	4b0b      	ldr	r3, [pc, #44]	; (112fc <mutex_free+0x34>)
   112d0:	480b      	ldr	r0, [pc, #44]	; (11300 <mutex_free+0x38>)
   112d2:	685b      	ldr	r3, [r3, #4]
   112d4:	4798      	blx	r3
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID) {
   112d6:	6865      	ldr	r5, [r4, #4]
   112d8:	b155      	cbz	r5, 112f0 <mutex_free+0x28>
    if ((mutex->flags & NRF_CC310_PLATFORM_MUTEX_MASK_IS_ALLOCATED) == 0) {
   112da:	f015 0502 	ands.w	r5, r5, #2
   112de:	6820      	ldr	r0, [r4, #0]
   112e0:	d107      	bne.n	112f2 <mutex_free+0x2a>
        k_mem_slab_free(&mutex_slab, mutex->mutex);
   112e2:	4601      	mov	r1, r0
   112e4:	4807      	ldr	r0, [pc, #28]	; (11304 <mutex_free+0x3c>)
   112e6:	f001 f891 	bl	1240c <k_mem_slab_free>
        mutex->mutex = NULL;
   112ea:	6025      	str	r5, [r4, #0]
    mutex->flags = NRF_CC310_PLATFORM_MUTEX_MASK_INVALID;
   112ec:	2300      	movs	r3, #0
   112ee:	6063      	str	r3, [r4, #4]
}
   112f0:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   112f2:	2214      	movs	r2, #20
   112f4:	2100      	movs	r1, #0
   112f6:	f002 fecd 	bl	14094 <memset>
   112fa:	e7f7      	b.n	112ec <mutex_free+0x24>
   112fc:	20001424 	.word	0x20001424
   11300:	00014b85 	.word	0x00014b85
   11304:	20000028 	.word	0x20000028

00011308 <mutex_init>:
static void mutex_init(nrf_cc310_platform_mutex_t *mutex) {
   11308:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   1130a:	4604      	mov	r4, r0
   1130c:	b918      	cbnz	r0, 11316 <mutex_init+0xe>
        platform_abort_apis.abort_fn(
   1130e:	4b13      	ldr	r3, [pc, #76]	; (1135c <mutex_init+0x54>)
   11310:	4813      	ldr	r0, [pc, #76]	; (11360 <mutex_init+0x58>)
   11312:	685b      	ldr	r3, [r3, #4]
   11314:	4798      	blx	r3
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID &&
   11316:	6863      	ldr	r3, [r4, #4]
   11318:	b9bb      	cbnz	r3, 1134a <mutex_init+0x42>
   1131a:	6823      	ldr	r3, [r4, #0]
   1131c:	b9ab      	cbnz	r3, 1134a <mutex_init+0x42>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   1131e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11322:	4621      	mov	r1, r4
   11324:	480f      	ldr	r0, [pc, #60]	; (11364 <mutex_init+0x5c>)
   11326:	f001 f845 	bl	123b4 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   1132a:	b908      	cbnz	r0, 11330 <mutex_init+0x28>
   1132c:	6823      	ldr	r3, [r4, #0]
   1132e:	b91b      	cbnz	r3, 11338 <mutex_init+0x30>
            platform_abort_apis.abort_fn(
   11330:	4b0a      	ldr	r3, [pc, #40]	; (1135c <mutex_init+0x54>)
   11332:	480d      	ldr	r0, [pc, #52]	; (11368 <mutex_init+0x60>)
   11334:	685b      	ldr	r3, [r3, #4]
   11336:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   11338:	2214      	movs	r2, #20
   1133a:	2100      	movs	r1, #0
   1133c:	6820      	ldr	r0, [r4, #0]
   1133e:	f002 fea9 	bl	14094 <memset>
        mutex->flags |= NRF_CC310_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   11342:	6863      	ldr	r3, [r4, #4]
   11344:	f043 0302 	orr.w	r3, r3, #2
   11348:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
   1134a:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   1134c:	f002 ff3c 	bl	141c8 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC310_PLATFORM_MUTEX_MASK_IS_VALID;
   11350:	6863      	ldr	r3, [r4, #4]
   11352:	f043 0301 	orr.w	r3, r3, #1
   11356:	6063      	str	r3, [r4, #4]
}
   11358:	bd10      	pop	{r4, pc}
   1135a:	bf00      	nop
   1135c:	20001424 	.word	0x20001424
   11360:	00014b85 	.word	0x00014b85
   11364:	20000028 	.word	0x20000028
   11368:	00014bab 	.word	0x00014bab

0001136c <mutex_lock>:
static int32_t mutex_lock(nrf_cc310_platform_mutex_t *mutex) {
   1136c:	b508      	push	{r3, lr}
    if(mutex == NULL) {
   1136e:	b158      	cbz	r0, 11388 <mutex_lock+0x1c>
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID) {
   11370:	6843      	ldr	r3, [r0, #4]
   11372:	b163      	cbz	r3, 1138e <mutex_lock+0x22>
    p_mutex = (struct k_mutex *)mutex->mutex;
   11374:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   11376:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1137a:	f001 f875 	bl	12468 <z_impl_k_mutex_lock>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_FAILED;
   1137e:	4b05      	ldr	r3, [pc, #20]	; (11394 <mutex_lock+0x28>)
    if (ret == 0) {
   11380:	2800      	cmp	r0, #0
        return NRF_CC310_PLATFORM_ERROR_MUTEX_FAILED;
   11382:	bf18      	it	ne
   11384:	4618      	movne	r0, r3
}
   11386:	bd08      	pop	{r3, pc}
        return NRF_CC310_PLATFORM_ERROR_PARAM_NULL;
   11388:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1138c:	e7fb      	b.n	11386 <mutex_lock+0x1a>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   1138e:	4802      	ldr	r0, [pc, #8]	; (11398 <mutex_lock+0x2c>)
   11390:	e7f9      	b.n	11386 <mutex_lock+0x1a>
   11392:	bf00      	nop
   11394:	ffff8fe9 	.word	0xffff8fe9
   11398:	ffff8fea 	.word	0xffff8fea

0001139c <nrf_cc310_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc310_platform mutex APIs
 */
void nrf_cc310_platform_mutex_init(void)
{
   1139c:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   1139e:	4906      	ldr	r1, [pc, #24]	; (113b8 <nrf_cc310_platform_mutex_init+0x1c>)
   113a0:	2340      	movs	r3, #64	; 0x40
   113a2:	2214      	movs	r2, #20
   113a4:	4805      	ldr	r0, [pc, #20]	; (113bc <nrf_cc310_platform_mutex_init+0x20>)
   113a6:	f002 fef4 	bl	14192 <k_mem_slab_init>
            mutex_slab_buffer,
            sizeof(struct k_mutex),
            NUM_MUTEXES);

    nrf_cc310_platform_set_mutexes(&mutex_apis, &mutexes);
}
   113aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc310_platform_set_mutexes(&mutex_apis, &mutexes);
   113ae:	4904      	ldr	r1, [pc, #16]	; (113c0 <nrf_cc310_platform_mutex_init+0x24>)
   113b0:	4804      	ldr	r0, [pc, #16]	; (113c4 <nrf_cc310_platform_mutex_init+0x28>)
   113b2:	f001 bf3f 	b.w	13234 <nrf_cc310_platform_set_mutexes>
   113b6:	bf00      	nop
   113b8:	20000044 	.word	0x20000044
   113bc:	20000028 	.word	0x20000028
   113c0:	00014770 	.word	0x00014770
   113c4:	00014760 	.word	0x00014760

000113c8 <z_arm_exc_exit>:
    /* r0 contains the caller mode */
    push {r0, lr}
#endif

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
   113c8:	4804      	ldr	r0, [pc, #16]	; (113dc <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
   113ca:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
   113cc:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
   113ce:	4288      	cmp	r0, r1
    beq _EXIT_EXC
   113d0:	d003      	beq.n	113da <_EXIT_EXC>

#if defined(CONFIG_CPU_CORTEX_M)
    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
   113d2:	4903      	ldr	r1, [pc, #12]	; (113e0 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
   113d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
   113d8:	600a      	str	r2, [r1, #0]

000113da <_EXIT_EXC>:
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
   113da:	4770      	bx	lr
    ldr r0, =_kernel
   113dc:	20000630 	.word	0x20000630
    ldr r1, =_SCS_ICSR
   113e0:	e000ed04 	.word	0xe000ed04

000113e4 <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
   113e4:	4a09      	ldr	r2, [pc, #36]	; (1140c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   113e6:	490a      	ldr	r1, [pc, #40]	; (11410 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   113e8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   113ea:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   113ec:	6658      	str	r0, [r3, #100]	; 0x64
	_current->arch.swap_return_value = _k_neg_eagain;
   113ee:	6699      	str	r1, [r3, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   113f0:	4908      	ldr	r1, [pc, #32]	; (11414 <arch_swap+0x30>)
   113f2:	684b      	ldr	r3, [r1, #4]
   113f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   113f8:	604b      	str	r3, [r1, #4]
   113fa:	2300      	movs	r3, #0
   113fc:	f383 8811 	msr	BASEPRI, r3
   11400:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   11404:	6893      	ldr	r3, [r2, #8]
}
   11406:	6e98      	ldr	r0, [r3, #104]	; 0x68
   11408:	4770      	bx	lr
   1140a:	bf00      	nop
   1140c:	20000630 	.word	0x20000630
   11410:	000147dc 	.word	0x000147dc
   11414:	e000ed00 	.word	0xe000ed00

00011418 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   11418:	4912      	ldr	r1, [pc, #72]	; (11464 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   1141a:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   1141c:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
   11420:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   11422:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   11426:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1142a:	2020      	movs	r0, #32
    msr BASEPRI, r0
   1142c:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   11430:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   11434:	4f0c      	ldr	r7, [pc, #48]	; (11468 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   11436:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   1143a:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
   1143c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   1143e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   11440:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs r3, #0
   11442:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   11444:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   11446:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
   1144a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   1144c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   1144e:	f002 fd91 	bl	13f74 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   11452:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   11456:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
   1145a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   1145e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
   11462:	4770      	bx	lr
    ldr r1, =_kernel
   11464:	20000630 	.word	0x20000630
    ldr v4, =_SCS_ICSR
   11468:	e000ed04 	.word	0xe000ed04

0001146c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   1146c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   11470:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   11472:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   11476:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   1147a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   1147c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   11480:	2902      	cmp	r1, #2
    beq _oops
   11482:	d0ff      	beq.n	11484 <_oops>

00011484 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   11484:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   11486:	f002 fd6a 	bl	13f5e <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   1148a:	bd01      	pop	{r0, pc}

0001148c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   1148c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   1148e:	2b00      	cmp	r3, #0
   11490:	db08      	blt.n	114a4 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11492:	2201      	movs	r2, #1
   11494:	f000 001f 	and.w	r0, r0, #31
   11498:	fa02 f000 	lsl.w	r0, r2, r0
   1149c:	4a02      	ldr	r2, [pc, #8]	; (114a8 <arch_irq_enable+0x1c>)
   1149e:	095b      	lsrs	r3, r3, #5
   114a0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   114a4:	4770      	bx	lr
   114a6:	bf00      	nop
   114a8:	e000e100 	.word	0xe000e100

000114ac <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   114ac:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   114ae:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
   114b0:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   114b4:	bfac      	ite	ge
   114b6:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   114ba:	4b06      	ldrlt	r3, [pc, #24]	; (114d4 <z_arm_irq_priority_set+0x28>)
   114bc:	ea4f 1141 	mov.w	r1, r1, lsl #5
   114c0:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   114c2:	bfab      	itete	ge
   114c4:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   114c8:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   114cc:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   114d0:	5419      	strblt	r1, [r3, r0]
}
   114d2:	4770      	bx	lr
   114d4:	e000ed14 	.word	0xe000ed14

000114d8 <arch_new_thread>:
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     size_t stackSize, k_thread_entry_t pEntry,
		     void *parameter1, void *parameter2, void *parameter3,
		     int priority, unsigned int options)
{
   114d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   114da:	461e      	mov	r6, r3
#endif
	stackEnd = pStackMem + stackSize;

	struct __esf *pInitCtx;

	z_new_thread_init(thread, pStackMem, stackSize, priority,
   114dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
{
   114de:	4605      	mov	r5, r0
	z_new_thread_init(thread, pStackMem, stackSize, priority,
   114e0:	9300      	str	r3, [sp, #0]
   114e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
	stackEnd = pStackMem + stackSize;
   114e4:	188c      	adds	r4, r1, r2
	z_new_thread_init(thread, pStackMem, stackSize, priority,
   114e6:	f002 ff07 	bl	142f8 <z_new_thread_init>
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
   114ea:	4b0b      	ldr	r3, [pc, #44]	; (11518 <arch_new_thread+0x40>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
   114ec:	f1a4 0220 	sub.w	r2, r4, #32
   114f0:	f022 0207 	bic.w	r2, r2, #7
	pInitCtx->basic.pc &= 0xfffffffe;
   114f4:	f023 0301 	bic.w	r3, r3, #1
   114f8:	6193      	str	r3, [r2, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
   114fa:	9b06      	ldr	r3, [sp, #24]
	pInitCtx->basic.a1 = (u32_t)pEntry;
   114fc:	6016      	str	r6, [r2, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
   114fe:	6053      	str	r3, [r2, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
   11500:	9b07      	ldr	r3, [sp, #28]
   11502:	6093      	str	r3, [r2, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
   11504:	9b08      	ldr	r3, [sp, #32]
   11506:	60d3      	str	r3, [r2, #12]
	pInitCtx->basic.xpsr =
   11508:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1150c:	61d3      	str	r3, [r2, #28]
#if defined(CONFIG_CPU_CORTEX_R)
	pInitCtx->basic.lr = (u32_t)pInitCtx->basic.pc;
	thread->callee_saved.spsr = A_BIT | T_BIT | MODE_SYS;
	thread->callee_saved.lr = (u32_t)pInitCtx->basic.pc;
#endif
	thread->arch.basepri = 0;
   1150e:	2300      	movs	r3, #0
	thread->callee_saved.psp = (u32_t)pInitCtx;
   11510:	64aa      	str	r2, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
   11512:	666b      	str	r3, [r5, #100]	; 0x64

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   11514:	b002      	add	sp, #8
   11516:	bd70      	pop	{r4, r5, r6, pc}
   11518:	00013c5d 	.word	0x00013c5d

0001151c <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
   1151c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1151e:	461e      	mov	r6, r3
   11520:	4605      	mov	r5, r0
   11522:	460c      	mov	r4, r1
   11524:	4617      	mov	r7, r2
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   11526:	2300      	movs	r3, #0
   11528:	eee1 3a10 	vmsr	fpscr, r3
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1152c:	f000 f9d6 	bl	118dc <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
   11530:	4b0a      	ldr	r3, [pc, #40]	; (1155c <arch_switch_to_main_thread+0x40>)
	start_of_main_stack =
   11532:	19e2      	adds	r2, r4, r7
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   11534:	4628      	mov	r0, r5
	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);
   11536:	f022 0407 	bic.w	r4, r2, #7
	_current = main_thread;
   1153a:	609d      	str	r5, [r3, #8]
	z_arm_configure_dynamic_mpu_regions(main_thread);
   1153c:	f002 fd1a 	bl	13f74 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   11540:	4630      	mov	r0, r6
   11542:	f384 8809 	msr	PSP, r4
   11546:	2100      	movs	r1, #0
   11548:	b663      	cpsie	if
   1154a:	f381 8811 	msr	BASEPRI, r1
   1154e:	f3bf 8f6f 	isb	sy
   11552:	2200      	movs	r2, #0
   11554:	2300      	movs	r3, #0
   11556:	f002 fb81 	bl	13c5c <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   1155a:	bf00      	nop
   1155c:	20000630 	.word	0x20000630

00011560 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
   11560:	4901      	ldr	r1, [pc, #4]	; (11568 <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
   11562:	2210      	movs	r2, #16
	str r2, [r1]
   11564:	600a      	str	r2, [r1, #0]
#endif
	bx lr
   11566:	4770      	bx	lr
	ldr r1, =_SCB_SCR
   11568:	e000ed10 	.word	0xe000ed10

0001156c <arch_cpu_idle>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
   1156c:	4040      	eors	r0, r0
	msr BASEPRI, r0
   1156e:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
   11572:	bf30      	wfi

	bx lr
   11574:	4770      	bx	lr
   11576:	bf00      	nop

00011578 <z_arm_bus_fault>:
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_reserved)

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) || \
	defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	mrs r0, MSP
   11578:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   1157c:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
   11580:	4672      	mov	r2, lr

	push {r0, lr}
   11582:	b501      	push	{r0, lr}
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE || CONFIG_ARMv7_M_ARMV8_M_MAINLINE */

	bl z_arm_fault
   11584:	f000 f8d2 	bl	1172c <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
   11588:	bd01      	pop	{r0, pc}
   1158a:	bf00      	nop

0001158c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   1158c:	bf30      	wfi
    b z_SysNmiOnReset
   1158e:	f7ff bffd 	b.w	1158c <z_SysNmiOnReset>
   11592:	bf00      	nop

00011594 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   11594:	4a11      	ldr	r2, [pc, #68]	; (115dc <z_arm_prep_c+0x48>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   11596:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   11598:	4b11      	ldr	r3, [pc, #68]	; (115e0 <z_arm_prep_c+0x4c>)
   1159a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   1159e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   115a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   115a4:	f3bf 8f6f 	isb	sy
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   115a8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   115ac:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   115b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR &= (~(FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk));
   115b4:	4a0b      	ldr	r2, [pc, #44]	; (115e4 <z_arm_prep_c+0x50>)
   115b6:	6853      	ldr	r3, [r2, #4]
   115b8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
   115bc:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   115be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   115c2:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   115c6:	2300      	movs	r3, #0
   115c8:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
   115cc:	f000 fe00 	bl	121d0 <z_bss_zero>
	z_data_copy();
   115d0:	f000 fe08 	bl	121e4 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
   115d4:	f000 f950 	bl	11878 <z_arm_int_lib_init>
	z_cstart();
   115d8:	f000 fe42 	bl	12260 <z_cstart>
   115dc:	00010200 	.word	0x00010200
   115e0:	e000ed00 	.word	0xe000ed00
   115e4:	e000ef30 	.word	0xe000ef30

000115e8 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   115e8:	b501      	push	{r0, lr}
      * FIXME: Remove the Cortex-M conditional compilation checks for `cpsid i`
      *        and `cpsie i` after the Cortex-R port is updated to support
      *        interrupt nesting.  For more details, refer to the issue #21758.
      */
#if defined(CONFIG_CPU_CORTEX_M)
	cpsid i  /* PRIMASK = 1 */
   115ea:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   115ec:	4a0b      	ldr	r2, [pc, #44]	; (1161c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   115ee:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
   115f0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   115f2:	bf1e      	ittt	ne
	movne	r1, #0
   115f4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   115f6:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
   115f8:	f002 fdc9 	blne	1418e <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   115fc:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   115fe:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   11602:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   11606:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
   1160a:	4905      	ldr	r1, [pc, #20]	; (11620 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   1160c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   1160e:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
   11610:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   11612:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   11616:	4903      	ldr	r1, [pc, #12]	; (11624 <_isr_wrapper+0x3c>)
	bx r1
   11618:	4708      	bx	r1
   1161a:	0000      	.short	0x0000
	ldr r2, =_kernel
   1161c:	20000630 	.word	0x20000630
	ldr r1, =_sw_isr_table
   11620:	000143a4 	.word	0x000143a4
	ldr r1, =z_arm_int_exit
   11624:	000113c9 	.word	0x000113c9

00011628 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   11628:	f002 fb23 	bl	13c72 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1162c:	2020      	movs	r0, #32
    msr BASEPRI, r0
   1162e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
   11632:	4808      	ldr	r0, [pc, #32]	; (11654 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
   11634:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   11638:	1840      	adds	r0, r0, r1
    msr PSP, r0
   1163a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   1163e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   11642:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   11644:	4308      	orrs	r0, r1
    msr CONTROL, r0
   11646:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   1164a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   1164e:	f7ff ffa1 	bl	11594 <z_arm_prep_c>
   11652:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
   11654:	20000bd0 	.word	0x20000bd0

00011658 <mem_manage_fault.isra.0>:
	u32_t reason = K_ERR_CPU_EXCEPTION;
	u32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   11658:	4b0c      	ldr	r3, [pc, #48]	; (1168c <mem_manage_fault.isra.0+0x34>)
   1165a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   1165c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   1165e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11660:	0792      	lsls	r2, r2, #30
   11662:	d508      	bpl.n	11676 <mem_manage_fault.isra.0+0x1e>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
   11664:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   11666:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11668:	0612      	lsls	r2, r2, #24
   1166a:	d504      	bpl.n	11676 <mem_manage_fault.isra.0+0x1e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
   1166c:	b118      	cbz	r0, 11676 <mem_manage_fault.isra.0+0x1e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   1166e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11670:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   11674:	629a      	str	r2, [r3, #40]	; 0x28

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
   11676:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   11678:	4b04      	ldr	r3, [pc, #16]	; (1168c <mem_manage_fault.isra.0+0x34>)
   1167a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   1167c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
   1167e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   11680:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11682:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   11686:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   11688:	7008      	strb	r0, [r1, #0]

	return reason;
}
   1168a:	4770      	bx	lr
   1168c:	e000ed00 	.word	0xe000ed00

00011690 <bus_fault.isra.0>:
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   11690:	4b0d      	ldr	r3, [pc, #52]	; (116c8 <bus_fault.isra.0+0x38>)
   11692:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   11694:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   11696:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11698:	0592      	lsls	r2, r2, #22
   1169a:	d508      	bpl.n	116ae <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   1169c:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   1169e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   116a0:	0412      	lsls	r2, r2, #16
   116a2:	d504      	bpl.n	116ae <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
   116a4:	b118      	cbz	r0, 116ae <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   116a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   116a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   116ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf);
   116ae:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   116b0:	4b05      	ldr	r3, [pc, #20]	; (116c8 <bus_fault.isra.0+0x38>)
   116b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   116b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   116b6:	05d2      	lsls	r2, r2, #23
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   116b8:	bf58      	it	pl
   116ba:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   116bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   116be:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
   116c2:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   116c4:	7008      	strb	r0, [r1, #0]

	return reason;
}
   116c6:	4770      	bx	lr
   116c8:	e000ed00 	.word	0xe000ed00

000116cc <usage_fault.isra.0>:
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   116cc:	4b07      	ldr	r3, [pc, #28]	; (116ec <usage_fault.isra.0+0x20>)

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;

	return reason;
}
   116ce:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   116d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   116d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   116d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   116d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   116d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   116da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   116dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   116de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   116e0:	ea6f 4202 	mvn.w	r2, r2, lsl #16
   116e4:	ea6f 4212 	mvn.w	r2, r2, lsr #16
   116e8:	629a      	str	r2, [r3, #40]	; 0x28
}
   116ea:	4770      	bx	lr
   116ec:	e000ed00 	.word	0xe000ed00

000116f0 <secure_fault.isra.0>:
 */
static void secure_fault(const z_arch_esf_t *esf)
{
	PR_FAULT_INFO("***** SECURE FAULT *****");

	STORE_xFAR(sfar, SAU->SFAR);
   116f0:	4b0d      	ldr	r3, [pc, #52]	; (11728 <secure_fault.isra.0+0x38>)
   116f2:	699a      	ldr	r2, [r3, #24]
	if ((SAU->SFSR & SAU_SFSR_SFARVALID_Msk) != 0) {
   116f4:	695a      	ldr	r2, [r3, #20]
		PR_EXC("  Address: 0x%x", sfar);
	}

	/* bits are sticky: they stack and must be reset */
	if ((SAU->SFSR & SAU_SFSR_INVEP_Msk) != 0) {
   116f6:	695a      	ldr	r2, [r3, #20]
   116f8:	07d0      	lsls	r0, r2, #31
   116fa:	d40f      	bmi.n	1171c <secure_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Invalid entry point");
	} else if ((SAU->SFSR & SAU_SFSR_INVIS_Msk) != 0) {
   116fc:	695a      	ldr	r2, [r3, #20]
   116fe:	0791      	lsls	r1, r2, #30
   11700:	d40c      	bmi.n	1171c <secure_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Invalid integrity signature");
	} else if ((SAU->SFSR & SAU_SFSR_INVER_Msk) != 0) {
   11702:	695a      	ldr	r2, [r3, #20]
   11704:	0752      	lsls	r2, r2, #29
   11706:	d409      	bmi.n	1171c <secure_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Invalid exception return");
	} else if ((SAU->SFSR & SAU_SFSR_AUVIOL_Msk) != 0) {
   11708:	695a      	ldr	r2, [r3, #20]
   1170a:	0710      	lsls	r0, r2, #28
   1170c:	d406      	bmi.n	1171c <secure_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Attribution unit violation");
	} else if ((SAU->SFSR & SAU_SFSR_INVTRAN_Msk) != 0) {
   1170e:	695a      	ldr	r2, [r3, #20]
   11710:	06d1      	lsls	r1, r2, #27
   11712:	d403      	bmi.n	1171c <secure_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Invalid transition");
	} else if ((SAU->SFSR & SAU_SFSR_LSPERR_Msk) != 0) {
   11714:	695a      	ldr	r2, [r3, #20]
   11716:	0692      	lsls	r2, r2, #26
		PR_FAULT_INFO("  Lazy state preservation");
	} else if ((SAU->SFSR & SAU_SFSR_LSERR_Msk) != 0) {
   11718:	bf58      	it	pl
   1171a:	695a      	ldrpl	r2, [r3, #20]
		PR_FAULT_INFO("  Lazy state error");
	}

	/* clear SFSR sticky bits */
	SAU->SFSR |= 0xFF;
   1171c:	695a      	ldr	r2, [r3, #20]
   1171e:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   11722:	615a      	str	r2, [r3, #20]
}
   11724:	4770      	bx	lr
   11726:	bf00      	nop
   11728:	e000edd0 	.word	0xe000edd0

0001172c <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
   1172c:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1172e:	4b41      	ldr	r3, [pc, #260]	; (11834 <z_arm_fault+0x108>)
   11730:	2500      	movs	r5, #0
   11732:	685b      	ldr	r3, [r3, #4]
{
   11734:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   11736:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1173a:	f385 8811 	msr	BASEPRI, r5
   1173e:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   11742:	f002 447f 	and.w	r4, r2, #4278190080	; 0xff000000
   11746:	f1b4 4f7f 	cmp.w	r4, #4278190080	; 0xff000000
   1174a:	d11e      	bne.n	1178a <z_arm_fault+0x5e>
	if ((exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) == 0U) {
   1174c:	f012 0401 	ands.w	r4, r2, #1
   11750:	d01a      	beq.n	11788 <z_arm_fault+0x5c>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   11752:	0656      	lsls	r6, r2, #25
   11754:	f002 0408 	and.w	r4, r2, #8
   11758:	d467      	bmi.n	1182a <z_arm_fault+0xfe>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   1175a:	f082 0204 	eor.w	r2, r2, #4
   1175e:	f3c2 0580 	ubfx	r5, r2, #2, #1
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   11762:	b164      	cbz	r4, 1177e <z_arm_fault+0x52>
  __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
   11764:	f3ef 8689 	mrs	r6, PSP_NS
	*recoverable = false;
   11768:	2200      	movs	r2, #0
   1176a:	3b03      	subs	r3, #3
   1176c:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
   11770:	2b04      	cmp	r3, #4
   11772:	d84b      	bhi.n	1180c <z_arm_fault+0xe0>
   11774:	e8df f003 	tbb	[pc, r3]
   11778:	41504c0b 	.word	0x41504c0b
   1177c:	48          	.byte	0x48
   1177d:	00          	.byte	0x00
  __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
   1177e:	f3ef 8688 	mrs	r6, MSP_NS
  return(result);
   11782:	e7f1      	b.n	11768 <z_arm_fault+0x3c>
			ptr_esf =  (z_arch_esf_t *)psp;
   11784:	460e      	mov	r6, r1
   11786:	e7ef      	b.n	11768 <z_arm_fault+0x3c>
	*nested_exc = false;
   11788:	4625      	mov	r5, r4
		return NULL;
   1178a:	462e      	mov	r6, r5
   1178c:	e7ec      	b.n	11768 <z_arm_fault+0x3c>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1178e:	4b29      	ldr	r3, [pc, #164]	; (11834 <z_arm_fault+0x108>)
   11790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   11792:	0792      	lsls	r2, r2, #30
   11794:	d43a      	bmi.n	1180c <z_arm_fault+0xe0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   11796:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   11798:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
   1179c:	d008      	beq.n	117b0 <z_arm_fault+0x84>
		if (SCB_MMFSR != 0) {
   1179e:	3328      	adds	r3, #40	; 0x28
   117a0:	781b      	ldrb	r3, [r3, #0]
   117a2:	b1eb      	cbz	r3, 117e0 <z_arm_fault+0xb4>
			reason = mem_manage_fault(esf, 1, recoverable);
   117a4:	2001      	movs	r0, #1
   117a6:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   117aa:	f7ff ff55 	bl	11658 <mem_manage_fault.isra.0>
   117ae:	4604      	mov	r4, r0
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   117b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   117b4:	b993      	cbnz	r3, 117dc <z_arm_fault+0xb0>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   117b6:	2220      	movs	r2, #32
   117b8:	4631      	mov	r1, r6
   117ba:	a802      	add	r0, sp, #8
   117bc:	f002 fc3f 	bl	1403e <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   117c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   117c2:	b36d      	cbz	r5, 11820 <z_arm_fault+0xf4>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   117c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
   117c8:	b922      	cbnz	r2, 117d4 <z_arm_fault+0xa8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   117ca:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   117ce:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   117d2:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   117d4:	4620      	mov	r0, r4
   117d6:	a902      	add	r1, sp, #8
   117d8:	f002 fbbf 	bl	13f5a <z_arm_fatal_error>
}
   117dc:	b00b      	add	sp, #44	; 0x2c
   117de:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (SCB_BFSR != 0) {
   117e0:	4b15      	ldr	r3, [pc, #84]	; (11838 <z_arm_fault+0x10c>)
   117e2:	781b      	ldrb	r3, [r3, #0]
   117e4:	b12b      	cbz	r3, 117f2 <z_arm_fault+0xc6>
			reason = bus_fault(esf, 1, recoverable);
   117e6:	2001      	movs	r0, #1
   117e8:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   117ec:	f7ff ff50 	bl	11690 <bus_fault.isra.0>
   117f0:	e7dd      	b.n	117ae <z_arm_fault+0x82>
		} else if (SCB_UFSR != 0) {
   117f2:	4b12      	ldr	r3, [pc, #72]	; (1183c <z_arm_fault+0x110>)
   117f4:	881f      	ldrh	r7, [r3, #0]
   117f6:	b2bf      	uxth	r7, r7
   117f8:	b117      	cbz	r7, 11800 <z_arm_fault+0xd4>
		reason = usage_fault(esf);
   117fa:	f7ff ff67 	bl	116cc <usage_fault.isra.0>
   117fe:	e7d6      	b.n	117ae <z_arm_fault+0x82>
		} else if (SAU->SFSR != 0) {
   11800:	4b0f      	ldr	r3, [pc, #60]	; (11840 <z_arm_fault+0x114>)
   11802:	695c      	ldr	r4, [r3, #20]
   11804:	2c00      	cmp	r4, #0
   11806:	d0d3      	beq.n	117b0 <z_arm_fault+0x84>
		secure_fault(esf);
   11808:	f7ff ff72 	bl	116f0 <secure_fault.isra.0>
	u32_t reason = K_ERR_CPU_EXCEPTION;
   1180c:	2400      	movs	r4, #0
   1180e:	e7cf      	b.n	117b0 <z_arm_fault+0x84>
		reason = mem_manage_fault(esf, 0, recoverable);
   11810:	2000      	movs	r0, #0
   11812:	f10d 0107 	add.w	r1, sp, #7
   11816:	e7c8      	b.n	117aa <z_arm_fault+0x7e>
		reason = bus_fault(esf, 0, recoverable);
   11818:	2000      	movs	r0, #0
   1181a:	f10d 0107 	add.w	r1, sp, #7
   1181e:	e7e5      	b.n	117ec <z_arm_fault+0xc0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   11820:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   11824:	f023 0301 	bic.w	r3, r3, #1
   11828:	e7d3      	b.n	117d2 <z_arm_fault+0xa6>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   1182a:	2c00      	cmp	r4, #0
   1182c:	d1aa      	bne.n	11784 <z_arm_fault+0x58>
			ptr_esf = (z_arch_esf_t *)msp;
   1182e:	4606      	mov	r6, r0
			*nested_exc = true;
   11830:	2501      	movs	r5, #1
   11832:	e799      	b.n	11768 <z_arm_fault+0x3c>
   11834:	e000ed00 	.word	0xe000ed00
   11838:	e000ed29 	.word	0xe000ed29
   1183c:	e000ed2a 	.word	0xe000ed2a
   11840:	e000edd0 	.word	0xe000edd0

00011844 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   11844:	4a02      	ldr	r2, [pc, #8]	; (11850 <z_arm_fault_init+0xc>)
   11846:	6953      	ldr	r3, [r2, #20]
   11848:	f043 0310 	orr.w	r3, r3, #16
   1184c:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   1184e:	4770      	bx	lr
   11850:	e000ed00 	.word	0xe000ed00

00011854 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   11854:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   11858:	4905      	ldr	r1, [pc, #20]	; (11870 <sys_arch_reboot+0x1c>)
   1185a:	4b06      	ldr	r3, [pc, #24]	; (11874 <sys_arch_reboot+0x20>)
   1185c:	68ca      	ldr	r2, [r1, #12]
   1185e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   11862:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   11864:	60cb      	str	r3, [r1, #12]
   11866:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   1186a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1186c:	e7fd      	b.n	1186a <sys_arch_reboot+0x16>
   1186e:	bf00      	nop
   11870:	e000ed00 	.word	0xe000ed00
   11874:	05fa0004 	.word	0x05fa0004

00011878 <z_arm_int_lib_init>:
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
   11878:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1187a:	2120      	movs	r1, #32
   1187c:	4803      	ldr	r0, [pc, #12]	; (1188c <z_arm_int_lib_init+0x14>)
   1187e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   11880:	3301      	adds	r3, #1
   11882:	2b41      	cmp	r3, #65	; 0x41
   11884:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   11888:	d1f9      	bne.n	1187e <z_arm_int_lib_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   1188a:	4770      	bx	lr
   1188c:	e000e100 	.word	0xe000e100

00011890 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
   11890:	b538      	push	{r3, r4, r5, lr}
   11892:	4604      	mov	r4, r0
	__asm__ volatile(
   11894:	f04f 0320 	mov.w	r3, #32
   11898:	f3ef 8511 	mrs	r5, BASEPRI
   1189c:	f383 8811 	msr	BASEPRI, r3
   118a0:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
   118a4:	f000 fff8 	bl	12898 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
   118a8:	4b0a      	ldr	r3, [pc, #40]	; (118d4 <z_impl_k_thread_abort+0x44>)
   118aa:	689b      	ldr	r3, [r3, #8]
   118ac:	42a3      	cmp	r3, r4
   118ae:	d10b      	bne.n	118c8 <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
   118b0:	4b09      	ldr	r3, [pc, #36]	; (118d8 <z_impl_k_thread_abort+0x48>)
   118b2:	685a      	ldr	r2, [r3, #4]
   118b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
   118b8:	b912      	cbnz	r2, 118c0 <z_impl_k_thread_abort+0x30>
	int ret;
	z_check_stack_sentinel();
#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
   118ba:	4628      	mov	r0, r5
   118bc:	f7ff fd92 	bl	113e4 <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   118c0:	685a      	ldr	r2, [r3, #4]
   118c2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   118c6:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
   118c8:	4628      	mov	r0, r5
}
   118ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
   118ce:	f002 bc96 	b.w	141fe <z_reschedule_irqlock>
   118d2:	bf00      	nop
   118d4:	20000630 	.word	0x20000630
   118d8:	e000ed00 	.word	0xe000ed00

000118dc <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   118dc:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
   118de:	4b0e      	ldr	r3, [pc, #56]	; (11918 <z_arm_configure_static_mpu_regions+0x3c>)
{
   118e0:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
   118e2:	9302      	str	r3, [sp, #8]
   118e4:	4b0d      	ldr	r3, [pc, #52]	; (1191c <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   118e6:	4c0e      	ldr	r4, [pc, #56]	; (11920 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
   118e8:	9303      	str	r3, [sp, #12]
   118ea:	4b0e      	ldr	r3, [pc, #56]	; (11924 <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   118ec:	4a0e      	ldr	r2, [pc, #56]	; (11928 <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
   118ee:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
   118f0:	ab02      	add	r3, sp, #8
   118f2:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   118f4:	a801      	add	r0, sp, #4
   118f6:	4623      	mov	r3, r4
   118f8:	2101      	movs	r1, #1
   118fa:	f000 f907 	bl	11b0c <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
   118fe:	2300      	movs	r3, #0
   11900:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   11902:	4b0a      	ldr	r3, [pc, #40]	; (1192c <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   11904:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   11906:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   11908:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
   1190a:	9305      	str	r3, [sp, #20]
   1190c:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1190e:	f000 f907 	bl	11b20 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   11912:	b008      	add	sp, #32
   11914:	bd10      	pop	{r4, pc}
   11916:	bf00      	nop
   11918:	20000000 	.word	0x20000000
   1191c:	00000000 	.word	0x00000000
   11920:	20010000 	.word	0x20010000
   11924:	00010006 	.word	0x00010006
   11928:	20000000 	.word	0x20000000
   1192c:	20000000 	.word	0x20000000

00011930 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
   11930:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   11932:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   11934:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   11936:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   1193a:	f004 031f 	and.w	r3, r4, #31
   1193e:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   11940:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   11942:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   11944:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   11948:	4904      	ldr	r1, [pc, #16]	; (1195c <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   1194a:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   1194e:	f043 0301 	orr.w	r3, r3, #1
   11952:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   11954:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   11956:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   11958:	bd10      	pop	{r4, pc}
   1195a:	bf00      	nop
   1195c:	e000ed90 	.word	0xe000ed90

00011960 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   11960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11964:	4607      	mov	r7, r0
   11966:	4688      	mov	r8, r1
   11968:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   1196a:	2600      	movs	r6, #0
	MPU->RNR = index;
   1196c:	4d4a      	ldr	r5, [pc, #296]	; (11a98 <mpu_configure_regions_and_partition.constprop.0+0x138>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   1196e:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   11970:	4546      	cmp	r6, r8
   11972:	da0b      	bge.n	1198c <mpu_configure_regions_and_partition.constprop.0+0x2c>
		if (regions[i]->size == 0U) {
   11974:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
   11978:	f8d3 9004 	ldr.w	r9, [r3, #4]
   1197c:	f1b9 0f00 	cmp.w	r9, #0
   11980:	d03a      	beq.n	119f8 <mpu_configure_regions_and_partition.constprop.0+0x98>
		&&
   11982:	f1b9 0f1f 	cmp.w	r9, #31
   11986:	d805      	bhi.n	11994 <mpu_configure_regions_and_partition.constprop.0+0x34>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   11988:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   1198c:	4620      	mov	r0, r4
   1198e:	b005      	add	sp, #20
   11990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		&&
   11994:	f019 0f1f 	tst.w	r9, #31
   11998:	d1f6      	bne.n	11988 <mpu_configure_regions_and_partition.constprop.0+0x28>
		((part->start &
   1199a:	f8d3 a000 	ldr.w	sl, [r3]
		&&
   1199e:	f01a 0f1f 	tst.w	sl, #31
   119a2:	d1f1      	bne.n	11988 <mpu_configure_regions_and_partition.constprop.0+0x28>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   119a4:	4650      	mov	r0, sl
   119a6:	f002 fb0d 	bl	13fc4 <arm_cmse_mpu_region_get>
   119aa:	4683      	mov	fp, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   119ac:	eb09 000a 	add.w	r0, r9, sl
   119b0:	3801      	subs	r0, #1
   119b2:	f002 fb07 	bl	13fc4 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   119b6:	4583      	cmp	fp, r0
   119b8:	d1e6      	bne.n	11988 <mpu_configure_regions_and_partition.constprop.0+0x28>
		if ((u_reg_index == -EINVAL) ||
   119ba:	f11b 0f16 	cmn.w	fp, #22
   119be:	d0e3      	beq.n	11988 <mpu_configure_regions_and_partition.constprop.0+0x28>
			(u_reg_index > (reg_index - 1))) {
   119c0:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   119c2:	455b      	cmp	r3, fp
   119c4:	dbe0      	blt.n	11988 <mpu_configure_regions_and_partition.constprop.0+0x28>
	MPU->RNR = index;
   119c6:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   119ca:	68e8      	ldr	r0, [r5, #12]
	MPU->RNR = index;
   119cc:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   119d0:	692b      	ldr	r3, [r5, #16]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   119d2:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   119d6:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   119da:	f043 0a1f 	orr.w	sl, r3, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   119de:	e9d1 3200 	ldrd	r3, r2, [r1]
   119e2:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
   119e4:	4298      	cmp	r0, r3
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   119e6:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
		if ((regions[i]->start == u_reg_base) &&
   119ea:	d118      	bne.n	11a1e <mpu_configure_regions_and_partition.constprop.0+0xbe>
   119ec:	45ca      	cmp	sl, r9
   119ee:	d105      	bne.n	119fc <mpu_configure_regions_and_partition.constprop.0+0x9c>
			mpu_configure_region(u_reg_index, regions[i]);
   119f0:	fa5f f08b 	uxtb.w	r0, fp
   119f4:	f002 fac6 	bl	13f84 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   119f8:	3601      	adds	r6, #1
   119fa:	e7b9      	b.n	11970 <mpu_configure_regions_and_partition.constprop.0+0x10>
	MPU->RNR = index;
   119fc:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   11a00:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   11a02:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   11a06:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   11a0a:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   11a0c:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
   11a0e:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
   11a10:	f002 fab8 	bl	13f84 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   11a14:	f110 0f16 	cmn.w	r0, #22
   11a18:	d0b6      	beq.n	11988 <mpu_configure_regions_and_partition.constprop.0+0x28>
			reg_index++;
   11a1a:	1c44      	adds	r4, r0, #1
   11a1c:	e7ec      	b.n	119f8 <mpu_configure_regions_and_partition.constprop.0+0x98>
	MPU->RNR = index;
   11a1e:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   11a22:	692a      	ldr	r2, [r5, #16]
   11a24:	3b01      	subs	r3, #1
   11a26:	f023 031f 	bic.w	r3, r3, #31
   11a2a:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   11a2e:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
   11a30:	45ca      	cmp	sl, r9
   11a32:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   11a34:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
   11a36:	d0eb      	beq.n	11a10 <mpu_configure_regions_and_partition.constprop.0+0xb0>
				mpu_configure_region(reg_index, regions[i]);
   11a38:	f002 faa4 	bl	13f84 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   11a3c:	f110 0f16 	cmn.w	r0, #22
   11a40:	d0a2      	beq.n	11988 <mpu_configure_regions_and_partition.constprop.0+0x28>
	MPU->RNR = index;
   11a42:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
   11a46:	68ea      	ldr	r2, [r5, #12]
   11a48:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
   11a4c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
	attr->rbar = MPU->RBAR &
   11a50:	f362 0304 	bfi	r3, r2, #0, #5
   11a54:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   11a58:	692b      	ldr	r3, [r5, #16]
   11a5a:	f89d 2008 	ldrb.w	r2, [sp, #8]
   11a5e:	085b      	lsrs	r3, r3, #1
   11a60:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i]->start +
   11a64:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   11a68:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
   11a6c:	e9d3 1300 	ldrd	r1, r3, [r3]
   11a70:	440b      	add	r3, r1
   11a72:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
   11a74:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
   11a78:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i]->start +
   11a7a:	4453      	add	r3, sl
   11a7c:	eba3 0309 	sub.w	r3, r3, r9
   11a80:	b2c0      	uxtb	r0, r0
   11a82:	f023 031f 	bic.w	r3, r3, #31

static int region_allocate_and_init(const u8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {
   11a86:	280f      	cmp	r0, #15
			fill_region.attr.r_limit =
   11a88:	9303      	str	r3, [sp, #12]
   11a8a:	f63f af7d 	bhi.w	11988 <mpu_configure_regions_and_partition.constprop.0+0x28>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
   11a8e:	4669      	mov	r1, sp
   11a90:	f7ff ff4e 	bl	11930 <region_init>
   11a94:	e7c1      	b.n	11a1a <mpu_configure_regions_and_partition.constprop.0+0xba>
   11a96:	bf00      	nop
   11a98:	e000ed90 	.word	0xe000ed90

00011a9c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   11a9c:	2205      	movs	r2, #5
   11a9e:	4b03      	ldr	r3, [pc, #12]	; (11aac <arm_core_mpu_enable+0x10>)
   11aa0:	605a      	str	r2, [r3, #4]
   11aa2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11aa6:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   11aaa:	4770      	bx	lr
   11aac:	e000ed90 	.word	0xe000ed90

00011ab0 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   11ab0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   11ab4:	2200      	movs	r2, #0
   11ab6:	4b01      	ldr	r3, [pc, #4]	; (11abc <arm_core_mpu_disable+0xc>)
   11ab8:	605a      	str	r2, [r3, #4]
}
   11aba:	4770      	bx	lr
   11abc:	e000ed90 	.word	0xe000ed90

00011ac0 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
   11ac0:	b538      	push	{r3, r4, r5, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   11ac2:	4c0e      	ldr	r4, [pc, #56]	; (11afc <arm_mpu_init+0x3c>)
   11ac4:	6825      	ldr	r5, [r4, #0]
   11ac6:	2d10      	cmp	r5, #16
   11ac8:	d814      	bhi.n	11af4 <arm_mpu_init+0x34>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   11aca:	f7ff fff1 	bl	11ab0 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   11ace:	2000      	movs	r0, #0
	MPU->MAIR0 =
   11ad0:	4b0b      	ldr	r3, [pc, #44]	; (11b00 <arm_mpu_init+0x40>)
   11ad2:	4a0c      	ldr	r2, [pc, #48]	; (11b04 <arm_mpu_init+0x44>)
   11ad4:	631a      	str	r2, [r3, #48]	; 0x30
   11ad6:	4285      	cmp	r5, r0
   11ad8:	d105      	bne.n	11ae6 <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   11ada:	4b0b      	ldr	r3, [pc, #44]	; (11b08 <arm_mpu_init+0x48>)
   11adc:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
   11ade:	f7ff ffdd 	bl	11a9c <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
   11ae2:	2000      	movs	r0, #0
}
   11ae4:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   11ae6:	6861      	ldr	r1, [r4, #4]
   11ae8:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   11aec:	f7ff ff20 	bl	11930 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   11af0:	3001      	adds	r0, #1
   11af2:	e7f0      	b.n	11ad6 <arm_mpu_init+0x16>
		return -1;
   11af4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11af8:	e7f4      	b.n	11ae4 <arm_mpu_init+0x24>
   11afa:	bf00      	nop
   11afc:	00014784 	.word	0x00014784
   11b00:	e000ed90 	.word	0xe000ed90
   11b04:	0044ffaa 	.word	0x0044ffaa
   11b08:	2000068c 	.word	0x2000068c

00011b0c <arm_core_mpu_configure_static_mpu_regions>:
{
   11b0c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   11b0e:	4c03      	ldr	r4, [pc, #12]	; (11b1c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   11b10:	7822      	ldrb	r2, [r4, #0]
   11b12:	f7ff ff25 	bl	11960 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   11b16:	7020      	strb	r0, [r4, #0]
}
   11b18:	bd10      	pop	{r4, pc}
   11b1a:	bf00      	nop
   11b1c:	2000068c 	.word	0x2000068c

00011b20 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   11b20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b24:	4d26      	ldr	r5, [pc, #152]	; (11bc0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
   11b26:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   11b28:	4606      	mov	r6, r0
   11b2a:	f04f 0800 	mov.w	r8, #0
   11b2e:	46ab      	mov	fp, r5
	MPU->RNR = index;
   11b30:	4f24      	ldr	r7, [pc, #144]	; (11bc4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   11b32:	45d0      	cmp	r8, sl
   11b34:	da1b      	bge.n	11b6e <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
   11b36:	f8d6 9004 	ldr.w	r9, [r6, #4]
   11b3a:	f1b9 0f00 	cmp.w	r9, #0
   11b3e:	d039      	beq.n	11bb4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x94>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   11b40:	6831      	ldr	r1, [r6, #0]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   11b42:	4608      	mov	r0, r1
   11b44:	9101      	str	r1, [sp, #4]
   11b46:	f002 fa3d 	bl	13fc4 <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   11b4a:	9901      	ldr	r1, [sp, #4]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   11b4c:	4604      	mov	r4, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   11b4e:	eb09 0001 	add.w	r0, r9, r1
   11b52:	3801      	subs	r0, #1
   11b54:	f002 fa36 	bl	13fc4 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   11b58:	4284      	cmp	r4, r0
   11b5a:	f04f 0214 	mov.w	r2, #20
   11b5e:	4b1a      	ldr	r3, [pc, #104]	; (11bc8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa8>)
   11b60:	d008      	beq.n	11b74 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
   11b62:	f06f 0315 	mvn.w	r3, #21
   11b66:	fb02 f808 	mul.w	r8, r2, r8
   11b6a:	f84b 3008 	str.w	r3, [fp, r8]
}
   11b6e:	b003      	add	sp, #12
   11b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   11b74:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   11b78:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   11b7a:	d0f8      	beq.n	11b6e <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   11b7c:	7819      	ldrb	r1, [r3, #0]
   11b7e:	42a1      	cmp	r1, r4
   11b80:	ddf5      	ble.n	11b6e <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
   11b82:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
   11b86:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
   11b88:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
   11b8a:	68fc      	ldr	r4, [r7, #12]
   11b8c:	f100 0108 	add.w	r1, r0, #8
   11b90:	7b00      	ldrb	r0, [r0, #12]
   11b92:	f364 0004 	bfi	r0, r4, #0, #5
   11b96:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   11b98:	6938      	ldr	r0, [r7, #16]
   11b9a:	790c      	ldrb	r4, [r1, #4]
   11b9c:	0840      	lsrs	r0, r0, #1
   11b9e:	f360 1447 	bfi	r4, r0, #5, #3
   11ba2:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   11ba4:	68f9      	ldr	r1, [r7, #12]
   11ba6:	f021 011f 	bic.w	r1, r1, #31
   11baa:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   11bac:	6939      	ldr	r1, [r7, #16]
   11bae:	f021 011f 	bic.w	r1, r1, #31
   11bb2:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   11bb4:	f108 0801 	add.w	r8, r8, #1
   11bb8:	3514      	adds	r5, #20
   11bba:	360c      	adds	r6, #12
   11bbc:	e7b9      	b.n	11b32 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   11bbe:	bf00      	nop
   11bc0:	20000544 	.word	0x20000544
   11bc4:	e000ed90 	.word	0xe000ed90
   11bc8:	2000068c 	.word	0x2000068c

00011bcc <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   11bcc:	b570      	push	{r4, r5, r6, lr}
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct k_mem_partition
	*dynamic_regions[], u8_t regions_num)
{
	int mpu_reg_index = static_regions_num;
   11bce:	4b0c      	ldr	r3, [pc, #48]	; (11c00 <arm_core_mpu_configure_dynamic_mpu_regions+0x34>)
   11bd0:	460d      	mov	r5, r1
   11bd2:	781e      	ldrb	r6, [r3, #0]
   11bd4:	4604      	mov	r4, r0
   11bd6:	4633      	mov	r3, r6
  mpu->RLAR = 0U;
   11bd8:	2100      	movs	r1, #0
  mpu->RNR = rnr;
   11bda:	4a0a      	ldr	r2, [pc, #40]	; (11c04 <arm_core_mpu_configure_dynamic_mpu_regions+0x38>)

	/* Disable all MPU regions except for the static ones. */
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   11bdc:	2b0f      	cmp	r3, #15
   11bde:	dd0b      	ble.n	11bf8 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>
#if defined(CONFIG_MPU_GAP_FILLING)
	/* Reset MPU regions inside which dynamic memory regions may
	 * be programmed.
	 */
	for (int i = 0; i < MPU_DYNAMIC_REGION_AREAS_NUM; i++) {
		region_init(dyn_reg_info[i].index,
   11be0:	4909      	ldr	r1, [pc, #36]	; (11c08 <arm_core_mpu_configure_dynamic_mpu_regions+0x3c>)
   11be2:	f851 0b04 	ldr.w	r0, [r1], #4
   11be6:	f7ff fea3 	bl	11930 <region_init>

	/* In ARMv8-M architecture the dynamic regions are programmed on SRAM,
	 * forming a full partition of the background area, specified by the
	 * given boundaries.
	 */
	mpu_reg_index = mpu_configure_regions_and_partition(dynamic_regions,
   11bea:	4632      	mov	r2, r6
   11bec:	4629      	mov	r1, r5
   11bee:	4620      	mov	r0, r4
}
   11bf0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11bf4:	f7ff beb4 	b.w	11960 <mpu_configure_regions_and_partition.constprop.0>
   11bf8:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
   11bfa:	6111      	str	r1, [r2, #16]
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   11bfc:	3301      	adds	r3, #1
   11bfe:	e7ed      	b.n	11bdc <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
   11c00:	2000068c 	.word	0x2000068c
   11c04:	e000ed90 	.word	0xe000ed90
   11c08:	20000544 	.word	0x20000544

00011c0c <tz_nonsecure_state_setup>:
}
#endif /* CONFIG_ARMV8_M_MAINLINE */

void tz_nonsecure_state_setup(const tz_nonsecure_setup_conf_t *p_ns_conf)
{
	configure_nonsecure_vtor_offset(p_ns_conf->vtor_ns);
   11c0c:	6882      	ldr	r2, [r0, #8]
	SCB_NS->VTOR = vtor_ns;
   11c0e:	4b0c      	ldr	r3, [pc, #48]	; (11c40 <tz_nonsecure_state_setup+0x34>)
   11c10:	609a      	str	r2, [r3, #8]
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
   11c12:	6803      	ldr	r3, [r0, #0]
   11c14:	f383 8888 	msr	MSP_NS, r3
  __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
   11c18:	6843      	ldr	r3, [r0, #4]
   11c1a:	f383 8889 	msr	PSP_NS, r3
	configure_nonsecure_psp(p_ns_conf->psp_ns);
	/* Select which stack-pointer to use (MSP or PSP) and
	 * the privilege level for thread mode.
	 */
	configure_nonsecure_control(p_ns_conf->control_ns.spsel,
		p_ns_conf->control_ns.npriv);
   11c1e:	7b02      	ldrb	r2, [r0, #12]
   11c20:	f002 0101 	and.w	r1, r2, #1
  __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
   11c24:	f3ef 8394 	mrs	r3, CONTROL_NS
	control_ns &= ~(CONTROL_SPSEL_Msk | CONTROL_nPRIV_Msk);
   11c28:	f023 0303 	bic.w	r3, r3, #3
	if (spsel_ns) {
   11c2c:	0792      	lsls	r2, r2, #30
		control_ns |= CONTROL_SPSEL_Msk;
   11c2e:	bf48      	it	mi
   11c30:	f043 0302 	orrmi.w	r3, r3, #2
	if (npriv_ns) {
   11c34:	b109      	cbz	r1, 11c3a <tz_nonsecure_state_setup+0x2e>
		control_ns |= CONTROL_nPRIV_Msk;
   11c36:	f043 0301 	orr.w	r3, r3, #1
  __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
   11c3a:	f383 8894 	msr	CONTROL_NS, r3
}
   11c3e:	4770      	bx	lr
   11c40:	e002ed00 	.word	0xe002ed00

00011c44 <tz_nbanked_exception_target_state_set>:

void tz_nbanked_exception_target_state_set(int secure_state)
{
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
   11c44:	4a08      	ldr	r2, [pc, #32]	; (11c68 <tz_nbanked_exception_target_state_set+0x24>)
   11c46:	68d3      	ldr	r3, [r2, #12]
	if (secure_state) {
   11c48:	b148      	cbz	r0, 11c5e <tz_nbanked_exception_target_state_set+0x1a>
		aircr_payload &= ~(SCB_AIRCR_BFHFNMINS_Msk);
   11c4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   11c4e:	041b      	lsls	r3, r3, #16
   11c50:	0c1b      	lsrs	r3, r3, #16
	} else {
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
   11c52:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
   11c56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
   11c5a:	60d3      	str	r3, [r2, #12]
}
   11c5c:	4770      	bx	lr
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
   11c5e:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
   11c60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   11c64:	e7f5      	b.n	11c52 <tz_nbanked_exception_target_state_set+0xe>
   11c66:	bf00      	nop
   11c68:	e000ed00 	.word	0xe000ed00

00011c6c <tz_nonsecure_exception_prio_config>:

void tz_nonsecure_exception_prio_config(int secure_boost)
{
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
   11c6c:	4a08      	ldr	r2, [pc, #32]	; (11c90 <tz_nonsecure_exception_prio_config+0x24>)
   11c6e:	68d3      	ldr	r3, [r2, #12]
	if (secure_boost) {
   11c70:	b140      	cbz	r0, 11c84 <tz_nonsecure_exception_prio_config+0x18>
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
   11c72:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_PRIS_Msk;
   11c74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
	} else {
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
   11c78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
   11c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
   11c80:	60d3      	str	r3, [r2, #12]
}
   11c82:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
   11c84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
   11c88:	041b      	lsls	r3, r3, #16
   11c8a:	0c1b      	lsrs	r3, r3, #16
   11c8c:	e7f4      	b.n	11c78 <tz_nonsecure_exception_prio_config+0xc>
   11c8e:	bf00      	nop
   11c90:	e000ed00 	.word	0xe000ed00

00011c94 <tz_nonsecure_system_reset_req_block>:

void tz_nonsecure_system_reset_req_block(int block)
{
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
   11c94:	4a08      	ldr	r2, [pc, #32]	; (11cb8 <tz_nonsecure_system_reset_req_block+0x24>)
   11c96:	68d3      	ldr	r3, [r2, #12]
	if (block) {
   11c98:	b140      	cbz	r0, 11cac <tz_nonsecure_system_reset_req_block+0x18>
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
   11c9a:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_SYSRESETREQS_Msk;
   11c9c:	f043 0308 	orr.w	r3, r3, #8
	} else {
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
	}
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
   11ca0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
   11ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
   11ca8:	60d3      	str	r3, [r2, #12]
}
   11caa:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
   11cac:	f023 0308 	bic.w	r3, r3, #8
   11cb0:	041b      	lsls	r3, r3, #16
   11cb2:	0c1b      	lsrs	r3, r3, #16
   11cb4:	e7f4      	b.n	11ca0 <tz_nonsecure_system_reset_req_block+0xc>
   11cb6:	bf00      	nop
   11cb8:	e000ed00 	.word	0xe000ed00

00011cbc <tz_nonsecure_fpu_access_enable>:

#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
void tz_nonsecure_fpu_access_enable(void)
{
	SCB->NSACR |=
   11cbc:	4a03      	ldr	r2, [pc, #12]	; (11ccc <tz_nonsecure_fpu_access_enable+0x10>)
   11cbe:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   11cc2:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
   11cc6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		(1UL << SCB_NSACR_CP10_Pos) | (1UL << SCB_NSACR_CP11_Pos);
}
   11cca:	4770      	bx	lr
   11ccc:	e000ed00 	.word	0xe000ed00

00011cd0 <tz_sau_configure>:
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

void tz_sau_configure(int enable, int allns)
{
	if (enable) {
   11cd0:	4b08      	ldr	r3, [pc, #32]	; (11cf4 <tz_sau_configure+0x24>)
  \brief   Enable SAU
  \details Enables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Enable(void)
{
    SAU->CTRL |=  (SAU_CTRL_ENABLE_Msk);
   11cd2:	681a      	ldr	r2, [r3, #0]
   11cd4:	b118      	cbz	r0, 11cde <tz_sau_configure+0xe>
   11cd6:	f042 0201 	orr.w	r2, r2, #1
	} else {
		TZ_SAU_Disable();
		if (allns) {
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
		} else {
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
   11cda:	601a      	str	r2, [r3, #0]
		}
	}
}
   11cdc:	4770      	bx	lr
  \brief   Disable SAU
  \details Disables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Disable(void)
{
    SAU->CTRL &= ~(SAU_CTRL_ENABLE_Msk);
   11cde:	f022 0201 	bic.w	r2, r2, #1
   11ce2:	601a      	str	r2, [r3, #0]
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
   11ce4:	681a      	ldr	r2, [r3, #0]
		if (allns) {
   11ce6:	b111      	cbz	r1, 11cee <tz_sau_configure+0x1e>
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
   11ce8:	f042 0202 	orr.w	r2, r2, #2
   11cec:	e7f5      	b.n	11cda <tz_sau_configure+0xa>
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
   11cee:	f022 0202 	bic.w	r2, r2, #2
   11cf2:	e7f2      	b.n	11cda <tz_sau_configure+0xa>
   11cf4:	e000edd0 	.word	0xe000edd0

00011cf8 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   11cf8:	4b01      	ldr	r3, [pc, #4]	; (11d00 <__stdout_hook_install+0x8>)
   11cfa:	6018      	str	r0, [r3, #0]
}
   11cfc:	4770      	bx	lr
   11cfe:	bf00      	nop
   11d00:	200013f4 	.word	0x200013f4

00011d04 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
   11d04:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   11d06:	794b      	ldrb	r3, [r1, #5]
   11d08:	2b01      	cmp	r3, #1
   11d0a:	d02b      	beq.n	11d64 <uarte_nrfx_configure+0x60>
   11d0c:	2b03      	cmp	r3, #3
   11d0e:	d126      	bne.n	11d5e <uarte_nrfx_configure+0x5a>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   11d10:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   11d12:	798b      	ldrb	r3, [r1, #6]
   11d14:	2b03      	cmp	r3, #3
   11d16:	d122      	bne.n	11d5e <uarte_nrfx_configure+0x5a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   11d18:	79cc      	ldrb	r4, [r1, #7]
   11d1a:	b12c      	cbz	r4, 11d28 <uarte_nrfx_configure+0x24>
   11d1c:	2c01      	cmp	r4, #1
   11d1e:	d11e      	bne.n	11d5e <uarte_nrfx_configure+0x5a>
	return dev->config->config_info;
   11d20:	6803      	ldr	r3, [r0, #0]
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   11d22:	689b      	ldr	r3, [r3, #8]
   11d24:	791b      	ldrb	r3, [r3, #4]
   11d26:	b1d3      	cbz	r3, 11d5e <uarte_nrfx_configure+0x5a>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   11d28:	790a      	ldrb	r2, [r1, #4]
   11d2a:	b112      	cbz	r2, 11d32 <uarte_nrfx_configure+0x2e>
   11d2c:	2a02      	cmp	r2, #2
   11d2e:	d116      	bne.n	11d5e <uarte_nrfx_configure+0x5a>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   11d30:	220e      	movs	r2, #14
	return dev->config->config_info;
   11d32:	6805      	ldr	r5, [r0, #0]
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   11d34:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   11d36:	68ad      	ldr	r5, [r5, #8]
	switch (baudrate) {
   11d38:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   11d3c:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   11d3e:	d064      	beq.n	11e0a <uarte_nrfx_configure+0x106>
   11d40:	d82d      	bhi.n	11d9e <uarte_nrfx_configure+0x9a>
   11d42:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   11d46:	d063      	beq.n	11e10 <uarte_nrfx_configure+0x10c>
   11d48:	d816      	bhi.n	11d78 <uarte_nrfx_configure+0x74>
   11d4a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   11d4e:	d061      	beq.n	11e14 <uarte_nrfx_configure+0x110>
   11d50:	d80a      	bhi.n	11d68 <uarte_nrfx_configure+0x64>
   11d52:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   11d56:	d060      	beq.n	11e1a <uarte_nrfx_configure+0x116>
   11d58:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   11d5c:	d060      	beq.n	11e20 <uarte_nrfx_configure+0x11c>
   11d5e:	f06f 0022 	mvn.w	r0, #34	; 0x22
   11d62:	e051      	b.n	11e08 <uarte_nrfx_configure+0x104>
	switch (cfg->stop_bits) {
   11d64:	2600      	movs	r6, #0
   11d66:	e7d4      	b.n	11d12 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   11d68:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   11d6c:	d05b      	beq.n	11e26 <uarte_nrfx_configure+0x122>
   11d6e:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   11d72:	d1f4      	bne.n	11d5e <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   11d74:	4b36      	ldr	r3, [pc, #216]	; (11e50 <uarte_nrfx_configure+0x14c>)
   11d76:	e03c      	b.n	11df2 <uarte_nrfx_configure+0xee>
	switch (baudrate) {
   11d78:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   11d7c:	d056      	beq.n	11e2c <uarte_nrfx_configure+0x128>
   11d7e:	d807      	bhi.n	11d90 <uarte_nrfx_configure+0x8c>
   11d80:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   11d84:	d054      	beq.n	11e30 <uarte_nrfx_configure+0x12c>
   11d86:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   11d8a:	d1e8      	bne.n	11d5e <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   11d8c:	4b31      	ldr	r3, [pc, #196]	; (11e54 <uarte_nrfx_configure+0x150>)
   11d8e:	e030      	b.n	11df2 <uarte_nrfx_configure+0xee>
	switch (baudrate) {
   11d90:	f647 2712 	movw	r7, #31250	; 0x7a12
   11d94:	42bb      	cmp	r3, r7
   11d96:	d1e2      	bne.n	11d5e <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   11d98:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   11d9c:	e029      	b.n	11df2 <uarte_nrfx_configure+0xee>
	switch (baudrate) {
   11d9e:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   11da2:	d047      	beq.n	11e34 <uarte_nrfx_configure+0x130>
   11da4:	d813      	bhi.n	11dce <uarte_nrfx_configure+0xca>
   11da6:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   11daa:	d046      	beq.n	11e3a <uarte_nrfx_configure+0x136>
   11dac:	d809      	bhi.n	11dc2 <uarte_nrfx_configure+0xbe>
   11dae:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   11db2:	42bb      	cmp	r3, r7
   11db4:	d043      	beq.n	11e3e <uarte_nrfx_configure+0x13a>
   11db6:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   11dba:	d1d0      	bne.n	11d5e <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   11dbc:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   11dc0:	e017      	b.n	11df2 <uarte_nrfx_configure+0xee>
	switch (baudrate) {
   11dc2:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   11dc6:	d1ca      	bne.n	11d5e <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   11dc8:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   11dcc:	e011      	b.n	11df2 <uarte_nrfx_configure+0xee>
	switch (baudrate) {
   11dce:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   11dd2:	d037      	beq.n	11e44 <uarte_nrfx_configure+0x140>
   11dd4:	d808      	bhi.n	11de8 <uarte_nrfx_configure+0xe4>
   11dd6:	4f20      	ldr	r7, [pc, #128]	; (11e58 <uarte_nrfx_configure+0x154>)
   11dd8:	42bb      	cmp	r3, r7
   11dda:	d036      	beq.n	11e4a <uarte_nrfx_configure+0x146>
   11ddc:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   11de0:	d1bd      	bne.n	11d5e <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   11de2:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   11de6:	e004      	b.n	11df2 <uarte_nrfx_configure+0xee>
	switch (baudrate) {
   11de8:	4f1c      	ldr	r7, [pc, #112]	; (11e5c <uarte_nrfx_configure+0x158>)
   11dea:	42bb      	cmp	r3, r7
   11dec:	d1b7      	bne.n	11d5e <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   11dee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   11df2:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
   11df6:	4334      	orrs	r4, r6
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   11df8:	6883      	ldr	r3, [r0, #8]
   11dfa:	4322      	orrs	r2, r4
   11dfc:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   11dfe:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   11e02:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   11e06:	2000      	movs	r0, #0
}
   11e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   11e0a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   11e0e:	e7f0      	b.n	11df2 <uarte_nrfx_configure+0xee>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   11e10:	4b13      	ldr	r3, [pc, #76]	; (11e60 <uarte_nrfx_configure+0x15c>)
   11e12:	e7ee      	b.n	11df2 <uarte_nrfx_configure+0xee>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   11e14:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   11e18:	e7eb      	b.n	11df2 <uarte_nrfx_configure+0xee>
		nrf_baudrate = 0x00014000;
   11e1a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   11e1e:	e7e8      	b.n	11df2 <uarte_nrfx_configure+0xee>
	switch (baudrate) {
   11e20:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   11e24:	e7e5      	b.n	11df2 <uarte_nrfx_configure+0xee>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   11e26:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   11e2a:	e7e2      	b.n	11df2 <uarte_nrfx_configure+0xee>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   11e2c:	4b0d      	ldr	r3, [pc, #52]	; (11e64 <uarte_nrfx_configure+0x160>)
   11e2e:	e7e0      	b.n	11df2 <uarte_nrfx_configure+0xee>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   11e30:	4b0d      	ldr	r3, [pc, #52]	; (11e68 <uarte_nrfx_configure+0x164>)
   11e32:	e7de      	b.n	11df2 <uarte_nrfx_configure+0xee>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   11e34:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   11e38:	e7db      	b.n	11df2 <uarte_nrfx_configure+0xee>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   11e3a:	4b0c      	ldr	r3, [pc, #48]	; (11e6c <uarte_nrfx_configure+0x168>)
   11e3c:	e7d9      	b.n	11df2 <uarte_nrfx_configure+0xee>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   11e3e:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   11e42:	e7d6      	b.n	11df2 <uarte_nrfx_configure+0xee>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   11e44:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   11e48:	e7d3      	b.n	11df2 <uarte_nrfx_configure+0xee>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   11e4a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   11e4e:	e7d0      	b.n	11df2 <uarte_nrfx_configure+0xee>
   11e50:	0013b000 	.word	0x0013b000
   11e54:	004ea000 	.word	0x004ea000
   11e58:	0003d090 	.word	0x0003d090
   11e5c:	000f4240 	.word	0x000f4240
   11e60:	00275000 	.word	0x00275000
   11e64:	0075c000 	.word	0x0075c000
   11e68:	003af000 	.word	0x003af000
   11e6c:	013a9000 	.word	0x013a9000

00011e70 <uarte_0_init>:
	return dev->config->config_info;
   11e70:	6802      	ldr	r2, [r0, #0]
	#endif
	#if !defined(DT_NORDIC_NRF_UARTE_UART_0_RX_PIN)
	#define DT_NORDIC_NRF_UARTE_UART_0_RX_PIN NRF_UARTE_PSEL_DISCONNECTED
	#endif

	UART_NRF_UARTE_DEVICE(0);
   11e72:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   11e74:	6892      	ldr	r2, [r2, #8]
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   11e76:	4b18      	ldr	r3, [pc, #96]	; (11ed8 <uarte_0_init+0x68>)
   11e78:	6814      	ldr	r4, [r2, #0]
   11e7a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
	struct uarte_nrfx_data *data = get_dev_data(dev);
   11e7e:	6885      	ldr	r5, [r0, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   11e80:	2103      	movs	r1, #3
    p_reg->OUTSET = set_mask;
   11e82:	609a      	str	r2, [r3, #8]
    p_reg->PSEL.TXD = pseltxd;
   11e84:	261d      	movs	r6, #29
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   11e86:	2200      	movs	r2, #0
   11e88:	f8c3 1274 	str.w	r1, [r3, #628]	; 0x274
   11e8c:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
   11e90:	f8c4 650c 	str.w	r6, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   11e94:	261c      	movs	r6, #28
   11e96:	f8c4 6514 	str.w	r6, [r4, #1300]	; 0x514
    p_reg->OUTSET = set_mask;
   11e9a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
   11e9e:	609e      	str	r6, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   11ea0:	f8c3 126c 	str.w	r1, [r3, #620]	; 0x26c
   11ea4:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
    p_reg->PSEL.RTS = pselrts;
   11ea8:	231b      	movs	r3, #27
   11eaa:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   11eae:	231a      	movs	r3, #26
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   11eb0:	4629      	mov	r1, r5
   11eb2:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   11eb6:	f7ff ff25 	bl	11d04 <uarte_nrfx_configure>
	if (err) {
   11eba:	b958      	cbnz	r0, 11ed4 <uarte_0_init+0x64>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   11ebc:	2308      	movs	r3, #8
   11ebe:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   11ec2:	441d      	add	r5, r3
NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    p_reg->RXD.MAXCNT = length;
   11ec4:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   11ec6:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   11eca:	f8c4 5534 	str.w	r5, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   11ece:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11ed2:	6023      	str	r3, [r4, #0]
	UART_NRF_UARTE_DEVICE(0);
   11ed4:	bd70      	pop	{r4, r5, r6, pc}
   11ed6:	bf00      	nop
   11ed8:	50842500 	.word	0x50842500

00011edc <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(struct device *dev)
{
   11edc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   11ee0:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   11ee2:	4c21      	ldr	r4, [pc, #132]	; (11f68 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							u32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const u32_t ext_api_magic[] = {EXT_API_MAGIC};
   11ee4:	4e21      	ldr	r6, [pc, #132]	; (11f6c <check_ext_api_requests+0x90>)
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   11ee6:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   11eea:	f8df 9088 	ldr.w	r9, [pc, #136]	; 11f74 <check_ext_api_requests+0x98>
{
   11eee:	b085      	sub	sp, #20
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   11ef0:	45a8      	cmp	r8, r5
   11ef2:	d803      	bhi.n	11efc <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   11ef4:	2000      	movs	r0, #0
   11ef6:	b005      	add	sp, #20
   11ef8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((u32_t)*(ext_api_req->ext_api))
   11efc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   11efe:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   11f02:	681f      	ldr	r7, [r3, #0]
   11f04:	ab01      	add	r3, sp, #4
   11f06:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   11f0a:	220c      	movs	r2, #12
   11f0c:	4619      	mov	r1, r3
   11f0e:	4638      	mov	r0, r7
   11f10:	f002 f86e 	bl	13ff0 <memcmp>
   11f14:	b990      	cbnz	r0, 11f3c <check_ext_api_requests+0x60>
   11f16:	b18f      	cbz	r7, 11f3c <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   11f18:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const u32_t req_id = ext_api_req->request.ext_api_id;
   11f1a:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   11f1c:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   11f1e:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   11f20:	4291      	cmp	r1, r2
   11f22:	d10b      	bne.n	11f3c <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   11f24:	699a      	ldr	r2, [r3, #24]
	const u32_t req_min_version = ext_api_req->request.ext_api_version;
   11f26:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   11f28:	4291      	cmp	r1, r2
   11f2a:	d807      	bhi.n	11f3c <check_ext_api_requests+0x60>
	const u32_t req_max_version = ext_api_req->ext_api_max_version;
   11f2c:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   11f2e:	4291      	cmp	r1, r2
   11f30:	d904      	bls.n	11f3c <check_ext_api_requests+0x60>
	const u32_t req_flags = ext_api_req->request.ext_api_flags;
   11f32:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   11f34:	695b      	ldr	r3, [r3, #20]
   11f36:	ea32 0303 	bics.w	r3, r2, r3
   11f3a:	d00a      	beq.n	11f52 <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   11f3c:	6a27      	ldr	r7, [r4, #32]
   11f3e:	b167      	cbz	r7, 11f5a <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   11f40:	480b      	ldr	r0, [pc, #44]	; (11f70 <check_ext_api_requests+0x94>)
   11f42:	f001 fe7e 	bl	13c42 <printk>
			k_panic();
   11f46:	4040      	eors	r0, r0
   11f48:	f380 8811 	msr	BASEPRI, r0
   11f4c:	f04f 0004 	mov.w	r0, #4
   11f50:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   11f52:	68e3      	ldr	r3, [r4, #12]
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   11f54:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   11f56:	441c      	add	r4, r3
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   11f58:	e7ca      	b.n	11ef0 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   11f5a:	4648      	mov	r0, r9
   11f5c:	f001 fe71 	bl	13c42 <printk>
			*ext_api_req->ext_api = NULL;
   11f60:	6a63      	ldr	r3, [r4, #36]	; 0x24
   11f62:	601f      	str	r7, [r3, #0]
   11f64:	e7f5      	b.n	11f52 <check_ext_api_requests+0x76>
   11f66:	bf00      	nop
   11f68:	0001043c 	.word	0x0001043c
   11f6c:	00014630 	.word	0x00014630
   11f70:	00014be7 	.word	0x00014be7
   11f74:	00014c10 	.word	0x00014c10

00011f78 <nrf91_errata_31>:
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
   11f78:	4b06      	ldr	r3, [pc, #24]	; (11f94 <nrf91_errata_31+0x1c>)
   11f7a:	6818      	ldr	r0, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
   11f7c:	3b04      	subs	r3, #4
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
   11f7e:	681b      	ldr	r3, [r3, #0]
   11f80:	2b09      	cmp	r3, #9
   11f82:	d105      	bne.n	11f90 <nrf91_errata_31+0x18>
            {
                switch(var2)
   11f84:	3801      	subs	r0, #1
   11f86:	2801      	cmp	r0, #1
   11f88:	bf8c      	ite	hi
   11f8a:	2000      	movhi	r0, #0
   11f8c:	2001      	movls	r0, #1
   11f8e:	4770      	bx	lr
                    case 0x02ul:
                        return true;
                }
            }
        #endif
        return false;
   11f90:	2000      	movs	r0, #0
    #endif
}
   11f92:	4770      	bx	lr
   11f94:	00ff0134 	.word	0x00ff0134

00011f98 <nrf91_errata_14>:
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
   11f98:	4b05      	ldr	r3, [pc, #20]	; (11fb0 <nrf91_errata_14+0x18>)
   11f9a:	6818      	ldr	r0, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
   11f9c:	3b04      	subs	r3, #4
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
   11f9e:	681b      	ldr	r3, [r3, #0]
   11fa0:	2b09      	cmp	r3, #9
   11fa2:	d103      	bne.n	11fac <nrf91_errata_14+0x14>
            {
                switch(var2)
   11fa4:	1e43      	subs	r3, r0, #1
   11fa6:	4258      	negs	r0, r3
   11fa8:	4158      	adcs	r0, r3
   11faa:	4770      	bx	lr
                    case 0x02ul:
                        return false;
                }
            }
        #endif
        return false;
   11fac:	2000      	movs	r0, #0
    #endif
}
   11fae:	4770      	bx	lr
   11fb0:	00ff0134 	.word	0x00ff0134

00011fb4 <SystemInit>:
        /* Perform Secure-mode initialization routines. */

        /* Set all ARM SAU regions to NonSecure if TrustZone extensions are enabled.
        * Nordic SPU should handle Secure Attribution tasks */
        #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
   11fb4:	4a4e      	ldr	r2, [pc, #312]	; (120f0 <SystemInit+0x13c>)
{
   11fb6:	b508      	push	{r3, lr}
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
   11fb8:	6813      	ldr	r3, [r2, #0]
   11fba:	f043 0302 	orr.w	r3, r3, #2
   11fbe:	6013      	str	r3, [r2, #0]
        #endif
        
        /* Workaround for Errata 6 "POWER: SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_6()){
   11fc0:	f7ff ffda 	bl	11f78 <nrf91_errata_31>
   11fc4:	b130      	cbz	r0, 11fd4 <SystemInit+0x20>
            NRF_POWER_S->EVENTS_SLEEPENTER = (POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos);
   11fc6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   11fca:	2200      	movs	r2, #0
   11fcc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
            NRF_POWER_S->EVENTS_SLEEPEXIT = (POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos);
   11fd0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
        }

        /* Workaround for Errata 14 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_14()){
   11fd4:	f7ff ffe0 	bl	11f98 <nrf91_errata_14>
   11fd8:	b130      	cbz	r0, 11fe8 <SystemInit+0x34>
            *((volatile uint32_t *)0x50004A38) = 0x01ul;
   11fda:	2301      	movs	r3, #1
   11fdc:	4a45      	ldr	r2, [pc, #276]	; (120f4 <SystemInit+0x140>)
   11fde:	6013      	str	r3, [r2, #0]
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
   11fe0:	f6a2 2238 	subw	r2, r2, #2616	; 0xa38
   11fe4:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
{
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
   11fe8:	4b43      	ldr	r3, [pc, #268]	; (120f8 <SystemInit+0x144>)
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
   11fea:	681b      	ldr	r3, [r3, #0]
   11fec:	2b09      	cmp	r3, #9
   11fee:	d107      	bne.n	12000 <SystemInit+0x4c>
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
   11ff0:	4b42      	ldr	r3, [pc, #264]	; (120fc <SystemInit+0x148>)
            {
                switch(var2)
   11ff2:	681b      	ldr	r3, [r3, #0]
   11ff4:	2b02      	cmp	r3, #2
        }

        /* Workaround for Errata 15 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_15()){
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
   11ff6:	bf02      	ittt	eq
   11ff8:	2201      	moveq	r2, #1
   11ffa:	4b41      	ldreq	r3, [pc, #260]	; (12100 <SystemInit+0x14c>)
   11ffc:	f8c3 2578 	streq.w	r2, [r3, #1400]	; 0x578
        }

        /* Workaround for Errata 20 "RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_20()){
   12000:	f7ff ffca 	bl	11f98 <nrf91_errata_14>
   12004:	b110      	cbz	r0, 1200c <SystemInit+0x58>
            *((volatile uint32_t *)0x5003AEE4) = 0xE;
   12006:	220e      	movs	r2, #14
   12008:	4b3e      	ldr	r3, [pc, #248]	; (12104 <SystemInit+0x150>)
   1200a:	601a      	str	r2, [r3, #0]
        }

        /* Workaround for Errata 31 "XOSC32k Startup Failure" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_31()){
   1200c:	f7ff ffb4 	bl	11f78 <nrf91_errata_31>
   12010:	b120      	cbz	r0, 1201c <SystemInit+0x68>
            *((volatile uint32_t *)0x5000470Cul) = 0x0;
   12012:	2200      	movs	r2, #0
   12014:	4b3c      	ldr	r3, [pc, #240]	; (12108 <SystemInit+0x154>)
   12016:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)0x50004710ul) = 0x1;
   12018:	2201      	movs	r2, #1
   1201a:	605a      	str	r2, [r3, #4]
{
   1201c:	2200      	movs	r2, #0
   1201e:	00d3      	lsls	r3, r2, #3
   12020:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
   12024:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
   12028:	3101      	adds	r1, #1
   1202a:	d008      	beq.n	1203e <SystemInit+0x8a>
          #if defined ( __ICCARM__ )
              #pragma diag_suppress=Pa082
          #endif
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
   1202c:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
   12030:	3201      	adds	r2, #1
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
   12032:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
   12036:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
   1203a:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
   1203c:	d1ef      	bne.n	1201e <SystemInit+0x6a>
    }
    
    
    bool uicr_HFXOSRC_erased()
    {
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
   1203e:	4b33      	ldr	r3, [pc, #204]	; (1210c <SystemInit+0x158>)
   12040:	69da      	ldr	r2, [r3, #28]
        if (uicr_HFXOSRC_erased() || uicr_HFXOCNT_erased()) {
   12042:	07d1      	lsls	r1, r2, #31
   12044:	d53b      	bpl.n	120be <SystemInit+0x10a>
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
   12046:	4b32      	ldr	r3, [pc, #200]	; (12110 <SystemInit+0x15c>)
   12048:	4619      	mov	r1, r3
   1204a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1204e:	2a01      	cmp	r2, #1
   12050:	d1fb      	bne.n	1204a <SystemInit+0x96>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Wen;
   12052:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
   12056:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
   1205a:	2b01      	cmp	r3, #1
   1205c:	d1fb      	bne.n	12056 <SystemInit+0xa2>
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
   1205e:	4b2b      	ldr	r3, [pc, #172]	; (1210c <SystemInit+0x158>)
   12060:	69da      	ldr	r2, [r3, #28]
          if (uicr_HFXOSRC_erased()){
   12062:	07d2      	lsls	r2, r2, #31
   12064:	d508      	bpl.n	12078 <SystemInit+0xc4>
            uicr_erased_value = NRF_UICR_S->HFXOSRC;
   12066:	69da      	ldr	r2, [r3, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
   12068:	4929      	ldr	r1, [pc, #164]	; (12110 <SystemInit+0x15c>)
            uicr_new_value = (uicr_erased_value & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
   1206a:	f022 0201 	bic.w	r2, r2, #1
            NRF_UICR_S->HFXOSRC = uicr_new_value;
   1206e:	61da      	str	r2, [r3, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
   12070:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
   12074:	2a01      	cmp	r2, #1
   12076:	d1fb      	bne.n	12070 <SystemInit+0xbc>
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
   12078:	6a1a      	ldr	r2, [r3, #32]
   1207a:	3201      	adds	r2, #1
   1207c:	d10a      	bne.n	12094 <SystemInit+0xe0>
            uicr_erased_value = NRF_UICR_S->HFXOCNT;
   1207e:	6a1a      	ldr	r2, [r3, #32]
            uicr_new_value = (uicr_erased_value & ~UICR_HFXOCNT_HFXOCNT_Msk) | 0x20;
   12080:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   12084:	f042 0220 	orr.w	r2, r2, #32
            NRF_UICR_S->HFXOCNT = uicr_new_value;
   12088:	621a      	str	r2, [r3, #32]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
   1208a:	4a21      	ldr	r2, [pc, #132]	; (12110 <SystemInit+0x15c>)
   1208c:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   12090:	2b01      	cmp	r3, #1
   12092:	d1fb      	bne.n	1208c <SystemInit+0xd8>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Ren;
   12094:	2200      	movs	r2, #0
   12096:	4b1e      	ldr	r3, [pc, #120]	; (12110 <SystemInit+0x15c>)
   12098:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
   1209c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   120a0:	2a01      	cmp	r2, #1
   120a2:	d1fb      	bne.n	1209c <SystemInit+0xe8>
  __ASM volatile ("dsb 0xF":::"memory");
   120a4:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   120a8:	491a      	ldr	r1, [pc, #104]	; (12114 <SystemInit+0x160>)
   120aa:	4b1b      	ldr	r3, [pc, #108]	; (12118 <SystemInit+0x164>)
   120ac:	68ca      	ldr	r2, [r1, #12]
   120ae:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   120b2:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   120b4:	60cb      	str	r3, [r1, #12]
   120b6:	f3bf 8f4f 	dsb	sy
    __NOP();
   120ba:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   120bc:	e7fd      	b.n	120ba <SystemInit+0x106>
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
   120be:	6a1b      	ldr	r3, [r3, #32]
   120c0:	3301      	adds	r3, #1
   120c2:	d0c0      	beq.n	12046 <SystemInit+0x92>
        SCB->NSACR |= (3UL << 10);
   120c4:	4b13      	ldr	r3, [pc, #76]	; (12114 <SystemInit+0x160>)
   120c6:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
   120ca:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
   120ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   120d2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   120d6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   120da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   120de:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   120e2:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   120e6:	4b0d      	ldr	r3, [pc, #52]	; (1211c <SystemInit+0x168>)
   120e8:	4a0d      	ldr	r2, [pc, #52]	; (12120 <SystemInit+0x16c>)
   120ea:	601a      	str	r2, [r3, #0]
}
   120ec:	bd08      	pop	{r3, pc}
   120ee:	bf00      	nop
   120f0:	e000edd0 	.word	0xe000edd0
   120f4:	50004a38 	.word	0x50004a38
   120f8:	00ff0130 	.word	0x00ff0130
   120fc:	00ff0134 	.word	0x00ff0134
   12100:	50004000 	.word	0x50004000
   12104:	5003aee4 	.word	0x5003aee4
   12108:	5000470c 	.word	0x5000470c
   1210c:	00ff8000 	.word	0x00ff8000
   12110:	50039000 	.word	0x50039000
   12114:	e000ed00 	.word	0xe000ed00
   12118:	05fa0004 	.word	0x05fa0004
   1211c:	20001404 	.word	0x20001404
   12120:	03d09000 	.word	0x03d09000

00012124 <z_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_device_do_config_level(s32_t level)
{
   12124:	b570      	push	{r4, r5, r6, lr}
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
   12126:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
   12128:	4b08      	ldr	r3, [pc, #32]	; (1214c <z_sys_device_do_config_level+0x28>)
   1212a:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1212e:	3001      	adds	r0, #1
   12130:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   12134:	42a5      	cmp	r5, r4
   12136:	d800      	bhi.n	1213a <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
   12138:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
   1213a:	6823      	ldr	r3, [r4, #0]
   1213c:	4620      	mov	r0, r4
   1213e:	685b      	ldr	r3, [r3, #4]
   12140:	4798      	blx	r3
		if (retval != 0) {
   12142:	b100      	cbz	r0, 12146 <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
   12144:	6066      	str	r6, [r4, #4]
								info++) {
   12146:	340c      	adds	r4, #12
   12148:	e7f4      	b.n	12134 <z_sys_device_do_config_level+0x10>
   1214a:	bf00      	nop
   1214c:	000147c8 	.word	0x000147c8

00012150 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   12150:	4b10      	ldr	r3, [pc, #64]	; (12194 <z_impl_device_get_binding+0x44>)
{
   12152:	b570      	push	{r4, r5, r6, lr}
   12154:	4605      	mov	r5, r0
   12156:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   12158:	4c0f      	ldr	r4, [pc, #60]	; (12198 <z_impl_device_get_binding+0x48>)
   1215a:	429c      	cmp	r4, r3
   1215c:	d104      	bne.n	12168 <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   1215e:	4c0e      	ldr	r4, [pc, #56]	; (12198 <z_impl_device_get_binding+0x48>)
   12160:	42b4      	cmp	r4, r6
   12162:	d109      	bne.n	12178 <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
   12164:	2400      	movs	r4, #0
   12166:	e012      	b.n	1218e <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
   12168:	6862      	ldr	r2, [r4, #4]
   1216a:	b11a      	cbz	r2, 12174 <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
   1216c:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
   1216e:	6812      	ldr	r2, [r2, #0]
   12170:	42aa      	cmp	r2, r5
   12172:	d00c      	beq.n	1218e <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   12174:	340c      	adds	r4, #12
   12176:	e7f0      	b.n	1215a <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
   12178:	6863      	ldr	r3, [r4, #4]
   1217a:	b90b      	cbnz	r3, 12180 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   1217c:	340c      	adds	r4, #12
   1217e:	e7ef      	b.n	12160 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
   12180:	6823      	ldr	r3, [r4, #0]
   12182:	4628      	mov	r0, r5
   12184:	6819      	ldr	r1, [r3, #0]
   12186:	f001 ff27 	bl	13fd8 <strcmp>
   1218a:	2800      	cmp	r0, #0
   1218c:	d1f6      	bne.n	1217c <z_impl_device_get_binding+0x2c>
}
   1218e:	4620      	mov	r0, r4
   12190:	bd70      	pop	{r4, r5, r6, pc}
   12192:	bf00      	nop
   12194:	200014c8 	.word	0x200014c8
   12198:	20001450 	.word	0x20001450

0001219c <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   1219c:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   1219e:	4d0b      	ldr	r5, [pc, #44]	; (121cc <idle+0x30>)
   121a0:	f04f 0220 	mov.w	r2, #32
   121a4:	f3ef 8311 	mrs	r3, BASEPRI
   121a8:	f382 8811 	msr	BASEPRI, r2
   121ac:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
   121b0:	f002 f8c7 	bl	14342 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   121b4:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
   121b6:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   121b8:	2802      	cmp	r0, #2
   121ba:	bfd8      	it	le
   121bc:	4608      	movle	r0, r1
   121be:	f002 f8d0 	bl	14362 <z_set_timeout_expiry>
	_kernel.idle = ticks;
   121c2:	622c      	str	r4, [r5, #32]
 * @return N/A
 * @req K-CPU-IDLE-001
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   121c4:	f7ff f9d2 	bl	1156c <arch_cpu_idle>
}
   121c8:	e7ea      	b.n	121a0 <idle+0x4>
   121ca:	bf00      	nop
   121cc:	20000630 	.word	0x20000630

000121d0 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   121d0:	4802      	ldr	r0, [pc, #8]	; (121dc <z_bss_zero+0xc>)
   121d2:	4a03      	ldr	r2, [pc, #12]	; (121e0 <z_bss_zero+0x10>)
   121d4:	2100      	movs	r1, #0
   121d6:	1a12      	subs	r2, r2, r0
   121d8:	f001 bf5c 	b.w	14094 <memset>
   121dc:	20000000 	.word	0x20000000
   121e0:	20000690 	.word	0x20000690

000121e4 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   121e4:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   121e6:	4806      	ldr	r0, [pc, #24]	; (12200 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   121e8:	4a06      	ldr	r2, [pc, #24]	; (12204 <z_data_copy+0x20>)
   121ea:	4907      	ldr	r1, [pc, #28]	; (12208 <z_data_copy+0x24>)
   121ec:	1a12      	subs	r2, r2, r0
   121ee:	f001 ff26 	bl	1403e <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   121f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   121f6:	4a05      	ldr	r2, [pc, #20]	; (1220c <z_data_copy+0x28>)
   121f8:	4905      	ldr	r1, [pc, #20]	; (12210 <z_data_copy+0x2c>)
   121fa:	4806      	ldr	r0, [pc, #24]	; (12214 <z_data_copy+0x30>)
   121fc:	f001 bf1f 	b.w	1403e <memcpy>
   12200:	200013d0 	.word	0x200013d0
   12204:	2000152c 	.word	0x2000152c
   12208:	00014ca4 	.word	0x00014ca4
   1220c:	00000000 	.word	0x00000000
   12210:	00014ca4 	.word	0x00014ca4
   12214:	20000000 	.word	0x20000000

00012218 <bg_thread_main>:
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
   12218:	2201      	movs	r2, #1
{
   1221a:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   1221c:	4b0b      	ldr	r3, [pc, #44]	; (1224c <bg_thread_main+0x34>)

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1221e:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   12220:	701a      	strb	r2, [r3, #0]
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   12222:	f7ff ff7f 	bl	12124 <z_sys_device_do_config_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   12226:	4a0a      	ldr	r2, [pc, #40]	; (12250 <bg_thread_main+0x38>)
   12228:	490a      	ldr	r1, [pc, #40]	; (12254 <bg_thread_main+0x3c>)
   1222a:	480b      	ldr	r0, [pc, #44]	; (12258 <bg_thread_main+0x40>)
   1222c:	f001 fd09 	bl	13c42 <printk>
			KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   12230:	2003      	movs	r0, #3
   12232:	f7ff ff77 	bl	12124 <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
   12236:	f000 fc83 	bl	12b40 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   1223a:	f001 fca5 	bl	13b88 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1223e:	4a07      	ldr	r2, [pc, #28]	; (1225c <bg_thread_main+0x44>)
   12240:	7b13      	ldrb	r3, [r2, #12]
   12242:	f023 0301 	bic.w	r3, r3, #1
   12246:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   12248:	bd08      	pop	{r3, pc}
   1224a:	bf00      	nop
   1224c:	2000068d 	.word	0x2000068d
   12250:	000148e6 	.word	0x000148e6
   12254:	00014c4e 	.word	0x00014c4e
   12258:	00014c6c 	.word	0x00014c6c
   1225c:	200005c4 	.word	0x200005c4

00012260 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   12260:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
   12262:	4b37      	ldr	r3, [pc, #220]	; (12340 <z_cstart+0xe0>)
   12264:	b0a2      	sub	sp, #136	; 0x88
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   12266:	f383 8808 	msr	MSP, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1226a:	2500      	movs	r5, #0
   1226c:	23e0      	movs	r3, #224	; 0xe0
   1226e:	4c35      	ldr	r4, [pc, #212]	; (12344 <z_cstart+0xe4>)

	/* perform any architecture-specific initialization */
	arch_kernel_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
   12270:	2701      	movs	r7, #1
   12272:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   12276:	77e5      	strb	r5, [r4, #31]
   12278:	7625      	strb	r5, [r4, #24]
   1227a:	7665      	strb	r5, [r4, #25]
   1227c:	76a5      	strb	r5, [r4, #26]
   1227e:	76e5      	strb	r5, [r4, #27]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   12280:	6a63      	ldr	r3, [r4, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
   12282:	4e31      	ldr	r6, [pc, #196]	; (12348 <z_cstart+0xe8>)
   12284:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   12288:	6263      	str	r3, [r4, #36]	; 0x24
		      SCB_SHCSR_BUSFAULTENA_Msk;
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* Enable Secure Fault */
	SCB->SHCSR |= SCB_SHCSR_SECUREFAULTENA_Msk;
   1228a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1228c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   12290:	6263      	str	r3, [r4, #36]	; 0x24
	/* Clear BFAR before setting BusFaults to target Non-Secure state. */
	SCB->BFAR = 0;
   12292:	63a5      	str	r5, [r4, #56]	; 0x38

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   12294:	f7ff fad6 	bl	11844 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   12298:	f7ff f962 	bl	11560 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1229c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   122a0:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   122a2:	62e3      	str	r3, [r4, #44]	; 0x2c
	struct k_thread dummy_thread = {
   122a4:	ab07      	add	r3, sp, #28
   122a6:	226c      	movs	r2, #108	; 0x6c
   122a8:	4629      	mov	r1, r5
   122aa:	4618      	mov	r0, r3
   122ac:	f001 fef2 	bl	14094 <memset>
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
   122b0:	4c26      	ldr	r4, [pc, #152]	; (1234c <z_cstart+0xec>)
	struct k_thread dummy_thread = {
   122b2:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
	_current = &dummy_thread;
   122b6:	60a0      	str	r0, [r4, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   122b8:	4628      	mov	r0, r5
   122ba:	f7ff ff33 	bl	12124 <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   122be:	4638      	mov	r0, r7
   122c0:	f7ff ff30 	bl	12124 <z_sys_device_do_config_level>
	z_sched_init();
   122c4:	f000 fbee 	bl	12aa4 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
   122c8:	4b21      	ldr	r3, [pc, #132]	; (12350 <z_cstart+0xf0>)
	_kernel.ready_q.cache = &z_main_thread;
   122ca:	6266      	str	r6, [r4, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
   122cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
   122d0:	e9cd 7304 	strd	r7, r3, [sp, #16]
   122d4:	4630      	mov	r0, r6
   122d6:	4b1f      	ldr	r3, [pc, #124]	; (12354 <z_cstart+0xf4>)
   122d8:	e9cd 5502 	strd	r5, r5, [sp, #8]
   122dc:	e9cd 5500 	strd	r5, r5, [sp]
   122e0:	491d      	ldr	r1, [pc, #116]	; (12358 <z_cstart+0xf8>)
   122e2:	f000 fc15 	bl	12b10 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   122e6:	7b73      	ldrb	r3, [r6, #13]
   122e8:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   122ec:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   122f0:	7372      	strb	r2, [r6, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   122f2:	d104      	bne.n	122fe <z_cstart+0x9e>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
   122f4:	69b3      	ldr	r3, [r6, #24]
   122f6:	b913      	cbnz	r3, 122fe <z_cstart+0x9e>
		z_add_thread_to_ready_q(thread);
   122f8:	4630      	mov	r0, r6
   122fa:	f000 fa19 	bl	12730 <z_add_thread_to_ready_q>
	z_setup_new_thread(thread, stack,
   122fe:	4b17      	ldr	r3, [pc, #92]	; (1235c <z_cstart+0xfc>)
   12300:	2201      	movs	r2, #1
   12302:	9305      	str	r3, [sp, #20]
   12304:	230f      	movs	r3, #15
   12306:	e9cd 3203 	strd	r3, r2, [sp, #12]
   1230a:	2300      	movs	r3, #0
   1230c:	4d14      	ldr	r5, [pc, #80]	; (12360 <z_cstart+0x100>)
   1230e:	f44f 72a0 	mov.w	r2, #320	; 0x140
   12312:	4628      	mov	r0, r5
   12314:	e9cd 3301 	strd	r3, r3, [sp, #4]
   12318:	4912      	ldr	r1, [pc, #72]	; (12364 <z_cstart+0x104>)
   1231a:	9300      	str	r3, [sp, #0]
   1231c:	4b12      	ldr	r3, [pc, #72]	; (12368 <z_cstart+0x108>)
   1231e:	f000 fbf7 	bl	12b10 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   12322:	7b6b      	ldrb	r3, [r5, #13]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   12324:	f44f 6280 	mov.w	r2, #1024	; 0x400
   12328:	f023 0304 	bic.w	r3, r3, #4
   1232c:	736b      	strb	r3, [r5, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1232e:	4b0f      	ldr	r3, [pc, #60]	; (1236c <z_cstart+0x10c>)
   12330:	4909      	ldr	r1, [pc, #36]	; (12358 <z_cstart+0xf8>)
	list->tail = (sys_dnode_t *)list;
   12332:	e9c4 3306 	strd	r3, r3, [r4, #24]
   12336:	4804      	ldr	r0, [pc, #16]	; (12348 <z_cstart+0xe8>)
   12338:	4b06      	ldr	r3, [pc, #24]	; (12354 <z_cstart+0xf4>)
	_kernel.cpus[0].idle_thread = &z_idle_thread;
   1233a:	60e5      	str	r5, [r4, #12]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   1233c:	f7ff f8ee 	bl	1151c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   12340:	200013d0 	.word	0x200013d0
   12344:	e000ed00 	.word	0xe000ed00
   12348:	200005c4 	.word	0x200005c4
   1234c:	20000630 	.word	0x20000630
   12350:	00014c93 	.word	0x00014c93
   12354:	00012219 	.word	0x00012219
   12358:	20000690 	.word	0x20000690
   1235c:	00014c98 	.word	0x00014c98
   12360:	20000558 	.word	0x20000558
   12364:	20000a90 	.word	0x20000a90
   12368:	0001219d 	.word	0x0001219d
   1236c:	20000648 	.word	0x20000648

00012370 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
   12370:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   12372:	4b0e      	ldr	r3, [pc, #56]	; (123ac <init_mem_slab_module+0x3c>)
   12374:	4c0e      	ldr	r4, [pc, #56]	; (123b0 <init_mem_slab_module+0x40>)
   12376:	42a3      	cmp	r3, r4
   12378:	d301      	bcc.n	1237e <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   1237a:	2000      	movs	r0, #0
	return rc;
}
   1237c:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1237e:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   12382:	ea41 0200 	orr.w	r2, r1, r0
   12386:	f012 0203 	ands.w	r2, r2, #3
   1238a:	d10b      	bne.n	123a4 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   1238c:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1238e:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   12390:	42aa      	cmp	r2, r5
   12392:	d101      	bne.n	12398 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   12394:	331c      	adds	r3, #28
   12396:	e7ee      	b.n	12376 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   12398:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1239a:	3201      	adds	r2, #1
		*(char **)p = slab->free_list;
   1239c:	600e      	str	r6, [r1, #0]
		slab->free_list = p;
   1239e:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   123a0:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   123a2:	e7f5      	b.n	12390 <init_mem_slab_module+0x20>
		return -EINVAL;
   123a4:	f06f 0015 	mvn.w	r0, #21
	return rc;
   123a8:	e7e8      	b.n	1237c <init_mem_slab_module+0xc>
   123aa:	bf00      	nop
   123ac:	200014c8 	.word	0x200014c8
   123b0:	200014c8 	.word	0x200014c8

000123b4 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
   123b4:	b510      	push	{r4, lr}
   123b6:	460c      	mov	r4, r1
   123b8:	f04f 0320 	mov.w	r3, #32
   123bc:	f3ef 8111 	mrs	r1, BASEPRI
   123c0:	f383 8811 	msr	BASEPRI, r3
   123c4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   123c8:	6943      	ldr	r3, [r0, #20]
   123ca:	b15b      	cbz	r3, 123e4 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   123cc:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   123ce:	681b      	ldr	r3, [r3, #0]
   123d0:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   123d2:	6983      	ldr	r3, [r0, #24]
   123d4:	3301      	adds	r3, #1
   123d6:	6183      	str	r3, [r0, #24]
		result = 0;
   123d8:	2000      	movs	r0, #0
	__asm__ volatile(
   123da:	f381 8811 	msr	BASEPRI, r1
   123de:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   123e2:	e00e      	b.n	12402 <k_mem_slab_alloc+0x4e>
	} else if (timeout == K_NO_WAIT) {
   123e4:	b91a      	cbnz	r2, 123ee <k_mem_slab_alloc+0x3a>
		result = -ENOMEM;
   123e6:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
   123ea:	6022      	str	r2, [r4, #0]
		result = -ENOMEM;
   123ec:	e7f5      	b.n	123da <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   123ee:	4613      	mov	r3, r2
   123f0:	4602      	mov	r2, r0
   123f2:	4804      	ldr	r0, [pc, #16]	; (12404 <k_mem_slab_alloc+0x50>)
   123f4:	f000 fb00 	bl	129f8 <z_pend_curr>
		if (result == 0) {
   123f8:	b918      	cbnz	r0, 12402 <k_mem_slab_alloc+0x4e>
			*mem = _current->base.swap_data;
   123fa:	4b03      	ldr	r3, [pc, #12]	; (12408 <k_mem_slab_alloc+0x54>)
   123fc:	689b      	ldr	r3, [r3, #8]
   123fe:	695b      	ldr	r3, [r3, #20]
   12400:	6023      	str	r3, [r4, #0]
}
   12402:	bd10      	pop	{r4, pc}
   12404:	2000068e 	.word	0x2000068e
   12408:	20000630 	.word	0x20000630

0001240c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1240c:	b570      	push	{r4, r5, r6, lr}
   1240e:	4604      	mov	r4, r0
   12410:	460d      	mov	r5, r1
	__asm__ volatile(
   12412:	f04f 0320 	mov.w	r3, #32
   12416:	f3ef 8611 	mrs	r6, BASEPRI
   1241a:	f383 8811 	msr	BASEPRI, r3
   1241e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   12422:	f001 ff3c 	bl	1429e <z_unpend_first_thread>

	if (pending_thread != NULL) {
   12426:	b180      	cbz	r0, 1244a <k_mem_slab_free+0x3e>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   12428:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1242a:	682a      	ldr	r2, [r5, #0]
   1242c:	6681      	str	r1, [r0, #104]	; 0x68
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1242e:	6142      	str	r2, [r0, #20]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   12430:	7b42      	ldrb	r2, [r0, #13]
   12432:	06d2      	lsls	r2, r2, #27
   12434:	d103      	bne.n	1243e <k_mem_slab_free+0x32>
	if (z_is_thread_ready(thread)) {
   12436:	6983      	ldr	r3, [r0, #24]
   12438:	b90b      	cbnz	r3, 1243e <k_mem_slab_free+0x32>
		z_add_thread_to_ready_q(thread);
   1243a:	f000 f979 	bl	12730 <z_add_thread_to_ready_q>
		z_ready_thread(pending_thread);
		z_reschedule(&lock, key);
   1243e:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   12440:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   12444:	4807      	ldr	r0, [pc, #28]	; (12464 <k_mem_slab_free+0x58>)
   12446:	f001 becf 	b.w	141e8 <z_reschedule>
		**(char ***)mem = slab->free_list;
   1244a:	682b      	ldr	r3, [r5, #0]
   1244c:	6962      	ldr	r2, [r4, #20]
   1244e:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   12450:	682b      	ldr	r3, [r5, #0]
   12452:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   12454:	69a3      	ldr	r3, [r4, #24]
   12456:	3b01      	subs	r3, #1
   12458:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1245a:	f386 8811 	msr	BASEPRI, r6
   1245e:	f3bf 8f6f 	isb	sy
}
   12462:	bd70      	pop	{r4, r5, r6, pc}
   12464:	2000068e 	.word	0x2000068e

00012468 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
   12468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1246a:	4604      	mov	r4, r0
   1246c:	460e      	mov	r6, r1
	__asm__ volatile(
   1246e:	f04f 0320 	mov.w	r3, #32
   12472:	f3ef 8711 	mrs	r7, BASEPRI
   12476:	f383 8811 	msr	BASEPRI, r3
   1247a:	f3bf 8f6f 	isb	sy
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1247e:	68c3      	ldr	r3, [r0, #12]
   12480:	4a30      	ldr	r2, [pc, #192]	; (12544 <z_impl_k_mutex_lock+0xdc>)
   12482:	b15b      	cbz	r3, 1249c <z_impl_k_mutex_lock+0x34>
   12484:	6880      	ldr	r0, [r0, #8]
   12486:	6891      	ldr	r1, [r2, #8]
   12488:	4288      	cmp	r0, r1
   1248a:	d015      	beq.n	124b8 <z_impl_k_mutex_lock+0x50>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(timeout == (s32_t)K_NO_WAIT)) {
   1248c:	b9b6      	cbnz	r6, 124bc <z_impl_k_mutex_lock+0x54>
	__asm__ volatile(
   1248e:	f387 8811 	msr	BASEPRI, r7
   12492:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   12496:	f06f 000f 	mvn.w	r0, #15
   1249a:	e00c      	b.n	124b6 <z_impl_k_mutex_lock+0x4e>
					_current->base.prio :
   1249c:	6891      	ldr	r1, [r2, #8]
   1249e:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   124a2:	3301      	adds	r3, #1
   124a4:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   124a6:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   124a8:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   124aa:	60a3      	str	r3, [r4, #8]
   124ac:	f387 8811 	msr	BASEPRI, r7
   124b0:	f3bf 8f6f 	isb	sy
		return 0;
   124b4:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   124b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					_current->base.prio :
   124b8:	6921      	ldr	r1, [r4, #16]
   124ba:	e7f2      	b.n	124a2 <z_impl_k_mutex_lock+0x3a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   124bc:	f990 300e 	ldrsb.w	r3, [r0, #14]
   124c0:	f991 200e 	ldrsb.w	r2, [r1, #14]
   124c4:	429a      	cmp	r2, r3
   124c6:	bfa8      	it	ge
   124c8:	461a      	movge	r2, r3
   124ca:	ea22 71e2 	bic.w	r1, r2, r2, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   124ce:	428b      	cmp	r3, r1
   124d0:	dd2b      	ble.n	1252a <z_impl_k_mutex_lock+0xc2>
		return z_set_prio(mutex->owner, new_prio);
   124d2:	f000 faa5 	bl	12a20 <z_set_prio>
   124d6:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   124d8:	4633      	mov	r3, r6
   124da:	4622      	mov	r2, r4
   124dc:	4639      	mov	r1, r7
   124de:	481a      	ldr	r0, [pc, #104]	; (12548 <z_impl_k_mutex_lock+0xe0>)
   124e0:	f000 fa8a 	bl	129f8 <z_pend_curr>
	if (got_mutex == 0) {
   124e4:	2800      	cmp	r0, #0
   124e6:	d0e6      	beq.n	124b6 <z_impl_k_mutex_lock+0x4e>
	__asm__ volatile(
   124e8:	f04f 0320 	mov.w	r3, #32
   124ec:	f3ef 8611 	mrs	r6, BASEPRI
   124f0:	f383 8811 	msr	BASEPRI, r3
   124f4:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   124f8:	6823      	ldr	r3, [r4, #0]
   124fa:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   124fc:	429c      	cmp	r4, r3
   124fe:	d007      	beq.n	12510 <z_impl_k_mutex_lock+0xa8>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   12500:	b133      	cbz	r3, 12510 <z_impl_k_mutex_lock+0xa8>
   12502:	f993 300e 	ldrsb.w	r3, [r3, #14]
   12506:	4299      	cmp	r1, r3
   12508:	bfa8      	it	ge
   1250a:	4619      	movge	r1, r3
   1250c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   12510:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   12512:	f990 300e 	ldrsb.w	r3, [r0, #14]
   12516:	4299      	cmp	r1, r3
   12518:	d109      	bne.n	1252e <z_impl_k_mutex_lock+0xc6>
	if (resched) {
   1251a:	b16d      	cbz	r5, 12538 <z_impl_k_mutex_lock+0xd0>
		z_reschedule(&lock, key);
   1251c:	4631      	mov	r1, r6
   1251e:	480a      	ldr	r0, [pc, #40]	; (12548 <z_impl_k_mutex_lock+0xe0>)
   12520:	f001 fe62 	bl	141e8 <z_reschedule>
	return -EAGAIN;
   12524:	f06f 000a 	mvn.w	r0, #10
   12528:	e7c5      	b.n	124b6 <z_impl_k_mutex_lock+0x4e>
	bool resched = false;
   1252a:	2500      	movs	r5, #0
   1252c:	e7d4      	b.n	124d8 <z_impl_k_mutex_lock+0x70>
		return z_set_prio(mutex->owner, new_prio);
   1252e:	f000 fa77 	bl	12a20 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   12532:	2800      	cmp	r0, #0
   12534:	d1f2      	bne.n	1251c <z_impl_k_mutex_lock+0xb4>
   12536:	e7f0      	b.n	1251a <z_impl_k_mutex_lock+0xb2>
	__asm__ volatile(
   12538:	f386 8811 	msr	BASEPRI, r6
   1253c:	f3bf 8f6f 	isb	sy
   12540:	e7f0      	b.n	12524 <z_impl_k_mutex_lock+0xbc>
   12542:	bf00      	nop
   12544:	20000630 	.word	0x20000630
   12548:	2000068e 	.word	0x2000068e

0001254c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1254c:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	CHECKIF(mutex->owner == NULL) {
   1254e:	6883      	ldr	r3, [r0, #8]
{
   12550:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   12552:	2b00      	cmp	r3, #0
   12554:	d03b      	beq.n	125ce <z_impl_k_mutex_unlock+0x82>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   12556:	4a21      	ldr	r2, [pc, #132]	; (125dc <z_impl_k_mutex_unlock+0x90>)
   12558:	6892      	ldr	r2, [r2, #8]
   1255a:	4293      	cmp	r3, r2
   1255c:	d13a      	bne.n	125d4 <z_impl_k_mutex_unlock+0x88>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   1255e:	7bda      	ldrb	r2, [r3, #15]
   12560:	3a01      	subs	r2, #1
   12562:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   12564:	68c3      	ldr	r3, [r0, #12]
   12566:	2b01      	cmp	r3, #1
   12568:	d005      	beq.n	12576 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   1256a:	3b01      	subs	r3, #1
   1256c:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   1256e:	f000 f8c3 	bl	126f8 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   12572:	2000      	movs	r0, #0
}
   12574:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   12576:	f04f 0320 	mov.w	r3, #32
   1257a:	f3ef 8511 	mrs	r5, BASEPRI
   1257e:	f383 8811 	msr	BASEPRI, r3
   12582:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   12586:	6901      	ldr	r1, [r0, #16]
   12588:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   1258a:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1258e:	4299      	cmp	r1, r3
   12590:	d001      	beq.n	12596 <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   12592:	f000 fa45 	bl	12a20 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   12596:	4620      	mov	r0, r4
   12598:	f001 fe81 	bl	1429e <z_unpend_first_thread>
	mutex->owner = new_owner;
   1259c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1259e:	b180      	cbz	r0, 125c2 <z_impl_k_mutex_unlock+0x76>
		mutex->owner_orig_prio = new_owner->base.prio;
   125a0:	f990 200e 	ldrsb.w	r2, [r0, #14]
   125a4:	6122      	str	r2, [r4, #16]
   125a6:	2200      	movs	r2, #0
   125a8:	6682      	str	r2, [r0, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   125aa:	7b42      	ldrb	r2, [r0, #13]
   125ac:	06d2      	lsls	r2, r2, #27
   125ae:	d103      	bne.n	125b8 <z_impl_k_mutex_unlock+0x6c>
	if (z_is_thread_ready(thread)) {
   125b0:	6983      	ldr	r3, [r0, #24]
   125b2:	b90b      	cbnz	r3, 125b8 <z_impl_k_mutex_unlock+0x6c>
		z_add_thread_to_ready_q(thread);
   125b4:	f000 f8bc 	bl	12730 <z_add_thread_to_ready_q>
		z_reschedule(&lock, key);
   125b8:	4629      	mov	r1, r5
   125ba:	4809      	ldr	r0, [pc, #36]	; (125e0 <z_impl_k_mutex_unlock+0x94>)
   125bc:	f001 fe14 	bl	141e8 <z_reschedule>
   125c0:	e7d5      	b.n	1256e <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   125c2:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   125c4:	f385 8811 	msr	BASEPRI, r5
   125c8:	f3bf 8f6f 	isb	sy
   125cc:	e7cf      	b.n	1256e <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   125ce:	f06f 0015 	mvn.w	r0, #21
   125d2:	e7cf      	b.n	12574 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   125d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   125d8:	e7cc      	b.n	12574 <z_impl_k_mutex_unlock+0x28>
   125da:	bf00      	nop
   125dc:	20000630 	.word	0x20000630
   125e0:	2000068e 	.word	0x2000068e

000125e4 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   125e4:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   125e6:	4c08      	ldr	r4, [pc, #32]	; (12608 <z_reset_time_slice+0x24>)
   125e8:	6823      	ldr	r3, [r4, #0]
   125ea:	b15b      	cbz	r3, 12604 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   125ec:	f7fe fbea 	bl	10dc4 <z_clock_elapsed>
   125f0:	6822      	ldr	r2, [r4, #0]
   125f2:	4906      	ldr	r1, [pc, #24]	; (1260c <z_reset_time_slice+0x28>)
   125f4:	4410      	add	r0, r2
   125f6:	6108      	str	r0, [r1, #16]
		z_set_timeout_expiry(slice_time, false);
	}
}
   125f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   125fc:	2100      	movs	r1, #0
   125fe:	4610      	mov	r0, r2
   12600:	f001 beaf 	b.w	14362 <z_set_timeout_expiry>
}
   12604:	bd10      	pop	{r4, pc}
   12606:	bf00      	nop
   12608:	20000668 	.word	0x20000668
   1260c:	20000630 	.word	0x20000630

00012610 <k_sched_time_slice_set>:

void k_sched_time_slice_set(s32_t slice, int prio)
{
   12610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12612:	460c      	mov	r4, r1
	__asm__ volatile(
   12614:	f04f 0320 	mov.w	r3, #32
   12618:	f3ef 8511 	mrs	r5, BASEPRI
   1261c:	f383 8811 	msr	BASEPRI, r3
   12620:	f3bf 8f6f 	isb	sy
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
   12624:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   12628:	f240 36e7 	movw	r6, #999	; 0x3e7
   1262c:	2700      	movs	r7, #0
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1262e:	2200      	movs	r2, #0
   12630:	fbe1 6700 	umlal	r6, r7, r1, r0
   12634:	4b09      	ldr	r3, [pc, #36]	; (1265c <k_sched_time_slice_set+0x4c>)
   12636:	4630      	mov	r0, r6
   12638:	611a      	str	r2, [r3, #16]
   1263a:	4639      	mov	r1, r7
   1263c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12640:	2300      	movs	r3, #0
   12642:	f7fd fefb 	bl	1043c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   12646:	4b06      	ldr	r3, [pc, #24]	; (12660 <k_sched_time_slice_set+0x50>)
   12648:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   1264a:	4b06      	ldr	r3, [pc, #24]	; (12664 <k_sched_time_slice_set+0x54>)
   1264c:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
   1264e:	f7ff ffc9 	bl	125e4 <z_reset_time_slice>
	__asm__ volatile(
   12652:	f385 8811 	msr	BASEPRI, r5
   12656:	f3bf 8f6f 	isb	sy
	}
}
   1265a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1265c:	20000630 	.word	0x20000630
   12660:	20000668 	.word	0x20000668
   12664:	20000664 	.word	0x20000664

00012668 <k_sched_lock>:
	__asm__ volatile(
   12668:	f04f 0320 	mov.w	r3, #32
   1266c:	f3ef 8111 	mrs	r1, BASEPRI
   12670:	f383 8811 	msr	BASEPRI, r3
   12674:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   12678:	4b04      	ldr	r3, [pc, #16]	; (1268c <k_sched_lock+0x24>)
   1267a:	689a      	ldr	r2, [r3, #8]
   1267c:	7bd3      	ldrb	r3, [r2, #15]
   1267e:	3b01      	subs	r3, #1
   12680:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   12682:	f381 8811 	msr	BASEPRI, r1
   12686:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   1268a:	4770      	bx	lr
   1268c:	20000630 	.word	0x20000630

00012690 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   12690:	4b09      	ldr	r3, [pc, #36]	; (126b8 <z_priq_dumb_remove+0x28>)
   12692:	f103 0228 	add.w	r2, r3, #40	; 0x28
   12696:	4282      	cmp	r2, r0
   12698:	d105      	bne.n	126a6 <z_priq_dumb_remove+0x16>
   1269a:	689b      	ldr	r3, [r3, #8]
   1269c:	428b      	cmp	r3, r1
   1269e:	d102      	bne.n	126a6 <z_priq_dumb_remove+0x16>
   126a0:	7b4b      	ldrb	r3, [r1, #13]
   126a2:	06db      	lsls	r3, r3, #27
   126a4:	d106      	bne.n	126b4 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   126a6:	e9d1 3200 	ldrd	r3, r2, [r1]
   126aa:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   126ac:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   126ae:	2300      	movs	r3, #0
	node->prev = NULL;
   126b0:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   126b4:	4770      	bx	lr
   126b6:	bf00      	nop
   126b8:	20000630 	.word	0x20000630

000126bc <update_cache>:
{
   126bc:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   126be:	4c0d      	ldr	r4, [pc, #52]	; (126f4 <update_cache+0x38>)
{
   126c0:	4602      	mov	r2, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   126c2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   126c6:	f001 fdb0 	bl	1422a <z_priq_dumb_best>
	return thread ? thread : _current_cpu->idle_thread;
   126ca:	4605      	mov	r5, r0
   126cc:	b900      	cbnz	r0, 126d0 <update_cache+0x14>
   126ce:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   126d0:	68a3      	ldr	r3, [r4, #8]
   126d2:	b94a      	cbnz	r2, 126e8 <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
   126d4:	7b5a      	ldrb	r2, [r3, #13]
   126d6:	06d2      	lsls	r2, r2, #27
   126d8:	d106      	bne.n	126e8 <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   126da:	69aa      	ldr	r2, [r5, #24]
   126dc:	b922      	cbnz	r2, 126e8 <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(thread)) {
   126de:	89da      	ldrh	r2, [r3, #14]
   126e0:	2a7f      	cmp	r2, #127	; 0x7f
   126e2:	d901      	bls.n	126e8 <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
   126e4:	6263      	str	r3, [r4, #36]	; 0x24
}
   126e6:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   126e8:	429d      	cmp	r5, r3
   126ea:	d001      	beq.n	126f0 <update_cache+0x34>
			z_reset_time_slice();
   126ec:	f7ff ff7a 	bl	125e4 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   126f0:	6265      	str	r5, [r4, #36]	; 0x24
}
   126f2:	e7f8      	b.n	126e6 <update_cache+0x2a>
   126f4:	20000630 	.word	0x20000630

000126f8 <k_sched_unlock>:
{
   126f8:	b510      	push	{r4, lr}
	__asm__ volatile(
   126fa:	f04f 0320 	mov.w	r3, #32
   126fe:	f3ef 8411 	mrs	r4, BASEPRI
   12702:	f383 8811 	msr	BASEPRI, r3
   12706:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1270a:	4b08      	ldr	r3, [pc, #32]	; (1272c <k_sched_unlock+0x34>)
		update_cache(0);
   1270c:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   1270e:	689a      	ldr	r2, [r3, #8]
   12710:	7bd3      	ldrb	r3, [r2, #15]
   12712:	3301      	adds	r3, #1
   12714:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   12716:	f7ff ffd1 	bl	126bc <update_cache>
	__asm__ volatile(
   1271a:	f384 8811 	msr	BASEPRI, r4
   1271e:	f3bf 8f6f 	isb	sy
}
   12722:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   12726:	f001 bd76 	b.w	14216 <z_reschedule_unlocked>
   1272a:	bf00      	nop
   1272c:	20000630 	.word	0x20000630

00012730 <z_add_thread_to_ready_q>:
{
   12730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   12732:	f04f 0320 	mov.w	r3, #32
   12736:	f3ef 8511 	mrs	r5, BASEPRI
   1273a:	f383 8811 	msr	BASEPRI, r3
   1273e:	f3bf 8f6f 	isb	sy
	return list->head == list;
   12742:	4a16      	ldr	r2, [pc, #88]	; (1279c <z_add_thread_to_ready_q+0x6c>)
   12744:	4611      	mov	r1, r2
   12746:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1274a:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1274c:	428b      	cmp	r3, r1
   1274e:	bf08      	it	eq
   12750:	2300      	moveq	r3, #0
   12752:	2b00      	cmp	r3, #0
   12754:	bf38      	it	cc
   12756:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   12758:	b1d3      	cbz	r3, 12790 <z_add_thread_to_ready_q+0x60>
	if (thread_1->base.prio < thread_2->base.prio) {
   1275a:	f990 700e 	ldrsb.w	r7, [r0, #14]
   1275e:	f993 600e 	ldrsb.w	r6, [r3, #14]
   12762:	42b7      	cmp	r7, r6
   12764:	db03      	blt.n	1276e <z_add_thread_to_ready_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
   12766:	429c      	cmp	r4, r3
   12768:	d012      	beq.n	12790 <z_add_thread_to_ready_q+0x60>
   1276a:	681b      	ldr	r3, [r3, #0]
   1276c:	e7f4      	b.n	12758 <z_add_thread_to_ready_q+0x28>
	node->prev = successor->prev;
   1276e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   12770:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   12774:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   12776:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   12778:	7b43      	ldrb	r3, [r0, #13]
   1277a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1277e:	7343      	strb	r3, [r0, #13]
		update_cache(0);
   12780:	2000      	movs	r0, #0
   12782:	f7ff ff9b 	bl	126bc <update_cache>
	__asm__ volatile(
   12786:	f385 8811 	msr	BASEPRI, r5
   1278a:	f3bf 8f6f 	isb	sy
}
   1278e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	node->prev = list->tail;
   12790:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
   12794:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   12796:	6018      	str	r0, [r3, #0]
	list->tail = node;
   12798:	62d0      	str	r0, [r2, #44]	; 0x2c
}
   1279a:	e7ed      	b.n	12778 <z_add_thread_to_ready_q+0x48>
   1279c:	20000630 	.word	0x20000630

000127a0 <z_move_thread_to_end_of_prio_q>:
{
   127a0:	4601      	mov	r1, r0
   127a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   127a4:	f04f 0320 	mov.w	r3, #32
   127a8:	f3ef 8411 	mrs	r4, BASEPRI
   127ac:	f383 8811 	msr	BASEPRI, r3
   127b0:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   127b4:	f990 300d 	ldrsb.w	r3, [r0, #13]
   127b8:	2b00      	cmp	r3, #0
   127ba:	da02      	bge.n	127c2 <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   127bc:	4819      	ldr	r0, [pc, #100]	; (12824 <z_move_thread_to_end_of_prio_q+0x84>)
   127be:	f7ff ff67 	bl	12690 <z_priq_dumb_remove>
	return list->head == list;
   127c2:	4a19      	ldr	r2, [pc, #100]	; (12828 <z_move_thread_to_end_of_prio_q+0x88>)
   127c4:	4610      	mov	r0, r2
   127c6:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   127ca:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   127cc:	4283      	cmp	r3, r0
   127ce:	bf08      	it	eq
   127d0:	2300      	moveq	r3, #0
   127d2:	2b00      	cmp	r3, #0
   127d4:	bf38      	it	cc
   127d6:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   127d8:	b1eb      	cbz	r3, 12816 <z_move_thread_to_end_of_prio_q+0x76>
	if (thread_1->base.prio < thread_2->base.prio) {
   127da:	f991 700e 	ldrsb.w	r7, [r1, #14]
   127de:	f993 600e 	ldrsb.w	r6, [r3, #14]
   127e2:	42b7      	cmp	r7, r6
   127e4:	db03      	blt.n	127ee <z_move_thread_to_end_of_prio_q+0x4e>
	return (node == list->tail) ? NULL : node->next;
   127e6:	429d      	cmp	r5, r3
   127e8:	d015      	beq.n	12816 <z_move_thread_to_end_of_prio_q+0x76>
   127ea:	681b      	ldr	r3, [r3, #0]
   127ec:	e7f4      	b.n	127d8 <z_move_thread_to_end_of_prio_q+0x38>
	node->prev = successor->prev;
   127ee:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
   127f0:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
   127f4:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   127f6:	6059      	str	r1, [r3, #4]
   127f8:	7b4b      	ldrb	r3, [r1, #13]
		update_cache(thread == _current);
   127fa:	6890      	ldr	r0, [r2, #8]
   127fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
   12800:	734b      	strb	r3, [r1, #13]
   12802:	1a43      	subs	r3, r0, r1
   12804:	4258      	negs	r0, r3
   12806:	4158      	adcs	r0, r3
   12808:	f7ff ff58 	bl	126bc <update_cache>
	__asm__ volatile(
   1280c:	f384 8811 	msr	BASEPRI, r4
   12810:	f3bf 8f6f 	isb	sy
}
   12814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	node->prev = list->tail;
   12816:	e9c1 0500 	strd	r0, r5, [r1]
	list->tail->next = node;
   1281a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1281c:	6019      	str	r1, [r3, #0]
	list->tail = node;
   1281e:	62d1      	str	r1, [r2, #44]	; 0x2c
}
   12820:	e7ea      	b.n	127f8 <z_move_thread_to_end_of_prio_q+0x58>
   12822:	bf00      	nop
   12824:	20000658 	.word	0x20000658
   12828:	20000630 	.word	0x20000630

0001282c <z_time_slice>:
{
   1282c:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
   1282e:	4a15      	ldr	r2, [pc, #84]	; (12884 <z_time_slice+0x58>)
   12830:	4b15      	ldr	r3, [pc, #84]	; (12888 <z_time_slice+0x5c>)
   12832:	6814      	ldr	r4, [r2, #0]
{
   12834:	4601      	mov	r1, r0
	if (pending_current == _current) {
   12836:	6898      	ldr	r0, [r3, #8]
   12838:	42a0      	cmp	r0, r4
   1283a:	461c      	mov	r4, r3
   1283c:	d103      	bne.n	12846 <z_time_slice+0x1a>
}
   1283e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
   12842:	f7ff becf 	b.w	125e4 <z_reset_time_slice>
	pending_current = NULL;
   12846:	2500      	movs	r5, #0
   12848:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1284a:	4a10      	ldr	r2, [pc, #64]	; (1288c <z_time_slice+0x60>)
   1284c:	6812      	ldr	r2, [r2, #0]
   1284e:	b1b2      	cbz	r2, 1287e <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   12850:	89c2      	ldrh	r2, [r0, #14]
   12852:	2a7f      	cmp	r2, #127	; 0x7f
   12854:	d813      	bhi.n	1287e <z_time_slice+0x52>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   12856:	4a0e      	ldr	r2, [pc, #56]	; (12890 <z_time_slice+0x64>)
   12858:	f990 500e 	ldrsb.w	r5, [r0, #14]
   1285c:	6812      	ldr	r2, [r2, #0]
   1285e:	4295      	cmp	r5, r2
   12860:	db0d      	blt.n	1287e <z_time_slice+0x52>
		&& !z_is_idle_thread_object(thread)
   12862:	4a0c      	ldr	r2, [pc, #48]	; (12894 <z_time_slice+0x68>)
   12864:	4290      	cmp	r0, r2
   12866:	d00a      	beq.n	1287e <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   12868:	6982      	ldr	r2, [r0, #24]
   1286a:	b942      	cbnz	r2, 1287e <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
   1286c:	691a      	ldr	r2, [r3, #16]
   1286e:	428a      	cmp	r2, r1
   12870:	dc02      	bgt.n	12878 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
   12872:	f7ff ff95 	bl	127a0 <z_move_thread_to_end_of_prio_q>
   12876:	e7e2      	b.n	1283e <z_time_slice+0x12>
			_current_cpu->slice_ticks -= ticks;
   12878:	1a52      	subs	r2, r2, r1
   1287a:	611a      	str	r2, [r3, #16]
}
   1287c:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
   1287e:	2300      	movs	r3, #0
   12880:	6123      	str	r3, [r4, #16]
   12882:	e7fb      	b.n	1287c <z_time_slice+0x50>
   12884:	20000660 	.word	0x20000660
   12888:	20000630 	.word	0x20000630
   1288c:	20000668 	.word	0x20000668
   12890:	20000664 	.word	0x20000664
   12894:	20000558 	.word	0x20000558

00012898 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   12898:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1289a:	b570      	push	{r4, r5, r6, lr}
   1289c:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   1289e:	b103      	cbz	r3, 128a2 <z_thread_single_abort+0xa>
		thread->fn_abort();
   128a0:	4798      	blx	r3
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   128a2:	f104 0018 	add.w	r0, r4, #24
   128a6:	f001 fd36 	bl	14316 <z_abort_timeout>
	__asm__ volatile(
   128aa:	f04f 0320 	mov.w	r3, #32
   128ae:	f3ef 8611 	mrs	r6, BASEPRI
   128b2:	f383 8811 	msr	BASEPRI, r3
   128b6:	f3bf 8f6f 	isb	sy
		if (z_is_thread_ready(thread)) {
   128ba:	4620      	mov	r0, r4
   128bc:	f001 fc8b 	bl	141d6 <z_is_thread_ready>
   128c0:	4605      	mov	r5, r0
   128c2:	b1d8      	cbz	r0, 128fc <z_thread_single_abort+0x64>
			if (z_is_thread_queued(thread)) {
   128c4:	f994 300d 	ldrsb.w	r3, [r4, #13]
   128c8:	2b00      	cmp	r3, #0
   128ca:	da07      	bge.n	128dc <z_thread_single_abort+0x44>
				_priq_run_remove(&_kernel.ready_q.runq,
   128cc:	4621      	mov	r1, r4
   128ce:	4812      	ldr	r0, [pc, #72]	; (12918 <z_thread_single_abort+0x80>)
   128d0:	f7ff fede 	bl	12690 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   128d4:	7b63      	ldrb	r3, [r4, #13]
   128d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   128da:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   128dc:	4b0f      	ldr	r3, [pc, #60]	; (1291c <z_thread_single_abort+0x84>)
   128de:	6898      	ldr	r0, [r3, #8]
   128e0:	1b02      	subs	r2, r0, r4
   128e2:	4250      	negs	r0, r2
   128e4:	4150      	adcs	r0, r2
   128e6:	f7ff fee9 	bl	126bc <update_cache>
		thread->base.thread_state |= mask;
   128ea:	7b63      	ldrb	r3, [r4, #13]
   128ec:	f043 0308 	orr.w	r3, r3, #8
   128f0:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   128f2:	f386 8811 	msr	BASEPRI, r6
   128f6:	f3bf 8f6f 	isb	sy
}
   128fa:	bd70      	pop	{r4, r5, r6, pc}
			if (z_is_thread_pending(thread)) {
   128fc:	7b63      	ldrb	r3, [r4, #13]
   128fe:	079b      	lsls	r3, r3, #30
   12900:	d5f3      	bpl.n	128ea <z_thread_single_abort+0x52>
				_priq_wait_remove(&pended_on(thread)->waitq,
   12902:	4621      	mov	r1, r4
   12904:	68a0      	ldr	r0, [r4, #8]
   12906:	f7ff fec3 	bl	12690 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1290a:	7b63      	ldrb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   1290c:	60a5      	str	r5, [r4, #8]
   1290e:	f023 0302 	bic.w	r3, r3, #2
   12912:	7363      	strb	r3, [r4, #13]
   12914:	e7e9      	b.n	128ea <z_thread_single_abort+0x52>
   12916:	bf00      	nop
   12918:	20000658 	.word	0x20000658
   1291c:	20000630 	.word	0x20000630

00012920 <z_remove_thread_from_ready_q>:
{
   12920:	4601      	mov	r1, r0
   12922:	b510      	push	{r4, lr}
	__asm__ volatile(
   12924:	f04f 0320 	mov.w	r3, #32
   12928:	f3ef 8411 	mrs	r4, BASEPRI
   1292c:	f383 8811 	msr	BASEPRI, r3
   12930:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   12934:	f990 300d 	ldrsb.w	r3, [r0, #13]
   12938:	2b00      	cmp	r3, #0
   1293a:	da06      	bge.n	1294a <z_remove_thread_from_ready_q+0x2a>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1293c:	4809      	ldr	r0, [pc, #36]	; (12964 <z_remove_thread_from_ready_q+0x44>)
   1293e:	f7ff fea7 	bl	12690 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   12942:	7b4b      	ldrb	r3, [r1, #13]
   12944:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   12948:	734b      	strb	r3, [r1, #13]
		update_cache(thread == _current);
   1294a:	4b07      	ldr	r3, [pc, #28]	; (12968 <z_remove_thread_from_ready_q+0x48>)
   1294c:	6898      	ldr	r0, [r3, #8]
   1294e:	1a43      	subs	r3, r0, r1
   12950:	4258      	negs	r0, r3
   12952:	4158      	adcs	r0, r3
   12954:	f7ff feb2 	bl	126bc <update_cache>
	__asm__ volatile(
   12958:	f384 8811 	msr	BASEPRI, r4
   1295c:	f3bf 8f6f 	isb	sy
}
   12960:	bd10      	pop	{r4, pc}
   12962:	bf00      	nop
   12964:	20000658 	.word	0x20000658
   12968:	20000630 	.word	0x20000630

0001296c <pend>:
{
   1296c:	b570      	push	{r4, r5, r6, lr}
   1296e:	4604      	mov	r4, r0
   12970:	460d      	mov	r5, r1
   12972:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
   12974:	f7ff ffd4 	bl	12920 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   12978:	7b63      	ldrb	r3, [r4, #13]
   1297a:	f043 0302 	orr.w	r3, r3, #2
   1297e:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   12980:	b1c5      	cbz	r5, 129b4 <pend+0x48>
	return list->head == list;
   12982:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   12984:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   12986:	429d      	cmp	r5, r3
   12988:	bf08      	it	eq
   1298a:	2300      	moveq	r3, #0
   1298c:	2b00      	cmp	r3, #0
   1298e:	bf38      	it	cc
   12990:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   12992:	b33b      	cbz	r3, 129e4 <pend+0x78>
	if (thread_1->base.prio < thread_2->base.prio) {
   12994:	f994 100e 	ldrsb.w	r1, [r4, #14]
   12998:	f993 200e 	ldrsb.w	r2, [r3, #14]
   1299c:	4291      	cmp	r1, r2
   1299e:	db04      	blt.n	129aa <pend+0x3e>
	return (node == list->tail) ? NULL : node->next;
   129a0:	686a      	ldr	r2, [r5, #4]
   129a2:	429a      	cmp	r2, r3
   129a4:	d01e      	beq.n	129e4 <pend+0x78>
   129a6:	681b      	ldr	r3, [r3, #0]
   129a8:	e7f3      	b.n	12992 <pend+0x26>
	node->prev = successor->prev;
   129aa:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   129ac:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   129b0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   129b2:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
   129b4:	1c73      	adds	r3, r6, #1
   129b6:	d01c      	beq.n	129f2 <pend+0x86>
   129b8:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   129bc:	f240 30e7 	movw	r0, #999	; 0x3e7
   129c0:	2100      	movs	r1, #0
   129c2:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
   129c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   129ca:	fbc5 0106 	smlal	r0, r1, r5, r6
   129ce:	2300      	movs	r3, #0
   129d0:	f7fd fd34 	bl	1043c <__aeabi_uldivmod>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   129d4:	4907      	ldr	r1, [pc, #28]	; (129f4 <pend+0x88>)
   129d6:	1c42      	adds	r2, r0, #1
   129d8:	f104 0018 	add.w	r0, r4, #24
}
   129dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   129e0:	f000 b942 	b.w	12c68 <z_add_timeout>
	node->prev = list->tail;
   129e4:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   129e6:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   129e8:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   129ea:	686b      	ldr	r3, [r5, #4]
   129ec:	601c      	str	r4, [r3, #0]
	list->tail = node;
   129ee:	606c      	str	r4, [r5, #4]
}
   129f0:	e7e0      	b.n	129b4 <pend+0x48>
   129f2:	bd70      	pop	{r4, r5, r6, pc}
   129f4:	0001423f 	.word	0x0001423f

000129f8 <z_pend_curr>:
{
   129f8:	b510      	push	{r4, lr}
   129fa:	460c      	mov	r4, r1
   129fc:	4611      	mov	r1, r2
	pending_current = _current;
   129fe:	4a06      	ldr	r2, [pc, #24]	; (12a18 <z_pend_curr+0x20>)
   12a00:	6890      	ldr	r0, [r2, #8]
   12a02:	4a06      	ldr	r2, [pc, #24]	; (12a1c <z_pend_curr+0x24>)
   12a04:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
   12a06:	461a      	mov	r2, r3
   12a08:	f7ff ffb0 	bl	1296c <pend>
   12a0c:	4620      	mov	r0, r4
}
   12a0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12a12:	f7fe bce7 	b.w	113e4 <arch_swap>
   12a16:	bf00      	nop
   12a18:	20000630 	.word	0x20000630
   12a1c:	20000660 	.word	0x20000660

00012a20 <z_set_prio>:
{
   12a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12a24:	4604      	mov	r4, r0
	__asm__ volatile(
   12a26:	f04f 0320 	mov.w	r3, #32
   12a2a:	f3ef 8811 	mrs	r8, BASEPRI
   12a2e:	f383 8811 	msr	BASEPRI, r3
   12a32:	f3bf 8f6f 	isb	sy
		need_sched = z_is_thread_ready(thread);
   12a36:	f001 fbce 	bl	141d6 <z_is_thread_ready>
		if (need_sched) {
   12a3a:	4607      	mov	r7, r0
   12a3c:	b24d      	sxtb	r5, r1
   12a3e:	b360      	cbz	r0, 12a9a <z_set_prio+0x7a>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   12a40:	4e17      	ldr	r6, [pc, #92]	; (12aa0 <z_set_prio+0x80>)
   12a42:	4621      	mov	r1, r4
   12a44:	f106 0028 	add.w	r0, r6, #40	; 0x28
   12a48:	f7ff fe22 	bl	12690 <z_priq_dumb_remove>
	return list->head == list;
   12a4c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   12a4e:	6af2      	ldr	r2, [r6, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   12a50:	4283      	cmp	r3, r0
   12a52:	bf08      	it	eq
   12a54:	2300      	moveq	r3, #0
   12a56:	2b00      	cmp	r3, #0
   12a58:	bf38      	it	cc
   12a5a:	2300      	movcc	r3, #0
				thread->base.prio = prio;
   12a5c:	73a5      	strb	r5, [r4, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   12a5e:	b1b3      	cbz	r3, 12a8e <z_set_prio+0x6e>
	if (thread_1->base.prio < thread_2->base.prio) {
   12a60:	f993 100e 	ldrsb.w	r1, [r3, #14]
   12a64:	42a9      	cmp	r1, r5
   12a66:	dc03      	bgt.n	12a70 <z_set_prio+0x50>
	return (node == list->tail) ? NULL : node->next;
   12a68:	4293      	cmp	r3, r2
   12a6a:	d010      	beq.n	12a8e <z_set_prio+0x6e>
   12a6c:	681b      	ldr	r3, [r3, #0]
   12a6e:	e7f6      	b.n	12a5e <z_set_prio+0x3e>
	node->prev = successor->prev;
   12a70:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   12a72:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   12a76:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   12a78:	605c      	str	r4, [r3, #4]
			update_cache(1);
   12a7a:	2001      	movs	r0, #1
   12a7c:	f7ff fe1e 	bl	126bc <update_cache>
	__asm__ volatile(
   12a80:	f388 8811 	msr	BASEPRI, r8
   12a84:	f3bf 8f6f 	isb	sy
}
   12a88:	4638      	mov	r0, r7
   12a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	node->prev = list->tail;
   12a8e:	e9c4 0200 	strd	r0, r2, [r4]
	list->tail->next = node;
   12a92:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   12a94:	601c      	str	r4, [r3, #0]
	list->tail = node;
   12a96:	62f4      	str	r4, [r6, #44]	; 0x2c
}
   12a98:	e7ef      	b.n	12a7a <z_set_prio+0x5a>
			thread->base.prio = prio;
   12a9a:	73a5      	strb	r5, [r4, #14]
   12a9c:	e7f0      	b.n	12a80 <z_set_prio+0x60>
   12a9e:	bf00      	nop
   12aa0:	20000630 	.word	0x20000630

00012aa4 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   12aa4:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   12aa6:	4b04      	ldr	r3, [pc, #16]	; (12ab8 <z_sched_init+0x14>)
   12aa8:	4608      	mov	r0, r1
   12aaa:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   12aae:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   12ab2:	f7ff bdad 	b.w	12610 <k_sched_time_slice_set>
   12ab6:	bf00      	nop
   12ab8:	20000630 	.word	0x20000630

00012abc <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
   12abc:	4b01      	ldr	r3, [pc, #4]	; (12ac4 <z_impl_k_current_get+0x8>)
   12abe:	6898      	ldr	r0, [r3, #8]
   12ac0:	4770      	bx	lr
   12ac2:	bf00      	nop
   12ac4:	20000630 	.word	0x20000630

00012ac8 <z_impl_k_thread_start>:
}
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
   12ac8:	b510      	push	{r4, lr}
	__asm__ volatile(
   12aca:	f04f 0220 	mov.w	r2, #32
   12ace:	f3ef 8411 	mrs	r4, BASEPRI
   12ad2:	f382 8811 	msr	BASEPRI, r2
   12ad6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock); /* protect kernel queues */

	if (z_has_thread_started(thread)) {
   12ada:	7b42      	ldrb	r2, [r0, #13]
   12adc:	0751      	lsls	r1, r2, #29
   12ade:	d404      	bmi.n	12aea <z_impl_k_thread_start+0x22>
	__asm__ volatile(
   12ae0:	f384 8811 	msr	BASEPRI, r4
   12ae4:	f3bf 8f6f 	isb	sy
	}

	z_mark_thread_as_started(thread);
	z_ready_thread(thread);
	z_reschedule(&lock, key);
}
   12ae8:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   12aea:	f022 0104 	bic.w	r1, r2, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   12aee:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   12af2:	7341      	strb	r1, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   12af4:	d103      	bne.n	12afe <z_impl_k_thread_start+0x36>
	if (z_is_thread_ready(thread)) {
   12af6:	6983      	ldr	r3, [r0, #24]
   12af8:	b90b      	cbnz	r3, 12afe <z_impl_k_thread_start+0x36>
		z_add_thread_to_ready_q(thread);
   12afa:	f7ff fe19 	bl	12730 <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
   12afe:	4621      	mov	r1, r4
}
   12b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
   12b04:	4801      	ldr	r0, [pc, #4]	; (12b0c <z_impl_k_thread_start+0x44>)
   12b06:	f001 bb6f 	b.w	141e8 <z_reschedule>
   12b0a:	bf00      	nop
   12b0c:	2000068e 	.word	0x2000068e

00012b10 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
   12b10:	b530      	push	{r4, r5, lr}
   12b12:	b087      	sub	sp, #28
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   12b14:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
   12b16:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   12b18:	9504      	str	r5, [sp, #16]
   12b1a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   12b1c:	9503      	str	r5, [sp, #12]
   12b1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   12b20:	9502      	str	r5, [sp, #8]
   12b22:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   12b24:	9501      	str	r5, [sp, #4]
   12b26:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   12b28:	9500      	str	r5, [sp, #0]
   12b2a:	f7fe fcd5 	bl	114d8 <arch_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   12b2e:	4b03      	ldr	r3, [pc, #12]	; (12b3c <z_setup_new_thread+0x2c>)
   12b30:	689b      	ldr	r3, [r3, #8]
   12b32:	b103      	cbz	r3, 12b36 <z_setup_new_thread+0x26>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   12b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   12b36:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
   12b38:	b007      	add	sp, #28
   12b3a:	bd30      	pop	{r4, r5, pc}
   12b3c:	20000630 	.word	0x20000630

00012b40 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   12b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   12b44:	4e28      	ldr	r6, [pc, #160]	; (12be8 <z_init_static_threads+0xa8>)
   12b46:	4d29      	ldr	r5, [pc, #164]	; (12bec <z_init_static_threads+0xac>)
   12b48:	46b0      	mov	r8, r6
{
   12b4a:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   12b4c:	42b5      	cmp	r5, r6
   12b4e:	f105 0430 	add.w	r4, r5, #48	; 0x30
   12b52:	d310      	bcc.n	12b76 <z_init_static_threads+0x36>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   12b54:	f7ff fd88 	bl	12668 <k_sched_lock>
   12b58:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   12b5c:	f240 36e7 	movw	r6, #999	; 0x3e7
   12b60:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
   12b62:	4c22      	ldr	r4, [pc, #136]	; (12bec <z_init_static_threads+0xac>)
   12b64:	f8df a088 	ldr.w	sl, [pc, #136]	; 12bf0 <z_init_static_threads+0xb0>
   12b68:	4544      	cmp	r4, r8
   12b6a:	d321      	bcc.n	12bb0 <z_init_static_threads+0x70>
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	k_sched_unlock();
}
   12b6c:	b007      	add	sp, #28
   12b6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
   12b72:	f7ff bdc1 	b.w	126f8 <k_sched_unlock>
		z_setup_new_thread(
   12b76:	f854 3c04 	ldr.w	r3, [r4, #-4]
   12b7a:	9305      	str	r3, [sp, #20]
   12b7c:	f854 3c10 	ldr.w	r3, [r4, #-16]
   12b80:	9304      	str	r3, [sp, #16]
   12b82:	f854 3c14 	ldr.w	r3, [r4, #-20]
   12b86:	9303      	str	r3, [sp, #12]
   12b88:	f854 3c18 	ldr.w	r3, [r4, #-24]
   12b8c:	9302      	str	r3, [sp, #8]
   12b8e:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   12b92:	9301      	str	r3, [sp, #4]
   12b94:	f854 3c20 	ldr.w	r3, [r4, #-32]
   12b98:	9300      	str	r3, [sp, #0]
   12b9a:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   12b9e:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   12ba2:	f7ff ffb5 	bl	12b10 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   12ba6:	f854 3c30 	ldr.w	r3, [r4, #-48]
   12baa:	64dd      	str	r5, [r3, #76]	; 0x4c
   12bac:	4625      	mov	r5, r4
   12bae:	e7cd      	b.n	12b4c <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_FOREVER) {
   12bb0:	6a61      	ldr	r1, [r4, #36]	; 0x24
   12bb2:	1c4b      	adds	r3, r1, #1
   12bb4:	d004      	beq.n	12bc0 <z_init_static_threads+0x80>
			schedule_new_thread(thread_data->init_thread,
   12bb6:	6825      	ldr	r5, [r4, #0]
	if (delay == 0) {
   12bb8:	b921      	cbnz	r1, 12bc4 <z_init_static_threads+0x84>
	z_impl_k_thread_start(thread);
   12bba:	4628      	mov	r0, r5
   12bbc:	f7ff ff84 	bl	12ac8 <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   12bc0:	3430      	adds	r4, #48	; 0x30
   12bc2:	e7d1      	b.n	12b68 <z_init_static_threads+0x28>
   12bc4:	46b3      	mov	fp, r6
   12bc6:	46bc      	mov	ip, r7
   12bc8:	fbe9 bc01 	umlal	fp, ip, r9, r1
   12bcc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12bd0:	2300      	movs	r3, #0
   12bd2:	4658      	mov	r0, fp
   12bd4:	4661      	mov	r1, ip
   12bd6:	f7fd fc31 	bl	1043c <__aeabi_uldivmod>
   12bda:	4651      	mov	r1, sl
   12bdc:	1c42      	adds	r2, r0, #1
   12bde:	f105 0018 	add.w	r0, r5, #24
   12be2:	f000 f841 	bl	12c68 <z_add_timeout>
}
   12be6:	e7eb      	b.n	12bc0 <z_init_static_threads+0x80>
   12be8:	200014c8 	.word	0x200014c8
   12bec:	200014c8 	.word	0x200014c8
   12bf0:	0001423f 	.word	0x0001423f

00012bf4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   12bf4:	4b03      	ldr	r3, [pc, #12]	; (12c04 <elapsed+0x10>)
   12bf6:	681b      	ldr	r3, [r3, #0]
   12bf8:	b90b      	cbnz	r3, 12bfe <elapsed+0xa>
   12bfa:	f7fe b8e3 	b.w	10dc4 <z_clock_elapsed>
}
   12bfe:	2000      	movs	r0, #0
   12c00:	4770      	bx	lr
   12c02:	bf00      	nop
   12c04:	2000066c 	.word	0x2000066c

00012c08 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   12c08:	6803      	ldr	r3, [r0, #0]
   12c0a:	b140      	cbz	r0, 12c1e <remove_timeout+0x16>
   12c0c:	4a07      	ldr	r2, [pc, #28]	; (12c2c <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
   12c0e:	6852      	ldr	r2, [r2, #4]
   12c10:	4290      	cmp	r0, r2
   12c12:	d004      	beq.n	12c1e <remove_timeout+0x16>
	if (next(t) != NULL) {
   12c14:	b11b      	cbz	r3, 12c1e <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
   12c16:	689a      	ldr	r2, [r3, #8]
   12c18:	6881      	ldr	r1, [r0, #8]
   12c1a:	440a      	add	r2, r1
   12c1c:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
   12c1e:	6842      	ldr	r2, [r0, #4]
   12c20:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   12c22:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   12c24:	2300      	movs	r3, #0
	node->prev = NULL;
   12c26:	e9c0 3300 	strd	r3, r3, [r0]
}
   12c2a:	4770      	bx	lr
   12c2c:	20001408 	.word	0x20001408

00012c30 <next_timeout>:
	return list->head == list;
   12c30:	4b0b      	ldr	r3, [pc, #44]	; (12c60 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
   12c32:	b510      	push	{r4, lr}
   12c34:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   12c36:	429c      	cmp	r4, r3
   12c38:	bf08      	it	eq
   12c3a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
   12c3c:	f7ff ffda 	bl	12bf4 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   12c40:	b154      	cbz	r4, 12c58 <next_timeout+0x28>
   12c42:	68a3      	ldr	r3, [r4, #8]
   12c44:	1a18      	subs	r0, r3, r0
   12c46:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   12c4a:	4b06      	ldr	r3, [pc, #24]	; (12c64 <next_timeout+0x34>)
   12c4c:	691b      	ldr	r3, [r3, #16]
   12c4e:	b113      	cbz	r3, 12c56 <next_timeout+0x26>
   12c50:	4298      	cmp	r0, r3
   12c52:	bfa8      	it	ge
   12c54:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   12c56:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   12c58:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   12c5c:	e7f5      	b.n	12c4a <next_timeout+0x1a>
   12c5e:	bf00      	nop
   12c60:	20001408 	.word	0x20001408
   12c64:	20000630 	.word	0x20000630

00012c68 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
   12c68:	b570      	push	{r4, r5, r6, lr}
   12c6a:	4604      	mov	r4, r0
   12c6c:	4616      	mov	r6, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   12c6e:	60c1      	str	r1, [r0, #12]
	__asm__ volatile(
   12c70:	f04f 0320 	mov.w	r3, #32
   12c74:	f3ef 8511 	mrs	r5, BASEPRI
   12c78:	f383 8811 	msr	BASEPRI, r3
   12c7c:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   12c80:	f7ff ffb8 	bl	12bf4 <elapsed>
   12c84:	2e01      	cmp	r6, #1
   12c86:	bfac      	ite	ge
   12c88:	1980      	addge	r0, r0, r6
   12c8a:	3001      	addlt	r0, #1
	return list->head == list;
   12c8c:	4b16      	ldr	r3, [pc, #88]	; (12ce8 <z_add_timeout+0x80>)
   12c8e:	60a0      	str	r0, [r4, #8]
   12c90:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   12c92:	429a      	cmp	r2, r3
   12c94:	d001      	beq.n	12c9a <z_add_timeout+0x32>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   12c96:	685e      	ldr	r6, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   12c98:	b932      	cbnz	r2, 12ca8 <z_add_timeout+0x40>
	node->prev = list->tail;
   12c9a:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   12c9c:	6023      	str	r3, [r4, #0]
	node->prev = list->tail;
   12c9e:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   12ca0:	685a      	ldr	r2, [r3, #4]
   12ca2:	6014      	str	r4, [r2, #0]
	list->tail = node;
   12ca4:	605c      	str	r4, [r3, #4]
}
   12ca6:	e00a      	b.n	12cbe <z_add_timeout+0x56>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
   12ca8:	6890      	ldr	r0, [r2, #8]
   12caa:	68a1      	ldr	r1, [r4, #8]
   12cac:	4288      	cmp	r0, r1
   12cae:	dd15      	ble.n	12cdc <z_add_timeout+0x74>
				t->dticks -= to->dticks;
   12cb0:	1a41      	subs	r1, r0, r1
   12cb2:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
   12cb4:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   12cb6:	e9c4 2100 	strd	r2, r1, [r4]
	successor->prev->next = node;
   12cba:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   12cbc:	6054      	str	r4, [r2, #4]
	return list->head == list;
   12cbe:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   12cc0:	429a      	cmp	r2, r3
   12cc2:	d006      	beq.n	12cd2 <z_add_timeout+0x6a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   12cc4:	4294      	cmp	r4, r2
   12cc6:	d104      	bne.n	12cd2 <z_add_timeout+0x6a>
			z_clock_set_timeout(next_timeout(), false);
   12cc8:	f7ff ffb2 	bl	12c30 <next_timeout>
   12ccc:	2100      	movs	r1, #0
   12cce:	f7fe f823 	bl	10d18 <z_clock_set_timeout>
	__asm__ volatile(
   12cd2:	f385 8811 	msr	BASEPRI, r5
   12cd6:	f3bf 8f6f 	isb	sy
		}
	}
}
   12cda:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
   12cdc:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   12cde:	4296      	cmp	r6, r2
   12ce0:	60a1      	str	r1, [r4, #8]
   12ce2:	d0da      	beq.n	12c9a <z_add_timeout+0x32>
   12ce4:	6812      	ldr	r2, [r2, #0]
   12ce6:	e7d7      	b.n	12c98 <z_add_timeout+0x30>
   12ce8:	20001408 	.word	0x20001408

00012cec <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
   12cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12cf0:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   12cf2:	f7ff fd9b 	bl	1282c <z_time_slice>
	__asm__ volatile(
   12cf6:	f04f 0320 	mov.w	r3, #32
   12cfa:	f3ef 8411 	mrs	r4, BASEPRI
   12cfe:	f383 8811 	msr	BASEPRI, r3
   12d02:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   12d06:	f8df 8084 	ldr.w	r8, [pc, #132]	; 12d8c <z_clock_announce+0xa0>
   12d0a:	4d1f      	ldr	r5, [pc, #124]	; (12d88 <z_clock_announce+0x9c>)
   12d0c:	46c1      	mov	r9, r8
	return list->head == list;
   12d0e:	f8df a080 	ldr.w	sl, [pc, #128]	; 12d90 <z_clock_announce+0xa4>
   12d12:	602e      	str	r6, [r5, #0]
   12d14:	f8da 0000 	ldr.w	r0, [sl]
   12d18:	682a      	ldr	r2, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   12d1a:	4550      	cmp	r0, sl
   12d1c:	e9d8 6700 	ldrd	r6, r7, [r8]
   12d20:	d005      	beq.n	12d2e <z_clock_announce+0x42>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   12d22:	b120      	cbz	r0, 12d2e <z_clock_announce+0x42>
   12d24:	6883      	ldr	r3, [r0, #8]
   12d26:	4293      	cmp	r3, r2
   12d28:	dd13      	ble.n	12d52 <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   12d2a:	1a9b      	subs	r3, r3, r2
   12d2c:	6083      	str	r3, [r0, #8]
	}

	curr_tick += announce_remaining;
   12d2e:	18b6      	adds	r6, r6, r2
   12d30:	eb47 77e2 	adc.w	r7, r7, r2, asr #31
   12d34:	e9c9 6700 	strd	r6, r7, [r9]
	announce_remaining = 0;
   12d38:	2600      	movs	r6, #0
   12d3a:	602e      	str	r6, [r5, #0]

	z_clock_set_timeout(next_timeout(), false);
   12d3c:	f7ff ff78 	bl	12c30 <next_timeout>
   12d40:	4631      	mov	r1, r6
   12d42:	f7fd ffe9 	bl	10d18 <z_clock_set_timeout>
	__asm__ volatile(
   12d46:	f384 8811 	msr	BASEPRI, r4
   12d4a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   12d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_tick += dt;
   12d52:	18f6      	adds	r6, r6, r3
   12d54:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
		announce_remaining -= dt;
   12d58:	1ad3      	subs	r3, r2, r3
   12d5a:	602b      	str	r3, [r5, #0]
		t->dticks = 0;
   12d5c:	2300      	movs	r3, #0
   12d5e:	6083      	str	r3, [r0, #8]
		curr_tick += dt;
   12d60:	e9c8 6700 	strd	r6, r7, [r8]
		remove_timeout(t);
   12d64:	f7ff ff50 	bl	12c08 <remove_timeout>
   12d68:	f384 8811 	msr	BASEPRI, r4
   12d6c:	f3bf 8f6f 	isb	sy
		t->fn(t);
   12d70:	68c3      	ldr	r3, [r0, #12]
   12d72:	4798      	blx	r3
	__asm__ volatile(
   12d74:	f04f 0320 	mov.w	r3, #32
   12d78:	f3ef 8411 	mrs	r4, BASEPRI
   12d7c:	f383 8811 	msr	BASEPRI, r3
   12d80:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   12d84:	e7c6      	b.n	12d14 <z_clock_announce+0x28>
   12d86:	bf00      	nop
   12d88:	2000066c 	.word	0x2000066c
   12d8c:	20000000 	.word	0x20000000
   12d90:	20001408 	.word	0x20001408

00012d94 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   12d94:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   12d96:	4c07      	ldr	r4, [pc, #28]	; (12db4 <init_static_pools+0x20>)
   12d98:	4d07      	ldr	r5, [pc, #28]	; (12db8 <init_static_pools+0x24>)
   12d9a:	42ac      	cmp	r4, r5
   12d9c:	d301      	bcc.n	12da2 <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
   12d9e:	2000      	movs	r0, #0
   12da0:	bd38      	pop	{r3, r4, r5, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   12da2:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
   12da6:	4620      	mov	r0, r4
	list->tail = (sys_dnode_t *)list;
   12da8:	e9c4 3305 	strd	r3, r3, [r4, #20]
   12dac:	f000 fef3 	bl	13b96 <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   12db0:	341c      	adds	r4, #28
   12db2:	e7f2      	b.n	12d9a <init_static_pools+0x6>
   12db4:	200014c8 	.word	0x200014c8
   12db8:	200014c8 	.word	0x200014c8

00012dbc <CC_PalMemCopyPlat>:
   12dbc:	f001 b928 	b.w	14010 <memmove>

00012dc0 <CC_PalMemSetZeroPlat>:
   12dc0:	460a      	mov	r2, r1
   12dc2:	2100      	movs	r1, #0
   12dc4:	f001 b966 	b.w	14094 <memset>

00012dc8 <CC_PalInit>:
   12dc8:	b510      	push	{r4, lr}
   12dca:	4811      	ldr	r0, [pc, #68]	; (12e10 <CC_PalInit+0x48>)
   12dcc:	f000 f848 	bl	12e60 <CC_PalMutexCreate>
   12dd0:	b100      	cbz	r0, 12dd4 <CC_PalInit+0xc>
   12dd2:	bd10      	pop	{r4, pc}
   12dd4:	480f      	ldr	r0, [pc, #60]	; (12e14 <CC_PalInit+0x4c>)
   12dd6:	f000 f843 	bl	12e60 <CC_PalMutexCreate>
   12dda:	2800      	cmp	r0, #0
   12ddc:	d1f9      	bne.n	12dd2 <CC_PalInit+0xa>
   12dde:	4c0e      	ldr	r4, [pc, #56]	; (12e18 <CC_PalInit+0x50>)
   12de0:	4620      	mov	r0, r4
   12de2:	f000 f83d 	bl	12e60 <CC_PalMutexCreate>
   12de6:	2800      	cmp	r0, #0
   12de8:	d1f3      	bne.n	12dd2 <CC_PalInit+0xa>
   12dea:	4b0c      	ldr	r3, [pc, #48]	; (12e1c <CC_PalInit+0x54>)
   12dec:	480c      	ldr	r0, [pc, #48]	; (12e20 <CC_PalInit+0x58>)
   12dee:	601c      	str	r4, [r3, #0]
   12df0:	f000 f836 	bl	12e60 <CC_PalMutexCreate>
   12df4:	4601      	mov	r1, r0
   12df6:	2800      	cmp	r0, #0
   12df8:	d1eb      	bne.n	12dd2 <CC_PalInit+0xa>
   12dfa:	f000 f82d 	bl	12e58 <CC_PalDmaInit>
   12dfe:	4604      	mov	r4, r0
   12e00:	b108      	cbz	r0, 12e06 <CC_PalInit+0x3e>
   12e02:	4620      	mov	r0, r4
   12e04:	bd10      	pop	{r4, pc}
   12e06:	f000 f851 	bl	12eac <CC_PalPowerSaveModeInit>
   12e0a:	4620      	mov	r0, r4
   12e0c:	e7fa      	b.n	12e04 <CC_PalInit+0x3c>
   12e0e:	bf00      	nop
   12e10:	2000141c 	.word	0x2000141c
   12e14:	20001410 	.word	0x20001410
   12e18:	20001418 	.word	0x20001418
   12e1c:	20001420 	.word	0x20001420
   12e20:	20001414 	.word	0x20001414

00012e24 <CC_PalTerminate>:
   12e24:	b508      	push	{r3, lr}
   12e26:	4808      	ldr	r0, [pc, #32]	; (12e48 <CC_PalTerminate+0x24>)
   12e28:	f000 f824 	bl	12e74 <CC_PalMutexDestroy>
   12e2c:	4807      	ldr	r0, [pc, #28]	; (12e4c <CC_PalTerminate+0x28>)
   12e2e:	f000 f821 	bl	12e74 <CC_PalMutexDestroy>
   12e32:	4807      	ldr	r0, [pc, #28]	; (12e50 <CC_PalTerminate+0x2c>)
   12e34:	f000 f81e 	bl	12e74 <CC_PalMutexDestroy>
   12e38:	4806      	ldr	r0, [pc, #24]	; (12e54 <CC_PalTerminate+0x30>)
   12e3a:	f000 f81b 	bl	12e74 <CC_PalMutexDestroy>
   12e3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   12e42:	f000 b80b 	b.w	12e5c <CC_PalDmaTerminate>
   12e46:	bf00      	nop
   12e48:	2000141c 	.word	0x2000141c
   12e4c:	20001410 	.word	0x20001410
   12e50:	20001418 	.word	0x20001418
   12e54:	20001414 	.word	0x20001414

00012e58 <CC_PalDmaInit>:
   12e58:	2000      	movs	r0, #0
   12e5a:	4770      	bx	lr

00012e5c <CC_PalDmaTerminate>:
   12e5c:	4770      	bx	lr
   12e5e:	bf00      	nop

00012e60 <CC_PalMutexCreate>:
   12e60:	b508      	push	{r3, lr}
   12e62:	4b03      	ldr	r3, [pc, #12]	; (12e70 <CC_PalMutexCreate+0x10>)
   12e64:	6802      	ldr	r2, [r0, #0]
   12e66:	681b      	ldr	r3, [r3, #0]
   12e68:	6810      	ldr	r0, [r2, #0]
   12e6a:	4798      	blx	r3
   12e6c:	2000      	movs	r0, #0
   12e6e:	bd08      	pop	{r3, pc}
   12e70:	2000142c 	.word	0x2000142c

00012e74 <CC_PalMutexDestroy>:
   12e74:	b508      	push	{r3, lr}
   12e76:	4b03      	ldr	r3, [pc, #12]	; (12e84 <CC_PalMutexDestroy+0x10>)
   12e78:	6802      	ldr	r2, [r0, #0]
   12e7a:	685b      	ldr	r3, [r3, #4]
   12e7c:	6810      	ldr	r0, [r2, #0]
   12e7e:	4798      	blx	r3
   12e80:	2000      	movs	r0, #0
   12e82:	bd08      	pop	{r3, pc}
   12e84:	2000142c 	.word	0x2000142c

00012e88 <CC_PalMutexLock>:
   12e88:	6802      	ldr	r2, [r0, #0]
   12e8a:	4b02      	ldr	r3, [pc, #8]	; (12e94 <CC_PalMutexLock+0xc>)
   12e8c:	6810      	ldr	r0, [r2, #0]
   12e8e:	689b      	ldr	r3, [r3, #8]
   12e90:	4718      	bx	r3
   12e92:	bf00      	nop
   12e94:	2000142c 	.word	0x2000142c

00012e98 <CC_PalMutexUnlock>:
   12e98:	b508      	push	{r3, lr}
   12e9a:	4b03      	ldr	r3, [pc, #12]	; (12ea8 <CC_PalMutexUnlock+0x10>)
   12e9c:	6802      	ldr	r2, [r0, #0]
   12e9e:	68db      	ldr	r3, [r3, #12]
   12ea0:	6810      	ldr	r0, [r2, #0]
   12ea2:	4798      	blx	r3
   12ea4:	2000      	movs	r0, #0
   12ea6:	bd08      	pop	{r3, pc}
   12ea8:	2000142c 	.word	0x2000142c

00012eac <CC_PalPowerSaveModeInit>:
   12eac:	b570      	push	{r4, r5, r6, lr}
   12eae:	4c09      	ldr	r4, [pc, #36]	; (12ed4 <CC_PalPowerSaveModeInit+0x28>)
   12eb0:	4d09      	ldr	r5, [pc, #36]	; (12ed8 <CC_PalPowerSaveModeInit+0x2c>)
   12eb2:	6920      	ldr	r0, [r4, #16]
   12eb4:	68ab      	ldr	r3, [r5, #8]
   12eb6:	4798      	blx	r3
   12eb8:	b118      	cbz	r0, 12ec2 <CC_PalPowerSaveModeInit+0x16>
   12eba:	4b08      	ldr	r3, [pc, #32]	; (12edc <CC_PalPowerSaveModeInit+0x30>)
   12ebc:	4808      	ldr	r0, [pc, #32]	; (12ee0 <CC_PalPowerSaveModeInit+0x34>)
   12ebe:	685b      	ldr	r3, [r3, #4]
   12ec0:	4798      	blx	r3
   12ec2:	2100      	movs	r1, #0
   12ec4:	4a07      	ldr	r2, [pc, #28]	; (12ee4 <CC_PalPowerSaveModeInit+0x38>)
   12ec6:	68eb      	ldr	r3, [r5, #12]
   12ec8:	6011      	str	r1, [r2, #0]
   12eca:	6920      	ldr	r0, [r4, #16]
   12ecc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12ed0:	4718      	bx	r3
   12ed2:	bf00      	nop
   12ed4:	2000143c 	.word	0x2000143c
   12ed8:	2000142c 	.word	0x2000142c
   12edc:	20001424 	.word	0x20001424
   12ee0:	000147e0 	.word	0x000147e0
   12ee4:	20000670 	.word	0x20000670

00012ee8 <CC_PalPowerSaveModeSelect>:
   12ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12eea:	4c1a      	ldr	r4, [pc, #104]	; (12f54 <CC_PalPowerSaveModeSelect+0x6c>)
   12eec:	4d1a      	ldr	r5, [pc, #104]	; (12f58 <CC_PalPowerSaveModeSelect+0x70>)
   12eee:	4607      	mov	r7, r0
   12ef0:	68ab      	ldr	r3, [r5, #8]
   12ef2:	6920      	ldr	r0, [r4, #16]
   12ef4:	4798      	blx	r3
   12ef6:	b9e8      	cbnz	r0, 12f34 <CC_PalPowerSaveModeSelect+0x4c>
   12ef8:	4e18      	ldr	r6, [pc, #96]	; (12f5c <CC_PalPowerSaveModeSelect+0x74>)
   12efa:	6833      	ldr	r3, [r6, #0]
   12efc:	b97f      	cbnz	r7, 12f1e <CC_PalPowerSaveModeSelect+0x36>
   12efe:	b93b      	cbnz	r3, 12f10 <CC_PalPowerSaveModeSelect+0x28>
   12f00:	2001      	movs	r0, #1
   12f02:	4a17      	ldr	r2, [pc, #92]	; (12f60 <CC_PalPowerSaveModeSelect+0x78>)
   12f04:	4917      	ldr	r1, [pc, #92]	; (12f64 <CC_PalPowerSaveModeSelect+0x7c>)
   12f06:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
   12f0a:	680a      	ldr	r2, [r1, #0]
   12f0c:	2a00      	cmp	r2, #0
   12f0e:	d1fc      	bne.n	12f0a <CC_PalPowerSaveModeSelect+0x22>
   12f10:	3301      	adds	r3, #1
   12f12:	6033      	str	r3, [r6, #0]
   12f14:	68eb      	ldr	r3, [r5, #12]
   12f16:	6920      	ldr	r0, [r4, #16]
   12f18:	4798      	blx	r3
   12f1a:	2000      	movs	r0, #0
   12f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12f1e:	2b00      	cmp	r3, #0
   12f20:	d0f8      	beq.n	12f14 <CC_PalPowerSaveModeSelect+0x2c>
   12f22:	2b01      	cmp	r3, #1
   12f24:	d008      	beq.n	12f38 <CC_PalPowerSaveModeSelect+0x50>
   12f26:	3b01      	subs	r3, #1
   12f28:	6033      	str	r3, [r6, #0]
   12f2a:	6920      	ldr	r0, [r4, #16]
   12f2c:	68eb      	ldr	r3, [r5, #12]
   12f2e:	4798      	blx	r3
   12f30:	2000      	movs	r0, #0
   12f32:	e7f3      	b.n	12f1c <CC_PalPowerSaveModeSelect+0x34>
   12f34:	480c      	ldr	r0, [pc, #48]	; (12f68 <CC_PalPowerSaveModeSelect+0x80>)
   12f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12f38:	4a0a      	ldr	r2, [pc, #40]	; (12f64 <CC_PalPowerSaveModeSelect+0x7c>)
   12f3a:	6813      	ldr	r3, [r2, #0]
   12f3c:	2b00      	cmp	r3, #0
   12f3e:	d1fc      	bne.n	12f3a <CC_PalPowerSaveModeSelect+0x52>
   12f40:	4a07      	ldr	r2, [pc, #28]	; (12f60 <CC_PalPowerSaveModeSelect+0x78>)
   12f42:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   12f46:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   12f4a:	f000 f821 	bl	12f90 <CC_HalMaskInterrupt>
   12f4e:	6833      	ldr	r3, [r6, #0]
   12f50:	e7e9      	b.n	12f26 <CC_PalPowerSaveModeSelect+0x3e>
   12f52:	bf00      	nop
   12f54:	2000143c 	.word	0x2000143c
   12f58:	2000142c 	.word	0x2000142c
   12f5c:	20000670 	.word	0x20000670
   12f60:	50840000 	.word	0x50840000
   12f64:	50841910 	.word	0x50841910
   12f68:	ffff8fe9 	.word	0xffff8fe9

00012f6c <CC_HalInit>:
   12f6c:	2000      	movs	r0, #0
   12f6e:	4770      	bx	lr

00012f70 <CC_HalTerminate>:
   12f70:	2000      	movs	r0, #0
   12f72:	4770      	bx	lr

00012f74 <CC_HalClearInterruptBit>:
   12f74:	0543      	lsls	r3, r0, #21
   12f76:	d503      	bpl.n	12f80 <CC_HalClearInterruptBit+0xc>
   12f78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12f7c:	4b02      	ldr	r3, [pc, #8]	; (12f88 <CC_HalClearInterruptBit+0x14>)
   12f7e:	601a      	str	r2, [r3, #0]
   12f80:	4b02      	ldr	r3, [pc, #8]	; (12f8c <CC_HalClearInterruptBit+0x18>)
   12f82:	6018      	str	r0, [r3, #0]
   12f84:	4770      	bx	lr
   12f86:	bf00      	nop
   12f88:	50841108 	.word	0x50841108
   12f8c:	50841a08 	.word	0x50841a08

00012f90 <CC_HalMaskInterrupt>:
   12f90:	4b01      	ldr	r3, [pc, #4]	; (12f98 <CC_HalMaskInterrupt+0x8>)
   12f92:	6018      	str	r0, [r3, #0]
   12f94:	4770      	bx	lr
   12f96:	bf00      	nop
   12f98:	50841a04 	.word	0x50841a04

00012f9c <CC_HalWaitInterruptRND>:
   12f9c:	b108      	cbz	r0, 12fa2 <CC_HalWaitInterruptRND+0x6>
   12f9e:	f000 b803 	b.w	12fa8 <CC_PalWaitInterruptRND>
   12fa2:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   12fa6:	4770      	bx	lr

00012fa8 <CC_PalWaitInterruptRND>:
   12fa8:	4602      	mov	r2, r0
   12faa:	4807      	ldr	r0, [pc, #28]	; (12fc8 <CC_PalWaitInterruptRND+0x20>)
   12fac:	6803      	ldr	r3, [r0, #0]
   12fae:	4213      	tst	r3, r2
   12fb0:	d0fc      	beq.n	12fac <CC_PalWaitInterruptRND+0x4>
   12fb2:	b121      	cbz	r1, 12fbe <CC_PalWaitInterruptRND+0x16>
   12fb4:	4b05      	ldr	r3, [pc, #20]	; (12fcc <CC_PalWaitInterruptRND+0x24>)
   12fb6:	4806      	ldr	r0, [pc, #24]	; (12fd0 <CC_PalWaitInterruptRND+0x28>)
   12fb8:	681b      	ldr	r3, [r3, #0]
   12fba:	600b      	str	r3, [r1, #0]
   12fbc:	6003      	str	r3, [r0, #0]
   12fbe:	4b05      	ldr	r3, [pc, #20]	; (12fd4 <CC_PalWaitInterruptRND+0x2c>)
   12fc0:	2000      	movs	r0, #0
   12fc2:	601a      	str	r2, [r3, #0]
   12fc4:	4770      	bx	lr
   12fc6:	bf00      	nop
   12fc8:	50841a00 	.word	0x50841a00
   12fcc:	50841104 	.word	0x50841104
   12fd0:	50841108 	.word	0x50841108
   12fd4:	50841a08 	.word	0x50841a08

00012fd8 <mbedtls_platform_setup>:
   12fd8:	f000 b8a0 	b.w	1311c <nrf_cc310_platform_init>

00012fdc <mbedtls_platform_zeroize>:
   12fdc:	b130      	cbz	r0, 12fec <mbedtls_platform_zeroize+0x10>
   12fde:	b129      	cbz	r1, 12fec <mbedtls_platform_zeroize+0x10>
   12fe0:	2300      	movs	r3, #0
   12fe2:	4401      	add	r1, r0
   12fe4:	7003      	strb	r3, [r0, #0]
   12fe6:	3001      	adds	r0, #1
   12fe8:	4281      	cmp	r1, r0
   12fea:	d1fb      	bne.n	12fe4 <mbedtls_platform_zeroize+0x8>
   12fec:	4770      	bx	lr
   12fee:	bf00      	nop

00012ff0 <mbedtls_hardware_poll>:
   12ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12ff4:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
   12ff8:	460f      	mov	r7, r1
   12ffa:	9205      	str	r2, [sp, #20]
   12ffc:	2100      	movs	r1, #0
   12ffe:	4614      	mov	r4, r2
   13000:	a812      	add	r0, sp, #72	; 0x48
   13002:	f44f 7208 	mov.w	r2, #544	; 0x220
   13006:	461e      	mov	r6, r3
   13008:	f001 f844 	bl	14094 <memset>
   1300c:	2300      	movs	r3, #0
   1300e:	a808      	add	r0, sp, #32
   13010:	4619      	mov	r1, r3
   13012:	2228      	movs	r2, #40	; 0x28
   13014:	9306      	str	r3, [sp, #24]
   13016:	f001 f83d 	bl	14094 <memset>
   1301a:	2f00      	cmp	r7, #0
   1301c:	d03c      	beq.n	13098 <mbedtls_hardware_poll+0xa8>
   1301e:	2e00      	cmp	r6, #0
   13020:	d03a      	beq.n	13098 <mbedtls_hardware_poll+0xa8>
   13022:	2c00      	cmp	r4, #0
   13024:	d038      	beq.n	13098 <mbedtls_hardware_poll+0xa8>
   13026:	2104      	movs	r1, #4
   13028:	a806      	add	r0, sp, #24
   1302a:	f7ff fec9 	bl	12dc0 <CC_PalMemSetZeroPlat>
   1302e:	a808      	add	r0, sp, #32
   13030:	2128      	movs	r1, #40	; 0x28
   13032:	f7ff fec5 	bl	12dc0 <CC_PalMemSetZeroPlat>
   13036:	a808      	add	r0, sp, #32
   13038:	f000 f832 	bl	130a0 <RNG_PLAT_SetUserRngParameters>
   1303c:	b178      	cbz	r0, 1305e <mbedtls_hardware_poll+0x6e>
   1303e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   13042:	a812      	add	r0, sp, #72	; 0x48
   13044:	f44f 7108 	mov.w	r1, #544	; 0x220
   13048:	f7ff ffc8 	bl	12fdc <mbedtls_platform_zeroize>
   1304c:	a806      	add	r0, sp, #24
   1304e:	2104      	movs	r1, #4
   13050:	f7ff ffc4 	bl	12fdc <mbedtls_platform_zeroize>
   13054:	4628      	mov	r0, r5
   13056:	f50d 7d1a 	add.w	sp, sp, #616	; 0x268
   1305a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1305e:	ab12      	add	r3, sp, #72	; 0x48
   13060:	f10d 081c 	add.w	r8, sp, #28
   13064:	9003      	str	r0, [sp, #12]
   13066:	e9cd 6301 	strd	r6, r3, [sp, #4]
   1306a:	4602      	mov	r2, r0
   1306c:	ab05      	add	r3, sp, #20
   1306e:	a908      	add	r1, sp, #32
   13070:	f8cd 8000 	str.w	r8, [sp]
   13074:	a806      	add	r0, sp, #24
   13076:	f000 fce9 	bl	13a4c <LLF_RND_GetTrngSource>
   1307a:	2800      	cmp	r0, #0
   1307c:	d1df      	bne.n	1303e <mbedtls_hardware_poll+0x4e>
   1307e:	6833      	ldr	r3, [r6, #0]
   13080:	42a3      	cmp	r3, r4
   13082:	d3dc      	bcc.n	1303e <mbedtls_hardware_poll+0x4e>
   13084:	f8d8 1000 	ldr.w	r1, [r8]
   13088:	4605      	mov	r5, r0
   1308a:	3108      	adds	r1, #8
   1308c:	4638      	mov	r0, r7
   1308e:	4622      	mov	r2, r4
   13090:	f7ff fe94 	bl	12dbc <CC_PalMemCopyPlat>
   13094:	6034      	str	r4, [r6, #0]
   13096:	e7d4      	b.n	13042 <mbedtls_hardware_poll+0x52>
   13098:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1309c:	e7da      	b.n	13054 <mbedtls_hardware_poll+0x64>
   1309e:	bf00      	nop

000130a0 <RNG_PLAT_SetUserRngParameters>:
   130a0:	231c      	movs	r3, #28
   130a2:	b530      	push	{r4, r5, lr}
   130a4:	b083      	sub	sp, #12
   130a6:	a902      	add	r1, sp, #8
   130a8:	f841 3d04 	str.w	r3, [r1, #-4]!
   130ac:	4604      	mov	r4, r0
   130ae:	f000 f9b1 	bl	13414 <CC_PalTrngParamGet>
   130b2:	4605      	mov	r5, r0
   130b4:	b9d8      	cbnz	r0, 130ee <RNG_PLAT_SetUserRngParameters+0x4e>
   130b6:	9b01      	ldr	r3, [sp, #4]
   130b8:	2b1c      	cmp	r3, #28
   130ba:	d11b      	bne.n	130f4 <RNG_PLAT_SetUserRngParameters+0x54>
   130bc:	e9d4 3200 	ldrd	r3, r2, [r4]
   130c0:	2101      	movs	r1, #1
   130c2:	3300      	adds	r3, #0
   130c4:	61e1      	str	r1, [r4, #28]
   130c6:	bf18      	it	ne
   130c8:	2301      	movne	r3, #1
   130ca:	b10a      	cbz	r2, 130d0 <RNG_PLAT_SetUserRngParameters+0x30>
   130cc:	f043 0302 	orr.w	r3, r3, #2
   130d0:	68a2      	ldr	r2, [r4, #8]
   130d2:	b932      	cbnz	r2, 130e2 <RNG_PLAT_SetUserRngParameters+0x42>
   130d4:	68e2      	ldr	r2, [r4, #12]
   130d6:	b9aa      	cbnz	r2, 13104 <RNG_PLAT_SetUserRngParameters+0x64>
   130d8:	e9c4 3208 	strd	r3, r2, [r4, #32]
   130dc:	b93b      	cbnz	r3, 130ee <RNG_PLAT_SetUserRngParameters+0x4e>
   130de:	4d0d      	ldr	r5, [pc, #52]	; (13114 <RNG_PLAT_SetUserRngParameters+0x74>)
   130e0:	e009      	b.n	130f6 <RNG_PLAT_SetUserRngParameters+0x56>
   130e2:	68e2      	ldr	r2, [r4, #12]
   130e4:	f043 0304 	orr.w	r3, r3, #4
   130e8:	b962      	cbnz	r2, 13104 <RNG_PLAT_SetUserRngParameters+0x64>
   130ea:	e9c4 3208 	strd	r3, r2, [r4, #32]
   130ee:	4628      	mov	r0, r5
   130f0:	b003      	add	sp, #12
   130f2:	bd30      	pop	{r4, r5, pc}
   130f4:	4d08      	ldr	r5, [pc, #32]	; (13118 <RNG_PLAT_SetUserRngParameters+0x78>)
   130f6:	4620      	mov	r0, r4
   130f8:	211c      	movs	r1, #28
   130fa:	f7ff fe61 	bl	12dc0 <CC_PalMemSetZeroPlat>
   130fe:	4628      	mov	r0, r5
   13100:	b003      	add	sp, #12
   13102:	bd30      	pop	{r4, r5, pc}
   13104:	2200      	movs	r2, #0
   13106:	4628      	mov	r0, r5
   13108:	f043 0308 	orr.w	r3, r3, #8
   1310c:	e9c4 3208 	strd	r3, r2, [r4, #32]
   13110:	b003      	add	sp, #12
   13112:	bd30      	pop	{r4, r5, pc}
   13114:	00f00c0e 	.word	0x00f00c0e
   13118:	00f00c37 	.word	0x00f00c37

0001311c <nrf_cc310_platform_init>:
   1311c:	b510      	push	{r4, lr}
   1311e:	4c0c      	ldr	r4, [pc, #48]	; (13150 <nrf_cc310_platform_init+0x34>)
   13120:	6823      	ldr	r3, [r4, #0]
   13122:	b113      	cbz	r3, 1312a <nrf_cc310_platform_init+0xe>
   13124:	4b0b      	ldr	r3, [pc, #44]	; (13154 <nrf_cc310_platform_init+0x38>)
   13126:	681b      	ldr	r3, [r3, #0]
   13128:	b96b      	cbnz	r3, 13146 <nrf_cc310_platform_init+0x2a>
   1312a:	f000 f931 	bl	13390 <CC_LibInit>
   1312e:	b138      	cbz	r0, 13140 <nrf_cc310_platform_init+0x24>
   13130:	3801      	subs	r0, #1
   13132:	2806      	cmp	r0, #6
   13134:	bf96      	itet	ls
   13136:	4b08      	ldrls	r3, [pc, #32]	; (13158 <nrf_cc310_platform_init+0x3c>)
   13138:	4808      	ldrhi	r0, [pc, #32]	; (1315c <nrf_cc310_platform_init+0x40>)
   1313a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   1313e:	bd10      	pop	{r4, pc}
   13140:	2201      	movs	r2, #1
   13142:	4b04      	ldr	r3, [pc, #16]	; (13154 <nrf_cc310_platform_init+0x38>)
   13144:	601a      	str	r2, [r3, #0]
   13146:	2301      	movs	r3, #1
   13148:	2000      	movs	r0, #0
   1314a:	6023      	str	r3, [r4, #0]
   1314c:	bd10      	pop	{r4, pc}
   1314e:	bf00      	nop
   13150:	20000674 	.word	0x20000674
   13154:	20000678 	.word	0x20000678
   13158:	00014800 	.word	0x00014800
   1315c:	ffff8ffe 	.word	0xffff8ffe

00013160 <nrf_cc310_platform_init_no_rng>:
   13160:	b510      	push	{r4, lr}
   13162:	4c09      	ldr	r4, [pc, #36]	; (13188 <nrf_cc310_platform_init_no_rng+0x28>)
   13164:	6823      	ldr	r3, [r4, #0]
   13166:	b11b      	cbz	r3, 13170 <nrf_cc310_platform_init_no_rng+0x10>
   13168:	2301      	movs	r3, #1
   1316a:	2000      	movs	r0, #0
   1316c:	6023      	str	r3, [r4, #0]
   1316e:	bd10      	pop	{r4, pc}
   13170:	f000 f87c 	bl	1326c <CC_LibInitNoRng>
   13174:	2800      	cmp	r0, #0
   13176:	d0f7      	beq.n	13168 <nrf_cc310_platform_init_no_rng+0x8>
   13178:	3801      	subs	r0, #1
   1317a:	2806      	cmp	r0, #6
   1317c:	bf96      	itet	ls
   1317e:	4b03      	ldrls	r3, [pc, #12]	; (1318c <nrf_cc310_platform_init_no_rng+0x2c>)
   13180:	4803      	ldrhi	r0, [pc, #12]	; (13190 <nrf_cc310_platform_init_no_rng+0x30>)
   13182:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   13186:	bd10      	pop	{r4, pc}
   13188:	20000674 	.word	0x20000674
   1318c:	00014800 	.word	0x00014800
   13190:	ffff8ffe 	.word	0xffff8ffe

00013194 <nrf_cc310_platform_abort>:
   13194:	f3bf 8f4f 	dsb	sy
   13198:	4905      	ldr	r1, [pc, #20]	; (131b0 <nrf_cc310_platform_abort+0x1c>)
   1319a:	4b06      	ldr	r3, [pc, #24]	; (131b4 <nrf_cc310_platform_abort+0x20>)
   1319c:	68ca      	ldr	r2, [r1, #12]
   1319e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   131a2:	4313      	orrs	r3, r2
   131a4:	60cb      	str	r3, [r1, #12]
   131a6:	f3bf 8f4f 	dsb	sy
   131aa:	bf00      	nop
   131ac:	e7fd      	b.n	131aa <nrf_cc310_platform_abort+0x16>
   131ae:	bf00      	nop
   131b0:	e000ed00 	.word	0xe000ed00
   131b4:	05fa0004 	.word	0x05fa0004

000131b8 <CC_PalAbort>:
   131b8:	4b01      	ldr	r3, [pc, #4]	; (131c0 <CC_PalAbort+0x8>)
   131ba:	685b      	ldr	r3, [r3, #4]
   131bc:	4718      	bx	r3
   131be:	bf00      	nop
   131c0:	20001424 	.word	0x20001424

000131c4 <nrf_cc310_platform_set_abort>:
   131c4:	4b02      	ldr	r3, [pc, #8]	; (131d0 <nrf_cc310_platform_set_abort+0xc>)
   131c6:	e9d0 1200 	ldrd	r1, r2, [r0]
   131ca:	e9c3 1200 	strd	r1, r2, [r3]
   131ce:	4770      	bx	lr
   131d0:	20001424 	.word	0x20001424

000131d4 <mutex_free>:
   131d4:	4770      	bx	lr
   131d6:	bf00      	nop

000131d8 <mutex_unlock>:
   131d8:	b510      	push	{r4, lr}
   131da:	4604      	mov	r4, r0
   131dc:	b120      	cbz	r0, 131e8 <mutex_unlock+0x10>
   131de:	f3bf 8f5f 	dmb	sy
   131e2:	2000      	movs	r0, #0
   131e4:	6020      	str	r0, [r4, #0]
   131e6:	bd10      	pop	{r4, pc}
   131e8:	4803      	ldr	r0, [pc, #12]	; (131f8 <mutex_unlock+0x20>)
   131ea:	f7ff ffe5 	bl	131b8 <CC_PalAbort>
   131ee:	f3bf 8f5f 	dmb	sy
   131f2:	2000      	movs	r0, #0
   131f4:	6020      	str	r0, [r4, #0]
   131f6:	bd10      	pop	{r4, pc}
   131f8:	00014840 	.word	0x00014840

000131fc <mutex_init>:
   131fc:	b510      	push	{r4, lr}
   131fe:	4604      	mov	r4, r0
   13200:	b110      	cbz	r0, 13208 <mutex_init+0xc>
   13202:	2300      	movs	r3, #0
   13204:	6023      	str	r3, [r4, #0]
   13206:	bd10      	pop	{r4, pc}
   13208:	4802      	ldr	r0, [pc, #8]	; (13214 <mutex_init+0x18>)
   1320a:	f7ff ffd5 	bl	131b8 <CC_PalAbort>
   1320e:	2300      	movs	r3, #0
   13210:	6023      	str	r3, [r4, #0]
   13212:	bd10      	pop	{r4, pc}
   13214:	0001481c 	.word	0x0001481c

00013218 <mutex_lock>:
   13218:	b150      	cbz	r0, 13230 <mutex_lock+0x18>
   1321a:	2201      	movs	r2, #1
   1321c:	e8d0 3fef 	ldaex	r3, [r0]
   13220:	e8c0 2fe1 	stlex	r1, r2, [r0]
   13224:	2900      	cmp	r1, #0
   13226:	d1f9      	bne.n	1321c <mutex_lock+0x4>
   13228:	2b01      	cmp	r3, #1
   1322a:	d0f7      	beq.n	1321c <mutex_lock+0x4>
   1322c:	f3bf 8f5f 	dmb	sy
   13230:	2000      	movs	r0, #0
   13232:	4770      	bx	lr

00013234 <nrf_cc310_platform_set_mutexes>:
   13234:	b470      	push	{r4, r5, r6}
   13236:	4b0b      	ldr	r3, [pc, #44]	; (13264 <nrf_cc310_platform_set_mutexes+0x30>)
   13238:	6806      	ldr	r6, [r0, #0]
   1323a:	68c2      	ldr	r2, [r0, #12]
   1323c:	e9d0 5401 	ldrd	r5, r4, [r0, #4]
   13240:	e9c3 4202 	strd	r4, r2, [r3, #8]
   13244:	e9c3 6500 	strd	r6, r5, [r3]
   13248:	e9d1 0203 	ldrd	r0, r2, [r1, #12]
   1324c:	680e      	ldr	r6, [r1, #0]
   1324e:	4b06      	ldr	r3, [pc, #24]	; (13268 <nrf_cc310_platform_set_mutexes+0x34>)
   13250:	e9d1 5401 	ldrd	r5, r4, [r1, #4]
   13254:	e9c3 6500 	strd	r6, r5, [r3]
   13258:	e9c3 4002 	strd	r4, r0, [r3, #8]
   1325c:	611a      	str	r2, [r3, #16]
   1325e:	bc70      	pop	{r4, r5, r6}
   13260:	4770      	bx	lr
   13262:	bf00      	nop
   13264:	2000142c 	.word	0x2000142c
   13268:	2000143c 	.word	0x2000143c

0001326c <CC_LibInitNoRng>:
   1326c:	b510      	push	{r4, lr}
   1326e:	f7ff fe7d 	bl	12f6c <CC_HalInit>
   13272:	b970      	cbnz	r0, 13292 <CC_LibInitNoRng+0x26>
   13274:	f7ff fda8 	bl	12dc8 <CC_PalInit>
   13278:	b980      	cbnz	r0, 1329c <CC_LibInitNoRng+0x30>
   1327a:	f7ff fe35 	bl	12ee8 <CC_PalPowerSaveModeSelect>
   1327e:	b980      	cbnz	r0, 132a2 <CC_LibInitNoRng+0x36>
   13280:	4b11      	ldr	r3, [pc, #68]	; (132c8 <CC_LibInitNoRng+0x5c>)
   13282:	681b      	ldr	r3, [r3, #0]
   13284:	0e1b      	lsrs	r3, r3, #24
   13286:	2bf0      	cmp	r3, #240	; 0xf0
   13288:	d00d      	beq.n	132a6 <CC_LibInitNoRng+0x3a>
   1328a:	2406      	movs	r4, #6
   1328c:	f7ff fe70 	bl	12f70 <CC_HalTerminate>
   13290:	e000      	b.n	13294 <CC_LibInitNoRng+0x28>
   13292:	2403      	movs	r4, #3
   13294:	f7ff fdc6 	bl	12e24 <CC_PalTerminate>
   13298:	4620      	mov	r0, r4
   1329a:	bd10      	pop	{r4, pc}
   1329c:	2404      	movs	r4, #4
   1329e:	4620      	mov	r0, r4
   132a0:	bd10      	pop	{r4, pc}
   132a2:	2400      	movs	r4, #0
   132a4:	e7f2      	b.n	1328c <CC_LibInitNoRng+0x20>
   132a6:	4a09      	ldr	r2, [pc, #36]	; (132cc <CC_LibInitNoRng+0x60>)
   132a8:	4b09      	ldr	r3, [pc, #36]	; (132d0 <CC_LibInitNoRng+0x64>)
   132aa:	6812      	ldr	r2, [r2, #0]
   132ac:	429a      	cmp	r2, r3
   132ae:	d001      	beq.n	132b4 <CC_LibInitNoRng+0x48>
   132b0:	2407      	movs	r4, #7
   132b2:	e7eb      	b.n	1328c <CC_LibInitNoRng+0x20>
   132b4:	2001      	movs	r0, #1
   132b6:	f7ff fe17 	bl	12ee8 <CC_PalPowerSaveModeSelect>
   132ba:	2800      	cmp	r0, #0
   132bc:	d1f1      	bne.n	132a2 <CC_LibInitNoRng+0x36>
   132be:	4b05      	ldr	r3, [pc, #20]	; (132d4 <CC_LibInitNoRng+0x68>)
   132c0:	4604      	mov	r4, r0
   132c2:	6018      	str	r0, [r3, #0]
   132c4:	e7e8      	b.n	13298 <CC_LibInitNoRng+0x2c>
   132c6:	bf00      	nop
   132c8:	50841928 	.word	0x50841928
   132cc:	50841a24 	.word	0x50841a24
   132d0:	20e00000 	.word	0x20e00000
   132d4:	50841a0c 	.word	0x50841a0c

000132d8 <CC_LibInitRngModule>:
   132d8:	b530      	push	{r4, r5, lr}
   132da:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
   132de:	f44f 7208 	mov.w	r2, #544	; 0x220
   132e2:	2100      	movs	r1, #0
   132e4:	a80c      	add	r0, sp, #48	; 0x30
   132e6:	f000 fed5 	bl	14094 <memset>
   132ea:	2300      	movs	r3, #0
   132ec:	a802      	add	r0, sp, #8
   132ee:	4619      	mov	r1, r3
   132f0:	2228      	movs	r2, #40	; 0x28
   132f2:	9301      	str	r3, [sp, #4]
   132f4:	f000 fece 	bl	14094 <memset>
   132f8:	a802      	add	r0, sp, #8
   132fa:	f7ff fed1 	bl	130a0 <RNG_PLAT_SetUserRngParameters>
   132fe:	b118      	cbz	r0, 13308 <CC_LibInitRngModule+0x30>
   13300:	2005      	movs	r0, #5
   13302:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
   13306:	bd30      	pop	{r4, r5, pc}
   13308:	4d1c      	ldr	r5, [pc, #112]	; (1337c <CC_LibInitRngModule+0xa4>)
   1330a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1330e:	6828      	ldr	r0, [r5, #0]
   13310:	f7ff fdba 	bl	12e88 <CC_PalMutexLock>
   13314:	4604      	mov	r4, r0
   13316:	b9f0      	cbnz	r0, 13356 <CC_LibInitRngModule+0x7e>
   13318:	2000      	movs	r0, #0
   1331a:	f7ff fde5 	bl	12ee8 <CC_PalPowerSaveModeSelect>
   1331e:	b9b0      	cbnz	r0, 1334e <CC_LibInitRngModule+0x76>
   13320:	aa0c      	add	r2, sp, #48	; 0x30
   13322:	a902      	add	r1, sp, #8
   13324:	a801      	add	r0, sp, #4
   13326:	f000 fbd5 	bl	13ad4 <LLF_RND_RunTrngStartupTest>
   1332a:	4604      	mov	r4, r0
   1332c:	2001      	movs	r0, #1
   1332e:	f7ff fddb 	bl	12ee8 <CC_PalPowerSaveModeSelect>
   13332:	b9f0      	cbnz	r0, 13372 <CC_LibInitRngModule+0x9a>
   13334:	6828      	ldr	r0, [r5, #0]
   13336:	f7ff fdaf 	bl	12e98 <CC_PalMutexUnlock>
   1333a:	b110      	cbz	r0, 13342 <CC_LibInitRngModule+0x6a>
   1333c:	4810      	ldr	r0, [pc, #64]	; (13380 <CC_LibInitRngModule+0xa8>)
   1333e:	f7ff ff3b 	bl	131b8 <CC_PalAbort>
   13342:	4620      	mov	r0, r4
   13344:	2c00      	cmp	r4, #0
   13346:	d1db      	bne.n	13300 <CC_LibInitRngModule+0x28>
   13348:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
   1334c:	bd30      	pop	{r4, r5, pc}
   1334e:	480d      	ldr	r0, [pc, #52]	; (13384 <CC_LibInitRngModule+0xac>)
   13350:	f7ff ff32 	bl	131b8 <CC_PalAbort>
   13354:	e7e4      	b.n	13320 <CC_LibInitRngModule+0x48>
   13356:	480c      	ldr	r0, [pc, #48]	; (13388 <CC_LibInitRngModule+0xb0>)
   13358:	f7ff ff2e 	bl	131b8 <CC_PalAbort>
   1335c:	2c01      	cmp	r4, #1
   1335e:	d1db      	bne.n	13318 <CC_LibInitRngModule+0x40>
   13360:	6828      	ldr	r0, [r5, #0]
   13362:	f7ff fd99 	bl	12e98 <CC_PalMutexUnlock>
   13366:	2800      	cmp	r0, #0
   13368:	d0ca      	beq.n	13300 <CC_LibInitRngModule+0x28>
   1336a:	4805      	ldr	r0, [pc, #20]	; (13380 <CC_LibInitRngModule+0xa8>)
   1336c:	f7ff ff24 	bl	131b8 <CC_PalAbort>
   13370:	e7c6      	b.n	13300 <CC_LibInitRngModule+0x28>
   13372:	4806      	ldr	r0, [pc, #24]	; (1338c <CC_LibInitRngModule+0xb4>)
   13374:	f7ff ff20 	bl	131b8 <CC_PalAbort>
   13378:	e7dc      	b.n	13334 <CC_LibInitRngModule+0x5c>
   1337a:	bf00      	nop
   1337c:	20001420 	.word	0x20001420
   13380:	00014878 	.word	0x00014878
   13384:	00014890 	.word	0x00014890
   13388:	00014860 	.word	0x00014860
   1338c:	000148b0 	.word	0x000148b0

00013390 <CC_LibInit>:
   13390:	b508      	push	{r3, lr}
   13392:	f7ff fdeb 	bl	12f6c <CC_HalInit>
   13396:	b118      	cbz	r0, 133a0 <CC_LibInit+0x10>
   13398:	f7ff fd44 	bl	12e24 <CC_PalTerminate>
   1339c:	2003      	movs	r0, #3
   1339e:	bd08      	pop	{r3, pc}
   133a0:	f7ff fd12 	bl	12dc8 <CC_PalInit>
   133a4:	b968      	cbnz	r0, 133c2 <CC_LibInit+0x32>
   133a6:	f7ff fd9f 	bl	12ee8 <CC_PalPowerSaveModeSelect>
   133aa:	b960      	cbnz	r0, 133c6 <CC_LibInit+0x36>
   133ac:	4b15      	ldr	r3, [pc, #84]	; (13404 <CC_LibInit+0x74>)
   133ae:	681b      	ldr	r3, [r3, #0]
   133b0:	0e1b      	lsrs	r3, r3, #24
   133b2:	2bf0      	cmp	r3, #240	; 0xf0
   133b4:	d012      	beq.n	133dc <CC_LibInit+0x4c>
   133b6:	f7ff fddb 	bl	12f70 <CC_HalTerminate>
   133ba:	f7ff fd33 	bl	12e24 <CC_PalTerminate>
   133be:	2006      	movs	r0, #6
   133c0:	bd08      	pop	{r3, pc}
   133c2:	2004      	movs	r0, #4
   133c4:	bd08      	pop	{r3, pc}
   133c6:	f7ff fdd3 	bl	12f70 <CC_HalTerminate>
   133ca:	f7ff fd2b 	bl	12e24 <CC_PalTerminate>
   133ce:	f7ff ff83 	bl	132d8 <CC_LibInitRngModule>
   133d2:	2800      	cmp	r0, #0
   133d4:	bf0c      	ite	eq
   133d6:	2000      	moveq	r0, #0
   133d8:	2005      	movne	r0, #5
   133da:	bd08      	pop	{r3, pc}
   133dc:	4a0a      	ldr	r2, [pc, #40]	; (13408 <CC_LibInit+0x78>)
   133de:	4b0b      	ldr	r3, [pc, #44]	; (1340c <CC_LibInit+0x7c>)
   133e0:	6812      	ldr	r2, [r2, #0]
   133e2:	429a      	cmp	r2, r3
   133e4:	d005      	beq.n	133f2 <CC_LibInit+0x62>
   133e6:	f7ff fdc3 	bl	12f70 <CC_HalTerminate>
   133ea:	f7ff fd1b 	bl	12e24 <CC_PalTerminate>
   133ee:	2007      	movs	r0, #7
   133f0:	bd08      	pop	{r3, pc}
   133f2:	2001      	movs	r0, #1
   133f4:	f7ff fd78 	bl	12ee8 <CC_PalPowerSaveModeSelect>
   133f8:	2800      	cmp	r0, #0
   133fa:	d1e4      	bne.n	133c6 <CC_LibInit+0x36>
   133fc:	4b04      	ldr	r3, [pc, #16]	; (13410 <CC_LibInit+0x80>)
   133fe:	6018      	str	r0, [r3, #0]
   13400:	e7e5      	b.n	133ce <CC_LibInit+0x3e>
   13402:	bf00      	nop
   13404:	50841928 	.word	0x50841928
   13408:	50841a24 	.word	0x50841a24
   1340c:	20e00000 	.word	0x20e00000
   13410:	50841a0c 	.word	0x50841a0c

00013414 <CC_PalTrngParamGet>:
   13414:	b118      	cbz	r0, 1341e <CC_PalTrngParamGet+0xa>
   13416:	b111      	cbz	r1, 1341e <CC_PalTrngParamGet+0xa>
   13418:	680b      	ldr	r3, [r1, #0]
   1341a:	2b1c      	cmp	r3, #28
   1341c:	d001      	beq.n	13422 <CC_PalTrngParamGet+0xe>
   1341e:	2001      	movs	r0, #1
   13420:	4770      	bx	lr
   13422:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   13426:	4a3a      	ldr	r2, [pc, #232]	; (13510 <CC_PalTrngParamGet+0xfc>)
   13428:	f8d3 1c10 	ldr.w	r1, [r3, #3088]	; 0xc10
   1342c:	4291      	cmp	r1, r2
   1342e:	d05a      	beq.n	134e6 <CC_PalTrngParamGet+0xd2>
   13430:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   13434:	3201      	adds	r2, #1
   13436:	d056      	beq.n	134e6 <CC_PalTrngParamGet+0xd2>
   13438:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   1343c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   13440:	6002      	str	r2, [r0, #0]
   13442:	f8d3 1c14 	ldr.w	r1, [r3, #3092]	; 0xc14
   13446:	4a33      	ldr	r2, [pc, #204]	; (13514 <CC_PalTrngParamGet+0x100>)
   13448:	4291      	cmp	r1, r2
   1344a:	d05e      	beq.n	1350a <CC_PalTrngParamGet+0xf6>
   1344c:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   13450:	3201      	adds	r2, #1
   13452:	d05a      	beq.n	1350a <CC_PalTrngParamGet+0xf6>
   13454:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   13458:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   1345c:	6042      	str	r2, [r0, #4]
   1345e:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   13462:	f512 7f94 	cmn.w	r2, #296	; 0x128
   13466:	d04d      	beq.n	13504 <CC_PalTrngParamGet+0xf0>
   13468:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   1346c:	3201      	adds	r2, #1
   1346e:	d049      	beq.n	13504 <CC_PalTrngParamGet+0xf0>
   13470:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   13474:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   13478:	6082      	str	r2, [r0, #8]
   1347a:	f8d3 1c1c 	ldr.w	r1, [r3, #3100]	; 0xc1c
   1347e:	4a26      	ldr	r2, [pc, #152]	; (13518 <CC_PalTrngParamGet+0x104>)
   13480:	4291      	cmp	r1, r2
   13482:	d03c      	beq.n	134fe <CC_PalTrngParamGet+0xea>
   13484:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   13488:	3201      	adds	r2, #1
   1348a:	d038      	beq.n	134fe <CC_PalTrngParamGet+0xea>
   1348c:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   13490:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   13494:	60c2      	str	r2, [r0, #12]
   13496:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   1349a:	3270      	adds	r2, #112	; 0x70
   1349c:	d02d      	beq.n	134fa <CC_PalTrngParamGet+0xe6>
   1349e:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   134a2:	3201      	adds	r2, #1
   134a4:	d029      	beq.n	134fa <CC_PalTrngParamGet+0xe6>
   134a6:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   134aa:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   134ae:	6102      	str	r2, [r0, #16]
   134b0:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   134b4:	32af      	adds	r2, #175	; 0xaf
   134b6:	d01e      	beq.n	134f6 <CC_PalTrngParamGet+0xe2>
   134b8:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   134bc:	3201      	adds	r2, #1
   134be:	d01a      	beq.n	134f6 <CC_PalTrngParamGet+0xe2>
   134c0:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   134c4:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   134c8:	6142      	str	r2, [r0, #20]
   134ca:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
   134ce:	4a13      	ldr	r2, [pc, #76]	; (1351c <CC_PalTrngParamGet+0x108>)
   134d0:	4291      	cmp	r1, r2
   134d2:	d00b      	beq.n	134ec <CC_PalTrngParamGet+0xd8>
   134d4:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   134d8:	3201      	adds	r2, #1
   134da:	d007      	beq.n	134ec <CC_PalTrngParamGet+0xd8>
   134dc:	f8d3 3c08 	ldr.w	r3, [r3, #3080]	; 0xc08
   134e0:	6183      	str	r3, [r0, #24]
   134e2:	2000      	movs	r0, #0
   134e4:	4770      	bx	lr
   134e6:	f640 02fc 	movw	r2, #2300	; 0x8fc
   134ea:	e7a7      	b.n	1343c <CC_PalTrngParamGet+0x28>
   134ec:	f240 3337 	movw	r3, #823	; 0x337
   134f0:	6183      	str	r3, [r0, #24]
   134f2:	2000      	movs	r0, #0
   134f4:	4770      	bx	lr
   134f6:	2251      	movs	r2, #81	; 0x51
   134f8:	e7e4      	b.n	134c4 <CC_PalTrngParamGet+0xb0>
   134fa:	2290      	movs	r2, #144	; 0x90
   134fc:	e7d5      	b.n	134aa <CC_PalTrngParamGet+0x96>
   134fe:	f642 1204 	movw	r2, #10500	; 0x2904
   13502:	e7c5      	b.n	13490 <CC_PalTrngParamGet+0x7c>
   13504:	f640 62d8 	movw	r2, #3800	; 0xed8
   13508:	e7b4      	b.n	13474 <CC_PalTrngParamGet+0x60>
   1350a:	f242 02d0 	movw	r2, #8400	; 0x20d0
   1350e:	e7a3      	b.n	13458 <CC_PalTrngParamGet+0x44>
   13510:	fffff8fc 	.word	0xfffff8fc
   13514:	ffff20d0 	.word	0xffff20d0
   13518:	ffff2904 	.word	0xffff2904
   1351c:	fffff337 	.word	0xfffff337

00013520 <LLF_RND_AdaptiveProportionTest>:
   13520:	b3a8      	cbz	r0, 1358e <LLF_RND_AdaptiveProportionTest+0x6e>
   13522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13526:	1e4c      	subs	r4, r1, #1
   13528:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   1352c:	d22c      	bcs.n	13588 <LLF_RND_AdaptiveProportionTest+0x68>
   1352e:	b35b      	cbz	r3, 13588 <LLF_RND_AdaptiveProportionTest+0x68>
   13530:	b352      	cbz	r2, 13588 <LLF_RND_AdaptiveProportionTest+0x68>
   13532:	f04f 0c00 	mov.w	ip, #0
   13536:	00c9      	lsls	r1, r1, #3
   13538:	46e6      	mov	lr, ip
   1353a:	4665      	mov	r5, ip
   1353c:	4664      	mov	r4, ip
   1353e:	1e4f      	subs	r7, r1, #1
   13540:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   13544:	e00c      	b.n	13560 <LLF_RND_AdaptiveProportionTest+0x40>
   13546:	42ab      	cmp	r3, r5
   13548:	d016      	beq.n	13578 <LLF_RND_AdaptiveProportionTest+0x58>
   1354a:	458e      	cmp	lr, r1
   1354c:	d101      	bne.n	13552 <LLF_RND_AdaptiveProportionTest+0x32>
   1354e:	f10c 0c01 	add.w	ip, ip, #1
   13552:	45a8      	cmp	r8, r5
   13554:	d016      	beq.n	13584 <LLF_RND_AdaptiveProportionTest+0x64>
   13556:	3401      	adds	r4, #1
   13558:	42bc      	cmp	r4, r7
   1355a:	f105 0501 	add.w	r5, r5, #1
   1355e:	d818      	bhi.n	13592 <LLF_RND_AdaptiveProportionTest+0x72>
   13560:	0961      	lsrs	r1, r4, #5
   13562:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   13566:	f004 061f 	and.w	r6, r4, #31
   1356a:	40f1      	lsrs	r1, r6
   1356c:	2e1f      	cmp	r6, #31
   1356e:	bf18      	it	ne
   13570:	f001 0101 	andne.w	r1, r1, #1
   13574:	2c00      	cmp	r4, #0
   13576:	d1e6      	bne.n	13546 <LLF_RND_AdaptiveProportionTest+0x26>
   13578:	2500      	movs	r5, #0
   1357a:	45a8      	cmp	r8, r5
   1357c:	468e      	mov	lr, r1
   1357e:	f04f 0c01 	mov.w	ip, #1
   13582:	d1e8      	bne.n	13556 <LLF_RND_AdaptiveProportionTest+0x36>
   13584:	4562      	cmp	r2, ip
   13586:	d2e6      	bcs.n	13556 <LLF_RND_AdaptiveProportionTest+0x36>
   13588:	4803      	ldr	r0, [pc, #12]	; (13598 <LLF_RND_AdaptiveProportionTest+0x78>)
   1358a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1358e:	4802      	ldr	r0, [pc, #8]	; (13598 <LLF_RND_AdaptiveProportionTest+0x78>)
   13590:	4770      	bx	lr
   13592:	2000      	movs	r0, #0
   13594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13598:	00f10c37 	.word	0x00f10c37

0001359c <getTrngSource>:
   1359c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135a0:	b08f      	sub	sp, #60	; 0x3c
   135a2:	460d      	mov	r5, r1
   135a4:	e9dd 4119 	ldrd	r4, r1, [sp, #100]	; 0x64
   135a8:	4683      	mov	fp, r0
   135aa:	2900      	cmp	r1, #0
   135ac:	d157      	bne.n	1365e <getTrngSource+0xc2>
   135ae:	6929      	ldr	r1, [r5, #16]
   135b0:	9103      	str	r1, [sp, #12]
   135b2:	2100      	movs	r1, #0
   135b4:	601c      	str	r4, [r3, #0]
   135b6:	9b18      	ldr	r3, [sp, #96]	; 0x60
   135b8:	6019      	str	r1, [r3, #0]
   135ba:	2a00      	cmp	r2, #0
   135bc:	f000 8122 	beq.w	13804 <getTrngSource+0x268>
   135c0:	4a81      	ldr	r2, [pc, #516]	; (137c8 <getTrngSource+0x22c>)
   135c2:	4b82      	ldr	r3, [pc, #520]	; (137cc <getTrngSource+0x230>)
   135c4:	6811      	ldr	r1, [r2, #0]
   135c6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   135c8:	681b      	ldr	r3, [r3, #0]
   135ca:	429a      	cmp	r2, r3
   135cc:	d157      	bne.n	1367e <getTrngSource+0xe2>
   135ce:	290a      	cmp	r1, #10
   135d0:	d155      	bne.n	1367e <getTrngSource+0xe2>
   135d2:	f89b 3003 	ldrb.w	r3, [fp, #3]
   135d6:	9306      	str	r3, [sp, #24]
   135d8:	9903      	ldr	r1, [sp, #12]
   135da:	2304      	movs	r3, #4
   135dc:	4608      	mov	r0, r1
   135de:	4a7c      	ldr	r2, [pc, #496]	; (137d0 <getTrngSource+0x234>)
   135e0:	9302      	str	r3, [sp, #8]
   135e2:	fba2 0200 	umull	r0, r2, r2, r0
   135e6:	0892      	lsrs	r2, r2, #2
   135e8:	00cb      	lsls	r3, r1, #3
   135ea:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   135ee:	f104 0008 	add.w	r0, r4, #8
   135f2:	eba1 0242 	sub.w	r2, r1, r2, lsl #1
   135f6:	3b01      	subs	r3, #1
   135f8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 137cc <getTrngSource+0x230>
   135fc:	f8df a200 	ldr.w	sl, [pc, #512]	; 13800 <getTrngSource+0x264>
   13600:	9004      	str	r0, [sp, #16]
   13602:	9200      	str	r2, [sp, #0]
   13604:	9305      	str	r3, [sp, #20]
   13606:	9b18      	ldr	r3, [sp, #96]	; 0x60
   13608:	9c03      	ldr	r4, [sp, #12]
   1360a:	601c      	str	r4, [r3, #0]
   1360c:	2c00      	cmp	r4, #0
   1360e:	f000 80cc 	beq.w	137aa <getTrngSource+0x20e>
   13612:	2600      	movs	r6, #0
   13614:	9f04      	ldr	r7, [sp, #16]
   13616:	f000 faa9 	bl	13b6c <LLF_RND_TurnOffTrng>
   1361a:	2300      	movs	r3, #0
   1361c:	9307      	str	r3, [sp, #28]
   1361e:	9b06      	ldr	r3, [sp, #24]
   13620:	f1bb 0f00 	cmp.w	fp, #0
   13624:	d03a      	beq.n	1369c <getTrngSource+0x100>
   13626:	2d00      	cmp	r5, #0
   13628:	d034      	beq.n	13694 <getTrngSource+0xf8>
   1362a:	bb53      	cbnz	r3, 13682 <getTrngSource+0xe6>
   1362c:	005b      	lsls	r3, r3, #1
   1362e:	9306      	str	r3, [sp, #24]
   13630:	f1bb 0f00 	cmp.w	fp, #0
   13634:	d036      	beq.n	136a4 <getTrngSource+0x108>
   13636:	2d00      	cmp	r5, #0
   13638:	d034      	beq.n	136a4 <getTrngSource+0x108>
   1363a:	b1e3      	cbz	r3, 13676 <getTrngSource+0xda>
   1363c:	a906      	add	r1, sp, #24
   1363e:	4628      	mov	r0, r5
   13640:	f000 fa84 	bl	13b4c <LLF_RND_GetFastestRosc>
   13644:	2800      	cmp	r0, #0
   13646:	f000 817d 	beq.w	13944 <getTrngSource+0x3a8>
   1364a:	4b62      	ldr	r3, [pc, #392]	; (137d4 <getTrngSource+0x238>)
   1364c:	4298      	cmp	r0, r3
   1364e:	d012      	beq.n	13676 <getTrngSource+0xda>
   13650:	9000      	str	r0, [sp, #0]
   13652:	f000 fa8b 	bl	13b6c <LLF_RND_TurnOffTrng>
   13656:	9800      	ldr	r0, [sp, #0]
   13658:	b00f      	add	sp, #60	; 0x3c
   1365a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1365e:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
   13662:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
   13666:	3001      	adds	r0, #1
   13668:	bf0c      	ite	eq
   1366a:	f44f 7104 	moveq.w	r1, #528	; 0x210
   1366e:	f8d1 1c0c 	ldrne.w	r1, [r1, #3084]	; 0xc0c
   13672:	9103      	str	r1, [sp, #12]
   13674:	e79d      	b.n	135b2 <getTrngSource+0x16>
   13676:	6a2b      	ldr	r3, [r5, #32]
   13678:	b973      	cbnz	r3, 13698 <getTrngSource+0xfc>
   1367a:	4856      	ldr	r0, [pc, #344]	; (137d4 <getTrngSource+0x238>)
   1367c:	e7e8      	b.n	13650 <getTrngSource+0xb4>
   1367e:	4856      	ldr	r0, [pc, #344]	; (137d8 <getTrngSource+0x23c>)
   13680:	e7e6      	b.n	13650 <getTrngSource+0xb4>
   13682:	a906      	add	r1, sp, #24
   13684:	4628      	mov	r0, r5
   13686:	f000 fa61 	bl	13b4c <LLF_RND_GetFastestRosc>
   1368a:	b168      	cbz	r0, 136a8 <getTrngSource+0x10c>
   1368c:	4b53      	ldr	r3, [pc, #332]	; (137dc <getTrngSource+0x240>)
   1368e:	4298      	cmp	r0, r3
   13690:	d0de      	beq.n	13650 <getTrngSource+0xb4>
   13692:	9b06      	ldr	r3, [sp, #24]
   13694:	2b08      	cmp	r3, #8
   13696:	d1c9      	bne.n	1362c <getTrngSource+0x90>
   13698:	4851      	ldr	r0, [pc, #324]	; (137e0 <getTrngSource+0x244>)
   1369a:	e7d9      	b.n	13650 <getTrngSource+0xb4>
   1369c:	2b08      	cmp	r3, #8
   1369e:	d0fb      	beq.n	13698 <getTrngSource+0xfc>
   136a0:	005b      	lsls	r3, r3, #1
   136a2:	9306      	str	r3, [sp, #24]
   136a4:	484f      	ldr	r0, [pc, #316]	; (137e4 <getTrngSource+0x248>)
   136a6:	e7d3      	b.n	13650 <getTrngSource+0xb4>
   136a8:	4629      	mov	r1, r5
   136aa:	9806      	ldr	r0, [sp, #24]
   136ac:	f000 fa30 	bl	13b10 <LLF_RND_GetRoscSampleCnt>
   136b0:	2800      	cmp	r0, #0
   136b2:	d1eb      	bne.n	1368c <getTrngSource+0xf0>
   136b4:	9b06      	ldr	r3, [sp, #24]
   136b6:	2b08      	cmp	r3, #8
   136b8:	f000 810e 	beq.w	138d8 <getTrngSource+0x33c>
   136bc:	2b04      	cmp	r3, #4
   136be:	f000 8131 	beq.w	13924 <getTrngSource+0x388>
   136c2:	f1a3 0302 	sub.w	r3, r3, #2
   136c6:	fab3 f383 	clz	r3, r3
   136ca:	095b      	lsrs	r3, r3, #5
   136cc:	9301      	str	r3, [sp, #4]
   136ce:	2301      	movs	r3, #1
   136d0:	4619      	mov	r1, r3
   136d2:	4a45      	ldr	r2, [pc, #276]	; (137e8 <getTrngSource+0x24c>)
   136d4:	6013      	str	r3, [r2, #0]
   136d6:	f842 3c84 	str.w	r3, [r2, #-132]
   136da:	4b43      	ldr	r3, [pc, #268]	; (137e8 <getTrngSource+0x24c>)
   136dc:	6019      	str	r1, [r3, #0]
   136de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   136e0:	f8c9 3000 	str.w	r3, [r9]
   136e4:	f8d9 2000 	ldr.w	r2, [r9]
   136e8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   136ea:	429a      	cmp	r2, r3
   136ec:	d1f5      	bne.n	136da <getTrngSource+0x13e>
   136ee:	f04f 0800 	mov.w	r8, #0
   136f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   136f6:	f8ca 8000 	str.w	r8, [sl]
   136fa:	f7ff fc3b 	bl	12f74 <CC_HalClearInterruptBit>
   136fe:	4a3b      	ldr	r2, [pc, #236]	; (137ec <getTrngSource+0x250>)
   13700:	4b3b      	ldr	r3, [pc, #236]	; (137f0 <getTrngSource+0x254>)
   13702:	4640      	mov	r0, r8
   13704:	601a      	str	r2, [r3, #0]
   13706:	f7ff fc43 	bl	12f90 <CC_HalMaskInterrupt>
   1370a:	220a      	movs	r2, #10
   1370c:	9801      	ldr	r0, [sp, #4]
   1370e:	4939      	ldr	r1, [pc, #228]	; (137f4 <getTrngSource+0x258>)
   13710:	4b2d      	ldr	r3, [pc, #180]	; (137c8 <getTrngSource+0x22c>)
   13712:	6008      	str	r0, [r1, #0]
   13714:	601a      	str	r2, [r3, #0]
   13716:	692a      	ldr	r2, [r5, #16]
   13718:	f1a8 3855 	sub.w	r8, r8, #1431655765	; 0x55555555
   1371c:	fba8 1202 	umull	r1, r2, r8, r2
   13720:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   13722:	0912      	lsrs	r2, r2, #4
   13724:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   13728:	03db      	lsls	r3, r3, #15
   1372a:	fb03 f302 	mul.w	r3, r3, r2
   1372e:	4a32      	ldr	r2, [pc, #200]	; (137f8 <getTrngSource+0x25c>)
   13730:	099b      	lsrs	r3, r3, #6
   13732:	6013      	str	r3, [r2, #0]
   13734:	2301      	movs	r3, #1
   13736:	f8ca 3000 	str.w	r3, [sl]
   1373a:	9906      	ldr	r1, [sp, #24]
   1373c:	f8db 2000 	ldr.w	r2, [fp]
   13740:	020b      	lsls	r3, r1, #8
   13742:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   13746:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   1374a:	4313      	orrs	r3, r2
   1374c:	f8cb 3000 	str.w	r3, [fp]
   13750:	a807      	add	r0, sp, #28
   13752:	f000 f9cd 	bl	13af0 <LLF_RND_WaitRngInterrupt>
   13756:	2800      	cmp	r0, #0
   13758:	d198      	bne.n	1368c <getTrngSource+0xf0>
   1375a:	4b28      	ldr	r3, [pc, #160]	; (137fc <getTrngSource+0x260>)
   1375c:	fba8 2804 	umull	r2, r8, r8, r4
   13760:	681a      	ldr	r2, [r3, #0]
   13762:	3314      	adds	r3, #20
   13764:	9208      	str	r2, [sp, #32]
   13766:	f853 2c10 	ldr.w	r2, [r3, #-16]
   1376a:	ebb6 0f98 	cmp.w	r6, r8, lsr #2
   1376e:	9209      	str	r2, [sp, #36]	; 0x24
   13770:	f853 2c0c 	ldr.w	r2, [r3, #-12]
   13774:	920a      	str	r2, [sp, #40]	; 0x28
   13776:	f853 2c08 	ldr.w	r2, [r3, #-8]
   1377a:	920b      	str	r2, [sp, #44]	; 0x2c
   1377c:	f853 2c04 	ldr.w	r2, [r3, #-4]
   13780:	920c      	str	r2, [sp, #48]	; 0x30
   13782:	681b      	ldr	r3, [r3, #0]
   13784:	930d      	str	r3, [sp, #52]	; 0x34
   13786:	d101      	bne.n	1378c <getTrngSource+0x1f0>
   13788:	9b00      	ldr	r3, [sp, #0]
   1378a:	b99b      	cbnz	r3, 137b4 <getTrngSource+0x218>
   1378c:	4638      	mov	r0, r7
   1378e:	2218      	movs	r2, #24
   13790:	a908      	add	r1, sp, #32
   13792:	f7ff fb13 	bl	12dbc <CC_PalMemCopyPlat>
   13796:	3c18      	subs	r4, #24
   13798:	3718      	adds	r7, #24
   1379a:	3601      	adds	r6, #1
   1379c:	2c00      	cmp	r4, #0
   1379e:	f47f af3a 	bne.w	13616 <getTrngSource+0x7a>
   137a2:	9b04      	ldr	r3, [sp, #16]
   137a4:	2b00      	cmp	r3, #0
   137a6:	f040 809a 	bne.w	138de <getTrngSource+0x342>
   137aa:	2300      	movs	r3, #0
   137ac:	9a18      	ldr	r2, [sp, #96]	; 0x60
   137ae:	6013      	str	r3, [r2, #0]
   137b0:	9b06      	ldr	r3, [sp, #24]
   137b2:	e76f      	b.n	13694 <getTrngSource+0xf8>
   137b4:	461a      	mov	r2, r3
   137b6:	4638      	mov	r0, r7
   137b8:	a908      	add	r1, sp, #32
   137ba:	1ae4      	subs	r4, r4, r3
   137bc:	f7ff fafe 	bl	12dbc <CC_PalMemCopyPlat>
   137c0:	9b00      	ldr	r3, [sp, #0]
   137c2:	441f      	add	r7, r3
   137c4:	e7e9      	b.n	1379a <getTrngSource+0x1fe>
   137c6:	bf00      	nop
   137c8:	50841138 	.word	0x50841138
   137cc:	50841130 	.word	0x50841130
   137d0:	aaaaaaab 	.word	0xaaaaaaab
   137d4:	00f10c31 	.word	0x00f10c31
   137d8:	00f10c30 	.word	0x00f10c30
   137dc:	00f10c02 	.word	0x00f10c02
   137e0:	00f10c32 	.word	0x00f10c32
   137e4:	00f10c35 	.word	0x00f10c35
   137e8:	508411c4 	.word	0x508411c4
   137ec:	0ffffffe 	.word	0x0ffffffe
   137f0:	50841100 	.word	0x50841100
   137f4:	5084110c 	.word	0x5084110c
   137f8:	508411d8 	.word	0x508411d8
   137fc:	50841114 	.word	0x50841114
   13800:	5084112c 	.word	0x5084112c
   13804:	f1bb 0f00 	cmp.w	fp, #0
   13808:	f43f af4c 	beq.w	136a4 <getTrngSource+0x108>
   1380c:	2d00      	cmp	r5, #0
   1380e:	f43f af49 	beq.w	136a4 <getTrngSource+0x108>
   13812:	2301      	movs	r3, #1
   13814:	a90e      	add	r1, sp, #56	; 0x38
   13816:	f841 3d20 	str.w	r3, [r1, #-32]!
   1381a:	f8cb 2000 	str.w	r2, [fp]
   1381e:	4628      	mov	r0, r5
   13820:	f000 f994 	bl	13b4c <LLF_RND_GetFastestRosc>
   13824:	2800      	cmp	r0, #0
   13826:	f47f af13 	bne.w	13650 <getTrngSource+0xb4>
   1382a:	4629      	mov	r1, r5
   1382c:	9806      	ldr	r0, [sp, #24]
   1382e:	f000 f96f 	bl	13b10 <LLF_RND_GetRoscSampleCnt>
   13832:	2800      	cmp	r0, #0
   13834:	f47f af0c 	bne.w	13650 <getTrngSource+0xb4>
   13838:	9f06      	ldr	r7, [sp, #24]
   1383a:	2f08      	cmp	r7, #8
   1383c:	f000 80eb 	beq.w	13a16 <getTrngSource+0x47a>
   13840:	2f04      	cmp	r7, #4
   13842:	f000 80ea 	beq.w	13a1a <getTrngSource+0x47e>
   13846:	f1a7 0702 	sub.w	r7, r7, #2
   1384a:	fab7 f787 	clz	r7, r7
   1384e:	097f      	lsrs	r7, r7, #5
   13850:	2201      	movs	r2, #1
   13852:	4616      	mov	r6, r2
   13854:	4b73      	ldr	r3, [pc, #460]	; (13a24 <getTrngSource+0x488>)
   13856:	4974      	ldr	r1, [pc, #464]	; (13a28 <getTrngSource+0x48c>)
   13858:	601a      	str	r2, [r3, #0]
   1385a:	4618      	mov	r0, r3
   1385c:	600a      	str	r2, [r1, #0]
   1385e:	3b94      	subs	r3, #148	; 0x94
   13860:	6006      	str	r6, [r0, #0]
   13862:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   13864:	601a      	str	r2, [r3, #0]
   13866:	6819      	ldr	r1, [r3, #0]
   13868:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   1386a:	4291      	cmp	r1, r2
   1386c:	d1f8      	bne.n	13860 <getTrngSource+0x2c4>
   1386e:	f04f 0800 	mov.w	r8, #0
   13872:	4b6e      	ldr	r3, [pc, #440]	; (13a2c <getTrngSource+0x490>)
   13874:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13878:	f8c3 8000 	str.w	r8, [r3]
   1387c:	f7ff fb7a 	bl	12f74 <CC_HalClearInterruptBit>
   13880:	4b6b      	ldr	r3, [pc, #428]	; (13a30 <getTrngSource+0x494>)
   13882:	4a6c      	ldr	r2, [pc, #432]	; (13a34 <getTrngSource+0x498>)
   13884:	4640      	mov	r0, r8
   13886:	601a      	str	r2, [r3, #0]
   13888:	f7ff fb82 	bl	12f90 <CC_HalMaskInterrupt>
   1388c:	220a      	movs	r2, #10
   1388e:	496a      	ldr	r1, [pc, #424]	; (13a38 <getTrngSource+0x49c>)
   13890:	4b6a      	ldr	r3, [pc, #424]	; (13a3c <getTrngSource+0x4a0>)
   13892:	600f      	str	r7, [r1, #0]
   13894:	601a      	str	r2, [r3, #0]
   13896:	991a      	ldr	r1, [sp, #104]	; 0x68
   13898:	692b      	ldr	r3, [r5, #16]
   1389a:	2901      	cmp	r1, #1
   1389c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   1389e:	f000 80b1 	beq.w	13a04 <getTrngSource+0x468>
   138a2:	4967      	ldr	r1, [pc, #412]	; (13a40 <getTrngSource+0x4a4>)
   138a4:	fba1 1303 	umull	r1, r3, r1, r3
   138a8:	091b      	lsrs	r3, r3, #4
   138aa:	2101      	movs	r1, #1
   138ac:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   138b0:	03d2      	lsls	r2, r2, #15
   138b2:	fb03 f302 	mul.w	r3, r3, r2
   138b6:	4a63      	ldr	r2, [pc, #396]	; (13a44 <getTrngSource+0x4a8>)
   138b8:	099b      	lsrs	r3, r3, #6
   138ba:	6013      	str	r3, [r2, #0]
   138bc:	4b5b      	ldr	r3, [pc, #364]	; (13a2c <getTrngSource+0x490>)
   138be:	6019      	str	r1, [r3, #0]
   138c0:	9906      	ldr	r1, [sp, #24]
   138c2:	f8db 2000 	ldr.w	r2, [fp]
   138c6:	020b      	lsls	r3, r1, #8
   138c8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   138cc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   138d0:	4313      	orrs	r3, r2
   138d2:	f8cb 3000 	str.w	r3, [fp]
   138d6:	e67f      	b.n	135d8 <getTrngSource+0x3c>
   138d8:	2303      	movs	r3, #3
   138da:	9301      	str	r3, [sp, #4]
   138dc:	e6f7      	b.n	136ce <getTrngSource+0x132>
   138de:	9b03      	ldr	r3, [sp, #12]
   138e0:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
   138e4:	f63f af61 	bhi.w	137aa <getTrngSource+0x20e>
   138e8:	e9dd 7c04 	ldrd	r7, ip, [sp, #16]
   138ec:	4620      	mov	r0, r4
   138ee:	4623      	mov	r3, r4
   138f0:	696e      	ldr	r6, [r5, #20]
   138f2:	e004      	b.n	138fe <getTrngSource+0x362>
   138f4:	2001      	movs	r0, #1
   138f6:	3301      	adds	r3, #1
   138f8:	4563      	cmp	r3, ip
   138fa:	4614      	mov	r4, r2
   138fc:	d815      	bhi.n	1392a <getTrngSource+0x38e>
   138fe:	095a      	lsrs	r2, r3, #5
   13900:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
   13904:	f003 011f 	and.w	r1, r3, #31
   13908:	40ca      	lsrs	r2, r1
   1390a:	291f      	cmp	r1, #31
   1390c:	bf18      	it	ne
   1390e:	f002 0201 	andne.w	r2, r2, #1
   13912:	2b00      	cmp	r3, #0
   13914:	d0ee      	beq.n	138f4 <getTrngSource+0x358>
   13916:	42a2      	cmp	r2, r4
   13918:	d1ec      	bne.n	138f4 <getTrngSource+0x358>
   1391a:	3001      	adds	r0, #1
   1391c:	4286      	cmp	r6, r0
   1391e:	d1ea      	bne.n	138f6 <getTrngSource+0x35a>
   13920:	4849      	ldr	r0, [pc, #292]	; (13a48 <getTrngSource+0x4ac>)
   13922:	e00b      	b.n	1393c <getTrngSource+0x3a0>
   13924:	2302      	movs	r3, #2
   13926:	9301      	str	r3, [sp, #4]
   13928:	e6d1      	b.n	136ce <getTrngSource+0x132>
   1392a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1392e:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
   13932:	69aa      	ldr	r2, [r5, #24]
   13934:	f7ff fdf4 	bl	13520 <LLF_RND_AdaptiveProportionTest>
   13938:	2800      	cmp	r0, #0
   1393a:	d05d      	beq.n	139f8 <getTrngSource+0x45c>
   1393c:	2300      	movs	r3, #0
   1393e:	9a18      	ldr	r2, [sp, #96]	; 0x60
   13940:	6013      	str	r3, [r2, #0]
   13942:	e6a3      	b.n	1368c <getTrngSource+0xf0>
   13944:	4629      	mov	r1, r5
   13946:	9806      	ldr	r0, [sp, #24]
   13948:	f000 f8e2 	bl	13b10 <LLF_RND_GetRoscSampleCnt>
   1394c:	2800      	cmp	r0, #0
   1394e:	f47f ae7c 	bne.w	1364a <getTrngSource+0xae>
   13952:	9c06      	ldr	r4, [sp, #24]
   13954:	2c08      	cmp	r4, #8
   13956:	d051      	beq.n	139fc <getTrngSource+0x460>
   13958:	2c04      	cmp	r4, #4
   1395a:	d051      	beq.n	13a00 <getTrngSource+0x464>
   1395c:	f1a4 0402 	sub.w	r4, r4, #2
   13960:	fab4 f484 	clz	r4, r4
   13964:	0964      	lsrs	r4, r4, #5
   13966:	2301      	movs	r3, #1
   13968:	461e      	mov	r6, r3
   1396a:	4619      	mov	r1, r3
   1396c:	4a2d      	ldr	r2, [pc, #180]	; (13a24 <getTrngSource+0x488>)
   1396e:	6013      	str	r3, [r2, #0]
   13970:	f842 3c84 	str.w	r3, [r2, #-132]
   13974:	4b2b      	ldr	r3, [pc, #172]	; (13a24 <getTrngSource+0x488>)
   13976:	6019      	str	r1, [r3, #0]
   13978:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1397a:	f8c9 3000 	str.w	r3, [r9]
   1397e:	f8d9 2000 	ldr.w	r2, [r9]
   13982:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   13984:	429a      	cmp	r2, r3
   13986:	d1f5      	bne.n	13974 <getTrngSource+0x3d8>
   13988:	2700      	movs	r7, #0
   1398a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1398e:	f8ca 7000 	str.w	r7, [sl]
   13992:	f7ff faef 	bl	12f74 <CC_HalClearInterruptBit>
   13996:	4b26      	ldr	r3, [pc, #152]	; (13a30 <getTrngSource+0x494>)
   13998:	4a26      	ldr	r2, [pc, #152]	; (13a34 <getTrngSource+0x498>)
   1399a:	4638      	mov	r0, r7
   1399c:	601a      	str	r2, [r3, #0]
   1399e:	f7ff faf7 	bl	12f90 <CC_HalMaskInterrupt>
   139a2:	220a      	movs	r2, #10
   139a4:	4924      	ldr	r1, [pc, #144]	; (13a38 <getTrngSource+0x49c>)
   139a6:	4b25      	ldr	r3, [pc, #148]	; (13a3c <getTrngSource+0x4a0>)
   139a8:	600c      	str	r4, [r1, #0]
   139aa:	601a      	str	r2, [r3, #0]
   139ac:	692a      	ldr	r2, [r5, #16]
   139ae:	4924      	ldr	r1, [pc, #144]	; (13a40 <getTrngSource+0x4a4>)
   139b0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   139b2:	fba1 1202 	umull	r1, r2, r1, r2
   139b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   139ba:	0912      	lsrs	r2, r2, #4
   139bc:	03db      	lsls	r3, r3, #15
   139be:	fb03 f302 	mul.w	r3, r3, r2
   139c2:	4a20      	ldr	r2, [pc, #128]	; (13a44 <getTrngSource+0x4a8>)
   139c4:	099b      	lsrs	r3, r3, #6
   139c6:	6013      	str	r3, [r2, #0]
   139c8:	f8ca 6000 	str.w	r6, [sl]
   139cc:	9b06      	ldr	r3, [sp, #24]
   139ce:	f8db 1000 	ldr.w	r1, [fp]
   139d2:	021a      	lsls	r2, r3, #8
   139d4:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
   139d8:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
   139dc:	431a      	orrs	r2, r3
   139de:	0a13      	lsrs	r3, r2, #8
   139e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   139e4:	4313      	orrs	r3, r2
   139e6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   139ea:	f8cb 3000 	str.w	r3, [fp]
   139ee:	9b02      	ldr	r3, [sp, #8]
   139f0:	3b01      	subs	r3, #1
   139f2:	9302      	str	r3, [sp, #8]
   139f4:	f47f ae07 	bne.w	13606 <getTrngSource+0x6a>
   139f8:	2000      	movs	r0, #0
   139fa:	e629      	b.n	13650 <getTrngSource+0xb4>
   139fc:	2403      	movs	r4, #3
   139fe:	e7b2      	b.n	13966 <getTrngSource+0x3ca>
   13a00:	2402      	movs	r4, #2
   13a02:	e7b0      	b.n	13966 <getTrngSource+0x3ca>
   13a04:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   13a08:	f8d3 1c0c 	ldr.w	r1, [r3, #3084]	; 0xc0c
   13a0c:	3101      	adds	r1, #1
   13a0e:	d006      	beq.n	13a1e <getTrngSource+0x482>
   13a10:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
   13a14:	e745      	b.n	138a2 <getTrngSource+0x306>
   13a16:	2703      	movs	r7, #3
   13a18:	e71a      	b.n	13850 <getTrngSource+0x2b4>
   13a1a:	2702      	movs	r7, #2
   13a1c:	e718      	b.n	13850 <getTrngSource+0x2b4>
   13a1e:	2316      	movs	r3, #22
   13a20:	e743      	b.n	138aa <getTrngSource+0x30e>
   13a22:	bf00      	nop
   13a24:	508411c4 	.word	0x508411c4
   13a28:	50841140 	.word	0x50841140
   13a2c:	5084112c 	.word	0x5084112c
   13a30:	50841100 	.word	0x50841100
   13a34:	0ffffffe 	.word	0x0ffffffe
   13a38:	5084110c 	.word	0x5084110c
   13a3c:	50841138 	.word	0x50841138
   13a40:	aaaaaaab 	.word	0xaaaaaaab
   13a44:	508411d8 	.word	0x508411d8
   13a48:	00f10c36 	.word	0x00f10c36

00013a4c <LLF_RND_GetTrngSource>:
   13a4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13a50:	4c1b      	ldr	r4, [pc, #108]	; (13ac0 <LLF_RND_GetTrngSource+0x74>)
   13a52:	b085      	sub	sp, #20
   13a54:	4607      	mov	r7, r0
   13a56:	e9dd 560d 	ldrd	r5, r6, [sp, #52]	; 0x34
   13a5a:	4688      	mov	r8, r1
   13a5c:	6820      	ldr	r0, [r4, #0]
   13a5e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   13a62:	4691      	mov	r9, r2
   13a64:	f7ff fa10 	bl	12e88 <CC_PalMutexLock>
   13a68:	bb28      	cbnz	r0, 13ab6 <LLF_RND_GetTrngSource+0x6a>
   13a6a:	2000      	movs	r0, #0
   13a6c:	f7ff fa3c 	bl	12ee8 <CC_PalPowerSaveModeSelect>
   13a70:	b9e8      	cbnz	r0, 13aae <LLF_RND_GetTrngSource+0x62>
   13a72:	2300      	movs	r3, #0
   13a74:	e9cd 5600 	strd	r5, r6, [sp]
   13a78:	9302      	str	r3, [sp, #8]
   13a7a:	464a      	mov	r2, r9
   13a7c:	4641      	mov	r1, r8
   13a7e:	4638      	mov	r0, r7
   13a80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13a82:	f7ff fd8b 	bl	1359c <getTrngSource>
   13a86:	4605      	mov	r5, r0
   13a88:	2001      	movs	r0, #1
   13a8a:	f7ff fa2d 	bl	12ee8 <CC_PalPowerSaveModeSelect>
   13a8e:	b950      	cbnz	r0, 13aa6 <LLF_RND_GetTrngSource+0x5a>
   13a90:	6820      	ldr	r0, [r4, #0]
   13a92:	f7ff fa01 	bl	12e98 <CC_PalMutexUnlock>
   13a96:	b110      	cbz	r0, 13a9e <LLF_RND_GetTrngSource+0x52>
   13a98:	480a      	ldr	r0, [pc, #40]	; (13ac4 <LLF_RND_GetTrngSource+0x78>)
   13a9a:	f7ff fb8d 	bl	131b8 <CC_PalAbort>
   13a9e:	4628      	mov	r0, r5
   13aa0:	b005      	add	sp, #20
   13aa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13aa6:	4808      	ldr	r0, [pc, #32]	; (13ac8 <LLF_RND_GetTrngSource+0x7c>)
   13aa8:	f7ff fb86 	bl	131b8 <CC_PalAbort>
   13aac:	e7f0      	b.n	13a90 <LLF_RND_GetTrngSource+0x44>
   13aae:	4807      	ldr	r0, [pc, #28]	; (13acc <LLF_RND_GetTrngSource+0x80>)
   13ab0:	f7ff fb82 	bl	131b8 <CC_PalAbort>
   13ab4:	e7dd      	b.n	13a72 <LLF_RND_GetTrngSource+0x26>
   13ab6:	4806      	ldr	r0, [pc, #24]	; (13ad0 <LLF_RND_GetTrngSource+0x84>)
   13ab8:	f7ff fb7e 	bl	131b8 <CC_PalAbort>
   13abc:	e7d5      	b.n	13a6a <LLF_RND_GetTrngSource+0x1e>
   13abe:	bf00      	nop
   13ac0:	20001420 	.word	0x20001420
   13ac4:	00014878 	.word	0x00014878
   13ac8:	000148b0 	.word	0x000148b0
   13acc:	00014890 	.word	0x00014890
   13ad0:	00014860 	.word	0x00014860

00013ad4 <LLF_RND_RunTrngStartupTest>:
   13ad4:	b510      	push	{r4, lr}
   13ad6:	2401      	movs	r4, #1
   13ad8:	b086      	sub	sp, #24
   13ada:	ab05      	add	r3, sp, #20
   13adc:	e9cd 2401 	strd	r2, r4, [sp, #4]
   13ae0:	9300      	str	r3, [sp, #0]
   13ae2:	2200      	movs	r2, #0
   13ae4:	ab04      	add	r3, sp, #16
   13ae6:	f7ff fd59 	bl	1359c <getTrngSource>
   13aea:	b006      	add	sp, #24
   13aec:	bd10      	pop	{r4, pc}
   13aee:	bf00      	nop

00013af0 <LLF_RND_WaitRngInterrupt>:
   13af0:	b508      	push	{r3, lr}
   13af2:	4601      	mov	r1, r0
   13af4:	f44f 6080 	mov.w	r0, #1024	; 0x400
   13af8:	f7ff fa50 	bl	12f9c <CC_HalWaitInterruptRND>
   13afc:	2300      	movs	r3, #0
   13afe:	4902      	ldr	r1, [pc, #8]	; (13b08 <LLF_RND_WaitRngInterrupt+0x18>)
   13b00:	4a02      	ldr	r2, [pc, #8]	; (13b0c <LLF_RND_WaitRngInterrupt+0x1c>)
   13b02:	600b      	str	r3, [r1, #0]
   13b04:	6013      	str	r3, [r2, #0]
   13b06:	bd08      	pop	{r3, pc}
   13b08:	508411c8 	.word	0x508411c8
   13b0c:	5084112c 	.word	0x5084112c

00013b10 <LLF_RND_GetRoscSampleCnt>:
   13b10:	3801      	subs	r0, #1
   13b12:	2807      	cmp	r0, #7
   13b14:	d815      	bhi.n	13b42 <LLF_RND_GetRoscSampleCnt+0x32>
   13b16:	e8df f000 	tbb	[pc, r0]
   13b1a:	0c10      	.short	0x0c10
   13b1c:	14140814 	.word	0x14140814
   13b20:	0414      	.short	0x0414
   13b22:	68cb      	ldr	r3, [r1, #12]
   13b24:	2000      	movs	r0, #0
   13b26:	624b      	str	r3, [r1, #36]	; 0x24
   13b28:	4770      	bx	lr
   13b2a:	688b      	ldr	r3, [r1, #8]
   13b2c:	2000      	movs	r0, #0
   13b2e:	624b      	str	r3, [r1, #36]	; 0x24
   13b30:	4770      	bx	lr
   13b32:	684b      	ldr	r3, [r1, #4]
   13b34:	2000      	movs	r0, #0
   13b36:	624b      	str	r3, [r1, #36]	; 0x24
   13b38:	4770      	bx	lr
   13b3a:	680b      	ldr	r3, [r1, #0]
   13b3c:	2000      	movs	r0, #0
   13b3e:	624b      	str	r3, [r1, #36]	; 0x24
   13b40:	4770      	bx	lr
   13b42:	4801      	ldr	r0, [pc, #4]	; (13b48 <LLF_RND_GetRoscSampleCnt+0x38>)
   13b44:	4770      	bx	lr
   13b46:	bf00      	nop
   13b48:	00f10c31 	.word	0x00f10c31

00013b4c <LLF_RND_GetFastestRosc>:
   13b4c:	680b      	ldr	r3, [r1, #0]
   13b4e:	e002      	b.n	13b56 <LLF_RND_GetFastestRosc+0xa>
   13b50:	2b08      	cmp	r3, #8
   13b52:	600b      	str	r3, [r1, #0]
   13b54:	d806      	bhi.n	13b64 <LLF_RND_GetFastestRosc+0x18>
   13b56:	6a02      	ldr	r2, [r0, #32]
   13b58:	4213      	tst	r3, r2
   13b5a:	ea4f 0343 	mov.w	r3, r3, lsl #1
   13b5e:	d0f7      	beq.n	13b50 <LLF_RND_GetFastestRosc+0x4>
   13b60:	2000      	movs	r0, #0
   13b62:	4770      	bx	lr
   13b64:	4800      	ldr	r0, [pc, #0]	; (13b68 <LLF_RND_GetFastestRosc+0x1c>)
   13b66:	4770      	bx	lr
   13b68:	00f10c31 	.word	0x00f10c31

00013b6c <LLF_RND_TurnOffTrng>:
   13b6c:	2300      	movs	r3, #0
   13b6e:	4904      	ldr	r1, [pc, #16]	; (13b80 <LLF_RND_TurnOffTrng+0x14>)
   13b70:	4a04      	ldr	r2, [pc, #16]	; (13b84 <LLF_RND_TurnOffTrng+0x18>)
   13b72:	600b      	str	r3, [r1, #0]
   13b74:	f44f 6080 	mov.w	r0, #1024	; 0x400
   13b78:	6013      	str	r3, [r2, #0]
   13b7a:	f7ff b9fb 	b.w	12f74 <CC_HalClearInterruptBit>
   13b7e:	bf00      	nop
   13b80:	5084112c 	.word	0x5084112c
   13b84:	508411c4 	.word	0x508411c4

00013b88 <main>:
 *  0 kB  |---------------------|
 */


void main(void)
{
   13b88:	b508      	push	{r3, lr}
	spm_config();
   13b8a:	f7fd fa27 	bl	10fdc <spm_config>
	spm_jump();
}
   13b8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	spm_jump();
   13b92:	f7fd b9b7 	b.w	10f04 <spm_jump>

00013b96 <z_sys_mem_pool_base_init>:
{
	int i;
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);

	p->max_inline_level = -1;
   13b96:	23ff      	movs	r3, #255	; 0xff
{
   13b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   13b9c:	6846      	ldr	r6, [r0, #4]
	p->max_inline_level = -1;
   13b9e:	72c3      	strb	r3, [r0, #11]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   13ba0:	4632      	mov	r2, r6

	for (i = 0; i < p->n_levels; i++) {
   13ba2:	2300      	movs	r3, #0
		int nblocks = buflen / sz;

		sys_dlist_init(&p->levels[i].free_list);
   13ba4:	f04f 090c 	mov.w	r9, #12
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   13ba8:	8907      	ldrh	r7, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   13baa:	6801      	ldr	r1, [r0, #0]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   13bac:	fb06 fc07 	mul.w	ip, r6, r7
	for (i = 0; i < p->n_levels; i++) {
   13bb0:	f890 800a 	ldrb.w	r8, [r0, #10]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   13bb4:	4461      	add	r1, ip
	for (i = 0; i < p->n_levels; i++) {
   13bb6:	4598      	cmp	r8, r3
   13bb8:	dc05      	bgt.n	13bc6 <z_sys_mem_pool_base_init+0x30>
   13bba:	2300      	movs	r3, #0
		}

		sz = WB_DN(sz / 4);
	}

	for (i = 0; i < p->n_max; i++) {
   13bbc:	4619      	mov	r1, r3
   13bbe:	428f      	cmp	r7, r1
   13bc0:	dc20      	bgt.n	13c04 <z_sys_mem_pool_base_init+0x6e>
		void *block = block_ptr(p, p->max_sz, i);

		sys_dlist_append(&p->levels[0].free_list, block);
	}
}
   13bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		int nblocks = buflen / sz;
   13bc6:	fbbc f5f2 	udiv	r5, ip, r2
		sys_dlist_init(&p->levels[i].free_list);
   13bca:	fb09 fe03 	mul.w	lr, r9, r3
   13bce:	f8d0 a00c 	ldr.w	sl, [r0, #12]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   13bd2:	2d20      	cmp	r5, #32
		sys_dlist_init(&p->levels[i].free_list);
   13bd4:	eb0a 040e 	add.w	r4, sl, lr
   13bd8:	f104 0b04 	add.w	fp, r4, #4
   13bdc:	e9c4 bb01 	strd	fp, fp, [r4, #4]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   13be0:	d805      	bhi.n	13bee <z_sys_mem_pool_base_init+0x58>
			p->max_inline_level = i;
   13be2:	72c3      	strb	r3, [r0, #11]
		sz = WB_DN(sz / 4);
   13be4:	0892      	lsrs	r2, r2, #2
   13be6:	f022 0203 	bic.w	r2, r2, #3
	for (i = 0; i < p->n_levels; i++) {
   13bea:	3301      	adds	r3, #1
   13bec:	e7e3      	b.n	13bb6 <z_sys_mem_pool_base_init+0x20>
			bits += (nblocks + 31)/32;
   13bee:	f115 041f 	adds.w	r4, r5, #31
   13bf2:	bf48      	it	mi
   13bf4:	f105 043e 	addmi.w	r4, r5, #62	; 0x3e
   13bf8:	1164      	asrs	r4, r4, #5
			p->levels[i].bits_p = bits;
   13bfa:	f84a 100e 	str.w	r1, [sl, lr]
			bits += (nblocks + 31)/32;
   13bfe:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   13c02:	e7ef      	b.n	13be4 <z_sys_mem_pool_base_init+0x4e>
		sys_dlist_append(&p->levels[0].free_list, block);
   13c04:	68c2      	ldr	r2, [r0, #12]
	return (u8_t *)p->buf + lsz * block;
   13c06:	6805      	ldr	r5, [r0, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
   13c08:	f102 0c04 	add.w	ip, r2, #4
	return (u8_t *)p->buf + lsz * block;
   13c0c:	18ec      	adds	r4, r5, r3
	node->next = list;
   13c0e:	f845 c003 	str.w	ip, [r5, r3]
	node->prev = list->tail;
   13c12:	6895      	ldr	r5, [r2, #8]
	for (i = 0; i < p->n_max; i++) {
   13c14:	3101      	adds	r1, #1
   13c16:	6065      	str	r5, [r4, #4]
	list->tail->next = node;
   13c18:	6895      	ldr	r5, [r2, #8]
   13c1a:	4433      	add	r3, r6
   13c1c:	602c      	str	r4, [r5, #0]
	list->tail = node;
   13c1e:	6094      	str	r4, [r2, #8]
   13c20:	e7cd      	b.n	13bbe <z_sys_mem_pool_base_init+0x28>

00013c22 <arch_printk_char_out>:
}
   13c22:	2000      	movs	r0, #0
   13c24:	4770      	bx	lr

00013c26 <print_err>:
{
   13c26:	b570      	push	{r4, r5, r6, lr}
   13c28:	460d      	mov	r5, r1
   13c2a:	4604      	mov	r4, r0
	out('E', ctx);
   13c2c:	2045      	movs	r0, #69	; 0x45
   13c2e:	47a0      	blx	r4
	out('R', ctx);
   13c30:	4629      	mov	r1, r5
   13c32:	2052      	movs	r0, #82	; 0x52
   13c34:	47a0      	blx	r4
	out('R', ctx);
   13c36:	4629      	mov	r1, r5
   13c38:	4623      	mov	r3, r4
}
   13c3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
   13c3e:	2052      	movs	r0, #82	; 0x52
   13c40:	4718      	bx	r3

00013c42 <printk>:
{
   13c42:	b40f      	push	{r0, r1, r2, r3}
   13c44:	b507      	push	{r0, r1, r2, lr}
   13c46:	a904      	add	r1, sp, #16
   13c48:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   13c4c:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   13c4e:	f7fc ff93 	bl	10b78 <vprintk>
}
   13c52:	b003      	add	sp, #12
   13c54:	f85d eb04 	ldr.w	lr, [sp], #4
   13c58:	b004      	add	sp, #16
   13c5a:	4770      	bx	lr

00013c5c <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   13c5c:	4604      	mov	r4, r0
   13c5e:	b508      	push	{r3, lr}
   13c60:	4608      	mov	r0, r1
   13c62:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   13c64:	461a      	mov	r2, r3
   13c66:	47a0      	blx	r4
	return z_impl_k_current_get();
   13c68:	f7fe ff28 	bl	12abc <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   13c6c:	f7fd fe10 	bl	11890 <z_impl_k_thread_abort>

00013c70 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   13c70:	4770      	bx	lr

00013c72 <z_platform_init>:
	nrfx_coredep_delay_us(time_us);
}

void z_platform_init(void)
{
	SystemInit();
   13c72:	f7fe b99f 	b.w	11fb4 <SystemInit>

00013c76 <get_status>:
	if (data->started) {
   13c76:	220c      	movs	r2, #12
	data = get_sub_data(dev, type);
   13c78:	6883      	ldr	r3, [r0, #8]
	return &data->subsys[type];
   13c7a:	b2c9      	uxtb	r1, r1
	if (data->started) {
   13c7c:	fb02 3101 	mla	r1, r2, r1, r3
   13c80:	7a4b      	ldrb	r3, [r1, #9]
   13c82:	b923      	cbnz	r3, 13c8e <get_status+0x18>
	if (data->ref > 0) {
   13c84:	7a08      	ldrb	r0, [r1, #8]
		return CLOCK_CONTROL_STATUS_ON;
   13c86:	fab0 f080 	clz	r0, r0
   13c8a:	0940      	lsrs	r0, r0, #5
   13c8c:	4770      	bx	lr
   13c8e:	2002      	movs	r0, #2
}
   13c90:	4770      	bx	lr

00013c92 <clock_stop>:
	const struct nrf_clock_control_config *config =
   13c92:	6802      	ldr	r2, [r0, #0]
{
   13c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct nrf_clock_control_config *config =
   13c96:	6897      	ldr	r7, [r2, #8]
	data = get_sub_data(dev, type);
   13c98:	6886      	ldr	r6, [r0, #8]
   13c9a:	b2cc      	uxtb	r4, r1
   13c9c:	f04f 0320 	mov.w	r3, #32
   13ca0:	f3ef 8511 	mrs	r5, BASEPRI
   13ca4:	f383 8811 	msr	BASEPRI, r3
   13ca8:	f3bf 8f6f 	isb	sy
	if (data->ref == 0) {
   13cac:	220c      	movs	r2, #12
   13cae:	4362      	muls	r2, r4
   13cb0:	18b1      	adds	r1, r6, r2
   13cb2:	7a0b      	ldrb	r3, [r1, #8]
   13cb4:	b31b      	cbz	r3, 13cfe <clock_stop+0x6c>
	data->ref--;
   13cb6:	3b01      	subs	r3, #1
   13cb8:	b2db      	uxtb	r3, r3
   13cba:	720b      	strb	r3, [r1, #8]
	if (data->ref == 0) {
   13cbc:	bb13      	cbnz	r3, 13d04 <clock_stop+0x72>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   13cbe:	50b3      	str	r3, [r6, r2]
		do_stop =  (config->stop_handler) ?
   13cc0:	443a      	add	r2, r7
	list->tail = NULL;
   13cc2:	604b      	str	r3, [r1, #4]
   13cc4:	6853      	ldr	r3, [r2, #4]
				config->stop_handler(dev) : true;
   13cc6:	b9b3      	cbnz	r3, 13cf6 <clock_stop+0x64>
			nrf_clock_task_trigger(NRF_CLOCK, config->stop_tsk);
   13cc8:	230c      	movs	r3, #12
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13cca:	2101      	movs	r1, #1
   13ccc:	fb03 7304 	mla	r3, r3, r4, r7
   13cd0:	7ada      	ldrb	r2, [r3, #11]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13cd2:	891b      	ldrh	r3, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13cd4:	f102 2250 	add.w	r2, r2, #1342197760	; 0x50005000
   13cd8:	6011      	str	r1, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13cda:	2200      	movs	r2, #0
   13cdc:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
   13ce0:	601a      	str	r2, [r3, #0]
		data->started = false;
   13ce2:	210c      	movs	r1, #12
   13ce4:	2000      	movs	r0, #0
   13ce6:	fb01 6404 	mla	r4, r1, r4, r6
   13cea:	7260      	strb	r0, [r4, #9]
	__asm__ volatile(
   13cec:	f385 8811 	msr	BASEPRI, r5
   13cf0:	f3bf 8f6f 	isb	sy
}
   13cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				config->stop_handler(dev) : true;
   13cf6:	4798      	blx	r3
   13cf8:	2800      	cmp	r0, #0
   13cfa:	d1e5      	bne.n	13cc8 <clock_stop+0x36>
   13cfc:	e7f1      	b.n	13ce2 <clock_stop+0x50>
		err = -EALREADY;
   13cfe:	f06f 0044 	mvn.w	r0, #68	; 0x44
   13d02:	e7f3      	b.n	13cec <clock_stop+0x5a>
	int err = 0;
   13d04:	2000      	movs	r0, #0
   13d06:	e7f1      	b.n	13cec <clock_stop+0x5a>

00013d08 <clkstarted_handle>:
{
   13d08:	b538      	push	{r3, r4, r5, lr}
	sub_data->started = true;
   13d0a:	230c      	movs	r3, #12
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   13d0c:	6884      	ldr	r4, [r0, #8]
{
   13d0e:	4605      	mov	r5, r0
	sub_data->started = true;
   13d10:	fb03 4401 	mla	r4, r3, r1, r4
   13d14:	2301      	movs	r3, #1
   13d16:	7263      	strb	r3, [r4, #9]
	__asm__ volatile(
   13d18:	f04f 0320 	mov.w	r3, #32
   13d1c:	f3ef 8111 	mrs	r1, BASEPRI
   13d20:	f383 8811 	msr	BASEPRI, r3
   13d24:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_slist_is_empty(sys_slist_t *list);

Z_GENLIST_IS_EMPTY(slist)
   13d28:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   13d2a:	b12b      	cbz	r3, 13d38 <clkstarted_handle+0x30>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   13d2c:	6860      	ldr	r0, [r4, #4]
   13d2e:	681a      	ldr	r2, [r3, #0]
   13d30:	4283      	cmp	r3, r0
	list->head = node;
   13d32:	6022      	str	r2, [r4, #0]
	list->tail = node;
   13d34:	bf08      	it	eq
   13d36:	6062      	streq	r2, [r4, #4]
	__asm__ volatile(
   13d38:	f381 8811 	msr	BASEPRI, r1
   13d3c:	f3bf 8f6f 	isb	sy
	while ((async_data = list_get(&sub_data->list)) != NULL) {
   13d40:	b903      	cbnz	r3, 13d44 <clkstarted_handle+0x3c>
}
   13d42:	bd38      	pop	{r3, r4, r5, pc}
		async_data->cb(dev, async_data->user_data);
   13d44:	4628      	mov	r0, r5
   13d46:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   13d4a:	4790      	blx	r2
   13d4c:	e7e4      	b.n	13d18 <clkstarted_handle+0x10>

00013d4e <clock_async_start>:
	const struct nrf_clock_control_config *config =
   13d4e:	6803      	ldr	r3, [r0, #0]
{
   13d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	clk_data = get_sub_data(dev, type);
   13d54:	f8d0 c008 	ldr.w	ip, [r0, #8]
{
   13d58:	4605      	mov	r5, r0
	const struct nrf_clock_control_config *config =
   13d5a:	689f      	ldr	r7, [r3, #8]
	return &config->subsys[type];
   13d5c:	b2ce      	uxtb	r6, r1
	if ((data != NULL)
   13d5e:	b14a      	cbz	r2, 13d74 <clock_async_start+0x26>
	sys_snode_t *item = sys_slist_peek_head(list);
   13d60:	230c      	movs	r3, #12
   13d62:	4373      	muls	r3, r6
   13d64:	f85c 3003 	ldr.w	r3, [ip, r3]
		if (item == node) {
   13d68:	429a      	cmp	r2, r3
   13d6a:	d05c      	beq.n	13e26 <clock_async_start+0xd8>
Z_GENLIST_PEEK_NEXT(slist, snode)
   13d6c:	b113      	cbz	r3, 13d74 <clock_async_start+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   13d6e:	681b      	ldr	r3, [r3, #0]
	} while (item);
   13d70:	2b00      	cmp	r3, #0
   13d72:	d1f9      	bne.n	13d68 <clock_async_start+0x1a>
	__asm__ volatile(
   13d74:	f04f 0320 	mov.w	r3, #32
   13d78:	f3ef 8011 	mrs	r0, BASEPRI
   13d7c:	f383 8811 	msr	BASEPRI, r3
   13d80:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
   13d84:	210c      	movs	r1, #12
   13d86:	4371      	muls	r1, r6
   13d88:	eb0c 0301 	add.w	r3, ip, r1
   13d8c:	7a1c      	ldrb	r4, [r3, #8]
   13d8e:	3401      	adds	r4, #1
   13d90:	b2e4      	uxtb	r4, r4
   13d92:	721c      	strb	r4, [r3, #8]
	__asm__ volatile(
   13d94:	f380 8811 	msr	BASEPRI, r0
   13d98:	f3bf 8f6f 	isb	sy
	if (data) {
   13d9c:	b332      	cbz	r2, 13dec <clock_async_start+0x9e>
    p_reg->INTENCLR = mask;
   13d9e:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
   13da2:	f04f 0e03 	mov.w	lr, #3
   13da6:	f8c0 e308 	str.w	lr, [r0, #776]	; 0x308
		already_started = clk_data->started;
   13daa:	7a58      	ldrb	r0, [r3, #9]
		if (!already_started) {
   13dac:	b9a0      	cbnz	r0, 13dd8 <clock_async_start+0x8a>
	__asm__ volatile(
   13dae:	f04f 0e20 	mov.w	lr, #32
   13db2:	f3ef 8811 	mrs	r8, BASEPRI
   13db6:	f38e 8811 	msr	BASEPRI, lr
   13dba:	f3bf 8f6f 	isb	sy
	parent->next = child;
   13dbe:	6010      	str	r0, [r2, #0]
Z_GENLIST_APPEND(slist, snode)
   13dc0:	f8d3 e004 	ldr.w	lr, [r3, #4]
   13dc4:	f1be 0f00 	cmp.w	lr, #0
   13dc8:	d120      	bne.n	13e0c <clock_async_start+0xbe>
	list->tail = node;
   13dca:	605a      	str	r2, [r3, #4]
	list->head = node;
   13dcc:	f84c 2001 	str.w	r2, [ip, r1]
	__asm__ volatile(
   13dd0:	f388 8811 	msr	BASEPRI, r8
   13dd4:	f3bf 8f6f 	isb	sy
    p_reg->INTENSET = mask;
   13dd8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   13ddc:	2103      	movs	r1, #3
   13dde:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
		if (already_started) {
   13de2:	b118      	cbz	r0, 13dec <clock_async_start+0x9e>
			data->cb(dev, data->user_data);
   13de4:	e9d2 3101 	ldrd	r3, r1, [r2, #4]
   13de8:	4628      	mov	r0, r5
   13dea:	4798      	blx	r3
	if (ref == 1) {
   13dec:	2c01      	cmp	r4, #1
   13dee:	d10b      	bne.n	13e08 <clock_async_start+0xba>
		do_start =  (config->start_handler) ?
   13df0:	230c      	movs	r3, #12
   13df2:	4373      	muls	r3, r6
   13df4:	58fb      	ldr	r3, [r7, r3]
				config->start_handler(dev) : true;
   13df6:	b96b      	cbnz	r3, 13e14 <clock_async_start+0xc6>
			nrf_clock_task_trigger(NRF_CLOCK,
   13df8:	210c      	movs	r1, #12
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13dfa:	2201      	movs	r2, #1
   13dfc:	fb01 7606 	mla	r6, r1, r6, r7
   13e00:	7ab3      	ldrb	r3, [r6, #10]
   13e02:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
   13e06:	601a      	str	r2, [r3, #0]
	return 0;
   13e08:	2000      	movs	r0, #0
   13e0a:	e00e      	b.n	13e2a <clock_async_start+0xdc>
	parent->next = child;
   13e0c:	f8ce 2000 	str.w	r2, [lr]
	list->tail = node;
   13e10:	605a      	str	r2, [r3, #4]
}
   13e12:	e7dd      	b.n	13dd0 <clock_async_start+0x82>
				config->start_handler(dev) : true;
   13e14:	4628      	mov	r0, r5
   13e16:	4798      	blx	r3
   13e18:	2800      	cmp	r0, #0
   13e1a:	d1ed      	bne.n	13df8 <clock_async_start+0xaa>
			clkstarted_handle(dev, type);
   13e1c:	4631      	mov	r1, r6
   13e1e:	4628      	mov	r0, r5
   13e20:	f7ff ff72 	bl	13d08 <clkstarted_handle>
   13e24:	e7f0      	b.n	13e08 <clock_async_start+0xba>
		return -EBUSY;
   13e26:	f06f 000f 	mvn.w	r0, #15
}
   13e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00013e2e <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
   13e2e:	2200      	movs	r2, #0
   13e30:	f7ff bf8d 	b.w	13d4e <clock_async_start>

00013e34 <clk_init>:
{
   13e34:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
   13e36:	2200      	movs	r2, #0
{
   13e38:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
   13e3a:	2101      	movs	r1, #1
   13e3c:	2005      	movs	r0, #5
   13e3e:	f7fd fb35 	bl	114ac <z_arm_irq_priority_set>
	irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
   13e42:	2005      	movs	r0, #5
   13e44:	f7fd fb22 	bl	1148c <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
   13e48:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   13e4c:	2202      	movs	r2, #2
   13e4e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
   13e52:	2203      	movs	r2, #3
	list->head = NULL;
   13e54:	2000      	movs	r0, #0
   13e56:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		sys_slist_init(&(get_sub_data(dev, i)->list));
   13e5a:	68a3      	ldr	r3, [r4, #8]
	list->tail = NULL;
   13e5c:	e9c3 0000 	strd	r0, r0, [r3]
   13e60:	68a3      	ldr	r3, [r4, #8]
   13e62:	e9c3 0003 	strd	r0, r0, [r3, #12]
}
   13e66:	bd10      	pop	{r4, pc}

00013e68 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   13e68:	4770      	bx	lr

00013e6a <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   13e6a:	4770      	bx	lr

00013e6c <spm_secure_services_init>:
	mbedtls_platform_context platform_ctx = {0};
   13e6c:	2300      	movs	r3, #0
{
   13e6e:	b507      	push	{r0, r1, r2, lr}
	err = mbedtls_platform_setup(&platform_ctx);
   13e70:	a801      	add	r0, sp, #4
	mbedtls_platform_context platform_ctx = {0};
   13e72:	f88d 3004 	strb.w	r3, [sp, #4]
	err = mbedtls_platform_setup(&platform_ctx);
   13e76:	f7ff f8af 	bl	12fd8 <mbedtls_platform_setup>
}
   13e7a:	b003      	add	sp, #12
   13e7c:	f85d fb04 	ldr.w	pc, [sp], #4

00013e80 <__acle_se_spm_request_random_number>:
	if (len != MBEDTLS_ENTROPY_MAX_GATHER) {
   13e80:	2990      	cmp	r1, #144	; 0x90
{
   13e82:	b508      	push	{r3, lr}
   13e84:	4613      	mov	r3, r2
	if (len != MBEDTLS_ENTROPY_MAX_GATHER) {
   13e86:	d139      	bne.n	13efc <__acle_se_spm_request_random_number+0x7c>
	err = mbedtls_hardware_poll(NULL, output, len, olen);
   13e88:	460a      	mov	r2, r1
   13e8a:	4601      	mov	r1, r0
   13e8c:	2000      	movs	r0, #0
   13e8e:	f7ff f8af 	bl	12ff0 <mbedtls_hardware_poll>
}
   13e92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   13e96:	4671      	mov	r1, lr
   13e98:	4672      	mov	r2, lr
   13e9a:	4673      	mov	r3, lr
   13e9c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   13ea0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
   13ea4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
   13ea8:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
   13eac:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
   13eb0:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
   13eb4:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
   13eb8:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
   13ebc:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
   13ec0:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
   13ec4:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
   13ec8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
   13ecc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   13ed0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   13ed4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   13ed8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   13edc:	f38e 8c00 	msr	CPSR_fs, lr
   13ee0:	b410      	push	{r4}
   13ee2:	eef1 ca10 	vmrs	ip, fpscr
   13ee6:	f64f 7460 	movw	r4, #65376	; 0xff60
   13eea:	f6c0 74ff 	movt	r4, #4095	; 0xfff
   13eee:	ea0c 0c04 	and.w	ip, ip, r4
   13ef2:	eee1 ca10 	vmsr	fpscr, ip
   13ef6:	bc10      	pop	{r4}
   13ef8:	46f4      	mov	ip, lr
   13efa:	4774      	bxns	lr
		return -EINVAL;
   13efc:	f06f 0015 	mvn.w	r0, #21
   13f00:	e7c7      	b.n	13e92 <__acle_se_spm_request_random_number+0x12>

00013f02 <abort_function>:
	while(1);
   13f02:	e7fe      	b.n	13f02 <abort_function>

00013f04 <z_irq_spurious>:
 * @return N/A
 */
void z_irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	z_arm_reserved();
   13f04:	f7fd bb38 	b.w	11578 <z_arm_bus_fault>

00013f08 <irq_target_state_set>:
 *
 * @return N/A
 */
void irq_target_state_set(unsigned int irq, int secure_state)
{
	if (secure_state) {
   13f08:	b243      	sxtb	r3, r0
   13f0a:	b1a9      	cbz	r1, 13f38 <irq_target_state_set+0x30>
  if ((int32_t)(IRQn) >= 0)
   13f0c:	2b00      	cmp	r3, #0
   13f0e:	db12      	blt.n	13f36 <irq_target_state_set+0x2e>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] &= ~((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
   13f10:	2101      	movs	r1, #1
   13f12:	095b      	lsrs	r3, r3, #5
   13f14:	009b      	lsls	r3, r3, #2
   13f16:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   13f1a:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   13f1e:	f8d3 2280 	ldr.w	r2, [r3, #640]	; 0x280
   13f22:	f000 001f 	and.w	r0, r0, #31
   13f26:	fa01 f000 	lsl.w	r0, r1, r0
   13f2a:	ea22 0000 	bic.w	r0, r2, r0
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
   13f2e:	f8c3 0280 	str.w	r0, [r3, #640]	; 0x280
    return((uint32_t)(((NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
   13f32:	f8d3 3280 	ldr.w	r3, [r3, #640]	; 0x280
		/* Set target state to Non-Secure */
		if (NVIC_SetTargetState(irq) != 1) {
			__ASSERT(0, "NVIC SetTargetState error");
		}
	}
}
   13f36:	4770      	bx	lr
  if ((int32_t)(IRQn) >= 0)
   13f38:	2b00      	cmp	r3, #0
   13f3a:	dbfc      	blt.n	13f36 <irq_target_state_set+0x2e>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
   13f3c:	2201      	movs	r2, #1
   13f3e:	095b      	lsrs	r3, r3, #5
   13f40:	009b      	lsls	r3, r3, #2
   13f42:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   13f46:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   13f4a:	f8d3 1280 	ldr.w	r1, [r3, #640]	; 0x280
   13f4e:	f000 001f 	and.w	r0, r0, #31
   13f52:	fa02 f000 	lsl.w	r0, r2, r0
   13f56:	4308      	orrs	r0, r1
   13f58:	e7e9      	b.n	13f2e <irq_target_state_set+0x26>

00013f5a <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   13f5a:	f000 b908 	b.w	1416e <z_fatal_error>

00013f5e <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   13f5e:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   13f60:	6800      	ldr	r0, [r0, #0]
   13f62:	f000 b904 	b.w	1416e <z_fatal_error>

00013f66 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   13f66:	b508      	push	{r3, lr}
	handler();
   13f68:	f7fd fb10 	bl	1158c <z_SysNmiOnReset>
	z_arm_exc_exit();
}
   13f6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
   13f70:	f7fd ba2a 	b.w	113c8 <z_arm_exc_exit>

00013f74 <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   13f74:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
   13f76:	2100      	movs	r1, #0
   13f78:	a801      	add	r0, sp, #4
   13f7a:	f7fd fe27 	bl	11bcc <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
   13f7e:	b003      	add	sp, #12
   13f80:	f85d fb04 	ldr.w	pc, [sp], #4

00013f84 <mpu_configure_region>:
{
   13f84:	b530      	push	{r4, r5, lr}
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   13f86:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
   13f88:	680c      	ldr	r4, [r1, #0]
{
   13f8a:	b085      	sub	sp, #20
	p_attr->rbar = attr->rbar &
   13f8c:	890a      	ldrh	r2, [r1, #8]
   13f8e:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
   13f90:	9400      	str	r4, [sp, #0]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   13f92:	3b01      	subs	r3, #1
   13f94:	f024 041f 	bic.w	r4, r4, #31
   13f98:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   13f9a:	f002 021f 	and.w	r2, r2, #31
   13f9e:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   13fa2:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
   13fa6:	280f      	cmp	r0, #15
   13fa8:	4604      	mov	r4, r0
	p_attr->rbar = attr->rbar &
   13faa:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   13fae:	9303      	str	r3, [sp, #12]
   13fb0:	d805      	bhi.n	13fbe <mpu_configure_region+0x3a>
	region_init(index, region_conf);
   13fb2:	4669      	mov	r1, sp
   13fb4:	f7fd fcbc 	bl	11930 <region_init>
}
   13fb8:	4620      	mov	r0, r4
   13fba:	b005      	add	sp, #20
   13fbc:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   13fbe:	f06f 0415 	mvn.w	r4, #21
	return region_allocate_and_init(index,
   13fc2:	e7f9      	b.n	13fb8 <mpu_configure_region+0x34>

00013fc4 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   13fc4:	e840 f000 	tt	r0, r0
   13fc8:	b2c3      	uxtb	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   13fca:	f410 3f80 	tst.w	r0, #65536	; 0x10000
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   13fce:	bf14      	ite	ne
   13fd0:	4618      	movne	r0, r3
   13fd2:	f06f 0015 	mvneq.w	r0, #21
   13fd6:	4770      	bx	lr

00013fd8 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   13fd8:	3801      	subs	r0, #1
   13fda:	3901      	subs	r1, #1
   13fdc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   13fe0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   13fe4:	4293      	cmp	r3, r2
   13fe6:	d101      	bne.n	13fec <strcmp+0x14>
   13fe8:	2b00      	cmp	r3, #0
   13fea:	d1f7      	bne.n	13fdc <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   13fec:	1a98      	subs	r0, r3, r2
   13fee:	4770      	bx	lr

00013ff0 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   13ff0:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   13ff2:	b15a      	cbz	r2, 1400c <memcmp+0x1c>
   13ff4:	3901      	subs	r1, #1
   13ff6:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   13ff8:	f810 2b01 	ldrb.w	r2, [r0], #1
   13ffc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   14000:	42a0      	cmp	r0, r4
   14002:	d001      	beq.n	14008 <memcmp+0x18>
   14004:	429a      	cmp	r2, r3
   14006:	d0f7      	beq.n	13ff8 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   14008:	1ad0      	subs	r0, r2, r3
}
   1400a:	bd10      	pop	{r4, pc}
		return 0;
   1400c:	4610      	mov	r0, r2
   1400e:	e7fc      	b.n	1400a <memcmp+0x1a>

00014010 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   14010:	1a43      	subs	r3, r0, r1
   14012:	4293      	cmp	r3, r2
{
   14014:	b510      	push	{r4, lr}
   14016:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   1401a:	d308      	bcc.n	1402e <memmove+0x1e>
	char *dest = d;
   1401c:	4602      	mov	r2, r0
   1401e:	3901      	subs	r1, #1
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   14020:	429a      	cmp	r2, r3
   14022:	d00b      	beq.n	1403c <memmove+0x2c>
			*dest = *src;
   14024:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   14028:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
   1402c:	e7f8      	b.n	14020 <memmove+0x10>
   1402e:	440a      	add	r2, r1
			dest[n] = src[n];
   14030:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
		while (n > 0) {
   14034:	428a      	cmp	r2, r1
			dest[n] = src[n];
   14036:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
   1403a:	d1f9      	bne.n	14030 <memmove+0x20>
		}
	}

	return d;
}
   1403c:	bd10      	pop	{r4, pc}

0001403e <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   1403e:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   14040:	ea81 0400 	eor.w	r4, r1, r0
   14044:	07a5      	lsls	r5, r4, #30
   14046:	4603      	mov	r3, r0
   14048:	d00b      	beq.n	14062 <memcpy+0x24>
   1404a:	3b01      	subs	r3, #1
   1404c:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   1404e:	4291      	cmp	r1, r2
   14050:	d11b      	bne.n	1408a <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   14052:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   14054:	2a00      	cmp	r2, #0
   14056:	d0fc      	beq.n	14052 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   14058:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
   1405c:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
   1405e:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
   14062:	079c      	lsls	r4, r3, #30
   14064:	d1f6      	bne.n	14054 <memcpy+0x16>
   14066:	f022 0403 	bic.w	r4, r2, #3
   1406a:	1f1d      	subs	r5, r3, #4
   1406c:	0896      	lsrs	r6, r2, #2
   1406e:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   14070:	42b9      	cmp	r1, r7
   14072:	d105      	bne.n	14080 <memcpy+0x42>
   14074:	f06f 0503 	mvn.w	r5, #3
   14078:	4423      	add	r3, r4
   1407a:	fb05 2206 	mla	r2, r5, r6, r2
   1407e:	e7e4      	b.n	1404a <memcpy+0xc>
			*(d_word++) = *(s_word++);
   14080:	f851 cb04 	ldr.w	ip, [r1], #4
   14084:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   14088:	e7f2      	b.n	14070 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   1408a:	f811 4b01 	ldrb.w	r4, [r1], #1
   1408e:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   14092:	e7dc      	b.n	1404e <memcpy+0x10>

00014094 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   14094:	4603      	mov	r3, r0
{
   14096:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
   14098:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   1409a:	079c      	lsls	r4, r3, #30
   1409c:	d111      	bne.n	140c2 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   1409e:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   140a2:	f022 0603 	bic.w	r6, r2, #3
   140a6:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   140aa:	441e      	add	r6, r3
   140ac:	0894      	lsrs	r4, r2, #2
   140ae:	42b3      	cmp	r3, r6
   140b0:	d10d      	bne.n	140ce <memset+0x3a>
   140b2:	f06f 0503 	mvn.w	r5, #3
   140b6:	fb05 2204 	mla	r2, r5, r4, r2
   140ba:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   140bc:	4293      	cmp	r3, r2
   140be:	d109      	bne.n	140d4 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   140c0:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   140c2:	2a00      	cmp	r2, #0
   140c4:	d0fc      	beq.n	140c0 <memset+0x2c>
		*(d_byte++) = c_byte;
   140c6:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   140ca:	3a01      	subs	r2, #1
   140cc:	e7e5      	b.n	1409a <memset+0x6>
		*(d_word++) = c_word;
   140ce:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   140d2:	e7ec      	b.n	140ae <memset+0x1a>
		*(d_byte++) = c_byte;
   140d4:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   140d8:	e7f0      	b.n	140bc <memset+0x28>

000140da <_stdout_hook_default>:
}
   140da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   140de:	4770      	bx	lr

000140e0 <uarte_nrfx_config_get>:
{
   140e0:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   140e2:	6882      	ldr	r2, [r0, #8]
   140e4:	e892 0003 	ldmia.w	r2, {r0, r1}
   140e8:	e883 0003 	stmia.w	r3, {r0, r1}
}
   140ec:	2000      	movs	r0, #0
   140ee:	4770      	bx	lr

000140f0 <uarte_nrfx_err_check>:
	return dev->config->config_info;
   140f0:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   140f2:	689b      	ldr	r3, [r3, #8]
   140f4:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   140f6:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   140fa:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   140fe:	4770      	bx	lr

00014100 <uarte_nrfx_poll_in>:
	return dev->config->config_info;
   14100:	6803      	ldr	r3, [r0, #0]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   14102:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
   14104:	689b      	ldr	r3, [r3, #8]
   14106:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14108:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1410c:	b138      	cbz	r0, 1411e <uarte_nrfx_poll_in+0x1e>
	*c = data->rx_data;
   1410e:	7a12      	ldrb	r2, [r2, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14110:	2000      	movs	r0, #0
   14112:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14114:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14116:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1411a:	601a      	str	r2, [r3, #0]
	return 0;
   1411c:	4770      	bx	lr
		return -1;
   1411e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   14122:	4770      	bx	lr

00014124 <uarte_nrfx_poll_out>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14124:	2200      	movs	r2, #0
	return dev->config->config_info;
   14126:	6803      	ldr	r3, [r0, #0]
{
   14128:	b082      	sub	sp, #8
	return config->uarte_regs;
   1412a:	689b      	ldr	r3, [r3, #8]
{
   1412c:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
   14130:	681b      	ldr	r3, [r3, #0]
   14132:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   14136:	f10d 0207 	add.w	r2, sp, #7
   1413a:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1413e:	2201      	movs	r2, #1
   14140:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14144:	609a      	str	r2, [r3, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14146:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1414a:	2900      	cmp	r1, #0
   1414c:	d0fb      	beq.n	14146 <uarte_nrfx_poll_out+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1414e:	60da      	str	r2, [r3, #12]
}
   14150:	b002      	add	sp, #8
   14152:	4770      	bx	lr

00014154 <k_sys_fatal_error_handler>:
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
	sys_arch_reboot(0);
   14154:	2000      	movs	r0, #0
{
   14156:	b508      	push	{r3, lr}
	sys_arch_reboot(0);
   14158:	f7fd fb7c 	bl	11854 <sys_arch_reboot>

0001415c <hw_cc310_init>:
#include <nrf_cc310_platform.h>

#if CONFIG_HW_CC310

static int hw_cc310_init(struct device *dev)
{
   1415c:	b508      	push	{r3, lr}
	int res;

	__ASSERT_NO_MSG(dev != NULL);

	/* Set the RTOS abort APIs */
	nrf_cc310_platform_abort_init();
   1415e:	f7fd f89d 	bl	1129c <nrf_cc310_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc310_platform_mutex_init();
   14162:	f7fd f91b 	bl	1139c <nrf_cc310_platform_mutex_init>
	res = nrf_cc310_platform_init();
#else
	res = nrf_cc310_platform_init_no_rng();
#endif
	return res;
}
   14166:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc310_platform_init_no_rng();
   1416a:	f7fe bff9 	b.w	13160 <nrf_cc310_platform_init_no_rng>

0001416e <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1416e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   14170:	4605      	mov	r5, r0
   14172:	9101      	str	r1, [sp, #4]
	return z_impl_k_current_get();
   14174:	f7fe fca2 	bl	12abc <z_impl_k_current_get>
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
   14178:	9901      	ldr	r1, [sp, #4]
   1417a:	4604      	mov	r4, r0
   1417c:	4628      	mov	r0, r5
   1417e:	f7ff ffe9 	bl	14154 <k_sys_fatal_error_handler>
	z_impl_k_thread_abort(thread);
   14182:	4620      	mov	r0, r4
			}
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	k_thread_abort(thread);
}
   14184:	b003      	add	sp, #12
   14186:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1418a:	f7fd bb81 	b.w	11890 <z_impl_k_thread_abort>

0001418e <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   1418e:	f7ff be6c 	b.w	13e6a <z_clock_idle_exit>

00014192 <k_mem_slab_init>:
{
   14192:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   14194:	2400      	movs	r4, #0
   14196:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   14198:	ea41 0402 	orr.w	r4, r1, r2
   1419c:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   141a0:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   141a4:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   141a6:	d10c      	bne.n	141c2 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   141a8:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   141aa:	42a3      	cmp	r3, r4
   141ac:	d103      	bne.n	141b6 <k_mem_slab_init+0x24>
	list->tail = (sys_dnode_t *)list;
   141ae:	e9c0 0000 	strd	r0, r0, [r0]
}
   141b2:	2000      	movs	r0, #0
}
   141b4:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   141b6:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   141b8:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
   141ba:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
   141bc:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   141be:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   141c0:	e7f3      	b.n	141aa <k_mem_slab_init+0x18>
		return -EINVAL;
   141c2:	f06f 0015 	mvn.w	r0, #21
	return rc;
   141c6:	e7f5      	b.n	141b4 <k_mem_slab_init+0x22>

000141c8 <z_impl_k_mutex_init>:
	mutex->owner = NULL;
   141c8:	2300      	movs	r3, #0
   141ca:	e9c0 0000 	strd	r0, r0, [r0]
	mutex->lock_count = 0U;
   141ce:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   141d2:	4618      	mov	r0, r3
   141d4:	4770      	bx	lr

000141d6 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   141d6:	7b43      	ldrb	r3, [r0, #13]
   141d8:	06db      	lsls	r3, r3, #27
   141da:	bf03      	ittte	eq
   141dc:	6980      	ldreq	r0, [r0, #24]
   141de:	fab0 f080 	clzeq	r0, r0
   141e2:	0940      	lsreq	r0, r0, #5
   141e4:	2000      	movne	r0, #0
}
   141e6:	4770      	bx	lr

000141e8 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   141e8:	b921      	cbnz	r1, 141f4 <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   141ea:	f3ef 8005 	mrs	r0, IPSR
   141ee:	b908      	cbnz	r0, 141f4 <z_reschedule+0xc>
   141f0:	f7fd b8f8 	b.w	113e4 <arch_swap>
   141f4:	f381 8811 	msr	BASEPRI, r1
   141f8:	f3bf 8f6f 	isb	sy
}
   141fc:	4770      	bx	lr

000141fe <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   141fe:	4603      	mov	r3, r0
   14200:	b920      	cbnz	r0, 1420c <z_reschedule_irqlock+0xe>
   14202:	f3ef 8205 	mrs	r2, IPSR
   14206:	b90a      	cbnz	r2, 1420c <z_reschedule_irqlock+0xe>
   14208:	f7fd b8ec 	b.w	113e4 <arch_swap>
   1420c:	f383 8811 	msr	BASEPRI, r3
   14210:	f3bf 8f6f 	isb	sy
}
   14214:	4770      	bx	lr

00014216 <z_reschedule_unlocked>:
	__asm__ volatile(
   14216:	f04f 0320 	mov.w	r3, #32
   1421a:	f3ef 8011 	mrs	r0, BASEPRI
   1421e:	f383 8811 	msr	BASEPRI, r3
   14222:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   14226:	f7ff bfea 	b.w	141fe <z_reschedule_irqlock>

0001422a <z_priq_dumb_best>:
	return list->head == list;
   1422a:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1422c:	4298      	cmp	r0, r3
   1422e:	d004      	beq.n	1423a <z_priq_dumb_best+0x10>
	if (n != NULL) {
   14230:	2b00      	cmp	r3, #0
   14232:	bf38      	it	cc
   14234:	2300      	movcc	r3, #0
   14236:	4618      	mov	r0, r3
   14238:	4770      	bx	lr
	struct k_thread *thread = NULL;
   1423a:	2000      	movs	r0, #0
}
   1423c:	4770      	bx	lr

0001423e <z_thread_timeout>:
{
   1423e:	b538      	push	{r3, r4, r5, lr}
	if (thread->base.pended_on != NULL) {
   14240:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   14244:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   14246:	f1a0 0118 	sub.w	r1, r0, #24
	if (thread->base.pended_on != NULL) {
   1424a:	b1c3      	cbz	r3, 1427e <z_thread_timeout+0x40>
   1424c:	f04f 0320 	mov.w	r3, #32
   14250:	f3ef 8511 	mrs	r5, BASEPRI
   14254:	f383 8811 	msr	BASEPRI, r3
   14258:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1425c:	f850 0c10 	ldr.w	r0, [r0, #-16]
   14260:	f7fe fa16 	bl	12690 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   14264:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   14268:	f023 0302 	bic.w	r3, r3, #2
   1426c:	f804 3c0b 	strb.w	r3, [r4, #-11]
	__asm__ volatile(
   14270:	f385 8811 	msr	BASEPRI, r5
   14274:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   14278:	2300      	movs	r3, #0
   1427a:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1427e:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   14282:	4608      	mov	r0, r1
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   14284:	f023 0314 	bic.w	r3, r3, #20
   14288:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   1428c:	f7ff ffa3 	bl	141d6 <z_is_thread_ready>
   14290:	b120      	cbz	r0, 1429c <z_thread_timeout+0x5e>
}
   14292:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_add_thread_to_ready_q(thread);
   14296:	4608      	mov	r0, r1
   14298:	f7fe ba4a 	b.w	12730 <z_add_thread_to_ready_q>
   1429c:	bd38      	pop	{r3, r4, r5, pc}

0001429e <z_unpend_first_thread>:
{
   1429e:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   142a0:	f04f 0320 	mov.w	r3, #32
   142a4:	f3ef 8211 	mrs	r2, BASEPRI
   142a8:	f383 8811 	msr	BASEPRI, r3
   142ac:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   142b0:	f7ff ffbb 	bl	1422a <z_priq_dumb_best>
   142b4:	4604      	mov	r4, r0
	__asm__ volatile(
   142b6:	f382 8811 	msr	BASEPRI, r2
   142ba:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   142be:	b1c8      	cbz	r0, 142f4 <z_unpend_first_thread+0x56>
	__asm__ volatile(
   142c0:	f04f 0320 	mov.w	r3, #32
   142c4:	f3ef 8511 	mrs	r5, BASEPRI
   142c8:	f383 8811 	msr	BASEPRI, r3
   142cc:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   142d0:	4601      	mov	r1, r0
   142d2:	6880      	ldr	r0, [r0, #8]
   142d4:	f7fe f9dc 	bl	12690 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   142d8:	7b63      	ldrb	r3, [r4, #13]
   142da:	f023 0302 	bic.w	r3, r3, #2
   142de:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
   142e0:	f385 8811 	msr	BASEPRI, r5
   142e4:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   142e8:	2300      	movs	r3, #0
	return z_abort_timeout(&thread->base.timeout);
   142ea:	f104 0018 	add.w	r0, r4, #24
   142ee:	60a3      	str	r3, [r4, #8]
   142f0:	f000 f811 	bl	14316 <z_abort_timeout>
}
   142f4:	4620      	mov	r0, r4
   142f6:	bd38      	pop	{r3, r4, r5, pc}

000142f8 <z_new_thread_init>:
{
   142f8:	b510      	push	{r4, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   142fa:	9c02      	ldr	r4, [sp, #8]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;
   142fc:	7383      	strb	r3, [r0, #14]
	thread_base->user_options = (u8_t)options;
   142fe:	7304      	strb	r4, [r0, #12]

	thread_base->sched_locked = 0U;
   14300:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
   14302:	2404      	movs	r4, #4
	node->prev = NULL;
   14304:	e9c0 3306 	strd	r3, r3, [r0, #24]
	thread->fn_abort = NULL;
   14308:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
	thread->stack_info.size = (u32_t)stackSize;
   1430c:	e9c0 1216 	strd	r1, r2, [r0, #88]	; 0x58
	thread_base->thread_state = (u8_t)initial_state;
   14310:	7344      	strb	r4, [r0, #13]
	thread_base->sched_locked = 0U;
   14312:	73c3      	strb	r3, [r0, #15]
}
   14314:	bd10      	pop	{r4, pc}

00014316 <z_abort_timeout>:
{
   14316:	b510      	push	{r4, lr}
	__asm__ volatile(
   14318:	f04f 0220 	mov.w	r2, #32
   1431c:	f3ef 8411 	mrs	r4, BASEPRI
   14320:	f382 8811 	msr	BASEPRI, r2
   14324:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   14328:	6803      	ldr	r3, [r0, #0]
   1432a:	b13b      	cbz	r3, 1433c <z_abort_timeout+0x26>
			remove_timeout(to);
   1432c:	f7fe fc6c 	bl	12c08 <remove_timeout>
			ret = 0;
   14330:	2000      	movs	r0, #0
	__asm__ volatile(
   14332:	f384 8811 	msr	BASEPRI, r4
   14336:	f3bf 8f6f 	isb	sy
}
   1433a:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   1433c:	f06f 0015 	mvn.w	r0, #21
   14340:	e7f7      	b.n	14332 <z_abort_timeout+0x1c>

00014342 <z_get_next_timeout_expiry>:
{
   14342:	b510      	push	{r4, lr}
	__asm__ volatile(
   14344:	f04f 0320 	mov.w	r3, #32
   14348:	f3ef 8411 	mrs	r4, BASEPRI
   1434c:	f383 8811 	msr	BASEPRI, r3
   14350:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   14354:	f7fe fc6c 	bl	12c30 <next_timeout>
	__asm__ volatile(
   14358:	f384 8811 	msr	BASEPRI, r4
   1435c:	f3bf 8f6f 	isb	sy
}
   14360:	bd10      	pop	{r4, pc}

00014362 <z_set_timeout_expiry>:
{
   14362:	b537      	push	{r0, r1, r2, r4, r5, lr}
   14364:	4604      	mov	r4, r0
   14366:	9101      	str	r1, [sp, #4]
	__asm__ volatile(
   14368:	f04f 0320 	mov.w	r3, #32
   1436c:	f3ef 8511 	mrs	r5, BASEPRI
   14370:	f383 8811 	msr	BASEPRI, r3
   14374:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
   14378:	f7fe fc5a 	bl	12c30 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   1437c:	2801      	cmp	r0, #1
   1437e:	dd05      	ble.n	1438c <z_set_timeout_expiry+0x2a>
   14380:	42a0      	cmp	r0, r4
   14382:	9901      	ldr	r1, [sp, #4]
   14384:	dd02      	ble.n	1438c <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
   14386:	4620      	mov	r0, r4
   14388:	f7fc fcc6 	bl	10d18 <z_clock_set_timeout>
	__asm__ volatile(
   1438c:	f385 8811 	msr	BASEPRI, r5
   14390:	f3bf 8f6f 	isb	sy
}
   14394:	b003      	add	sp, #12
   14396:	bd30      	pop	{r4, r5, pc}

00014398 <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
   14398:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

00014e00 <spm_request_read-0x31e0>:
	...

00017fe0 <spm_request_read>:
   17fe0:	e97f e97f 	sg
   17fe4:	f7f9 b892 	b.w	1110c <__acle_se_spm_request_read>

00017fe8 <spm_firmware_info>:
   17fe8:	e97f e97f 	sg
   17fec:	f7f9 b8ec 	b.w	111c8 <__acle_se_spm_firmware_info>

00017ff0 <spm_request_random_number>:
   17ff0:	e97f e97f 	sg
   17ff4:	f7fb bf44 	b.w	13e80 <__acle_se_spm_request_random_number>
	...
