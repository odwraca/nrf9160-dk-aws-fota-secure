
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0001c200 <_vector_table>:
   1c200:	200272c0 	.word	0x200272c0
   1c204:	000207a9 	.word	0x000207a9
   1c208:	00033c47 	.word	0x00033c47
   1c20c:	00020631 	.word	0x00020631
   1c210:	00020631 	.word	0x00020631
   1c214:	00020631 	.word	0x00020631
   1c218:	00020631 	.word	0x00020631
   1c21c:	00020631 	.word	0x00020631
   1c220:	00020631 	.word	0x00020631
   1c224:	00020631 	.word	0x00020631
   1c228:	00020631 	.word	0x00020631
   1c22c:	00020459 	.word	0x00020459
   1c230:	00020631 	.word	0x00020631
   1c234:	00020631 	.word	0x00020631
   1c238:	00020395 	.word	0x00020395
   1c23c:	0001ff9d 	.word	0x0001ff9d

0001c240 <_irq_vector_table>:
   1c240:	00020769 00020769 00020769 00020769     i...i...i...i...
   1c250:	00020769 00020769 00020769 00020769     i...i...i...i...
   1c260:	00020769 00020769 00020769 00020769     i...i...i...i...
   1c270:	00020769 00020769 00020769 00020769     i...i...i...i...
   1c280:	00020769 00020769 00020769 00020769     i...i...i...i...
   1c290:	00020769 00020769 00020769 00020769     i...i...i...i...
   1c2a0:	00020769 00020769 00020769 00020769     i...i...i...i...
   1c2b0:	00022985 00034c0b 00020769 00020769     .)...L..i...i...
   1c2c0:	00020769 00020769 00020769 00020769     i...i...i...i...
   1c2d0:	00020769 00020769 00020769 00020769     i...i...i...i...
   1c2e0:	00020769 00020769 00034c29 00020769     i...i...)L..i...
   1c2f0:	00020769 00020769 00020769 00020769     i...i...i...i...
   1c300:	00020769 00020769 00020769 00020769     i...i...i...i...
   1c310:	00020769 00020769 00020769 00020769     i...i...i...i...
   1c320:	00020769 00020769 00020769 00020769     i...i...i...i...
   1c330:	00020769 00020769 00020769 00020769     i...i...i...i...
   1c340:	00020769                                i...

0001c344 <_vector_end>:
	...

0001c400 <m_firmware_info>:
   1c400:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
   1c410:	0001f744 00000001 0001c200 0001c200     D...............
   1c420:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0001c440 <__aeabi_drsub>:
   1c440:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   1c444:	e002      	b.n	1c44c <__adddf3>
   1c446:	bf00      	nop

0001c448 <__aeabi_dsub>:
   1c448:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001c44c <__adddf3>:
   1c44c:	b530      	push	{r4, r5, lr}
   1c44e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1c452:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1c456:	ea94 0f05 	teq	r4, r5
   1c45a:	bf08      	it	eq
   1c45c:	ea90 0f02 	teqeq	r0, r2
   1c460:	bf1f      	itttt	ne
   1c462:	ea54 0c00 	orrsne.w	ip, r4, r0
   1c466:	ea55 0c02 	orrsne.w	ip, r5, r2
   1c46a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1c46e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1c472:	f000 80e2 	beq.w	1c63a <__adddf3+0x1ee>
   1c476:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1c47a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1c47e:	bfb8      	it	lt
   1c480:	426d      	neglt	r5, r5
   1c482:	dd0c      	ble.n	1c49e <__adddf3+0x52>
   1c484:	442c      	add	r4, r5
   1c486:	ea80 0202 	eor.w	r2, r0, r2
   1c48a:	ea81 0303 	eor.w	r3, r1, r3
   1c48e:	ea82 0000 	eor.w	r0, r2, r0
   1c492:	ea83 0101 	eor.w	r1, r3, r1
   1c496:	ea80 0202 	eor.w	r2, r0, r2
   1c49a:	ea81 0303 	eor.w	r3, r1, r3
   1c49e:	2d36      	cmp	r5, #54	; 0x36
   1c4a0:	bf88      	it	hi
   1c4a2:	bd30      	pophi	{r4, r5, pc}
   1c4a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1c4a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1c4ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   1c4b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1c4b4:	d002      	beq.n	1c4bc <__adddf3+0x70>
   1c4b6:	4240      	negs	r0, r0
   1c4b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c4bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   1c4c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1c4c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   1c4c8:	d002      	beq.n	1c4d0 <__adddf3+0x84>
   1c4ca:	4252      	negs	r2, r2
   1c4cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1c4d0:	ea94 0f05 	teq	r4, r5
   1c4d4:	f000 80a7 	beq.w	1c626 <__adddf3+0x1da>
   1c4d8:	f1a4 0401 	sub.w	r4, r4, #1
   1c4dc:	f1d5 0e20 	rsbs	lr, r5, #32
   1c4e0:	db0d      	blt.n	1c4fe <__adddf3+0xb2>
   1c4e2:	fa02 fc0e 	lsl.w	ip, r2, lr
   1c4e6:	fa22 f205 	lsr.w	r2, r2, r5
   1c4ea:	1880      	adds	r0, r0, r2
   1c4ec:	f141 0100 	adc.w	r1, r1, #0
   1c4f0:	fa03 f20e 	lsl.w	r2, r3, lr
   1c4f4:	1880      	adds	r0, r0, r2
   1c4f6:	fa43 f305 	asr.w	r3, r3, r5
   1c4fa:	4159      	adcs	r1, r3
   1c4fc:	e00e      	b.n	1c51c <__adddf3+0xd0>
   1c4fe:	f1a5 0520 	sub.w	r5, r5, #32
   1c502:	f10e 0e20 	add.w	lr, lr, #32
   1c506:	2a01      	cmp	r2, #1
   1c508:	fa03 fc0e 	lsl.w	ip, r3, lr
   1c50c:	bf28      	it	cs
   1c50e:	f04c 0c02 	orrcs.w	ip, ip, #2
   1c512:	fa43 f305 	asr.w	r3, r3, r5
   1c516:	18c0      	adds	r0, r0, r3
   1c518:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1c51c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1c520:	d507      	bpl.n	1c532 <__adddf3+0xe6>
   1c522:	f04f 0e00 	mov.w	lr, #0
   1c526:	f1dc 0c00 	rsbs	ip, ip, #0
   1c52a:	eb7e 0000 	sbcs.w	r0, lr, r0
   1c52e:	eb6e 0101 	sbc.w	r1, lr, r1
   1c532:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1c536:	d31b      	bcc.n	1c570 <__adddf3+0x124>
   1c538:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1c53c:	d30c      	bcc.n	1c558 <__adddf3+0x10c>
   1c53e:	0849      	lsrs	r1, r1, #1
   1c540:	ea5f 0030 	movs.w	r0, r0, rrx
   1c544:	ea4f 0c3c 	mov.w	ip, ip, rrx
   1c548:	f104 0401 	add.w	r4, r4, #1
   1c54c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1c550:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   1c554:	f080 809a 	bcs.w	1c68c <__adddf3+0x240>
   1c558:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1c55c:	bf08      	it	eq
   1c55e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1c562:	f150 0000 	adcs.w	r0, r0, #0
   1c566:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1c56a:	ea41 0105 	orr.w	r1, r1, r5
   1c56e:	bd30      	pop	{r4, r5, pc}
   1c570:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   1c574:	4140      	adcs	r0, r0
   1c576:	eb41 0101 	adc.w	r1, r1, r1
   1c57a:	3c01      	subs	r4, #1
   1c57c:	bf28      	it	cs
   1c57e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   1c582:	d2e9      	bcs.n	1c558 <__adddf3+0x10c>
   1c584:	f091 0f00 	teq	r1, #0
   1c588:	bf04      	itt	eq
   1c58a:	4601      	moveq	r1, r0
   1c58c:	2000      	moveq	r0, #0
   1c58e:	fab1 f381 	clz	r3, r1
   1c592:	bf08      	it	eq
   1c594:	3320      	addeq	r3, #32
   1c596:	f1a3 030b 	sub.w	r3, r3, #11
   1c59a:	f1b3 0220 	subs.w	r2, r3, #32
   1c59e:	da0c      	bge.n	1c5ba <__adddf3+0x16e>
   1c5a0:	320c      	adds	r2, #12
   1c5a2:	dd08      	ble.n	1c5b6 <__adddf3+0x16a>
   1c5a4:	f102 0c14 	add.w	ip, r2, #20
   1c5a8:	f1c2 020c 	rsb	r2, r2, #12
   1c5ac:	fa01 f00c 	lsl.w	r0, r1, ip
   1c5b0:	fa21 f102 	lsr.w	r1, r1, r2
   1c5b4:	e00c      	b.n	1c5d0 <__adddf3+0x184>
   1c5b6:	f102 0214 	add.w	r2, r2, #20
   1c5ba:	bfd8      	it	le
   1c5bc:	f1c2 0c20 	rsble	ip, r2, #32
   1c5c0:	fa01 f102 	lsl.w	r1, r1, r2
   1c5c4:	fa20 fc0c 	lsr.w	ip, r0, ip
   1c5c8:	bfdc      	itt	le
   1c5ca:	ea41 010c 	orrle.w	r1, r1, ip
   1c5ce:	4090      	lslle	r0, r2
   1c5d0:	1ae4      	subs	r4, r4, r3
   1c5d2:	bfa2      	ittt	ge
   1c5d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   1c5d8:	4329      	orrge	r1, r5
   1c5da:	bd30      	popge	{r4, r5, pc}
   1c5dc:	ea6f 0404 	mvn.w	r4, r4
   1c5e0:	3c1f      	subs	r4, #31
   1c5e2:	da1c      	bge.n	1c61e <__adddf3+0x1d2>
   1c5e4:	340c      	adds	r4, #12
   1c5e6:	dc0e      	bgt.n	1c606 <__adddf3+0x1ba>
   1c5e8:	f104 0414 	add.w	r4, r4, #20
   1c5ec:	f1c4 0220 	rsb	r2, r4, #32
   1c5f0:	fa20 f004 	lsr.w	r0, r0, r4
   1c5f4:	fa01 f302 	lsl.w	r3, r1, r2
   1c5f8:	ea40 0003 	orr.w	r0, r0, r3
   1c5fc:	fa21 f304 	lsr.w	r3, r1, r4
   1c600:	ea45 0103 	orr.w	r1, r5, r3
   1c604:	bd30      	pop	{r4, r5, pc}
   1c606:	f1c4 040c 	rsb	r4, r4, #12
   1c60a:	f1c4 0220 	rsb	r2, r4, #32
   1c60e:	fa20 f002 	lsr.w	r0, r0, r2
   1c612:	fa01 f304 	lsl.w	r3, r1, r4
   1c616:	ea40 0003 	orr.w	r0, r0, r3
   1c61a:	4629      	mov	r1, r5
   1c61c:	bd30      	pop	{r4, r5, pc}
   1c61e:	fa21 f004 	lsr.w	r0, r1, r4
   1c622:	4629      	mov	r1, r5
   1c624:	bd30      	pop	{r4, r5, pc}
   1c626:	f094 0f00 	teq	r4, #0
   1c62a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1c62e:	bf06      	itte	eq
   1c630:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   1c634:	3401      	addeq	r4, #1
   1c636:	3d01      	subne	r5, #1
   1c638:	e74e      	b.n	1c4d8 <__adddf3+0x8c>
   1c63a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1c63e:	bf18      	it	ne
   1c640:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1c644:	d029      	beq.n	1c69a <__adddf3+0x24e>
   1c646:	ea94 0f05 	teq	r4, r5
   1c64a:	bf08      	it	eq
   1c64c:	ea90 0f02 	teqeq	r0, r2
   1c650:	d005      	beq.n	1c65e <__adddf3+0x212>
   1c652:	ea54 0c00 	orrs.w	ip, r4, r0
   1c656:	bf04      	itt	eq
   1c658:	4619      	moveq	r1, r3
   1c65a:	4610      	moveq	r0, r2
   1c65c:	bd30      	pop	{r4, r5, pc}
   1c65e:	ea91 0f03 	teq	r1, r3
   1c662:	bf1e      	ittt	ne
   1c664:	2100      	movne	r1, #0
   1c666:	2000      	movne	r0, #0
   1c668:	bd30      	popne	{r4, r5, pc}
   1c66a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1c66e:	d105      	bne.n	1c67c <__adddf3+0x230>
   1c670:	0040      	lsls	r0, r0, #1
   1c672:	4149      	adcs	r1, r1
   1c674:	bf28      	it	cs
   1c676:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1c67a:	bd30      	pop	{r4, r5, pc}
   1c67c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   1c680:	bf3c      	itt	cc
   1c682:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1c686:	bd30      	popcc	{r4, r5, pc}
   1c688:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1c68c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   1c690:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1c694:	f04f 0000 	mov.w	r0, #0
   1c698:	bd30      	pop	{r4, r5, pc}
   1c69a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1c69e:	bf1a      	itte	ne
   1c6a0:	4619      	movne	r1, r3
   1c6a2:	4610      	movne	r0, r2
   1c6a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   1c6a8:	bf1c      	itt	ne
   1c6aa:	460b      	movne	r3, r1
   1c6ac:	4602      	movne	r2, r0
   1c6ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1c6b2:	bf06      	itte	eq
   1c6b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   1c6b8:	ea91 0f03 	teqeq	r1, r3
   1c6bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   1c6c0:	bd30      	pop	{r4, r5, pc}
   1c6c2:	bf00      	nop

0001c6c4 <__aeabi_ui2d>:
   1c6c4:	f090 0f00 	teq	r0, #0
   1c6c8:	bf04      	itt	eq
   1c6ca:	2100      	moveq	r1, #0
   1c6cc:	4770      	bxeq	lr
   1c6ce:	b530      	push	{r4, r5, lr}
   1c6d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1c6d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1c6d8:	f04f 0500 	mov.w	r5, #0
   1c6dc:	f04f 0100 	mov.w	r1, #0
   1c6e0:	e750      	b.n	1c584 <__adddf3+0x138>
   1c6e2:	bf00      	nop

0001c6e4 <__aeabi_i2d>:
   1c6e4:	f090 0f00 	teq	r0, #0
   1c6e8:	bf04      	itt	eq
   1c6ea:	2100      	moveq	r1, #0
   1c6ec:	4770      	bxeq	lr
   1c6ee:	b530      	push	{r4, r5, lr}
   1c6f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1c6f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1c6f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1c6fc:	bf48      	it	mi
   1c6fe:	4240      	negmi	r0, r0
   1c700:	f04f 0100 	mov.w	r1, #0
   1c704:	e73e      	b.n	1c584 <__adddf3+0x138>
   1c706:	bf00      	nop

0001c708 <__aeabi_f2d>:
   1c708:	0042      	lsls	r2, r0, #1
   1c70a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1c70e:	ea4f 0131 	mov.w	r1, r1, rrx
   1c712:	ea4f 7002 	mov.w	r0, r2, lsl #28
   1c716:	bf1f      	itttt	ne
   1c718:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1c71c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1c720:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   1c724:	4770      	bxne	lr
   1c726:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   1c72a:	bf08      	it	eq
   1c72c:	4770      	bxeq	lr
   1c72e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   1c732:	bf04      	itt	eq
   1c734:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   1c738:	4770      	bxeq	lr
   1c73a:	b530      	push	{r4, r5, lr}
   1c73c:	f44f 7460 	mov.w	r4, #896	; 0x380
   1c740:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1c744:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1c748:	e71c      	b.n	1c584 <__adddf3+0x138>
   1c74a:	bf00      	nop

0001c74c <__aeabi_ul2d>:
   1c74c:	ea50 0201 	orrs.w	r2, r0, r1
   1c750:	bf08      	it	eq
   1c752:	4770      	bxeq	lr
   1c754:	b530      	push	{r4, r5, lr}
   1c756:	f04f 0500 	mov.w	r5, #0
   1c75a:	e00a      	b.n	1c772 <__aeabi_l2d+0x16>

0001c75c <__aeabi_l2d>:
   1c75c:	ea50 0201 	orrs.w	r2, r0, r1
   1c760:	bf08      	it	eq
   1c762:	4770      	bxeq	lr
   1c764:	b530      	push	{r4, r5, lr}
   1c766:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1c76a:	d502      	bpl.n	1c772 <__aeabi_l2d+0x16>
   1c76c:	4240      	negs	r0, r0
   1c76e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c772:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1c776:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1c77a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1c77e:	f43f aed8 	beq.w	1c532 <__adddf3+0xe6>
   1c782:	f04f 0203 	mov.w	r2, #3
   1c786:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1c78a:	bf18      	it	ne
   1c78c:	3203      	addne	r2, #3
   1c78e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1c792:	bf18      	it	ne
   1c794:	3203      	addne	r2, #3
   1c796:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1c79a:	f1c2 0320 	rsb	r3, r2, #32
   1c79e:	fa00 fc03 	lsl.w	ip, r0, r3
   1c7a2:	fa20 f002 	lsr.w	r0, r0, r2
   1c7a6:	fa01 fe03 	lsl.w	lr, r1, r3
   1c7aa:	ea40 000e 	orr.w	r0, r0, lr
   1c7ae:	fa21 f102 	lsr.w	r1, r1, r2
   1c7b2:	4414      	add	r4, r2
   1c7b4:	e6bd      	b.n	1c532 <__adddf3+0xe6>
   1c7b6:	bf00      	nop

0001c7b8 <__gedf2>:
   1c7b8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   1c7bc:	e006      	b.n	1c7cc <__cmpdf2+0x4>
   1c7be:	bf00      	nop

0001c7c0 <__ledf2>:
   1c7c0:	f04f 0c01 	mov.w	ip, #1
   1c7c4:	e002      	b.n	1c7cc <__cmpdf2+0x4>
   1c7c6:	bf00      	nop

0001c7c8 <__cmpdf2>:
   1c7c8:	f04f 0c01 	mov.w	ip, #1
   1c7cc:	f84d cd04 	str.w	ip, [sp, #-4]!
   1c7d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1c7d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1c7d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1c7dc:	bf18      	it	ne
   1c7de:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   1c7e2:	d01b      	beq.n	1c81c <__cmpdf2+0x54>
   1c7e4:	b001      	add	sp, #4
   1c7e6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   1c7ea:	bf0c      	ite	eq
   1c7ec:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   1c7f0:	ea91 0f03 	teqne	r1, r3
   1c7f4:	bf02      	ittt	eq
   1c7f6:	ea90 0f02 	teqeq	r0, r2
   1c7fa:	2000      	moveq	r0, #0
   1c7fc:	4770      	bxeq	lr
   1c7fe:	f110 0f00 	cmn.w	r0, #0
   1c802:	ea91 0f03 	teq	r1, r3
   1c806:	bf58      	it	pl
   1c808:	4299      	cmppl	r1, r3
   1c80a:	bf08      	it	eq
   1c80c:	4290      	cmpeq	r0, r2
   1c80e:	bf2c      	ite	cs
   1c810:	17d8      	asrcs	r0, r3, #31
   1c812:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   1c816:	f040 0001 	orr.w	r0, r0, #1
   1c81a:	4770      	bx	lr
   1c81c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1c820:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1c824:	d102      	bne.n	1c82c <__cmpdf2+0x64>
   1c826:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1c82a:	d107      	bne.n	1c83c <__cmpdf2+0x74>
   1c82c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1c830:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1c834:	d1d6      	bne.n	1c7e4 <__cmpdf2+0x1c>
   1c836:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1c83a:	d0d3      	beq.n	1c7e4 <__cmpdf2+0x1c>
   1c83c:	f85d 0b04 	ldr.w	r0, [sp], #4
   1c840:	4770      	bx	lr
   1c842:	bf00      	nop

0001c844 <__aeabi_cdrcmple>:
   1c844:	4684      	mov	ip, r0
   1c846:	4610      	mov	r0, r2
   1c848:	4662      	mov	r2, ip
   1c84a:	468c      	mov	ip, r1
   1c84c:	4619      	mov	r1, r3
   1c84e:	4663      	mov	r3, ip
   1c850:	e000      	b.n	1c854 <__aeabi_cdcmpeq>
   1c852:	bf00      	nop

0001c854 <__aeabi_cdcmpeq>:
   1c854:	b501      	push	{r0, lr}
   1c856:	f7ff ffb7 	bl	1c7c8 <__cmpdf2>
   1c85a:	2800      	cmp	r0, #0
   1c85c:	bf48      	it	mi
   1c85e:	f110 0f00 	cmnmi.w	r0, #0
   1c862:	bd01      	pop	{r0, pc}

0001c864 <__aeabi_dcmpeq>:
   1c864:	f84d ed08 	str.w	lr, [sp, #-8]!
   1c868:	f7ff fff4 	bl	1c854 <__aeabi_cdcmpeq>
   1c86c:	bf0c      	ite	eq
   1c86e:	2001      	moveq	r0, #1
   1c870:	2000      	movne	r0, #0
   1c872:	f85d fb08 	ldr.w	pc, [sp], #8
   1c876:	bf00      	nop

0001c878 <__aeabi_dcmplt>:
   1c878:	f84d ed08 	str.w	lr, [sp, #-8]!
   1c87c:	f7ff ffea 	bl	1c854 <__aeabi_cdcmpeq>
   1c880:	bf34      	ite	cc
   1c882:	2001      	movcc	r0, #1
   1c884:	2000      	movcs	r0, #0
   1c886:	f85d fb08 	ldr.w	pc, [sp], #8
   1c88a:	bf00      	nop

0001c88c <__aeabi_dcmple>:
   1c88c:	f84d ed08 	str.w	lr, [sp, #-8]!
   1c890:	f7ff ffe0 	bl	1c854 <__aeabi_cdcmpeq>
   1c894:	bf94      	ite	ls
   1c896:	2001      	movls	r0, #1
   1c898:	2000      	movhi	r0, #0
   1c89a:	f85d fb08 	ldr.w	pc, [sp], #8
   1c89e:	bf00      	nop

0001c8a0 <__aeabi_dcmpge>:
   1c8a0:	f84d ed08 	str.w	lr, [sp, #-8]!
   1c8a4:	f7ff ffce 	bl	1c844 <__aeabi_cdrcmple>
   1c8a8:	bf94      	ite	ls
   1c8aa:	2001      	movls	r0, #1
   1c8ac:	2000      	movhi	r0, #0
   1c8ae:	f85d fb08 	ldr.w	pc, [sp], #8
   1c8b2:	bf00      	nop

0001c8b4 <__aeabi_dcmpgt>:
   1c8b4:	f84d ed08 	str.w	lr, [sp, #-8]!
   1c8b8:	f7ff ffc4 	bl	1c844 <__aeabi_cdrcmple>
   1c8bc:	bf34      	ite	cc
   1c8be:	2001      	movcc	r0, #1
   1c8c0:	2000      	movcs	r0, #0
   1c8c2:	f85d fb08 	ldr.w	pc, [sp], #8
   1c8c6:	bf00      	nop

0001c8c8 <__aeabi_d2iz>:
   1c8c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1c8cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1c8d0:	d215      	bcs.n	1c8fe <__aeabi_d2iz+0x36>
   1c8d2:	d511      	bpl.n	1c8f8 <__aeabi_d2iz+0x30>
   1c8d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1c8d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1c8dc:	d912      	bls.n	1c904 <__aeabi_d2iz+0x3c>
   1c8de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1c8e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1c8e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1c8ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1c8ee:	fa23 f002 	lsr.w	r0, r3, r2
   1c8f2:	bf18      	it	ne
   1c8f4:	4240      	negne	r0, r0
   1c8f6:	4770      	bx	lr
   1c8f8:	f04f 0000 	mov.w	r0, #0
   1c8fc:	4770      	bx	lr
   1c8fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1c902:	d105      	bne.n	1c910 <__aeabi_d2iz+0x48>
   1c904:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   1c908:	bf08      	it	eq
   1c90a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   1c90e:	4770      	bx	lr
   1c910:	f04f 0000 	mov.w	r0, #0
   1c914:	4770      	bx	lr
   1c916:	bf00      	nop

0001c918 <__aeabi_uldivmod>:
   1c918:	b953      	cbnz	r3, 1c930 <__aeabi_uldivmod+0x18>
   1c91a:	b94a      	cbnz	r2, 1c930 <__aeabi_uldivmod+0x18>
   1c91c:	2900      	cmp	r1, #0
   1c91e:	bf08      	it	eq
   1c920:	2800      	cmpeq	r0, #0
   1c922:	bf1c      	itt	ne
   1c924:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   1c928:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1c92c:	f000 b96c 	b.w	1cc08 <__aeabi_idiv0>
   1c930:	f1ad 0c08 	sub.w	ip, sp, #8
   1c934:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1c938:	f000 f806 	bl	1c948 <__udivmoddi4>
   1c93c:	f8dd e004 	ldr.w	lr, [sp, #4]
   1c940:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c944:	b004      	add	sp, #16
   1c946:	4770      	bx	lr

0001c948 <__udivmoddi4>:
   1c948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c94c:	9d08      	ldr	r5, [sp, #32]
   1c94e:	4604      	mov	r4, r0
   1c950:	4688      	mov	r8, r1
   1c952:	2b00      	cmp	r3, #0
   1c954:	d17d      	bne.n	1ca52 <__udivmoddi4+0x10a>
   1c956:	428a      	cmp	r2, r1
   1c958:	4617      	mov	r7, r2
   1c95a:	d93f      	bls.n	1c9dc <__udivmoddi4+0x94>
   1c95c:	fab2 f282 	clz	r2, r2
   1c960:	b142      	cbz	r2, 1c974 <__udivmoddi4+0x2c>
   1c962:	f1c2 0020 	rsb	r0, r2, #32
   1c966:	4091      	lsls	r1, r2
   1c968:	4097      	lsls	r7, r2
   1c96a:	fa24 f000 	lsr.w	r0, r4, r0
   1c96e:	4094      	lsls	r4, r2
   1c970:	ea40 0801 	orr.w	r8, r0, r1
   1c974:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   1c978:	0c23      	lsrs	r3, r4, #16
   1c97a:	fa1f fe87 	uxth.w	lr, r7
   1c97e:	fbb8 f6fc 	udiv	r6, r8, ip
   1c982:	fb0c 8116 	mls	r1, ip, r6, r8
   1c986:	fb06 f00e 	mul.w	r0, r6, lr
   1c98a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1c98e:	4298      	cmp	r0, r3
   1c990:	d905      	bls.n	1c99e <__udivmoddi4+0x56>
   1c992:	18fb      	adds	r3, r7, r3
   1c994:	d202      	bcs.n	1c99c <__udivmoddi4+0x54>
   1c996:	4298      	cmp	r0, r3
   1c998:	f200 8124 	bhi.w	1cbe4 <__udivmoddi4+0x29c>
   1c99c:	3e01      	subs	r6, #1
   1c99e:	1a19      	subs	r1, r3, r0
   1c9a0:	b2a3      	uxth	r3, r4
   1c9a2:	fbb1 f0fc 	udiv	r0, r1, ip
   1c9a6:	fb0c 1110 	mls	r1, ip, r0, r1
   1c9aa:	fb00 fe0e 	mul.w	lr, r0, lr
   1c9ae:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   1c9b2:	45a6      	cmp	lr, r4
   1c9b4:	d905      	bls.n	1c9c2 <__udivmoddi4+0x7a>
   1c9b6:	193c      	adds	r4, r7, r4
   1c9b8:	d202      	bcs.n	1c9c0 <__udivmoddi4+0x78>
   1c9ba:	45a6      	cmp	lr, r4
   1c9bc:	f200 810f 	bhi.w	1cbde <__udivmoddi4+0x296>
   1c9c0:	3801      	subs	r0, #1
   1c9c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   1c9c6:	eba4 040e 	sub.w	r4, r4, lr
   1c9ca:	2600      	movs	r6, #0
   1c9cc:	b11d      	cbz	r5, 1c9d6 <__udivmoddi4+0x8e>
   1c9ce:	40d4      	lsrs	r4, r2
   1c9d0:	2300      	movs	r3, #0
   1c9d2:	e9c5 4300 	strd	r4, r3, [r5]
   1c9d6:	4631      	mov	r1, r6
   1c9d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c9dc:	b902      	cbnz	r2, 1c9e0 <__udivmoddi4+0x98>
   1c9de:	deff      	udf	#255	; 0xff
   1c9e0:	fab2 f282 	clz	r2, r2
   1c9e4:	2a00      	cmp	r2, #0
   1c9e6:	d150      	bne.n	1ca8a <__udivmoddi4+0x142>
   1c9e8:	1bcb      	subs	r3, r1, r7
   1c9ea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   1c9ee:	fa1f f887 	uxth.w	r8, r7
   1c9f2:	2601      	movs	r6, #1
   1c9f4:	0c21      	lsrs	r1, r4, #16
   1c9f6:	fbb3 fcfe 	udiv	ip, r3, lr
   1c9fa:	fb0e 301c 	mls	r0, lr, ip, r3
   1c9fe:	460b      	mov	r3, r1
   1ca00:	fb08 f90c 	mul.w	r9, r8, ip
   1ca04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   1ca08:	4589      	cmp	r9, r1
   1ca0a:	d90a      	bls.n	1ca22 <__udivmoddi4+0xda>
   1ca0c:	1879      	adds	r1, r7, r1
   1ca0e:	bf2c      	ite	cs
   1ca10:	2301      	movcs	r3, #1
   1ca12:	2300      	movcc	r3, #0
   1ca14:	4589      	cmp	r9, r1
   1ca16:	d902      	bls.n	1ca1e <__udivmoddi4+0xd6>
   1ca18:	2b00      	cmp	r3, #0
   1ca1a:	f000 80d9 	beq.w	1cbd0 <__udivmoddi4+0x288>
   1ca1e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   1ca22:	eba1 0109 	sub.w	r1, r1, r9
   1ca26:	b2a3      	uxth	r3, r4
   1ca28:	fbb1 f0fe 	udiv	r0, r1, lr
   1ca2c:	fb0e 1110 	mls	r1, lr, r0, r1
   1ca30:	fb08 f800 	mul.w	r8, r8, r0
   1ca34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   1ca38:	45a0      	cmp	r8, r4
   1ca3a:	d905      	bls.n	1ca48 <__udivmoddi4+0x100>
   1ca3c:	193c      	adds	r4, r7, r4
   1ca3e:	d202      	bcs.n	1ca46 <__udivmoddi4+0xfe>
   1ca40:	45a0      	cmp	r8, r4
   1ca42:	f200 80c9 	bhi.w	1cbd8 <__udivmoddi4+0x290>
   1ca46:	3801      	subs	r0, #1
   1ca48:	eba4 0408 	sub.w	r4, r4, r8
   1ca4c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   1ca50:	e7bc      	b.n	1c9cc <__udivmoddi4+0x84>
   1ca52:	428b      	cmp	r3, r1
   1ca54:	d909      	bls.n	1ca6a <__udivmoddi4+0x122>
   1ca56:	2d00      	cmp	r5, #0
   1ca58:	f000 80b1 	beq.w	1cbbe <__udivmoddi4+0x276>
   1ca5c:	2600      	movs	r6, #0
   1ca5e:	e9c5 0100 	strd	r0, r1, [r5]
   1ca62:	4630      	mov	r0, r6
   1ca64:	4631      	mov	r1, r6
   1ca66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ca6a:	fab3 f683 	clz	r6, r3
   1ca6e:	2e00      	cmp	r6, #0
   1ca70:	d146      	bne.n	1cb00 <__udivmoddi4+0x1b8>
   1ca72:	428b      	cmp	r3, r1
   1ca74:	f0c0 80a6 	bcc.w	1cbc4 <__udivmoddi4+0x27c>
   1ca78:	4282      	cmp	r2, r0
   1ca7a:	f240 80a3 	bls.w	1cbc4 <__udivmoddi4+0x27c>
   1ca7e:	4630      	mov	r0, r6
   1ca80:	2d00      	cmp	r5, #0
   1ca82:	d0a8      	beq.n	1c9d6 <__udivmoddi4+0x8e>
   1ca84:	e9c5 4800 	strd	r4, r8, [r5]
   1ca88:	e7a5      	b.n	1c9d6 <__udivmoddi4+0x8e>
   1ca8a:	4097      	lsls	r7, r2
   1ca8c:	f1c2 0320 	rsb	r3, r2, #32
   1ca90:	fa01 f002 	lsl.w	r0, r1, r2
   1ca94:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   1ca98:	40d9      	lsrs	r1, r3
   1ca9a:	fa24 f303 	lsr.w	r3, r4, r3
   1ca9e:	fa1f f887 	uxth.w	r8, r7
   1caa2:	4094      	lsls	r4, r2
   1caa4:	4303      	orrs	r3, r0
   1caa6:	fbb1 f0fe 	udiv	r0, r1, lr
   1caaa:	0c1e      	lsrs	r6, r3, #16
   1caac:	fb0e 1110 	mls	r1, lr, r0, r1
   1cab0:	fb00 fc08 	mul.w	ip, r0, r8
   1cab4:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   1cab8:	458c      	cmp	ip, r1
   1caba:	d909      	bls.n	1cad0 <__udivmoddi4+0x188>
   1cabc:	1879      	adds	r1, r7, r1
   1cabe:	bf2c      	ite	cs
   1cac0:	2601      	movcs	r6, #1
   1cac2:	2600      	movcc	r6, #0
   1cac4:	458c      	cmp	ip, r1
   1cac6:	d902      	bls.n	1cace <__udivmoddi4+0x186>
   1cac8:	2e00      	cmp	r6, #0
   1caca:	f000 8093 	beq.w	1cbf4 <__udivmoddi4+0x2ac>
   1cace:	3801      	subs	r0, #1
   1cad0:	eba1 010c 	sub.w	r1, r1, ip
   1cad4:	b29b      	uxth	r3, r3
   1cad6:	fbb1 f6fe 	udiv	r6, r1, lr
   1cada:	fb0e 1116 	mls	r1, lr, r6, r1
   1cade:	fb06 fc08 	mul.w	ip, r6, r8
   1cae2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   1cae6:	458c      	cmp	ip, r1
   1cae8:	d905      	bls.n	1caf6 <__udivmoddi4+0x1ae>
   1caea:	1879      	adds	r1, r7, r1
   1caec:	d202      	bcs.n	1caf4 <__udivmoddi4+0x1ac>
   1caee:	458c      	cmp	ip, r1
   1caf0:	f200 8087 	bhi.w	1cc02 <__udivmoddi4+0x2ba>
   1caf4:	3e01      	subs	r6, #1
   1caf6:	eba1 030c 	sub.w	r3, r1, ip
   1cafa:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   1cafe:	e779      	b.n	1c9f4 <__udivmoddi4+0xac>
   1cb00:	f1c6 0720 	rsb	r7, r6, #32
   1cb04:	fa03 f406 	lsl.w	r4, r3, r6
   1cb08:	fa02 fc06 	lsl.w	ip, r2, r6
   1cb0c:	fa01 fe06 	lsl.w	lr, r1, r6
   1cb10:	40fa      	lsrs	r2, r7
   1cb12:	fa20 f807 	lsr.w	r8, r0, r7
   1cb16:	40f9      	lsrs	r1, r7
   1cb18:	fa00 f306 	lsl.w	r3, r0, r6
   1cb1c:	4322      	orrs	r2, r4
   1cb1e:	ea48 040e 	orr.w	r4, r8, lr
   1cb22:	ea4f 4812 	mov.w	r8, r2, lsr #16
   1cb26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   1cb2a:	fa1f f982 	uxth.w	r9, r2
   1cb2e:	fbb1 faf8 	udiv	sl, r1, r8
   1cb32:	fb08 111a 	mls	r1, r8, sl, r1
   1cb36:	fb0a f009 	mul.w	r0, sl, r9
   1cb3a:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
   1cb3e:	4570      	cmp	r0, lr
   1cb40:	d90a      	bls.n	1cb58 <__udivmoddi4+0x210>
   1cb42:	eb12 0e0e 	adds.w	lr, r2, lr
   1cb46:	bf2c      	ite	cs
   1cb48:	2101      	movcs	r1, #1
   1cb4a:	2100      	movcc	r1, #0
   1cb4c:	4570      	cmp	r0, lr
   1cb4e:	d901      	bls.n	1cb54 <__udivmoddi4+0x20c>
   1cb50:	2900      	cmp	r1, #0
   1cb52:	d052      	beq.n	1cbfa <__udivmoddi4+0x2b2>
   1cb54:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   1cb58:	ebae 0e00 	sub.w	lr, lr, r0
   1cb5c:	b2a4      	uxth	r4, r4
   1cb5e:	fbbe f0f8 	udiv	r0, lr, r8
   1cb62:	fb08 ee10 	mls	lr, r8, r0, lr
   1cb66:	fb00 f909 	mul.w	r9, r0, r9
   1cb6a:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
   1cb6e:	45f1      	cmp	r9, lr
   1cb70:	d905      	bls.n	1cb7e <__udivmoddi4+0x236>
   1cb72:	eb12 0e0e 	adds.w	lr, r2, lr
   1cb76:	d201      	bcs.n	1cb7c <__udivmoddi4+0x234>
   1cb78:	45f1      	cmp	r9, lr
   1cb7a:	d838      	bhi.n	1cbee <__udivmoddi4+0x2a6>
   1cb7c:	3801      	subs	r0, #1
   1cb7e:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
   1cb82:	ebae 0e09 	sub.w	lr, lr, r9
   1cb86:	fba0 890c 	umull	r8, r9, r0, ip
   1cb8a:	45ce      	cmp	lr, r9
   1cb8c:	4641      	mov	r1, r8
   1cb8e:	464c      	mov	r4, r9
   1cb90:	d302      	bcc.n	1cb98 <__udivmoddi4+0x250>
   1cb92:	d106      	bne.n	1cba2 <__udivmoddi4+0x25a>
   1cb94:	4543      	cmp	r3, r8
   1cb96:	d204      	bcs.n	1cba2 <__udivmoddi4+0x25a>
   1cb98:	3801      	subs	r0, #1
   1cb9a:	ebb8 010c 	subs.w	r1, r8, ip
   1cb9e:	eb69 0402 	sbc.w	r4, r9, r2
   1cba2:	b315      	cbz	r5, 1cbea <__udivmoddi4+0x2a2>
   1cba4:	1a5a      	subs	r2, r3, r1
   1cba6:	eb6e 0e04 	sbc.w	lr, lr, r4
   1cbaa:	40f2      	lsrs	r2, r6
   1cbac:	fa0e f707 	lsl.w	r7, lr, r7
   1cbb0:	fa2e f306 	lsr.w	r3, lr, r6
   1cbb4:	2600      	movs	r6, #0
   1cbb6:	4317      	orrs	r7, r2
   1cbb8:	e9c5 7300 	strd	r7, r3, [r5]
   1cbbc:	e70b      	b.n	1c9d6 <__udivmoddi4+0x8e>
   1cbbe:	462e      	mov	r6, r5
   1cbc0:	4628      	mov	r0, r5
   1cbc2:	e708      	b.n	1c9d6 <__udivmoddi4+0x8e>
   1cbc4:	1a84      	subs	r4, r0, r2
   1cbc6:	eb61 0103 	sbc.w	r1, r1, r3
   1cbca:	2001      	movs	r0, #1
   1cbcc:	4688      	mov	r8, r1
   1cbce:	e757      	b.n	1ca80 <__udivmoddi4+0x138>
   1cbd0:	f1ac 0c02 	sub.w	ip, ip, #2
   1cbd4:	4439      	add	r1, r7
   1cbd6:	e724      	b.n	1ca22 <__udivmoddi4+0xda>
   1cbd8:	3802      	subs	r0, #2
   1cbda:	443c      	add	r4, r7
   1cbdc:	e734      	b.n	1ca48 <__udivmoddi4+0x100>
   1cbde:	3802      	subs	r0, #2
   1cbe0:	443c      	add	r4, r7
   1cbe2:	e6ee      	b.n	1c9c2 <__udivmoddi4+0x7a>
   1cbe4:	3e02      	subs	r6, #2
   1cbe6:	443b      	add	r3, r7
   1cbe8:	e6d9      	b.n	1c99e <__udivmoddi4+0x56>
   1cbea:	462e      	mov	r6, r5
   1cbec:	e6f3      	b.n	1c9d6 <__udivmoddi4+0x8e>
   1cbee:	3802      	subs	r0, #2
   1cbf0:	4496      	add	lr, r2
   1cbf2:	e7c4      	b.n	1cb7e <__udivmoddi4+0x236>
   1cbf4:	3802      	subs	r0, #2
   1cbf6:	4439      	add	r1, r7
   1cbf8:	e76a      	b.n	1cad0 <__udivmoddi4+0x188>
   1cbfa:	f1aa 0a02 	sub.w	sl, sl, #2
   1cbfe:	4496      	add	lr, r2
   1cc00:	e7aa      	b.n	1cb58 <__udivmoddi4+0x210>
   1cc02:	3e02      	subs	r6, #2
   1cc04:	4439      	add	r1, r7
   1cc06:	e776      	b.n	1caf6 <__udivmoddi4+0x1ae>

0001cc08 <__aeabi_idiv0>:
   1cc08:	4770      	bx	lr
   1cc0a:	bf00      	nop

0001cc0c <__aeabi_dmul>:
   1cc0c:	b570      	push	{r4, r5, r6, lr}
   1cc0e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1cc12:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1cc16:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1cc1a:	bf1d      	ittte	ne
   1cc1c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1cc20:	ea94 0f0c 	teqne	r4, ip
   1cc24:	ea95 0f0c 	teqne	r5, ip
   1cc28:	f000 f8de 	bleq	1cde8 <__aeabi_dmul+0x1dc>
   1cc2c:	442c      	add	r4, r5
   1cc2e:	ea81 0603 	eor.w	r6, r1, r3
   1cc32:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   1cc36:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   1cc3a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   1cc3e:	bf18      	it	ne
   1cc40:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   1cc44:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1cc48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1cc4c:	d038      	beq.n	1ccc0 <__aeabi_dmul+0xb4>
   1cc4e:	fba0 ce02 	umull	ip, lr, r0, r2
   1cc52:	f04f 0500 	mov.w	r5, #0
   1cc56:	fbe1 e502 	umlal	lr, r5, r1, r2
   1cc5a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1cc5e:	fbe0 e503 	umlal	lr, r5, r0, r3
   1cc62:	f04f 0600 	mov.w	r6, #0
   1cc66:	fbe1 5603 	umlal	r5, r6, r1, r3
   1cc6a:	f09c 0f00 	teq	ip, #0
   1cc6e:	bf18      	it	ne
   1cc70:	f04e 0e01 	orrne.w	lr, lr, #1
   1cc74:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   1cc78:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   1cc7c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1cc80:	d204      	bcs.n	1cc8c <__aeabi_dmul+0x80>
   1cc82:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   1cc86:	416d      	adcs	r5, r5
   1cc88:	eb46 0606 	adc.w	r6, r6, r6
   1cc8c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1cc90:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   1cc94:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   1cc98:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   1cc9c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1cca0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1cca4:	bf88      	it	hi
   1cca6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1ccaa:	d81e      	bhi.n	1ccea <__aeabi_dmul+0xde>
   1ccac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1ccb0:	bf08      	it	eq
   1ccb2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   1ccb6:	f150 0000 	adcs.w	r0, r0, #0
   1ccba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1ccbe:	bd70      	pop	{r4, r5, r6, pc}
   1ccc0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   1ccc4:	ea46 0101 	orr.w	r1, r6, r1
   1ccc8:	ea40 0002 	orr.w	r0, r0, r2
   1cccc:	ea81 0103 	eor.w	r1, r1, r3
   1ccd0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   1ccd4:	bfc2      	ittt	gt
   1ccd6:	ebd4 050c 	rsbsgt	r5, r4, ip
   1ccda:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1ccde:	bd70      	popgt	{r4, r5, r6, pc}
   1cce0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1cce4:	f04f 0e00 	mov.w	lr, #0
   1cce8:	3c01      	subs	r4, #1
   1ccea:	f300 80ab 	bgt.w	1ce44 <__aeabi_dmul+0x238>
   1ccee:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1ccf2:	bfde      	ittt	le
   1ccf4:	2000      	movle	r0, #0
   1ccf6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   1ccfa:	bd70      	pople	{r4, r5, r6, pc}
   1ccfc:	f1c4 0400 	rsb	r4, r4, #0
   1cd00:	3c20      	subs	r4, #32
   1cd02:	da35      	bge.n	1cd70 <__aeabi_dmul+0x164>
   1cd04:	340c      	adds	r4, #12
   1cd06:	dc1b      	bgt.n	1cd40 <__aeabi_dmul+0x134>
   1cd08:	f104 0414 	add.w	r4, r4, #20
   1cd0c:	f1c4 0520 	rsb	r5, r4, #32
   1cd10:	fa00 f305 	lsl.w	r3, r0, r5
   1cd14:	fa20 f004 	lsr.w	r0, r0, r4
   1cd18:	fa01 f205 	lsl.w	r2, r1, r5
   1cd1c:	ea40 0002 	orr.w	r0, r0, r2
   1cd20:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   1cd24:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1cd28:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1cd2c:	fa21 f604 	lsr.w	r6, r1, r4
   1cd30:	eb42 0106 	adc.w	r1, r2, r6
   1cd34:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1cd38:	bf08      	it	eq
   1cd3a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1cd3e:	bd70      	pop	{r4, r5, r6, pc}
   1cd40:	f1c4 040c 	rsb	r4, r4, #12
   1cd44:	f1c4 0520 	rsb	r5, r4, #32
   1cd48:	fa00 f304 	lsl.w	r3, r0, r4
   1cd4c:	fa20 f005 	lsr.w	r0, r0, r5
   1cd50:	fa01 f204 	lsl.w	r2, r1, r4
   1cd54:	ea40 0002 	orr.w	r0, r0, r2
   1cd58:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1cd5c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1cd60:	f141 0100 	adc.w	r1, r1, #0
   1cd64:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1cd68:	bf08      	it	eq
   1cd6a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1cd6e:	bd70      	pop	{r4, r5, r6, pc}
   1cd70:	f1c4 0520 	rsb	r5, r4, #32
   1cd74:	fa00 f205 	lsl.w	r2, r0, r5
   1cd78:	ea4e 0e02 	orr.w	lr, lr, r2
   1cd7c:	fa20 f304 	lsr.w	r3, r0, r4
   1cd80:	fa01 f205 	lsl.w	r2, r1, r5
   1cd84:	ea43 0302 	orr.w	r3, r3, r2
   1cd88:	fa21 f004 	lsr.w	r0, r1, r4
   1cd8c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1cd90:	fa21 f204 	lsr.w	r2, r1, r4
   1cd94:	ea20 0002 	bic.w	r0, r0, r2
   1cd98:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   1cd9c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1cda0:	bf08      	it	eq
   1cda2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1cda6:	bd70      	pop	{r4, r5, r6, pc}
   1cda8:	f094 0f00 	teq	r4, #0
   1cdac:	d10f      	bne.n	1cdce <__aeabi_dmul+0x1c2>
   1cdae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   1cdb2:	0040      	lsls	r0, r0, #1
   1cdb4:	eb41 0101 	adc.w	r1, r1, r1
   1cdb8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1cdbc:	bf08      	it	eq
   1cdbe:	3c01      	subeq	r4, #1
   1cdc0:	d0f7      	beq.n	1cdb2 <__aeabi_dmul+0x1a6>
   1cdc2:	ea41 0106 	orr.w	r1, r1, r6
   1cdc6:	f095 0f00 	teq	r5, #0
   1cdca:	bf18      	it	ne
   1cdcc:	4770      	bxne	lr
   1cdce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1cdd2:	0052      	lsls	r2, r2, #1
   1cdd4:	eb43 0303 	adc.w	r3, r3, r3
   1cdd8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   1cddc:	bf08      	it	eq
   1cdde:	3d01      	subeq	r5, #1
   1cde0:	d0f7      	beq.n	1cdd2 <__aeabi_dmul+0x1c6>
   1cde2:	ea43 0306 	orr.w	r3, r3, r6
   1cde6:	4770      	bx	lr
   1cde8:	ea94 0f0c 	teq	r4, ip
   1cdec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1cdf0:	bf18      	it	ne
   1cdf2:	ea95 0f0c 	teqne	r5, ip
   1cdf6:	d00c      	beq.n	1ce12 <__aeabi_dmul+0x206>
   1cdf8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1cdfc:	bf18      	it	ne
   1cdfe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1ce02:	d1d1      	bne.n	1cda8 <__aeabi_dmul+0x19c>
   1ce04:	ea81 0103 	eor.w	r1, r1, r3
   1ce08:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1ce0c:	f04f 0000 	mov.w	r0, #0
   1ce10:	bd70      	pop	{r4, r5, r6, pc}
   1ce12:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1ce16:	bf06      	itte	eq
   1ce18:	4610      	moveq	r0, r2
   1ce1a:	4619      	moveq	r1, r3
   1ce1c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1ce20:	d019      	beq.n	1ce56 <__aeabi_dmul+0x24a>
   1ce22:	ea94 0f0c 	teq	r4, ip
   1ce26:	d102      	bne.n	1ce2e <__aeabi_dmul+0x222>
   1ce28:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   1ce2c:	d113      	bne.n	1ce56 <__aeabi_dmul+0x24a>
   1ce2e:	ea95 0f0c 	teq	r5, ip
   1ce32:	d105      	bne.n	1ce40 <__aeabi_dmul+0x234>
   1ce34:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   1ce38:	bf1c      	itt	ne
   1ce3a:	4610      	movne	r0, r2
   1ce3c:	4619      	movne	r1, r3
   1ce3e:	d10a      	bne.n	1ce56 <__aeabi_dmul+0x24a>
   1ce40:	ea81 0103 	eor.w	r1, r1, r3
   1ce44:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1ce48:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1ce4c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1ce50:	f04f 0000 	mov.w	r0, #0
   1ce54:	bd70      	pop	{r4, r5, r6, pc}
   1ce56:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1ce5a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1ce5e:	bd70      	pop	{r4, r5, r6, pc}

0001ce60 <__aeabi_ddiv>:
   1ce60:	b570      	push	{r4, r5, r6, lr}
   1ce62:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1ce66:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1ce6a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1ce6e:	bf1d      	ittte	ne
   1ce70:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1ce74:	ea94 0f0c 	teqne	r4, ip
   1ce78:	ea95 0f0c 	teqne	r5, ip
   1ce7c:	f000 f8a7 	bleq	1cfce <__aeabi_ddiv+0x16e>
   1ce80:	eba4 0405 	sub.w	r4, r4, r5
   1ce84:	ea81 0e03 	eor.w	lr, r1, r3
   1ce88:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1ce8c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1ce90:	f000 8088 	beq.w	1cfa4 <__aeabi_ddiv+0x144>
   1ce94:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1ce98:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1ce9c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   1cea0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1cea4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   1cea8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   1ceac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   1ceb0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   1ceb4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   1ceb8:	429d      	cmp	r5, r3
   1ceba:	bf08      	it	eq
   1cebc:	4296      	cmpeq	r6, r2
   1cebe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   1cec2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   1cec6:	d202      	bcs.n	1cece <__aeabi_ddiv+0x6e>
   1cec8:	085b      	lsrs	r3, r3, #1
   1ceca:	ea4f 0232 	mov.w	r2, r2, rrx
   1cece:	1ab6      	subs	r6, r6, r2
   1ced0:	eb65 0503 	sbc.w	r5, r5, r3
   1ced4:	085b      	lsrs	r3, r3, #1
   1ced6:	ea4f 0232 	mov.w	r2, r2, rrx
   1ceda:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1cede:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   1cee2:	ebb6 0e02 	subs.w	lr, r6, r2
   1cee6:	eb75 0e03 	sbcs.w	lr, r5, r3
   1ceea:	bf22      	ittt	cs
   1ceec:	1ab6      	subcs	r6, r6, r2
   1ceee:	4675      	movcs	r5, lr
   1cef0:	ea40 000c 	orrcs.w	r0, r0, ip
   1cef4:	085b      	lsrs	r3, r3, #1
   1cef6:	ea4f 0232 	mov.w	r2, r2, rrx
   1cefa:	ebb6 0e02 	subs.w	lr, r6, r2
   1cefe:	eb75 0e03 	sbcs.w	lr, r5, r3
   1cf02:	bf22      	ittt	cs
   1cf04:	1ab6      	subcs	r6, r6, r2
   1cf06:	4675      	movcs	r5, lr
   1cf08:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1cf0c:	085b      	lsrs	r3, r3, #1
   1cf0e:	ea4f 0232 	mov.w	r2, r2, rrx
   1cf12:	ebb6 0e02 	subs.w	lr, r6, r2
   1cf16:	eb75 0e03 	sbcs.w	lr, r5, r3
   1cf1a:	bf22      	ittt	cs
   1cf1c:	1ab6      	subcs	r6, r6, r2
   1cf1e:	4675      	movcs	r5, lr
   1cf20:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1cf24:	085b      	lsrs	r3, r3, #1
   1cf26:	ea4f 0232 	mov.w	r2, r2, rrx
   1cf2a:	ebb6 0e02 	subs.w	lr, r6, r2
   1cf2e:	eb75 0e03 	sbcs.w	lr, r5, r3
   1cf32:	bf22      	ittt	cs
   1cf34:	1ab6      	subcs	r6, r6, r2
   1cf36:	4675      	movcs	r5, lr
   1cf38:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1cf3c:	ea55 0e06 	orrs.w	lr, r5, r6
   1cf40:	d018      	beq.n	1cf74 <__aeabi_ddiv+0x114>
   1cf42:	ea4f 1505 	mov.w	r5, r5, lsl #4
   1cf46:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   1cf4a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   1cf4e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1cf52:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   1cf56:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   1cf5a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1cf5e:	d1c0      	bne.n	1cee2 <__aeabi_ddiv+0x82>
   1cf60:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1cf64:	d10b      	bne.n	1cf7e <__aeabi_ddiv+0x11e>
   1cf66:	ea41 0100 	orr.w	r1, r1, r0
   1cf6a:	f04f 0000 	mov.w	r0, #0
   1cf6e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   1cf72:	e7b6      	b.n	1cee2 <__aeabi_ddiv+0x82>
   1cf74:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1cf78:	bf04      	itt	eq
   1cf7a:	4301      	orreq	r1, r0
   1cf7c:	2000      	moveq	r0, #0
   1cf7e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1cf82:	bf88      	it	hi
   1cf84:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1cf88:	f63f aeaf 	bhi.w	1ccea <__aeabi_dmul+0xde>
   1cf8c:	ebb5 0c03 	subs.w	ip, r5, r3
   1cf90:	bf04      	itt	eq
   1cf92:	ebb6 0c02 	subseq.w	ip, r6, r2
   1cf96:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1cf9a:	f150 0000 	adcs.w	r0, r0, #0
   1cf9e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1cfa2:	bd70      	pop	{r4, r5, r6, pc}
   1cfa4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   1cfa8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   1cfac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   1cfb0:	bfc2      	ittt	gt
   1cfb2:	ebd4 050c 	rsbsgt	r5, r4, ip
   1cfb6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1cfba:	bd70      	popgt	{r4, r5, r6, pc}
   1cfbc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1cfc0:	f04f 0e00 	mov.w	lr, #0
   1cfc4:	3c01      	subs	r4, #1
   1cfc6:	e690      	b.n	1ccea <__aeabi_dmul+0xde>
   1cfc8:	ea45 0e06 	orr.w	lr, r5, r6
   1cfcc:	e68d      	b.n	1ccea <__aeabi_dmul+0xde>
   1cfce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1cfd2:	ea94 0f0c 	teq	r4, ip
   1cfd6:	bf08      	it	eq
   1cfd8:	ea95 0f0c 	teqeq	r5, ip
   1cfdc:	f43f af3b 	beq.w	1ce56 <__aeabi_dmul+0x24a>
   1cfe0:	ea94 0f0c 	teq	r4, ip
   1cfe4:	d10a      	bne.n	1cffc <__aeabi_ddiv+0x19c>
   1cfe6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1cfea:	f47f af34 	bne.w	1ce56 <__aeabi_dmul+0x24a>
   1cfee:	ea95 0f0c 	teq	r5, ip
   1cff2:	f47f af25 	bne.w	1ce40 <__aeabi_dmul+0x234>
   1cff6:	4610      	mov	r0, r2
   1cff8:	4619      	mov	r1, r3
   1cffa:	e72c      	b.n	1ce56 <__aeabi_dmul+0x24a>
   1cffc:	ea95 0f0c 	teq	r5, ip
   1d000:	d106      	bne.n	1d010 <__aeabi_ddiv+0x1b0>
   1d002:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1d006:	f43f aefd 	beq.w	1ce04 <__aeabi_dmul+0x1f8>
   1d00a:	4610      	mov	r0, r2
   1d00c:	4619      	mov	r1, r3
   1d00e:	e722      	b.n	1ce56 <__aeabi_dmul+0x24a>
   1d010:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1d014:	bf18      	it	ne
   1d016:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1d01a:	f47f aec5 	bne.w	1cda8 <__aeabi_dmul+0x19c>
   1d01e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   1d022:	f47f af0d 	bne.w	1ce40 <__aeabi_dmul+0x234>
   1d026:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   1d02a:	f47f aeeb 	bne.w	1ce04 <__aeabi_dmul+0x1f8>
   1d02e:	e712      	b.n	1ce56 <__aeabi_dmul+0x24a>

0001d030 <__aeabi_d2uiz>:
   1d030:	004a      	lsls	r2, r1, #1
   1d032:	d211      	bcs.n	1d058 <__aeabi_d2uiz+0x28>
   1d034:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1d038:	d211      	bcs.n	1d05e <__aeabi_d2uiz+0x2e>
   1d03a:	d50d      	bpl.n	1d058 <__aeabi_d2uiz+0x28>
   1d03c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1d040:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1d044:	d40e      	bmi.n	1d064 <__aeabi_d2uiz+0x34>
   1d046:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1d04a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1d04e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1d052:	fa23 f002 	lsr.w	r0, r3, r2
   1d056:	4770      	bx	lr
   1d058:	f04f 0000 	mov.w	r0, #0
   1d05c:	4770      	bx	lr
   1d05e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1d062:	d102      	bne.n	1d06a <__aeabi_d2uiz+0x3a>
   1d064:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d068:	4770      	bx	lr
   1d06a:	f04f 0000 	mov.w	r0, #0
   1d06e:	4770      	bx	lr

0001d070 <__aeabi_d2lz>:
   1d070:	b538      	push	{r3, r4, r5, lr}
   1d072:	2200      	movs	r2, #0
   1d074:	2300      	movs	r3, #0
   1d076:	4604      	mov	r4, r0
   1d078:	460d      	mov	r5, r1
   1d07a:	f7ff fbfd 	bl	1c878 <__aeabi_dcmplt>
   1d07e:	b928      	cbnz	r0, 1d08c <__aeabi_d2lz+0x1c>
   1d080:	4620      	mov	r0, r4
   1d082:	4629      	mov	r1, r5
   1d084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1d088:	f000 b80a 	b.w	1d0a0 <__aeabi_d2ulz>
   1d08c:	4620      	mov	r0, r4
   1d08e:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   1d092:	f000 f805 	bl	1d0a0 <__aeabi_d2ulz>
   1d096:	4240      	negs	r0, r0
   1d098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1d09c:	bd38      	pop	{r3, r4, r5, pc}
   1d09e:	bf00      	nop

0001d0a0 <__aeabi_d2ulz>:
   1d0a0:	b5d0      	push	{r4, r6, r7, lr}
   1d0a2:	2200      	movs	r2, #0
   1d0a4:	4b0b      	ldr	r3, [pc, #44]	; (1d0d4 <__aeabi_d2ulz+0x34>)
   1d0a6:	4606      	mov	r6, r0
   1d0a8:	460f      	mov	r7, r1
   1d0aa:	f7ff fdaf 	bl	1cc0c <__aeabi_dmul>
   1d0ae:	f7ff ffbf 	bl	1d030 <__aeabi_d2uiz>
   1d0b2:	4604      	mov	r4, r0
   1d0b4:	f7ff fb06 	bl	1c6c4 <__aeabi_ui2d>
   1d0b8:	2200      	movs	r2, #0
   1d0ba:	4b07      	ldr	r3, [pc, #28]	; (1d0d8 <__aeabi_d2ulz+0x38>)
   1d0bc:	f7ff fda6 	bl	1cc0c <__aeabi_dmul>
   1d0c0:	4602      	mov	r2, r0
   1d0c2:	460b      	mov	r3, r1
   1d0c4:	4630      	mov	r0, r6
   1d0c6:	4639      	mov	r1, r7
   1d0c8:	f7ff f9be 	bl	1c448 <__aeabi_dsub>
   1d0cc:	f7ff ffb0 	bl	1d030 <__aeabi_d2uiz>
   1d0d0:	4621      	mov	r1, r4
   1d0d2:	bdd0      	pop	{r4, r6, r7, pc}
   1d0d4:	3df00000 	.word	0x3df00000
   1d0d8:	41f00000 	.word	0x41f00000

0001d0dc <strcmp>:
   1d0dc:	f810 2b01 	ldrb.w	r2, [r0], #1
   1d0e0:	f811 3b01 	ldrb.w	r3, [r1], #1
   1d0e4:	2a01      	cmp	r2, #1
   1d0e6:	bf28      	it	cs
   1d0e8:	429a      	cmpcs	r2, r3
   1d0ea:	d0f7      	beq.n	1d0dc <strcmp>
   1d0ec:	1ad0      	subs	r0, r2, r3
   1d0ee:	4770      	bx	lr

0001d0f0 <strlen>:
   1d0f0:	4603      	mov	r3, r0
   1d0f2:	f813 2b01 	ldrb.w	r2, [r3], #1
   1d0f6:	2a00      	cmp	r2, #0
   1d0f8:	d1fb      	bne.n	1d0f2 <strlen+0x2>
   1d0fa:	1a18      	subs	r0, r3, r0
   1d0fc:	3801      	subs	r0, #1
   1d0fe:	4770      	bx	lr

0001d100 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
   1d100:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d104:	4605      	mov	r5, r0
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   1d106:	460c      	mov	r4, r1
{
   1d108:	b093      	sub	sp, #76	; 0x4c
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   1d10a:	b909      	cbnz	r1, 1d110 <parse_value+0x10>
    if (head != NULL)
    {
        cJSON_Delete(head);
    }

    return false;
   1d10c:	2000      	movs	r0, #0
   1d10e:	e025      	b.n	1d15c <parse_value+0x5c>
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   1d110:	6808      	ldr	r0, [r1, #0]
   1d112:	2800      	cmp	r0, #0
   1d114:	d0fa      	beq.n	1d10c <parse_value+0xc>
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
   1d116:	688b      	ldr	r3, [r1, #8]
   1d118:	6862      	ldr	r2, [r4, #4]
   1d11a:	1d19      	adds	r1, r3, #4
   1d11c:	4291      	cmp	r1, r2
   1d11e:	d80c      	bhi.n	1d13a <parse_value+0x3a>
   1d120:	2204      	movs	r2, #4
   1d122:	4991      	ldr	r1, [pc, #580]	; (1d368 <parse_value+0x268>)
   1d124:	4418      	add	r0, r3
   1d126:	f018 fe2b 	bl	35d80 <strncmp>
   1d12a:	b930      	cbnz	r0, 1d13a <parse_value+0x3a>
        item->type = cJSON_NULL;
   1d12c:	2304      	movs	r3, #4
   1d12e:	60eb      	str	r3, [r5, #12]
        input_buffer->offset += 4;
   1d130:	68a3      	ldr	r3, [r4, #8]
   1d132:	3304      	adds	r3, #4
    return true;
   1d134:	2001      	movs	r0, #1
    input_buffer->offset++;
   1d136:	60a3      	str	r3, [r4, #8]
    return true;
   1d138:	e010      	b.n	1d15c <parse_value+0x5c>
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
   1d13a:	68a3      	ldr	r3, [r4, #8]
   1d13c:	6862      	ldr	r2, [r4, #4]
   1d13e:	1d59      	adds	r1, r3, #5
   1d140:	4291      	cmp	r1, r2
   1d142:	d80e      	bhi.n	1d162 <parse_value+0x62>
   1d144:	6820      	ldr	r0, [r4, #0]
   1d146:	2205      	movs	r2, #5
   1d148:	4988      	ldr	r1, [pc, #544]	; (1d36c <parse_value+0x26c>)
   1d14a:	4418      	add	r0, r3
   1d14c:	f018 fe18 	bl	35d80 <strncmp>
   1d150:	b938      	cbnz	r0, 1d162 <parse_value+0x62>
        item->type = cJSON_False;
   1d152:	2001      	movs	r0, #1
        input_buffer->offset += 5;
   1d154:	68a2      	ldr	r2, [r4, #8]
        item->type = cJSON_False;
   1d156:	60e8      	str	r0, [r5, #12]
        input_buffer->offset += 5;
   1d158:	3205      	adds	r2, #5
        input_buffer->offset += 4;
   1d15a:	60a2      	str	r2, [r4, #8]
}
   1d15c:	b013      	add	sp, #76	; 0x4c
   1d15e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
   1d162:	68a3      	ldr	r3, [r4, #8]
   1d164:	6862      	ldr	r2, [r4, #4]
   1d166:	1d19      	adds	r1, r3, #4
   1d168:	4291      	cmp	r1, r2
   1d16a:	d80d      	bhi.n	1d188 <parse_value+0x88>
   1d16c:	6820      	ldr	r0, [r4, #0]
   1d16e:	2204      	movs	r2, #4
   1d170:	497f      	ldr	r1, [pc, #508]	; (1d370 <parse_value+0x270>)
   1d172:	4418      	add	r0, r3
   1d174:	f018 fe04 	bl	35d80 <strncmp>
   1d178:	b930      	cbnz	r0, 1d188 <parse_value+0x88>
        item->type = cJSON_True;
   1d17a:	2302      	movs	r3, #2
        item->valueint = 1;
   1d17c:	2001      	movs	r0, #1
        input_buffer->offset += 4;
   1d17e:	68a2      	ldr	r2, [r4, #8]
        item->type = cJSON_True;
   1d180:	60eb      	str	r3, [r5, #12]
        item->valueint = 1;
   1d182:	6168      	str	r0, [r5, #20]
        input_buffer->offset += 4;
   1d184:	3204      	adds	r2, #4
   1d186:	e7e8      	b.n	1d15a <parse_value+0x5a>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
   1d188:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
   1d18c:	4283      	cmp	r3, r0
   1d18e:	d2bd      	bcs.n	1d10c <parse_value+0xc>
   1d190:	6821      	ldr	r1, [r4, #0]
   1d192:	5cca      	ldrb	r2, [r1, r3]
   1d194:	18ce      	adds	r6, r1, r3
   1d196:	2a22      	cmp	r2, #34	; 0x22
   1d198:	d104      	bne.n	1d1a4 <parse_value+0xa4>
        return parse_string(item, input_buffer);
   1d19a:	4621      	mov	r1, r4
   1d19c:	4628      	mov	r0, r5
   1d19e:	f005 fa05 	bl	225ac <parse_string>
   1d1a2:	e7db      	b.n	1d15c <parse_value+0x5c>
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
   1d1a4:	2a2d      	cmp	r2, #45	; 0x2d
   1d1a6:	d003      	beq.n	1d1b0 <parse_value+0xb0>
   1d1a8:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
   1d1ac:	2f09      	cmp	r7, #9
   1d1ae:	d85e      	bhi.n	1d26e <parse_value+0x16e>
    unsigned char *after_end = NULL;
   1d1b0:	2200      	movs	r2, #0
   1d1b2:	9201      	str	r2, [sp, #4]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   1d1b4:	2900      	cmp	r1, #0
   1d1b6:	d0a9      	beq.n	1d10c <parse_value+0xc>
                number_c_string[i] = decimal_point;
   1d1b8:	272e      	movs	r7, #46	; 0x2e
   1d1ba:	1ac3      	subs	r3, r0, r3
   1d1bc:	f10d 0808 	add.w	r8, sp, #8
        switch (buffer_at_offset(input_buffer)[i])
   1d1c0:	f816 1b01 	ldrb.w	r1, [r6], #1
   1d1c4:	2939      	cmp	r1, #57	; 0x39
   1d1c6:	d80f      	bhi.n	1d1e8 <parse_value+0xe8>
   1d1c8:	292a      	cmp	r1, #42	; 0x2a
   1d1ca:	d918      	bls.n	1d1fe <parse_value+0xfe>
   1d1cc:	f1a1 002b 	sub.w	r0, r1, #43	; 0x2b
   1d1d0:	280e      	cmp	r0, #14
   1d1d2:	d814      	bhi.n	1d1fe <parse_value+0xfe>
   1d1d4:	e8df f000 	tbb	[pc, r0]
   1d1d8:	380c130c 	.word	0x380c130c
   1d1dc:	0c0c0c13 	.word	0x0c0c0c13
   1d1e0:	0c0c0c0c 	.word	0x0c0c0c0c
   1d1e4:	0c0c      	.short	0x0c0c
   1d1e6:	0c          	.byte	0x0c
   1d1e7:	00          	.byte	0x00
   1d1e8:	f001 00df 	and.w	r0, r1, #223	; 0xdf
   1d1ec:	2845      	cmp	r0, #69	; 0x45
   1d1ee:	d106      	bne.n	1d1fe <parse_value+0xfe>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
   1d1f0:	f808 1002 	strb.w	r1, [r8, r2]
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
   1d1f4:	3201      	adds	r2, #1
   1d1f6:	2a3f      	cmp	r2, #63	; 0x3f
   1d1f8:	d001      	beq.n	1d1fe <parse_value+0xfe>
   1d1fa:	429a      	cmp	r2, r3
   1d1fc:	d1e0      	bne.n	1d1c0 <parse_value+0xc0>
    number_c_string[i] = '\0';
   1d1fe:	ab12      	add	r3, sp, #72	; 0x48
   1d200:	441a      	add	r2, r3
   1d202:	2300      	movs	r3, #0
    number = strtod((const char*)number_c_string, (char**)&after_end);
   1d204:	4640      	mov	r0, r8
   1d206:	a901      	add	r1, sp, #4
    number_c_string[i] = '\0';
   1d208:	f802 3c40 	strb.w	r3, [r2, #-64]
    number = strtod((const char*)number_c_string, (char**)&after_end);
   1d20c:	f014 ffde 	bl	321cc <strtod>
    if (number_c_string == after_end)
   1d210:	f8dd 9004 	ldr.w	r9, [sp, #4]
    number = strtod((const char*)number_c_string, (char**)&after_end);
   1d214:	ec57 6b10 	vmov	r6, r7, d0
    if (number_c_string == after_end)
   1d218:	45c1      	cmp	r9, r8
   1d21a:	f43f af77 	beq.w	1d10c <parse_value+0xc>
    if (number >= INT_MAX)
   1d21e:	a350      	add	r3, pc, #320	; (adr r3, 1d360 <parse_value+0x260>)
   1d220:	e9d3 2300 	ldrd	r2, r3, [r3]
    item->valuedouble = number;
   1d224:	ed85 0b06 	vstr	d0, [r5, #24]
    if (number >= INT_MAX)
   1d228:	ee10 0a10 	vmov	r0, s0
   1d22c:	4639      	mov	r1, r7
   1d22e:	f7ff fb37 	bl	1c8a0 <__aeabi_dcmpge>
   1d232:	b160      	cbz	r0, 1d24e <parse_value+0x14e>
        item->valueint = INT_MAX;
   1d234:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
        item->valueint = INT_MIN;
   1d238:	616b      	str	r3, [r5, #20]
    item->type = cJSON_Number;
   1d23a:	2308      	movs	r3, #8
   1d23c:	60eb      	str	r3, [r5, #12]
    input_buffer->offset += (size_t)(after_end - number_c_string);
   1d23e:	68a3      	ldr	r3, [r4, #8]
   1d240:	eba9 0808 	sub.w	r8, r9, r8
   1d244:	4443      	add	r3, r8
   1d246:	e775      	b.n	1d134 <parse_value+0x34>
                number_c_string[i] = decimal_point;
   1d248:	f808 7002 	strb.w	r7, [r8, r2]
                break;
   1d24c:	e7d2      	b.n	1d1f4 <parse_value+0xf4>
    else if (number <= (double)INT_MIN)
   1d24e:	2200      	movs	r2, #0
   1d250:	4630      	mov	r0, r6
   1d252:	4639      	mov	r1, r7
   1d254:	4b47      	ldr	r3, [pc, #284]	; (1d374 <parse_value+0x274>)
   1d256:	f7ff fb19 	bl	1c88c <__aeabi_dcmple>
   1d25a:	b110      	cbz	r0, 1d262 <parse_value+0x162>
        item->valueint = INT_MIN;
   1d25c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   1d260:	e7ea      	b.n	1d238 <parse_value+0x138>
        item->valueint = (int)number;
   1d262:	4630      	mov	r0, r6
   1d264:	4639      	mov	r1, r7
   1d266:	f7ff fb2f 	bl	1c8c8 <__aeabi_d2iz>
   1d26a:	6168      	str	r0, [r5, #20]
   1d26c:	e7e5      	b.n	1d23a <parse_value+0x13a>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
   1d26e:	2a5b      	cmp	r2, #91	; 0x5b
   1d270:	d150      	bne.n	1d314 <parse_value+0x214>
    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
   1d272:	68e2      	ldr	r2, [r4, #12]
   1d274:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
   1d278:	f4bf af48 	bcs.w	1d10c <parse_value+0xc>
    input_buffer->depth++;
   1d27c:	3201      	adds	r2, #1
   1d27e:	60e2      	str	r2, [r4, #12]
    if (buffer_at_offset(input_buffer)[0] != '[')
   1d280:	5cca      	ldrb	r2, [r1, r3]
   1d282:	2a5b      	cmp	r2, #91	; 0x5b
   1d284:	f47f af42 	bne.w	1d10c <parse_value+0xc>
    input_buffer->offset++;
   1d288:	3301      	adds	r3, #1
   1d28a:	60a3      	str	r3, [r4, #8]
    buffer_skip_whitespace(input_buffer);
   1d28c:	4620      	mov	r0, r4
   1d28e:	f017 fc78 	bl	34b82 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
   1d292:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1d296:	4293      	cmp	r3, r2
   1d298:	d25d      	bcs.n	1d356 <parse_value+0x256>
   1d29a:	6822      	ldr	r2, [r4, #0]
   1d29c:	5cd2      	ldrb	r2, [r2, r3]
   1d29e:	2a5d      	cmp	r2, #93	; 0x5d
   1d2a0:	d109      	bne.n	1d2b6 <parse_value+0x1b6>
    cJSON *head = NULL; /* head of the linked list */
   1d2a2:	2700      	movs	r7, #0
    input_buffer->depth--;
   1d2a4:	68e3      	ldr	r3, [r4, #12]
   1d2a6:	3b01      	subs	r3, #1
   1d2a8:	60e3      	str	r3, [r4, #12]
    item->type = cJSON_Array;
   1d2aa:	2320      	movs	r3, #32
    item->child = head;
   1d2ac:	e9c5 7302 	strd	r7, r3, [r5, #8]
    input_buffer->offset++;
   1d2b0:	68a3      	ldr	r3, [r4, #8]
   1d2b2:	3301      	adds	r3, #1
   1d2b4:	e73e      	b.n	1d134 <parse_value+0x34>
    cJSON *current_item = NULL;
   1d2b6:	2600      	movs	r6, #0
    cJSON *head = NULL; /* head of the linked list */
   1d2b8:	4637      	mov	r7, r6
    input_buffer->offset--;
   1d2ba:	3b01      	subs	r3, #1
   1d2bc:	60a3      	str	r3, [r4, #8]
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
   1d2be:	6920      	ldr	r0, [r4, #16]
   1d2c0:	f017 fc74 	bl	34bac <cJSON_New_Item.isra.0>
        if (new_item == NULL)
   1d2c4:	46b0      	mov	r8, r6
   1d2c6:	4606      	mov	r6, r0
   1d2c8:	2800      	cmp	r0, #0
   1d2ca:	f000 809a 	beq.w	1d402 <parse_value+0x302>
        if (head == NULL)
   1d2ce:	b1ff      	cbz	r7, 1d310 <parse_value+0x210>
            current_item->next = new_item;
   1d2d0:	f8c8 0000 	str.w	r0, [r8]
            new_item->prev = current_item;
   1d2d4:	f8c0 8004 	str.w	r8, [r0, #4]
        input_buffer->offset++;
   1d2d8:	68a3      	ldr	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1d2da:	4620      	mov	r0, r4
        input_buffer->offset++;
   1d2dc:	3301      	adds	r3, #1
   1d2de:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1d2e0:	f017 fc4f 	bl	34b82 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
   1d2e4:	4621      	mov	r1, r4
   1d2e6:	4630      	mov	r0, r6
   1d2e8:	f7ff ff0a 	bl	1d100 <parse_value>
   1d2ec:	2800      	cmp	r0, #0
   1d2ee:	f000 808b 	beq.w	1d408 <parse_value+0x308>
        buffer_skip_whitespace(input_buffer);
   1d2f2:	4620      	mov	r0, r4
   1d2f4:	f017 fc45 	bl	34b82 <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
   1d2f8:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1d2fc:	4293      	cmp	r3, r2
   1d2fe:	f080 8083 	bcs.w	1d408 <parse_value+0x308>
   1d302:	6822      	ldr	r2, [r4, #0]
   1d304:	5cd3      	ldrb	r3, [r2, r3]
   1d306:	2b2c      	cmp	r3, #44	; 0x2c
   1d308:	d0d9      	beq.n	1d2be <parse_value+0x1be>
    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
   1d30a:	2b5d      	cmp	r3, #93	; 0x5d
   1d30c:	d17c      	bne.n	1d408 <parse_value+0x308>
   1d30e:	e7c9      	b.n	1d2a4 <parse_value+0x1a4>
   1d310:	4607      	mov	r7, r0
   1d312:	e7e1      	b.n	1d2d8 <parse_value+0x1d8>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
   1d314:	2a7b      	cmp	r2, #123	; 0x7b
   1d316:	f47f aef9 	bne.w	1d10c <parse_value+0xc>
    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
   1d31a:	68e2      	ldr	r2, [r4, #12]
   1d31c:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
   1d320:	f4bf aef4 	bcs.w	1d10c <parse_value+0xc>
    input_buffer->depth++;
   1d324:	3201      	adds	r2, #1
   1d326:	60e2      	str	r2, [r4, #12]
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
   1d328:	5cca      	ldrb	r2, [r1, r3]
   1d32a:	2a7b      	cmp	r2, #123	; 0x7b
   1d32c:	f47f aeee 	bne.w	1d10c <parse_value+0xc>
    input_buffer->offset++;
   1d330:	3301      	adds	r3, #1
   1d332:	60a3      	str	r3, [r4, #8]
    buffer_skip_whitespace(input_buffer);
   1d334:	4620      	mov	r0, r4
   1d336:	f017 fc24 	bl	34b82 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
   1d33a:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1d33e:	4293      	cmp	r3, r2
   1d340:	d209      	bcs.n	1d356 <parse_value+0x256>
   1d342:	6822      	ldr	r2, [r4, #0]
   1d344:	5cd2      	ldrb	r2, [r2, r3]
   1d346:	2a7d      	cmp	r2, #125	; 0x7d
   1d348:	d116      	bne.n	1d378 <parse_value+0x278>
    cJSON *head = NULL; /* linked list head */
   1d34a:	2700      	movs	r7, #0
    input_buffer->depth--;
   1d34c:	68e3      	ldr	r3, [r4, #12]
   1d34e:	3b01      	subs	r3, #1
   1d350:	60e3      	str	r3, [r4, #12]
    item->type = cJSON_Object;
   1d352:	2340      	movs	r3, #64	; 0x40
   1d354:	e7aa      	b.n	1d2ac <parse_value+0x1ac>
        input_buffer->offset--;
   1d356:	3b01      	subs	r3, #1
   1d358:	60a3      	str	r3, [r4, #8]
    if (head != NULL)
   1d35a:	e6d7      	b.n	1d10c <parse_value+0xc>
   1d35c:	f3af 8000 	nop.w
   1d360:	ffc00000 	.word	0xffc00000
   1d364:	41dfffff 	.word	0x41dfffff
   1d368:	000390fd 	.word	0x000390fd
   1d36c:	00039114 	.word	0x00039114
   1d370:	0003911a 	.word	0x0003911a
   1d374:	c1e00000 	.word	0xc1e00000
    cJSON *current_item = NULL;
   1d378:	2600      	movs	r6, #0
    cJSON *head = NULL; /* linked list head */
   1d37a:	4637      	mov	r7, r6
        current_item->valuestring = NULL;
   1d37c:	46b0      	mov	r8, r6
    input_buffer->offset--;
   1d37e:	3b01      	subs	r3, #1
   1d380:	60a3      	str	r3, [r4, #8]
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
   1d382:	6920      	ldr	r0, [r4, #16]
   1d384:	f017 fc12 	bl	34bac <cJSON_New_Item.isra.0>
        if (new_item == NULL)
   1d388:	46b1      	mov	r9, r6
   1d38a:	4606      	mov	r6, r0
   1d38c:	2800      	cmp	r0, #0
   1d38e:	d038      	beq.n	1d402 <parse_value+0x302>
        if (head == NULL)
   1d390:	b3af      	cbz	r7, 1d3fe <parse_value+0x2fe>
            current_item->next = new_item;
   1d392:	f8c9 0000 	str.w	r0, [r9]
            new_item->prev = current_item;
   1d396:	f8c0 9004 	str.w	r9, [r0, #4]
        input_buffer->offset++;
   1d39a:	68a3      	ldr	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1d39c:	4620      	mov	r0, r4
        input_buffer->offset++;
   1d39e:	3301      	adds	r3, #1
   1d3a0:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1d3a2:	f017 fbee 	bl	34b82 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
   1d3a6:	4621      	mov	r1, r4
   1d3a8:	4630      	mov	r0, r6
   1d3aa:	f005 f8ff 	bl	225ac <parse_string>
   1d3ae:	b358      	cbz	r0, 1d408 <parse_value+0x308>
        buffer_skip_whitespace(input_buffer);
   1d3b0:	4620      	mov	r0, r4
   1d3b2:	f017 fbe6 	bl	34b82 <buffer_skip_whitespace>
        current_item->string = current_item->valuestring;
   1d3b6:	6933      	ldr	r3, [r6, #16]
        current_item->valuestring = NULL;
   1d3b8:	f8c6 8010 	str.w	r8, [r6, #16]
        current_item->string = current_item->valuestring;
   1d3bc:	6233      	str	r3, [r6, #32]
        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
   1d3be:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1d3c2:	4293      	cmp	r3, r2
   1d3c4:	d220      	bcs.n	1d408 <parse_value+0x308>
   1d3c6:	6822      	ldr	r2, [r4, #0]
   1d3c8:	5cd2      	ldrb	r2, [r2, r3]
   1d3ca:	2a3a      	cmp	r2, #58	; 0x3a
   1d3cc:	d11c      	bne.n	1d408 <parse_value+0x308>
        input_buffer->offset++;
   1d3ce:	3301      	adds	r3, #1
        buffer_skip_whitespace(input_buffer);
   1d3d0:	4620      	mov	r0, r4
        input_buffer->offset++;
   1d3d2:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1d3d4:	f017 fbd5 	bl	34b82 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
   1d3d8:	4621      	mov	r1, r4
   1d3da:	4630      	mov	r0, r6
   1d3dc:	f7ff fe90 	bl	1d100 <parse_value>
   1d3e0:	b190      	cbz	r0, 1d408 <parse_value+0x308>
        buffer_skip_whitespace(input_buffer);
   1d3e2:	4620      	mov	r0, r4
   1d3e4:	f017 fbcd 	bl	34b82 <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
   1d3e8:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1d3ec:	4293      	cmp	r3, r2
   1d3ee:	d20b      	bcs.n	1d408 <parse_value+0x308>
   1d3f0:	6822      	ldr	r2, [r4, #0]
   1d3f2:	5cd3      	ldrb	r3, [r2, r3]
   1d3f4:	2b2c      	cmp	r3, #44	; 0x2c
   1d3f6:	d0c4      	beq.n	1d382 <parse_value+0x282>
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
   1d3f8:	2b7d      	cmp	r3, #125	; 0x7d
   1d3fa:	d105      	bne.n	1d408 <parse_value+0x308>
   1d3fc:	e7a6      	b.n	1d34c <parse_value+0x24c>
   1d3fe:	4607      	mov	r7, r0
   1d400:	e7cb      	b.n	1d39a <parse_value+0x29a>
    if (head != NULL)
   1d402:	2f00      	cmp	r7, #0
   1d404:	f43f ae82 	beq.w	1d10c <parse_value+0xc>
        cJSON_Delete(head);
   1d408:	4638      	mov	r0, r7
   1d40a:	f005 f9f9 	bl	22800 <cJSON_Delete>
   1d40e:	e67d      	b.n	1d10c <parse_value+0xc>

0001d410 <_strtod_l>:
   1d410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d414:	461f      	mov	r7, r3
   1d416:	b0a3      	sub	sp, #140	; 0x8c
   1d418:	2300      	movs	r3, #0
   1d41a:	4604      	mov	r4, r0
   1d41c:	4688      	mov	r8, r1
   1d41e:	9219      	str	r2, [sp, #100]	; 0x64
   1d420:	931e      	str	r3, [sp, #120]	; 0x78
   1d422:	f04f 0a00 	mov.w	sl, #0
   1d426:	4ba3      	ldr	r3, [pc, #652]	; (1d6b4 <_strtod_l+0x2a4>)
   1d428:	f04f 0b00 	mov.w	fp, #0
   1d42c:	681b      	ldr	r3, [r3, #0]
   1d42e:	4618      	mov	r0, r3
   1d430:	9307      	str	r3, [sp, #28]
   1d432:	f7ff fe5d 	bl	1d0f0 <strlen>
   1d436:	4605      	mov	r5, r0
   1d438:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   1d43c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1d43e:	781a      	ldrb	r2, [r3, #0]
   1d440:	2a2b      	cmp	r2, #43	; 0x2b
   1d442:	d04c      	beq.n	1d4de <_strtod_l+0xce>
   1d444:	d839      	bhi.n	1d4ba <_strtod_l+0xaa>
   1d446:	2a0d      	cmp	r2, #13
   1d448:	d832      	bhi.n	1d4b0 <_strtod_l+0xa0>
   1d44a:	2a08      	cmp	r2, #8
   1d44c:	d832      	bhi.n	1d4b4 <_strtod_l+0xa4>
   1d44e:	2a00      	cmp	r2, #0
   1d450:	d03c      	beq.n	1d4cc <_strtod_l+0xbc>
   1d452:	2300      	movs	r3, #0
   1d454:	930e      	str	r3, [sp, #56]	; 0x38
   1d456:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   1d458:	7833      	ldrb	r3, [r6, #0]
   1d45a:	2b30      	cmp	r3, #48	; 0x30
   1d45c:	f040 80b5 	bne.w	1d5ca <_strtod_l+0x1ba>
   1d460:	7873      	ldrb	r3, [r6, #1]
   1d462:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1d466:	2b58      	cmp	r3, #88	; 0x58
   1d468:	d16c      	bne.n	1d544 <_strtod_l+0x134>
   1d46a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1d46c:	a91d      	add	r1, sp, #116	; 0x74
   1d46e:	9702      	str	r7, [sp, #8]
   1d470:	4620      	mov	r0, r4
   1d472:	9301      	str	r3, [sp, #4]
   1d474:	ab1e      	add	r3, sp, #120	; 0x78
   1d476:	4a90      	ldr	r2, [pc, #576]	; (1d6b8 <_strtod_l+0x2a8>)
   1d478:	9300      	str	r3, [sp, #0]
   1d47a:	ab1f      	add	r3, sp, #124	; 0x7c
   1d47c:	f015 fa6c 	bl	32958 <__gethex>
   1d480:	f010 0707 	ands.w	r7, r0, #7
   1d484:	4605      	mov	r5, r0
   1d486:	d005      	beq.n	1d494 <_strtod_l+0x84>
   1d488:	2f06      	cmp	r7, #6
   1d48a:	d12a      	bne.n	1d4e2 <_strtod_l+0xd2>
   1d48c:	3601      	adds	r6, #1
   1d48e:	2300      	movs	r3, #0
   1d490:	961d      	str	r6, [sp, #116]	; 0x74
   1d492:	930e      	str	r3, [sp, #56]	; 0x38
   1d494:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1d496:	2b00      	cmp	r3, #0
   1d498:	f040 859a 	bne.w	1dfd0 <_strtod_l+0xbc0>
   1d49c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1d49e:	b1db      	cbz	r3, 1d4d8 <_strtod_l+0xc8>
   1d4a0:	4652      	mov	r2, sl
   1d4a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   1d4a6:	ec43 2b10 	vmov	d0, r2, r3
   1d4aa:	b023      	add	sp, #140	; 0x8c
   1d4ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d4b0:	2a20      	cmp	r2, #32
   1d4b2:	d1ce      	bne.n	1d452 <_strtod_l+0x42>
   1d4b4:	3301      	adds	r3, #1
   1d4b6:	931d      	str	r3, [sp, #116]	; 0x74
   1d4b8:	e7c0      	b.n	1d43c <_strtod_l+0x2c>
   1d4ba:	2a2d      	cmp	r2, #45	; 0x2d
   1d4bc:	d1c9      	bne.n	1d452 <_strtod_l+0x42>
   1d4be:	2201      	movs	r2, #1
   1d4c0:	920e      	str	r2, [sp, #56]	; 0x38
   1d4c2:	1c5a      	adds	r2, r3, #1
   1d4c4:	921d      	str	r2, [sp, #116]	; 0x74
   1d4c6:	785b      	ldrb	r3, [r3, #1]
   1d4c8:	2b00      	cmp	r3, #0
   1d4ca:	d1c4      	bne.n	1d456 <_strtod_l+0x46>
   1d4cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1d4ce:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   1d4d2:	2b00      	cmp	r3, #0
   1d4d4:	f040 857a 	bne.w	1dfcc <_strtod_l+0xbbc>
   1d4d8:	4652      	mov	r2, sl
   1d4da:	465b      	mov	r3, fp
   1d4dc:	e7e3      	b.n	1d4a6 <_strtod_l+0x96>
   1d4de:	2200      	movs	r2, #0
   1d4e0:	e7ee      	b.n	1d4c0 <_strtod_l+0xb0>
   1d4e2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   1d4e4:	b13a      	cbz	r2, 1d4f6 <_strtod_l+0xe6>
   1d4e6:	2135      	movs	r1, #53	; 0x35
   1d4e8:	a820      	add	r0, sp, #128	; 0x80
   1d4ea:	f019 f9a8 	bl	3683e <__copybits>
   1d4ee:	991e      	ldr	r1, [sp, #120]	; 0x78
   1d4f0:	4620      	mov	r0, r4
   1d4f2:	f018 fea1 	bl	36238 <_Bfree>
   1d4f6:	3f01      	subs	r7, #1
   1d4f8:	2f05      	cmp	r7, #5
   1d4fa:	d807      	bhi.n	1d50c <_strtod_l+0xfc>
   1d4fc:	e8df f007 	tbb	[pc, r7]
   1d500:	1d180b0e 	.word	0x1d180b0e
   1d504:	030e      	.short	0x030e
   1d506:	f04f 0b00 	mov.w	fp, #0
   1d50a:	46da      	mov	sl, fp
   1d50c:	0728      	lsls	r0, r5, #28
   1d50e:	d5c1      	bpl.n	1d494 <_strtod_l+0x84>
   1d510:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   1d514:	e7be      	b.n	1d494 <_strtod_l+0x84>
   1d516:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
   1d51a:	e7f7      	b.n	1d50c <_strtod_l+0xfc>
   1d51c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
   1d520:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   1d522:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1d526:	f202 4233 	addw	r2, r2, #1075	; 0x433
   1d52a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   1d52e:	e7ed      	b.n	1d50c <_strtod_l+0xfc>
   1d530:	f8df b188 	ldr.w	fp, [pc, #392]	; 1d6bc <_strtod_l+0x2ac>
   1d534:	f04f 0a00 	mov.w	sl, #0
   1d538:	e7e8      	b.n	1d50c <_strtod_l+0xfc>
   1d53a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   1d53e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   1d542:	e7e3      	b.n	1d50c <_strtod_l+0xfc>
   1d544:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1d546:	1c5a      	adds	r2, r3, #1
   1d548:	921d      	str	r2, [sp, #116]	; 0x74
   1d54a:	785b      	ldrb	r3, [r3, #1]
   1d54c:	2b30      	cmp	r3, #48	; 0x30
   1d54e:	d0f9      	beq.n	1d544 <_strtod_l+0x134>
   1d550:	2b00      	cmp	r3, #0
   1d552:	d09f      	beq.n	1d494 <_strtod_l+0x84>
   1d554:	2301      	movs	r3, #1
   1d556:	f04f 0900 	mov.w	r9, #0
   1d55a:	9304      	str	r3, [sp, #16]
   1d55c:	220a      	movs	r2, #10
   1d55e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1d560:	464f      	mov	r7, r9
   1d562:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   1d566:	930a      	str	r3, [sp, #40]	; 0x28
   1d568:	981d      	ldr	r0, [sp, #116]	; 0x74
   1d56a:	7806      	ldrb	r6, [r0, #0]
   1d56c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   1d570:	b2d9      	uxtb	r1, r3
   1d572:	2909      	cmp	r1, #9
   1d574:	d92b      	bls.n	1d5ce <_strtod_l+0x1be>
   1d576:	462a      	mov	r2, r5
   1d578:	9907      	ldr	r1, [sp, #28]
   1d57a:	f018 fc01 	bl	35d80 <strncmp>
   1d57e:	2800      	cmp	r0, #0
   1d580:	d034      	beq.n	1d5ec <_strtod_l+0x1dc>
   1d582:	2000      	movs	r0, #0
   1d584:	4633      	mov	r3, r6
   1d586:	463d      	mov	r5, r7
   1d588:	4602      	mov	r2, r0
   1d58a:	9007      	str	r0, [sp, #28]
   1d58c:	2b65      	cmp	r3, #101	; 0x65
   1d58e:	d001      	beq.n	1d594 <_strtod_l+0x184>
   1d590:	2b45      	cmp	r3, #69	; 0x45
   1d592:	d118      	bne.n	1d5c6 <_strtod_l+0x1b6>
   1d594:	b91d      	cbnz	r5, 1d59e <_strtod_l+0x18e>
   1d596:	9b04      	ldr	r3, [sp, #16]
   1d598:	4303      	orrs	r3, r0
   1d59a:	d097      	beq.n	1d4cc <_strtod_l+0xbc>
   1d59c:	2500      	movs	r5, #0
   1d59e:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   1d5a2:	f108 0301 	add.w	r3, r8, #1
   1d5a6:	931d      	str	r3, [sp, #116]	; 0x74
   1d5a8:	f898 3001 	ldrb.w	r3, [r8, #1]
   1d5ac:	2b2b      	cmp	r3, #43	; 0x2b
   1d5ae:	d075      	beq.n	1d69c <_strtod_l+0x28c>
   1d5b0:	2b2d      	cmp	r3, #45	; 0x2d
   1d5b2:	d07b      	beq.n	1d6ac <_strtod_l+0x29c>
   1d5b4:	f04f 0c00 	mov.w	ip, #0
   1d5b8:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   1d5bc:	2909      	cmp	r1, #9
   1d5be:	f240 8083 	bls.w	1d6c8 <_strtod_l+0x2b8>
   1d5c2:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   1d5c6:	2600      	movs	r6, #0
   1d5c8:	e09e      	b.n	1d708 <_strtod_l+0x2f8>
   1d5ca:	2300      	movs	r3, #0
   1d5cc:	e7c3      	b.n	1d556 <_strtod_l+0x146>
   1d5ce:	2f08      	cmp	r7, #8
   1d5d0:	f100 0001 	add.w	r0, r0, #1
   1d5d4:	f107 0701 	add.w	r7, r7, #1
   1d5d8:	bfd4      	ite	le
   1d5da:	9909      	ldrle	r1, [sp, #36]	; 0x24
   1d5dc:	fb02 3909 	mlagt	r9, r2, r9, r3
   1d5e0:	901d      	str	r0, [sp, #116]	; 0x74
   1d5e2:	bfdc      	itt	le
   1d5e4:	fb02 3301 	mlale	r3, r2, r1, r3
   1d5e8:	9309      	strle	r3, [sp, #36]	; 0x24
   1d5ea:	e7bd      	b.n	1d568 <_strtod_l+0x158>
   1d5ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1d5ee:	195a      	adds	r2, r3, r5
   1d5f0:	921d      	str	r2, [sp, #116]	; 0x74
   1d5f2:	5d5b      	ldrb	r3, [r3, r5]
   1d5f4:	2f00      	cmp	r7, #0
   1d5f6:	d036      	beq.n	1d666 <_strtod_l+0x256>
   1d5f8:	463d      	mov	r5, r7
   1d5fa:	9007      	str	r0, [sp, #28]
   1d5fc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   1d600:	2a09      	cmp	r2, #9
   1d602:	d912      	bls.n	1d62a <_strtod_l+0x21a>
   1d604:	2201      	movs	r2, #1
   1d606:	e7c1      	b.n	1d58c <_strtod_l+0x17c>
   1d608:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1d60a:	3001      	adds	r0, #1
   1d60c:	1c5a      	adds	r2, r3, #1
   1d60e:	921d      	str	r2, [sp, #116]	; 0x74
   1d610:	785b      	ldrb	r3, [r3, #1]
   1d612:	2b30      	cmp	r3, #48	; 0x30
   1d614:	d0f8      	beq.n	1d608 <_strtod_l+0x1f8>
   1d616:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   1d61a:	2a08      	cmp	r2, #8
   1d61c:	f200 84dd 	bhi.w	1dfda <_strtod_l+0xbca>
   1d620:	9007      	str	r0, [sp, #28]
   1d622:	2000      	movs	r0, #0
   1d624:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   1d626:	4605      	mov	r5, r0
   1d628:	920a      	str	r2, [sp, #40]	; 0x28
   1d62a:	3b30      	subs	r3, #48	; 0x30
   1d62c:	f100 0201 	add.w	r2, r0, #1
   1d630:	d013      	beq.n	1d65a <_strtod_l+0x24a>
   1d632:	9907      	ldr	r1, [sp, #28]
   1d634:	eb00 0e05 	add.w	lr, r0, r5
   1d638:	4411      	add	r1, r2
   1d63a:	462a      	mov	r2, r5
   1d63c:	9107      	str	r1, [sp, #28]
   1d63e:	210a      	movs	r1, #10
   1d640:	4572      	cmp	r2, lr
   1d642:	d112      	bne.n	1d66a <_strtod_l+0x25a>
   1d644:	182a      	adds	r2, r5, r0
   1d646:	3501      	adds	r5, #1
   1d648:	2a08      	cmp	r2, #8
   1d64a:	4405      	add	r5, r0
   1d64c:	dc1c      	bgt.n	1d688 <_strtod_l+0x278>
   1d64e:	9909      	ldr	r1, [sp, #36]	; 0x24
   1d650:	220a      	movs	r2, #10
   1d652:	fb02 3301 	mla	r3, r2, r1, r3
   1d656:	9309      	str	r3, [sp, #36]	; 0x24
   1d658:	2200      	movs	r2, #0
   1d65a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1d65c:	4610      	mov	r0, r2
   1d65e:	1c59      	adds	r1, r3, #1
   1d660:	911d      	str	r1, [sp, #116]	; 0x74
   1d662:	785b      	ldrb	r3, [r3, #1]
   1d664:	e7ca      	b.n	1d5fc <_strtod_l+0x1ec>
   1d666:	4638      	mov	r0, r7
   1d668:	e7d3      	b.n	1d612 <_strtod_l+0x202>
   1d66a:	2a08      	cmp	r2, #8
   1d66c:	dc04      	bgt.n	1d678 <_strtod_l+0x268>
   1d66e:	9e09      	ldr	r6, [sp, #36]	; 0x24
   1d670:	434e      	muls	r6, r1
   1d672:	9609      	str	r6, [sp, #36]	; 0x24
   1d674:	3201      	adds	r2, #1
   1d676:	e7e3      	b.n	1d640 <_strtod_l+0x230>
   1d678:	f102 0c01 	add.w	ip, r2, #1
   1d67c:	f1bc 0f10 	cmp.w	ip, #16
   1d680:	bfd8      	it	le
   1d682:	fb01 f909 	mulle.w	r9, r1, r9
   1d686:	e7f5      	b.n	1d674 <_strtod_l+0x264>
   1d688:	2d10      	cmp	r5, #16
   1d68a:	bfdc      	itt	le
   1d68c:	220a      	movle	r2, #10
   1d68e:	fb02 3909 	mlale	r9, r2, r9, r3
   1d692:	e7e1      	b.n	1d658 <_strtod_l+0x248>
   1d694:	2300      	movs	r3, #0
   1d696:	2201      	movs	r2, #1
   1d698:	9307      	str	r3, [sp, #28]
   1d69a:	e77c      	b.n	1d596 <_strtod_l+0x186>
   1d69c:	f04f 0c00 	mov.w	ip, #0
   1d6a0:	f108 0302 	add.w	r3, r8, #2
   1d6a4:	931d      	str	r3, [sp, #116]	; 0x74
   1d6a6:	f898 3002 	ldrb.w	r3, [r8, #2]
   1d6aa:	e785      	b.n	1d5b8 <_strtod_l+0x1a8>
   1d6ac:	f04f 0c01 	mov.w	ip, #1
   1d6b0:	e7f6      	b.n	1d6a0 <_strtod_l+0x290>
   1d6b2:	bf00      	nop
   1d6b4:	00037594 	.word	0x00037594
   1d6b8:	0003750c 	.word	0x0003750c
   1d6bc:	7ff00000 	.word	0x7ff00000
   1d6c0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1d6c2:	1c59      	adds	r1, r3, #1
   1d6c4:	911d      	str	r1, [sp, #116]	; 0x74
   1d6c6:	785b      	ldrb	r3, [r3, #1]
   1d6c8:	2b30      	cmp	r3, #48	; 0x30
   1d6ca:	d0f9      	beq.n	1d6c0 <_strtod_l+0x2b0>
   1d6cc:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   1d6d0:	2908      	cmp	r1, #8
   1d6d2:	f63f af78 	bhi.w	1d5c6 <_strtod_l+0x1b6>
   1d6d6:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   1d6da:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1d6dc:	9308      	str	r3, [sp, #32]
   1d6de:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1d6e0:	1c59      	adds	r1, r3, #1
   1d6e2:	911d      	str	r1, [sp, #116]	; 0x74
   1d6e4:	785b      	ldrb	r3, [r3, #1]
   1d6e6:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   1d6ea:	2e09      	cmp	r6, #9
   1d6ec:	d937      	bls.n	1d75e <_strtod_l+0x34e>
   1d6ee:	9e08      	ldr	r6, [sp, #32]
   1d6f0:	1b89      	subs	r1, r1, r6
   1d6f2:	f644 661f 	movw	r6, #19999	; 0x4e1f
   1d6f6:	2908      	cmp	r1, #8
   1d6f8:	dc02      	bgt.n	1d700 <_strtod_l+0x2f0>
   1d6fa:	4576      	cmp	r6, lr
   1d6fc:	bfa8      	it	ge
   1d6fe:	4676      	movge	r6, lr
   1d700:	f1bc 0f00 	cmp.w	ip, #0
   1d704:	d000      	beq.n	1d708 <_strtod_l+0x2f8>
   1d706:	4276      	negs	r6, r6
   1d708:	2d00      	cmp	r5, #0
   1d70a:	d14f      	bne.n	1d7ac <_strtod_l+0x39c>
   1d70c:	9904      	ldr	r1, [sp, #16]
   1d70e:	4301      	orrs	r1, r0
   1d710:	f47f aec0 	bne.w	1d494 <_strtod_l+0x84>
   1d714:	2a00      	cmp	r2, #0
   1d716:	f47f aed9 	bne.w	1d4cc <_strtod_l+0xbc>
   1d71a:	2b69      	cmp	r3, #105	; 0x69
   1d71c:	d027      	beq.n	1d76e <_strtod_l+0x35e>
   1d71e:	dc24      	bgt.n	1d76a <_strtod_l+0x35a>
   1d720:	2b49      	cmp	r3, #73	; 0x49
   1d722:	d024      	beq.n	1d76e <_strtod_l+0x35e>
   1d724:	2b4e      	cmp	r3, #78	; 0x4e
   1d726:	f47f aed1 	bne.w	1d4cc <_strtod_l+0xbc>
   1d72a:	499f      	ldr	r1, [pc, #636]	; (1d9a8 <_strtod_l+0x598>)
   1d72c:	a81d      	add	r0, sp, #116	; 0x74
   1d72e:	f018 fc4c 	bl	35fca <__match>
   1d732:	2800      	cmp	r0, #0
   1d734:	f43f aeca 	beq.w	1d4cc <_strtod_l+0xbc>
   1d738:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1d73a:	781b      	ldrb	r3, [r3, #0]
   1d73c:	2b28      	cmp	r3, #40	; 0x28
   1d73e:	d12d      	bne.n	1d79c <_strtod_l+0x38c>
   1d740:	aa20      	add	r2, sp, #128	; 0x80
   1d742:	499a      	ldr	r1, [pc, #616]	; (1d9ac <_strtod_l+0x59c>)
   1d744:	a81d      	add	r0, sp, #116	; 0x74
   1d746:	f018 fc54 	bl	35ff2 <__hexnan>
   1d74a:	2805      	cmp	r0, #5
   1d74c:	d126      	bne.n	1d79c <_strtod_l+0x38c>
   1d74e:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1d750:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   1d754:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   1d758:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   1d75c:	e69a      	b.n	1d494 <_strtod_l+0x84>
   1d75e:	210a      	movs	r1, #10
   1d760:	fb01 3e0e 	mla	lr, r1, lr, r3
   1d764:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   1d768:	e7b9      	b.n	1d6de <_strtod_l+0x2ce>
   1d76a:	2b6e      	cmp	r3, #110	; 0x6e
   1d76c:	e7db      	b.n	1d726 <_strtod_l+0x316>
   1d76e:	4990      	ldr	r1, [pc, #576]	; (1d9b0 <_strtod_l+0x5a0>)
   1d770:	a81d      	add	r0, sp, #116	; 0x74
   1d772:	f018 fc2a 	bl	35fca <__match>
   1d776:	2800      	cmp	r0, #0
   1d778:	f43f aea8 	beq.w	1d4cc <_strtod_l+0xbc>
   1d77c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1d77e:	a81d      	add	r0, sp, #116	; 0x74
   1d780:	498c      	ldr	r1, [pc, #560]	; (1d9b4 <_strtod_l+0x5a4>)
   1d782:	3b01      	subs	r3, #1
   1d784:	931d      	str	r3, [sp, #116]	; 0x74
   1d786:	f018 fc20 	bl	35fca <__match>
   1d78a:	b910      	cbnz	r0, 1d792 <_strtod_l+0x382>
   1d78c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1d78e:	3301      	adds	r3, #1
   1d790:	931d      	str	r3, [sp, #116]	; 0x74
   1d792:	f8df b230 	ldr.w	fp, [pc, #560]	; 1d9c4 <_strtod_l+0x5b4>
   1d796:	f04f 0a00 	mov.w	sl, #0
   1d79a:	e67b      	b.n	1d494 <_strtod_l+0x84>
   1d79c:	4886      	ldr	r0, [pc, #536]	; (1d9b8 <_strtod_l+0x5a8>)
   1d79e:	f000 fc47 	bl	1e030 <nan>
   1d7a2:	ed8d 0b04 	vstr	d0, [sp, #16]
   1d7a6:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   1d7aa:	e673      	b.n	1d494 <_strtod_l+0x84>
   1d7ac:	9b07      	ldr	r3, [sp, #28]
   1d7ae:	2f00      	cmp	r7, #0
   1d7b0:	bf08      	it	eq
   1d7b2:	462f      	moveq	r7, r5
   1d7b4:	2d10      	cmp	r5, #16
   1d7b6:	9809      	ldr	r0, [sp, #36]	; 0x24
   1d7b8:	eba6 0303 	sub.w	r3, r6, r3
   1d7bc:	46a8      	mov	r8, r5
   1d7be:	bfa8      	it	ge
   1d7c0:	f04f 0810 	movge.w	r8, #16
   1d7c4:	9308      	str	r3, [sp, #32]
   1d7c6:	f7fe ff7d 	bl	1c6c4 <__aeabi_ui2d>
   1d7ca:	2d09      	cmp	r5, #9
   1d7cc:	4682      	mov	sl, r0
   1d7ce:	468b      	mov	fp, r1
   1d7d0:	dd13      	ble.n	1d7fa <_strtod_l+0x3ea>
   1d7d2:	4b7a      	ldr	r3, [pc, #488]	; (1d9bc <_strtod_l+0x5ac>)
   1d7d4:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   1d7d8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   1d7dc:	f7ff fa16 	bl	1cc0c <__aeabi_dmul>
   1d7e0:	4682      	mov	sl, r0
   1d7e2:	468b      	mov	fp, r1
   1d7e4:	4648      	mov	r0, r9
   1d7e6:	f7fe ff6d 	bl	1c6c4 <__aeabi_ui2d>
   1d7ea:	4602      	mov	r2, r0
   1d7ec:	460b      	mov	r3, r1
   1d7ee:	4650      	mov	r0, sl
   1d7f0:	4659      	mov	r1, fp
   1d7f2:	f7fe fe2b 	bl	1c44c <__adddf3>
   1d7f6:	4682      	mov	sl, r0
   1d7f8:	468b      	mov	fp, r1
   1d7fa:	2d0f      	cmp	r5, #15
   1d7fc:	dc38      	bgt.n	1d870 <_strtod_l+0x460>
   1d7fe:	9b08      	ldr	r3, [sp, #32]
   1d800:	2b00      	cmp	r3, #0
   1d802:	f43f ae47 	beq.w	1d494 <_strtod_l+0x84>
   1d806:	dd24      	ble.n	1d852 <_strtod_l+0x442>
   1d808:	2b16      	cmp	r3, #22
   1d80a:	dc0b      	bgt.n	1d824 <_strtod_l+0x414>
   1d80c:	4d6b      	ldr	r5, [pc, #428]	; (1d9bc <_strtod_l+0x5ac>)
   1d80e:	4652      	mov	r2, sl
   1d810:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   1d814:	465b      	mov	r3, fp
   1d816:	e9d5 0100 	ldrd	r0, r1, [r5]
   1d81a:	f7ff f9f7 	bl	1cc0c <__aeabi_dmul>
   1d81e:	4682      	mov	sl, r0
   1d820:	468b      	mov	fp, r1
   1d822:	e637      	b.n	1d494 <_strtod_l+0x84>
   1d824:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   1d828:	9a08      	ldr	r2, [sp, #32]
   1d82a:	4293      	cmp	r3, r2
   1d82c:	db20      	blt.n	1d870 <_strtod_l+0x460>
   1d82e:	f1c5 050f 	rsb	r5, r5, #15
   1d832:	4c62      	ldr	r4, [pc, #392]	; (1d9bc <_strtod_l+0x5ac>)
   1d834:	4652      	mov	r2, sl
   1d836:	465b      	mov	r3, fp
   1d838:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   1d83c:	e9d1 0100 	ldrd	r0, r1, [r1]
   1d840:	f7ff f9e4 	bl	1cc0c <__aeabi_dmul>
   1d844:	9b08      	ldr	r3, [sp, #32]
   1d846:	1b5d      	subs	r5, r3, r5
   1d848:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   1d84c:	e9d4 2300 	ldrd	r2, r3, [r4]
   1d850:	e7e3      	b.n	1d81a <_strtod_l+0x40a>
   1d852:	9b08      	ldr	r3, [sp, #32]
   1d854:	3316      	adds	r3, #22
   1d856:	db0b      	blt.n	1d870 <_strtod_l+0x460>
   1d858:	9b07      	ldr	r3, [sp, #28]
   1d85a:	4650      	mov	r0, sl
   1d85c:	4a57      	ldr	r2, [pc, #348]	; (1d9bc <_strtod_l+0x5ac>)
   1d85e:	4659      	mov	r1, fp
   1d860:	1b9e      	subs	r6, r3, r6
   1d862:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   1d866:	e9d6 2300 	ldrd	r2, r3, [r6]
   1d86a:	f7ff faf9 	bl	1ce60 <__aeabi_ddiv>
   1d86e:	e7d6      	b.n	1d81e <_strtod_l+0x40e>
   1d870:	eba5 0808 	sub.w	r8, r5, r8
   1d874:	9b08      	ldr	r3, [sp, #32]
   1d876:	4498      	add	r8, r3
   1d878:	f1b8 0f00 	cmp.w	r8, #0
   1d87c:	dd71      	ble.n	1d962 <_strtod_l+0x552>
   1d87e:	f018 030f 	ands.w	r3, r8, #15
   1d882:	d00a      	beq.n	1d89a <_strtod_l+0x48a>
   1d884:	494d      	ldr	r1, [pc, #308]	; (1d9bc <_strtod_l+0x5ac>)
   1d886:	4652      	mov	r2, sl
   1d888:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1d88c:	465b      	mov	r3, fp
   1d88e:	e9d1 0100 	ldrd	r0, r1, [r1]
   1d892:	f7ff f9bb 	bl	1cc0c <__aeabi_dmul>
   1d896:	4682      	mov	sl, r0
   1d898:	468b      	mov	fp, r1
   1d89a:	f038 080f 	bics.w	r8, r8, #15
   1d89e:	d04d      	beq.n	1d93c <_strtod_l+0x52c>
   1d8a0:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   1d8a4:	dd22      	ble.n	1d8ec <_strtod_l+0x4dc>
   1d8a6:	2500      	movs	r5, #0
   1d8a8:	462e      	mov	r6, r5
   1d8aa:	9509      	str	r5, [sp, #36]	; 0x24
   1d8ac:	9507      	str	r5, [sp, #28]
   1d8ae:	2322      	movs	r3, #34	; 0x22
   1d8b0:	f8df b110 	ldr.w	fp, [pc, #272]	; 1d9c4 <_strtod_l+0x5b4>
   1d8b4:	f04f 0a00 	mov.w	sl, #0
   1d8b8:	6023      	str	r3, [r4, #0]
   1d8ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1d8bc:	2b00      	cmp	r3, #0
   1d8be:	f43f ade9 	beq.w	1d494 <_strtod_l+0x84>
   1d8c2:	991e      	ldr	r1, [sp, #120]	; 0x78
   1d8c4:	4620      	mov	r0, r4
   1d8c6:	f018 fcb7 	bl	36238 <_Bfree>
   1d8ca:	9907      	ldr	r1, [sp, #28]
   1d8cc:	4620      	mov	r0, r4
   1d8ce:	f018 fcb3 	bl	36238 <_Bfree>
   1d8d2:	4631      	mov	r1, r6
   1d8d4:	4620      	mov	r0, r4
   1d8d6:	f018 fcaf 	bl	36238 <_Bfree>
   1d8da:	9909      	ldr	r1, [sp, #36]	; 0x24
   1d8dc:	4620      	mov	r0, r4
   1d8de:	f018 fcab 	bl	36238 <_Bfree>
   1d8e2:	4629      	mov	r1, r5
   1d8e4:	4620      	mov	r0, r4
   1d8e6:	f018 fca7 	bl	36238 <_Bfree>
   1d8ea:	e5d3      	b.n	1d494 <_strtod_l+0x84>
   1d8ec:	2300      	movs	r3, #0
   1d8ee:	ea4f 1828 	mov.w	r8, r8, asr #4
   1d8f2:	4650      	mov	r0, sl
   1d8f4:	4659      	mov	r1, fp
   1d8f6:	4699      	mov	r9, r3
   1d8f8:	f1b8 0f01 	cmp.w	r8, #1
   1d8fc:	dc21      	bgt.n	1d942 <_strtod_l+0x532>
   1d8fe:	b10b      	cbz	r3, 1d904 <_strtod_l+0x4f4>
   1d900:	4682      	mov	sl, r0
   1d902:	468b      	mov	fp, r1
   1d904:	4b2e      	ldr	r3, [pc, #184]	; (1d9c0 <_strtod_l+0x5b0>)
   1d906:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   1d90a:	4652      	mov	r2, sl
   1d90c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   1d910:	465b      	mov	r3, fp
   1d912:	e9d9 0100 	ldrd	r0, r1, [r9]
   1d916:	f7ff f979 	bl	1cc0c <__aeabi_dmul>
   1d91a:	4b2a      	ldr	r3, [pc, #168]	; (1d9c4 <_strtod_l+0x5b4>)
   1d91c:	460a      	mov	r2, r1
   1d91e:	4682      	mov	sl, r0
   1d920:	400b      	ands	r3, r1
   1d922:	4929      	ldr	r1, [pc, #164]	; (1d9c8 <_strtod_l+0x5b8>)
   1d924:	428b      	cmp	r3, r1
   1d926:	d8be      	bhi.n	1d8a6 <_strtod_l+0x496>
   1d928:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   1d92c:	428b      	cmp	r3, r1
   1d92e:	bf86      	itte	hi
   1d930:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 1d9cc <_strtod_l+0x5bc>
   1d934:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   1d938:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   1d93c:	2300      	movs	r3, #0
   1d93e:	9304      	str	r3, [sp, #16]
   1d940:	e082      	b.n	1da48 <_strtod_l+0x638>
   1d942:	f018 0f01 	tst.w	r8, #1
   1d946:	d007      	beq.n	1d958 <_strtod_l+0x548>
   1d948:	4b1d      	ldr	r3, [pc, #116]	; (1d9c0 <_strtod_l+0x5b0>)
   1d94a:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   1d94e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d952:	f7ff f95b 	bl	1cc0c <__aeabi_dmul>
   1d956:	2301      	movs	r3, #1
   1d958:	f109 0901 	add.w	r9, r9, #1
   1d95c:	ea4f 0868 	mov.w	r8, r8, asr #1
   1d960:	e7ca      	b.n	1d8f8 <_strtod_l+0x4e8>
   1d962:	d0eb      	beq.n	1d93c <_strtod_l+0x52c>
   1d964:	f1c8 0800 	rsb	r8, r8, #0
   1d968:	f018 020f 	ands.w	r2, r8, #15
   1d96c:	d00a      	beq.n	1d984 <_strtod_l+0x574>
   1d96e:	4b13      	ldr	r3, [pc, #76]	; (1d9bc <_strtod_l+0x5ac>)
   1d970:	4650      	mov	r0, sl
   1d972:	4659      	mov	r1, fp
   1d974:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1d978:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d97c:	f7ff fa70 	bl	1ce60 <__aeabi_ddiv>
   1d980:	4682      	mov	sl, r0
   1d982:	468b      	mov	fp, r1
   1d984:	ea5f 1828 	movs.w	r8, r8, asr #4
   1d988:	d0d8      	beq.n	1d93c <_strtod_l+0x52c>
   1d98a:	f1b8 0f1f 	cmp.w	r8, #31
   1d98e:	dd1f      	ble.n	1d9d0 <_strtod_l+0x5c0>
   1d990:	2500      	movs	r5, #0
   1d992:	462e      	mov	r6, r5
   1d994:	9509      	str	r5, [sp, #36]	; 0x24
   1d996:	9507      	str	r5, [sp, #28]
   1d998:	2322      	movs	r3, #34	; 0x22
   1d99a:	f04f 0a00 	mov.w	sl, #0
   1d99e:	f04f 0b00 	mov.w	fp, #0
   1d9a2:	6023      	str	r3, [r4, #0]
   1d9a4:	e789      	b.n	1d8ba <_strtod_l+0x4aa>
   1d9a6:	bf00      	nop
   1d9a8:	0003b4e9 	.word	0x0003b4e9
   1d9ac:	00037520 	.word	0x00037520
   1d9b0:	0003b4e0 	.word	0x0003b4e0
   1d9b4:	0003b4e3 	.word	0x0003b4e3
   1d9b8:	00038d12 	.word	0x00038d12
   1d9bc:	00036e98 	.word	0x00036e98
   1d9c0:	00036e70 	.word	0x00036e70
   1d9c4:	7ff00000 	.word	0x7ff00000
   1d9c8:	7ca00000 	.word	0x7ca00000
   1d9cc:	7fefffff 	.word	0x7fefffff
   1d9d0:	f018 0310 	ands.w	r3, r8, #16
   1d9d4:	4650      	mov	r0, sl
   1d9d6:	4659      	mov	r1, fp
   1d9d8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 1dd90 <_strtod_l+0x980>
   1d9dc:	bf18      	it	ne
   1d9de:	236a      	movne	r3, #106	; 0x6a
   1d9e0:	9304      	str	r3, [sp, #16]
   1d9e2:	2300      	movs	r3, #0
   1d9e4:	f018 0f01 	tst.w	r8, #1
   1d9e8:	d004      	beq.n	1d9f4 <_strtod_l+0x5e4>
   1d9ea:	e9d9 2300 	ldrd	r2, r3, [r9]
   1d9ee:	f7ff f90d 	bl	1cc0c <__aeabi_dmul>
   1d9f2:	2301      	movs	r3, #1
   1d9f4:	ea5f 0868 	movs.w	r8, r8, asr #1
   1d9f8:	f109 0908 	add.w	r9, r9, #8
   1d9fc:	d1f2      	bne.n	1d9e4 <_strtod_l+0x5d4>
   1d9fe:	b10b      	cbz	r3, 1da04 <_strtod_l+0x5f4>
   1da00:	4682      	mov	sl, r0
   1da02:	468b      	mov	fp, r1
   1da04:	9b04      	ldr	r3, [sp, #16]
   1da06:	b1bb      	cbz	r3, 1da38 <_strtod_l+0x628>
   1da08:	f3cb 530a 	ubfx	r3, fp, #20, #11
   1da0c:	4659      	mov	r1, fp
   1da0e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   1da12:	2b00      	cmp	r3, #0
   1da14:	dd10      	ble.n	1da38 <_strtod_l+0x628>
   1da16:	2b1f      	cmp	r3, #31
   1da18:	f340 8127 	ble.w	1dc6a <_strtod_l+0x85a>
   1da1c:	2b34      	cmp	r3, #52	; 0x34
   1da1e:	f04f 0a00 	mov.w	sl, #0
   1da22:	bfdb      	ittet	le
   1da24:	3b20      	suble	r3, #32
   1da26:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   1da2a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   1da2e:	fa02 f303 	lslle.w	r3, r2, r3
   1da32:	bfd8      	it	le
   1da34:	ea03 0b01 	andle.w	fp, r3, r1
   1da38:	2200      	movs	r2, #0
   1da3a:	2300      	movs	r3, #0
   1da3c:	4650      	mov	r0, sl
   1da3e:	4659      	mov	r1, fp
   1da40:	f7fe ff10 	bl	1c864 <__aeabi_dcmpeq>
   1da44:	2800      	cmp	r0, #0
   1da46:	d1a3      	bne.n	1d990 <_strtod_l+0x580>
   1da48:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1da4a:	463a      	mov	r2, r7
   1da4c:	990a      	ldr	r1, [sp, #40]	; 0x28
   1da4e:	4620      	mov	r0, r4
   1da50:	9300      	str	r3, [sp, #0]
   1da52:	462b      	mov	r3, r5
   1da54:	f018 fc46 	bl	362e4 <__s2b>
   1da58:	9009      	str	r0, [sp, #36]	; 0x24
   1da5a:	2800      	cmp	r0, #0
   1da5c:	f43f af23 	beq.w	1d8a6 <_strtod_l+0x496>
   1da60:	9b07      	ldr	r3, [sp, #28]
   1da62:	2500      	movs	r5, #0
   1da64:	1b9e      	subs	r6, r3, r6
   1da66:	9b08      	ldr	r3, [sp, #32]
   1da68:	2b00      	cmp	r3, #0
   1da6a:	bfb4      	ite	lt
   1da6c:	4633      	movlt	r3, r6
   1da6e:	2300      	movge	r3, #0
   1da70:	462e      	mov	r6, r5
   1da72:	9310      	str	r3, [sp, #64]	; 0x40
   1da74:	9b08      	ldr	r3, [sp, #32]
   1da76:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1da7a:	9318      	str	r3, [sp, #96]	; 0x60
   1da7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1da7e:	4620      	mov	r0, r4
   1da80:	6859      	ldr	r1, [r3, #4]
   1da82:	f018 fba5 	bl	361d0 <_Balloc>
   1da86:	9007      	str	r0, [sp, #28]
   1da88:	2800      	cmp	r0, #0
   1da8a:	f43f af10 	beq.w	1d8ae <_strtod_l+0x49e>
   1da8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1da90:	300c      	adds	r0, #12
   1da92:	691a      	ldr	r2, [r3, #16]
   1da94:	f103 010c 	add.w	r1, r3, #12
   1da98:	3202      	adds	r2, #2
   1da9a:	0092      	lsls	r2, r2, #2
   1da9c:	f018 f834 	bl	35b08 <memcpy>
   1daa0:	aa20      	add	r2, sp, #128	; 0x80
   1daa2:	a91f      	add	r1, sp, #124	; 0x7c
   1daa4:	4620      	mov	r0, r4
   1daa6:	ec4b ab10 	vmov	d0, sl, fp
   1daaa:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   1daae:	f018 fe43 	bl	36738 <__d2b>
   1dab2:	901e      	str	r0, [sp, #120]	; 0x78
   1dab4:	2800      	cmp	r0, #0
   1dab6:	f43f aefa 	beq.w	1d8ae <_strtod_l+0x49e>
   1daba:	2101      	movs	r1, #1
   1dabc:	4620      	mov	r0, r4
   1dabe:	f018 fc9f 	bl	36400 <__i2b>
   1dac2:	4606      	mov	r6, r0
   1dac4:	2800      	cmp	r0, #0
   1dac6:	f43f aef2 	beq.w	1d8ae <_strtod_l+0x49e>
   1daca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1dacc:	9904      	ldr	r1, [sp, #16]
   1dace:	2b00      	cmp	r3, #0
   1dad0:	eba3 0801 	sub.w	r8, r3, r1
   1dad4:	bfa9      	itett	ge
   1dad6:	9a10      	ldrge	r2, [sp, #64]	; 0x40
   1dad8:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
   1dada:	eb03 0902 	addge.w	r9, r3, r2
   1dade:	9f18      	ldrge	r7, [sp, #96]	; 0x60
   1dae0:	bfb8      	it	lt
   1dae2:	1ad7      	sublt	r7, r2, r3
   1dae4:	9a20      	ldr	r2, [sp, #128]	; 0x80
   1dae6:	4ba5      	ldr	r3, [pc, #660]	; (1dd7c <_strtod_l+0x96c>)
   1dae8:	4490      	add	r8, r2
   1daea:	bfb8      	it	lt
   1daec:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
   1daf0:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   1daf4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   1daf8:	4598      	cmp	r8, r3
   1dafa:	f280 80ca 	bge.w	1dc92 <_strtod_l+0x882>
   1dafe:	eba3 0308 	sub.w	r3, r3, r8
   1db02:	2101      	movs	r1, #1
   1db04:	2b1f      	cmp	r3, #31
   1db06:	eba2 0203 	sub.w	r2, r2, r3
   1db0a:	f300 80b5 	bgt.w	1dc78 <_strtod_l+0x868>
   1db0e:	fa01 f303 	lsl.w	r3, r1, r3
   1db12:	9311      	str	r3, [sp, #68]	; 0x44
   1db14:	2300      	movs	r3, #0
   1db16:	930c      	str	r3, [sp, #48]	; 0x30
   1db18:	eb09 0802 	add.w	r8, r9, r2
   1db1c:	9b04      	ldr	r3, [sp, #16]
   1db1e:	4417      	add	r7, r2
   1db20:	45c1      	cmp	r9, r8
   1db22:	441f      	add	r7, r3
   1db24:	464b      	mov	r3, r9
   1db26:	bfa8      	it	ge
   1db28:	4643      	movge	r3, r8
   1db2a:	42bb      	cmp	r3, r7
   1db2c:	bfa8      	it	ge
   1db2e:	463b      	movge	r3, r7
   1db30:	2b00      	cmp	r3, #0
   1db32:	bfc2      	ittt	gt
   1db34:	eba8 0803 	subgt.w	r8, r8, r3
   1db38:	1aff      	subgt	r7, r7, r3
   1db3a:	eba9 0903 	subgt.w	r9, r9, r3
   1db3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1db40:	2b00      	cmp	r3, #0
   1db42:	dd17      	ble.n	1db74 <_strtod_l+0x764>
   1db44:	4631      	mov	r1, r6
   1db46:	461a      	mov	r2, r3
   1db48:	4620      	mov	r0, r4
   1db4a:	f015 f997 	bl	32e7c <__pow5mult>
   1db4e:	4606      	mov	r6, r0
   1db50:	2800      	cmp	r0, #0
   1db52:	f43f aeac 	beq.w	1d8ae <_strtod_l+0x49e>
   1db56:	4601      	mov	r1, r0
   1db58:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   1db5a:	4620      	mov	r0, r4
   1db5c:	f018 fc59 	bl	36412 <__multiply>
   1db60:	900f      	str	r0, [sp, #60]	; 0x3c
   1db62:	2800      	cmp	r0, #0
   1db64:	f43f aea3 	beq.w	1d8ae <_strtod_l+0x49e>
   1db68:	991e      	ldr	r1, [sp, #120]	; 0x78
   1db6a:	4620      	mov	r0, r4
   1db6c:	f018 fb64 	bl	36238 <_Bfree>
   1db70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1db72:	931e      	str	r3, [sp, #120]	; 0x78
   1db74:	f1b8 0f00 	cmp.w	r8, #0
   1db78:	f300 8090 	bgt.w	1dc9c <_strtod_l+0x88c>
   1db7c:	9b08      	ldr	r3, [sp, #32]
   1db7e:	2b00      	cmp	r3, #0
   1db80:	dd08      	ble.n	1db94 <_strtod_l+0x784>
   1db82:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1db84:	4620      	mov	r0, r4
   1db86:	9907      	ldr	r1, [sp, #28]
   1db88:	f015 f978 	bl	32e7c <__pow5mult>
   1db8c:	9007      	str	r0, [sp, #28]
   1db8e:	2800      	cmp	r0, #0
   1db90:	f43f ae8d 	beq.w	1d8ae <_strtod_l+0x49e>
   1db94:	2f00      	cmp	r7, #0
   1db96:	dd08      	ble.n	1dbaa <_strtod_l+0x79a>
   1db98:	463a      	mov	r2, r7
   1db9a:	9907      	ldr	r1, [sp, #28]
   1db9c:	4620      	mov	r0, r4
   1db9e:	f018 fcd3 	bl	36548 <__lshift>
   1dba2:	9007      	str	r0, [sp, #28]
   1dba4:	2800      	cmp	r0, #0
   1dba6:	f43f ae82 	beq.w	1d8ae <_strtod_l+0x49e>
   1dbaa:	f1b9 0f00 	cmp.w	r9, #0
   1dbae:	dd08      	ble.n	1dbc2 <_strtod_l+0x7b2>
   1dbb0:	4631      	mov	r1, r6
   1dbb2:	464a      	mov	r2, r9
   1dbb4:	4620      	mov	r0, r4
   1dbb6:	f018 fcc7 	bl	36548 <__lshift>
   1dbba:	4606      	mov	r6, r0
   1dbbc:	2800      	cmp	r0, #0
   1dbbe:	f43f ae76 	beq.w	1d8ae <_strtod_l+0x49e>
   1dbc2:	9a07      	ldr	r2, [sp, #28]
   1dbc4:	4620      	mov	r0, r4
   1dbc6:	991e      	ldr	r1, [sp, #120]	; 0x78
   1dbc8:	f018 fd39 	bl	3663e <__mdiff>
   1dbcc:	4605      	mov	r5, r0
   1dbce:	2800      	cmp	r0, #0
   1dbd0:	f43f ae6d 	beq.w	1d8ae <_strtod_l+0x49e>
   1dbd4:	68c3      	ldr	r3, [r0, #12]
   1dbd6:	4631      	mov	r1, r6
   1dbd8:	930f      	str	r3, [sp, #60]	; 0x3c
   1dbda:	2300      	movs	r3, #0
   1dbdc:	60c3      	str	r3, [r0, #12]
   1dbde:	f018 fd12 	bl	36606 <__mcmp>
   1dbe2:	2800      	cmp	r0, #0
   1dbe4:	da64      	bge.n	1dcb0 <_strtod_l+0x8a0>
   1dbe6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1dbe8:	ea53 030a 	orrs.w	r3, r3, sl
   1dbec:	f040 8086 	bne.w	1dcfc <_strtod_l+0x8ec>
   1dbf0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1dbf4:	2b00      	cmp	r3, #0
   1dbf6:	f040 8081 	bne.w	1dcfc <_strtod_l+0x8ec>
   1dbfa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   1dbfe:	0d1b      	lsrs	r3, r3, #20
   1dc00:	051b      	lsls	r3, r3, #20
   1dc02:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   1dc06:	d979      	bls.n	1dcfc <_strtod_l+0x8ec>
   1dc08:	696b      	ldr	r3, [r5, #20]
   1dc0a:	b913      	cbnz	r3, 1dc12 <_strtod_l+0x802>
   1dc0c:	692b      	ldr	r3, [r5, #16]
   1dc0e:	2b01      	cmp	r3, #1
   1dc10:	dd74      	ble.n	1dcfc <_strtod_l+0x8ec>
   1dc12:	4629      	mov	r1, r5
   1dc14:	2201      	movs	r2, #1
   1dc16:	4620      	mov	r0, r4
   1dc18:	f018 fc96 	bl	36548 <__lshift>
   1dc1c:	4631      	mov	r1, r6
   1dc1e:	4605      	mov	r5, r0
   1dc20:	f018 fcf1 	bl	36606 <__mcmp>
   1dc24:	2800      	cmp	r0, #0
   1dc26:	dd69      	ble.n	1dcfc <_strtod_l+0x8ec>
   1dc28:	9904      	ldr	r1, [sp, #16]
   1dc2a:	465b      	mov	r3, fp
   1dc2c:	4a54      	ldr	r2, [pc, #336]	; (1dd80 <_strtod_l+0x970>)
   1dc2e:	2900      	cmp	r1, #0
   1dc30:	f000 8084 	beq.w	1dd3c <_strtod_l+0x92c>
   1dc34:	ea02 010b 	and.w	r1, r2, fp
   1dc38:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   1dc3c:	dc7e      	bgt.n	1dd3c <_strtod_l+0x92c>
   1dc3e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   1dc42:	f77f aea9 	ble.w	1d998 <_strtod_l+0x588>
   1dc46:	2300      	movs	r3, #0
   1dc48:	4a4e      	ldr	r2, [pc, #312]	; (1dd84 <_strtod_l+0x974>)
   1dc4a:	4650      	mov	r0, sl
   1dc4c:	4659      	mov	r1, fp
   1dc4e:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   1dc52:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   1dc56:	f7fe ffd9 	bl	1cc0c <__aeabi_dmul>
   1dc5a:	460b      	mov	r3, r1
   1dc5c:	4682      	mov	sl, r0
   1dc5e:	468b      	mov	fp, r1
   1dc60:	4303      	orrs	r3, r0
   1dc62:	bf04      	itt	eq
   1dc64:	2322      	moveq	r3, #34	; 0x22
   1dc66:	6023      	streq	r3, [r4, #0]
   1dc68:	e62b      	b.n	1d8c2 <_strtod_l+0x4b2>
   1dc6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1dc6e:	fa02 f303 	lsl.w	r3, r2, r3
   1dc72:	ea03 0a0a 	and.w	sl, r3, sl
   1dc76:	e6df      	b.n	1da38 <_strtod_l+0x628>
   1dc78:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   1dc7c:	9111      	str	r1, [sp, #68]	; 0x44
   1dc7e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   1dc82:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   1dc86:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   1dc8a:	fa01 f308 	lsl.w	r3, r1, r8
   1dc8e:	930c      	str	r3, [sp, #48]	; 0x30
   1dc90:	e742      	b.n	1db18 <_strtod_l+0x708>
   1dc92:	2300      	movs	r3, #0
   1dc94:	930c      	str	r3, [sp, #48]	; 0x30
   1dc96:	2301      	movs	r3, #1
   1dc98:	9311      	str	r3, [sp, #68]	; 0x44
   1dc9a:	e73d      	b.n	1db18 <_strtod_l+0x708>
   1dc9c:	4642      	mov	r2, r8
   1dc9e:	991e      	ldr	r1, [sp, #120]	; 0x78
   1dca0:	4620      	mov	r0, r4
   1dca2:	f018 fc51 	bl	36548 <__lshift>
   1dca6:	901e      	str	r0, [sp, #120]	; 0x78
   1dca8:	2800      	cmp	r0, #0
   1dcaa:	f47f af67 	bne.w	1db7c <_strtod_l+0x76c>
   1dcae:	e5fe      	b.n	1d8ae <_strtod_l+0x49e>
   1dcb0:	465f      	mov	r7, fp
   1dcb2:	d16f      	bne.n	1dd94 <_strtod_l+0x984>
   1dcb4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1dcb6:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1dcba:	b342      	cbz	r2, 1dd0e <_strtod_l+0x8fe>
   1dcbc:	4a32      	ldr	r2, [pc, #200]	; (1dd88 <_strtod_l+0x978>)
   1dcbe:	4293      	cmp	r3, r2
   1dcc0:	d128      	bne.n	1dd14 <_strtod_l+0x904>
   1dcc2:	9b04      	ldr	r3, [sp, #16]
   1dcc4:	4650      	mov	r0, sl
   1dcc6:	b1eb      	cbz	r3, 1dd04 <_strtod_l+0x8f4>
   1dcc8:	4a2d      	ldr	r2, [pc, #180]	; (1dd80 <_strtod_l+0x970>)
   1dcca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1dcce:	403a      	ands	r2, r7
   1dcd0:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   1dcd4:	d819      	bhi.n	1dd0a <_strtod_l+0x8fa>
   1dcd6:	0d12      	lsrs	r2, r2, #20
   1dcd8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   1dcdc:	fa01 f303 	lsl.w	r3, r1, r3
   1dce0:	4298      	cmp	r0, r3
   1dce2:	d117      	bne.n	1dd14 <_strtod_l+0x904>
   1dce4:	4b29      	ldr	r3, [pc, #164]	; (1dd8c <_strtod_l+0x97c>)
   1dce6:	429f      	cmp	r7, r3
   1dce8:	d102      	bne.n	1dcf0 <_strtod_l+0x8e0>
   1dcea:	3001      	adds	r0, #1
   1dcec:	f43f addf 	beq.w	1d8ae <_strtod_l+0x49e>
   1dcf0:	4b23      	ldr	r3, [pc, #140]	; (1dd80 <_strtod_l+0x970>)
   1dcf2:	f04f 0a00 	mov.w	sl, #0
   1dcf6:	403b      	ands	r3, r7
   1dcf8:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   1dcfc:	9b04      	ldr	r3, [sp, #16]
   1dcfe:	2b00      	cmp	r3, #0
   1dd00:	d1a1      	bne.n	1dc46 <_strtod_l+0x836>
   1dd02:	e5de      	b.n	1d8c2 <_strtod_l+0x4b2>
   1dd04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1dd08:	e7ea      	b.n	1dce0 <_strtod_l+0x8d0>
   1dd0a:	460b      	mov	r3, r1
   1dd0c:	e7e8      	b.n	1dce0 <_strtod_l+0x8d0>
   1dd0e:	ea53 030a 	orrs.w	r3, r3, sl
   1dd12:	d089      	beq.n	1dc28 <_strtod_l+0x818>
   1dd14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1dd16:	b1db      	cbz	r3, 1dd50 <_strtod_l+0x940>
   1dd18:	423b      	tst	r3, r7
   1dd1a:	d0ef      	beq.n	1dcfc <_strtod_l+0x8ec>
   1dd1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1dd1e:	4650      	mov	r0, sl
   1dd20:	9a04      	ldr	r2, [sp, #16]
   1dd22:	4659      	mov	r1, fp
   1dd24:	b1c3      	cbz	r3, 1dd58 <_strtod_l+0x948>
   1dd26:	f018 f854 	bl	35dd2 <sulp>
   1dd2a:	4602      	mov	r2, r0
   1dd2c:	460b      	mov	r3, r1
   1dd2e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1dd32:	f7fe fb8b 	bl	1c44c <__adddf3>
   1dd36:	4682      	mov	sl, r0
   1dd38:	468b      	mov	fp, r1
   1dd3a:	e7df      	b.n	1dcfc <_strtod_l+0x8ec>
   1dd3c:	4013      	ands	r3, r2
   1dd3e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   1dd42:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   1dd46:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   1dd4a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   1dd4e:	e7d5      	b.n	1dcfc <_strtod_l+0x8ec>
   1dd50:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1dd52:	ea13 0f0a 	tst.w	r3, sl
   1dd56:	e7e0      	b.n	1dd1a <_strtod_l+0x90a>
   1dd58:	f018 f83b 	bl	35dd2 <sulp>
   1dd5c:	4602      	mov	r2, r0
   1dd5e:	460b      	mov	r3, r1
   1dd60:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1dd64:	f7fe fb70 	bl	1c448 <__aeabi_dsub>
   1dd68:	2200      	movs	r2, #0
   1dd6a:	2300      	movs	r3, #0
   1dd6c:	4682      	mov	sl, r0
   1dd6e:	468b      	mov	fp, r1
   1dd70:	f7fe fd78 	bl	1c864 <__aeabi_dcmpeq>
   1dd74:	2800      	cmp	r0, #0
   1dd76:	d0c1      	beq.n	1dcfc <_strtod_l+0x8ec>
   1dd78:	e60e      	b.n	1d998 <_strtod_l+0x588>
   1dd7a:	bf00      	nop
   1dd7c:	fffffc02 	.word	0xfffffc02
   1dd80:	7ff00000 	.word	0x7ff00000
   1dd84:	39500000 	.word	0x39500000
   1dd88:	000fffff 	.word	0x000fffff
   1dd8c:	7fefffff 	.word	0x7fefffff
   1dd90:	00036e48 	.word	0x00036e48
   1dd94:	4631      	mov	r1, r6
   1dd96:	4628      	mov	r0, r5
   1dd98:	f018 fd1e 	bl	367d8 <__ratio>
   1dd9c:	2200      	movs	r2, #0
   1dd9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1dda2:	ee10 0a10 	vmov	r0, s0
   1dda6:	ec59 8b10 	vmov	r8, r9, d0
   1ddaa:	4649      	mov	r1, r9
   1ddac:	f7fe fd6e 	bl	1c88c <__aeabi_dcmple>
   1ddb0:	2800      	cmp	r0, #0
   1ddb2:	d07c      	beq.n	1deae <_strtod_l+0xa9e>
   1ddb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ddb6:	2b00      	cmp	r3, #0
   1ddb8:	d04c      	beq.n	1de54 <_strtod_l+0xa44>
   1ddba:	2200      	movs	r2, #0
   1ddbc:	4b94      	ldr	r3, [pc, #592]	; (1e010 <_strtod_l+0xc00>)
   1ddbe:	f04f 0800 	mov.w	r8, #0
   1ddc2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 1e010 <_strtod_l+0xc00>
   1ddc6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   1ddca:	4b92      	ldr	r3, [pc, #584]	; (1e014 <_strtod_l+0xc04>)
   1ddcc:	403b      	ands	r3, r7
   1ddce:	9311      	str	r3, [sp, #68]	; 0x44
   1ddd0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1ddd2:	4b91      	ldr	r3, [pc, #580]	; (1e018 <_strtod_l+0xc08>)
   1ddd4:	429a      	cmp	r2, r3
   1ddd6:	f040 80b2 	bne.w	1df3e <_strtod_l+0xb2e>
   1ddda:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   1ddde:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1dde2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   1dde6:	ec4b ab10 	vmov	d0, sl, fp
   1ddea:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   1ddee:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   1ddf2:	f015 f891 	bl	32f18 <__ulp>
   1ddf6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   1ddfa:	ec53 2b10 	vmov	r2, r3, d0
   1ddfe:	f7fe ff05 	bl	1cc0c <__aeabi_dmul>
   1de02:	4652      	mov	r2, sl
   1de04:	465b      	mov	r3, fp
   1de06:	f7fe fb21 	bl	1c44c <__adddf3>
   1de0a:	460b      	mov	r3, r1
   1de0c:	4981      	ldr	r1, [pc, #516]	; (1e014 <_strtod_l+0xc04>)
   1de0e:	4682      	mov	sl, r0
   1de10:	4a82      	ldr	r2, [pc, #520]	; (1e01c <_strtod_l+0xc0c>)
   1de12:	4019      	ands	r1, r3
   1de14:	4291      	cmp	r1, r2
   1de16:	d95e      	bls.n	1ded6 <_strtod_l+0xac6>
   1de18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1de1a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   1de1e:	4293      	cmp	r3, r2
   1de20:	d103      	bne.n	1de2a <_strtod_l+0xa1a>
   1de22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1de24:	3301      	adds	r3, #1
   1de26:	f43f ad42 	beq.w	1d8ae <_strtod_l+0x49e>
   1de2a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 1e028 <_strtod_l+0xc18>
   1de2e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   1de32:	991e      	ldr	r1, [sp, #120]	; 0x78
   1de34:	4620      	mov	r0, r4
   1de36:	f018 f9ff 	bl	36238 <_Bfree>
   1de3a:	9907      	ldr	r1, [sp, #28]
   1de3c:	4620      	mov	r0, r4
   1de3e:	f018 f9fb 	bl	36238 <_Bfree>
   1de42:	4631      	mov	r1, r6
   1de44:	4620      	mov	r0, r4
   1de46:	f018 f9f7 	bl	36238 <_Bfree>
   1de4a:	4629      	mov	r1, r5
   1de4c:	4620      	mov	r0, r4
   1de4e:	f018 f9f3 	bl	36238 <_Bfree>
   1de52:	e613      	b.n	1da7c <_strtod_l+0x66c>
   1de54:	f1ba 0f00 	cmp.w	sl, #0
   1de58:	d11b      	bne.n	1de92 <_strtod_l+0xa82>
   1de5a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1de5e:	b9f3      	cbnz	r3, 1de9e <_strtod_l+0xa8e>
   1de60:	2200      	movs	r2, #0
   1de62:	4b6b      	ldr	r3, [pc, #428]	; (1e010 <_strtod_l+0xc00>)
   1de64:	4640      	mov	r0, r8
   1de66:	4649      	mov	r1, r9
   1de68:	f7fe fd06 	bl	1c878 <__aeabi_dcmplt>
   1de6c:	b9d0      	cbnz	r0, 1dea4 <_strtod_l+0xa94>
   1de6e:	4640      	mov	r0, r8
   1de70:	4649      	mov	r1, r9
   1de72:	2200      	movs	r2, #0
   1de74:	4b6a      	ldr	r3, [pc, #424]	; (1e020 <_strtod_l+0xc10>)
   1de76:	f7fe fec9 	bl	1cc0c <__aeabi_dmul>
   1de7a:	4680      	mov	r8, r0
   1de7c:	4689      	mov	r9, r1
   1de7e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   1de82:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   1de86:	931b      	str	r3, [sp, #108]	; 0x6c
   1de88:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
   1de8c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   1de90:	e79b      	b.n	1ddca <_strtod_l+0x9ba>
   1de92:	f1ba 0f01 	cmp.w	sl, #1
   1de96:	d102      	bne.n	1de9e <_strtod_l+0xa8e>
   1de98:	2f00      	cmp	r7, #0
   1de9a:	f43f ad7d 	beq.w	1d998 <_strtod_l+0x588>
   1de9e:	2200      	movs	r2, #0
   1dea0:	4b60      	ldr	r3, [pc, #384]	; (1e024 <_strtod_l+0xc14>)
   1dea2:	e78c      	b.n	1ddbe <_strtod_l+0x9ae>
   1dea4:	f04f 0800 	mov.w	r8, #0
   1dea8:	f8df 9174 	ldr.w	r9, [pc, #372]	; 1e020 <_strtod_l+0xc10>
   1deac:	e7e7      	b.n	1de7e <_strtod_l+0xa6e>
   1deae:	4b5c      	ldr	r3, [pc, #368]	; (1e020 <_strtod_l+0xc10>)
   1deb0:	4640      	mov	r0, r8
   1deb2:	4649      	mov	r1, r9
   1deb4:	2200      	movs	r2, #0
   1deb6:	f7fe fea9 	bl	1cc0c <__aeabi_dmul>
   1deba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1debc:	4680      	mov	r8, r0
   1debe:	4689      	mov	r9, r1
   1dec0:	b933      	cbnz	r3, 1ded0 <_strtod_l+0xac0>
   1dec2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1dec6:	9012      	str	r0, [sp, #72]	; 0x48
   1dec8:	9313      	str	r3, [sp, #76]	; 0x4c
   1deca:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   1dece:	e7dd      	b.n	1de8c <_strtod_l+0xa7c>
   1ded0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
   1ded4:	e7f9      	b.n	1deca <_strtod_l+0xaba>
   1ded6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   1deda:	9b04      	ldr	r3, [sp, #16]
   1dedc:	2b00      	cmp	r3, #0
   1dede:	d1a8      	bne.n	1de32 <_strtod_l+0xa22>
   1dee0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   1dee4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1dee6:	0d1b      	lsrs	r3, r3, #20
   1dee8:	051b      	lsls	r3, r3, #20
   1deea:	429a      	cmp	r2, r3
   1deec:	d1a1      	bne.n	1de32 <_strtod_l+0xa22>
   1deee:	4640      	mov	r0, r8
   1def0:	4649      	mov	r1, r9
   1def2:	f7ff f8bd 	bl	1d070 <__aeabi_d2lz>
   1def6:	f7fe fc31 	bl	1c75c <__aeabi_l2d>
   1defa:	4602      	mov	r2, r0
   1defc:	460b      	mov	r3, r1
   1defe:	4640      	mov	r0, r8
   1df00:	4649      	mov	r1, r9
   1df02:	f7fe faa1 	bl	1c448 <__aeabi_dsub>
   1df06:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1df0a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1df0c:	4680      	mov	r8, r0
   1df0e:	ea43 030a 	orr.w	r3, r3, sl
   1df12:	4689      	mov	r9, r1
   1df14:	4313      	orrs	r3, r2
   1df16:	d053      	beq.n	1dfc0 <_strtod_l+0xbb0>
   1df18:	a335      	add	r3, pc, #212	; (adr r3, 1dff0 <_strtod_l+0xbe0>)
   1df1a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1df1e:	f7fe fcab 	bl	1c878 <__aeabi_dcmplt>
   1df22:	2800      	cmp	r0, #0
   1df24:	f47f accd 	bne.w	1d8c2 <_strtod_l+0x4b2>
   1df28:	4640      	mov	r0, r8
   1df2a:	4649      	mov	r1, r9
   1df2c:	a332      	add	r3, pc, #200	; (adr r3, 1dff8 <_strtod_l+0xbe8>)
   1df2e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1df32:	f7fe fcbf 	bl	1c8b4 <__aeabi_dcmpgt>
   1df36:	2800      	cmp	r0, #0
   1df38:	f43f af7b 	beq.w	1de32 <_strtod_l+0xa22>
   1df3c:	e4c1      	b.n	1d8c2 <_strtod_l+0x4b2>
   1df3e:	9b04      	ldr	r3, [sp, #16]
   1df40:	b333      	cbz	r3, 1df90 <_strtod_l+0xb80>
   1df42:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1df44:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   1df48:	d822      	bhi.n	1df90 <_strtod_l+0xb80>
   1df4a:	4640      	mov	r0, r8
   1df4c:	4649      	mov	r1, r9
   1df4e:	a32c      	add	r3, pc, #176	; (adr r3, 1e000 <_strtod_l+0xbf0>)
   1df50:	e9d3 2300 	ldrd	r2, r3, [r3]
   1df54:	f7fe fc9a 	bl	1c88c <__aeabi_dcmple>
   1df58:	b1a0      	cbz	r0, 1df84 <_strtod_l+0xb74>
   1df5a:	4649      	mov	r1, r9
   1df5c:	4640      	mov	r0, r8
   1df5e:	f7ff f867 	bl	1d030 <__aeabi_d2uiz>
   1df62:	2801      	cmp	r0, #1
   1df64:	bf38      	it	cc
   1df66:	2001      	movcc	r0, #1
   1df68:	f7fe fbac 	bl	1c6c4 <__aeabi_ui2d>
   1df6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1df6e:	4680      	mov	r8, r0
   1df70:	4689      	mov	r9, r1
   1df72:	bb13      	cbnz	r3, 1dfba <_strtod_l+0xbaa>
   1df74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1df78:	9014      	str	r0, [sp, #80]	; 0x50
   1df7a:	9315      	str	r3, [sp, #84]	; 0x54
   1df7c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   1df80:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   1df84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1df86:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1df88:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   1df8c:	1a9b      	subs	r3, r3, r2
   1df8e:	930d      	str	r3, [sp, #52]	; 0x34
   1df90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   1df94:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   1df98:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   1df9c:	f014 ffbc 	bl	32f18 <__ulp>
   1dfa0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   1dfa4:	ec53 2b10 	vmov	r2, r3, d0
   1dfa8:	f7fe fe30 	bl	1cc0c <__aeabi_dmul>
   1dfac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1dfb0:	f7fe fa4c 	bl	1c44c <__adddf3>
   1dfb4:	4682      	mov	sl, r0
   1dfb6:	468b      	mov	fp, r1
   1dfb8:	e78f      	b.n	1deda <_strtod_l+0xaca>
   1dfba:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
   1dfbe:	e7dd      	b.n	1df7c <_strtod_l+0xb6c>
   1dfc0:	a311      	add	r3, pc, #68	; (adr r3, 1e008 <_strtod_l+0xbf8>)
   1dfc2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1dfc6:	f7fe fc57 	bl	1c878 <__aeabi_dcmplt>
   1dfca:	e7b4      	b.n	1df36 <_strtod_l+0xb26>
   1dfcc:	2300      	movs	r3, #0
   1dfce:	930e      	str	r3, [sp, #56]	; 0x38
   1dfd0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1dfd2:	9a19      	ldr	r2, [sp, #100]	; 0x64
   1dfd4:	6013      	str	r3, [r2, #0]
   1dfd6:	f7ff ba61 	b.w	1d49c <_strtod_l+0x8c>
   1dfda:	2b65      	cmp	r3, #101	; 0x65
   1dfdc:	f43f ab5a 	beq.w	1d694 <_strtod_l+0x284>
   1dfe0:	2b45      	cmp	r3, #69	; 0x45
   1dfe2:	f43f ab57 	beq.w	1d694 <_strtod_l+0x284>
   1dfe6:	2201      	movs	r2, #1
   1dfe8:	f7ff bb90 	b.w	1d70c <_strtod_l+0x2fc>
   1dfec:	f3af 8000 	nop.w
   1dff0:	94a03595 	.word	0x94a03595
   1dff4:	3fdfffff 	.word	0x3fdfffff
   1dff8:	35afe535 	.word	0x35afe535
   1dffc:	3fe00000 	.word	0x3fe00000
   1e000:	ffc00000 	.word	0xffc00000
   1e004:	41dfffff 	.word	0x41dfffff
   1e008:	94a03595 	.word	0x94a03595
   1e00c:	3fcfffff 	.word	0x3fcfffff
   1e010:	3ff00000 	.word	0x3ff00000
   1e014:	7ff00000 	.word	0x7ff00000
   1e018:	7fe00000 	.word	0x7fe00000
   1e01c:	7c9fffff 	.word	0x7c9fffff
   1e020:	3fe00000 	.word	0x3fe00000
   1e024:	bff00000 	.word	0xbff00000
   1e028:	7fefffff 	.word	0x7fefffff
   1e02c:	00000000 	.word	0x00000000

0001e030 <nan>:
   1e030:	ed9f 0b01 	vldr	d0, [pc, #4]	; 1e038 <nan+0x8>
   1e034:	4770      	bx	lr
   1e036:	bf00      	nop
   1e038:	00000000 	.word	0x00000000
   1e03c:	7ff80000 	.word	0x7ff80000

0001e040 <update_device_shadow_version>:
#define UPDATE_DELTA_TOPIC AWS "%s/shadow/update"
#define SHADOW_STATE_UPDATE \
"{\"state\":{\"reported\":{\"nrfcloud__dfu_v1__app_v\":\"%s\"}}}"

static int update_device_shadow_version(struct mqtt_client *const client)
{
   1e040:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e042:	b0c7      	sub	sp, #284	; 0x11c
   1e044:	4605      	mov	r5, r0
   1e046:	af00      	add	r7, sp, #0
	struct mqtt_publish_param param;
	char update_delta_topic[strlen(AWS) + strlen("/shadow/update") +
   1e048:	481e      	ldr	r0, [pc, #120]	; (1e0c4 <update_device_shadow_version+0x84>)
   1e04a:	f7ff f851 	bl	1d0f0 <strlen>
   1e04e:	4604      	mov	r4, r0
   1e050:	481d      	ldr	r0, [pc, #116]	; (1e0c8 <update_device_shadow_version+0x88>)
   1e052:	f7ff f84d 	bl	1d0f0 <strlen>
   1e056:	1823      	adds	r3, r4, r0
				CLIENT_ID_LEN + 1];
   1e058:	f103 0614 	add.w	r6, r3, #20
	char update_delta_topic[strlen(AWS) + strlen("/shadow/update") +
   1e05c:	331b      	adds	r3, #27
   1e05e:	f023 0307 	bic.w	r3, r3, #7
   1e062:	ebad 0d03 	sub.w	sp, sp, r3
	u8_t shadow_update_payload[CONFIG_DEVICE_SHADOW_PAYLOAD_SIZE];

	int ret = snprintf(update_delta_topic,
   1e066:	4631      	mov	r1, r6
   1e068:	4668      	mov	r0, sp
   1e06a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
   1e06c:	4a17      	ldr	r2, [pc, #92]	; (1e0cc <update_device_shadow_version+0x8c>)
   1e06e:	f014 f879 	bl	32164 <sniprintf>
			   sizeof(update_delta_topic),
			   UPDATE_DELTA_TOPIC,
			   client->client_id.utf8);
	u32_t update_delta_topic_len = ret;

	if (ret >= sizeof(update_delta_topic)) {
   1e072:	4286      	cmp	r6, r0
	int ret = snprintf(update_delta_topic,
   1e074:	4604      	mov	r4, r0
	if (ret >= sizeof(update_delta_topic)) {
   1e076:	d922      	bls.n	1e0be <update_device_shadow_version+0x7e>
		return -ENOMEM;
	} else if (ret < 0) {
   1e078:	2800      	cmp	r0, #0
   1e07a:	db1b      	blt.n	1e0b4 <update_device_shadow_version+0x74>
		return ret;
	}

	ret = snprintf(shadow_update_payload,
   1e07c:	f107 0618 	add.w	r6, r7, #24
   1e080:	21ff      	movs	r1, #255	; 0xff
   1e082:	4a13      	ldr	r2, [pc, #76]	; (1e0d0 <update_device_shadow_version+0x90>)
   1e084:	4b13      	ldr	r3, [pc, #76]	; (1e0d4 <update_device_shadow_version+0x94>)
   1e086:	4630      	mov	r0, r6
   1e088:	f014 f86c 	bl	32164 <sniprintf>
		return -ENOMEM;
	} else if (ret < 0) {
		return ret;
	}

	param.message.topic.qos = MQTT_QOS_1_AT_LEAST_ONCE;
   1e08c:	2301      	movs	r3, #1
   1e08e:	723b      	strb	r3, [r7, #8]
	param.message.topic.topic.utf8 = update_delta_topic;
	param.message.topic.topic.size = update_delta_topic_len;
	param.message.payload.data = shadow_update_payload;
	param.message.payload.len = shadow_update_payload_len;
   1e090:	2342      	movs	r3, #66	; 0x42
	param.message.topic.topic.size = update_delta_topic_len;
   1e092:	607c      	str	r4, [r7, #4]
	param.message.payload.len = shadow_update_payload_len;
   1e094:	613b      	str	r3, [r7, #16]
	param.message.topic.topic.utf8 = update_delta_topic;
   1e096:	f8c7 d000 	str.w	sp, [r7]
	param.message.payload.data = shadow_update_payload;
   1e09a:	60fe      	str	r6, [r7, #12]
	param.message_id = sys_rand32_get();
   1e09c:	f003 fe1c 	bl	21cd8 <sys_rand32_get>
	param.dup_flag = 0;
   1e0a0:	7dbb      	ldrb	r3, [r7, #22]
	param.message_id = sys_rand32_get();
   1e0a2:	82b8      	strh	r0, [r7, #20]
	param.dup_flag = 0;
   1e0a4:	f023 0303 	bic.w	r3, r3, #3
	param.retain_flag = 0;

	return mqtt_publish(client, &param);
   1e0a8:	4639      	mov	r1, r7
   1e0aa:	4628      	mov	r0, r5
	param.dup_flag = 0;
   1e0ac:	75bb      	strb	r3, [r7, #22]
	return mqtt_publish(client, &param);
   1e0ae:	f016 f9e9 	bl	34484 <mqtt_publish>
   1e0b2:	4604      	mov	r4, r0
}
   1e0b4:	4620      	mov	r0, r4
   1e0b6:	f507 778e 	add.w	r7, r7, #284	; 0x11c
   1e0ba:	46bd      	mov	sp, r7
   1e0bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOMEM;
   1e0be:	f06f 040b 	mvn.w	r4, #11
   1e0c2:	e7f7      	b.n	1e0b4 <update_device_shadow_version+0x74>
   1e0c4:	000375ac 	.word	0x000375ac
   1e0c8:	000375c7 	.word	0x000375c7
   1e0cc:	000375b9 	.word	0x000375b9
   1e0d0:	000375e4 	.word	0x000375e4
   1e0d4:	000375d6 	.word	0x000375d6

0001e0d8 <aws_fota_cb_handler>:
	err = cert_provision();
	__ASSERT(err == 0, "Could not provision root CA to %d", TLS_SEC_TAG);
#endif

static void aws_fota_cb_handler(struct aws_fota_event *fota_evt)
{
   1e0d8:	b508      	push	{r3, lr}
	int err;

	if (fota_evt == NULL) {
   1e0da:	b300      	cbz	r0, 1e11e <aws_fota_cb_handler+0x46>
		return;
	}

	switch (fota_evt->id) {
   1e0dc:	7803      	ldrb	r3, [r0, #0]
   1e0de:	2b05      	cmp	r3, #5
   1e0e0:	d81d      	bhi.n	1e11e <aws_fota_cb_handler+0x46>
   1e0e2:	e8df f003 	tbb	[pc, r3]
   1e0e6:	1603      	.short	0x1603
   1e0e8:	13291d32 	.word	0x13291d32
	case AWS_FOTA_EVT_START:
		if (aws_fota_get_job_id(current_job_id,
   1e0ec:	2141      	movs	r1, #65	; 0x41
   1e0ee:	4818      	ldr	r0, [pc, #96]	; (1e150 <aws_fota_cb_handler+0x78>)
   1e0f0:	f007 fa18 	bl	25524 <aws_fota_get_job_id>
   1e0f4:	2800      	cmp	r0, #0
   1e0f6:	dc03      	bgt.n	1e100 <aws_fota_cb_handler+0x28>
					sizeof(current_job_id)) <= 0) {
			snprintf(current_job_id, sizeof(current_job_id), "N/A");
   1e0f8:	4916      	ldr	r1, [pc, #88]	; (1e154 <aws_fota_cb_handler+0x7c>)
   1e0fa:	4815      	ldr	r0, [pc, #84]	; (1e150 <aws_fota_cb_handler+0x78>)
   1e0fc:	f017 fe38 	bl	35d70 <strcpy>
		}
		printk("AWS_FOTA_EVT_START, job id = %s\n", current_job_id);
   1e100:	4913      	ldr	r1, [pc, #76]	; (1e150 <aws_fota_cb_handler+0x78>)
   1e102:	4815      	ldr	r0, [pc, #84]	; (1e158 <aws_fota_cb_handler+0x80>)

	case AWS_FOTA_EVT_ERROR:
		printk("AWS_FOTA_EVT_ERROR\n");
		break;
	}
}
   1e104:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printk("AWS_FOTA_EVT_DL_PROGRESS, %d%% downloaded\n",
   1e108:	f015 ba05 	b.w	33516 <printk>
   1e10c:	6841      	ldr	r1, [r0, #4]
   1e10e:	4813      	ldr	r0, [pc, #76]	; (1e15c <aws_fota_cb_handler+0x84>)
   1e110:	e7f8      	b.n	1e104 <aws_fota_cb_handler+0x2c>
		printk("AWS_FOTA_EVT_DONE, rebooting to apply update\n");
   1e112:	4813      	ldr	r0, [pc, #76]	; (1e160 <aws_fota_cb_handler+0x88>)
   1e114:	f015 f9ff 	bl	33516 <printk>
		do_reboot = true;
   1e118:	2201      	movs	r2, #1
   1e11a:	4b12      	ldr	r3, [pc, #72]	; (1e164 <aws_fota_cb_handler+0x8c>)
   1e11c:	701a      	strb	r2, [r3, #0]
}
   1e11e:	bd08      	pop	{r3, pc}
		printk("AWS_FOTA_EVT_ERASE_PENDING, reboot or disconnect the "
   1e120:	4811      	ldr	r0, [pc, #68]	; (1e168 <aws_fota_cb_handler+0x90>)
   1e122:	f015 f9f8 	bl	33516 <printk>
		err = lte_lc_offline();
   1e126:	f005 ffb1 	bl	2408c <lte_lc_offline>
		if (err) {
   1e12a:	2800      	cmp	r0, #0
   1e12c:	d0f7      	beq.n	1e11e <aws_fota_cb_handler+0x46>
			printk("Error turning off the LTE link\n");
   1e12e:	480f      	ldr	r0, [pc, #60]	; (1e16c <aws_fota_cb_handler+0x94>)
}
   1e130:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printk("AWS_FOTA_EVT_ERROR\n");
   1e134:	f015 b9ef 	b.w	33516 <printk>
		printk("AWS_FOTA_EVT_ERASE_DONE, reconnecting the LTE link\n");
   1e138:	480d      	ldr	r0, [pc, #52]	; (1e170 <aws_fota_cb_handler+0x98>)
   1e13a:	f015 f9ec 	bl	33516 <printk>
		err = lte_lc_connect();
   1e13e:	f017 fa9f 	bl	35680 <lte_lc_connect>
		if (err) {
   1e142:	2800      	cmp	r0, #0
   1e144:	d0eb      	beq.n	1e11e <aws_fota_cb_handler+0x46>
			printk("Error reconnecting the LTE link\n");
   1e146:	480b      	ldr	r0, [pc, #44]	; (1e174 <aws_fota_cb_handler+0x9c>)
   1e148:	e7f2      	b.n	1e130 <aws_fota_cb_handler+0x58>
		printk("AWS_FOTA_EVT_ERROR\n");
   1e14a:	480b      	ldr	r0, [pc, #44]	; (1e178 <aws_fota_cb_handler+0xa0>)
   1e14c:	e7f0      	b.n	1e130 <aws_fota_cb_handler+0x58>
   1e14e:	bf00      	nop
   1e150:	2002402e 	.word	0x2002402e
   1e154:	0003761c 	.word	0x0003761c
   1e158:	00037620 	.word	0x00037620
   1e15c:	00037641 	.word	0x00037641
   1e160:	0003766c 	.word	0x0003766c
   1e164:	2002406f 	.word	0x2002406f
   1e168:	0003769a 	.word	0x0003769a
   1e16c:	000376d9 	.word	0x000376d9
   1e170:	000376f9 	.word	0x000376f9
   1e174:	0003772d 	.word	0x0003772d
   1e178:	0003774e 	.word	0x0003774e

0001e17c <mqtt_evt_handler>:
{
   1e17c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e180:	b084      	sub	sp, #16
   1e182:	af02      	add	r7, sp, #8
   1e184:	460c      	mov	r4, r1
   1e186:	4606      	mov	r6, r0
	err = aws_fota_mqtt_evt_handler(c, evt);
   1e188:	f007 f80a 	bl	251a0 <aws_fota_mqtt_evt_handler>
	if (err == 0) {
   1e18c:	1e01      	subs	r1, r0, #0
   1e18e:	d05a      	beq.n	1e246 <mqtt_evt_handler+0xca>
	} else if (err < 0) {
   1e190:	da02      	bge.n	1e198 <mqtt_evt_handler+0x1c>
		printk("aws_fota_mqtt_evt_handler: Failed! %d\n", err);
   1e192:	484b      	ldr	r0, [pc, #300]	; (1e2c0 <mqtt_evt_handler+0x144>)
   1e194:	f015 f9bf 	bl	33516 <printk>
	switch (evt->type) {
   1e198:	7823      	ldrb	r3, [r4, #0]
   1e19a:	2b07      	cmp	r3, #7
   1e19c:	f200 808b 	bhi.w	1e2b6 <mqtt_evt_handler+0x13a>
   1e1a0:	e8df f003 	tbb	[pc, r3]
   1e1a4:	751e1704 	.word	0x751e1704
   1e1a8:	7f898989 	.word	0x7f898989
		if (evt->result != 0) {
   1e1ac:	69e1      	ldr	r1, [r4, #28]
   1e1ae:	b119      	cbz	r1, 1e1b8 <mqtt_evt_handler+0x3c>
			printk("MQTT connect failed %d\n", evt->result);
   1e1b0:	4844      	ldr	r0, [pc, #272]	; (1e2c4 <mqtt_evt_handler+0x148>)
			printk("MQTT SUBACK error %d\n", evt->result);
   1e1b2:	f015 f9b0 	bl	33516 <printk>
			break;
   1e1b6:	e046      	b.n	1e246 <mqtt_evt_handler+0xca>
		printk("[%s:%d] MQTT client connected!\n", __func__, __LINE__);
   1e1b8:	4943      	ldr	r1, [pc, #268]	; (1e2c8 <mqtt_evt_handler+0x14c>)
   1e1ba:	22dd      	movs	r2, #221	; 0xdd
   1e1bc:	4843      	ldr	r0, [pc, #268]	; (1e2cc <mqtt_evt_handler+0x150>)
   1e1be:	f015 f9aa 	bl	33516 <printk>
		err = update_device_shadow_version(c);
   1e1c2:	4630      	mov	r0, r6
   1e1c4:	f7ff ff3c 	bl	1e040 <update_device_shadow_version>
		if (err) {
   1e1c8:	4601      	mov	r1, r0
   1e1ca:	2800      	cmp	r0, #0
   1e1cc:	d03b      	beq.n	1e246 <mqtt_evt_handler+0xca>
			printk("Unable to update device shadow err: %d\n", err);
   1e1ce:	4840      	ldr	r0, [pc, #256]	; (1e2d0 <mqtt_evt_handler+0x154>)
   1e1d0:	e7ef      	b.n	1e1b2 <mqtt_evt_handler+0x36>
		printk("[%s:%d] MQTT client disconnected %d\n", __func__,
   1e1d2:	22e8      	movs	r2, #232	; 0xe8
   1e1d4:	69e3      	ldr	r3, [r4, #28]
   1e1d6:	493c      	ldr	r1, [pc, #240]	; (1e2c8 <mqtt_evt_handler+0x14c>)
   1e1d8:	483e      	ldr	r0, [pc, #248]	; (1e2d4 <mqtt_evt_handler+0x158>)
		printk("[%s:%d] default: %d\n", __func__, __LINE__,
   1e1da:	f015 f99c 	bl	33516 <printk>
		break;
   1e1de:	e032      	b.n	1e246 <mqtt_evt_handler+0xca>
		printk("[%s:%d] MQTT PUBLISH result=%d len=%d\n", __func__,
   1e1e0:	6963      	ldr	r3, [r4, #20]
   1e1e2:	22ef      	movs	r2, #239	; 0xef
   1e1e4:	9300      	str	r3, [sp, #0]
   1e1e6:	69e3      	ldr	r3, [r4, #28]
   1e1e8:	4937      	ldr	r1, [pc, #220]	; (1e2c8 <mqtt_evt_handler+0x14c>)
   1e1ea:	483b      	ldr	r0, [pc, #236]	; (1e2d8 <mqtt_evt_handler+0x15c>)
   1e1ec:	f015 f993 	bl	33516 <printk>
		err = publish_get_payload(c,
   1e1f0:	6963      	ldr	r3, [r4, #20]
	u8_t *end = buf + length;
   1e1f2:	4d3a      	ldr	r5, [pc, #232]	; (1e2dc <mqtt_evt_handler+0x160>)
	if (length > sizeof(payload_buf)) {
   1e1f4:	2b80      	cmp	r3, #128	; 0x80
	u8_t *end = buf + length;
   1e1f6:	eb05 0803 	add.w	r8, r5, r3
	if (length > sizeof(payload_buf)) {
   1e1fa:	d833      	bhi.n	1e264 <mqtt_evt_handler+0xe8>
	while (buf < end) {
   1e1fc:	45a8      	cmp	r8, r5
   1e1fe:	d826      	bhi.n	1e24e <mqtt_evt_handler+0xd2>
		if (p->message.topic.qos == MQTT_QOS_1_AT_LEAST_ONCE) {
   1e200:	7b23      	ldrb	r3, [r4, #12]
   1e202:	2b01      	cmp	r3, #1
   1e204:	d109      	bne.n	1e21a <mqtt_evt_handler+0x9e>
			const struct mqtt_puback_param ack = {
   1e206:	8b23      	ldrh	r3, [r4, #24]
			err = mqtt_publish_qos1_ack(c, &ack);
   1e208:	4630      	mov	r0, r6
   1e20a:	1d39      	adds	r1, r7, #4
			const struct mqtt_puback_param ack = {
   1e20c:	80bb      	strh	r3, [r7, #4]
			err = mqtt_publish_qos1_ack(c, &ack);
   1e20e:	f016 f967 	bl	344e0 <mqtt_publish_qos1_ack>
			if (err) {
   1e212:	b110      	cbz	r0, 1e21a <mqtt_evt_handler+0x9e>
				printk("unable to ack\n");
   1e214:	4832      	ldr	r0, [pc, #200]	; (1e2e0 <mqtt_evt_handler+0x164>)
   1e216:	f015 f97e 	bl	33516 <printk>
		data_print("Received: ", payload_buf, p->message.payload.len);
   1e21a:	6964      	ldr	r4, [r4, #20]
{
   1e21c:	466d      	mov	r5, sp
	char buf[len + 1];
   1e21e:	f104 0308 	add.w	r3, r4, #8
   1e222:	f023 0307 	bic.w	r3, r3, #7
   1e226:	ebad 0d03 	sub.w	sp, sp, r3
   1e22a:	ab02      	add	r3, sp, #8
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1e22c:	4622      	mov	r2, r4
   1e22e:	4618      	mov	r0, r3
   1e230:	492a      	ldr	r1, [pc, #168]	; (1e2dc <mqtt_evt_handler+0x160>)
   1e232:	f017 fc69 	bl	35b08 <memcpy>
	buf[len] = 0;
   1e236:	2200      	movs	r2, #0
	printk("%s%s\n", prefix, buf);
   1e238:	492a      	ldr	r1, [pc, #168]	; (1e2e4 <mqtt_evt_handler+0x168>)
	buf[len] = 0;
   1e23a:	5502      	strb	r2, [r0, r4]
	printk("%s%s\n", prefix, buf);
   1e23c:	4602      	mov	r2, r0
   1e23e:	482a      	ldr	r0, [pc, #168]	; (1e2e8 <mqtt_evt_handler+0x16c>)
   1e240:	f015 f969 	bl	33516 <printk>
   1e244:	46ad      	mov	sp, r5
}
   1e246:	3708      	adds	r7, #8
   1e248:	46bd      	mov	sp, r7
   1e24a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		int ret = mqtt_read_publish_payload_blocking(c, buf, end - buf);
   1e24e:	4629      	mov	r1, r5
   1e250:	4630      	mov	r0, r6
   1e252:	eba8 0205 	sub.w	r2, r8, r5
   1e256:	f016 fa54 	bl	34702 <mqtt_read_publish_payload_blocking>
		if (ret < 0) {
   1e25a:	1e01      	subs	r1, r0, #0
   1e25c:	db04      	blt.n	1e268 <mqtt_evt_handler+0xec>
		} else if (ret == 0) {
   1e25e:	d013      	beq.n	1e288 <mqtt_evt_handler+0x10c>
		buf += ret;
   1e260:	440d      	add	r5, r1
   1e262:	e7cb      	b.n	1e1fc <mqtt_evt_handler+0x80>
		return -EMSGSIZE;
   1e264:	f06f 0179 	mvn.w	r1, #121	; 0x79
			printk("mqtt_read_publish_payload: Failed! %d\n", err);
   1e268:	4820      	ldr	r0, [pc, #128]	; (1e2ec <mqtt_evt_handler+0x170>)
   1e26a:	f015 f954 	bl	33516 <printk>
			printk("Disconnecting MQTT client...\n");
   1e26e:	4820      	ldr	r0, [pc, #128]	; (1e2f0 <mqtt_evt_handler+0x174>)
   1e270:	f015 f951 	bl	33516 <printk>
			err = mqtt_disconnect(c);
   1e274:	4630      	mov	r0, r6
   1e276:	f016 f95a 	bl	3452e <mqtt_disconnect>
			if (err) {
   1e27a:	4601      	mov	r1, r0
   1e27c:	2800      	cmp	r0, #0
   1e27e:	d0bf      	beq.n	1e200 <mqtt_evt_handler+0x84>
				printk("Could not disconnect: %d\n", err);
   1e280:	481c      	ldr	r0, [pc, #112]	; (1e2f4 <mqtt_evt_handler+0x178>)
   1e282:	f015 f948 	bl	33516 <printk>
   1e286:	e7bb      	b.n	1e200 <mqtt_evt_handler+0x84>
			return -EIO;
   1e288:	f06f 0104 	mvn.w	r1, #4
   1e28c:	e7ec      	b.n	1e268 <mqtt_evt_handler+0xec>
		if (evt->result != 0) {
   1e28e:	69e1      	ldr	r1, [r4, #28]
   1e290:	b109      	cbz	r1, 1e296 <mqtt_evt_handler+0x11a>
			printk("MQTT PUBACK error %d\n", evt->result);
   1e292:	4819      	ldr	r0, [pc, #100]	; (1e2f8 <mqtt_evt_handler+0x17c>)
   1e294:	e78d      	b.n	1e1b2 <mqtt_evt_handler+0x36>
		printk("[%s:%d] PUBACK packet id: %u\n", __func__, __LINE__,
   1e296:	f44f 7289 	mov.w	r2, #274	; 0x112
   1e29a:	88a3      	ldrh	r3, [r4, #4]
   1e29c:	490a      	ldr	r1, [pc, #40]	; (1e2c8 <mqtt_evt_handler+0x14c>)
   1e29e:	4817      	ldr	r0, [pc, #92]	; (1e2fc <mqtt_evt_handler+0x180>)
   1e2a0:	e79b      	b.n	1e1da <mqtt_evt_handler+0x5e>
		if (evt->result != 0) {
   1e2a2:	69e1      	ldr	r1, [r4, #28]
   1e2a4:	b109      	cbz	r1, 1e2aa <mqtt_evt_handler+0x12e>
			printk("MQTT SUBACK error %d\n", evt->result);
   1e2a6:	4816      	ldr	r0, [pc, #88]	; (1e300 <mqtt_evt_handler+0x184>)
   1e2a8:	e783      	b.n	1e1b2 <mqtt_evt_handler+0x36>
		printk("[%s:%d] SUBACK packet id: %u\n", __func__, __LINE__,
   1e2aa:	f44f 728e 	mov.w	r2, #284	; 0x11c
   1e2ae:	88a3      	ldrh	r3, [r4, #4]
   1e2b0:	4905      	ldr	r1, [pc, #20]	; (1e2c8 <mqtt_evt_handler+0x14c>)
   1e2b2:	4814      	ldr	r0, [pc, #80]	; (1e304 <mqtt_evt_handler+0x188>)
   1e2b4:	e791      	b.n	1e1da <mqtt_evt_handler+0x5e>
		printk("[%s:%d] default: %d\n", __func__, __LINE__,
   1e2b6:	f240 1221 	movw	r2, #289	; 0x121
   1e2ba:	4903      	ldr	r1, [pc, #12]	; (1e2c8 <mqtt_evt_handler+0x14c>)
   1e2bc:	4812      	ldr	r0, [pc, #72]	; (1e308 <mqtt_evt_handler+0x18c>)
   1e2be:	e78c      	b.n	1e1da <mqtt_evt_handler+0x5e>
   1e2c0:	00037762 	.word	0x00037762
   1e2c4:	00037789 	.word	0x00037789
   1e2c8:	00037d04 	.word	0x00037d04
   1e2cc:	000377a1 	.word	0x000377a1
   1e2d0:	000377c1 	.word	0x000377c1
   1e2d4:	000377e9 	.word	0x000377e9
   1e2d8:	0003780e 	.word	0x0003780e
   1e2dc:	20024070 	.word	0x20024070
   1e2e0:	00037894 	.word	0x00037894
   1e2e4:	000378a3 	.word	0x000378a3
   1e2e8:	0003b3a6 	.word	0x0003b3a6
   1e2ec:	00037835 	.word	0x00037835
   1e2f0:	0003785c 	.word	0x0003785c
   1e2f4:	0003787a 	.word	0x0003787a
   1e2f8:	0003a46d 	.word	0x0003a46d
   1e2fc:	000378ae 	.word	0x000378ae
   1e300:	000378cc 	.word	0x000378cc
   1e304:	000378e2 	.word	0x000378e2
   1e308:	00037900 	.word	0x00037900

0001e30c <bsd_recoverable_error_handler>:
{
   1e30c:	4601      	mov	r1, r0
	printk("bsdlib recoverable error: %u\n", err);
   1e30e:	4801      	ldr	r0, [pc, #4]	; (1e314 <bsd_recoverable_error_handler+0x8>)
   1e310:	f015 b901 	b.w	33516 <printk>
   1e314:	00037915 	.word	0x00037915

0001e318 <main>:

void main(void)
{
   1e318:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int err;

	/* The mqtt client struct */
	struct mqtt_client client;

	printk("MQTT AWS Jobs FOTA Sample, version: %s\n", CONFIG_APP_VERSION);
   1e31c:	49a2      	ldr	r1, [pc, #648]	; (1e5a8 <main+0x290>)
{
   1e31e:	b0b5      	sub	sp, #212	; 0xd4
	printk("MQTT AWS Jobs FOTA Sample, version: %s\n", CONFIG_APP_VERSION);
   1e320:	48a2      	ldr	r0, [pc, #648]	; (1e5ac <main+0x294>)
   1e322:	f015 f8f8 	bl	33516 <printk>
	printk("Initializing bsdlib\n");
   1e326:	48a2      	ldr	r0, [pc, #648]	; (1e5b0 <main+0x298>)
   1e328:	f015 f8f5 	bl	33516 <printk>
	err = bsdlib_init();
   1e32c:	f004 fafc 	bl	22928 <bsdlib_init>
	switch (err) {
   1e330:	4ba0      	ldr	r3, [pc, #640]	; (1e5b4 <main+0x29c>)
   1e332:	4298      	cmp	r0, r3
   1e334:	dc12      	bgt.n	1e35c <main+0x44>
   1e336:	3b02      	subs	r3, #2
   1e338:	4298      	cmp	r0, r3
   1e33a:	f300 80c9 	bgt.w	1e4d0 <main+0x1b8>
   1e33e:	1c41      	adds	r1, r0, #1
   1e340:	f000 80cb 	beq.w	1e4da <main+0x1c2>
   1e344:	f1a0 6088 	sub.w	r0, r0, #71303168	; 0x4400000
   1e348:	3801      	subs	r0, #1
   1e34a:	2801      	cmp	r0, #1
   1e34c:	d813      	bhi.n	1e376 <main+0x5e>
		printk("Modem firmware update failed\n");
		printk("Modem will run non-updated firmware on reboot.\n");
		break;
	case MODEM_DFU_RESULT_HARDWARE_ERROR:
	case MODEM_DFU_RESULT_INTERNAL_ERROR:
		printk("Modem firmware update failed\n");
   1e34e:	489a      	ldr	r0, [pc, #616]	; (1e5b8 <main+0x2a0>)
   1e350:	f015 f8e1 	bl	33516 <printk>
		printk("Fatal error.\n");
   1e354:	4899      	ldr	r0, [pc, #612]	; (1e5bc <main+0x2a4>)
		printk("Modem will run non-updated firmware on reboot.\n");
   1e356:	f015 f8de 	bl	33516 <printk>
		break;
   1e35a:	e00c      	b.n	1e376 <main+0x5e>
	switch (err) {
   1e35c:	4b98      	ldr	r3, [pc, #608]	; (1e5c0 <main+0x2a8>)
   1e35e:	4298      	cmp	r0, r3
   1e360:	d109      	bne.n	1e376 <main+0x5e>
		printk("Modem firmware update successful!\n");
   1e362:	4898      	ldr	r0, [pc, #608]	; (1e5c4 <main+0x2ac>)
   1e364:	f015 f8d7 	bl	33516 <printk>
		printk("Modem will run the new firmware after reboot\n");
   1e368:	4897      	ldr	r0, [pc, #604]	; (1e5c8 <main+0x2b0>)
   1e36a:	f015 f8d4 	bl	33516 <printk>
	if (z_syscall_trap()) {
		return (k_tid_t) arch_syscall_invoke0(K_SYSCALL_K_CURRENT_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_current_get();
   1e36e:	f012 fa05 	bl	3077c <z_impl_k_current_get>
		arch_syscall_invoke1(*(uintptr_t *)&thread, K_SYSCALL_K_THREAD_SUSPEND);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_suspend(thread);
   1e372:	f012 fc63 	bl	30c3c <z_impl_k_thread_suspend>
		printk("Fatal error.\n");
		return;
	default:
		break;
	}
	printk("Initialized bsdlib\n");
   1e376:	4895      	ldr	r0, [pc, #596]	; (1e5cc <main+0x2b4>)
   1e378:	f015 f8cd 	bl	33516 <printk>
	err = at_notif_init();
   1e37c:	f005 f8b6 	bl	234ec <at_notif_init>
	__ASSERT(err == 0, "AT Notify could not be initialized.");
   1e380:	b170      	cbz	r0, 1e3a0 <main+0x88>
   1e382:	4993      	ldr	r1, [pc, #588]	; (1e5d0 <main+0x2b8>)
   1e384:	f240 13ef 	movw	r3, #495	; 0x1ef
   1e388:	4a92      	ldr	r2, [pc, #584]	; (1e5d4 <main+0x2bc>)
   1e38a:	4893      	ldr	r0, [pc, #588]	; (1e5d8 <main+0x2c0>)
   1e38c:	f015 f8c3 	bl	33516 <printk>
   1e390:	4892      	ldr	r0, [pc, #584]	; (1e5dc <main+0x2c4>)
   1e392:	f015 f8c0 	bl	33516 <printk>
   1e396:	f240 11ef 	movw	r1, #495	; 0x1ef
   1e39a:	488e      	ldr	r0, [pc, #568]	; (1e5d4 <main+0x2bc>)
   1e39c:	f015 f901 	bl	335a2 <assert_post_action>
	err = at_cmd_init();
   1e3a0:	f005 f82a 	bl	233f8 <at_cmd_init>
	__ASSERT(err == 0, "AT CMD could not be established.");
   1e3a4:	b170      	cbz	r0, 1e3c4 <main+0xac>
   1e3a6:	498a      	ldr	r1, [pc, #552]	; (1e5d0 <main+0x2b8>)
   1e3a8:	f240 13f1 	movw	r3, #497	; 0x1f1
   1e3ac:	4a89      	ldr	r2, [pc, #548]	; (1e5d4 <main+0x2bc>)
   1e3ae:	488a      	ldr	r0, [pc, #552]	; (1e5d8 <main+0x2c0>)
   1e3b0:	f015 f8b1 	bl	33516 <printk>
   1e3b4:	488a      	ldr	r0, [pc, #552]	; (1e5e0 <main+0x2c8>)
   1e3b6:	f015 f8ae 	bl	33516 <printk>
   1e3ba:	f240 11f1 	movw	r1, #497	; 0x1f1
   1e3be:	4885      	ldr	r0, [pc, #532]	; (1e5d4 <main+0x2bc>)
   1e3c0:	f015 f8ef 	bl	335a2 <assert_post_action>

	at_configure();
#if defined(CONFIG_PROVISION_CERTIFICATES)
	provision_certificates();
#endif /* CONFIG_PROVISION_CERTIFICATES */
	printk("LTE Link Connecting ...\n");
   1e3c4:	4887      	ldr	r0, [pc, #540]	; (1e5e4 <main+0x2cc>)
   1e3c6:	f015 f8a6 	bl	33516 <printk>
	err = lte_lc_init_and_connect();
   1e3ca:	f017 f95b 	bl	35684 <lte_lc_init_and_connect>
	__ASSERT(err == 0, "LTE link could not be established.");
   1e3ce:	b170      	cbz	r0, 1e3ee <main+0xd6>
   1e3d0:	497f      	ldr	r1, [pc, #508]	; (1e5d0 <main+0x2b8>)
   1e3d2:	f240 2356 	movw	r3, #598	; 0x256
   1e3d6:	4a7f      	ldr	r2, [pc, #508]	; (1e5d4 <main+0x2bc>)
   1e3d8:	487f      	ldr	r0, [pc, #508]	; (1e5d8 <main+0x2c0>)
   1e3da:	f015 f89c 	bl	33516 <printk>
   1e3de:	4882      	ldr	r0, [pc, #520]	; (1e5e8 <main+0x2d0>)
   1e3e0:	f015 f899 	bl	33516 <printk>
   1e3e4:	f240 2156 	movw	r1, #598	; 0x256
   1e3e8:	487a      	ldr	r0, [pc, #488]	; (1e5d4 <main+0x2bc>)
   1e3ea:	f015 f8da 	bl	335a2 <assert_post_action>
	printk("LTE Link Connected!\n");
   1e3ee:	487f      	ldr	r0, [pc, #508]	; (1e5ec <main+0x2d4>)
   1e3f0:	f015 f891 	bl	33516 <printk>
	mqtt_client_init(client);
   1e3f4:	a815      	add	r0, sp, #84	; 0x54
   1e3f6:	f015 ffe8 	bl	343ca <mqtt_client_init>
	struct addrinfo hints = {
   1e3fa:	2220      	movs	r2, #32
   1e3fc:	2100      	movs	r1, #0
   1e3fe:	a801      	add	r0, sp, #4
   1e400:	f017 fba2 	bl	35b48 <memset>
   1e404:	2301      	movs	r3, #1

static inline int getaddrinfo(const char *node, const char *service,
			      const struct addrinfo *hints,
			      struct addrinfo **res)
{
	__ASSERT_NO_MSG(socket_ops);
   1e406:	4c7a      	ldr	r4, [pc, #488]	; (1e5f0 <main+0x2d8>)
   1e408:	e9cd 3302 	strd	r3, r3, [sp, #8]
   1e40c:	6823      	ldr	r3, [r4, #0]
   1e40e:	b94b      	cbnz	r3, 1e424 <main+0x10c>
   1e410:	4978      	ldr	r1, [pc, #480]	; (1e5f4 <main+0x2dc>)
   1e412:	4871      	ldr	r0, [pc, #452]	; (1e5d8 <main+0x2c0>)
   1e414:	2393      	movs	r3, #147	; 0x93
   1e416:	4a78      	ldr	r2, [pc, #480]	; (1e5f8 <main+0x2e0>)
   1e418:	f015 f87d 	bl	33516 <printk>
   1e41c:	2193      	movs	r1, #147	; 0x93
   1e41e:	4876      	ldr	r0, [pc, #472]	; (1e5f8 <main+0x2e0>)
   1e420:	f015 f8bf 	bl	335a2 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->getaddrinfo);
   1e424:	6823      	ldr	r3, [r4, #0]
   1e426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1e428:	b94b      	cbnz	r3, 1e43e <main+0x126>
   1e42a:	4974      	ldr	r1, [pc, #464]	; (1e5fc <main+0x2e4>)
   1e42c:	486a      	ldr	r0, [pc, #424]	; (1e5d8 <main+0x2c0>)
   1e42e:	2394      	movs	r3, #148	; 0x94
   1e430:	4a71      	ldr	r2, [pc, #452]	; (1e5f8 <main+0x2e0>)
   1e432:	f015 f870 	bl	33516 <printk>
   1e436:	2194      	movs	r1, #148	; 0x94
   1e438:	486f      	ldr	r0, [pc, #444]	; (1e5f8 <main+0x2e0>)
   1e43a:	f015 f8b2 	bl	335a2 <assert_post_action>

	return socket_ops->getaddrinfo(node, service, hints, res);
   1e43e:	6823      	ldr	r3, [r4, #0]
   1e440:	2100      	movs	r1, #0
   1e442:	6b5d      	ldr	r5, [r3, #52]	; 0x34
   1e444:	486e      	ldr	r0, [pc, #440]	; (1e600 <main+0x2e8>)
   1e446:	466b      	mov	r3, sp
   1e448:	aa01      	add	r2, sp, #4
   1e44a:	47a8      	blx	r5
	if (err) {
   1e44c:	4601      	mov	r1, r0
   1e44e:	2800      	cmp	r0, #0
   1e450:	d04c      	beq.n	1e4ec <main+0x1d4>
		printk("ERROR: getaddrinfo failed %d\n", err);
   1e452:	486c      	ldr	r0, [pc, #432]	; (1e604 <main+0x2ec>)
   1e454:	f015 f85f 	bl	33516 <printk>
	memcpy(id_buf, CONFIG_CLOUD_CLIENT_ID, CLIENT_ID_LEN + 1);
   1e458:	4a6b      	ldr	r2, [pc, #428]	; (1e608 <main+0x2f0>)
   1e45a:	4b6c      	ldr	r3, [pc, #432]	; (1e60c <main+0x2f4>)
   1e45c:	4615      	mov	r5, r2
   1e45e:	f103 0114 	add.w	r1, r3, #20
   1e462:	f853 0b04 	ldr.w	r0, [r3], #4
   1e466:	428b      	cmp	r3, r1
   1e468:	f842 0b04 	str.w	r0, [r2], #4
   1e46c:	d1f9      	bne.n	1e462 <main+0x14a>
	printk("client_id: %s\n", client_id_buf);
   1e46e:	4966      	ldr	r1, [pc, #408]	; (1e608 <main+0x2f0>)
   1e470:	4867      	ldr	r0, [pc, #412]	; (1e610 <main+0x2f8>)
   1e472:	f015 f850 	bl	33516 <printk>
	client->broker = &broker_storage;
   1e476:	4b67      	ldr	r3, [pc, #412]	; (1e614 <main+0x2fc>)
	client->client_id.size = strlen(client_id_buf);
   1e478:	4863      	ldr	r0, [pc, #396]	; (1e608 <main+0x2f0>)
	client->broker = &broker_storage;
   1e47a:	9328      	str	r3, [sp, #160]	; 0xa0
	client->evt_cb = mqtt_evt_handler;
   1e47c:	4b66      	ldr	r3, [pc, #408]	; (1e618 <main+0x300>)
	client->client_id.utf8 = client_id_buf;
   1e47e:	9526      	str	r5, [sp, #152]	; 0x98
	client->evt_cb = mqtt_evt_handler;
   1e480:	932d      	str	r3, [sp, #180]	; 0xb4
	client->client_id.size = strlen(client_id_buf);
   1e482:	f7fe fe35 	bl	1d0f0 <strlen>
	client->protocol_version = MQTT_VERSION_3_1_1;
   1e486:	2204      	movs	r2, #4
   1e488:	f88d 20ca 	strb.w	r2, [sp, #202]	; 0xca
	client->rx_buf = rx_buffer;
   1e48c:	4a63      	ldr	r2, [pc, #396]	; (1e61c <main+0x304>)
	client->password = NULL;
   1e48e:	2300      	movs	r3, #0
	client->rx_buf = rx_buffer;
   1e490:	922e      	str	r2, [sp, #184]	; 0xb8
	client->rx_buf_size = sizeof(rx_buffer);
   1e492:	2280      	movs	r2, #128	; 0x80
	client->tx_buf = tx_buffer;
   1e494:	4962      	ldr	r1, [pc, #392]	; (1e620 <main+0x308>)
	client->transport.type = MQTT_TRANSPORT_SECURE;
   1e496:	2601      	movs	r6, #1
	client->tx_buf_size = sizeof(tx_buffer);
   1e498:	e9cd 1230 	strd	r1, r2, [sp, #192]	; 0xc0
	client->rx_buf_size = sizeof(rx_buffer);
   1e49c:	922f      	str	r2, [sp, #188]	; 0xbc
	tls_config->peer_verify = 2;
   1e49e:	2202      	movs	r2, #2
	client->user_name = NULL;
   1e4a0:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
	tls_config->cipher_count = 0;
   1e4a4:	e9cd 3321 	strd	r3, r3, [sp, #132]	; 0x84
	tls_config->sec_tag_list = sec_tag_list;
   1e4a8:	4b5e      	ldr	r3, [pc, #376]	; (1e624 <main+0x30c>)

	client_init(&client, CONFIG_MQTT_BROKER_HOSTNAME);

	err = aws_fota_init(&client, aws_fota_cb_handler);
   1e4aa:	495f      	ldr	r1, [pc, #380]	; (1e628 <main+0x310>)
	tls_config->sec_tag_list = sec_tag_list;
   1e4ac:	9324      	str	r3, [sp, #144]	; 0x90
	tls_config->hostname = hostname;
   1e4ae:	4b54      	ldr	r3, [pc, #336]	; (1e600 <main+0x2e8>)
	client->client_id.size = strlen(client_id_buf);
   1e4b0:	9027      	str	r0, [sp, #156]	; 0x9c
	err = aws_fota_init(&client, aws_fota_cb_handler);
   1e4b2:	a815      	add	r0, sp, #84	; 0x54
	client->transport.type = MQTT_TRANSPORT_SECURE;
   1e4b4:	f88d 6078 	strb.w	r6, [sp, #120]	; 0x78
	tls_config->peer_verify = 2;
   1e4b8:	9220      	str	r2, [sp, #128]	; 0x80
	tls_config->sec_tag_count = ARRAY_SIZE(sec_tag_list);
   1e4ba:	9623      	str	r6, [sp, #140]	; 0x8c
	tls_config->hostname = hostname;
   1e4bc:	9325      	str	r3, [sp, #148]	; 0x94
	err = aws_fota_init(&client, aws_fota_cb_handler);
   1e4be:	f007 f813 	bl	254e8 <aws_fota_init>
	if (err != 0) {
   1e4c2:	4601      	mov	r1, r0
   1e4c4:	2800      	cmp	r0, #0
   1e4c6:	d067      	beq.n	1e598 <main+0x280>
		printk("ERROR: aws_fota_init %d\n", err);
   1e4c8:	4858      	ldr	r0, [pc, #352]	; (1e62c <main+0x314>)

	printk("Disconnecting MQTT client...\n");

	err = mqtt_disconnect(&client);
	if (err) {
		printk("Could not disconnect MQTT client. Error: %d\n", err);
   1e4ca:	f015 f824 	bl	33516 <printk>
   1e4ce:	e00a      	b.n	1e4e6 <main+0x1ce>
		printk("Modem firmware update failed\n");
   1e4d0:	4839      	ldr	r0, [pc, #228]	; (1e5b8 <main+0x2a0>)
   1e4d2:	f015 f820 	bl	33516 <printk>
		printk("Modem will run non-updated firmware on reboot.\n");
   1e4d6:	4856      	ldr	r0, [pc, #344]	; (1e630 <main+0x318>)
   1e4d8:	e73d      	b.n	1e356 <main+0x3e>
		printk("Could not initialize bsdlib.\n");
   1e4da:	4856      	ldr	r0, [pc, #344]	; (1e634 <main+0x31c>)
   1e4dc:	f015 f81b 	bl	33516 <printk>
		printk("Fatal error.\n");
   1e4e0:	4836      	ldr	r0, [pc, #216]	; (1e5bc <main+0x2a4>)
   1e4e2:	f015 f818 	bl	33516 <printk>
	}
}
   1e4e6:	b035      	add	sp, #212	; 0xd4
   1e4e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	addr = result;
   1e4ec:	9b00      	ldr	r3, [sp, #0]
	while (addr != NULL) {
   1e4ee:	b1a3      	cbz	r3, 1e51a <main+0x202>
		if (addr->ai_addrlen == sizeof(struct sockaddr_in)) {
   1e4f0:	6919      	ldr	r1, [r3, #16]
   1e4f2:	2908      	cmp	r1, #8
   1e4f4:	d130      	bne.n	1e558 <main+0x240>
				->sin_addr.s_addr;
   1e4f6:	695b      	ldr	r3, [r3, #20]
			broker->sin_addr.s_addr =
   1e4f8:	4946      	ldr	r1, [pc, #280]	; (1e614 <main+0x2fc>)
				->sin_addr.s_addr;
   1e4fa:	685b      	ldr	r3, [r3, #4]
			broker->sin_family = AF_INET;
   1e4fc:	2001      	movs	r0, #1
			broker->sin_addr.s_addr =
   1e4fe:	604b      	str	r3, [r1, #4]
			broker->sin_port = htons(CONFIG_MQTT_BROKER_PORT);
   1e500:	f24b 3322 	movw	r3, #45858	; 0xb322
			broker->sin_family = AF_INET;
   1e504:	8008      	strh	r0, [r1, #0]
			broker->sin_port = htons(CONFIG_MQTT_BROKER_PORT);
   1e506:	804b      	strh	r3, [r1, #2]
	if (z_syscall_trap()) {
		return (char *) arch_syscall_invoke4(*(uintptr_t *)&family, *(uintptr_t *)&src, *(uintptr_t *)&dst, *(uintptr_t *)&size, K_SYSCALL_NET_ADDR_NTOP);
	}
#endif
	compiler_barrier();
	return z_impl_net_addr_ntop(family, src, dst, size);
   1e508:	232e      	movs	r3, #46	; 0x2e
   1e50a:	3104      	adds	r1, #4
   1e50c:	aa09      	add	r2, sp, #36	; 0x24
   1e50e:	f002 ff0f 	bl	21330 <z_impl_net_addr_ntop>
			printk("IPv4 Address %s\n", addr_str);
   1e512:	4849      	ldr	r0, [pc, #292]	; (1e638 <main+0x320>)
   1e514:	a909      	add	r1, sp, #36	; 0x24
			printk("IPv6 Address %s\n", addr_str);
   1e516:	f014 fffe 	bl	33516 <printk>
}

static inline void freeaddrinfo(struct addrinfo *res)
{
	__ASSERT_NO_MSG(socket_ops);
   1e51a:	6823      	ldr	r3, [r4, #0]
	freeaddrinfo(result);
   1e51c:	9d00      	ldr	r5, [sp, #0]
   1e51e:	b94b      	cbnz	r3, 1e534 <main+0x21c>
   1e520:	4934      	ldr	r1, [pc, #208]	; (1e5f4 <main+0x2dc>)
   1e522:	482d      	ldr	r0, [pc, #180]	; (1e5d8 <main+0x2c0>)
   1e524:	239b      	movs	r3, #155	; 0x9b
   1e526:	4a34      	ldr	r2, [pc, #208]	; (1e5f8 <main+0x2e0>)
   1e528:	f014 fff5 	bl	33516 <printk>
   1e52c:	219b      	movs	r1, #155	; 0x9b
   1e52e:	4832      	ldr	r0, [pc, #200]	; (1e5f8 <main+0x2e0>)
   1e530:	f015 f837 	bl	335a2 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->freeaddrinfo);
   1e534:	6823      	ldr	r3, [r4, #0]
   1e536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1e538:	b94b      	cbnz	r3, 1e54e <main+0x236>
   1e53a:	4940      	ldr	r1, [pc, #256]	; (1e63c <main+0x324>)
   1e53c:	4826      	ldr	r0, [pc, #152]	; (1e5d8 <main+0x2c0>)
   1e53e:	239c      	movs	r3, #156	; 0x9c
   1e540:	4a2d      	ldr	r2, [pc, #180]	; (1e5f8 <main+0x2e0>)
   1e542:	f014 ffe8 	bl	33516 <printk>
   1e546:	219c      	movs	r1, #156	; 0x9c
   1e548:	482b      	ldr	r0, [pc, #172]	; (1e5f8 <main+0x2e0>)
   1e54a:	f015 f82a 	bl	335a2 <assert_post_action>

	return socket_ops->freeaddrinfo(res);
   1e54e:	6823      	ldr	r3, [r4, #0]
   1e550:	4628      	mov	r0, r5
   1e552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1e554:	4798      	blx	r3
   1e556:	e77f      	b.n	1e458 <main+0x140>
		} else if (addr->ai_addrlen == sizeof(struct sockaddr_in6)) {
   1e558:	2918      	cmp	r1, #24
   1e55a:	d117      	bne.n	1e58c <main+0x274>
			memcpy(broker->sin6_addr.s6_addr,
   1e55c:	695b      	ldr	r3, [r3, #20]
   1e55e:	4938      	ldr	r1, [pc, #224]	; (1e640 <main+0x328>)
   1e560:	1d1a      	adds	r2, r3, #4
   1e562:	3314      	adds	r3, #20
   1e564:	f852 0b04 	ldr.w	r0, [r2], #4
   1e568:	429a      	cmp	r2, r3
   1e56a:	f841 0b04 	str.w	r0, [r1], #4
   1e56e:	d1f9      	bne.n	1e564 <main+0x24c>
			broker->sin6_family = AF_INET6;
   1e570:	2002      	movs	r0, #2
			broker->sin6_port = htons(CONFIG_MQTT_BROKER_PORT);
   1e572:	f24b 3322 	movw	r3, #45858	; 0xb322
			broker->sin6_family = AF_INET6;
   1e576:	4927      	ldr	r1, [pc, #156]	; (1e614 <main+0x2fc>)
   1e578:	8008      	strh	r0, [r1, #0]
			broker->sin6_port = htons(CONFIG_MQTT_BROKER_PORT);
   1e57a:	804b      	strh	r3, [r1, #2]
   1e57c:	232e      	movs	r3, #46	; 0x2e
   1e57e:	3104      	adds	r1, #4
   1e580:	aa09      	add	r2, sp, #36	; 0x24
   1e582:	f002 fed5 	bl	21330 <z_impl_net_addr_ntop>
			printk("IPv6 Address %s\n", addr_str);
   1e586:	482f      	ldr	r0, [pc, #188]	; (1e644 <main+0x32c>)
   1e588:	a909      	add	r1, sp, #36	; 0x24
   1e58a:	e7c4      	b.n	1e516 <main+0x1fe>
			printk("error: ai_addrlen = %u should be %u or %u\n",
   1e58c:	2318      	movs	r3, #24
   1e58e:	2208      	movs	r2, #8
   1e590:	482d      	ldr	r0, [pc, #180]	; (1e648 <main+0x330>)
   1e592:	f014 ffc0 	bl	33516 <printk>
		break;
   1e596:	e7c0      	b.n	1e51a <main+0x202>
	err = mqtt_connect(&client);
   1e598:	a815      	add	r0, sp, #84	; 0x54
   1e59a:	f015 ff2f 	bl	343fc <mqtt_connect>
	if (err != 0) {
   1e59e:	4601      	mov	r1, r0
   1e5a0:	2800      	cmp	r0, #0
   1e5a2:	d055      	beq.n	1e650 <main+0x338>
		printk("ERROR: mqtt_connect %d\n", err);
   1e5a4:	4829      	ldr	r0, [pc, #164]	; (1e64c <main+0x334>)
   1e5a6:	e790      	b.n	1e4ca <main+0x1b2>
   1e5a8:	000375d6 	.word	0x000375d6
   1e5ac:	00037933 	.word	0x00037933
   1e5b0:	0003795b 	.word	0x0003795b
   1e5b4:	04400004 	.word	0x04400004
   1e5b8:	00037970 	.word	0x00037970
   1e5bc:	0003798e 	.word	0x0003798e
   1e5c0:	05500001 	.word	0x05500001
   1e5c4:	0003799c 	.word	0x0003799c
   1e5c8:	000379bf 	.word	0x000379bf
   1e5cc:	00037a3b 	.word	0x00037a3b
   1e5d0:	00037a5d 	.word	0x00037a5d
   1e5d4:	00037a4f 	.word	0x00037a4f
   1e5d8:	00037a66 	.word	0x00037a66
   1e5dc:	00037a83 	.word	0x00037a83
   1e5e0:	00037aa9 	.word	0x00037aa9
   1e5e4:	00037acc 	.word	0x00037acc
   1e5e8:	00037ae5 	.word	0x00037ae5
   1e5ec:	00037b0a 	.word	0x00037b0a
   1e5f0:	200220f8 	.word	0x200220f8
   1e5f4:	00037b4f 	.word	0x00037b4f
   1e5f8:	00037b1f 	.word	0x00037b1f
   1e5fc:	00037b5a 	.word	0x00037b5a
   1e600:	00037b72 	.word	0x00037b72
   1e604:	00037ba0 	.word	0x00037ba0
   1e608:	2002401a 	.word	0x2002401a
   1e60c:	00037cf0 	.word	0x00037cf0
   1e610:	00037c24 	.word	0x00037c24
   1e614:	20023ff8 	.word	0x20023ff8
   1e618:	0001e17d 	.word	0x0001e17d
   1e61c:	200240f0 	.word	0x200240f0
   1e620:	20024170 	.word	0x20024170
   1e624:	20029540 	.word	0x20029540
   1e628:	0001e0d9 	.word	0x0001e0d9
   1e62c:	00037c33 	.word	0x00037c33
   1e630:	000379ed 	.word	0x000379ed
   1e634:	00037a1d 	.word	0x00037a1d
   1e638:	00037bbe 	.word	0x00037bbe
   1e63c:	00037c0b 	.word	0x00037c0b
   1e640:	20023ffc 	.word	0x20023ffc
   1e644:	00037bcf 	.word	0x00037bcf
   1e648:	00037be0 	.word	0x00037be0
   1e64c:	00037c4c 	.word	0x00037c4c
	fds.fd = c->transport.tls.sock;
   1e650:	4d34      	ldr	r5, [pc, #208]	; (1e724 <main+0x40c>)
   1e652:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
	fds.events = POLLIN;
   1e654:	80ae      	strh	r6, [r5, #4]
	fds.fd = c->transport.tls.sock;
   1e656:	602b      	str	r3, [r5, #0]
	boot_write_img_confirmed();
   1e658:	f015 f8e3 	bl	33822 <boot_write_img_confirmed>
	__ASSERT_NO_MSG(socket_ops);
   1e65c:	4f32      	ldr	r7, [pc, #200]	; (1e728 <main+0x410>)
   1e65e:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 1e750 <main+0x438>
   1e662:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 1e754 <main+0x43c>
   1e666:	6823      	ldr	r3, [r4, #0]
   1e668:	b94b      	cbnz	r3, 1e67e <main+0x366>
   1e66a:	4649      	mov	r1, r9
   1e66c:	4640      	mov	r0, r8
   1e66e:	234d      	movs	r3, #77	; 0x4d
   1e670:	463a      	mov	r2, r7
   1e672:	f014 ff50 	bl	33516 <printk>
   1e676:	214d      	movs	r1, #77	; 0x4d
   1e678:	4638      	mov	r0, r7
   1e67a:	f014 ff92 	bl	335a2 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->poll);
   1e67e:	6823      	ldr	r3, [r4, #0]
   1e680:	699b      	ldr	r3, [r3, #24]
   1e682:	b94b      	cbnz	r3, 1e698 <main+0x380>
   1e684:	4640      	mov	r0, r8
   1e686:	4929      	ldr	r1, [pc, #164]	; (1e72c <main+0x414>)
   1e688:	234e      	movs	r3, #78	; 0x4e
   1e68a:	463a      	mov	r2, r7
   1e68c:	f014 ff43 	bl	33516 <printk>
   1e690:	214e      	movs	r1, #78	; 0x4e
   1e692:	4638      	mov	r0, r7
   1e694:	f014 ff85 	bl	335a2 <assert_post_action>
	return socket_ops->poll(fds, nfds, timeout);
   1e698:	6823      	ldr	r3, [r4, #0]
   1e69a:	f64e 2260 	movw	r2, #60000	; 0xea60
   1e69e:	2101      	movs	r1, #1
   1e6a0:	699b      	ldr	r3, [r3, #24]
   1e6a2:	4820      	ldr	r0, [pc, #128]	; (1e724 <main+0x40c>)
   1e6a4:	4798      	blx	r3
		if (err < 0) {
   1e6a6:	2800      	cmp	r0, #0
   1e6a8:	da11      	bge.n	1e6ce <main+0x3b6>
			printk("ERROR: poll %d\n", errno);
   1e6aa:	f015 fb02 	bl	33cb2 <__errno>
   1e6ae:	6801      	ldr	r1, [r0, #0]
   1e6b0:	481f      	ldr	r0, [pc, #124]	; (1e730 <main+0x418>)
			printk("ERROR: mqtt_live %d\n", err);
   1e6b2:	f014 ff30 	bl	33516 <printk>
	printk("Disconnecting MQTT client...\n");
   1e6b6:	481f      	ldr	r0, [pc, #124]	; (1e734 <main+0x41c>)
   1e6b8:	f014 ff2d 	bl	33516 <printk>
	err = mqtt_disconnect(&client);
   1e6bc:	a815      	add	r0, sp, #84	; 0x54
   1e6be:	f015 ff36 	bl	3452e <mqtt_disconnect>
	if (err) {
   1e6c2:	4601      	mov	r1, r0
   1e6c4:	2800      	cmp	r0, #0
   1e6c6:	f43f af0e 	beq.w	1e4e6 <main+0x1ce>
		printk("Could not disconnect MQTT client. Error: %d\n", err);
   1e6ca:	481b      	ldr	r0, [pc, #108]	; (1e738 <main+0x420>)
   1e6cc:	e6fd      	b.n	1e4ca <main+0x1b2>
		err = mqtt_live(&client);
   1e6ce:	a815      	add	r0, sp, #84	; 0x54
   1e6d0:	f015 ffcf 	bl	34672 <mqtt_live>
		if ((err != 0) && (err != -EAGAIN)) {
   1e6d4:	4601      	mov	r1, r0
   1e6d6:	b120      	cbz	r0, 1e6e2 <main+0x3ca>
   1e6d8:	f110 0f0b 	cmn.w	r0, #11
   1e6dc:	d001      	beq.n	1e6e2 <main+0x3ca>
			printk("ERROR: mqtt_live %d\n", err);
   1e6de:	4817      	ldr	r0, [pc, #92]	; (1e73c <main+0x424>)
   1e6e0:	e7e7      	b.n	1e6b2 <main+0x39a>
		if ((fds.revents & POLLIN) == POLLIN) {
   1e6e2:	88eb      	ldrh	r3, [r5, #6]
   1e6e4:	07da      	lsls	r2, r3, #31
   1e6e6:	d506      	bpl.n	1e6f6 <main+0x3de>
			err = mqtt_input(&client);
   1e6e8:	a815      	add	r0, sp, #84	; 0x54
   1e6ea:	f015 ffe9 	bl	346c0 <mqtt_input>
			if (err != 0) {
   1e6ee:	4601      	mov	r1, r0
   1e6f0:	b108      	cbz	r0, 1e6f6 <main+0x3de>
				printk("ERROR: mqtt_input %d\n", err);
   1e6f2:	4813      	ldr	r0, [pc, #76]	; (1e740 <main+0x428>)
   1e6f4:	e7dd      	b.n	1e6b2 <main+0x39a>
		if ((fds.revents & POLLERR) == POLLERR) {
   1e6f6:	88e8      	ldrh	r0, [r5, #6]
   1e6f8:	0703      	lsls	r3, r0, #28
   1e6fa:	d503      	bpl.n	1e704 <main+0x3ec>
			printk("POLLERR\n");
   1e6fc:	4811      	ldr	r0, [pc, #68]	; (1e744 <main+0x42c>)
			printk("POLLNVAL\n");
   1e6fe:	f014 ff0a 	bl	33516 <printk>
			break;
   1e702:	e7d8      	b.n	1e6b6 <main+0x39e>
		if ((fds.revents & POLLNVAL) == POLLNVAL) {
   1e704:	f010 0620 	ands.w	r6, r0, #32
   1e708:	d001      	beq.n	1e70e <main+0x3f6>
			printk("POLLNVAL\n");
   1e70a:	480f      	ldr	r0, [pc, #60]	; (1e748 <main+0x430>)
   1e70c:	e7f7      	b.n	1e6fe <main+0x3e6>
		if (do_reboot) {
   1e70e:	4b0f      	ldr	r3, [pc, #60]	; (1e74c <main+0x434>)
   1e710:	781b      	ldrb	r3, [r3, #0]
   1e712:	2b00      	cmp	r3, #0
   1e714:	d0a7      	beq.n	1e666 <main+0x34e>
			mqtt_disconnect(&client);
   1e716:	a815      	add	r0, sp, #84	; 0x54
   1e718:	f015 ff09 	bl	3452e <mqtt_disconnect>
			sys_reboot(0);
   1e71c:	4630      	mov	r0, r6
   1e71e:	f001 fa91 	bl	1fc44 <sys_reboot>
   1e722:	e7a0      	b.n	1e666 <main+0x34e>
   1e724:	200220f0 	.word	0x200220f0
   1e728:	00037b1f 	.word	0x00037b1f
   1e72c:	00037c64 	.word	0x00037c64
   1e730:	00037c75 	.word	0x00037c75
   1e734:	0003785c 	.word	0x0003785c
   1e738:	00037cc3 	.word	0x00037cc3
   1e73c:	00037c85 	.word	0x00037c85
   1e740:	00037c9a 	.word	0x00037c9a
   1e744:	00037cb0 	.word	0x00037cb0
   1e748:	00037cb9 	.word	0x00037cb9
   1e74c:	2002406f 	.word	0x2002406f
   1e750:	00037b4f 	.word	0x00037b4f
   1e754:	00037a66 	.word	0x00037a66

0001e758 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

u8_t crc8_ccitt(u8_t val, const void *buf, size_t cnt)
{
   1e758:	b530      	push	{r4, r5, lr}
	int i;
	const u8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   1e75a:	4c0a      	ldr	r4, [pc, #40]	; (1e784 <crc8_ccitt+0x2c>)
   1e75c:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
   1e75e:	4291      	cmp	r1, r2
   1e760:	d100      	bne.n	1e764 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
   1e762:	bd30      	pop	{r4, r5, pc}
		val ^= p[i];
   1e764:	f811 3b01 	ldrb.w	r3, [r1], #1
   1e768:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   1e76a:	0903      	lsrs	r3, r0, #4
   1e76c:	5ce3      	ldrb	r3, [r4, r3]
   1e76e:	ea83 1300 	eor.w	r3, r3, r0, lsl #4
   1e772:	b2dd      	uxtb	r5, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   1e774:	f3c3 1303 	ubfx	r3, r3, #4, #4
   1e778:	5ce0      	ldrb	r0, [r4, r3]
   1e77a:	ea80 1005 	eor.w	r0, r0, r5, lsl #4
   1e77e:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
   1e780:	e7ed      	b.n	1e75e <crc8_ccitt+0x6>
   1e782:	bf00      	nop
   1e784:	00037d15 	.word	0x00037d15

0001e788 <z_sys_mem_pool_block_free>:
	return 0;
}

void z_sys_mem_pool_block_free(struct sys_mem_pool_base *p, u32_t level,
			      u32_t block)
{
   1e788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e78c:	b085      	sub	sp, #20
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1e78e:	7a83      	ldrb	r3, [r0, #10]
{
   1e790:	af00      	add	r7, sp, #0
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   1e792:	009b      	lsls	r3, r3, #2
   1e794:	3307      	adds	r3, #7
   1e796:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   1e79a:	ebad 0d03 	sub.w	sp, sp, r3
   1e79e:	46e9      	mov	r9, sp
	 * to avoid having to store it in precious RAM bytes.
	 * Overhead here is somewhat higher because block_free()
	 * doesn't inherently need to traverse all the larger
	 * sublevels.
	 */
	lsizes[0] = p->max_sz;
   1e7a0:	6843      	ldr	r3, [r0, #4]
{
   1e7a2:	4606      	mov	r6, r0
	lsizes[0] = p->max_sz;
   1e7a4:	464c      	mov	r4, r9
	for (i = 1; i <= level; i++) {
   1e7a6:	2001      	movs	r0, #1
	lsizes[0] = p->max_sz;
   1e7a8:	f8c9 3000 	str.w	r3, [r9]
	for (i = 1; i <= level; i++) {
   1e7ac:	4281      	cmp	r1, r0
   1e7ae:	d222      	bcs.n	1e7f6 <z_sys_mem_pool_block_free+0x6e>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1e7b0:	7c34      	ldrb	r4, [r6, #16]
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
	}

	block_free(p, level, lsizes, block);
   1e7b2:	4688      	mov	r8, r1
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1e7b4:	f014 0401 	ands.w	r4, r4, #1
	block_free(p, level, lsizes, block);
   1e7b8:	4615      	mov	r5, r2
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1e7ba:	d024      	beq.n	1e806 <z_sys_mem_pool_block_free+0x7e>
   1e7bc:	f014 fd8b 	bl	332d6 <pool_irq_lock.isra.0.part.0>
	unsigned int key = pool_irq_lock(p);
   1e7c0:	4604      	mov	r4, r0
	while (level >= 0) {
   1e7c2:	f1b8 0f00 	cmp.w	r8, #0
   1e7c6:	da20      	bge.n	1e80a <z_sys_mem_pool_block_free+0x82>
	__ASSERT(0, "out of levels");
   1e7c8:	23bc      	movs	r3, #188	; 0xbc
   1e7ca:	4a52      	ldr	r2, [pc, #328]	; (1e914 <z_sys_mem_pool_block_free+0x18c>)
   1e7cc:	4952      	ldr	r1, [pc, #328]	; (1e918 <z_sys_mem_pool_block_free+0x190>)
   1e7ce:	4853      	ldr	r0, [pc, #332]	; (1e91c <z_sys_mem_pool_block_free+0x194>)
   1e7d0:	f014 fea1 	bl	33516 <printk>
   1e7d4:	4852      	ldr	r0, [pc, #328]	; (1e920 <z_sys_mem_pool_block_free+0x198>)
   1e7d6:	f014 fe9e 	bl	33516 <printk>
   1e7da:	21bc      	movs	r1, #188	; 0xbc
   1e7dc:	484d      	ldr	r0, [pc, #308]	; (1e914 <z_sys_mem_pool_block_free+0x18c>)
   1e7de:	f014 fee0 	bl	335a2 <assert_post_action>
	return -1;
   1e7e2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	pool_irq_unlock(p, key);
   1e7e6:	4621      	mov	r1, r4
   1e7e8:	7c30      	ldrb	r0, [r6, #16]
   1e7ea:	f014 fd7d 	bl	332e8 <pool_irq_unlock.isra.0>
}
   1e7ee:	3714      	adds	r7, #20
   1e7f0:	46bd      	mov	sp, r7
   1e7f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
   1e7f6:	6823      	ldr	r3, [r4, #0]
	for (i = 1; i <= level; i++) {
   1e7f8:	3001      	adds	r0, #1
		lsizes[i] = WB_DN(lsizes[i-1] / 4);
   1e7fa:	089b      	lsrs	r3, r3, #2
   1e7fc:	f023 0303 	bic.w	r3, r3, #3
   1e800:	f844 3f04 	str.w	r3, [r4, #4]!
	for (i = 1; i <= level; i++) {
   1e804:	e7d2      	b.n	1e7ac <z_sys_mem_pool_block_free+0x24>
		return 0;
   1e806:	4620      	mov	r0, r4
   1e808:	e7da      	b.n	1e7c0 <z_sys_mem_pool_block_free+0x38>
		int i, lsz = lsizes[level];
   1e80a:	f859 3028 	ldr.w	r3, [r9, r8, lsl #2]
	int bit = get_bit_ptr(p, level, bn, &word);
   1e80e:	462a      	mov	r2, r5
	return (u8_t *)p->buf + lsz * block;
   1e810:	fb03 fb05 	mul.w	fp, r3, r5
		int i, lsz = lsizes[level];
   1e814:	607b      	str	r3, [r7, #4]
	return (u8_t *)p->buf + lsz * block;
   1e816:	6833      	ldr	r3, [r6, #0]
	int bit = get_bit_ptr(p, level, bn, &word);
   1e818:	4641      	mov	r1, r8
	return (u8_t *)p->buf + lsz * block;
   1e81a:	603b      	str	r3, [r7, #0]
	int bit = get_bit_ptr(p, level, bn, &word);
   1e81c:	4630      	mov	r0, r6
	return (u8_t *)p->buf + lsz * block;
   1e81e:	eb03 0a0b 	add.w	sl, r3, fp
	int bit = get_bit_ptr(p, level, bn, &word);
   1e822:	f107 030c 	add.w	r3, r7, #12
   1e826:	f014 fd3f 	bl	332a8 <get_bit_ptr>
	return (*word >> bit) & 1;
   1e82a:	68fb      	ldr	r3, [r7, #12]
   1e82c:	681b      	ldr	r3, [r3, #0]
   1e82e:	fa23 f000 	lsr.w	r0, r3, r0
		__ASSERT(alloc_bit_is_set(p, level, bn),
   1e832:	07c3      	lsls	r3, r0, #31
   1e834:	d40d      	bmi.n	1e852 <z_sys_mem_pool_block_free+0xca>
   1e836:	23a2      	movs	r3, #162	; 0xa2
   1e838:	4a36      	ldr	r2, [pc, #216]	; (1e914 <z_sys_mem_pool_block_free+0x18c>)
   1e83a:	493a      	ldr	r1, [pc, #232]	; (1e924 <z_sys_mem_pool_block_free+0x19c>)
   1e83c:	4837      	ldr	r0, [pc, #220]	; (1e91c <z_sys_mem_pool_block_free+0x194>)
   1e83e:	f014 fe6a 	bl	33516 <printk>
   1e842:	4651      	mov	r1, sl
   1e844:	4838      	ldr	r0, [pc, #224]	; (1e928 <z_sys_mem_pool_block_free+0x1a0>)
   1e846:	f014 fe66 	bl	33516 <printk>
   1e84a:	21a2      	movs	r1, #162	; 0xa2
   1e84c:	4831      	ldr	r0, [pc, #196]	; (1e914 <z_sys_mem_pool_block_free+0x18c>)
   1e84e:	f014 fea8 	bl	335a2 <assert_post_action>
	int bit = get_bit_ptr(p, level, bn, &word);
   1e852:	462a      	mov	r2, r5
   1e854:	4641      	mov	r1, r8
   1e856:	f107 030c 	add.w	r3, r7, #12
   1e85a:	4630      	mov	r0, r6
   1e85c:	f014 fd24 	bl	332a8 <get_bit_ptr>
	*word &= ~(1<<bit);
   1e860:	2201      	movs	r2, #1
   1e862:	68f9      	ldr	r1, [r7, #12]
   1e864:	fa02 f000 	lsl.w	r0, r2, r0
   1e868:	680b      	ldr	r3, [r1, #0]
		sys_dlist_append(&p->levels[level].free_list, block);
   1e86a:	68f2      	ldr	r2, [r6, #12]
	*word &= ~(1<<bit);
   1e86c:	ea23 0300 	bic.w	r3, r3, r0
   1e870:	600b      	str	r3, [r1, #0]
		sys_dlist_append(&p->levels[level].free_list, block);
   1e872:	230c      	movs	r3, #12
   1e874:	fb03 2308 	mla	r3, r3, r8, r2
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
   1e878:	6839      	ldr	r1, [r7, #0]
   1e87a:	1d1a      	adds	r2, r3, #4
   1e87c:	f841 200b 	str.w	r2, [r1, fp]
	node->prev = list->tail;
   1e880:	689a      	ldr	r2, [r3, #8]
		pool_irq_unlock(p, key);
   1e882:	4621      	mov	r1, r4
   1e884:	f8ca 2004 	str.w	r2, [sl, #4]

	list->tail->next = node;
   1e888:	689a      	ldr	r2, [r3, #8]
   1e88a:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   1e88e:	f8c3 a008 	str.w	sl, [r3, #8]
   1e892:	7c30      	ldrb	r0, [r6, #16]
   1e894:	f014 fd28 	bl	332e8 <pool_irq_unlock.isra.0>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   1e898:	7c34      	ldrb	r4, [r6, #16]
   1e89a:	f014 0401 	ands.w	r4, r4, #1
   1e89e:	d037      	beq.n	1e910 <z_sys_mem_pool_block_free+0x188>
   1e8a0:	f014 fd19 	bl	332d6 <pool_irq_lock.isra.0.part.0>
		key = pool_irq_lock(p);
   1e8a4:	4604      	mov	r4, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
   1e8a6:	f1b8 0f00 	cmp.w	r8, #0
   1e8aa:	d09c      	beq.n	1e7e6 <z_sys_mem_pool_block_free+0x5e>
	int bit = get_bit_ptr(p, level, bn, &word);
   1e8ac:	f107 030c 	add.w	r3, r7, #12
   1e8b0:	462a      	mov	r2, r5
   1e8b2:	4641      	mov	r1, r8
   1e8b4:	4630      	mov	r0, r6
   1e8b6:	f014 fcf7 	bl	332a8 <get_bit_ptr>
	return (*word >> (4*(bit / 4))) & 0xf;
   1e8ba:	68fb      	ldr	r3, [r7, #12]
   1e8bc:	2800      	cmp	r0, #0
   1e8be:	681b      	ldr	r3, [r3, #0]
   1e8c0:	bfb8      	it	lt
   1e8c2:	3003      	addlt	r0, #3
   1e8c4:	f020 0003 	bic.w	r0, r0, #3
   1e8c8:	fa23 f000 	lsr.w	r0, r3, r0
		if (level == 0 || partner_alloc_bits(p, level, bn) != 0) {
   1e8cc:	f010 030f 	ands.w	r3, r0, #15
   1e8d0:	d189      	bne.n	1e7e6 <z_sys_mem_pool_block_free+0x5e>
	node->next = NULL;
   1e8d2:	469c      	mov	ip, r3
			int b = (bn & ~3) + i;
   1e8d4:	f025 0b03 	bic.w	fp, r5, #3
	return (u8_t *)p->buf + lsz * block;
   1e8d8:	6879      	ldr	r1, [r7, #4]
			int b = (bn & ~3) + i;
   1e8da:	eb0b 0203 	add.w	r2, fp, r3
	return (u8_t *)p->buf + lsz * block;
   1e8de:	434a      	muls	r2, r1
   1e8e0:	6831      	ldr	r1, [r6, #0]
		for (i = 0; i < 4; i++) {
   1e8e2:	3301      	adds	r3, #1
	return (u8_t *)p->buf + lsz * block;
   1e8e4:	1888      	adds	r0, r1, r2
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   1e8e6:	f8d0 a004 	ldr.w	sl, [r0, #4]
   1e8ea:	f851 e002 	ldr.w	lr, [r1, r2]
		for (i = 0; i < 4; i++) {
   1e8ee:	2b04      	cmp	r3, #4
   1e8f0:	f8ca e000 	str.w	lr, [sl]
	node->next->prev = node->prev;
   1e8f4:	f8ce a004 	str.w	sl, [lr, #4]
	node->next = NULL;
   1e8f8:	f841 c002 	str.w	ip, [r1, r2]
	node->prev = NULL;
   1e8fc:	f8c0 c004 	str.w	ip, [r0, #4]
   1e900:	d1ea      	bne.n	1e8d8 <z_sys_mem_pool_block_free+0x150>
		bn = bn / 4;
   1e902:	2d00      	cmp	r5, #0
   1e904:	bfb8      	it	lt
   1e906:	3503      	addlt	r5, #3
		level = level - 1;
   1e908:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		bn = bn / 4;
   1e90c:	10ad      	asrs	r5, r5, #2
   1e90e:	e758      	b.n	1e7c2 <z_sys_mem_pool_block_free+0x3a>
		return 0;
   1e910:	4620      	mov	r0, r4
   1e912:	e7c7      	b.n	1e8a4 <z_sys_mem_pool_block_free+0x11c>
   1e914:	00037d25 	.word	0x00037d25
   1e918:	0003afd7 	.word	0x0003afd7
   1e91c:	00037a66 	.word	0x00037a66
   1e920:	00037d8d 	.word	0x00037d8d
   1e924:	00037d49 	.word	0x00037d49
   1e928:	00037d68 	.word	0x00037d68

0001e92c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   1e92c:	680b      	ldr	r3, [r1, #0]
   1e92e:	3301      	adds	r3, #1
   1e930:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   1e932:	4b01      	ldr	r3, [pc, #4]	; (1e938 <char_out+0xc>)
   1e934:	681b      	ldr	r3, [r3, #0]
   1e936:	4718      	bx	r3
   1e938:	20029544 	.word	0x20029544

0001e93c <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
   1e93c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e940:	ed2d 8b02 	vpush	{d8}
   1e944:	b083      	sub	sp, #12
   1e946:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   1e948:	469a      	mov	sl, r3
   1e94a:	2c01      	cmp	r4, #1
   1e94c:	bfb8      	it	lt
   1e94e:	2401      	movlt	r4, #1
   1e950:	2b01      	cmp	r3, #1
   1e952:	bf0c      	ite	eq
   1e954:	2330      	moveq	r3, #48	; 0x30
   1e956:	2320      	movne	r3, #32
   1e958:	4615      	mov	r5, r2
   1e95a:	4606      	mov	r6, r0
   1e95c:	ee08 3a10 	vmov	s16, r3
   1e960:	2701      	movs	r7, #1
   1e962:	f04f 080a 	mov.w	r8, #10
   1e966:	2200      	movs	r2, #0
   1e968:	f8df b074 	ldr.w	fp, [pc, #116]	; 1e9e0 <_printk_dec_ulong+0xa4>
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
   1e96c:	fbb5 f9fb 	udiv	r9, r5, fp
   1e970:	b90a      	cbnz	r2, 1e976 <_printk_dec_ulong+0x3a>
   1e972:	45ab      	cmp	fp, r5
   1e974:	d820      	bhi.n	1e9b8 <_printk_dec_ulong+0x7c>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
   1e976:	f109 0030 	add.w	r0, r9, #48	; 0x30
   1e97a:	9100      	str	r1, [sp, #0]
   1e97c:	47b0      	blx	r6
			found_largest_digit = 1;
   1e97e:	2201      	movs	r2, #1
			digits++;
   1e980:	3701      	adds	r7, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
   1e982:	9900      	ldr	r1, [sp, #0]
		}
		remaining--;
		remainder %= pos;
		pos /= 10;
   1e984:	230a      	movs	r3, #10
		remaining--;
   1e986:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
	while (pos >= 10) {
   1e98a:	f1b8 0f01 	cmp.w	r8, #1
		remainder %= pos;
   1e98e:	fb0b 5519 	mls	r5, fp, r9, r5
		pos /= 10;
   1e992:	fbbb fbf3 	udiv	fp, fp, r3
	while (pos >= 10) {
   1e996:	d1e9      	bne.n	1e96c <_printk_dec_ulong+0x30>
	}
	out((int)(remainder + 48), ctx);
   1e998:	f105 0030 	add.w	r0, r5, #48	; 0x30
   1e99c:	9100      	str	r1, [sp, #0]
   1e99e:	47b0      	blx	r6

	if (padding == PAD_SPACE_AFTER) {
   1e9a0:	f1ba 0f03 	cmp.w	sl, #3
   1e9a4:	9900      	ldr	r1, [sp, #0]
   1e9a6:	d102      	bne.n	1e9ae <_printk_dec_ulong+0x72>
		remaining = min_width - digits;
   1e9a8:	1be4      	subs	r4, r4, r7
		while (remaining-- > 0) {
   1e9aa:	2c00      	cmp	r4, #0
   1e9ac:	dc11      	bgt.n	1e9d2 <_printk_dec_ulong+0x96>
			out(' ', ctx);
		}
	}
}
   1e9ae:	b003      	add	sp, #12
   1e9b0:	ecbd 8b02 	vpop	{d8}
   1e9b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
   1e9b8:	4544      	cmp	r4, r8
   1e9ba:	dbe3      	blt.n	1e984 <_printk_dec_ulong+0x48>
				&& padding < PAD_SPACE_AFTER) {
   1e9bc:	f1ba 0f02 	cmp.w	sl, #2
   1e9c0:	d8e0      	bhi.n	1e984 <_printk_dec_ulong+0x48>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
   1e9c2:	ee18 0a10 	vmov	r0, s16
   1e9c6:	e9cd 1200 	strd	r1, r2, [sp]
			digits++;
   1e9ca:	3701      	adds	r7, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
   1e9cc:	47b0      	blx	r6
			digits++;
   1e9ce:	9a01      	ldr	r2, [sp, #4]
   1e9d0:	e7d7      	b.n	1e982 <_printk_dec_ulong+0x46>
			out(' ', ctx);
   1e9d2:	2020      	movs	r0, #32
   1e9d4:	9100      	str	r1, [sp, #0]
   1e9d6:	3c01      	subs	r4, #1
   1e9d8:	47b0      	blx	r6
   1e9da:	9900      	ldr	r1, [sp, #0]
   1e9dc:	e7e5      	b.n	1e9aa <_printk_dec_ulong+0x6e>
   1e9de:	bf00      	nop
   1e9e0:	3b9aca00 	.word	0x3b9aca00

0001e9e4 <__printk_hook_install>:
	_char_out = fn;
   1e9e4:	4b01      	ldr	r3, [pc, #4]	; (1e9ec <__printk_hook_install+0x8>)
   1e9e6:	6018      	str	r0, [r3, #0]
}
   1e9e8:	4770      	bx	lr
   1e9ea:	bf00      	nop
   1e9ec:	20029544 	.word	0x20029544

0001e9f0 <z_vprintk>:
{
   1e9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
   1e9f4:	2700      	movs	r7, #0
{
   1e9f6:	4605      	mov	r5, r0
   1e9f8:	468b      	mov	fp, r1
	int min_width = -1;
   1e9fa:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
   1e9fe:	46b8      	mov	r8, r7
{
   1ea00:	461c      	mov	r4, r3
   1ea02:	b08d      	sub	sp, #52	; 0x34
   1ea04:	1e53      	subs	r3, r2, #1
   1ea06:	9303      	str	r3, [sp, #12]
			might_format = 0;
   1ea08:	2600      	movs	r6, #0
					break;
   1ea0a:	e005      	b.n	1ea18 <z_vprintk+0x28>
		if (!might_format) {
   1ea0c:	b96e      	cbnz	r6, 1ea2a <z_vprintk+0x3a>
			if (*fmt != '%') {
   1ea0e:	2825      	cmp	r0, #37	; 0x25
   1ea10:	f000 8171 	beq.w	1ecf6 <z_vprintk+0x306>
				out((int)*fmt, ctx);
   1ea14:	4659      	mov	r1, fp
   1ea16:	47a8      	blx	r5
	while (*fmt) {
   1ea18:	9b03      	ldr	r3, [sp, #12]
   1ea1a:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   1ea1e:	9303      	str	r3, [sp, #12]
   1ea20:	2800      	cmp	r0, #0
   1ea22:	d1f3      	bne.n	1ea0c <z_vprintk+0x1c>
}
   1ea24:	b00d      	add	sp, #52	; 0x34
   1ea26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
   1ea2a:	287a      	cmp	r0, #122	; 0x7a
   1ea2c:	d80a      	bhi.n	1ea44 <z_vprintk+0x54>
   1ea2e:	2862      	cmp	r0, #98	; 0x62
   1ea30:	d810      	bhi.n	1ea54 <z_vprintk+0x64>
   1ea32:	2830      	cmp	r0, #48	; 0x30
   1ea34:	d054      	beq.n	1eae0 <z_vprintk+0xf0>
   1ea36:	d845      	bhi.n	1eac4 <z_vprintk+0xd4>
   1ea38:	2825      	cmp	r0, #37	; 0x25
   1ea3a:	f000 815a 	beq.w	1ecf2 <z_vprintk+0x302>
   1ea3e:	282d      	cmp	r0, #45	; 0x2d
   1ea40:	f000 815f 	beq.w	1ed02 <z_vprintk+0x312>
					out((int)'%', ctx);
   1ea44:	4659      	mov	r1, fp
   1ea46:	2025      	movs	r0, #37	; 0x25
   1ea48:	47a8      	blx	r5
					out((int)*fmt, ctx);
   1ea4a:	4659      	mov	r1, fp
   1ea4c:	9b03      	ldr	r3, [sp, #12]
   1ea4e:	7818      	ldrb	r0, [r3, #0]
   1ea50:	47a8      	blx	r5
   1ea52:	e7d9      	b.n	1ea08 <z_vprintk+0x18>
   1ea54:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
   1ea58:	2b17      	cmp	r3, #23
   1ea5a:	d8f3      	bhi.n	1ea44 <z_vprintk+0x54>
   1ea5c:	a201      	add	r2, pc, #4	; (adr r2, 1ea64 <z_vprintk+0x74>)
   1ea5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1ea62:	bf00      	nop
   1ea64:	0001eceb 	.word	0x0001eceb
   1ea68:	0001eb2f 	.word	0x0001eb2f
   1ea6c:	0001ea45 	.word	0x0001ea45
   1ea70:	0001ea45 	.word	0x0001ea45
   1ea74:	0001ea45 	.word	0x0001ea45
   1ea78:	0001eb11 	.word	0x0001eb11
   1ea7c:	0001eb2f 	.word	0x0001eb2f
   1ea80:	0001ea45 	.word	0x0001ea45
   1ea84:	0001ea45 	.word	0x0001ea45
   1ea88:	0001eb11 	.word	0x0001eb11
   1ea8c:	0001ea45 	.word	0x0001ea45
   1ea90:	0001ea45 	.word	0x0001ea45
   1ea94:	0001ea45 	.word	0x0001ea45
   1ea98:	0001ebd1 	.word	0x0001ebd1
   1ea9c:	0001ea45 	.word	0x0001ea45
   1eaa0:	0001ea45 	.word	0x0001ea45
   1eaa4:	0001ecbb 	.word	0x0001ecbb
   1eaa8:	0001ea45 	.word	0x0001ea45
   1eaac:	0001eb9f 	.word	0x0001eb9f
   1eab0:	0001ea45 	.word	0x0001ea45
   1eab4:	0001ea45 	.word	0x0001ea45
   1eab8:	0001eacd 	.word	0x0001eacd
   1eabc:	0001ea45 	.word	0x0001ea45
   1eac0:	0001eb11 	.word	0x0001eb11
			switch (*fmt) {
   1eac4:	2839      	cmp	r0, #57	; 0x39
   1eac6:	d91a      	bls.n	1eafe <z_vprintk+0x10e>
   1eac8:	2858      	cmp	r0, #88	; 0x58
   1eaca:	d1bb      	bne.n	1ea44 <z_vprintk+0x54>
				if (*fmt == 'p') {
   1eacc:	9b03      	ldr	r3, [sp, #12]
   1eace:	781b      	ldrb	r3, [r3, #0]
   1ead0:	2b70      	cmp	r3, #112	; 0x70
   1ead2:	f040 8088 	bne.w	1ebe6 <z_vprintk+0x1f6>
					x = va_arg(ap, unsigned int);
   1ead6:	f854 3b04 	ldr.w	r3, [r4], #4
   1eada:	2200      	movs	r2, #0
   1eadc:	9306      	str	r3, [sp, #24]
   1eade:	e090      	b.n	1ec02 <z_vprintk+0x212>
				if (min_width < 0 && padding == PAD_NONE) {
   1eae0:	f1b9 0f00 	cmp.w	r9, #0
   1eae4:	da0e      	bge.n	1eb04 <z_vprintk+0x114>
   1eae6:	f1b8 0f00 	cmp.w	r8, #0
   1eaea:	f000 810d 	beq.w	1ed08 <z_vprintk+0x318>
					min_width = *fmt - '0';
   1eaee:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   1eaf2:	f1b8 0f00 	cmp.w	r8, #0
   1eaf6:	bf08      	it	eq
   1eaf8:	f04f 0802 	moveq.w	r8, #2
   1eafc:	e78c      	b.n	1ea18 <z_vprintk+0x28>
				if (min_width < 0) {
   1eafe:	f1b9 0f00 	cmp.w	r9, #0
   1eb02:	dbf4      	blt.n	1eaee <z_vprintk+0xfe>
					min_width = 10 * min_width + *fmt - '0';
   1eb04:	230a      	movs	r3, #10
   1eb06:	fb03 0909 	mla	r9, r3, r9, r0
   1eb0a:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
   1eb0e:	e7f0      	b.n	1eaf2 <z_vprintk+0x102>
				if (*fmt == 'h' && length_mod == 'h') {
   1eb10:	2868      	cmp	r0, #104	; 0x68
   1eb12:	d103      	bne.n	1eb1c <z_vprintk+0x12c>
   1eb14:	2f68      	cmp	r7, #104	; 0x68
   1eb16:	d106      	bne.n	1eb26 <z_vprintk+0x136>
					length_mod = 'H';
   1eb18:	2748      	movs	r7, #72	; 0x48
   1eb1a:	e77d      	b.n	1ea18 <z_vprintk+0x28>
				} else if (*fmt == 'l' && length_mod == 'l') {
   1eb1c:	286c      	cmp	r0, #108	; 0x6c
   1eb1e:	d102      	bne.n	1eb26 <z_vprintk+0x136>
   1eb20:	2f6c      	cmp	r7, #108	; 0x6c
   1eb22:	f000 80f4 	beq.w	1ed0e <z_vprintk+0x31e>
				} else if (length_mod == 0) {
   1eb26:	2f00      	cmp	r7, #0
   1eb28:	d18c      	bne.n	1ea44 <z_vprintk+0x54>
   1eb2a:	4607      	mov	r7, r0
   1eb2c:	e774      	b.n	1ea18 <z_vprintk+0x28>
				if (length_mod == 'z') {
   1eb2e:	2f7a      	cmp	r7, #122	; 0x7a
   1eb30:	d102      	bne.n	1eb38 <z_vprintk+0x148>
					d = va_arg(ap, int);
   1eb32:	f854 6b04 	ldr.w	r6, [r4], #4
   1eb36:	e021      	b.n	1eb7c <z_vprintk+0x18c>
				} else if (length_mod == 'l') {
   1eb38:	2f6c      	cmp	r7, #108	; 0x6c
   1eb3a:	d0fa      	beq.n	1eb32 <z_vprintk+0x142>
				} else if (length_mod == 'L') {
   1eb3c:	2f4c      	cmp	r7, #76	; 0x4c
   1eb3e:	d1f8      	bne.n	1eb32 <z_vprintk+0x142>
					long long lld = va_arg(ap, long long);
   1eb40:	3407      	adds	r4, #7
   1eb42:	f024 0407 	bic.w	r4, r4, #7
   1eb46:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   1eb4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
					if (lld > __LONG_MAX__ ||
   1eb4e:	9b04      	ldr	r3, [sp, #16]
   1eb50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1eb54:	f113 4100 	adds.w	r1, r3, #2147483648	; 0x80000000
   1eb58:	9b05      	ldr	r3, [sp, #20]
   1eb5a:	9108      	str	r1, [sp, #32]
   1eb5c:	f143 0100 	adc.w	r1, r3, #0
   1eb60:	9109      	str	r1, [sp, #36]	; 0x24
   1eb62:	2100      	movs	r1, #0
   1eb64:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   1eb68:	4299      	cmp	r1, r3
   1eb6a:	bf08      	it	eq
   1eb6c:	4290      	cmpeq	r0, r2
   1eb6e:	d204      	bcs.n	1eb7a <z_vprintk+0x18a>
						print_err(out, ctx);
   1eb70:	4659      	mov	r1, fp
   1eb72:	4628      	mov	r0, r5
   1eb74:	f014 fcc1 	bl	334fa <print_err>
						break;
   1eb78:	e746      	b.n	1ea08 <z_vprintk+0x18>
					d = lld;
   1eb7a:	9e04      	ldr	r6, [sp, #16]
				if (d < 0) {
   1eb7c:	2e00      	cmp	r6, #0
   1eb7e:	da05      	bge.n	1eb8c <z_vprintk+0x19c>
					out((int)'-', ctx);
   1eb80:	4659      	mov	r1, fp
   1eb82:	202d      	movs	r0, #45	; 0x2d
   1eb84:	47a8      	blx	r5
					d = -d;
   1eb86:	4276      	negs	r6, r6
					min_width--;
   1eb88:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
   1eb8c:	4643      	mov	r3, r8
   1eb8e:	4632      	mov	r2, r6
   1eb90:	f8cd 9000 	str.w	r9, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
   1eb94:	4659      	mov	r1, fp
   1eb96:	4628      	mov	r0, r5
   1eb98:	f7ff fed0 	bl	1e93c <_printk_dec_ulong>
				break;
   1eb9c:	e734      	b.n	1ea08 <z_vprintk+0x18>
				if (length_mod == 'z') {
   1eb9e:	2f7a      	cmp	r7, #122	; 0x7a
   1eba0:	d102      	bne.n	1eba8 <z_vprintk+0x1b8>
					u = va_arg(ap, unsigned int);
   1eba2:	f854 2b04 	ldr.w	r2, [r4], #4
   1eba6:	e00f      	b.n	1ebc8 <z_vprintk+0x1d8>
				} else if (length_mod == 'l') {
   1eba8:	2f6c      	cmp	r7, #108	; 0x6c
   1ebaa:	d0fa      	beq.n	1eba2 <z_vprintk+0x1b2>
				} else if (length_mod == 'L') {
   1ebac:	2f4c      	cmp	r7, #76	; 0x4c
   1ebae:	d1f8      	bne.n	1eba2 <z_vprintk+0x1b2>
					if (llu > ~0UL) {
   1ebb0:	2100      	movs	r1, #0
   1ebb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
					unsigned long long llu =
   1ebb6:	3407      	adds	r4, #7
   1ebb8:	f024 0407 	bic.w	r4, r4, #7
   1ebbc:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
   1ebc0:	4299      	cmp	r1, r3
   1ebc2:	bf08      	it	eq
   1ebc4:	4290      	cmpeq	r0, r2
   1ebc6:	d3d3      	bcc.n	1eb70 <z_vprintk+0x180>
				_printk_dec_ulong(out, ctx, u, padding,
   1ebc8:	4643      	mov	r3, r8
   1ebca:	f8cd 9000 	str.w	r9, [sp]
   1ebce:	e7e1      	b.n	1eb94 <z_vprintk+0x1a4>
				out('0', ctx);
   1ebd0:	4659      	mov	r1, fp
   1ebd2:	2030      	movs	r0, #48	; 0x30
   1ebd4:	47a8      	blx	r5
				out('x', ctx);
   1ebd6:	4659      	mov	r1, fp
   1ebd8:	2078      	movs	r0, #120	; 0x78
   1ebda:	47a8      	blx	r5
					min_width = 8;
   1ebdc:	f04f 0908 	mov.w	r9, #8
				padding = PAD_ZERO_BEFORE;
   1ebe0:	f04f 0801 	mov.w	r8, #1
   1ebe4:	e772      	b.n	1eacc <z_vprintk+0xdc>
				} else if (length_mod == 'l') {
   1ebe6:	2f6c      	cmp	r7, #108	; 0x6c
   1ebe8:	f43f af75 	beq.w	1ead6 <z_vprintk+0xe6>
				} else if (length_mod == 'L') {
   1ebec:	2f4c      	cmp	r7, #76	; 0x4c
   1ebee:	f47f af72 	bne.w	1ead6 <z_vprintk+0xe6>
					x = va_arg(ap, unsigned long long);
   1ebf2:	1de3      	adds	r3, r4, #7
   1ebf4:	f023 0307 	bic.w	r3, r3, #7
   1ebf8:	461c      	mov	r4, r3
   1ebfa:	f854 2b08 	ldr.w	r2, [r4], #8
   1ebfe:	9206      	str	r2, [sp, #24]
   1ec00:	685a      	ldr	r2, [r3, #4]
	int digits = 0;
   1ec02:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
   1ec04:	2310      	movs	r3, #16
	int shift = sizeof(num) * 8;
   1ec06:	f04f 0a40 	mov.w	sl, #64	; 0x40
	int digits = 0;
   1ec0a:	9104      	str	r1, [sp, #16]
	int found_largest_digit = 0;
   1ec0c:	9107      	str	r1, [sp, #28]
		shift -= 4;
   1ec0e:	f1aa 0a04 	sub.w	sl, sl, #4
		nibble = (num >> shift) & 0xf;
   1ec12:	9906      	ldr	r1, [sp, #24]
   1ec14:	f1ca 0e20 	rsb	lr, sl, #32
   1ec18:	f1aa 0c20 	sub.w	ip, sl, #32
   1ec1c:	fa21 f00a 	lsr.w	r0, r1, sl
   1ec20:	fa02 fe0e 	lsl.w	lr, r2, lr
   1ec24:	ea40 000e 	orr.w	r0, r0, lr
   1ec28:	fa22 fc0c 	lsr.w	ip, r2, ip
   1ec2c:	ea40 000c 	orr.w	r0, r0, ip
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
   1ec30:	f010 000f 	ands.w	r0, r0, #15
   1ec34:	d107      	bne.n	1ec46 <z_vprintk+0x256>
   1ec36:	9907      	ldr	r1, [sp, #28]
   1ec38:	b911      	cbnz	r1, 1ec40 <z_vprintk+0x250>
   1ec3a:	f1ba 0f00 	cmp.w	sl, #0
   1ec3e:	d125      	bne.n	1ec8c <z_vprintk+0x29c>
			nibble += nibble > 9 ? 87 : 48;
   1ec40:	f04f 0c30 	mov.w	ip, #48	; 0x30
   1ec44:	e005      	b.n	1ec52 <z_vprintk+0x262>
   1ec46:	2809      	cmp	r0, #9
   1ec48:	bf8c      	ite	hi
   1ec4a:	f04f 0c57 	movhi.w	ip, #87	; 0x57
   1ec4e:	f04f 0c30 	movls.w	ip, #48	; 0x30
   1ec52:	4460      	add	r0, ip
			out((int)nibble, ctx);
   1ec54:	4659      	mov	r1, fp
   1ec56:	b240      	sxtb	r0, r0
   1ec58:	920a      	str	r2, [sp, #40]	; 0x28
   1ec5a:	9307      	str	r3, [sp, #28]
   1ec5c:	47a8      	blx	r5
			digits++;
   1ec5e:	9b04      	ldr	r3, [sp, #16]
	while (shift >= 4) {
   1ec60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
			digits++;
   1ec62:	3301      	adds	r3, #1
   1ec64:	9304      	str	r3, [sp, #16]
	while (shift >= 4) {
   1ec66:	9b07      	ldr	r3, [sp, #28]
   1ec68:	f1ba 0f00 	cmp.w	sl, #0
   1ec6c:	d123      	bne.n	1ecb6 <z_vprintk+0x2c6>
	if (padding == PAD_SPACE_AFTER) {
   1ec6e:	f1b8 0f03 	cmp.w	r8, #3
   1ec72:	f47f aec9 	bne.w	1ea08 <z_vprintk+0x18>
		remaining = min_width * 2 - digits;
   1ec76:	9b04      	ldr	r3, [sp, #16]
   1ec78:	ebc3 0649 	rsb	r6, r3, r9, lsl #1
		while (remaining-- > 0) {
   1ec7c:	2e00      	cmp	r6, #0
   1ec7e:	f77f aec3 	ble.w	1ea08 <z_vprintk+0x18>
			out(' ', ctx);
   1ec82:	4659      	mov	r1, fp
   1ec84:	2020      	movs	r0, #32
   1ec86:	47a8      	blx	r5
   1ec88:	3e01      	subs	r6, #1
   1ec8a:	e7f7      	b.n	1ec7c <z_vprintk+0x28c>
		if (remaining-- <= min_width) {
   1ec8c:	1e59      	subs	r1, r3, #1
   1ec8e:	4599      	cmp	r9, r3
   1ec90:	910a      	str	r1, [sp, #40]	; 0x28
   1ec92:	db07      	blt.n	1eca4 <z_vprintk+0x2b4>
			if (padding == PAD_ZERO_BEFORE) {
   1ec94:	f1b8 0f01 	cmp.w	r8, #1
   1ec98:	d106      	bne.n	1eca8 <z_vprintk+0x2b8>
				out('0', ctx);
   1ec9a:	4659      	mov	r1, fp
   1ec9c:	2030      	movs	r0, #48	; 0x30
   1ec9e:	920b      	str	r2, [sp, #44]	; 0x2c
				out(' ', ctx);
   1eca0:	47a8      	blx	r5
   1eca2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
			nibble += nibble > 9 ? 87 : 48;
   1eca4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1eca6:	e7b2      	b.n	1ec0e <z_vprintk+0x21e>
			} else if (padding == PAD_SPACE_BEFORE) {
   1eca8:	f1b8 0f02 	cmp.w	r8, #2
   1ecac:	d1fa      	bne.n	1eca4 <z_vprintk+0x2b4>
				out(' ', ctx);
   1ecae:	4659      	mov	r1, fp
   1ecb0:	2020      	movs	r0, #32
   1ecb2:	920b      	str	r2, [sp, #44]	; 0x2c
   1ecb4:	e7f4      	b.n	1eca0 <z_vprintk+0x2b0>
			found_largest_digit = 1;
   1ecb6:	9607      	str	r6, [sp, #28]
   1ecb8:	e7a9      	b.n	1ec0e <z_vprintk+0x21e>
				char *s = va_arg(ap, char *);
   1ecba:	f854 6b04 	ldr.w	r6, [r4], #4
				while (*s) {
   1ecbe:	46b2      	mov	sl, r6
   1ecc0:	4653      	mov	r3, sl
   1ecc2:	f81a 0b01 	ldrb.w	r0, [sl], #1
   1ecc6:	b968      	cbnz	r0, 1ece4 <z_vprintk+0x2f4>
				if (padding == PAD_SPACE_AFTER) {
   1ecc8:	f1b8 0f03 	cmp.w	r8, #3
   1eccc:	d121      	bne.n	1ed12 <z_vprintk+0x322>
					int remaining = min_width - (s - start);
   1ecce:	1b9e      	subs	r6, r3, r6
   1ecd0:	eba9 0606 	sub.w	r6, r9, r6
					while (remaining-- > 0) {
   1ecd4:	2e00      	cmp	r6, #0
   1ecd6:	f77f ae97 	ble.w	1ea08 <z_vprintk+0x18>
						out(' ', ctx);
   1ecda:	4659      	mov	r1, fp
   1ecdc:	2020      	movs	r0, #32
   1ecde:	47a8      	blx	r5
   1ece0:	3e01      	subs	r6, #1
   1ece2:	e7f7      	b.n	1ecd4 <z_vprintk+0x2e4>
					out((int)(*s++), ctx);
   1ece4:	4659      	mov	r1, fp
   1ece6:	47a8      	blx	r5
   1ece8:	e7ea      	b.n	1ecc0 <z_vprintk+0x2d0>
				out(c, ctx);
   1ecea:	4659      	mov	r1, fp
   1ecec:	f854 0b04 	ldr.w	r0, [r4], #4
   1ecf0:	e6ae      	b.n	1ea50 <z_vprintk+0x60>
				out((int)'%', ctx);
   1ecf2:	4659      	mov	r1, fp
   1ecf4:	e6ac      	b.n	1ea50 <z_vprintk+0x60>
				length_mod = 0;
   1ecf6:	4637      	mov	r7, r6
				padding = PAD_NONE;
   1ecf8:	46b0      	mov	r8, r6
				min_width = -1;
   1ecfa:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
   1ecfe:	2601      	movs	r6, #1
   1ed00:	e68a      	b.n	1ea18 <z_vprintk+0x28>
			switch (*fmt) {
   1ed02:	f04f 0803 	mov.w	r8, #3
   1ed06:	e687      	b.n	1ea18 <z_vprintk+0x28>
					padding = PAD_ZERO_BEFORE;
   1ed08:	f04f 0801 	mov.w	r8, #1
   1ed0c:	e684      	b.n	1ea18 <z_vprintk+0x28>
					length_mod = 'L';
   1ed0e:	274c      	movs	r7, #76	; 0x4c
   1ed10:	e682      	b.n	1ea18 <z_vprintk+0x28>
			might_format = 0;
   1ed12:	4606      	mov	r6, r0
		++fmt;
   1ed14:	e680      	b.n	1ea18 <z_vprintk+0x28>
   1ed16:	bf00      	nop

0001ed18 <vprintk>:
{
   1ed18:	b507      	push	{r0, r1, r2, lr}
   1ed1a:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
   1ed1c:	2100      	movs	r1, #0
{
   1ed1e:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
   1ed20:	9101      	str	r1, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
   1ed22:	4803      	ldr	r0, [pc, #12]	; (1ed30 <vprintk+0x18>)
   1ed24:	a901      	add	r1, sp, #4
   1ed26:	f7ff fe63 	bl	1e9f0 <z_vprintk>
}
   1ed2a:	b003      	add	sp, #12
   1ed2c:	f85d fb04 	ldr.w	pc, [sp], #4
   1ed30:	0001e92d 	.word	0x0001e92d

0001ed34 <nordicsemi_nrf91_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
   1ed34:	f04f 0220 	mov.w	r2, #32
   1ed38:	f3ef 8311 	mrs	r3, BASEPRI
   1ed3c:	f382 8811 	msr	BASEPRI, r2
   1ed40:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   1ed44:	2101      	movs	r1, #1
   1ed46:	4a04      	ldr	r2, [pc, #16]	; (1ed58 <nordicsemi_nrf91_init+0x24>)
   1ed48:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   1ed4c:	f383 8811 	msr	BASEPRI, r3
   1ed50:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   1ed54:	2000      	movs	r0, #0
   1ed56:	4770      	bx	lr
   1ed58:	40039000 	.word	0x40039000

0001ed5c <nvs_prev_ate>:

/* walking through allocation entry list, from newest to oldest entries
 * read ate from addr, modify addr to the previous ate
 */
static int nvs_prev_ate(struct nvs_fs *fs, u32_t *addr, struct nvs_ate *ate)
{
   1ed5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1ed60:	2308      	movs	r3, #8
{
   1ed62:	460d      	mov	r5, r1
   1ed64:	b085      	sub	sp, #20
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1ed66:	6809      	ldr	r1, [r1, #0]
{
   1ed68:	4607      	mov	r7, r0
	int rc;
	struct nvs_ate close_ate, end_ate;
	u32_t data_end_addr, ate_end_addr;
	size_t ate_size;

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1ed6a:	7c04      	ldrb	r4, [r0, #16]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1ed6c:	f014 fc26 	bl	335bc <nvs_flash_rd>

	rc = nvs_flash_ate_rd(fs, *addr, ate);
	if (rc) {
   1ed70:	b968      	cbnz	r0, 1ed8e <nvs_prev_ate+0x32>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1ed72:	2108      	movs	r1, #8
   1ed74:	4620      	mov	r0, r4
   1ed76:	f014 fc6d 	bl	33654 <nvs_al_size.isra.0>
		return rc;
	}

	*addr += ate_size;
   1ed7a:	6829      	ldr	r1, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   1ed7c:	89bb      	ldrh	r3, [r7, #12]
	*addr += ate_size;
   1ed7e:	4401      	add	r1, r0
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   1ed80:	b28a      	uxth	r2, r1
   1ed82:	1a1b      	subs	r3, r3, r0
   1ed84:	429a      	cmp	r2, r3
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1ed86:	4606      	mov	r6, r0
	*addr += ate_size;
   1ed88:	6029      	str	r1, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   1ed8a:	d003      	beq.n	1ed94 <nvs_prev_ate+0x38>
		return 0;
   1ed8c:	2000      	movs	r0, #0
	/* remark: if there was absolutely no valid data in the sector *addr
	 * is kept at sector_end - 2*ate_size, the next read will contain
	 * invalid data and continue with a sector jump
	 */
	return 0;
}
   1ed8e:	b005      	add	sp, #20
   1ed90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   1ed94:	0c0b      	lsrs	r3, r1, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   1ed96:	bf09      	itett	eq
   1ed98:	89fb      	ldrheq	r3, [r7, #14]
		*addr -= (1 << ADDR_SECT_SHIFT);
   1ed9a:	f5a1 3180 	subne.w	r1, r1, #65536	; 0x10000
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   1ed9e:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
   1eda2:	eb01 4103 	addeq.w	r1, r1, r3, lsl #16
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1eda6:	466a      	mov	r2, sp
   1eda8:	2308      	movs	r3, #8
   1edaa:	4638      	mov	r0, r7
   1edac:	6029      	str	r1, [r5, #0]
   1edae:	f014 fc05 	bl	335bc <nvs_flash_rd>
	if (rc) {
   1edb2:	2800      	cmp	r0, #0
   1edb4:	d1eb      	bne.n	1ed8e <nvs_prev_ate+0x32>
   1edb6:	466a      	mov	r2, sp
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   1edb8:	4603      	mov	r3, r0
		if (data8[i] != value) {
   1edba:	f812 1b01 	ldrb.w	r1, [r2], #1
   1edbe:	29ff      	cmp	r1, #255	; 0xff
   1edc0:	d115      	bne.n	1edee <nvs_prev_ate+0x92>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   1edc2:	3301      	adds	r3, #1
   1edc4:	2b08      	cmp	r3, #8
   1edc6:	d1f8      	bne.n	1edba <nvs_prev_ate+0x5e>
		*addr = fs->ate_wra;
   1edc8:	687b      	ldr	r3, [r7, #4]
   1edca:	602b      	str	r3, [r5, #0]
		return 0;
   1edcc:	e7df      	b.n	1ed8e <nvs_prev_ate+0x32>
		if (close_ate.offset < (fs->sector_size - ate_size) &&
   1edce:	89bb      	ldrh	r3, [r7, #12]
   1edd0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1edd4:	1b9b      	subs	r3, r3, r6
   1edd6:	4299      	cmp	r1, r3
   1edd8:	d20f      	bcs.n	1edfa <nvs_prev_ate+0x9e>
		    !(close_ate.offset % ate_size)) {
   1edda:	fbb1 f3f6 	udiv	r3, r1, r6
   1edde:	fb06 1313 	mls	r3, r6, r3, r1
		if (close_ate.offset < (fs->sector_size - ate_size) &&
   1ede2:	b953      	cbnz	r3, 1edfa <nvs_prev_ate+0x9e>
			(*addr) &= ADDR_SECT_MASK;
   1ede4:	0c24      	lsrs	r4, r4, #16
   1ede6:	0424      	lsls	r4, r4, #16
			(*addr) += close_ate.offset;
   1ede8:	440c      	add	r4, r1
   1edea:	602c      	str	r4, [r5, #0]
			return 0;
   1edec:	e7cf      	b.n	1ed8e <nvs_prev_ate+0x32>
	if (!nvs_ate_crc8_check(&close_ate)) {
   1edee:	4668      	mov	r0, sp
   1edf0:	f014 fc1b 	bl	3362a <nvs_ate_crc8_check>
   1edf4:	682c      	ldr	r4, [r5, #0]
   1edf6:	2800      	cmp	r0, #0
   1edf8:	d0e9      	beq.n	1edce <nvs_prev_ate+0x72>
	data_end_addr = *addr & ADDR_SECT_MASK;
   1edfa:	4b10      	ldr	r3, [pc, #64]	; (1ee3c <nvs_prev_ate+0xe0>)
	*addr -= ate_size;
   1edfc:	1ba4      	subs	r4, r4, r6
			data_end_addr &= ADDR_SECT_MASK;
   1edfe:	4699      	mov	r9, r3
	*addr -= ate_size;
   1ee00:	602c      	str	r4, [r5, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
   1ee02:	ea04 0803 	and.w	r8, r4, r3
	while (ate_end_addr > data_end_addr) {
   1ee06:	45a0      	cmp	r8, r4
   1ee08:	d2c0      	bcs.n	1ed8c <nvs_prev_ate+0x30>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1ee0a:	2308      	movs	r3, #8
   1ee0c:	4621      	mov	r1, r4
   1ee0e:	4638      	mov	r0, r7
   1ee10:	eb0d 0203 	add.w	r2, sp, r3
   1ee14:	f014 fbd2 	bl	335bc <nvs_flash_rd>
		if (rc) {
   1ee18:	2800      	cmp	r0, #0
   1ee1a:	d1b8      	bne.n	1ed8e <nvs_prev_ate+0x32>
		if (!nvs_ate_crc8_check(&end_ate)) {
   1ee1c:	a802      	add	r0, sp, #8
   1ee1e:	f014 fc04 	bl	3362a <nvs_ate_crc8_check>
   1ee22:	b940      	cbnz	r0, 1ee36 <nvs_prev_ate+0xda>
			data_end_addr += end_ate.offset + end_ate.len;
   1ee24:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1ee28:	f8bd 200c 	ldrh.w	r2, [sp, #12]
			data_end_addr &= ADDR_SECT_MASK;
   1ee2c:	ea08 0809 	and.w	r8, r8, r9
			data_end_addr += end_ate.offset + end_ate.len;
   1ee30:	4413      	add	r3, r2
   1ee32:	4498      	add	r8, r3
			*addr = ate_end_addr;
   1ee34:	602c      	str	r4, [r5, #0]
		ate_end_addr -= ate_size;
   1ee36:	1ba4      	subs	r4, r4, r6
   1ee38:	e7e5      	b.n	1ee06 <nvs_prev_ate+0xaa>
   1ee3a:	bf00      	nop
   1ee3c:	ffff0000 	.word	0xffff0000

0001ee40 <nvs_gc>:
/* garbage collection: the address ate_wra has been updated to the new sector
 * that has just been started. The data to gc is in the sector after this new
 * sector.
 */
static int nvs_gc(struct nvs_fs *fs)
{
   1ee40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct nvs_ate close_ate, gc_ate, wlk_ate;
	u32_t sec_addr, gc_addr, gc_prev_addr, wlk_addr, wlk_prev_addr,
	      data_addr, stop_addr;
	size_t ate_size;

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1ee44:	2108      	movs	r1, #8
{
   1ee46:	b095      	sub	sp, #84	; 0x54
   1ee48:	4605      	mov	r5, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1ee4a:	7c00      	ldrb	r0, [r0, #16]
   1ee4c:	f014 fc02 	bl	33654 <nvs_al_size.isra.0>
   1ee50:	4606      	mov	r6, r0

	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   1ee52:	686b      	ldr	r3, [r5, #4]
	nvs_sector_advance(fs, &sec_addr);
   1ee54:	89e8      	ldrh	r0, [r5, #14]
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   1ee56:	0c1b      	lsrs	r3, r3, #16
   1ee58:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &sec_addr);
   1ee5a:	a903      	add	r1, sp, #12
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   1ee5c:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &sec_addr);
   1ee5e:	f014 fc02 	bl	33666 <nvs_sector_advance.isra.0>
	gc_addr = sec_addr + fs->sector_size - ate_size;
   1ee62:	9b03      	ldr	r3, [sp, #12]
   1ee64:	89a9      	ldrh	r1, [r5, #12]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1ee66:	af06      	add	r7, sp, #24
	gc_addr = sec_addr + fs->sector_size - ate_size;
   1ee68:	4419      	add	r1, r3
   1ee6a:	1b89      	subs	r1, r1, r6
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1ee6c:	2308      	movs	r3, #8
   1ee6e:	463a      	mov	r2, r7
   1ee70:	4628      	mov	r0, r5
	gc_addr = sec_addr + fs->sector_size - ate_size;
   1ee72:	9104      	str	r1, [sp, #16]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1ee74:	f014 fba2 	bl	335bc <nvs_flash_rd>

	/* if the sector is not closed don't do gc */
	rc = nvs_flash_ate_rd(fs, gc_addr, &close_ate);
	if (rc < 0) {
   1ee78:	1e04      	subs	r4, r0, #0
   1ee7a:	db71      	blt.n	1ef60 <nvs_gc+0x120>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   1ee7c:	2300      	movs	r3, #0
		if (data8[i] != value) {
   1ee7e:	5cfa      	ldrb	r2, [r7, r3]
   1ee80:	2aff      	cmp	r2, #255	; 0xff
   1ee82:	d171      	bne.n	1ef68 <nvs_gc+0x128>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   1ee84:	3301      	adds	r3, #1
   1ee86:	2b08      	cmp	r3, #8
   1ee88:	d1f9      	bne.n	1ee7e <nvs_gc+0x3e>
		return rc;
	}

	rc = nvs_ate_cmp_const(&close_ate, 0xff);
	if (!rc) {
		rc = nvs_flash_erase_sector(fs, sec_addr);
   1ee8a:	4628      	mov	r0, r5
   1ee8c:	9903      	ldr	r1, [sp, #12]
   1ee8e:	f014 fc1a 	bl	336c6 <nvs_flash_erase_sector>
   1ee92:	4604      	mov	r4, r0
		if (rc) {
   1ee94:	e064      	b.n	1ef60 <nvs_gc+0x120>
		bytes_to_copy = MIN(block_size, len);
   1ee96:	4557      	cmp	r7, sl
   1ee98:	463e      	mov	r6, r7
   1ee9a:	bf28      	it	cs
   1ee9c:	4656      	movcs	r6, sl
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   1ee9e:	4641      	mov	r1, r8
   1eea0:	4633      	mov	r3, r6
   1eea2:	4628      	mov	r0, r5
   1eea4:	aa0c      	add	r2, sp, #48	; 0x30
   1eea6:	f014 fb89 	bl	335bc <nvs_flash_rd>
		if (rc) {
   1eeaa:	4604      	mov	r4, r0
   1eeac:	2800      	cmp	r0, #0
   1eeae:	d157      	bne.n	1ef60 <nvs_gc+0x120>
	if (!len) {
   1eeb0:	b136      	cbz	r6, 1eec0 <nvs_gc+0x80>
   1eeb2:	4633      	mov	r3, r6
   1eeb4:	4628      	mov	r0, r5
   1eeb6:	68a9      	ldr	r1, [r5, #8]
   1eeb8:	aa0c      	add	r2, sp, #48	; 0x30
   1eeba:	f014 fc2a 	bl	33712 <nvs_flash_al_wrt.part.0>
   1eebe:	4604      	mov	r4, r0
	fs->data_wra += nvs_al_size(fs, len);
   1eec0:	4631      	mov	r1, r6
   1eec2:	7c28      	ldrb	r0, [r5, #16]
   1eec4:	f014 fbc6 	bl	33654 <nvs_al_size.isra.0>
   1eec8:	68aa      	ldr	r2, [r5, #8]
   1eeca:	4410      	add	r0, r2
   1eecc:	60a8      	str	r0, [r5, #8]
		if (rc) {
   1eece:	2c00      	cmp	r4, #0
   1eed0:	d146      	bne.n	1ef60 <nvs_gc+0x120>
		len -= bytes_to_copy;
   1eed2:	ebaa 0a06 	sub.w	sl, sl, r6
		addr += bytes_to_copy;
   1eed6:	44b0      	add	r8, r6
   1eed8:	e038      	b.n	1ef4c <nvs_gc+0x10c>
				return rc;
			}
		}

		/* stop gc at end of the sector */
		if (gc_prev_addr == stop_addr) {
   1eeda:	9b01      	ldr	r3, [sp, #4]
   1eedc:	455b      	cmp	r3, fp
   1eede:	d0d4      	beq.n	1ee8a <nvs_gc+0x4a>
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   1eee0:	4628      	mov	r0, r5
   1eee2:	aa08      	add	r2, sp, #32
   1eee4:	a904      	add	r1, sp, #16
		gc_prev_addr = gc_addr;
   1eee6:	f8dd b010 	ldr.w	fp, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   1eeea:	f7ff ff37 	bl	1ed5c <nvs_prev_ate>
		if (rc) {
   1eeee:	4604      	mov	r4, r0
   1eef0:	2800      	cmp	r0, #0
   1eef2:	d135      	bne.n	1ef60 <nvs_gc+0x120>
		wlk_addr = fs->ate_wra;
   1eef4:	686b      	ldr	r3, [r5, #4]
   1eef6:	9305      	str	r3, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   1eef8:	4628      	mov	r0, r5
   1eefa:	aa0a      	add	r2, sp, #40	; 0x28
   1eefc:	a905      	add	r1, sp, #20
			wlk_prev_addr = wlk_addr;
   1eefe:	9f05      	ldr	r7, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   1ef00:	f7ff ff2c 	bl	1ed5c <nvs_prev_ate>
			if (rc) {
   1ef04:	4604      	mov	r4, r0
   1ef06:	bb58      	cbnz	r0, 1ef60 <nvs_gc+0x120>
			if ((wlk_ate.id == gc_ate.id) &&
   1ef08:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   1ef0c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   1ef10:	429a      	cmp	r2, r3
   1ef12:	d1f1      	bne.n	1eef8 <nvs_gc+0xb8>
			    (!nvs_ate_crc8_check(&wlk_ate))) {
   1ef14:	a80a      	add	r0, sp, #40	; 0x28
   1ef16:	f014 fb88 	bl	3362a <nvs_ate_crc8_check>
			if ((wlk_ate.id == gc_ate.id) &&
   1ef1a:	2800      	cmp	r0, #0
   1ef1c:	d1ec      	bne.n	1eef8 <nvs_gc+0xb8>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   1ef1e:	455f      	cmp	r7, fp
   1ef20:	d1db      	bne.n	1eeda <nvs_gc+0x9a>
   1ef22:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   1ef26:	2b00      	cmp	r3, #0
   1ef28:	d0d7      	beq.n	1eeda <nvs_gc+0x9a>
			data_addr += gc_ate.offset;
   1ef2a:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   1ef2e:	ea0b 0809 	and.w	r8, fp, r9
			data_addr += gc_ate.offset;
   1ef32:	4498      	add	r8, r3
			gc_ate.offset = (u16_t)(fs->data_wra & ADDR_OFFS_MASK);
   1ef34:	68ab      	ldr	r3, [r5, #8]
			nvs_ate_crc8_update(&gc_ate);
   1ef36:	a808      	add	r0, sp, #32
			gc_ate.offset = (u16_t)(fs->data_wra & ADDR_OFFS_MASK);
   1ef38:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			nvs_ate_crc8_update(&gc_ate);
   1ef3c:	f014 fb81 	bl	33642 <nvs_ate_crc8_update>
	block_size = NVS_BLOCK_SIZE & ~(fs->write_block_size - 1U);
   1ef40:	7c2f      	ldrb	r7, [r5, #16]
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
   1ef42:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
	block_size = NVS_BLOCK_SIZE & ~(fs->write_block_size - 1U);
   1ef46:	427f      	negs	r7, r7
   1ef48:	f007 0720 	and.w	r7, r7, #32
	while (len) {
   1ef4c:	f1ba 0f00 	cmp.w	sl, #0
   1ef50:	d1a1      	bne.n	1ee96 <nvs_gc+0x56>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
   1ef52:	4628      	mov	r0, r5
   1ef54:	a908      	add	r1, sp, #32
   1ef56:	f014 fc21 	bl	3379c <nvs_flash_ate_wrt>
			if (rc) {
   1ef5a:	4604      	mov	r4, r0
   1ef5c:	2800      	cmp	r0, #0
   1ef5e:	d0bc      	beq.n	1eeda <nvs_gc+0x9a>
	rc = nvs_flash_erase_sector(fs, sec_addr);
	if (rc) {
		return rc;
	}
	return 0;
}
   1ef60:	4620      	mov	r0, r4
   1ef62:	b015      	add	sp, #84	; 0x54
   1ef64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	stop_addr = gc_addr - ate_size;
   1ef68:	9b04      	ldr	r3, [sp, #16]
	gc_addr += close_ate.offset;
   1ef6a:	f8bd 101a 	ldrh.w	r1, [sp, #26]
	stop_addr = gc_addr - ate_size;
   1ef6e:	1b9a      	subs	r2, r3, r6
   1ef70:	9201      	str	r2, [sp, #4]
	gc_addr &= ADDR_SECT_MASK;
   1ef72:	4a03      	ldr	r2, [pc, #12]	; (1ef80 <nvs_gc+0x140>)
   1ef74:	4013      	ands	r3, r2
	gc_addr += close_ate.offset;
   1ef76:	440b      	add	r3, r1
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   1ef78:	4691      	mov	r9, r2
	gc_addr += close_ate.offset;
   1ef7a:	9304      	str	r3, [sp, #16]
   1ef7c:	e7b0      	b.n	1eee0 <nvs_gc+0xa0>
   1ef7e:	bf00      	nop
   1ef80:	ffff0000 	.word	0xffff0000

0001ef84 <nvs_init>:
	}
	return 0;
}

int nvs_init(struct nvs_fs *fs, const char *dev_name)
{
   1ef84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ef88:	4604      	mov	r4, r0
   1ef8a:	460d      	mov	r5, r1
   1ef8c:	b087      	sub	sp, #28

	int rc;
	struct flash_pages_info info;

	k_mutex_init(&fs->nvs_lock);
   1ef8e:	f100 0614 	add.w	r6, r0, #20
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_init(mutex);
   1ef92:	4630      	mov	r0, r6
   1ef94:	f016 fc2a 	bl	357ec <z_impl_k_mutex_init>
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   1ef98:	4628      	mov	r0, r5
   1ef9a:	f00f fafd 	bl	2e598 <z_impl_device_get_binding>

	fs->flash_device = device_get_binding(dev_name);
   1ef9e:	62a0      	str	r0, [r4, #40]	; 0x28
	if (!fs->flash_device) {
   1efa0:	b948      	cbnz	r0, 1efb6 <nvs_init+0x32>
		LOG_ERR("No valid flash device found");
   1efa2:	2145      	movs	r1, #69	; 0x45
   1efa4:	487e      	ldr	r0, [pc, #504]	; (1f1a0 <nvs_init+0x21c>)
   1efa6:	f014 fab6 	bl	33516 <printk>
		return -ENXIO;
   1efaa:	f06f 0505 	mvn.w	r5, #5
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
   1efae:	4628      	mov	r0, r5
   1efb0:	b007      	add	sp, #28
   1efb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
static inline size_t z_impl_flash_get_write_block_size(struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->driver_api;

	return api->write_block_size;
   1efb6:	6843      	ldr	r3, [r0, #4]
	fs->write_block_size = flash_get_write_block_size(fs->flash_device);
   1efb8:	7d1b      	ldrb	r3, [r3, #20]
	if (fs->write_block_size > NVS_BLOCK_SIZE) {
   1efba:	2b20      	cmp	r3, #32
	fs->write_block_size = flash_get_write_block_size(fs->flash_device);
   1efbc:	7423      	strb	r3, [r4, #16]
	if (fs->write_block_size > NVS_BLOCK_SIZE) {
   1efbe:	d906      	bls.n	1efce <nvs_init+0x4a>
		LOG_ERR("Unsupported write block size");
   1efc0:	2145      	movs	r1, #69	; 0x45
   1efc2:	4878      	ldr	r0, [pc, #480]	; (1f1a4 <nvs_init+0x220>)
		LOG_ERR("Unable to get page info");
   1efc4:	f014 faa7 	bl	33516 <printk>
		return -EINVAL;
   1efc8:	f06f 0515 	mvn.w	r5, #21
   1efcc:	e7ef      	b.n	1efae <nvs_init+0x2a>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
   1efce:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   1efd0:	6821      	ldr	r1, [r4, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   1efd2:	aa03      	add	r2, sp, #12
   1efd4:	f015 fc8f 	bl	348f6 <z_impl_flash_get_page_info_by_offs>
	if (rc) {
   1efd8:	b110      	cbz	r0, 1efe0 <nvs_init+0x5c>
		LOG_ERR("Unable to get page info");
   1efda:	2145      	movs	r1, #69	; 0x45
   1efdc:	4872      	ldr	r0, [pc, #456]	; (1f1a8 <nvs_init+0x224>)
   1efde:	e7f1      	b.n	1efc4 <nvs_init+0x40>
	if (!fs->sector_size || fs->sector_size % info.size) {
   1efe0:	89a3      	ldrh	r3, [r4, #12]
   1efe2:	b12b      	cbz	r3, 1eff0 <nvs_init+0x6c>
   1efe4:	9a04      	ldr	r2, [sp, #16]
   1efe6:	fbb3 f5f2 	udiv	r5, r3, r2
   1efea:	fb02 3515 	mls	r5, r2, r5, r3
   1efee:	b115      	cbz	r5, 1eff6 <nvs_init+0x72>
		LOG_ERR("Invalid sector size");
   1eff0:	2145      	movs	r1, #69	; 0x45
   1eff2:	486e      	ldr	r0, [pc, #440]	; (1f1ac <nvs_init+0x228>)
   1eff4:	e7e6      	b.n	1efc4 <nvs_init+0x40>
	if (fs->sector_count < 2) {
   1eff6:	89e3      	ldrh	r3, [r4, #14]
   1eff8:	2b01      	cmp	r3, #1
   1effa:	d802      	bhi.n	1f002 <nvs_init+0x7e>
		LOG_ERR("Configuration error - sector count");
   1effc:	2145      	movs	r1, #69	; 0x45
   1effe:	486c      	ldr	r0, [pc, #432]	; (1f1b0 <nvs_init+0x22c>)
   1f000:	e7e0      	b.n	1efc4 <nvs_init+0x40>
	u32_t addr = 0U;
   1f002:	9500      	str	r5, [sp, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&mutex, *(uintptr_t *)&timeout, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
   1f004:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f008:	4630      	mov	r0, r6
   1f00a:	f00f ff95 	bl	2ef38 <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1f00e:	2108      	movs	r1, #8
   1f010:	7c20      	ldrb	r0, [r4, #16]
   1f012:	f014 fb1f 	bl	33654 <nvs_al_size.isra.0>
	u16_t i, closed_sectors = 0;
   1f016:	46a9      	mov	r9, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1f018:	4607      	mov	r7, r0
	for (i = 0; i < fs->sector_count; i++) {
   1f01a:	89e3      	ldrh	r3, [r4, #14]
   1f01c:	fa1f f885 	uxth.w	r8, r5
   1f020:	4543      	cmp	r3, r8
   1f022:	d805      	bhi.n	1f030 <nvs_init+0xac>
	if (closed_sectors == fs->sector_count) {
   1f024:	89e3      	ldrh	r3, [r4, #14]
   1f026:	454b      	cmp	r3, r9
   1f028:	d11e      	bne.n	1f068 <nvs_init+0xe4>
		return -EDEADLK;
   1f02a:	f06f 052c 	mvn.w	r5, #44	; 0x2c
   1f02e:	e7be      	b.n	1efae <nvs_init+0x2a>
		       (u16_t)(fs->sector_size - ate_size);
   1f030:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
   1f032:	042b      	lsls	r3, r5, #16
		       (u16_t)(fs->sector_size - ate_size);
   1f034:	1bc9      	subs	r1, r1, r7
		addr = (i << ADDR_SECT_SHIFT) +
   1f036:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, 0xff,
   1f03a:	2208      	movs	r2, #8
   1f03c:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
   1f03e:	9100      	str	r1, [sp, #0]
		rc = nvs_flash_cmp_const(fs, addr, 0xff,
   1f040:	f014 fb1c 	bl	3367c <nvs_flash_cmp_const.constprop.0>
		if (rc) {
   1f044:	b170      	cbz	r0, 1f064 <nvs_init+0xe0>
			nvs_sector_advance(fs, &addr);
   1f046:	4669      	mov	r1, sp
   1f048:	89e0      	ldrh	r0, [r4, #14]
   1f04a:	f014 fb0c 	bl	33666 <nvs_sector_advance.isra.0>
			closed_sectors++;
   1f04e:	f109 0901 	add.w	r9, r9, #1
			rc = nvs_flash_cmp_const(fs, addr, 0xff,
   1f052:	2208      	movs	r2, #8
   1f054:	4620      	mov	r0, r4
   1f056:	9900      	ldr	r1, [sp, #0]
			closed_sectors++;
   1f058:	fa1f f989 	uxth.w	r9, r9
			rc = nvs_flash_cmp_const(fs, addr, 0xff,
   1f05c:	f014 fb0e 	bl	3367c <nvs_flash_cmp_const.constprop.0>
			if (!rc) {
   1f060:	2800      	cmp	r0, #0
   1f062:	d0df      	beq.n	1f024 <nvs_init+0xa0>
	for (i = 0; i < fs->sector_count; i++) {
   1f064:	3501      	adds	r5, #1
   1f066:	e7d8      	b.n	1f01a <nvs_init+0x96>
	if (i == fs->sector_count) {
   1f068:	4543      	cmp	r3, r8
   1f06a:	d10a      	bne.n	1f082 <nvs_init+0xfe>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, 0xff,
   1f06c:	9900      	ldr	r1, [sp, #0]
   1f06e:	2208      	movs	r2, #8
   1f070:	4620      	mov	r0, r4
   1f072:	1bc9      	subs	r1, r1, r7
   1f074:	f014 fb02 	bl	3367c <nvs_flash_cmp_const.constprop.0>
		if (!rc) {
   1f078:	b918      	cbnz	r0, 1f082 <nvs_init+0xfe>
			nvs_sector_advance(fs, &addr);
   1f07a:	4669      	mov	r1, sp
   1f07c:	89e0      	ldrh	r0, [r4, #14]
   1f07e:	f014 faf2 	bl	33666 <nvs_sector_advance.isra.0>
	fs->ate_wra = addr - ate_size;
   1f082:	9b00      	ldr	r3, [sp, #0]
   1f084:	1bda      	subs	r2, r3, r7
   1f086:	6062      	str	r2, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
   1f088:	4a4a      	ldr	r2, [pc, #296]	; (1f1b4 <nvs_init+0x230>)
			fs->data_wra = addr & ADDR_SECT_MASK;
   1f08a:	4690      	mov	r8, r2
	fs->data_wra = addr & ADDR_SECT_MASK;
   1f08c:	4013      	ands	r3, r2
   1f08e:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
   1f090:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   1f094:	4299      	cmp	r1, r3
   1f096:	d30e      	bcc.n	1f0b6 <nvs_init+0x132>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1f098:	2308      	movs	r3, #8
   1f09a:	4620      	mov	r0, r4
   1f09c:	aa01      	add	r2, sp, #4
   1f09e:	f014 fa8d 	bl	335bc <nvs_flash_rd>
		if (rc) {
   1f0a2:	4605      	mov	r5, r0
   1f0a4:	bb18      	cbnz	r0, 1f0ee <nvs_init+0x16a>
   1f0a6:	ab01      	add	r3, sp, #4
		if (data8[i] != value) {
   1f0a8:	f813 2b01 	ldrb.w	r2, [r3], #1
   1f0ac:	2aff      	cmp	r2, #255	; 0xff
   1f0ae:	d15e      	bne.n	1f16e <nvs_init+0x1ea>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   1f0b0:	3501      	adds	r5, #1
   1f0b2:	2d08      	cmp	r5, #8
   1f0b4:	d1f8      	bne.n	1f0a8 <nvs_init+0x124>
	while (fs->ate_wra > fs->data_wra) {
   1f0b6:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
   1f0ba:	428a      	cmp	r2, r1
   1f0bc:	d906      	bls.n	1f0cc <nvs_init+0x148>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, 0xff, empty_len);
   1f0be:	4620      	mov	r0, r4
   1f0c0:	1a52      	subs	r2, r2, r1
   1f0c2:	f014 fadb 	bl	3367c <nvs_flash_cmp_const.constprop.0>
		if (rc < 0) {
   1f0c6:	1e05      	subs	r5, r0, #0
   1f0c8:	db11      	blt.n	1f0ee <nvs_init+0x16a>
		if (!rc) {
   1f0ca:	d133      	bne.n	1f134 <nvs_init+0x1b0>
	addr = fs->ate_wra & ADDR_SECT_MASK;
   1f0cc:	6863      	ldr	r3, [r4, #4]
   1f0ce:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 1f1b4 <nvs_init+0x230>
	nvs_sector_advance(fs, &addr);
   1f0d2:	4669      	mov	r1, sp
	addr = fs->ate_wra & ADDR_SECT_MASK;
   1f0d4:	ea03 0308 	and.w	r3, r3, r8
	nvs_sector_advance(fs, &addr);
   1f0d8:	89e0      	ldrh	r0, [r4, #14]
	addr = fs->ate_wra & ADDR_SECT_MASK;
   1f0da:	9300      	str	r3, [sp, #0]
	nvs_sector_advance(fs, &addr);
   1f0dc:	f014 fac3 	bl	33666 <nvs_sector_advance.isra.0>
	rc = nvs_flash_cmp_const(fs, addr, 0xff, fs->sector_size);
   1f0e0:	4620      	mov	r0, r4
   1f0e2:	89a2      	ldrh	r2, [r4, #12]
   1f0e4:	9900      	ldr	r1, [sp, #0]
   1f0e6:	f014 fac9 	bl	3367c <nvs_flash_cmp_const.constprop.0>
	if (rc < 0) {
   1f0ea:	1e05      	subs	r5, r0, #0
   1f0ec:	da27      	bge.n	1f13e <nvs_init+0x1ba>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
   1f0ee:	4630      	mov	r0, r6
   1f0f0:	f010 f800 	bl	2f0f4 <z_impl_k_mutex_unlock>
	if (rc) {
   1f0f4:	2d00      	cmp	r5, #0
   1f0f6:	f47f af5a 	bne.w	1efae <nvs_init+0x2a>
	fs->ready = true;
   1f0fa:	2301      	movs	r3, #1
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
   1f0fc:	89e2      	ldrh	r2, [r4, #14]
	fs->ready = true;
   1f0fe:	7463      	strb	r3, [r4, #17]
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
   1f100:	2149      	movs	r1, #73	; 0x49
   1f102:	89a3      	ldrh	r3, [r4, #12]
   1f104:	482c      	ldr	r0, [pc, #176]	; (1f1b8 <nvs_init+0x234>)
   1f106:	f014 fa06 	bl	33516 <printk>
	LOG_INF("alloc wra: %d, %x",
   1f10a:	6862      	ldr	r2, [r4, #4]
   1f10c:	2149      	movs	r1, #73	; 0x49
   1f10e:	b293      	uxth	r3, r2
   1f110:	482a      	ldr	r0, [pc, #168]	; (1f1bc <nvs_init+0x238>)
   1f112:	0c12      	lsrs	r2, r2, #16
   1f114:	f014 f9ff 	bl	33516 <printk>
	LOG_INF("data wra: %d, %x",
   1f118:	68a2      	ldr	r2, [r4, #8]
   1f11a:	2149      	movs	r1, #73	; 0x49
   1f11c:	b293      	uxth	r3, r2
   1f11e:	4828      	ldr	r0, [pc, #160]	; (1f1c0 <nvs_init+0x23c>)
   1f120:	0c12      	lsrs	r2, r2, #16
   1f122:	f014 f9f8 	bl	33516 <printk>
	return 0;
   1f126:	e742      	b.n	1efae <nvs_init+0x2a>
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   1f128:	f1b9 0f00 	cmp.w	r9, #0
   1f12c:	d034      	beq.n	1f198 <nvs_init+0x214>
				return -ESPIPE;
   1f12e:	f06f 051c 	mvn.w	r5, #28
   1f132:	e73c      	b.n	1efae <nvs_init+0x2a>
		fs->data_wra += fs->write_block_size;
   1f134:	68a3      	ldr	r3, [r4, #8]
   1f136:	7c22      	ldrb	r2, [r4, #16]
   1f138:	4413      	add	r3, r2
   1f13a:	60a3      	str	r3, [r4, #8]
   1f13c:	e7bb      	b.n	1f0b6 <nvs_init+0x132>
	if (rc) {
   1f13e:	d0d6      	beq.n	1f0ee <nvs_init+0x16a>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   1f140:	4620      	mov	r0, r4
   1f142:	6861      	ldr	r1, [r4, #4]
   1f144:	f014 fabf 	bl	336c6 <nvs_flash_erase_sector>
		if (rc) {
   1f148:	4605      	mov	r5, r0
   1f14a:	2800      	cmp	r0, #0
   1f14c:	d1cf      	bne.n	1f0ee <nvs_init+0x16a>
		fs->ate_wra &= ADDR_SECT_MASK;
   1f14e:	6863      	ldr	r3, [r4, #4]
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   1f150:	89a0      	ldrh	r0, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
   1f152:	ea03 0308 	and.w	r3, r3, r8
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   1f156:	4403      	add	r3, r0
   1f158:	eba3 0047 	sub.w	r0, r3, r7, lsl #1
   1f15c:	6060      	str	r0, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
   1f15e:	ea00 0008 	and.w	r0, r0, r8
   1f162:	60a0      	str	r0, [r4, #8]
		rc = nvs_gc(fs);
   1f164:	4620      	mov	r0, r4
   1f166:	f7ff fe6b 	bl	1ee40 <nvs_gc>
   1f16a:	4605      	mov	r5, r0
end:
   1f16c:	e7bf      	b.n	1f0ee <nvs_init+0x16a>
		if (!nvs_ate_crc8_check(&last_ate)) {
   1f16e:	a801      	add	r0, sp, #4
   1f170:	f014 fa5b 	bl	3362a <nvs_ate_crc8_check>
   1f174:	6865      	ldr	r5, [r4, #4]
   1f176:	b978      	cbnz	r0, 1f198 <nvs_init+0x214>
			fs->data_wra = addr & ADDR_SECT_MASK;
   1f178:	9800      	ldr	r0, [sp, #0]
			fs->data_wra += last_ate.offset;
   1f17a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
			fs->data_wra += nvs_al_size(fs, last_ate.len);
   1f17e:	f8bd 9008 	ldrh.w	r9, [sp, #8]
			fs->data_wra = addr & ADDR_SECT_MASK;
   1f182:	ea00 0008 	and.w	r0, r0, r8
			fs->data_wra += last_ate.offset;
   1f186:	4402      	add	r2, r0
			fs->data_wra += nvs_al_size(fs, last_ate.len);
   1f188:	4649      	mov	r1, r9
   1f18a:	7c20      	ldrb	r0, [r4, #16]
   1f18c:	f014 fa62 	bl	33654 <nvs_al_size.isra.0>
   1f190:	4410      	add	r0, r2
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   1f192:	42a8      	cmp	r0, r5
			fs->data_wra += nvs_al_size(fs, last_ate.len);
   1f194:	60a0      	str	r0, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   1f196:	d0c7      	beq.n	1f128 <nvs_init+0x1a4>
		fs->ate_wra -= ate_size;
   1f198:	1bed      	subs	r5, r5, r7
   1f19a:	6065      	str	r5, [r4, #4]
   1f19c:	e778      	b.n	1f090 <nvs_init+0x10c>
   1f19e:	bf00      	nop
   1f1a0:	00037dba 	.word	0x00037dba
   1f1a4:	00037ddb 	.word	0x00037ddb
   1f1a8:	00037dfd 	.word	0x00037dfd
   1f1ac:	00037e1a 	.word	0x00037e1a
   1f1b0:	00037e33 	.word	0x00037e33
   1f1b4:	ffff0000 	.word	0xffff0000
   1f1b8:	00037e5b 	.word	0x00037e5b
   1f1bc:	00037e77 	.word	0x00037e77
   1f1c0:	00037e8e 	.word	0x00037e8e

0001f1c4 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, u16_t id, const void *data, size_t len)
{
   1f1c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f1c8:	461e      	mov	r6, r3
	struct nvs_ate wlk_ate;
	u32_t wlk_addr, rd_addr;
	u16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
   1f1ca:	7c43      	ldrb	r3, [r0, #17]
{
   1f1cc:	4604      	mov	r4, r0
   1f1ce:	4689      	mov	r9, r1
   1f1d0:	4690      	mov	r8, r2
   1f1d2:	b089      	sub	sp, #36	; 0x24
	if (!fs->ready) {
   1f1d4:	b94b      	cbnz	r3, 1f1ea <nvs_write+0x26>
		LOG_ERR("NVS not initialized");
   1f1d6:	2145      	movs	r1, #69	; 0x45
   1f1d8:	4863      	ldr	r0, [pc, #396]	; (1f368 <nvs_write+0x1a4>)
   1f1da:	f014 f99c 	bl	33516 <printk>
		return -EACCES;
   1f1de:	f06f 050c 	mvn.w	r5, #12
	}
	rc = len;
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
   1f1e2:	4628      	mov	r0, r5
   1f1e4:	b009      	add	sp, #36	; 0x24
   1f1e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1f1ea:	f890 b010 	ldrb.w	fp, [r0, #16]
   1f1ee:	2108      	movs	r1, #8
   1f1f0:	4658      	mov	r0, fp
   1f1f2:	f014 fa2f 	bl	33654 <nvs_al_size.isra.0>
	if ((len > (fs->sector_size - 3 * ate_size)) ||
   1f1f6:	89a3      	ldrh	r3, [r4, #12]
   1f1f8:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   1f1fc:	1a9b      	subs	r3, r3, r2
   1f1fe:	42b3      	cmp	r3, r6
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1f200:	4682      	mov	sl, r0
	if ((len > (fs->sector_size - 3 * ate_size)) ||
   1f202:	f0c0 80ac 	bcc.w	1f35e <nvs_write+0x19a>
   1f206:	b11e      	cbz	r6, 1f210 <nvs_write+0x4c>
	    ((len > 0) && (data == NULL))) {
   1f208:	f1b8 0f00 	cmp.w	r8, #0
   1f20c:	f000 80a7 	beq.w	1f35e <nvs_write+0x19a>
	wlk_addr = fs->ate_wra;
   1f210:	6863      	ldr	r3, [r4, #4]
   1f212:	9303      	str	r3, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   1f214:	4620      	mov	r0, r4
   1f216:	aa04      	add	r2, sp, #16
   1f218:	a903      	add	r1, sp, #12
		rd_addr = wlk_addr;
   1f21a:	9f03      	ldr	r7, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   1f21c:	f7ff fd9e 	bl	1ed5c <nvs_prev_ate>
		if (rc) {
   1f220:	4605      	mov	r5, r0
   1f222:	2800      	cmp	r0, #0
   1f224:	d1dd      	bne.n	1f1e2 <nvs_write+0x1e>
		if ((wlk_ate.id == id) && (!nvs_ate_crc8_check(&wlk_ate))) {
   1f226:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   1f22a:	454b      	cmp	r3, r9
   1f22c:	d005      	beq.n	1f23a <nvs_write+0x76>
		if (wlk_addr == fs->ate_wra) {
   1f22e:	6862      	ldr	r2, [r4, #4]
   1f230:	9b03      	ldr	r3, [sp, #12]
   1f232:	429a      	cmp	r2, r3
   1f234:	d1ee      	bne.n	1f214 <nvs_write+0x50>
		if (len == 0) {
   1f236:	b9d6      	cbnz	r6, 1f26e <nvs_write+0xaa>
   1f238:	e7d3      	b.n	1f1e2 <nvs_write+0x1e>
		if ((wlk_ate.id == id) && (!nvs_ate_crc8_check(&wlk_ate))) {
   1f23a:	a804      	add	r0, sp, #16
   1f23c:	f014 f9f5 	bl	3362a <nvs_ate_crc8_check>
   1f240:	2800      	cmp	r0, #0
   1f242:	d1f4      	bne.n	1f22e <nvs_write+0x6a>
		if (len == 0) {
   1f244:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1f248:	b17e      	cbz	r6, 1f26a <nvs_write+0xa6>
		} else if (len == wlk_ate.len) {
   1f24a:	42b3      	cmp	r3, r6
   1f24c:	d10f      	bne.n	1f26e <nvs_write+0xaa>
		rd_addr += wlk_ate.offset;
   1f24e:	f8bd 0012 	ldrh.w	r0, [sp, #18]
		rd_addr &= ADDR_SECT_MASK;
   1f252:	0c39      	lsrs	r1, r7, #16
   1f254:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
   1f256:	4401      	add	r1, r0
   1f258:	4633      	mov	r3, r6
   1f25a:	4642      	mov	r2, r8
   1f25c:	4620      	mov	r0, r4
   1f25e:	f014 f9bb 	bl	335d8 <nvs_flash_block_cmp>
			if (rc <= 0) {
   1f262:	2800      	cmp	r0, #0
   1f264:	dc03      	bgt.n	1f26e <nvs_write+0xaa>
   1f266:	4605      	mov	r5, r0
   1f268:	e7bb      	b.n	1f1e2 <nvs_write+0x1e>
			if (wlk_ate.len == 0U) {
   1f26a:	2b00      	cmp	r3, #0
   1f26c:	d0b9      	beq.n	1f1e2 <nvs_write+0x1e>
	data_size = nvs_al_size(fs, len);
   1f26e:	4631      	mov	r1, r6
   1f270:	4658      	mov	r0, fp
   1f272:	f014 f9ef 	bl	33654 <nvs_al_size.isra.0>
	if (data_size) {
   1f276:	4607      	mov	r7, r0
   1f278:	2800      	cmp	r0, #0
   1f27a:	d13d      	bne.n	1f2f8 <nvs_write+0x134>
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
   1f27c:	f104 0a14 	add.w	sl, r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   1f280:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f284:	4650      	mov	r0, sl
   1f286:	f00f fe57 	bl	2ef38 <z_impl_k_mutex_lock>
	gc_count = 0;
   1f28a:	2300      	movs	r3, #0
	fs->ate_wra &= ADDR_SECT_MASK;
   1f28c:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 1f36c <nvs_write+0x1a8>
		if (gc_count == fs->sector_count) {
   1f290:	89e2      	ldrh	r2, [r4, #14]
   1f292:	4293      	cmp	r3, r2
   1f294:	d060      	beq.n	1f358 <nvs_write+0x194>
		if (fs->ate_wra >= fs->data_wra + required_space) {
   1f296:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
   1f29a:	1878      	adds	r0, r7, r1
   1f29c:	4282      	cmp	r2, r0
   1f29e:	d32e      	bcc.n	1f2fe <nvs_write+0x13a>
	entry.part = 0xff;
   1f2a0:	23ff      	movs	r3, #255	; 0xff
	nvs_ate_crc8_update(&entry);
   1f2a2:	a806      	add	r0, sp, #24
	entry.id = id;
   1f2a4:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.offset = (u16_t)(fs->data_wra & ADDR_OFFS_MASK);
   1f2a8:	f8ad 101a 	strh.w	r1, [sp, #26]
	entry.len = (u16_t)len;
   1f2ac:	f8ad 601c 	strh.w	r6, [sp, #28]
	entry.part = 0xff;
   1f2b0:	f88d 301e 	strb.w	r3, [sp, #30]
	nvs_ate_crc8_update(&entry);
   1f2b4:	f014 f9c5 	bl	33642 <nvs_ate_crc8_update>
	if (!len) {
   1f2b8:	b136      	cbz	r6, 1f2c8 <nvs_write+0x104>
   1f2ba:	4633      	mov	r3, r6
   1f2bc:	4642      	mov	r2, r8
   1f2be:	4620      	mov	r0, r4
   1f2c0:	68a1      	ldr	r1, [r4, #8]
   1f2c2:	f014 fa26 	bl	33712 <nvs_flash_al_wrt.part.0>
   1f2c6:	4605      	mov	r5, r0
	fs->data_wra += nvs_al_size(fs, len);
   1f2c8:	4631      	mov	r1, r6
   1f2ca:	7c20      	ldrb	r0, [r4, #16]
   1f2cc:	f014 f9c2 	bl	33654 <nvs_al_size.isra.0>
   1f2d0:	68a3      	ldr	r3, [r4, #8]
   1f2d2:	4418      	add	r0, r3
   1f2d4:	60a0      	str	r0, [r4, #8]
	if (rc) {
   1f2d6:	2d00      	cmp	r5, #0
   1f2d8:	d144      	bne.n	1f364 <nvs_write+0x1a0>
	rc = nvs_flash_ate_wrt(fs, &entry);
   1f2da:	4620      	mov	r0, r4
   1f2dc:	a906      	add	r1, sp, #24
   1f2de:	f014 fa5d 	bl	3379c <nvs_flash_ate_wrt>
	if (rc) {
   1f2e2:	4605      	mov	r5, r0
   1f2e4:	2800      	cmp	r0, #0
   1f2e6:	d13d      	bne.n	1f364 <nvs_write+0x1a0>
	rc = len;
   1f2e8:	4632      	mov	r2, r6
   1f2ea:	9201      	str	r2, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
   1f2ec:	4650      	mov	r0, sl
   1f2ee:	f00f ff01 	bl	2f0f4 <z_impl_k_mutex_unlock>
	return rc;
   1f2f2:	9a01      	ldr	r2, [sp, #4]
   1f2f4:	4615      	mov	r5, r2
   1f2f6:	e774      	b.n	1f1e2 <nvs_write+0x1e>
		required_space = data_size + ate_size;
   1f2f8:	4457      	add	r7, sl
   1f2fa:	b2bf      	uxth	r7, r7
   1f2fc:	e7be      	b.n	1f27c <nvs_write+0xb8>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1f2fe:	2108      	movs	r1, #8
   1f300:	7c20      	ldrb	r0, [r4, #16]
   1f302:	9301      	str	r3, [sp, #4]
   1f304:	f014 f9a6 	bl	33654 <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
   1f308:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1f30c:	f8ad 1018 	strh.w	r1, [sp, #24]
	close_ate.len = 0U;
   1f310:	2100      	movs	r1, #0
   1f312:	f8ad 101c 	strh.w	r1, [sp, #28]
	close_ate.offset = (u16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
   1f316:	1811      	adds	r1, r2, r0
   1f318:	f8ad 101a 	strh.w	r1, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
   1f31c:	89a1      	ldrh	r1, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
   1f31e:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
   1f322:	440a      	add	r2, r1
   1f324:	1a10      	subs	r0, r2, r0
   1f326:	6060      	str	r0, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
   1f328:	a806      	add	r0, sp, #24
   1f32a:	f014 f98a 	bl	33642 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
   1f32e:	a906      	add	r1, sp, #24
   1f330:	4620      	mov	r0, r4
   1f332:	f014 fa33 	bl	3379c <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
   1f336:	89e0      	ldrh	r0, [r4, #14]
   1f338:	1d21      	adds	r1, r4, #4
   1f33a:	f014 f994 	bl	33666 <nvs_sector_advance.isra.0>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   1f33e:	6862      	ldr	r2, [r4, #4]
		rc = nvs_gc(fs);
   1f340:	4620      	mov	r0, r4
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   1f342:	ea02 020b 	and.w	r2, r2, fp
   1f346:	60a2      	str	r2, [r4, #8]
		rc = nvs_gc(fs);
   1f348:	f7ff fd7a 	bl	1ee40 <nvs_gc>
		if (rc) {
   1f34c:	4602      	mov	r2, r0
   1f34e:	2800      	cmp	r0, #0
   1f350:	d1cb      	bne.n	1f2ea <nvs_write+0x126>
		gc_count++;
   1f352:	9b01      	ldr	r3, [sp, #4]
   1f354:	3301      	adds	r3, #1
		if (gc_count == fs->sector_count) {
   1f356:	e79b      	b.n	1f290 <nvs_write+0xcc>
			rc = -ENOSPC;
   1f358:	f06f 021b 	mvn.w	r2, #27
   1f35c:	e7c5      	b.n	1f2ea <nvs_write+0x126>
		return -EINVAL;
   1f35e:	f06f 0515 	mvn.w	r5, #21
   1f362:	e73e      	b.n	1f1e2 <nvs_write+0x1e>
			if (rc) {
   1f364:	462a      	mov	r2, r5
   1f366:	e7c0      	b.n	1f2ea <nvs_write+0x126>
   1f368:	00037da1 	.word	0x00037da1
   1f36c:	ffff0000 	.word	0xffff0000

0001f370 <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, u16_t id, void *data, size_t len,
		      u16_t cnt)
{
   1f370:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1f374:	461e      	mov	r6, r3
	u32_t wlk_addr, rd_addr;
	u16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
   1f376:	7c43      	ldrb	r3, [r0, #17]
{
   1f378:	4604      	mov	r4, r0
   1f37a:	460f      	mov	r7, r1
   1f37c:	4690      	mov	r8, r2
   1f37e:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
	if (!fs->ready) {
   1f382:	b943      	cbnz	r3, 1f396 <nvs_read_hist+0x26>
		LOG_ERR("NVS not initialized");
   1f384:	4828      	ldr	r0, [pc, #160]	; (1f428 <nvs_read_hist+0xb8>)
   1f386:	2145      	movs	r1, #69	; 0x45
   1f388:	f014 f8c5 	bl	33516 <printk>
		return -EACCES;
   1f38c:	f06f 000c 	mvn.w	r0, #12

	return wlk_ate.len;

err:
	return rc;
}
   1f390:	b004      	add	sp, #16
   1f392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1f396:	2108      	movs	r1, #8
   1f398:	7c00      	ldrb	r0, [r0, #16]
   1f39a:	f014 f95b 	bl	33654 <nvs_al_size.isra.0>
	if (len > (fs->sector_size - 2 * ate_size)) {
   1f39e:	89a3      	ldrh	r3, [r4, #12]
   1f3a0:	eba3 0040 	sub.w	r0, r3, r0, lsl #1
   1f3a4:	42b0      	cmp	r0, r6
   1f3a6:	d33b      	bcc.n	1f420 <nvs_read_hist+0xb0>
	cnt_his = 0U;
   1f3a8:	f04f 0a00 	mov.w	sl, #0
	wlk_addr = fs->ate_wra;
   1f3ac:	6863      	ldr	r3, [r4, #4]
   1f3ae:	9301      	str	r3, [sp, #4]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   1f3b0:	4620      	mov	r0, r4
   1f3b2:	aa02      	add	r2, sp, #8
   1f3b4:	a901      	add	r1, sp, #4
		rd_addr = wlk_addr;
   1f3b6:	9d01      	ldr	r5, [sp, #4]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   1f3b8:	f7ff fcd0 	bl	1ed5c <nvs_prev_ate>
		if (rc) {
   1f3bc:	2800      	cmp	r0, #0
   1f3be:	d1e7      	bne.n	1f390 <nvs_read_hist+0x20>
		if ((wlk_ate.id == id) &&  (!nvs_ate_crc8_check(&wlk_ate))) {
   1f3c0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1f3c4:	42bb      	cmp	r3, r7
   1f3c6:	d107      	bne.n	1f3d8 <nvs_read_hist+0x68>
   1f3c8:	a802      	add	r0, sp, #8
   1f3ca:	f014 f92e 	bl	3362a <nvs_ate_crc8_check>
   1f3ce:	b918      	cbnz	r0, 1f3d8 <nvs_read_hist+0x68>
			cnt_his++;
   1f3d0:	f10a 0a01 	add.w	sl, sl, #1
   1f3d4:	fa1f fa8a 	uxth.w	sl, sl
		if (wlk_addr == fs->ate_wra) {
   1f3d8:	6862      	ldr	r2, [r4, #4]
   1f3da:	9b01      	ldr	r3, [sp, #4]
   1f3dc:	429a      	cmp	r2, r3
   1f3de:	d018      	beq.n	1f412 <nvs_read_hist+0xa2>
	while (cnt_his <= cnt) {
   1f3e0:	45ca      	cmp	sl, r9
   1f3e2:	d9e5      	bls.n	1f3b0 <nvs_read_hist+0x40>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   1f3e4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   1f3e8:	b1bb      	cbz	r3, 1f41a <nvs_read_hist+0xaa>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   1f3ea:	45ca      	cmp	sl, r9
   1f3ec:	d315      	bcc.n	1f41a <nvs_read_hist+0xaa>
	rd_addr += wlk_ate.offset;
   1f3ee:	f8bd 100a 	ldrh.w	r1, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
   1f3f2:	0c2d      	lsrs	r5, r5, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   1f3f4:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
   1f3f6:	ea4f 4505 	mov.w	r5, r5, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   1f3fa:	bf28      	it	cs
   1f3fc:	4633      	movcs	r3, r6
   1f3fe:	4642      	mov	r2, r8
   1f400:	4620      	mov	r0, r4
   1f402:	4429      	add	r1, r5
   1f404:	f014 f8da 	bl	335bc <nvs_flash_rd>
	if (rc) {
   1f408:	2800      	cmp	r0, #0
   1f40a:	d1c1      	bne.n	1f390 <nvs_read_hist+0x20>
	return wlk_ate.len;
   1f40c:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   1f410:	e7be      	b.n	1f390 <nvs_read_hist+0x20>
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   1f412:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1f416:	42bb      	cmp	r3, r7
   1f418:	d0e4      	beq.n	1f3e4 <nvs_read_hist+0x74>
		return -ENOENT;
   1f41a:	f06f 0001 	mvn.w	r0, #1
   1f41e:	e7b7      	b.n	1f390 <nvs_read_hist+0x20>
		return -EINVAL;
   1f420:	f06f 0015 	mvn.w	r0, #21
   1f424:	e7b4      	b.n	1f390 <nvs_read_hist+0x20>
   1f426:	bf00      	nop
   1f428:	00037da1 	.word	0x00037da1

0001f42c <boot_write_trailer_byte>:
	}
}

static int boot_write_trailer_byte(const struct flash_area *fa, u32_t off,
				   u8_t val)
{
   1f42c:	b530      	push	{r4, r5, lr}
   1f42e:	b085      	sub	sp, #20
   1f430:	9101      	str	r1, [sp, #4]
   1f432:	4604      	mov	r4, r0
   1f434:	4615      	mov	r5, r2
	u8_t buf[BOOT_MAX_ALIGN];
	u8_t align;
	u8_t erased_val;
	int rc;

	align = flash_area_align(fa);
   1f436:	f014 faf6 	bl	33a26 <flash_area_align>
	assert(align <= BOOT_MAX_ALIGN);
   1f43a:	2808      	cmp	r0, #8
	align = flash_area_align(fa);
   1f43c:	4603      	mov	r3, r0
	assert(align <= BOOT_MAX_ALIGN);
   1f43e:	9901      	ldr	r1, [sp, #4]
   1f440:	d906      	bls.n	1f450 <boot_write_trailer_byte+0x24>
   1f442:	f44f 719d 	mov.w	r1, #314	; 0x13a
   1f446:	4b0a      	ldr	r3, [pc, #40]	; (1f470 <boot_write_trailer_byte+0x44>)
   1f448:	4a0a      	ldr	r2, [pc, #40]	; (1f474 <boot_write_trailer_byte+0x48>)
   1f44a:	480b      	ldr	r0, [pc, #44]	; (1f478 <boot_write_trailer_byte+0x4c>)
   1f44c:	f012 fb32 	bl	31ab4 <__assert_func>
	erased_val = flash_area_erased_val(fa);
	memset(buf, erased_val, BOOT_MAX_ALIGN);
   1f450:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	buf[0] = val;

	rc = flash_area_write(fa, off, buf, align);
   1f454:	4620      	mov	r0, r4
	memset(buf, erased_val, BOOT_MAX_ALIGN);
   1f456:	e9cd 2202 	strd	r2, r2, [sp, #8]
	rc = flash_area_write(fa, off, buf, align);
   1f45a:	aa02      	add	r2, sp, #8
	buf[0] = val;
   1f45c:	f88d 5008 	strb.w	r5, [sp, #8]
	rc = flash_area_write(fa, off, buf, align);
   1f460:	f014 fa92 	bl	33988 <flash_area_write>
	if (rc != 0) {
   1f464:	2800      	cmp	r0, #0
		return -EIO;
	}

	return 0;
}
   1f466:	bf18      	it	ne
   1f468:	f06f 0004 	mvnne.w	r0, #4
   1f46c:	b005      	add	sp, #20
   1f46e:	bd30      	pop	{r4, r5, pc}
   1f470:	00037eab 	.word	0x00037eab
   1f474:	00037ef0 	.word	0x00037ef0
   1f478:	00037ec3 	.word	0x00037ec3

0001f47c <boot_request_upgrade>:

	return BOOT_SWAP_TYPE_NONE;
}

int boot_request_upgrade(int permanent)
{
   1f47c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1f47e:	4605      	mov	r5, r0
	rc = flash_area_open(bank_id, &fa);
   1f480:	a901      	add	r1, sp, #4
   1f482:	2006      	movs	r0, #6
   1f484:	f000 f91a 	bl	1f6bc <flash_area_open>
	if (rc) {
   1f488:	4604      	mov	r4, r0
   1f48a:	bb10      	cbnz	r0, 1f4d2 <boot_request_upgrade+0x56>
	offs = MAGIC_OFFS(fa);
   1f48c:	9801      	ldr	r0, [sp, #4]
	rc = flash_area_write(fa, offs, boot_img_magic, BOOT_MAGIC_SZ);
   1f48e:	2310      	movs	r3, #16
	offs = MAGIC_OFFS(fa);
   1f490:	6881      	ldr	r1, [r0, #8]
	rc = flash_area_write(fa, offs, boot_img_magic, BOOT_MAGIC_SZ);
   1f492:	4a12      	ldr	r2, [pc, #72]	; (1f4dc <boot_request_upgrade+0x60>)
   1f494:	3910      	subs	r1, #16
   1f496:	f014 fa77 	bl	33988 <flash_area_write>
   1f49a:	4604      	mov	r4, r0
	flash_area_close(fa);
   1f49c:	9801      	ldr	r0, [sp, #4]
   1f49e:	f014 fa55 	bl	3394c <flash_area_close>
	u8_t swap_type;
#endif
	int rc;

	rc = boot_magic_write(FLASH_AREA_IMAGE_SECONDARY);
	if (rc) {
   1f4a2:	b9b4      	cbnz	r4, 1f4d2 <boot_request_upgrade+0x56>
		goto op_end;
	}

	if (permanent) {
   1f4a4:	b1c5      	cbz	r5, 1f4d8 <boot_request_upgrade+0x5c>
	return boot_flag_write(BOOT_FLAG_IMAGE_OK, bank_id);
   1f4a6:	2006      	movs	r0, #6
   1f4a8:	f014 f9a8 	bl	337fc <boot_flag_write.constprop.0>
		rc = boot_image_ok_write(FLASH_AREA_IMAGE_SECONDARY);

#ifdef CONFIG_MCUBOOT_TRAILER_SWAP_TYPE
		if (rc) {
   1f4ac:	4604      	mov	r4, r0
   1f4ae:	b980      	cbnz	r0, 1f4d2 <boot_request_upgrade+0x56>
			goto op_end;
		}

		swap_type = BOOT_SWAP_TYPE_PERM;
   1f4b0:	2503      	movs	r5, #3
	rc = flash_area_open(bank_id, &fa);
   1f4b2:	2006      	movs	r0, #6
   1f4b4:	a901      	add	r1, sp, #4
   1f4b6:	f000 f901 	bl	1f6bc <flash_area_open>
	if (rc) {
   1f4ba:	4604      	mov	r4, r0
   1f4bc:	b948      	cbnz	r0, 1f4d2 <boot_request_upgrade+0x56>
	offs = SWAP_TYPE_OFFS(fa);
   1f4be:	9801      	ldr	r0, [sp, #4]
	rc = boot_write_trailer_byte(fa, offs, swap_type);
   1f4c0:	462a      	mov	r2, r5
	offs = SWAP_TYPE_OFFS(fa);
   1f4c2:	6881      	ldr	r1, [r0, #8]
	rc = boot_write_trailer_byte(fa, offs, swap_type);
   1f4c4:	3928      	subs	r1, #40	; 0x28
   1f4c6:	f7ff ffb1 	bl	1f42c <boot_write_trailer_byte>
   1f4ca:	4604      	mov	r4, r0
	flash_area_close(fa);
   1f4cc:	9801      	ldr	r0, [sp, #4]
   1f4ce:	f014 fa3d 	bl	3394c <flash_area_close>
#else
	}
#endif
op_end:
	return rc;
}
   1f4d2:	4620      	mov	r0, r4
   1f4d4:	b003      	add	sp, #12
   1f4d6:	bd30      	pop	{r4, r5, pc}
		swap_type = BOOT_SWAP_TYPE_TEST;
   1f4d8:	2502      	movs	r5, #2
   1f4da:	e7ea      	b.n	1f4b2 <boot_request_upgrade+0x36>
   1f4dc:	00036f60 	.word	0x00036f60

0001f4e0 <flash_progressive_erase>:
 * @param[in] off offset from the beginning of the image flash area beginning
 *
 * @return  0 on success, negative errno code on fail.
 */
static int flash_progressive_erase(struct flash_img_context *ctx, off_t off)
{
   1f4e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct flash_sector sector;
	int rc;

	rc = flash_sector_from_off(ctx->flash_area, off, &sector);
   1f4e2:	f8d0 6200 	ldr.w	r6, [r0, #512]	; 0x200
{
   1f4e6:	4605      	mov	r5, r0
   1f4e8:	b085      	sub	sp, #20
	flash_dev = flash_area_get_device(fap);
   1f4ea:	4630      	mov	r0, r6
{
   1f4ec:	460c      	mov	r4, r1
	flash_dev = flash_area_get_device(fap);
   1f4ee:	f014 faa1 	bl	33a34 <flash_area_get_device>
	off += fap->fa_off; /* flash driver uses offset from memory beginning */
   1f4f2:	6871      	ldr	r1, [r6, #4]
   1f4f4:	4421      	add	r1, r4
	if (flash_dev) {
   1f4f6:	b940      	cbnz	r0, 1f50a <flash_progressive_erase+0x2a>
	int rc = -ENODEV;
   1f4f8:	f06f 0412 	mvn.w	r4, #18
	if (rc) {
		LOG_ERR("Unable to determine flash sector size");
   1f4fc:	2145      	movs	r1, #69	; 0x45
   1f4fe:	4814      	ldr	r0, [pc, #80]	; (1f550 <flash_progressive_erase+0x70>)
   1f500:	f014 f809 	bl	33516 <printk>
			}
		}
	}

	return rc;
}
   1f504:	4620      	mov	r0, r4
   1f506:	b005      	add	sp, #20
   1f508:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f50a:	aa01      	add	r2, sp, #4
   1f50c:	f015 f9f3 	bl	348f6 <z_impl_flash_get_page_info_by_offs>
		if (rc == 0) {
   1f510:	4604      	mov	r4, r0
   1f512:	2800      	cmp	r0, #0
   1f514:	d1f2      	bne.n	1f4fc <flash_progressive_erase+0x1c>
			sector->fs_size = page.size;
   1f516:	e9dd 6701 	ldrd	r6, r7, [sp, #4]
		if (ctx->off_last != sector.fs_off) {
   1f51a:	f8d5 320c 	ldr.w	r3, [r5, #524]	; 0x20c
   1f51e:	42b3      	cmp	r3, r6
   1f520:	d0f0      	beq.n	1f504 <flash_progressive_erase+0x24>
			LOG_INF("Erasing sector at offset 0x%08lx",
   1f522:	4632      	mov	r2, r6
   1f524:	2149      	movs	r1, #73	; 0x49
   1f526:	480b      	ldr	r0, [pc, #44]	; (1f554 <flash_progressive_erase+0x74>)
			ctx->off_last = sector.fs_off;
   1f528:	f8c5 620c 	str.w	r6, [r5, #524]	; 0x20c
			LOG_INF("Erasing sector at offset 0x%08lx",
   1f52c:	f013 fff3 	bl	33516 <printk>
			rc = flash_area_erase(ctx->flash_area,
   1f530:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
   1f534:	463a      	mov	r2, r7
   1f536:	6841      	ldr	r1, [r0, #4]
   1f538:	1a71      	subs	r1, r6, r1
   1f53a:	f014 fa4e 	bl	339da <flash_area_erase>
			if (rc) {
   1f53e:	4604      	mov	r4, r0
   1f540:	2800      	cmp	r0, #0
   1f542:	d0df      	beq.n	1f504 <flash_progressive_erase+0x24>
				LOG_ERR("Error %d while erasing sector", rc);
   1f544:	4602      	mov	r2, r0
   1f546:	2145      	movs	r1, #69	; 0x45
   1f548:	4803      	ldr	r0, [pc, #12]	; (1f558 <flash_progressive_erase+0x78>)
   1f54a:	f013 ffe4 	bl	33516 <printk>
	return rc;
   1f54e:	e7d9      	b.n	1f504 <flash_progressive_erase+0x24>
   1f550:	00037f08 	.word	0x00037f08
   1f554:	00037f33 	.word	0x00037f33
   1f558:	00037f59 	.word	0x00037f59

0001f55c <flash_sync>:

#endif /* CONFIG_IMG_ERASE_PROGRESSIVELY */

static int flash_sync(struct flash_img_context *ctx)
{
   1f55c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1f560:	4604      	mov	r4, r0
	int rc = 0;

	if (ctx->buf_bytes < CONFIG_IMG_BLOCK_BUF_SIZE) {
   1f562:	f8b0 0208 	ldrh.w	r0, [r0, #520]	; 0x208
   1f566:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   1f56a:	d205      	bcs.n	1f578 <flash_sync+0x1c>
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
   1f56c:	f5c0 7200 	rsb	r2, r0, #512	; 0x200
   1f570:	21ff      	movs	r1, #255	; 0xff
   1f572:	4420      	add	r0, r4
   1f574:	f016 fae8 	bl	35b48 <memset>
		(void)memset(ctx->buf + ctx->buf_bytes, 0xFF,
			     CONFIG_IMG_BLOCK_BUF_SIZE - ctx->buf_bytes);
	}

#ifdef CONFIG_IMG_ERASE_PROGRESSIVELY
	rc = flash_progressive_erase(ctx, ctx->bytes_written +
   1f578:	f8d4 1204 	ldr.w	r1, [r4, #516]	; 0x204
   1f57c:	4620      	mov	r0, r4
   1f57e:	f501 7100 	add.w	r1, r1, #512	; 0x200
   1f582:	f7ff ffad 	bl	1f4e0 <flash_progressive_erase>
				     CONFIG_IMG_BLOCK_BUF_SIZE);
	if (rc) {
   1f586:	4605      	mov	r5, r0
   1f588:	b150      	cbz	r0, 1f5a0 <flash_sync+0x44>
		LOG_ERR("flash_progressive_erase error %d offset=0x%08zx", rc,
   1f58a:	2145      	movs	r1, #69	; 0x45
   1f58c:	4602      	mov	r2, r0
   1f58e:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
   1f592:	4827      	ldr	r0, [pc, #156]	; (1f630 <flash_sync+0xd4>)
#endif

	rc = flash_area_write(ctx->flash_area, ctx->bytes_written, ctx->buf,
			      CONFIG_IMG_BLOCK_BUF_SIZE);
	if (rc) {
		LOG_ERR("flash_write error %d offset=0x%08zx", rc,
   1f594:	f013 ffbf 	bl	33516 <printk>

	ctx->bytes_written += ctx->buf_bytes;
	ctx->buf_bytes = 0U;

	return rc;
}
   1f598:	4628      	mov	r0, r5
   1f59a:	b004      	add	sp, #16
   1f59c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	rc = flash_area_write(ctx->flash_area, ctx->bytes_written, ctx->buf,
   1f5a0:	f44f 7300 	mov.w	r3, #512	; 0x200
   1f5a4:	e9d4 0180 	ldrd	r0, r1, [r4, #512]	; 0x200
   1f5a8:	4622      	mov	r2, r4
   1f5aa:	f014 f9ed 	bl	33988 <flash_area_write>
   1f5ae:	46a1      	mov	r9, r4
	if (rc) {
   1f5b0:	4605      	mov	r5, r0
   1f5b2:	b128      	cbz	r0, 1f5c0 <flash_sync+0x64>
		LOG_ERR("flash_write error %d offset=0x%08zx", rc,
   1f5b4:	4602      	mov	r2, r0
   1f5b6:	2145      	movs	r1, #69	; 0x45
   1f5b8:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
   1f5bc:	481d      	ldr	r0, [pc, #116]	; (1f634 <flash_sync+0xd8>)
   1f5be:	e7e9      	b.n	1f594 <flash_sync+0x38>
	if (!flash_verify(ctx->flash_area, ctx->bytes_written, ctx->buf,
   1f5c0:	f44f 7700 	mov.w	r7, #512	; 0x200
   1f5c4:	e9d4 a880 	ldrd	sl, r8, [r4, #512]	; 0x200
		size = (len >= sizeof(temp)) ? sizeof(temp) : len;
   1f5c8:	2f04      	cmp	r7, #4
   1f5ca:	463e      	mov	r6, r7
   1f5cc:	bf28      	it	cs
   1f5ce:	2604      	movcs	r6, #4
		rc = flash_area_read(fa, offset, &temp, size);
   1f5d0:	aa03      	add	r2, sp, #12
   1f5d2:	4633      	mov	r3, r6
   1f5d4:	4641      	mov	r1, r8
   1f5d6:	4650      	mov	r0, sl
   1f5d8:	f014 f9b9 	bl	3394e <flash_area_read>
		if (rc) {
   1f5dc:	4602      	mov	r2, r0
   1f5de:	b140      	cbz	r0, 1f5f2 <flash_sync+0x96>
			LOG_ERR("flash_read error %d offset=0x%08lx",
   1f5e0:	4643      	mov	r3, r8
   1f5e2:	2145      	movs	r1, #69	; 0x45
   1f5e4:	4814      	ldr	r0, [pc, #80]	; (1f638 <flash_sync+0xdc>)
   1f5e6:	f013 ff96 	bl	33516 <printk>
	if (!flash_verify(ctx->flash_area, ctx->bytes_written, ctx->buf,
   1f5ea:	b1b7      	cbz	r7, 1f61a <flash_sync+0xbe>
		return -EIO;
   1f5ec:	f06f 0504 	mvn.w	r5, #4
   1f5f0:	e7d2      	b.n	1f598 <flash_sync+0x3c>
		if (memcmp(data, &temp, size)) {
   1f5f2:	4632      	mov	r2, r6
   1f5f4:	4648      	mov	r0, r9
   1f5f6:	a903      	add	r1, sp, #12
   1f5f8:	f016 fa78 	bl	35aec <memcmp>
   1f5fc:	b148      	cbz	r0, 1f612 <flash_sync+0xb6>
			LOG_ERR("offset=0x%08lx VERIFY FAIL. "
   1f5fe:	f899 3000 	ldrb.w	r3, [r9]
   1f602:	4642      	mov	r2, r8
   1f604:	9300      	str	r3, [sp, #0]
   1f606:	2145      	movs	r1, #69	; 0x45
   1f608:	9b03      	ldr	r3, [sp, #12]
   1f60a:	480c      	ldr	r0, [pc, #48]	; (1f63c <flash_sync+0xe0>)
   1f60c:	f013 ff83 	bl	33516 <printk>
   1f610:	e7eb      	b.n	1f5ea <flash_sync+0x8e>
	while (len) {
   1f612:	1bbf      	subs	r7, r7, r6
		offset += size;
   1f614:	44b0      	add	r8, r6
		data += size;
   1f616:	44b1      	add	r9, r6
	while (len) {
   1f618:	d1d6      	bne.n	1f5c8 <flash_sync+0x6c>
	ctx->bytes_written += ctx->buf_bytes;
   1f61a:	f8b4 2208 	ldrh.w	r2, [r4, #520]	; 0x208
   1f61e:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
   1f622:	4413      	add	r3, r2
   1f624:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
	ctx->buf_bytes = 0U;
   1f628:	2300      	movs	r3, #0
   1f62a:	f8a4 3208 	strh.w	r3, [r4, #520]	; 0x208
	return rc;
   1f62e:	e7b3      	b.n	1f598 <flash_sync+0x3c>
   1f630:	00037f7c 	.word	0x00037f7c
   1f634:	00037fb1 	.word	0x00037fb1
   1f638:	00037fda 	.word	0x00037fda
   1f63c:	00038002 	.word	0x00038002

0001f640 <socket_offload_register>:

/* Only one provider may register socket operations upon boot. */
const struct socket_offload *socket_ops;

void socket_offload_register(const struct socket_offload *ops)
{
   1f640:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(ops);
   1f642:	4605      	mov	r5, r0
   1f644:	b948      	cbnz	r0, 1f65a <socket_offload_register+0x1a>
   1f646:	490c      	ldr	r1, [pc, #48]	; (1f678 <socket_offload_register+0x38>)
   1f648:	480c      	ldr	r0, [pc, #48]	; (1f67c <socket_offload_register+0x3c>)
   1f64a:	2311      	movs	r3, #17
   1f64c:	4a0c      	ldr	r2, [pc, #48]	; (1f680 <socket_offload_register+0x40>)
   1f64e:	f013 ff62 	bl	33516 <printk>
   1f652:	2111      	movs	r1, #17
   1f654:	480a      	ldr	r0, [pc, #40]	; (1f680 <socket_offload_register+0x40>)
   1f656:	f013 ffa4 	bl	335a2 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops == NULL);
   1f65a:	4c0a      	ldr	r4, [pc, #40]	; (1f684 <socket_offload_register+0x44>)
   1f65c:	6822      	ldr	r2, [r4, #0]
   1f65e:	b14a      	cbz	r2, 1f674 <socket_offload_register+0x34>
   1f660:	4909      	ldr	r1, [pc, #36]	; (1f688 <socket_offload_register+0x48>)
   1f662:	4806      	ldr	r0, [pc, #24]	; (1f67c <socket_offload_register+0x3c>)
   1f664:	2312      	movs	r3, #18
   1f666:	4a06      	ldr	r2, [pc, #24]	; (1f680 <socket_offload_register+0x40>)
   1f668:	f013 ff55 	bl	33516 <printk>
   1f66c:	2112      	movs	r1, #18
   1f66e:	4804      	ldr	r0, [pc, #16]	; (1f680 <socket_offload_register+0x40>)
   1f670:	f013 ff97 	bl	335a2 <assert_post_action>

	socket_ops = ops;
   1f674:	6025      	str	r5, [r4, #0]
}
   1f676:	bd38      	pop	{r3, r4, r5, pc}
   1f678:	00037b56 	.word	0x00037b56
   1f67c:	00037a66 	.word	0x00037a66
   1f680:	00038055 	.word	0x00038055
   1f684:	200220f8 	.word	0x200220f8
   1f688:	00038090 	.word	0x00038090

0001f68c <get_flash_area_from_id>:
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   1f68c:	4b09      	ldr	r3, [pc, #36]	; (1f6b4 <get_flash_area_from_id+0x28>)
{
   1f68e:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < flash_map_entries; i++) {
   1f690:	681d      	ldr	r5, [r3, #0]
		if (flash_map[i].fa_id == idx) {
   1f692:	4b09      	ldr	r3, [pc, #36]	; (1f6b8 <get_flash_area_from_id+0x2c>)
   1f694:	681c      	ldr	r4, [r3, #0]
	for (int i = 0; i < flash_map_entries; i++) {
   1f696:	2300      	movs	r3, #0
   1f698:	429d      	cmp	r5, r3
   1f69a:	dc02      	bgt.n	1f6a2 <get_flash_area_from_id+0x16>
			return &flash_map[i];
		}
	}

	return NULL;
   1f69c:	2100      	movs	r1, #0
}
   1f69e:	4608      	mov	r0, r1
   1f6a0:	bd30      	pop	{r4, r5, pc}
		if (flash_map[i].fa_id == idx) {
   1f6a2:	011a      	lsls	r2, r3, #4
   1f6a4:	5ca2      	ldrb	r2, [r4, r2]
   1f6a6:	eb04 1103 	add.w	r1, r4, r3, lsl #4
   1f6aa:	4282      	cmp	r2, r0
   1f6ac:	d0f7      	beq.n	1f69e <get_flash_area_from_id+0x12>
	for (int i = 0; i < flash_map_entries; i++) {
   1f6ae:	3301      	adds	r3, #1
   1f6b0:	e7f2      	b.n	1f698 <get_flash_area_from_id+0xc>
   1f6b2:	bf00      	nop
   1f6b4:	00036ff0 	.word	0x00036ff0
   1f6b8:	20029548 	.word	0x20029548

0001f6bc <flash_area_open>:

int flash_area_open(u8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
   1f6bc:	4b08      	ldr	r3, [pc, #32]	; (1f6e0 <flash_area_open+0x24>)
{
   1f6be:	b510      	push	{r4, lr}
	if (flash_map == NULL) {
   1f6c0:	681b      	ldr	r3, [r3, #0]
{
   1f6c2:	460c      	mov	r4, r1
	if (flash_map == NULL) {
   1f6c4:	b12b      	cbz	r3, 1f6d2 <flash_area_open+0x16>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
   1f6c6:	f7ff ffe1 	bl	1f68c <get_flash_area_from_id>
	if (area == NULL) {
   1f6ca:	b128      	cbz	r0, 1f6d8 <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
   1f6cc:	6020      	str	r0, [r4, #0]
	return 0;
   1f6ce:	2000      	movs	r0, #0
}
   1f6d0:	bd10      	pop	{r4, pc}
		return -EACCES;
   1f6d2:	f06f 000c 	mvn.w	r0, #12
   1f6d6:	e7fb      	b.n	1f6d0 <flash_area_open+0x14>
		return -ENOENT;
   1f6d8:	f06f 0001 	mvn.w	r0, #1
   1f6dc:	e7f8      	b.n	1f6d0 <flash_area_open+0x14>
   1f6de:	bf00      	nop
   1f6e0:	20029548 	.word	0x20029548

0001f6e4 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, u32_t *cnt, struct flash_sector *ret)
{
   1f6e4:	b530      	push	{r4, r5, lr}
   1f6e6:	b089      	sub	sp, #36	; 0x24
   1f6e8:	460c      	mov	r4, r1
   1f6ea:	4615      	mov	r5, r2
	cb_data->area_idx = idx;
   1f6ec:	9001      	str	r0, [sp, #4]
	fa = get_flash_area_from_id(idx);
   1f6ee:	f7ff ffcd 	bl	1f68c <get_flash_area_from_id>
	if (fa == NULL) {
   1f6f2:	b1b8      	cbz	r0, 1f724 <flash_area_get_sectors+0x40>
	cb_data->area_off = fa->fa_off;
   1f6f4:	6843      	ldr	r3, [r0, #4]
	cb_data->ret_len = *cnt;
   1f6f6:	6822      	ldr	r2, [r4, #0]
	cb_data->area_off = fa->fa_off;
   1f6f8:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
   1f6fa:	6883      	ldr	r3, [r0, #8]
	flash_dev = device_get_binding(fa->fa_dev_name);
   1f6fc:	68c0      	ldr	r0, [r0, #12]
	cb_data->ret = ret;
   1f6fe:	e9cd 3503 	strd	r3, r5, [sp, #12]
	cb_data->ret_idx = 0U;
   1f702:	2300      	movs	r3, #0
	cb_data->status = 0;
   1f704:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
   1f708:	9305      	str	r3, [sp, #20]
   1f70a:	f00e ff45 	bl	2e598 <z_impl_device_get_binding>
	if (flash_dev == NULL) {
   1f70e:	b160      	cbz	r0, 1f72a <flash_area_get_sectors+0x46>
	flash_page_foreach(flash_dev, cb, cb_data);
   1f710:	4907      	ldr	r1, [pc, #28]	; (1f730 <flash_area_get_sectors+0x4c>)
   1f712:	aa01      	add	r2, sp, #4
   1f714:	f015 f8f3 	bl	348fe <flash_page_foreach>
	if (cb_data->status == 0) {
   1f718:	9807      	ldr	r0, [sp, #28]
   1f71a:	b908      	cbnz	r0, 1f720 <flash_area_get_sectors+0x3c>
		*cnt = cb_data->ret_idx;
   1f71c:	9b05      	ldr	r3, [sp, #20]
   1f71e:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
   1f720:	b009      	add	sp, #36	; 0x24
   1f722:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   1f724:	f06f 0015 	mvn.w	r0, #21
   1f728:	e7fa      	b.n	1f720 <flash_area_get_sectors+0x3c>
		return -ENODEV;
   1f72a:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
   1f72e:	e7f7      	b.n	1f720 <flash_area_get_sectors+0x3c>
   1f730:	00033911 	.word	0x00033911

0001f734 <settings_save_one>:

/*
 * Append a single value to persisted config. Don't store duplicate value.
 */
int settings_save_one(const char *name, const void *value, size_t val_len)
{
   1f734:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1f736:	9201      	str	r2, [sp, #4]
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
   1f738:	4a0d      	ldr	r2, [pc, #52]	; (1f770 <_flash_used+0x2c>)
{
   1f73a:	4605      	mov	r5, r0
	cs = settings_save_dst;
   1f73c:	6814      	ldr	r4, [r2, #0]
{
   1f73e:	460e      	mov	r6, r1
	if (!cs) {
   1f740:	b194      	cbz	r4, 1f768 <_flash_used+0x24>
	return z_impl_k_mutex_lock(mutex, timeout);
   1f742:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f746:	480b      	ldr	r0, [pc, #44]	; (1f774 <_flash_used+0x30>)
   1f748:	f00f fbf6 	bl	2ef38 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
   1f74c:	6862      	ldr	r2, [r4, #4]
   1f74e:	4629      	mov	r1, r5
   1f750:	6897      	ldr	r7, [r2, #8]
   1f752:	4620      	mov	r0, r4
   1f754:	4632      	mov	r2, r6
   1f756:	9b01      	ldr	r3, [sp, #4]
   1f758:	47b8      	blx	r7
   1f75a:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   1f75c:	4805      	ldr	r0, [pc, #20]	; (1f774 <_flash_used+0x30>)
   1f75e:	f00f fcc9 	bl	2f0f4 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
   1f762:	4620      	mov	r0, r4
   1f764:	b003      	add	sp, #12
   1f766:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOENT;
   1f768:	f06f 0401 	mvn.w	r4, #1
   1f76c:	e7f9      	b.n	1f762 <_flash_used+0x1e>
   1f76e:	bf00      	nop
   1f770:	20022104 	.word	0x20022104
   1f774:	200298cc 	.word	0x200298cc

0001f778 <settings_src_register>:
	SYS_SLIST_FOR_EACH_NODE(&settings_load_srcs, cur) {
   1f778:	4b0e      	ldr	r3, [pc, #56]	; (1f7b4 <settings_src_register+0x3c>)
{
   1f77a:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_NODE(&settings_load_srcs, cur) {
   1f77c:	681c      	ldr	r4, [r3, #0]
	prev = NULL;
   1f77e:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_NODE(&settings_load_srcs, cur) {
   1f780:	4622      	mov	r2, r4
   1f782:	b932      	cbnz	r2, 1f792 <settings_src_register+0x1a>
 */
static inline void sys_slist_insert(sys_slist_t *list,
				    sys_snode_t *prev,
				    sys_snode_t *node);

Z_GENLIST_INSERT(slist, snode)
   1f784:	b941      	cbnz	r1, 1f798 <settings_src_register+0x20>
	parent->next = child;
   1f786:	6004      	str	r4, [r0, #0]
Z_GENLIST_PREPEND(slist, snode)
   1f788:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   1f78a:	6018      	str	r0, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
   1f78c:	b95a      	cbnz	r2, 1f7a6 <settings_src_register+0x2e>
	list->tail = node;
   1f78e:	6058      	str	r0, [r3, #4]
}
   1f790:	e009      	b.n	1f7a6 <settings_src_register+0x2e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f792:	4611      	mov	r1, r2
   1f794:	6812      	ldr	r2, [r2, #0]
   1f796:	e7f4      	b.n	1f782 <settings_src_register+0xa>
Z_GENLIST_INSERT(slist, snode)
   1f798:	680c      	ldr	r4, [r1, #0]
   1f79a:	b93c      	cbnz	r4, 1f7ac <settings_src_register+0x34>
	parent->next = child;
   1f79c:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(slist, snode)
   1f79e:	685a      	ldr	r2, [r3, #4]
   1f7a0:	b912      	cbnz	r2, 1f7a8 <settings_src_register+0x30>
	list->head = node;
   1f7a2:	e9c3 0000 	strd	r0, r0, [r3]
}
   1f7a6:	bd10      	pop	{r4, pc}
	parent->next = child;
   1f7a8:	6010      	str	r0, [r2, #0]
   1f7aa:	e7f0      	b.n	1f78e <settings_src_register+0x16>
   1f7ac:	6004      	str	r4, [r0, #0]
   1f7ae:	6008      	str	r0, [r1, #0]
   1f7b0:	e7f9      	b.n	1f7a6 <settings_src_register+0x2e>
   1f7b2:	bf00      	nop
   1f7b4:	200220fc 	.word	0x200220fc

0001f7b8 <settings_dst_register>:
	settings_save_dst = cs;
   1f7b8:	4b01      	ldr	r3, [pc, #4]	; (1f7c0 <settings_dst_register+0x8>)
   1f7ba:	6018      	str	r0, [r3, #0]
}
   1f7bc:	4770      	bx	lr
   1f7be:	bf00      	nop
   1f7c0:	20022104 	.word	0x20022104

0001f7c4 <settings_load_subtree>:
	const struct settings_load_arg arg = {
   1f7c4:	2300      	movs	r3, #0
{
   1f7c6:	b530      	push	{r4, r5, lr}
   1f7c8:	b085      	sub	sp, #20
   1f7ca:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
   1f7cc:	e9cd 3302 	strd	r3, r3, [sp, #8]
   1f7d0:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   1f7d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f7d6:	480d      	ldr	r0, [pc, #52]	; (1f80c <settings_load_subtree+0x48>)
   1f7d8:	f00f fbae 	bl	2ef38 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   1f7dc:	4b0c      	ldr	r3, [pc, #48]	; (1f810 <settings_load_subtree+0x4c>)
   1f7de:	681c      	ldr	r4, [r3, #0]
   1f7e0:	2c00      	cmp	r4, #0
   1f7e2:	bf38      	it	cc
   1f7e4:	2400      	movcc	r4, #0
   1f7e6:	b13c      	cbz	r4, 1f7f8 <settings_load_subtree+0x34>
		cs->cs_itf->csi_load(cs, &arg);
   1f7e8:	6863      	ldr	r3, [r4, #4]
   1f7ea:	4620      	mov	r0, r4
   1f7ec:	681b      	ldr	r3, [r3, #0]
   1f7ee:	a901      	add	r1, sp, #4
   1f7f0:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f7f2:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   1f7f4:	2c00      	cmp	r4, #0
   1f7f6:	d1f6      	bne.n	1f7e6 <settings_load_subtree+0x22>
	rc = settings_commit_subtree(subtree);
   1f7f8:	4628      	mov	r0, r5
   1f7fa:	f000 f913 	bl	1fa24 <settings_commit_subtree>
   1f7fe:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   1f800:	4802      	ldr	r0, [pc, #8]	; (1f80c <settings_load_subtree+0x48>)
   1f802:	f00f fc77 	bl	2f0f4 <z_impl_k_mutex_unlock>
}
   1f806:	4620      	mov	r0, r4
   1f808:	b005      	add	sp, #20
   1f80a:	bd30      	pop	{r4, r5, pc}
   1f80c:	200298cc 	.word	0x200298cc
   1f810:	200220fc 	.word	0x200220fc

0001f814 <settings_store_init>:
	list->head = NULL;
   1f814:	2200      	movs	r2, #0
   1f816:	4b02      	ldr	r3, [pc, #8]	; (1f820 <settings_store_init+0xc>)
	list->tail = NULL;
   1f818:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
   1f81c:	4770      	bx	lr
   1f81e:	bf00      	nop
   1f820:	200220fc 	.word	0x200220fc

0001f824 <settings_init>:
	list->head = NULL;
   1f824:	2200      	movs	r2, #0
   1f826:	4b02      	ldr	r3, [pc, #8]	; (1f830 <settings_init+0xc>)
	list->tail = NULL;
   1f828:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
   1f82c:	f7ff bff2 	b.w	1f814 <settings_store_init>
   1f830:	20022108 	.word	0x20022108

0001f834 <settings_register>:
}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
int settings_register(struct settings_handler *handler)
{
   1f834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f838:	4606      	mov	r6, r0
	int rc;

	k_mutex_lock(&settings_lock, K_FOREVER);

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   1f83a:	4d23      	ldr	r5, [pc, #140]	; (1f8c8 <settings_register+0x94>)
	return z_impl_k_mutex_lock(mutex, timeout);
   1f83c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f840:	4822      	ldr	r0, [pc, #136]	; (1f8cc <settings_register+0x98>)
   1f842:	f00f fb79 	bl	2ef38 <z_impl_k_mutex_lock>
   1f846:	46a8      	mov	r8, r5
   1f848:	4c21      	ldr	r4, [pc, #132]	; (1f8d0 <settings_register+0x9c>)
   1f84a:	4f22      	ldr	r7, [pc, #136]	; (1f8d4 <settings_register+0xa0>)
   1f84c:	42ac      	cmp	r4, r5
   1f84e:	d90c      	bls.n	1f86a <settings_register+0x36>
   1f850:	4921      	ldr	r1, [pc, #132]	; (1f8d8 <settings_register+0xa4>)
   1f852:	232d      	movs	r3, #45	; 0x2d
   1f854:	463a      	mov	r2, r7
   1f856:	4821      	ldr	r0, [pc, #132]	; (1f8dc <settings_register+0xa8>)
   1f858:	f013 fe5d 	bl	33516 <printk>
   1f85c:	4820      	ldr	r0, [pc, #128]	; (1f8e0 <settings_register+0xac>)
   1f85e:	f013 fe5a 	bl	33516 <printk>
   1f862:	212d      	movs	r1, #45	; 0x2d
   1f864:	4638      	mov	r0, r7
   1f866:	f013 fe9c 	bl	335a2 <assert_post_action>
   1f86a:	4544      	cmp	r4, r8
   1f86c:	d30c      	bcc.n	1f888 <settings_register+0x54>
			goto end;
		}
	}

	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   1f86e:	4d1d      	ldr	r5, [pc, #116]	; (1f8e4 <settings_register+0xb0>)
   1f870:	682c      	ldr	r4, [r5, #0]
   1f872:	b9c4      	cbnz	r4, 1f8a6 <settings_register+0x72>
	parent->next = child;
   1f874:	2400      	movs	r4, #0
Z_GENLIST_APPEND(slist, snode)
   1f876:	686a      	ldr	r2, [r5, #4]
		if (strcmp(handler->name, ch->name) == 0) {
			rc = -EEXIST;
			goto end;
		}
	}
	sys_slist_append(&settings_handlers, &handler->node);
   1f878:	f106 0314 	add.w	r3, r6, #20
	parent->next = child;
   1f87c:	6174      	str	r4, [r6, #20]
Z_GENLIST_APPEND(slist, snode)
   1f87e:	bb02      	cbnz	r2, 1f8c2 <settings_register+0x8e>
	rc = 0;
   1f880:	4614      	mov	r4, r2
	list->head = node;
   1f882:	e9c5 3300 	strd	r3, r3, [r5]
}
   1f886:	e006      	b.n	1f896 <settings_register+0x62>
		if (strcmp(handler->name, ch->name) == 0) {
   1f888:	6821      	ldr	r1, [r4, #0]
   1f88a:	6830      	ldr	r0, [r6, #0]
   1f88c:	f7fd fc26 	bl	1d0dc <strcmp>
   1f890:	b938      	cbnz	r0, 1f8a2 <settings_register+0x6e>
			rc = -EEXIST;
   1f892:	f06f 0410 	mvn.w	r4, #16
	return z_impl_k_mutex_unlock(mutex);
   1f896:	480d      	ldr	r0, [pc, #52]	; (1f8cc <settings_register+0x98>)
   1f898:	f00f fc2c 	bl	2f0f4 <z_impl_k_mutex_unlock>
end:
	k_mutex_unlock(&settings_lock);
	return rc;
}
   1f89c:	4620      	mov	r0, r4
   1f89e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   1f8a2:	3414      	adds	r4, #20
   1f8a4:	e7d2      	b.n	1f84c <settings_register+0x18>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   1f8a6:	3c14      	subs	r4, #20
   1f8a8:	2c00      	cmp	r4, #0
   1f8aa:	d0e3      	beq.n	1f874 <settings_register+0x40>
		if (strcmp(handler->name, ch->name) == 0) {
   1f8ac:	6821      	ldr	r1, [r4, #0]
   1f8ae:	6830      	ldr	r0, [r6, #0]
   1f8b0:	f7fd fc14 	bl	1d0dc <strcmp>
   1f8b4:	2800      	cmp	r0, #0
   1f8b6:	d0ec      	beq.n	1f892 <settings_register+0x5e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1f8b8:	f114 0f14 	cmn.w	r4, #20
   1f8bc:	d0da      	beq.n	1f874 <settings_register+0x40>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f8be:	6964      	ldr	r4, [r4, #20]
	return node->next;
   1f8c0:	e7d7      	b.n	1f872 <settings_register+0x3e>
	parent->next = child;
   1f8c2:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1f8c4:	606b      	str	r3, [r5, #4]
}
   1f8c6:	e7e6      	b.n	1f896 <settings_register+0x62>
   1f8c8:	00036d34 	.word	0x00036d34
   1f8cc:	200298cc 	.word	0x200298cc
   1f8d0:	00036d34 	.word	0x00036d34
   1f8d4:	000380bd 	.word	0x000380bd
   1f8d8:	000380ef 	.word	0x000380ef
   1f8dc:	00037a66 	.word	0x00037a66
   1f8e0:	00038117 	.word	0x00038117
   1f8e4:	20022108 	.word	0x20022108

0001f8e8 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
   1f8e8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1f8ec:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
   1f8ee:	460e      	mov	r6, r1
   1f8f0:	b109      	cbz	r1, 1f8f6 <settings_parse_and_lookup+0xe>
		*next = NULL;
   1f8f2:	2300      	movs	r3, #0
   1f8f4:	600b      	str	r3, [r1, #0]
	}

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   1f8f6:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 1f9a8 <settings_parse_and_lookup+0xc0>
   1f8fa:	2500      	movs	r5, #0
   1f8fc:	46c2      	mov	sl, r8
   1f8fe:	4c25      	ldr	r4, [pc, #148]	; (1f994 <settings_parse_and_lookup+0xac>)
   1f900:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 1f9ac <settings_parse_and_lookup+0xc4>
   1f904:	4544      	cmp	r4, r8
   1f906:	d90c      	bls.n	1f922 <settings_parse_and_lookup+0x3a>
   1f908:	4923      	ldr	r1, [pc, #140]	; (1f998 <settings_parse_and_lookup+0xb0>)
   1f90a:	2395      	movs	r3, #149	; 0x95
   1f90c:	464a      	mov	r2, r9
   1f90e:	4823      	ldr	r0, [pc, #140]	; (1f99c <settings_parse_and_lookup+0xb4>)
   1f910:	f013 fe01 	bl	33516 <printk>
   1f914:	4822      	ldr	r0, [pc, #136]	; (1f9a0 <settings_parse_and_lookup+0xb8>)
   1f916:	f013 fdfe 	bl	33516 <printk>
   1f91a:	2195      	movs	r1, #149	; 0x95
   1f91c:	4648      	mov	r0, r9
   1f91e:	f013 fe40 	bl	335a2 <assert_post_action>
   1f922:	4554      	cmp	r4, sl
   1f924:	d308      	bcc.n	1f938 <settings_parse_and_lookup+0x50>
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   1f926:	4b1f      	ldr	r3, [pc, #124]	; (1f9a4 <settings_parse_and_lookup+0xbc>)
   1f928:	681c      	ldr	r4, [r3, #0]
   1f92a:	b10c      	cbz	r4, 1f930 <settings_parse_and_lookup+0x48>
   1f92c:	3c14      	subs	r4, #20
   1f92e:	b9c4      	cbnz	r4, 1f962 <settings_parse_and_lookup+0x7a>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
   1f930:	4628      	mov	r0, r5
   1f932:	b002      	add	sp, #8
   1f934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   1f938:	4638      	mov	r0, r7
   1f93a:	6821      	ldr	r1, [r4, #0]
   1f93c:	aa01      	add	r2, sp, #4
   1f93e:	f014 f87f 	bl	33a40 <settings_name_steq>
   1f942:	b160      	cbz	r0, 1f95e <settings_parse_and_lookup+0x76>
		if (!bestmatch) {
   1f944:	b925      	cbnz	r5, 1f950 <settings_parse_and_lookup+0x68>
			if (next) {
   1f946:	b10e      	cbz	r6, 1f94c <settings_parse_and_lookup+0x64>
				*next = tmpnext;
   1f948:	9b01      	ldr	r3, [sp, #4]
   1f94a:	6033      	str	r3, [r6, #0]
   1f94c:	4625      	mov	r5, r4
   1f94e:	e006      	b.n	1f95e <settings_parse_and_lookup+0x76>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   1f950:	2200      	movs	r2, #0
   1f952:	6829      	ldr	r1, [r5, #0]
   1f954:	6820      	ldr	r0, [r4, #0]
   1f956:	f014 f873 	bl	33a40 <settings_name_steq>
   1f95a:	2800      	cmp	r0, #0
   1f95c:	d1f3      	bne.n	1f946 <settings_parse_and_lookup+0x5e>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   1f95e:	3414      	adds	r4, #20
   1f960:	e7d0      	b.n	1f904 <settings_parse_and_lookup+0x1c>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   1f962:	4638      	mov	r0, r7
   1f964:	6821      	ldr	r1, [r4, #0]
   1f966:	aa01      	add	r2, sp, #4
   1f968:	f014 f86a 	bl	33a40 <settings_name_steq>
   1f96c:	b160      	cbz	r0, 1f988 <settings_parse_and_lookup+0xa0>
		if (!bestmatch) {
   1f96e:	b925      	cbnz	r5, 1f97a <settings_parse_and_lookup+0x92>
			if (next) {
   1f970:	b10e      	cbz	r6, 1f976 <settings_parse_and_lookup+0x8e>
				*next = tmpnext;
   1f972:	9b01      	ldr	r3, [sp, #4]
   1f974:	6033      	str	r3, [r6, #0]
   1f976:	4625      	mov	r5, r4
   1f978:	e006      	b.n	1f988 <settings_parse_and_lookup+0xa0>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   1f97a:	2200      	movs	r2, #0
   1f97c:	6829      	ldr	r1, [r5, #0]
   1f97e:	6820      	ldr	r0, [r4, #0]
   1f980:	f014 f85e 	bl	33a40 <settings_name_steq>
   1f984:	2800      	cmp	r0, #0
   1f986:	d1f3      	bne.n	1f970 <settings_parse_and_lookup+0x88>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1f988:	f114 0f14 	cmn.w	r4, #20
   1f98c:	d0d0      	beq.n	1f930 <settings_parse_and_lookup+0x48>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f98e:	6964      	ldr	r4, [r4, #20]
   1f990:	e7cb      	b.n	1f92a <settings_parse_and_lookup+0x42>
   1f992:	bf00      	nop
   1f994:	00036d34 	.word	0x00036d34
   1f998:	000380ef 	.word	0x000380ef
   1f99c:	00037a66 	.word	0x00037a66
   1f9a0:	00038117 	.word	0x00038117
   1f9a4:	20022108 	.word	0x20022108
   1f9a8:	00036d34 	.word	0x00036d34
   1f9ac:	000380bd 	.word	0x000380bd

0001f9b0 <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
   1f9b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f9b4:	b086      	sub	sp, #24
   1f9b6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   1f9b8:	4604      	mov	r4, r0
   1f9ba:	460d      	mov	r5, r1
   1f9bc:	4616      	mov	r6, r2
	int rc;
	const char *name_key = name;
   1f9be:	9005      	str	r0, [sp, #20]

	if (load_arg && load_arg->subtree &&
   1f9c0:	b1bf      	cbz	r7, 1f9f2 <settings_call_set_handler+0x42>
   1f9c2:	6839      	ldr	r1, [r7, #0]
   1f9c4:	b181      	cbz	r1, 1f9e8 <settings_call_set_handler+0x38>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
   1f9c6:	aa05      	add	r2, sp, #20
   1f9c8:	9303      	str	r3, [sp, #12]
   1f9ca:	f014 f839 	bl	33a40 <settings_name_steq>
	if (load_arg && load_arg->subtree &&
   1f9ce:	9b03      	ldr	r3, [sp, #12]
   1f9d0:	b950      	cbnz	r0, 1f9e8 <settings_call_set_handler+0x38>

		if (rc != 0) {
			LOG_ERR("set-value failure. key: %s error(%d)",
				log_strdup(name), rc);
			/* Ignoring the error */
			rc = 0;
   1f9d2:	2000      	movs	r0, #0
   1f9d4:	e005      	b.n	1f9e2 <settings_call_set_handler+0x32>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   1f9d6:	68ba      	ldr	r2, [r7, #8]
   1f9d8:	4629      	mov	r1, r5
   1f9da:	9200      	str	r2, [sp, #0]
   1f9dc:	9805      	ldr	r0, [sp, #20]
   1f9de:	4632      	mov	r2, r6
   1f9e0:	47c0      	blx	r8
			LOG_DBG("set-value OK. key: %s",
				log_strdup(name));
		}
	}
	return rc;
}
   1f9e2:	b006      	add	sp, #24
   1f9e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (load_arg && load_arg->cb) {
   1f9e8:	f8d7 8004 	ldr.w	r8, [r7, #4]
   1f9ec:	f1b8 0f00 	cmp.w	r8, #0
   1f9f0:	d1f1      	bne.n	1f9d6 <settings_call_set_handler+0x26>
		ch = settings_parse_and_lookup(name, &name_key);
   1f9f2:	4620      	mov	r0, r4
   1f9f4:	a905      	add	r1, sp, #20
   1f9f6:	9303      	str	r3, [sp, #12]
   1f9f8:	f7ff ff76 	bl	1f8e8 <settings_parse_and_lookup>
		if (!ch) {
   1f9fc:	2800      	cmp	r0, #0
   1f9fe:	d0e8      	beq.n	1f9d2 <settings_call_set_handler+0x22>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
   1fa00:	6887      	ldr	r7, [r0, #8]
   1fa02:	9b03      	ldr	r3, [sp, #12]
   1fa04:	4632      	mov	r2, r6
   1fa06:	4629      	mov	r1, r5
   1fa08:	9805      	ldr	r0, [sp, #20]
   1fa0a:	47b8      	blx	r7
		if (rc != 0) {
   1fa0c:	4603      	mov	r3, r0
   1fa0e:	2800      	cmp	r0, #0
   1fa10:	d0df      	beq.n	1f9d2 <settings_call_set_handler+0x22>
			LOG_ERR("set-value failure. key: %s error(%d)",
   1fa12:	4622      	mov	r2, r4
   1fa14:	2145      	movs	r1, #69	; 0x45
   1fa16:	4802      	ldr	r0, [pc, #8]	; (1fa20 <settings_call_set_handler+0x70>)
   1fa18:	f013 fd7d 	bl	33516 <printk>
   1fa1c:	e7d9      	b.n	1f9d2 <settings_call_set_handler+0x22>
   1fa1e:	bf00      	nop
   1fa20:	00038136 	.word	0x00038136

0001fa24 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
   1fa24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int rc;
	int rc2;

	rc = 0;

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   1fa28:	4f23      	ldr	r7, [pc, #140]	; (1fab8 <settings_commit_subtree+0x94>)
{
   1fa2a:	4606      	mov	r6, r0
	rc = 0;
   1fa2c:	2500      	movs	r5, #0
   1fa2e:	46b9      	mov	r9, r7
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   1fa30:	4c22      	ldr	r4, [pc, #136]	; (1fabc <settings_commit_subtree+0x98>)
   1fa32:	f8df 809c 	ldr.w	r8, [pc, #156]	; 1fad0 <settings_commit_subtree+0xac>
   1fa36:	42bc      	cmp	r4, r7
   1fa38:	d90c      	bls.n	1fa54 <settings_commit_subtree+0x30>
   1fa3a:	4921      	ldr	r1, [pc, #132]	; (1fac0 <settings_commit_subtree+0x9c>)
   1fa3c:	23f5      	movs	r3, #245	; 0xf5
   1fa3e:	4642      	mov	r2, r8
   1fa40:	4820      	ldr	r0, [pc, #128]	; (1fac4 <settings_commit_subtree+0xa0>)
   1fa42:	f013 fd68 	bl	33516 <printk>
   1fa46:	4820      	ldr	r0, [pc, #128]	; (1fac8 <settings_commit_subtree+0xa4>)
   1fa48:	f013 fd65 	bl	33516 <printk>
   1fa4c:	21f5      	movs	r1, #245	; 0xf5
   1fa4e:	4640      	mov	r0, r8
   1fa50:	f013 fda7 	bl	335a2 <assert_post_action>
   1fa54:	454c      	cmp	r4, r9
   1fa56:	d307      	bcc.n	1fa68 <settings_commit_subtree+0x44>
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   1fa58:	4b1c      	ldr	r3, [pc, #112]	; (1facc <settings_commit_subtree+0xa8>)
   1fa5a:	681c      	ldr	r4, [r3, #0]
   1fa5c:	b10c      	cbz	r4, 1fa62 <settings_commit_subtree+0x3e>
   1fa5e:	3c14      	subs	r4, #20
   1fa60:	b9a4      	cbnz	r4, 1fa8c <settings_commit_subtree+0x68>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
   1fa62:	4628      	mov	r0, r5
   1fa64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   1fa68:	b91e      	cbnz	r6, 1fa72 <settings_commit_subtree+0x4e>
		if (ch->h_commit) {
   1fa6a:	68e3      	ldr	r3, [r4, #12]
   1fa6c:	b94b      	cbnz	r3, 1fa82 <settings_commit_subtree+0x5e>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   1fa6e:	3414      	adds	r4, #20
   1fa70:	e7e1      	b.n	1fa36 <settings_commit_subtree+0x12>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   1fa72:	2200      	movs	r2, #0
   1fa74:	4631      	mov	r1, r6
   1fa76:	6820      	ldr	r0, [r4, #0]
   1fa78:	f013 ffe2 	bl	33a40 <settings_name_steq>
   1fa7c:	2800      	cmp	r0, #0
   1fa7e:	d1f4      	bne.n	1fa6a <settings_commit_subtree+0x46>
   1fa80:	e7f5      	b.n	1fa6e <settings_commit_subtree+0x4a>
			rc2 = ch->h_commit();
   1fa82:	4798      	blx	r3
				rc = rc2;
   1fa84:	2d00      	cmp	r5, #0
   1fa86:	bf08      	it	eq
   1fa88:	4605      	moveq	r5, r0
   1fa8a:	e7f0      	b.n	1fa6e <settings_commit_subtree+0x4a>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   1fa8c:	b936      	cbnz	r6, 1fa9c <settings_commit_subtree+0x78>
		if (ch->h_commit) {
   1fa8e:	68e3      	ldr	r3, [r4, #12]
   1fa90:	b963      	cbnz	r3, 1faac <settings_commit_subtree+0x88>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1fa92:	f114 0f14 	cmn.w	r4, #20
   1fa96:	d0e4      	beq.n	1fa62 <settings_commit_subtree+0x3e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1fa98:	6964      	ldr	r4, [r4, #20]
   1fa9a:	e7df      	b.n	1fa5c <settings_commit_subtree+0x38>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   1fa9c:	2200      	movs	r2, #0
   1fa9e:	4631      	mov	r1, r6
   1faa0:	6820      	ldr	r0, [r4, #0]
   1faa2:	f013 ffcd 	bl	33a40 <settings_name_steq>
   1faa6:	2800      	cmp	r0, #0
   1faa8:	d1f1      	bne.n	1fa8e <settings_commit_subtree+0x6a>
   1faaa:	e7f2      	b.n	1fa92 <settings_commit_subtree+0x6e>
			rc2 = ch->h_commit();
   1faac:	4798      	blx	r3
				rc = rc2;
   1faae:	2d00      	cmp	r5, #0
   1fab0:	bf08      	it	eq
   1fab2:	4605      	moveq	r5, r0
   1fab4:	e7ed      	b.n	1fa92 <settings_commit_subtree+0x6e>
   1fab6:	bf00      	nop
   1fab8:	00036d34 	.word	0x00036d34
   1fabc:	00036d34 	.word	0x00036d34
   1fac0:	000380ef 	.word	0x000380ef
   1fac4:	00037a66 	.word	0x00037a66
   1fac8:	00038117 	.word	0x00038117
   1facc:	20022108 	.word	0x20022108
   1fad0:	000380bd 	.word	0x000380bd

0001fad4 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
   1fad4:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
   1fad6:	4c06      	ldr	r4, [pc, #24]	; (1faf0 <settings_subsys_init+0x1c>)
   1fad8:	7823      	ldrb	r3, [r4, #0]
   1fada:	b93b      	cbnz	r3, 1faec <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
   1fadc:	f7ff fea2 	bl	1f824 <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
   1fae0:	f000 f864 	bl	1fbac <settings_backend_init>

	if (!err) {
   1fae4:	b908      	cbnz	r0, 1faea <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
   1fae6:	2301      	movs	r3, #1
   1fae8:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
   1faea:	bd10      	pop	{r4, pc}
		return 0;
   1faec:	2000      	movs	r0, #0
   1faee:	e7fc      	b.n	1faea <settings_subsys_init+0x16>
   1faf0:	200241f0 	.word	0x200241f0

0001faf4 <settings_nvs_load>:
	return 0;
}

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
   1faf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1faf8:	4680      	mov	r8, r0
   1fafa:	4689      	mov	r9, r1
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	u16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
   1fafc:	8e84      	ldrh	r4, [r0, #52]	; 0x34
		/* Found a name, this might not include a trailing \0 */
		name[rc1] = '\0';
		read_fn_arg.fs = &cf->cf_nvs;
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;

		ret = settings_call_set_handler(
   1fafe:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 1fba8 <settings_nvs_load+0xb4>
	name_id = cf->last_name_id + 1;
   1fb02:	3401      	adds	r4, #1
{
   1fb04:	b098      	sub	sp, #96	; 0x60
	name_id = cf->last_name_id + 1;
   1fb06:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   1fb08:	f100 0608 	add.w	r6, r0, #8
		name_id--;
   1fb0c:	1e65      	subs	r5, r4, #1
   1fb0e:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
   1fb10:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   1fb14:	d045      	beq.n	1fba2 <settings_nvs_load+0xae>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   1fb16:	234a      	movs	r3, #74	; 0x4a
   1fb18:	4629      	mov	r1, r5
   1fb1a:	aa05      	add	r2, sp, #20
   1fb1c:	4630      	mov	r0, r6
   1fb1e:	f013 fe52 	bl	337c6 <nvs_read>
   1fb22:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
   1fb26:	343f      	adds	r4, #63	; 0x3f
   1fb28:	b2a4      	uxth	r4, r4
   1fb2a:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   1fb2c:	4621      	mov	r1, r4
   1fb2e:	2301      	movs	r3, #1
   1fb30:	4630      	mov	r0, r6
   1fb32:	f10d 020b 	add.w	r2, sp, #11
   1fb36:	f013 fe46 	bl	337c6 <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
   1fb3a:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   1fb3c:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
   1fb3e:	dc03      	bgt.n	1fb48 <settings_nvs_load+0x54>
   1fb40:	2800      	cmp	r0, #0
   1fb42:	dc03      	bgt.n	1fb4c <settings_nvs_load+0x58>
{
   1fb44:	462c      	mov	r4, r5
   1fb46:	e7e1      	b.n	1fb0c <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
   1fb48:	2800      	cmp	r0, #0
   1fb4a:	dc16      	bgt.n	1fb7a <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
   1fb4c:	f8b8 3034 	ldrh.w	r3, [r8, #52]	; 0x34
   1fb50:	42ab      	cmp	r3, r5
   1fb52:	d109      	bne.n	1fb68 <settings_nvs_load+0x74>
				cf->last_name_id--;
   1fb54:	4642      	mov	r2, r8
   1fb56:	1e6b      	subs	r3, r5, #1
   1fb58:	f822 3f34 	strh.w	r3, [r2, #52]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   1fb5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1fb60:	2302      	movs	r3, #2
   1fb62:	4630      	mov	r0, r6
   1fb64:	f7ff fb2e 	bl	1f1c4 <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
   1fb68:	4629      	mov	r1, r5
   1fb6a:	4630      	mov	r0, r6
   1fb6c:	f013 fe27 	bl	337be <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
   1fb70:	4621      	mov	r1, r4
   1fb72:	4630      	mov	r0, r6
   1fb74:	f013 fe23 	bl	337be <nvs_delete>
			continue;
   1fb78:	e7e4      	b.n	1fb44 <settings_nvs_load+0x50>
		name[rc1] = '\0';
   1fb7a:	ab18      	add	r3, sp, #96	; 0x60
   1fb7c:	441f      	add	r7, r3
   1fb7e:	2300      	movs	r3, #0
		ret = settings_call_set_handler(
   1fb80:	4652      	mov	r2, sl
		name[rc1] = '\0';
   1fb82:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
   1fb86:	a805      	add	r0, sp, #20
   1fb88:	f8cd 9000 	str.w	r9, [sp]
   1fb8c:	ab03      	add	r3, sp, #12
		read_fn_arg.fs = &cf->cf_nvs;
   1fb8e:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
   1fb90:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
   1fb94:	f7ff ff0c 	bl	1f9b0 <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
   1fb98:	2800      	cmp	r0, #0
   1fb9a:	d0d3      	beq.n	1fb44 <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
   1fb9c:	b018      	add	sp, #96	; 0x60
   1fb9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1fba2:	2000      	movs	r0, #0
	return ret;
   1fba4:	e7fa      	b.n	1fb9c <settings_nvs_load+0xa8>
   1fba6:	bf00      	nop
   1fba8:	00033a81 	.word	0x00033a81

0001fbac <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
   1fbac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	u16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	u32_t sector_cnt = 1;
   1fbae:	2301      	movs	r3, #1

	rc = flash_area_open(FLASH_AREA_STORAGE_ID, &fa);
   1fbb0:	4669      	mov	r1, sp
   1fbb2:	2007      	movs	r0, #7
	u32_t sector_cnt = 1;
   1fbb4:	9301      	str	r3, [sp, #4]
	rc = flash_area_open(FLASH_AREA_STORAGE_ID, &fa);
   1fbb6:	f7ff fd81 	bl	1f6bc <flash_area_open>
	if (rc) {
   1fbba:	4604      	mov	r4, r0
   1fbbc:	2800      	cmp	r0, #0
   1fbbe:	d136      	bne.n	1fc2e <settings_backend_init+0x82>
		return rc;
	}

	rc = flash_area_get_sectors(FLASH_AREA_STORAGE_ID, &sector_cnt,
   1fbc0:	2007      	movs	r0, #7
   1fbc2:	aa02      	add	r2, sp, #8
   1fbc4:	a901      	add	r1, sp, #4
   1fbc6:	f7ff fd8d 	bl	1f6e4 <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc == -ENODEV) {
   1fbca:	f110 0f13 	cmn.w	r0, #19
	rc = flash_area_get_sectors(FLASH_AREA_STORAGE_ID, &sector_cnt,
   1fbce:	4604      	mov	r4, r0
	if (rc == -ENODEV) {
   1fbd0:	d02d      	beq.n	1fc2e <settings_backend_init+0x82>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
   1fbd2:	b138      	cbz	r0, 1fbe4 <settings_backend_init+0x38>
   1fbd4:	340c      	adds	r4, #12
   1fbd6:	d005      	beq.n	1fbe4 <settings_backend_init+0x38>
		k_panic();
   1fbd8:	4040      	eors	r0, r0
   1fbda:	f380 8811 	msr	BASEPRI, r0
   1fbde:	f04f 0004 	mov.w	r0, #4
   1fbe2:	df02      	svc	2
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
   1fbe4:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
   1fbe6:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   1fbea:	d223      	bcs.n	1fc34 <settings_backend_init+0x88>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
   1fbec:	2300      	movs	r3, #0
	size_t nvs_sector_size, nvs_size = 0;
   1fbee:	4618      	mov	r0, r3
		if (nvs_size > fa->fa_size) {
   1fbf0:	9a00      	ldr	r2, [sp, #0]
   1fbf2:	6895      	ldr	r5, [r2, #8]
		nvs_size += nvs_sector_size;
   1fbf4:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
   1fbf6:	4285      	cmp	r5, r0
   1fbf8:	b29c      	uxth	r4, r3
   1fbfa:	d303      	bcc.n	1fc04 <settings_backend_init+0x58>
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
   1fbfc:	3301      	adds	r3, #1
   1fbfe:	2b08      	cmp	r3, #8
   1fc00:	d1f8      	bne.n	1fbf4 <settings_backend_init+0x48>
   1fc02:	461c      	mov	r4, r3
		}
		cnt++;
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   1fc04:	4d0d      	ldr	r5, [pc, #52]	; (1fc3c <settings_backend_init+0x90>)
	default_settings_nvs.cf_nvs.sector_count = cnt;
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
   1fc06:	6853      	ldr	r3, [r2, #4]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;

	rc = settings_nvs_backend_init(&default_settings_nvs);
   1fc08:	4628      	mov	r0, r5
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
   1fc0a:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
   1fc0c:	68d3      	ldr	r3, [r2, #12]
	default_settings_nvs.cf_nvs.sector_count = cnt;
   1fc0e:	82ec      	strh	r4, [r5, #22]
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   1fc10:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
   1fc12:	63ab      	str	r3, [r5, #56]	; 0x38
	rc = settings_nvs_backend_init(&default_settings_nvs);
   1fc14:	f013 ffc9 	bl	33baa <settings_nvs_backend_init>
	if (rc) {
   1fc18:	4604      	mov	r4, r0
   1fc1a:	b940      	cbnz	r0, 1fc2e <settings_backend_init+0x82>
	cf->cf_store.cs_itf = &settings_nvs_itf;
   1fc1c:	4e08      	ldr	r6, [pc, #32]	; (1fc40 <settings_backend_init+0x94>)
	settings_src_register(&cf->cf_store);
   1fc1e:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
   1fc20:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
   1fc22:	f7ff fda9 	bl	1f778 <settings_src_register>
	settings_dst_register(&cf->cf_store);
   1fc26:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
   1fc28:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
   1fc2a:	f7ff fdc5 	bl	1f7b8 <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
   1fc2e:	4620      	mov	r0, r4
   1fc30:	b004      	add	sp, #16
   1fc32:	bd70      	pop	{r4, r5, r6, pc}
		return -EDOM;
   1fc34:	f06f 0420 	mvn.w	r4, #32
   1fc38:	e7f9      	b.n	1fc2e <settings_backend_init+0x82>
   1fc3a:	bf00      	nop
   1fc3c:	20022110 	.word	0x20022110
   1fc40:	2002954c 	.word	0x2002954c

0001fc44 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
   1fc44:	b507      	push	{r0, r1, r2, lr}
   1fc46:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
   1fc48:	f04f 0220 	mov.w	r2, #32
   1fc4c:	f3ef 8311 	mrs	r3, BASEPRI
   1fc50:	f382 8811 	msr	BASEPRI, r2
   1fc54:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
   1fc58:	f013 ffea 	bl	33c30 <sys_clock_disable>
#endif

	sys_arch_reboot(type);
   1fc5c:	9801      	ldr	r0, [sp, #4]
   1fc5e:	f000 ffb5 	bl	20bcc <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   1fc62:	4803      	ldr	r0, [pc, #12]	; (1fc70 <sys_reboot+0x2c>)
   1fc64:	f013 fc57 	bl	33516 <printk>
 * @return N/A
 * @req K-CPU-IDLE-001
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   1fc68:	f000 fcdc 	bl	20624 <arch_cpu_idle>
   1fc6c:	e7fc      	b.n	1fc68 <sys_reboot+0x24>
   1fc6e:	bf00      	nop
   1fc70:	0003816f 	.word	0x0003816f

0001fc74 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
   1fc74:	280a      	cmp	r0, #10
{
   1fc76:	b538      	push	{r3, r4, r5, lr}
   1fc78:	4604      	mov	r4, r0
   1fc7a:	4d07      	ldr	r5, [pc, #28]	; (1fc98 <console_out+0x24>)
	if ('\n' == c) {
   1fc7c:	d104      	bne.n	1fc88 <console_out+0x14>
   1fc7e:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
   1fc80:	6843      	ldr	r3, [r0, #4]
   1fc82:	210d      	movs	r1, #13
   1fc84:	685b      	ldr	r3, [r3, #4]
   1fc86:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
   1fc88:	6828      	ldr	r0, [r5, #0]
   1fc8a:	6843      	ldr	r3, [r0, #4]
   1fc8c:	b2e1      	uxtb	r1, r4
   1fc8e:	685b      	ldr	r3, [r3, #4]
   1fc90:	4798      	blx	r3

	return c;
}
   1fc92:	4620      	mov	r0, r4
   1fc94:	bd38      	pop	{r3, r4, r5, pc}
   1fc96:	bf00      	nop
   1fc98:	2002214c 	.word	0x2002214c

0001fc9c <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
   1fc9c:	b508      	push	{r3, lr}
	__stdout_hook_install(console_out);
   1fc9e:	4804      	ldr	r0, [pc, #16]	; (1fcb0 <uart_console_hook_install+0x14>)
   1fca0:	f001 fa3e 	bl	21120 <__stdout_hook_install>
	__printk_hook_install(console_out);
}
   1fca4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__printk_hook_install(console_out);
   1fca8:	4801      	ldr	r0, [pc, #4]	; (1fcb0 <uart_console_hook_install+0x14>)
   1fcaa:	f7fe be9b 	b.w	1e9e4 <__printk_hook_install>
   1fcae:	bf00      	nop
   1fcb0:	0001fc75 	.word	0x0001fc75

0001fcb4 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
   1fcb4:	b508      	push	{r3, lr}
   1fcb6:	4804      	ldr	r0, [pc, #16]	; (1fcc8 <uart_console_init+0x14>)
   1fcb8:	f00e fc6e 	bl	2e598 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   1fcbc:	4b03      	ldr	r3, [pc, #12]	; (1fccc <uart_console_init+0x18>)
   1fcbe:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
   1fcc0:	f7ff ffec 	bl	1fc9c <uart_console_hook_install>

	return 0;
}
   1fcc4:	2000      	movs	r0, #0
   1fcc6:	bd08      	pop	{r3, pc}
   1fcc8:	00038198 	.word	0x00038198
   1fccc:	2002214c 	.word	0x2002214c

0001fcd0 <clk_init>:
 * symbol.
 */
void nrf_power_clock_isr(void *arg);

static int clk_init(struct device *dev)
{
   1fcd0:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
   1fcd2:	2200      	movs	r2, #0
{
   1fcd4:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
   1fcd6:	2101      	movs	r1, #1
   1fcd8:	2005      	movs	r0, #5
   1fcda:	f000 fbdd 	bl	20498 <z_arm_irq_priority_set>
		    DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0_PRIORITY,
		    nrf_power_clock_isr, 0, 0);

	irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
   1fcde:	2005      	movs	r0, #5
   1fce0:	f000 fbca 	bl	20478 <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
   1fce4:	2202      	movs	r2, #2
   1fce6:	4b07      	ldr	r3, [pc, #28]	; (1fd04 <clk_init+0x34>)
	list->head = NULL;
   1fce8:	2000      	movs	r0, #0
   1fcea:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
   1fcee:	2203      	movs	r2, #3
   1fcf0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	clock_irqs_enable();

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		sys_slist_init(&(get_sub_data(dev, i)->list));
   1fcf4:	68a3      	ldr	r3, [r4, #8]
	list->tail = NULL;
   1fcf6:	e9c3 0000 	strd	r0, r0, [r3]
   1fcfa:	68a3      	ldr	r3, [r4, #8]
   1fcfc:	e9c3 0003 	strd	r0, r0, [r3, #12]
	}

	return 0;
}
   1fd00:	bd10      	pop	{r4, pc}
   1fd02:	bf00      	nop
   1fd04:	40005000 	.word	0x40005000

0001fd08 <get_status>:
{
   1fd08:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1fd0a:	b2cc      	uxtb	r4, r1
   1fd0c:	2c01      	cmp	r4, #1
{
   1fd0e:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1fd10:	d909      	bls.n	1fd26 <get_status+0x1e>
   1fd12:	490b      	ldr	r1, [pc, #44]	; (1fd40 <get_status+0x38>)
   1fd14:	480b      	ldr	r0, [pc, #44]	; (1fd44 <get_status+0x3c>)
   1fd16:	2384      	movs	r3, #132	; 0x84
   1fd18:	4a0b      	ldr	r2, [pc, #44]	; (1fd48 <get_status+0x40>)
   1fd1a:	f013 fbfc 	bl	33516 <printk>
   1fd1e:	2184      	movs	r1, #132	; 0x84
   1fd20:	4809      	ldr	r0, [pc, #36]	; (1fd48 <get_status+0x40>)
   1fd22:	f013 fc3e 	bl	335a2 <assert_post_action>
	if (data->started) {
   1fd26:	210c      	movs	r1, #12
	data = get_sub_data(dev, type);
   1fd28:	68ab      	ldr	r3, [r5, #8]
	if (data->started) {
   1fd2a:	fb04 3101 	mla	r1, r4, r1, r3
   1fd2e:	7a4b      	ldrb	r3, [r1, #9]
   1fd30:	b923      	cbnz	r3, 1fd3c <get_status+0x34>
	if (data->ref > 0) {
   1fd32:	7a08      	ldrb	r0, [r1, #8]
		return CLOCK_CONTROL_STATUS_ON;
   1fd34:	fab0 f080 	clz	r0, r0
   1fd38:	0940      	lsrs	r0, r0, #5
}
   1fd3a:	bd38      	pop	{r3, r4, r5, pc}
		return CLOCK_CONTROL_STATUS_ON;
   1fd3c:	2002      	movs	r0, #2
   1fd3e:	e7fc      	b.n	1fd3a <get_status+0x32>
   1fd40:	000381da 	.word	0x000381da
   1fd44:	00037a66 	.word	0x00037a66
   1fd48:	0003819f 	.word	0x0003819f

0001fd4c <clock_async_start>:
{
   1fd4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   1fd50:	b2cd      	uxtb	r5, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1fd52:	2d01      	cmp	r5, #1
{
   1fd54:	4606      	mov	r6, r0
   1fd56:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1fd58:	d909      	bls.n	1fd6e <clock_async_start+0x22>
   1fd5a:	4949      	ldr	r1, [pc, #292]	; (1fe80 <clock_async_start+0x134>)
   1fd5c:	4849      	ldr	r0, [pc, #292]	; (1fe84 <clock_async_start+0x138>)
   1fd5e:	23fd      	movs	r3, #253	; 0xfd
   1fd60:	4a49      	ldr	r2, [pc, #292]	; (1fe88 <clock_async_start+0x13c>)
   1fd62:	f013 fbd8 	bl	33516 <printk>
   1fd66:	21fd      	movs	r1, #253	; 0xfd
   1fd68:	4847      	ldr	r0, [pc, #284]	; (1fe88 <clock_async_start+0x13c>)
   1fd6a:	f013 fc1a 	bl	335a2 <assert_post_action>
	const struct nrf_clock_control_config *config =
   1fd6e:	6833      	ldr	r3, [r6, #0]
	clk_data = get_sub_data(dev, type);
   1fd70:	f8d6 9008 	ldr.w	r9, [r6, #8]
	const struct nrf_clock_control_config *config =
   1fd74:	f8d3 8008 	ldr.w	r8, [r3, #8]
	__ASSERT_NO_MSG((data == NULL) ||
   1fd78:	2c00      	cmp	r4, #0
   1fd7a:	d157      	bne.n	1fe2c <clock_async_start+0xe0>
   1fd7c:	f04f 0320 	mov.w	r3, #32
   1fd80:	f3ef 8a11 	mrs	sl, BASEPRI
   1fd84:	f383 8811 	msr	BASEPRI, r3
   1fd88:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
   1fd8c:	230c      	movs	r3, #12
   1fd8e:	fb03 9305 	mla	r3, r3, r5, r9
   1fd92:	7a1f      	ldrb	r7, [r3, #8]
   1fd94:	3701      	adds	r7, #1
   1fd96:	b2ff      	uxtb	r7, r7
   1fd98:	721f      	strb	r7, [r3, #8]
	__ASSERT_NO_MSG(clk_data->ref > 0);
   1fd9a:	b95f      	cbnz	r7, 1fdb4 <clock_async_start+0x68>
   1fd9c:	493b      	ldr	r1, [pc, #236]	; (1fe8c <clock_async_start+0x140>)
   1fd9e:	4839      	ldr	r0, [pc, #228]	; (1fe84 <clock_async_start+0x138>)
   1fda0:	f44f 7387 	mov.w	r3, #270	; 0x10e
   1fda4:	4a38      	ldr	r2, [pc, #224]	; (1fe88 <clock_async_start+0x13c>)
   1fda6:	f013 fbb6 	bl	33516 <printk>
   1fdaa:	f44f 7187 	mov.w	r1, #270	; 0x10e
   1fdae:	4836      	ldr	r0, [pc, #216]	; (1fe88 <clock_async_start+0x13c>)
   1fdb0:	f013 fbf7 	bl	335a2 <assert_post_action>
	__asm__ volatile(
   1fdb4:	f38a 8811 	msr	BASEPRI, sl
   1fdb8:	f3bf 8f6f 	isb	sy
	if (data) {
   1fdbc:	b32c      	cbz	r4, 1fe0a <clock_async_start+0xbe>
    p_reg->INTENCLR = mask;
   1fdbe:	2203      	movs	r2, #3
   1fdc0:	4b33      	ldr	r3, [pc, #204]	; (1fe90 <clock_async_start+0x144>)
   1fdc2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		already_started = clk_data->started;
   1fdc6:	220c      	movs	r2, #12
   1fdc8:	436a      	muls	r2, r5
   1fdca:	eb09 0302 	add.w	r3, r9, r2
   1fdce:	7a59      	ldrb	r1, [r3, #9]
		if (!already_started) {
   1fdd0:	b991      	cbnz	r1, 1fdf8 <clock_async_start+0xac>
	__asm__ volatile(
   1fdd2:	f04f 0020 	mov.w	r0, #32
   1fdd6:	f3ef 8c11 	mrs	ip, BASEPRI
   1fdda:	f380 8811 	msr	BASEPRI, r0
   1fdde:	f3bf 8f6f 	isb	sy
	parent->next = child;
   1fde2:	6021      	str	r1, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   1fde4:	6858      	ldr	r0, [r3, #4]
   1fde6:	2800      	cmp	r0, #0
   1fde8:	d13a      	bne.n	1fe60 <clock_async_start+0x114>
	list->tail = node;
   1fdea:	605c      	str	r4, [r3, #4]
	list->head = node;
   1fdec:	f849 4002 	str.w	r4, [r9, r2]
	__asm__ volatile(
   1fdf0:	f38c 8811 	msr	BASEPRI, ip
   1fdf4:	f3bf 8f6f 	isb	sy
    p_reg->INTENSET = mask;
   1fdf8:	2203      	movs	r2, #3
   1fdfa:	4b25      	ldr	r3, [pc, #148]	; (1fe90 <clock_async_start+0x144>)
   1fdfc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		if (already_started) {
   1fe00:	b119      	cbz	r1, 1fe0a <clock_async_start+0xbe>
			data->cb(dev, data->user_data);
   1fe02:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   1fe06:	4630      	mov	r0, r6
   1fe08:	4798      	blx	r3
	if (ref == 1) {
   1fe0a:	2f01      	cmp	r7, #1
   1fe0c:	d10c      	bne.n	1fe28 <clock_async_start+0xdc>
		do_start =  (config->start_handler) ?
   1fe0e:	012f      	lsls	r7, r5, #4
   1fe10:	f858 3007 	ldr.w	r3, [r8, r7]
				config->start_handler(dev) : true;
   1fe14:	bb3b      	cbnz	r3, 1fe66 <clock_async_start+0x11a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1fe16:	2201      	movs	r2, #1
			nrf_clock_task_trigger(NRF_CLOCK,
   1fe18:	44b8      	add	r8, r7
   1fe1a:	f898 300a 	ldrb.w	r3, [r8, #10]
   1fe1e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1fe22:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   1fe26:	601a      	str	r2, [r3, #0]
	return 0;
   1fe28:	2000      	movs	r0, #0
   1fe2a:	e027      	b.n	1fe7c <clock_async_start+0x130>
	__ASSERT_NO_MSG((data == NULL) ||
   1fe2c:	6863      	ldr	r3, [r4, #4]
   1fe2e:	b95b      	cbnz	r3, 1fe48 <clock_async_start+0xfc>
   1fe30:	4918      	ldr	r1, [pc, #96]	; (1fe94 <clock_async_start+0x148>)
   1fe32:	4814      	ldr	r0, [pc, #80]	; (1fe84 <clock_async_start+0x138>)
   1fe34:	f240 1301 	movw	r3, #257	; 0x101
   1fe38:	4a13      	ldr	r2, [pc, #76]	; (1fe88 <clock_async_start+0x13c>)
   1fe3a:	f013 fb6c 	bl	33516 <printk>
   1fe3e:	f240 1101 	movw	r1, #257	; 0x101
   1fe42:	4811      	ldr	r0, [pc, #68]	; (1fe88 <clock_async_start+0x13c>)
   1fe44:	f013 fbad 	bl	335a2 <assert_post_action>
	sys_snode_t *item = sys_slist_peek_head(list);
   1fe48:	230c      	movs	r3, #12
   1fe4a:	436b      	muls	r3, r5
   1fe4c:	f859 3003 	ldr.w	r3, [r9, r3]
		if (item == node) {
   1fe50:	429c      	cmp	r4, r3
   1fe52:	d011      	beq.n	1fe78 <clock_async_start+0x12c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1fe54:	2b00      	cmp	r3, #0
   1fe56:	d091      	beq.n	1fd7c <clock_async_start+0x30>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1fe58:	681b      	ldr	r3, [r3, #0]
	} while (item);
   1fe5a:	2b00      	cmp	r3, #0
   1fe5c:	d1f8      	bne.n	1fe50 <clock_async_start+0x104>
   1fe5e:	e78d      	b.n	1fd7c <clock_async_start+0x30>
	parent->next = child;
   1fe60:	6004      	str	r4, [r0, #0]
	list->tail = node;
   1fe62:	605c      	str	r4, [r3, #4]
}
   1fe64:	e7c4      	b.n	1fdf0 <clock_async_start+0xa4>
				config->start_handler(dev) : true;
   1fe66:	4630      	mov	r0, r6
   1fe68:	4798      	blx	r3
   1fe6a:	2800      	cmp	r0, #0
   1fe6c:	d1d3      	bne.n	1fe16 <clock_async_start+0xca>
			clkstarted_handle(dev, type);
   1fe6e:	4629      	mov	r1, r5
   1fe70:	4630      	mov	r0, r6
   1fe72:	f013 feb6 	bl	33be2 <clkstarted_handle>
   1fe76:	e7d7      	b.n	1fe28 <clock_async_start+0xdc>
		return -EBUSY;
   1fe78:	f06f 000f 	mvn.w	r0, #15
}
   1fe7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1fe80:	000381da 	.word	0x000381da
   1fe84:	00037a66 	.word	0x00037a66
   1fe88:	0003819f 	.word	0x0003819f
   1fe8c:	0003824c 	.word	0x0003824c
   1fe90:	40005000 	.word	0x40005000
   1fe94:	000381fe 	.word	0x000381fe

0001fe98 <clock_stop>:
{
   1fe98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1fe9c:	b2cc      	uxtb	r4, r1
   1fe9e:	2c01      	cmp	r4, #1
{
   1fea0:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1fea2:	d909      	bls.n	1feb8 <clock_stop+0x20>
   1fea4:	4925      	ldr	r1, [pc, #148]	; (1ff3c <clock_stop+0xa4>)
   1fea6:	4826      	ldr	r0, [pc, #152]	; (1ff40 <clock_stop+0xa8>)
   1fea8:	2399      	movs	r3, #153	; 0x99
   1feaa:	4a26      	ldr	r2, [pc, #152]	; (1ff44 <clock_stop+0xac>)
   1feac:	f013 fb33 	bl	33516 <printk>
   1feb0:	2199      	movs	r1, #153	; 0x99
   1feb2:	4824      	ldr	r0, [pc, #144]	; (1ff44 <clock_stop+0xac>)
   1feb4:	f013 fb75 	bl	335a2 <assert_post_action>
	const struct nrf_clock_control_config *config =
   1feb8:	682b      	ldr	r3, [r5, #0]
	data = get_sub_data(dev, type);
   1feba:	68af      	ldr	r7, [r5, #8]
	const struct nrf_clock_control_config *config =
   1febc:	f8d3 9008 	ldr.w	r9, [r3, #8]
	__asm__ volatile(
   1fec0:	f04f 0320 	mov.w	r3, #32
   1fec4:	f3ef 8611 	mrs	r6, BASEPRI
   1fec8:	f383 8811 	msr	BASEPRI, r3
   1fecc:	f3bf 8f6f 	isb	sy
	if (data->ref == 0) {
   1fed0:	210c      	movs	r1, #12
   1fed2:	4361      	muls	r1, r4
   1fed4:	187a      	adds	r2, r7, r1
   1fed6:	7a13      	ldrb	r3, [r2, #8]
   1fed8:	b35b      	cbz	r3, 1ff32 <clock_stop+0x9a>
	data->ref--;
   1feda:	3b01      	subs	r3, #1
   1fedc:	b2db      	uxtb	r3, r3
   1fede:	7213      	strb	r3, [r2, #8]
	if (data->ref == 0) {
   1fee0:	bb53      	cbnz	r3, 1ff38 <clock_stop+0xa0>
	list->head = NULL;
   1fee2:	507b      	str	r3, [r7, r1]
	list->tail = NULL;
   1fee4:	6053      	str	r3, [r2, #4]
		do_stop =  (config->stop_handler) ?
   1fee6:	eb09 1304 	add.w	r3, r9, r4, lsl #4
   1feea:	685b      	ldr	r3, [r3, #4]
   1feec:	ea4f 1804 	mov.w	r8, r4, lsl #4
				config->stop_handler(dev) : true;
   1fef0:	b9d3      	cbnz	r3, 1ff28 <clock_stop+0x90>
   1fef2:	2101      	movs	r1, #1
			nrf_clock_task_trigger(NRF_CLOCK, config->stop_tsk);
   1fef4:	eb09 0208 	add.w	r2, r9, r8
   1fef8:	7ad3      	ldrb	r3, [r2, #11]
   1fefa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1fefe:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   1ff02:	6019      	str	r1, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ff04:	8913      	ldrh	r3, [r2, #8]
   1ff06:	2200      	movs	r2, #0
   1ff08:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1ff0c:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   1ff10:	601a      	str	r2, [r3, #0]
		data->started = false;
   1ff12:	210c      	movs	r1, #12
   1ff14:	2000      	movs	r0, #0
   1ff16:	fb04 7401 	mla	r4, r4, r1, r7
   1ff1a:	7260      	strb	r0, [r4, #9]
	__asm__ volatile(
   1ff1c:	f386 8811 	msr	BASEPRI, r6
   1ff20:	f3bf 8f6f 	isb	sy
}
   1ff24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				config->stop_handler(dev) : true;
   1ff28:	4628      	mov	r0, r5
   1ff2a:	4798      	blx	r3
   1ff2c:	2800      	cmp	r0, #0
   1ff2e:	d1e0      	bne.n	1fef2 <clock_stop+0x5a>
   1ff30:	e7ef      	b.n	1ff12 <clock_stop+0x7a>
		err = -EALREADY;
   1ff32:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1ff36:	e7f1      	b.n	1ff1c <clock_stop+0x84>
	int err = 0;
   1ff38:	2000      	movs	r0, #0
   1ff3a:	e7ef      	b.n	1ff1c <clock_stop+0x84>
   1ff3c:	000381da 	.word	0x000381da
   1ff40:	00037a66 	.word	0x00037a66
   1ff44:	0003819f 	.word	0x0003819f

0001ff48 <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
   1ff48:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1ff4a:	4b10      	ldr	r3, [pc, #64]	; (1ff8c <nrf_power_clock_isr+0x44>)
   1ff4c:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
   1ff4e:	b162      	cbz	r2, 1ff6a <nrf_power_clock_isr+0x22>
    return p_reg->INTENSET & mask;
   1ff50:	4a0f      	ldr	r2, [pc, #60]	; (1ff90 <nrf_power_clock_isr+0x48>)
   1ff52:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
   1ff56:	07d1      	lsls	r1, r2, #31
   1ff58:	d507      	bpl.n	1ff6a <nrf_power_clock_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ff5a:	2200      	movs	r2, #0
	struct device *dev = DEVICE_GET(clock_nrf);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   1ff5c:	480d      	ldr	r0, [pc, #52]	; (1ff94 <nrf_power_clock_isr+0x4c>)
   1ff5e:	601a      	str	r2, [r3, #0]

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
   1ff60:	6883      	ldr	r3, [r0, #8]
   1ff62:	7a59      	ldrb	r1, [r3, #9]
   1ff64:	b909      	cbnz	r1, 1ff6a <nrf_power_clock_isr+0x22>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   1ff66:	f013 fe3c 	bl	33be2 <clkstarted_handle>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1ff6a:	4b0b      	ldr	r3, [pc, #44]	; (1ff98 <nrf_power_clock_isr+0x50>)
   1ff6c:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
   1ff6e:	b162      	cbz	r2, 1ff8a <nrf_power_clock_isr+0x42>
    return p_reg->INTENSET & mask;
   1ff70:	4a07      	ldr	r2, [pc, #28]	; (1ff90 <nrf_power_clock_isr+0x48>)
   1ff72:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
   1ff76:	0792      	lsls	r2, r2, #30
   1ff78:	d507      	bpl.n	1ff8a <nrf_power_clock_isr+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ff7a:	2200      	movs	r2, #0
					NRF_CLOCK_INT_LF_STARTED_MASK)) {
		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started(dev);
		}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1ff7c:	2101      	movs	r1, #1
   1ff7e:	601a      	str	r2, [r3, #0]
   1ff80:	4804      	ldr	r0, [pc, #16]	; (1ff94 <nrf_power_clock_isr+0x4c>)
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
   1ff82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1ff86:	f013 be2c 	b.w	33be2 <clkstarted_handle>
}
   1ff8a:	bd08      	pop	{r3, pc}
   1ff8c:	40005100 	.word	0x40005100
   1ff90:	40005000 	.word	0x40005000
   1ff94:	200297c0 	.word	0x200297c0
   1ff98:	40005104 	.word	0x40005104

0001ff9c <z_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
   1ff9c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
   1ff9e:	4c06      	ldr	r4, [pc, #24]	; (1ffb8 <z_clock_isr+0x1c>)
   1ffa0:	4906      	ldr	r1, [pc, #24]	; (1ffbc <z_clock_isr+0x20>)
   1ffa2:	4622      	mov	r2, r4
   1ffa4:	4806      	ldr	r0, [pc, #24]	; (1ffc0 <z_clock_isr+0x24>)
   1ffa6:	2317      	movs	r3, #23
   1ffa8:	f013 fab5 	bl	33516 <printk>
   1ffac:	4620      	mov	r0, r4
}
   1ffae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
   1ffb2:	2117      	movs	r1, #23
   1ffb4:	f013 baf5 	b.w	335a2 <assert_post_action>
   1ffb8:	0003827e 	.word	0x0003827e
   1ffbc:	0003afd7 	.word	0x0003afd7
   1ffc0:	00037a66 	.word	0x00037a66

0001ffc4 <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
   1ffc4:	2200      	movs	r2, #0
{
   1ffc6:	b538      	push	{r3, r4, r5, lr}
	RTC->EVENTS_COMPARE[0] = 0;
   1ffc8:	4b22      	ldr	r3, [pc, #136]	; (20054 <__kernel_ram_size+0x54>)
   1ffca:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
   1ffce:	f04f 0320 	mov.w	r3, #32
   1ffd2:	f3ef 8511 	mrs	r5, BASEPRI
   1ffd6:	f383 8811 	msr	BASEPRI, r3
   1ffda:	f3bf 8f6f 	isb	sy
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();

#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ffde:	481e      	ldr	r0, [pc, #120]	; (20058 <__kernel_ram_size+0x58>)
   1ffe0:	f010 fcd0 	bl	30984 <z_spin_lock_valid>
   1ffe4:	b968      	cbnz	r0, 20002 <__kernel_ram_size+0x2>
   1ffe6:	234a      	movs	r3, #74	; 0x4a
   1ffe8:	4a1c      	ldr	r2, [pc, #112]	; (2005c <__kernel_ram_size+0x5c>)
   1ffea:	491d      	ldr	r1, [pc, #116]	; (20060 <__kernel_ram_size+0x60>)
   1ffec:	481d      	ldr	r0, [pc, #116]	; (20064 <__kernel_ram_size+0x64>)
   1ffee:	f013 fa92 	bl	33516 <printk>
   1fff2:	4919      	ldr	r1, [pc, #100]	; (20058 <__kernel_ram_size+0x58>)
   1fff4:	481c      	ldr	r0, [pc, #112]	; (20068 <__kernel_ram_size+0x68>)
   1fff6:	f013 fa8e 	bl	33516 <printk>
   1fffa:	214a      	movs	r1, #74	; 0x4a
   1fffc:	4817      	ldr	r0, [pc, #92]	; (2005c <__kernel_ram_size+0x5c>)
   1fffe:	f013 fad0 	bl	335a2 <assert_post_action>
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
   20002:	4815      	ldr	r0, [pc, #84]	; (20058 <__kernel_ram_size+0x58>)
   20004:	f010 fcdc 	bl	309c0 <z_spin_lock_set_owner>
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   20008:	4b12      	ldr	r3, [pc, #72]	; (20054 <__kernel_ram_size+0x54>)

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
   2000a:	4a18      	ldr	r2, [pc, #96]	; (2006c <__kernel_ram_size+0x6c>)
   2000c:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
   20010:	6813      	ldr	r3, [r2, #0]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20012:	4811      	ldr	r0, [pc, #68]	; (20058 <__kernel_ram_size+0x58>)
	return (a - b) & COUNTER_MAX;
   20014:	1ae4      	subs	r4, r4, r3
   20016:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   2001a:	4423      	add	r3, r4
   2001c:	6013      	str	r3, [r2, #0]
   2001e:	f010 fcbf 	bl	309a0 <z_spin_unlock_valid>
   20022:	b968      	cbnz	r0, 20040 <__kernel_ram_size+0x40>
   20024:	235d      	movs	r3, #93	; 0x5d
   20026:	4a0d      	ldr	r2, [pc, #52]	; (2005c <__kernel_ram_size+0x5c>)
   20028:	4911      	ldr	r1, [pc, #68]	; (20070 <__kernel_ram_size+0x70>)
   2002a:	480e      	ldr	r0, [pc, #56]	; (20064 <__kernel_ram_size+0x64>)
   2002c:	f013 fa73 	bl	33516 <printk>
   20030:	4909      	ldr	r1, [pc, #36]	; (20058 <__kernel_ram_size+0x58>)
   20032:	4810      	ldr	r0, [pc, #64]	; (20074 <__kernel_ram_size+0x74>)
   20034:	f013 fa6f 	bl	33516 <printk>
   20038:	215d      	movs	r1, #93	; 0x5d
   2003a:	4808      	ldr	r0, [pc, #32]	; (2005c <__kernel_ram_size+0x5c>)
   2003c:	f013 fab1 	bl	335a2 <assert_post_action>
	__asm__ volatile(
   20040:	f385 8811 	msr	BASEPRI, r5
   20044:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
   20048:	4620      	mov	r0, r4
}
   2004a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
   2004e:	f011 b8ef 	b.w	31230 <z_clock_announce>
   20052:	bf00      	nop
   20054:	40015000 	.word	0x40015000
   20058:	2002216c 	.word	0x2002216c
   2005c:	000382ba 	.word	0x000382ba
   20060:	000382e0 	.word	0x000382e0
   20064:	00037a66 	.word	0x00037a66
   20068:	000382f5 	.word	0x000382f5
   2006c:	20022168 	.word	0x20022168
   20070:	0003830d 	.word	0x0003830d
   20074:	00038324 	.word	0x00038324

00020078 <z_clock_driver_init>:

int z_clock_driver_init(struct device *device)
{
   20078:	b570      	push	{r4, r5, r6, lr}
   2007a:	4815      	ldr	r0, [pc, #84]	; (200d0 <z_clock_driver_init+0x58>)
   2007c:	f00e fa8c 	bl	2e598 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL);
	if (!clock) {
   20080:	b310      	cbz	r0, 200c8 <z_clock_driver_init+0x50>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
   20082:	6843      	ldr	r3, [r0, #4]
   20084:	2101      	movs	r1, #1
   20086:	681b      	ldr	r3, [r3, #0]
   20088:	4798      	blx	r3
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
   2008a:	2400      	movs	r4, #0
    p_reg->CC[ch] = cc_val;
   2008c:	2601      	movs	r6, #1
    p_reg->INTENSET = mask;
   2008e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   20092:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
   20096:	4d0f      	ldr	r5, [pc, #60]	; (200d4 <z_clock_driver_init+0x5c>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
   20098:	4631      	mov	r1, r6
   2009a:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
   2009e:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
   200a2:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   200a6:	4b0c      	ldr	r3, [pc, #48]	; (200d8 <z_clock_driver_init+0x60>)
   200a8:	2015      	movs	r0, #21
   200aa:	601c      	str	r4, [r3, #0]
   200ac:	4b0b      	ldr	r3, [pc, #44]	; (200dc <z_clock_driver_init+0x64>)
   200ae:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   200b2:	4622      	mov	r2, r4
   200b4:	f000 f9f0 	bl	20498 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
   200b8:	2015      	movs	r0, #21
   200ba:	f000 f9dd 	bl	20478 <arch_irq_enable>

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
   200be:	4620      	mov	r0, r4
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   200c0:	4b07      	ldr	r3, [pc, #28]	; (200e0 <z_clock_driver_init+0x68>)
   200c2:	601e      	str	r6, [r3, #0]
   200c4:	602e      	str	r6, [r5, #0]
}
   200c6:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
   200c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   200cc:	e7fb      	b.n	200c6 <z_clock_driver_init+0x4e>
   200ce:	bf00      	nop
   200d0:	0003825e 	.word	0x0003825e
   200d4:	40015000 	.word	0x40015000
   200d8:	40015140 	.word	0x40015140
   200dc:	e000e100 	.word	0xe000e100
   200e0:	40015008 	.word	0x40015008

000200e4 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
   200e4:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
   200e6:	4e3a      	ldr	r6, [pc, #232]	; (201d0 <z_clock_set_timeout+0xec>)
   200e8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   200ec:	bf18      	it	ne
   200ee:	4606      	movne	r6, r0
	__asm__ volatile(
   200f0:	f04f 0320 	mov.w	r3, #32
   200f4:	f3ef 8411 	mrs	r4, BASEPRI
   200f8:	f383 8811 	msr	BASEPRI, r3
   200fc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20100:	4834      	ldr	r0, [pc, #208]	; (201d4 <z_clock_set_timeout+0xf0>)
   20102:	f010 fc3f 	bl	30984 <z_spin_lock_valid>
   20106:	b968      	cbnz	r0, 20124 <z_clock_set_timeout+0x40>
   20108:	234a      	movs	r3, #74	; 0x4a
   2010a:	4a33      	ldr	r2, [pc, #204]	; (201d8 <z_clock_set_timeout+0xf4>)
   2010c:	4933      	ldr	r1, [pc, #204]	; (201dc <z_clock_set_timeout+0xf8>)
   2010e:	4834      	ldr	r0, [pc, #208]	; (201e0 <z_clock_set_timeout+0xfc>)
   20110:	f013 fa01 	bl	33516 <printk>
   20114:	492f      	ldr	r1, [pc, #188]	; (201d4 <z_clock_set_timeout+0xf0>)
   20116:	4833      	ldr	r0, [pc, #204]	; (201e4 <z_clock_set_timeout+0x100>)
   20118:	f013 f9fd 	bl	33516 <printk>
   2011c:	214a      	movs	r1, #74	; 0x4a
   2011e:	482e      	ldr	r0, [pc, #184]	; (201d8 <z_clock_set_timeout+0xf4>)
   20120:	f013 fa3f 	bl	335a2 <assert_post_action>
	z_spin_lock_set_owner(l);
   20124:	482b      	ldr	r0, [pc, #172]	; (201d4 <z_clock_set_timeout+0xf0>)
   20126:	f010 fc4b 	bl	309c0 <z_spin_lock_set_owner>
     return p_reg->COUNTER;
   2012a:	4b2f      	ldr	r3, [pc, #188]	; (201e8 <z_clock_set_timeout+0x104>)
   2012c:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, dt, t = counter();
	u32_t unannounced = counter_sub(t, last_count);
   20130:	4b2e      	ldr	r3, [pc, #184]	; (201ec <z_clock_set_timeout+0x108>)
   20132:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
   20134:	1ad5      	subs	r5, r2, r3
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
   20136:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
   2013a:	f025 417f 	bic.w	r1, r5, #4278190080	; 0xff000000
	if (unannounced >= COUNTER_HALF_SPAN) {
   2013e:	4d24      	ldr	r5, [pc, #144]	; (201d0 <z_clock_set_timeout+0xec>)
   20140:	d12c      	bne.n	2019c <z_clock_set_timeout+0xb8>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
   20142:	1e70      	subs	r0, r6, #1
   20144:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   20148:	42a8      	cmp	r0, r5
   2014a:	bfa8      	it	ge
   2014c:	4628      	movge	r0, r5
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   2014e:	3101      	adds	r1, #1
   20150:	4408      	add	r0, r1
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
   20152:	42a8      	cmp	r0, r5
   20154:	bf94      	ite	ls
   20156:	181b      	addls	r3, r3, r0
   20158:	195b      	addhi	r3, r3, r5
	return (a - b) & COUNTER_MAX;
   2015a:	1a9a      	subs	r2, r3, r2
   2015c:	4922      	ldr	r1, [pc, #136]	; (201e8 <z_clock_set_timeout+0x104>)
   2015e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   20162:	f023 407f 	bic.w	r0, r3, #4278190080	; 0xff000000
	 * least on nRF52.  Some experimentation on nrf52840 shows
	 * that you need to be early by about 400 processor cycles
	 * (about 1/5th of a RTC cycle) in order to reliably get the
	 * interrupt.  The docs say two cycles, they mean two cycles.
	 */
	if (counter_sub(cyc, t) > 2) {
   20166:	2a02      	cmp	r2, #2
    p_reg->CC[ch] = cc_val;
   20168:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
   2016c:	d918      	bls.n	201a0 <z_clock_set_timeout+0xbc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2016e:	4819      	ldr	r0, [pc, #100]	; (201d4 <z_clock_set_timeout+0xf0>)
   20170:	f010 fc16 	bl	309a0 <z_spin_unlock_valid>
   20174:	b968      	cbnz	r0, 20192 <z_clock_set_timeout+0xae>
   20176:	235d      	movs	r3, #93	; 0x5d
   20178:	4a17      	ldr	r2, [pc, #92]	; (201d8 <z_clock_set_timeout+0xf4>)
   2017a:	491d      	ldr	r1, [pc, #116]	; (201f0 <z_clock_set_timeout+0x10c>)
   2017c:	4818      	ldr	r0, [pc, #96]	; (201e0 <z_clock_set_timeout+0xfc>)
   2017e:	f013 f9ca 	bl	33516 <printk>
   20182:	4914      	ldr	r1, [pc, #80]	; (201d4 <z_clock_set_timeout+0xf0>)
   20184:	481b      	ldr	r0, [pc, #108]	; (201f4 <z_clock_set_timeout+0x110>)
   20186:	f013 f9c6 	bl	33516 <printk>
   2018a:	215d      	movs	r1, #93	; 0x5d
   2018c:	4812      	ldr	r0, [pc, #72]	; (201d8 <z_clock_set_timeout+0xf4>)
   2018e:	f013 fa08 	bl	335a2 <assert_post_action>
	__asm__ volatile(
   20192:	f384 8811 	msr	BASEPRI, r4
   20196:	f3bf 8f6f 	isb	sy
	}
#endif

	k_spin_unlock(&lock, key);
#endif /* CONFIG_TICKLESS_KERNEL */
}
   2019a:	bd70      	pop	{r4, r5, r6, pc}
		ticks = 0;
   2019c:	2000      	movs	r0, #0
   2019e:	e7d6      	b.n	2014e <z_clock_set_timeout+0x6a>
     return p_reg->COUNTER;
   201a0:	f8d1 2504 	ldr.w	r2, [r1, #1284]	; 0x504
		if (dt == 0 || dt > 0x7fffff) {
   201a4:	4814      	ldr	r0, [pc, #80]	; (201f8 <z_clock_set_timeout+0x114>)
	return (a - b) & COUNTER_MAX;
   201a6:	1a9a      	subs	r2, r3, r2
   201a8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (dt == 0 || dt > 0x7fffff) {
   201ac:	1e55      	subs	r5, r2, #1
   201ae:	4285      	cmp	r5, r0
   201b0:	d905      	bls.n	201be <z_clock_set_timeout+0xda>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   201b2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   201b6:	4b11      	ldr	r3, [pc, #68]	; (201fc <z_clock_set_timeout+0x118>)
   201b8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   201bc:	e7d7      	b.n	2016e <z_clock_set_timeout+0x8a>
		} else if (dt == 1) {
   201be:	2a01      	cmp	r2, #1
			set_comparator(cyc + 2);
   201c0:	bf02      	ittt	eq
   201c2:	3302      	addeq	r3, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   201c4:	f023 437f 	biceq.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   201c8:	f8c1 3540 	streq.w	r3, [r1, #1344]	; 0x540
}
   201cc:	e7cf      	b.n	2016e <z_clock_set_timeout+0x8a>
   201ce:	bf00      	nop
   201d0:	00fffffe 	.word	0x00fffffe
   201d4:	2002216c 	.word	0x2002216c
   201d8:	000382ba 	.word	0x000382ba
   201dc:	000382e0 	.word	0x000382e0
   201e0:	00037a66 	.word	0x00037a66
   201e4:	000382f5 	.word	0x000382f5
   201e8:	40015000 	.word	0x40015000
   201ec:	20022168 	.word	0x20022168
   201f0:	0003830d 	.word	0x0003830d
   201f4:	00038324 	.word	0x00038324
   201f8:	007ffffe 	.word	0x007ffffe
   201fc:	e000e100 	.word	0xe000e100

00020200 <z_clock_elapsed>:

u32_t z_clock_elapsed(void)
{
   20200:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   20202:	f04f 0320 	mov.w	r3, #32
   20206:	f3ef 8511 	mrs	r5, BASEPRI
   2020a:	f383 8811 	msr	BASEPRI, r3
   2020e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20212:	481a      	ldr	r0, [pc, #104]	; (2027c <z_clock_elapsed+0x7c>)
   20214:	f010 fbb6 	bl	30984 <z_spin_lock_valid>
   20218:	b968      	cbnz	r0, 20236 <z_clock_elapsed+0x36>
   2021a:	234a      	movs	r3, #74	; 0x4a
   2021c:	4a18      	ldr	r2, [pc, #96]	; (20280 <z_clock_elapsed+0x80>)
   2021e:	4919      	ldr	r1, [pc, #100]	; (20284 <z_clock_elapsed+0x84>)
   20220:	4819      	ldr	r0, [pc, #100]	; (20288 <z_clock_elapsed+0x88>)
   20222:	f013 f978 	bl	33516 <printk>
   20226:	4915      	ldr	r1, [pc, #84]	; (2027c <z_clock_elapsed+0x7c>)
   20228:	4818      	ldr	r0, [pc, #96]	; (2028c <z_clock_elapsed+0x8c>)
   2022a:	f013 f974 	bl	33516 <printk>
   2022e:	214a      	movs	r1, #74	; 0x4a
   20230:	4813      	ldr	r0, [pc, #76]	; (20280 <z_clock_elapsed+0x80>)
   20232:	f013 f9b6 	bl	335a2 <assert_post_action>
	z_spin_lock_set_owner(l);
   20236:	4811      	ldr	r0, [pc, #68]	; (2027c <z_clock_elapsed+0x7c>)
   20238:	f010 fbc2 	bl	309c0 <z_spin_lock_set_owner>
     return p_reg->COUNTER;
   2023c:	4b14      	ldr	r3, [pc, #80]	; (20290 <z_clock_elapsed+0x90>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2023e:	480f      	ldr	r0, [pc, #60]	; (2027c <z_clock_elapsed+0x7c>)
   20240:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
   20244:	4b13      	ldr	r3, [pc, #76]	; (20294 <z_clock_elapsed+0x94>)
	return (a - b) & COUNTER_MAX;
   20246:	681b      	ldr	r3, [r3, #0]
   20248:	1ae4      	subs	r4, r4, r3
   2024a:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
   2024e:	f010 fba7 	bl	309a0 <z_spin_unlock_valid>
   20252:	b968      	cbnz	r0, 20270 <z_clock_elapsed+0x70>
   20254:	235d      	movs	r3, #93	; 0x5d
   20256:	4a0a      	ldr	r2, [pc, #40]	; (20280 <z_clock_elapsed+0x80>)
   20258:	490f      	ldr	r1, [pc, #60]	; (20298 <z_clock_elapsed+0x98>)
   2025a:	480b      	ldr	r0, [pc, #44]	; (20288 <z_clock_elapsed+0x88>)
   2025c:	f013 f95b 	bl	33516 <printk>
   20260:	4906      	ldr	r1, [pc, #24]	; (2027c <z_clock_elapsed+0x7c>)
   20262:	480e      	ldr	r0, [pc, #56]	; (2029c <z_clock_elapsed+0x9c>)
   20264:	f013 f957 	bl	33516 <printk>
   20268:	215d      	movs	r1, #93	; 0x5d
   2026a:	4805      	ldr	r0, [pc, #20]	; (20280 <z_clock_elapsed+0x80>)
   2026c:	f013 f999 	bl	335a2 <assert_post_action>
	__asm__ volatile(
   20270:	f385 8811 	msr	BASEPRI, r5
   20274:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   20278:	4620      	mov	r0, r4
   2027a:	bd38      	pop	{r3, r4, r5, pc}
   2027c:	2002216c 	.word	0x2002216c
   20280:	000382ba 	.word	0x000382ba
   20284:	000382e0 	.word	0x000382e0
   20288:	00037a66 	.word	0x00037a66
   2028c:	000382f5 	.word	0x000382f5
   20290:	40015000 	.word	0x40015000
   20294:	20022168 	.word	0x20022168
   20298:	0003830d 	.word	0x0003830d
   2029c:	00038324 	.word	0x00038324

000202a0 <z_timer_cycle_get_32>:

u32_t z_timer_cycle_get_32(void)
{
   202a0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   202a2:	f04f 0320 	mov.w	r3, #32
   202a6:	f3ef 8511 	mrs	r5, BASEPRI
   202aa:	f383 8811 	msr	BASEPRI, r3
   202ae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   202b2:	481b      	ldr	r0, [pc, #108]	; (20320 <z_timer_cycle_get_32+0x80>)
   202b4:	f010 fb66 	bl	30984 <z_spin_lock_valid>
   202b8:	b968      	cbnz	r0, 202d6 <z_timer_cycle_get_32+0x36>
   202ba:	234a      	movs	r3, #74	; 0x4a
   202bc:	4a19      	ldr	r2, [pc, #100]	; (20324 <z_timer_cycle_get_32+0x84>)
   202be:	491a      	ldr	r1, [pc, #104]	; (20328 <z_timer_cycle_get_32+0x88>)
   202c0:	481a      	ldr	r0, [pc, #104]	; (2032c <z_timer_cycle_get_32+0x8c>)
   202c2:	f013 f928 	bl	33516 <printk>
   202c6:	4916      	ldr	r1, [pc, #88]	; (20320 <z_timer_cycle_get_32+0x80>)
   202c8:	4819      	ldr	r0, [pc, #100]	; (20330 <z_timer_cycle_get_32+0x90>)
   202ca:	f013 f924 	bl	33516 <printk>
   202ce:	214a      	movs	r1, #74	; 0x4a
   202d0:	4814      	ldr	r0, [pc, #80]	; (20324 <z_timer_cycle_get_32+0x84>)
   202d2:	f013 f966 	bl	335a2 <assert_post_action>
	z_spin_lock_set_owner(l);
   202d6:	4812      	ldr	r0, [pc, #72]	; (20320 <z_timer_cycle_get_32+0x80>)
   202d8:	f010 fb72 	bl	309c0 <z_spin_lock_set_owner>
   202dc:	4b15      	ldr	r3, [pc, #84]	; (20334 <z_timer_cycle_get_32+0x94>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   202de:	4810      	ldr	r0, [pc, #64]	; (20320 <z_timer_cycle_get_32+0x80>)
   202e0:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
   202e4:	4b14      	ldr	r3, [pc, #80]	; (20338 <z_timer_cycle_get_32+0x98>)
   202e6:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
   202e8:	1ae4      	subs	r4, r4, r3
   202ea:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	u32_t ret = counter_sub(counter(), last_count) + last_count;
   202ee:	441c      	add	r4, r3
   202f0:	f010 fb56 	bl	309a0 <z_spin_unlock_valid>
   202f4:	b968      	cbnz	r0, 20312 <z_timer_cycle_get_32+0x72>
   202f6:	235d      	movs	r3, #93	; 0x5d
   202f8:	4a0a      	ldr	r2, [pc, #40]	; (20324 <z_timer_cycle_get_32+0x84>)
   202fa:	4910      	ldr	r1, [pc, #64]	; (2033c <z_timer_cycle_get_32+0x9c>)
   202fc:	480b      	ldr	r0, [pc, #44]	; (2032c <z_timer_cycle_get_32+0x8c>)
   202fe:	f013 f90a 	bl	33516 <printk>
   20302:	4907      	ldr	r1, [pc, #28]	; (20320 <z_timer_cycle_get_32+0x80>)
   20304:	480e      	ldr	r0, [pc, #56]	; (20340 <z_timer_cycle_get_32+0xa0>)
   20306:	f013 f906 	bl	33516 <printk>
   2030a:	215d      	movs	r1, #93	; 0x5d
   2030c:	4805      	ldr	r0, [pc, #20]	; (20324 <z_timer_cycle_get_32+0x84>)
   2030e:	f013 f948 	bl	335a2 <assert_post_action>
	__asm__ volatile(
   20312:	f385 8811 	msr	BASEPRI, r5
   20316:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   2031a:	4620      	mov	r0, r4
   2031c:	bd38      	pop	{r3, r4, r5, pc}
   2031e:	bf00      	nop
   20320:	2002216c 	.word	0x2002216c
   20324:	000382ba 	.word	0x000382ba
   20328:	000382e0 	.word	0x000382e0
   2032c:	00037a66 	.word	0x00037a66
   20330:	000382f5 	.word	0x000382f5
   20334:	40015000 	.word	0x40015000
   20338:	20022168 	.word	0x20022168
   2033c:	0003830d 	.word	0x0003830d
   20340:	00038324 	.word	0x00038324

00020344 <z_arm_exc_exit>:
    /* r0 contains the caller mode */
    push {r0, lr}
#endif

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
   20344:	4804      	ldr	r0, [pc, #16]	; (20358 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
   20346:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
   20348:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
   2034a:	4288      	cmp	r0, r1
    beq _EXIT_EXC
   2034c:	d003      	beq.n	20356 <_EXIT_EXC>

#if defined(CONFIG_CPU_CORTEX_M)
    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
   2034e:	4903      	ldr	r1, [pc, #12]	; (2035c <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
   20350:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
   20354:	600a      	str	r2, [r1, #0]

00020356 <_EXIT_EXC>:
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
   20356:	4770      	bx	lr
    ldr r0, =_kernel
   20358:	20023ed0 	.word	0x20023ed0
    ldr r1, =_SCS_ICSR
   2035c:	e000ed04 	.word	0xe000ed04

00020360 <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
   20360:	4a09      	ldr	r2, [pc, #36]	; (20388 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   20362:	490a      	ldr	r1, [pc, #40]	; (2038c <arch_swap+0x2c>)
	_current->arch.basepri = key;
   20364:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   20366:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   20368:	6658      	str	r0, [r3, #100]	; 0x64
	_current->arch.swap_return_value = _k_neg_eagain;
   2036a:	6699      	str	r1, [r3, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   2036c:	4908      	ldr	r1, [pc, #32]	; (20390 <arch_swap+0x30>)
   2036e:	684b      	ldr	r3, [r1, #4]
   20370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   20374:	604b      	str	r3, [r1, #4]
   20376:	2300      	movs	r3, #0
   20378:	f383 8811 	msr	BASEPRI, r3
   2037c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   20380:	6893      	ldr	r3, [r2, #8]
}
   20382:	6e98      	ldr	r0, [r3, #104]	; 0x68
   20384:	4770      	bx	lr
   20386:	bf00      	nop
   20388:	20023ed0 	.word	0x20023ed0
   2038c:	000374f0 	.word	0x000374f0
   20390:	e000ed00 	.word	0xe000ed00

00020394 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   20394:	492e      	ldr	r1, [pc, #184]	; (20450 <in_fp_endif+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
   20396:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   20398:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
   2039c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   2039e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   203a2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    ldr r0, =0x10 /* EXC_RETURN.F_Type Mask */
   203a6:	f04f 0010 	mov.w	r0, #16
    tst lr, r0    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   203aa:	ea1e 0f00 	tst.w	lr, r0
    beq out_fp_active
   203ae:	d004      	beq.n	203ba <out_fp_active>
    /* FP context inactive: clear FP state */
    ldr r0, [r2, #_thread_offset_to_mode]
   203b0:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    bic r0, #0x4 /* _current->arch.mode &= ~(CONTROL_FPCA_Msk) */
   203b4:	f020 0004 	bic.w	r0, r0, #4
    b out_fp_endif
   203b8:	e007      	b.n	203ca <out_fp_endif>

000203ba <out_fp_active>:

out_fp_active:
    /* FP context active: set FP state and store callee-saved registers */
    add r0, r2, #_thread_offset_to_preempt_float
   203ba:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vstmia r0, {s16-s31}
   203be:	ec80 8a10 	vstmia	r0, {s16-s31}
    ldr r0, [r2, #_thread_offset_to_mode]
   203c2:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    orrs r0, r0, #0x4 /* _current->arch.mode |= CONTROL_FPCA_Msk */
   203c6:	f050 0004 	orrs.w	r0, r0, #4

000203ca <out_fp_endif>:

out_fp_endif:
    str r0, [r2, #_thread_offset_to_mode]
   203ca:	f8c2 00ac 	str.w	r0, [r2, #172]	; 0xac

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   203ce:	2020      	movs	r0, #32
    msr BASEPRI, r0
   203d0:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   203d4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   203d8:	4f1e      	ldr	r7, [pc, #120]	; (20454 <in_fp_endif+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   203da:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   203de:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
   203e0:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   203e2:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   203e4:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs r3, #0
   203e6:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   203e8:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   203ea:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    ldr r0, [r2, #_thread_offset_to_mode]
   203ee:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    tst r0, #0x04 /* thread.arch.mode & CONTROL.FPCA Msk */
   203f2:	f010 0f04 	tst.w	r0, #4
    bne in_fp_active
   203f6:	d105      	bne.n	20404 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
   203f8:	2300      	movs	r3, #0
    vmsr fpscr, r3
   203fa:	eee1 3a10 	vmsr	fpscr, r3
    orrs lr, lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   203fe:	f05e 0e10 	orrs.w	lr, lr, #16
    b in_fp_endif
   20402:	e005      	b.n	20410 <in_fp_endif>

00020404 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    bic lr, #0x10 /* EXC_RETURN | (~EXC_RETURN.F_Type_Msk) */
   20404:	f02e 0e10 	bic.w	lr, lr, #16
    add r0, r2, #_thread_offset_to_preempt_float
   20408:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vldmia r0, {s16-s31}
   2040c:	ec90 8a10 	vldmia	r0, {s16-s31}

00020410 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
   20410:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
   20414:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
   20418:	f383 8814 	msr	CONTROL, r3
    isb
   2041c:	f3bf 8f6f 	isb	sy
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
   20420:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   20422:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   20424:	f013 fc16 	bl	33c54 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   20428:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   2042c:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
   20430:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* clear stack pointer limit before setting the PSP */
    mov r0, #0
   20434:	f04f 0000 	mov.w	r0, #0
    msr PSPLIM, r0
   20438:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   2043c:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   20440:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   20444:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   20446:	f013 fbf6 	bl	33c36 <configure_builtin_stack_guard>
    pop {r2, lr}
   2044a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
   2044e:	4770      	bx	lr
    ldr r1, =_kernel
   20450:	20023ed0 	.word	0x20023ed0
    ldr v4, =_SCS_ICSR
   20454:	e000ed04 	.word	0xe000ed04

00020458 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   20458:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   2045c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   2045e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   20462:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   20466:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   20468:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   2046c:	2902      	cmp	r1, #2
    beq _oops
   2046e:	d0ff      	beq.n	20470 <_oops>

00020470 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   20470:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   20472:	f013 fbe4 	bl	33c3e <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   20476:	bd01      	pop	{r0, pc}

00020478 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   20478:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   2047a:	2b00      	cmp	r3, #0
   2047c:	db08      	blt.n	20490 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2047e:	2201      	movs	r2, #1
   20480:	f000 001f 	and.w	r0, r0, #31
   20484:	fa02 f000 	lsl.w	r0, r2, r0
   20488:	4a02      	ldr	r2, [pc, #8]	; (20494 <arch_irq_enable+0x1c>)
   2048a:	095b      	lsrs	r3, r3, #5
   2048c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   20490:	4770      	bx	lr
   20492:	bf00      	nop
   20494:	e000e100 	.word	0xe000e100

00020498 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, u32_t flags)
{
   20498:	b570      	push	{r4, r5, r6, lr}
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
   2049a:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
   2049c:	2c07      	cmp	r4, #7
{
   2049e:	4605      	mov	r5, r0
   204a0:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
   204a2:	d90e      	bls.n	204c2 <z_arm_irq_priority_set+0x2a>
   204a4:	235c      	movs	r3, #92	; 0x5c
   204a6:	4a10      	ldr	r2, [pc, #64]	; (204e8 <z_arm_irq_priority_set+0x50>)
   204a8:	4910      	ldr	r1, [pc, #64]	; (204ec <z_arm_irq_priority_set+0x54>)
   204aa:	4811      	ldr	r0, [pc, #68]	; (204f0 <z_arm_irq_priority_set+0x58>)
   204ac:	f013 f833 	bl	33516 <printk>
   204b0:	4631      	mov	r1, r6
   204b2:	4810      	ldr	r0, [pc, #64]	; (204f4 <z_arm_irq_priority_set+0x5c>)
   204b4:	2207      	movs	r2, #7
   204b6:	f013 f82e 	bl	33516 <printk>
   204ba:	215c      	movs	r1, #92	; 0x5c
   204bc:	480a      	ldr	r0, [pc, #40]	; (204e8 <z_arm_irq_priority_set+0x50>)
   204be:	f013 f870 	bl	335a2 <assert_post_action>
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   204c2:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   204c4:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   204c6:	bfac      	ite	ge
   204c8:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   204cc:	4b0a      	ldrlt	r3, [pc, #40]	; (204f8 <z_arm_irq_priority_set+0x60>)
   204ce:	ea4f 1444 	mov.w	r4, r4, lsl #5
   204d2:	b2e4      	uxtb	r4, r4
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   204d4:	bfab      	itete	ge
   204d6:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   204da:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   204de:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   204e2:	555c      	strblt	r4, [r3, r5]
}
   204e4:	bd70      	pop	{r4, r5, r6, pc}
   204e6:	bf00      	nop
   204e8:	00038339 	.word	0x00038339
   204ec:	0003836f 	.word	0x0003836f
   204f0:	00037a66 	.word	0x00037a66
   204f4:	0003838a 	.word	0x0003838a
   204f8:	e000ed14 	.word	0xe000ed14

000204fc <_arch_isr_direct_pm>:
	z_arm_reserved();
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
   204fc:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   204fe:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   20500:	4b04      	ldr	r3, [pc, #16]	; (20514 <_arch_isr_direct_pm+0x18>)
   20502:	6a18      	ldr	r0, [r3, #32]
   20504:	b118      	cbz	r0, 2050e <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
   20506:	2200      	movs	r2, #0
   20508:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
   2050a:	f015 f93e 	bl	3578a <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   2050e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   20510:	bd08      	pop	{r3, pc}
   20512:	bf00      	nop
   20514:	20023ed0 	.word	0x20023ed0

00020518 <arch_new_thread>:
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     size_t stackSize, k_thread_entry_t pEntry,
		     void *parameter1, void *parameter2, void *parameter3,
		     int priority, unsigned int options)
{
   20518:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2051c:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
   20520:	4605      	mov	r5, r0
	char *pStackMem = Z_THREAD_STACK_BUFFER(stack);
	char *stackEnd;
	/* Offset between the top of stack and the high end of stack area. */
	u32_t top_of_stack_offset = 0U;

	Z_ASSERT_VALID_PRIO(priority, pEntry);
   20522:	f1b9 0f0f 	cmp.w	r9, #15
{
   20526:	460f      	mov	r7, r1
   20528:	4690      	mov	r8, r2
   2052a:	461e      	mov	r6, r3
	Z_ASSERT_VALID_PRIO(priority, pEntry);
   2052c:	d126      	bne.n	2057c <arch_new_thread+0x64>
   2052e:	4b1e      	ldr	r3, [pc, #120]	; (205a8 <arch_new_thread+0x90>)
   20530:	429e      	cmp	r6, r3
   20532:	d127      	bne.n	20584 <arch_new_thread+0x6c>
#endif
	stackEnd = pStackMem + stackSize;

	struct __esf *pInitCtx;

	z_new_thread_init(thread, pStackMem, stackSize, priority,
   20534:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   20536:	4642      	mov	r2, r8
   20538:	9300      	str	r3, [sp, #0]
   2053a:	4639      	mov	r1, r7
   2053c:	464b      	mov	r3, r9
   2053e:	4628      	mov	r0, r5
   20540:	f015 f9d8 	bl	358f4 <z_new_thread_init>
	stackEnd = pStackMem + stackSize;
   20544:	eb07 0408 	add.w	r4, r7, r8
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
   20548:	4b18      	ldr	r3, [pc, #96]	; (205ac <arch_new_thread+0x94>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
   2054a:	f1a4 0220 	sub.w	r2, r4, #32
   2054e:	f022 0207 	bic.w	r2, r2, #7
	pInitCtx->basic.pc &= 0xfffffffe;
   20552:	f023 0301 	bic.w	r3, r3, #1
   20556:	6193      	str	r3, [r2, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
   20558:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	pInitCtx->basic.a1 = (u32_t)pEntry;
   2055a:	6016      	str	r6, [r2, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
   2055c:	6053      	str	r3, [r2, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
   2055e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   20560:	6093      	str	r3, [r2, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
   20562:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   20564:	60d3      	str	r3, [r2, #12]
	pInitCtx->basic.xpsr =
   20566:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   2056a:	61d3      	str	r3, [r2, #28]
#if defined(CONFIG_CPU_CORTEX_R)
	pInitCtx->basic.lr = (u32_t)pInitCtx->basic.pc;
	thread->callee_saved.spsr = A_BIT | T_BIT | MODE_SYS;
	thread->callee_saved.lr = (u32_t)pInitCtx->basic.pc;
#endif
	thread->arch.basepri = 0;
   2056c:	2300      	movs	r3, #0
	thread->callee_saved.psp = (u32_t)pInitCtx;
   2056e:	64aa      	str	r2, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
   20570:	666b      	str	r3, [r5, #100]	; 0x64

#if defined(CONFIG_USERSPACE) || defined(CONFIG_FP_SHARING)
	thread->arch.mode = 0;
   20572:	f8c5 30ac 	str.w	r3, [r5, #172]	; 0xac

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   20576:	b003      	add	sp, #12
   20578:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(priority, pEntry);
   2057c:	f109 0310 	add.w	r3, r9, #16
   20580:	2b1e      	cmp	r3, #30
   20582:	d9d7      	bls.n	20534 <arch_new_thread+0x1c>
   20584:	232d      	movs	r3, #45	; 0x2d
   20586:	4a0a      	ldr	r2, [pc, #40]	; (205b0 <arch_new_thread+0x98>)
   20588:	490a      	ldr	r1, [pc, #40]	; (205b4 <arch_new_thread+0x9c>)
   2058a:	480b      	ldr	r0, [pc, #44]	; (205b8 <arch_new_thread+0xa0>)
   2058c:	f012 ffc3 	bl	33516 <printk>
   20590:	4649      	mov	r1, r9
   20592:	f06f 030f 	mvn.w	r3, #15
   20596:	220e      	movs	r2, #14
   20598:	4808      	ldr	r0, [pc, #32]	; (205bc <arch_new_thread+0xa4>)
   2059a:	f012 ffbc 	bl	33516 <printk>
   2059e:	212d      	movs	r1, #45	; 0x2d
   205a0:	4803      	ldr	r0, [pc, #12]	; (205b0 <arch_new_thread+0x98>)
   205a2:	f012 fffe 	bl	335a2 <assert_post_action>
   205a6:	e7c5      	b.n	20534 <arch_new_thread+0x1c>
   205a8:	0002e6a5 	.word	0x0002e6a5
   205ac:	00033559 	.word	0x00033559
   205b0:	000383bf 	.word	0x000383bf
   205b4:	000383f1 	.word	0x000383f1
   205b8:	00037a66 	.word	0x00037a66
   205bc:	0003847e 	.word	0x0003847e

000205c0 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
   205c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   205c2:	461f      	mov	r7, r3
   205c4:	4606      	mov	r6, r0
   205c6:	460d      	mov	r5, r1
   205c8:	4614      	mov	r4, r2
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   205ca:	2300      	movs	r3, #0
   205cc:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   205d0:	f3ef 8314 	mrs	r3, CONTROL
	 * initialized at thread creation for threads that make use of the FP).
	 */
	__set_FPSCR(0);
#if defined(CONFIG_FP_SHARING)
	/* In Sharing mode clearing FPSCR may set the CONTROL.FPCA flag. */
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   205d4:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   205d8:	f383 8814 	msr	CONTROL, r3
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
   205dc:	f3bf 8f6f 	isb	sy
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   205e0:	f000 fb50 	bl	20c84 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
   205e4:	4b0b      	ldr	r3, [pc, #44]	; (20614 <arch_switch_to_main_thread+0x54>)
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   205e6:	4630      	mov	r0, r6
	start_of_main_stack =
   205e8:	442c      	add	r4, r5
	_current = main_thread;
   205ea:	609e      	str	r6, [r3, #8]
	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);
   205ec:	f024 0407 	bic.w	r4, r4, #7
	z_arm_configure_dynamic_mpu_regions(main_thread);
   205f0:	f013 fb30 	bl	33c54 <z_arm_configure_dynamic_mpu_regions>
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   205f4:	f385 880b 	msr	PSPLIM, r5

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   205f8:	4638      	mov	r0, r7
   205fa:	f384 8809 	msr	PSP, r4
   205fe:	2100      	movs	r1, #0
   20600:	b663      	cpsie	if
   20602:	f381 8811 	msr	BASEPRI, r1
   20606:	f3bf 8f6f 	isb	sy
   2060a:	2200      	movs	r2, #0
   2060c:	2300      	movs	r3, #0
   2060e:	f012 ffa3 	bl	33558 <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   20612:	bf00      	nop
   20614:	20023ed0 	.word	0x20023ed0

00020618 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
   20618:	4901      	ldr	r1, [pc, #4]	; (20620 <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
   2061a:	2210      	movs	r2, #16
	str r2, [r1]
   2061c:	600a      	str	r2, [r1, #0]
#endif
	bx lr
   2061e:	4770      	bx	lr
	ldr r1, =_SCB_SCR
   20620:	e000ed10 	.word	0xe000ed10

00020624 <arch_cpu_idle>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
   20624:	4040      	eors	r0, r0
	msr BASEPRI, r0
   20626:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
   2062a:	bf30      	wfi

	bx lr
   2062c:	4770      	bx	lr
   2062e:	bf00      	nop

00020630 <z_arm_bus_fault>:
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_reserved)

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) || \
	defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	mrs r0, MSP
   20630:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   20634:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
   20638:	4672      	mov	r2, lr

	push {r0, lr}
   2063a:	b501      	push	{r0, lr}
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE || CONFIG_ARMv7_M_ARMV8_M_MAINLINE */

	bl z_arm_fault
   2063c:	f000 f9ea 	bl	20a14 <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
   20640:	bd01      	pop	{r0, pc}
   20642:	bf00      	nop

00020644 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   20644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20648:	4607      	mov	r7, r0

	if (esf != NULL) {
   2064a:	460c      	mov	r4, r1
{
   2064c:	b086      	sub	sp, #24
	if (esf != NULL) {
   2064e:	2900      	cmp	r1, #0
   20650:	d04a      	beq.n	206e8 <z_arm_fatal_error+0xa4>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   20652:	688b      	ldr	r3, [r1, #8]
   20654:	4828      	ldr	r0, [pc, #160]	; (206f8 <z_arm_fatal_error+0xb4>)
   20656:	9300      	str	r3, [sp, #0]
   20658:	e9d1 2300 	ldrd	r2, r3, [r1]
   2065c:	2145      	movs	r1, #69	; 0x45
   2065e:	f012 ff5a 	bl	33516 <printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   20662:	6963      	ldr	r3, [r4, #20]
   20664:	2145      	movs	r1, #69	; 0x45
   20666:	9300      	str	r3, [sp, #0]
   20668:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   2066c:	4823      	ldr	r0, [pc, #140]	; (206fc <z_arm_fatal_error+0xb8>)
   2066e:	f012 ff52 	bl	33516 <printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   20672:	2145      	movs	r1, #69	; 0x45
   20674:	69e2      	ldr	r2, [r4, #28]
   20676:	4822      	ldr	r0, [pc, #136]	; (20700 <z_arm_fatal_error+0xbc>)
   20678:	f012 ff4d 	bl	33516 <printk>
	for (int i = 0; i < 16; i += 4) {
   2067c:	4626      	mov	r6, r4
   2067e:	2500      	movs	r5, #0
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   20680:	f8df 8088 	ldr.w	r8, [pc, #136]	; 2070c <z_arm_fatal_error+0xc8>
   20684:	edd6 7a0b 	vldr	s15, [r6, #44]	; 0x2c
   20688:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   2068c:	ed96 7a08 	vldr	s14, [r6, #32]
   20690:	edcd 7a05 	vstr	s15, [sp, #20]
   20694:	1ceb      	adds	r3, r5, #3
   20696:	9304      	str	r3, [sp, #16]
   20698:	edd6 7a0a 	vldr	s15, [r6, #40]	; 0x28
   2069c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   206a0:	edcd 7a03 	vstr	s15, [sp, #12]
   206a4:	1cab      	adds	r3, r5, #2
   206a6:	9302      	str	r3, [sp, #8]
   206a8:	edd6 7a09 	vldr	s15, [r6, #36]	; 0x24
   206ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   206b0:	edcd 7a01 	vstr	s15, [sp, #4]
   206b4:	eefc 7ac7 	vcvt.u32.f32	s15, s14
   206b8:	1c6b      	adds	r3, r5, #1
   206ba:	462a      	mov	r2, r5
   206bc:	9300      	str	r3, [sp, #0]
   206be:	2145      	movs	r1, #69	; 0x45
   206c0:	ee17 3a90 	vmov	r3, s15
   206c4:	4640      	mov	r0, r8
	for (int i = 0; i < 16; i += 4) {
   206c6:	3504      	adds	r5, #4
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   206c8:	f012 ff25 	bl	33516 <printk>
	for (int i = 0; i < 16; i += 4) {
   206cc:	2d10      	cmp	r5, #16
   206ce:	f106 0610 	add.w	r6, r6, #16
   206d2:	d1d7      	bne.n	20684 <z_arm_fatal_error+0x40>
	LOG_ERR("fpscr:  0x%08x", esf->fpscr);
   206d4:	2145      	movs	r1, #69	; 0x45
   206d6:	6e22      	ldr	r2, [r4, #96]	; 0x60
   206d8:	480a      	ldr	r0, [pc, #40]	; (20704 <z_arm_fatal_error+0xc0>)
   206da:	f012 ff1c 	bl	33516 <printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   206de:	2145      	movs	r1, #69	; 0x45
   206e0:	69a2      	ldr	r2, [r4, #24]
   206e2:	4809      	ldr	r0, [pc, #36]	; (20708 <z_arm_fatal_error+0xc4>)
   206e4:	f012 ff17 	bl	33516 <printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   206e8:	4621      	mov	r1, r4
   206ea:	4638      	mov	r0, r7
}
   206ec:	b006      	add	sp, #24
   206ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_fatal_error(reason, esf);
   206f2:	f00d bf7d 	b.w	2e5f0 <z_fatal_error>
   206f6:	bf00      	nop
   206f8:	000384af 	.word	0x000384af
   206fc:	000384e3 	.word	0x000384e3
   20700:	00038517 	.word	0x00038517
   20704:	00038573 	.word	0x00038573
   20708:	00038587 	.word	0x00038587
   2070c:	0003852b 	.word	0x0003852b

00020710 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   20710:	bf30      	wfi
    b z_SysNmiOnReset
   20712:	f7ff bffd 	b.w	20710 <z_SysNmiOnReset>
   20716:	bf00      	nop

00020718 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   20718:	4a11      	ldr	r2, [pc, #68]	; (20760 <z_arm_prep_c+0x48>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   2071a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   2071c:	4b11      	ldr	r3, [pc, #68]	; (20764 <z_arm_prep_c+0x4c>)
   2071e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   20722:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   20724:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   20728:	f3bf 8f6f 	isb	sy
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   2072c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   20730:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   20734:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
   20738:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   2073c:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
   20740:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   20744:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   20748:	2300      	movs	r3, #0
   2074a:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
   2074e:	f00d ffc3 	bl	2e6d8 <z_bss_zero>
	z_data_copy();
   20752:	f00d ffcb 	bl	2e6ec <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
   20756:	f000 fa4b 	bl	20bf0 <z_arm_int_lib_init>
	z_cstart();
   2075a:	f00e f805 	bl	2e768 <z_cstart>
   2075e:	bf00      	nop
   20760:	0001c200 	.word	0x0001c200
   20764:	e000ed00 	.word	0xe000ed00

00020768 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   20768:	b501      	push	{r0, lr}
      * FIXME: Remove the Cortex-M conditional compilation checks for `cpsid i`
      *        and `cpsie i` after the Cortex-R port is updated to support
      *        interrupt nesting.  For more details, refer to the issue #21758.
      */
#if defined(CONFIG_CPU_CORTEX_M)
	cpsid i  /* PRIMASK = 1 */
   2076a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   2076c:	4a0b      	ldr	r2, [pc, #44]	; (2079c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   2076e:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
   20770:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   20772:	bf1e      	ittt	ne
	movne	r1, #0
   20774:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   20776:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
   20778:	f015 f807 	blne	3578a <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   2077c:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   2077e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   20782:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   20786:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
   2078a:	4905      	ldr	r1, [pc, #20]	; (207a0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   2078c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   2078e:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
   20790:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   20792:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   20796:	4903      	ldr	r1, [pc, #12]	; (207a4 <_isr_wrapper+0x3c>)
	bx r1
   20798:	4708      	bx	r1
   2079a:	0000      	.short	0x0000
	ldr r2, =_kernel
   2079c:	20023ed0 	.word	0x20023ed0
	ldr r1, =_sw_isr_table
   207a0:	00036a6c 	.word	0x00036a6c
	ldr r1, =z_arm_int_exit
   207a4:	00020345 	.word	0x00020345

000207a8 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   207a8:	f012 ff03 	bl	335b2 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   207ac:	2020      	movs	r0, #32
    msr BASEPRI, r0
   207ae:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
   207b2:	4808      	ldr	r0, [pc, #32]	; (207d4 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
   207b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   207b8:	1840      	adds	r0, r0, r1
    msr PSP, r0
   207ba:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   207be:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   207c2:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   207c4:	4308      	orrs	r0, r1
    msr CONTROL, r0
   207c6:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   207ca:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   207ce:	f7ff ffa3 	bl	20718 <z_arm_prep_c>
   207d2:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
   207d4:	20027400 	.word	0x20027400

000207d8 <bus_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   207d8:	b570      	push	{r4, r5, r6, lr}
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   207da:	4c23      	ldr	r4, [pc, #140]	; (20868 <bus_fault.isra.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   207dc:	4606      	mov	r6, r0
   207de:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   207e0:	4822      	ldr	r0, [pc, #136]	; (2086c <bus_fault.isra.0+0x94>)
   207e2:	2145      	movs	r1, #69	; 0x45
   207e4:	f012 fe97 	bl	33516 <printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   207e8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   207ea:	04d1      	lsls	r1, r2, #19
   207ec:	d503      	bpl.n	207f6 <bus_fault.isra.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
   207ee:	2145      	movs	r1, #69	; 0x45
   207f0:	481f      	ldr	r0, [pc, #124]	; (20870 <bus_fault.isra.0+0x98>)
   207f2:	f012 fe90 	bl	33516 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   207f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   207f8:	051a      	lsls	r2, r3, #20
   207fa:	d503      	bpl.n	20804 <bus_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
   207fc:	2145      	movs	r1, #69	; 0x45
   207fe:	481d      	ldr	r0, [pc, #116]	; (20874 <bus_fault.isra.0+0x9c>)
   20800:	f012 fe89 	bl	33516 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   20804:	4c18      	ldr	r4, [pc, #96]	; (20868 <bus_fault.isra.0+0x90>)
   20806:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   20808:	059b      	lsls	r3, r3, #22
   2080a:	d510      	bpl.n	2082e <bus_fault.isra.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
   2080c:	481a      	ldr	r0, [pc, #104]	; (20878 <bus_fault.isra.0+0xa0>)
   2080e:	2145      	movs	r1, #69	; 0x45
   20810:	f012 fe81 	bl	33516 <printk>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   20814:	6ba2      	ldr	r2, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   20816:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   20818:	0418      	lsls	r0, r3, #16
   2081a:	d508      	bpl.n	2082e <bus_fault.isra.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   2081c:	2145      	movs	r1, #69	; 0x45
   2081e:	4817      	ldr	r0, [pc, #92]	; (2087c <bus_fault.isra.0+0xa4>)
   20820:	f012 fe79 	bl	33516 <printk>
			if (from_hard_fault) {
   20824:	b11e      	cbz	r6, 2082e <bus_fault.isra.0+0x56>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   20826:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   20828:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   2082c:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   2082e:	4c0e      	ldr	r4, [pc, #56]	; (20868 <bus_fault.isra.0+0x90>)
   20830:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   20832:	0559      	lsls	r1, r3, #21
   20834:	d503      	bpl.n	2083e <bus_fault.isra.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
   20836:	2145      	movs	r1, #69	; 0x45
   20838:	4811      	ldr	r0, [pc, #68]	; (20880 <bus_fault.isra.0+0xa8>)
   2083a:	f012 fe6c 	bl	33516 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   2083e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   20840:	05da      	lsls	r2, r3, #23
   20842:	d50b      	bpl.n	2085c <bus_fault.isra.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
   20844:	2145      	movs	r1, #69	; 0x45
   20846:	480f      	ldr	r0, [pc, #60]	; (20884 <bus_fault.isra.0+0xac>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   20848:	f012 fe65 	bl	33516 <printk>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf);
   2084c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   2084e:	4a06      	ldr	r2, [pc, #24]	; (20868 <bus_fault.isra.0+0x90>)
   20850:	6a93      	ldr	r3, [r2, #40]	; 0x28
   20852:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   20856:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   20858:	7028      	strb	r0, [r5, #0]

	return reason;
}
   2085a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   2085c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2085e:	049b      	lsls	r3, r3, #18
   20860:	d5f4      	bpl.n	2084c <bus_fault.isra.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   20862:	2145      	movs	r1, #69	; 0x45
   20864:	4808      	ldr	r0, [pc, #32]	; (20888 <bus_fault.isra.0+0xb0>)
   20866:	e7ef      	b.n	20848 <bus_fault.isra.0+0x70>
   20868:	e000ed00 	.word	0xe000ed00
   2086c:	000385ba 	.word	0x000385ba
   20870:	000385d5 	.word	0x000385d5
   20874:	000385eb 	.word	0x000385eb
   20878:	00038603 	.word	0x00038603
   2087c:	00038621 	.word	0x00038621
   20880:	0003863b 	.word	0x0003863b
   20884:	0003865b 	.word	0x0003865b
   20888:	00038678 	.word	0x00038678

0002088c <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t usage_fault(const z_arch_esf_t *esf)
   2088c:	b538      	push	{r3, r4, r5, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   2088e:	4c21      	ldr	r4, [pc, #132]	; (20914 <usage_fault.isra.0+0x88>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
   20890:	2145      	movs	r1, #69	; 0x45
   20892:	4821      	ldr	r0, [pc, #132]	; (20918 <usage_fault.isra.0+0x8c>)
   20894:	f012 fe3f 	bl	33516 <printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   20898:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   2089a:	0195      	lsls	r5, r2, #6
   2089c:	d503      	bpl.n	208a6 <usage_fault.isra.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
   2089e:	2145      	movs	r1, #69	; 0x45
   208a0:	481e      	ldr	r0, [pc, #120]	; (2091c <usage_fault.isra.0+0x90>)
   208a2:	f012 fe38 	bl	33516 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   208a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   208a8:	01dc      	lsls	r4, r3, #7
   208aa:	d503      	bpl.n	208b4 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
   208ac:	2145      	movs	r1, #69	; 0x45
   208ae:	481c      	ldr	r0, [pc, #112]	; (20920 <usage_fault.isra.0+0x94>)
   208b0:	f012 fe31 	bl	33516 <printk>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   208b4:	4d17      	ldr	r5, [pc, #92]	; (20914 <usage_fault.isra.0+0x88>)
   208b6:	6aac      	ldr	r4, [r5, #40]	; 0x28
   208b8:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
   208bc:	d004      	beq.n	208c8 <usage_fault.isra.0+0x3c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   208be:	2145      	movs	r1, #69	; 0x45
   208c0:	4818      	ldr	r0, [pc, #96]	; (20924 <usage_fault.isra.0+0x98>)
   208c2:	f012 fe28 	bl	33516 <printk>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
   208c6:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   208c8:	6aab      	ldr	r3, [r5, #40]	; 0x28
   208ca:	0318      	lsls	r0, r3, #12
   208cc:	d503      	bpl.n	208d6 <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
   208ce:	2145      	movs	r1, #69	; 0x45
   208d0:	4815      	ldr	r0, [pc, #84]	; (20928 <usage_fault.isra.0+0x9c>)
   208d2:	f012 fe20 	bl	33516 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   208d6:	4d0f      	ldr	r5, [pc, #60]	; (20914 <usage_fault.isra.0+0x88>)
   208d8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   208da:	0351      	lsls	r1, r2, #13
   208dc:	d503      	bpl.n	208e6 <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   208de:	2145      	movs	r1, #69	; 0x45
   208e0:	4812      	ldr	r0, [pc, #72]	; (2092c <usage_fault.isra.0+0xa0>)
   208e2:	f012 fe18 	bl	33516 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   208e6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   208e8:	039a      	lsls	r2, r3, #14
   208ea:	d503      	bpl.n	208f4 <usage_fault.isra.0+0x68>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   208ec:	2145      	movs	r1, #69	; 0x45
   208ee:	4810      	ldr	r0, [pc, #64]	; (20930 <usage_fault.isra.0+0xa4>)
   208f0:	f012 fe11 	bl	33516 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   208f4:	4d07      	ldr	r5, [pc, #28]	; (20914 <usage_fault.isra.0+0x88>)
   208f6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   208f8:	03db      	lsls	r3, r3, #15
   208fa:	d503      	bpl.n	20904 <usage_fault.isra.0+0x78>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   208fc:	2145      	movs	r1, #69	; 0x45
   208fe:	480d      	ldr	r0, [pc, #52]	; (20934 <usage_fault.isra.0+0xa8>)
   20900:	f012 fe09 	bl	33516 <printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   20904:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
   20906:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   20908:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   2090c:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   20910:	62ab      	str	r3, [r5, #40]	; 0x28
}
   20912:	bd38      	pop	{r3, r4, r5, pc}
   20914:	e000ed00 	.word	0xe000ed00
   20918:	000386ac 	.word	0x000386ac
   2091c:	000386c9 	.word	0x000386c9
   20920:	000386e1 	.word	0x000386e1
   20924:	00038700 	.word	0x00038700
   20928:	0003872f 	.word	0x0003872f
   2092c:	00038752 	.word	0x00038752
   20930:	0003877c 	.word	0x0003877c
   20934:	0003879b 	.word	0x0003879b

00020938 <mem_manage_fault.isra.0>:
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   20938:	b570      	push	{r4, r5, r6, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   2093a:	4c2a      	ldr	r4, [pc, #168]	; (209e4 <mem_manage_fault.isra.0+0xac>)
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   2093c:	4606      	mov	r6, r0
   2093e:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   20940:	4829      	ldr	r0, [pc, #164]	; (209e8 <mem_manage_fault.isra.0+0xb0>)
   20942:	2145      	movs	r1, #69	; 0x45
   20944:	f012 fde7 	bl	33516 <printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   20948:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   2094a:	06d1      	lsls	r1, r2, #27
   2094c:	d503      	bpl.n	20956 <mem_manage_fault.isra.0+0x1e>
		PR_FAULT_INFO("  Stacking error (context area might be"
   2094e:	2145      	movs	r1, #69	; 0x45
   20950:	4826      	ldr	r0, [pc, #152]	; (209ec <mem_manage_fault.isra.0+0xb4>)
   20952:	f012 fde0 	bl	33516 <printk>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   20956:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   20958:	071a      	lsls	r2, r3, #28
   2095a:	d503      	bpl.n	20964 <mem_manage_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
   2095c:	2145      	movs	r1, #69	; 0x45
   2095e:	4824      	ldr	r0, [pc, #144]	; (209f0 <mem_manage_fault.isra.0+0xb8>)
   20960:	f012 fdd9 	bl	33516 <printk>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   20964:	4c1f      	ldr	r4, [pc, #124]	; (209e4 <mem_manage_fault.isra.0+0xac>)
   20966:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   20968:	079b      	lsls	r3, r3, #30
   2096a:	d510      	bpl.n	2098e <mem_manage_fault.isra.0+0x56>
		PR_FAULT_INFO("  Data Access Violation");
   2096c:	4821      	ldr	r0, [pc, #132]	; (209f4 <mem_manage_fault.isra.0+0xbc>)
   2096e:	2145      	movs	r1, #69	; 0x45
   20970:	f012 fdd1 	bl	33516 <printk>
		mmfar = SCB->MMFAR;
   20974:	6b62      	ldr	r2, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   20976:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   20978:	0618      	lsls	r0, r3, #24
   2097a:	d508      	bpl.n	2098e <mem_manage_fault.isra.0+0x56>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   2097c:	2145      	movs	r1, #69	; 0x45
   2097e:	481e      	ldr	r0, [pc, #120]	; (209f8 <mem_manage_fault.isra.0+0xc0>)
   20980:	f012 fdc9 	bl	33516 <printk>
			if (from_hard_fault) {
   20984:	b11e      	cbz	r6, 2098e <mem_manage_fault.isra.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   20986:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   20988:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   2098c:	62a3      	str	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   2098e:	4c15      	ldr	r4, [pc, #84]	; (209e4 <mem_manage_fault.isra.0+0xac>)
   20990:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   20992:	07d1      	lsls	r1, r2, #31
   20994:	d503      	bpl.n	2099e <mem_manage_fault.isra.0+0x66>
		PR_FAULT_INFO("  Instruction Access Violation");
   20996:	2145      	movs	r1, #69	; 0x45
   20998:	4818      	ldr	r0, [pc, #96]	; (209fc <mem_manage_fault.isra.0+0xc4>)
   2099a:	f012 fdbc 	bl	33516 <printk>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   2099e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   209a0:	069a      	lsls	r2, r3, #26
   209a2:	d503      	bpl.n	209ac <mem_manage_fault.isra.0+0x74>
		PR_FAULT_INFO(
   209a4:	2145      	movs	r1, #69	; 0x45
   209a6:	4816      	ldr	r0, [pc, #88]	; (20a00 <mem_manage_fault.isra.0+0xc8>)
   209a8:	f012 fdb5 	bl	33516 <printk>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
   209ac:	4b0d      	ldr	r3, [pc, #52]	; (209e4 <mem_manage_fault.isra.0+0xac>)
   209ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   209b0:	06db      	lsls	r3, r3, #27
   209b2:	d50e      	bpl.n	209d2 <mem_manage_fault.isra.0+0x9a>
	__ASSERT(0,
   209b4:	4913      	ldr	r1, [pc, #76]	; (20a04 <mem_manage_fault.isra.0+0xcc>)
   209b6:	f240 1335 	movw	r3, #309	; 0x135
   209ba:	4a13      	ldr	r2, [pc, #76]	; (20a08 <mem_manage_fault.isra.0+0xd0>)
   209bc:	4813      	ldr	r0, [pc, #76]	; (20a0c <mem_manage_fault.isra.0+0xd4>)
   209be:	f012 fdaa 	bl	33516 <printk>
   209c2:	4813      	ldr	r0, [pc, #76]	; (20a10 <mem_manage_fault.isra.0+0xd8>)
   209c4:	f012 fda7 	bl	33516 <printk>
   209c8:	f240 1135 	movw	r1, #309	; 0x135
   209cc:	480e      	ldr	r0, [pc, #56]	; (20a08 <mem_manage_fault.isra.0+0xd0>)
   209ce:	f012 fde8 	bl	335a2 <assert_post_action>
	*recoverable = memory_fault_recoverable(esf);
   209d2:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   209d4:	4a03      	ldr	r2, [pc, #12]	; (209e4 <mem_manage_fault.isra.0+0xac>)
   209d6:	6a93      	ldr	r3, [r2, #40]	; 0x28
   209d8:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   209dc:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   209de:	7028      	strb	r0, [r5, #0]
}
   209e0:	bd70      	pop	{r4, r5, r6, pc}
   209e2:	bf00      	nop
   209e4:	e000ed00 	.word	0xe000ed00
   209e8:	000387cb 	.word	0x000387cb
   209ec:	000387e6 	.word	0x000387e6
   209f0:	000385eb 	.word	0x000385eb
   209f4:	0003881e 	.word	0x0003881e
   209f8:	0003883b 	.word	0x0003883b
   209fc:	00038856 	.word	0x00038856
   20a00:	00038678 	.word	0x00038678
   20a04:	0003afd7 	.word	0x0003afd7
   20a08:	0003887a 	.word	0x0003887a
   20a0c:	00037a66 	.word	0x00037a66
   20a10:	000388b4 	.word	0x000388b4

00020a14 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
   20a14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   20a18:	4b56      	ldr	r3, [pc, #344]	; (20b74 <z_arm_fault+0x160>)
{
   20a1a:	4681      	mov	r9, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   20a1c:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   20a20:	460d      	mov	r5, r1
   20a22:	4614      	mov	r4, r2
   20a24:	2600      	movs	r6, #0
   20a26:	b09d      	sub	sp, #116	; 0x74
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   20a28:	f3c8 0708 	ubfx	r7, r8, #0, #9
   20a2c:	f386 8811 	msr	BASEPRI, r6
   20a30:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   20a34:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   20a38:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   20a3c:	d111      	bne.n	20a62 <z_arm_fault+0x4e>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   20a3e:	07d0      	lsls	r0, r2, #31
   20a40:	d40f      	bmi.n	20a62 <z_arm_fault+0x4e>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   20a42:	0651      	lsls	r1, r2, #25
   20a44:	d404      	bmi.n	20a50 <z_arm_fault+0x3c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   20a46:	0722      	lsls	r2, r4, #28
   20a48:	d409      	bmi.n	20a5e <z_arm_fault+0x4a>
			ptr_esf = (z_arch_esf_t *)msp;
   20a4a:	464d      	mov	r5, r9
			*nested_exc = true;
   20a4c:	2601      	movs	r6, #1
   20a4e:	e007      	b.n	20a60 <z_arm_fault+0x4c>
		PR_FAULT_INFO("Exception occurred in Secure State");
   20a50:	2145      	movs	r1, #69	; 0x45
   20a52:	4849      	ldr	r0, [pc, #292]	; (20b78 <z_arm_fault+0x164>)
   20a54:	f012 fd5f 	bl	33516 <printk>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   20a58:	f014 0404 	ands.w	r4, r4, #4
   20a5c:	d020      	beq.n	20aa0 <z_arm_fault+0x8c>
	*nested_exc = false;
   20a5e:	2600      	movs	r6, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   20a60:	b97d      	cbnz	r5, 20a82 <z_arm_fault+0x6e>
   20a62:	f44f 736c 	mov.w	r3, #944	; 0x3b0
   20a66:	4a45      	ldr	r2, [pc, #276]	; (20b7c <z_arm_fault+0x168>)
   20a68:	4945      	ldr	r1, [pc, #276]	; (20b80 <z_arm_fault+0x16c>)
   20a6a:	4846      	ldr	r0, [pc, #280]	; (20b84 <z_arm_fault+0x170>)
   20a6c:	f012 fd53 	bl	33516 <printk>
   20a70:	4845      	ldr	r0, [pc, #276]	; (20b88 <z_arm_fault+0x174>)
   20a72:	f012 fd50 	bl	33516 <printk>
   20a76:	f44f 716c 	mov.w	r1, #944	; 0x3b0
   20a7a:	4840      	ldr	r0, [pc, #256]	; (20b7c <z_arm_fault+0x168>)
   20a7c:	f012 fd91 	bl	335a2 <assert_post_action>
   20a80:	2500      	movs	r5, #0
	*recoverable = false;
   20a82:	2300      	movs	r3, #0
   20a84:	1efa      	subs	r2, r7, #3
   20a86:	461c      	mov	r4, r3
   20a88:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   20a8c:	4613      	mov	r3, r2
   20a8e:	2b09      	cmp	r3, #9
   20a90:	d85d      	bhi.n	20b4e <z_arm_fault+0x13a>
   20a92:	e8df f003 	tbb	[pc, r3]
   20a96:	5107      	.short	0x5107
   20a98:	5c5c3555 	.word	0x5c5c3555
   20a9c:	595c5c5c 	.word	0x595c5c5c
			ptr_esf = (z_arch_esf_t *)msp;
   20aa0:	464d      	mov	r5, r9
	if (!alternative_state_exc) {
   20aa2:	e7dc      	b.n	20a5e <z_arm_fault+0x4a>
	PR_FAULT_INFO("***** HARD FAULT *****");
   20aa4:	2145      	movs	r1, #69	; 0x45
   20aa6:	4839      	ldr	r0, [pc, #228]	; (20b8c <z_arm_fault+0x178>)
   20aa8:	f012 fd35 	bl	33516 <printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   20aac:	4b31      	ldr	r3, [pc, #196]	; (20b74 <z_arm_fault+0x160>)
	*recoverable = false;
   20aae:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   20ab2:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   20ab4:	f014 0402 	ands.w	r4, r4, #2
   20ab8:	d005      	beq.n	20ac6 <z_arm_fault+0xb2>
		PR_EXC("  Bus fault on vector table read");
   20aba:	2145      	movs	r1, #69	; 0x45
   20abc:	4834      	ldr	r0, [pc, #208]	; (20b90 <z_arm_fault+0x17c>)
	PR_FAULT_INFO(
   20abe:	f012 fd2a 	bl	33516 <printk>
	u32_t reason = K_ERR_CPU_EXCEPTION;
   20ac2:	2400      	movs	r4, #0
}
   20ac4:	e01f      	b.n	20b06 <z_arm_fault+0xf2>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   20ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   20ac8:	005b      	lsls	r3, r3, #1
   20aca:	d51c      	bpl.n	20b06 <z_arm_fault+0xf2>
		PR_EXC("  Fault escalation (see below)");
   20acc:	2145      	movs	r1, #69	; 0x45
   20ace:	4831      	ldr	r0, [pc, #196]	; (20b94 <z_arm_fault+0x180>)
   20ad0:	f012 fd21 	bl	33516 <printk>
		if (SCB_MMFSR != 0) {
   20ad4:	4b30      	ldr	r3, [pc, #192]	; (20b98 <z_arm_fault+0x184>)
   20ad6:	781b      	ldrb	r3, [r3, #0]
   20ad8:	b12b      	cbz	r3, 20ae6 <z_arm_fault+0xd2>
			reason = mem_manage_fault(esf, 1, recoverable);
   20ada:	2001      	movs	r0, #1
   20adc:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   20ae0:	f7ff ff2a 	bl	20938 <mem_manage_fault.isra.0>
   20ae4:	e00e      	b.n	20b04 <z_arm_fault+0xf0>
		} else if (SCB_BFSR != 0) {
   20ae6:	4b2d      	ldr	r3, [pc, #180]	; (20b9c <z_arm_fault+0x188>)
   20ae8:	781b      	ldrb	r3, [r3, #0]
   20aea:	b12b      	cbz	r3, 20af8 <z_arm_fault+0xe4>
			reason = bus_fault(esf, 1, recoverable);
   20aec:	2001      	movs	r0, #1
   20aee:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   20af2:	f7ff fe71 	bl	207d8 <bus_fault.isra.0>
   20af6:	e005      	b.n	20b04 <z_arm_fault+0xf0>
		} else if (SCB_UFSR != 0) {
   20af8:	4b29      	ldr	r3, [pc, #164]	; (20ba0 <z_arm_fault+0x18c>)
   20afa:	881b      	ldrh	r3, [r3, #0]
   20afc:	b29b      	uxth	r3, r3
   20afe:	b113      	cbz	r3, 20b06 <z_arm_fault+0xf2>
			reason = usage_fault(esf);
   20b00:	f7ff fec4 	bl	2088c <usage_fault.isra.0>
   20b04:	4604      	mov	r4, r0
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   20b06:	f89d 3007 	ldrb.w	r3, [sp, #7]
   20b0a:	b993      	cbnz	r3, 20b32 <z_arm_fault+0x11e>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   20b0c:	2268      	movs	r2, #104	; 0x68
   20b0e:	4629      	mov	r1, r5
   20b10:	a802      	add	r0, sp, #8
   20b12:	f014 fff9 	bl	35b08 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   20b16:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20b18:	b336      	cbz	r6, 20b68 <z_arm_fault+0x154>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   20b1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
   20b1e:	b922      	cbnz	r2, 20b2a <z_arm_fault+0x116>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   20b20:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   20b24:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   20b28:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   20b2a:	4620      	mov	r0, r4
   20b2c:	a902      	add	r1, sp, #8
   20b2e:	f7ff fd89 	bl	20644 <z_arm_fatal_error>
}
   20b32:	b01d      	add	sp, #116	; 0x74
   20b34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   20b38:	2000      	movs	r0, #0
   20b3a:	f10d 0107 	add.w	r1, sp, #7
   20b3e:	e7cf      	b.n	20ae0 <z_arm_fault+0xcc>
		reason = bus_fault(esf, 0, recoverable);
   20b40:	2000      	movs	r0, #0
   20b42:	f10d 0107 	add.w	r1, sp, #7
   20b46:	e7d4      	b.n	20af2 <z_arm_fault+0xde>
	PR_FAULT_INFO(
   20b48:	2145      	movs	r1, #69	; 0x45
   20b4a:	4816      	ldr	r0, [pc, #88]	; (20ba4 <z_arm_fault+0x190>)
   20b4c:	e7b7      	b.n	20abe <z_arm_fault+0xaa>
	PR_FAULT_INFO("***** %s %d) *****",
   20b4e:	4916      	ldr	r1, [pc, #88]	; (20ba8 <z_arm_fault+0x194>)
   20b50:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   20b54:	4a15      	ldr	r2, [pc, #84]	; (20bac <z_arm_fault+0x198>)
   20b56:	4816      	ldr	r0, [pc, #88]	; (20bb0 <z_arm_fault+0x19c>)
   20b58:	bf08      	it	eq
   20b5a:	460a      	moveq	r2, r1
   20b5c:	f1a7 0310 	sub.w	r3, r7, #16
   20b60:	2145      	movs	r1, #69	; 0x45
   20b62:	f012 fcd8 	bl	33516 <printk>
   20b66:	e7ac      	b.n	20ac2 <z_arm_fault+0xae>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   20b68:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   20b6c:	f023 0301 	bic.w	r3, r3, #1
   20b70:	e7da      	b.n	20b28 <z_arm_fault+0x114>
   20b72:	bf00      	nop
   20b74:	e000ed00 	.word	0xe000ed00
   20b78:	0003891c 	.word	0x0003891c
   20b7c:	0003887a 	.word	0x0003887a
   20b80:	00038944 	.word	0x00038944
   20b84:	00037a66 	.word	0x00037a66
   20b88:	00038957 	.word	0x00038957
   20b8c:	00038995 	.word	0x00038995
   20b90:	000389b1 	.word	0x000389b1
   20b94:	000389d7 	.word	0x000389d7
   20b98:	e000ed28 	.word	0xe000ed28
   20b9c:	e000ed29 	.word	0xe000ed29
   20ba0:	e000ed2a 	.word	0xe000ed2a
   20ba4:	000389fb 	.word	0x000389fb
   20ba8:	000388ee 	.word	0x000388ee
   20bac:	00038903 	.word	0x00038903
   20bb0:	00038a36 	.word	0x00038a36

00020bb4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   20bb4:	4b04      	ldr	r3, [pc, #16]	; (20bc8 <z_arm_fault_init+0x14>)
   20bb6:	695a      	ldr	r2, [r3, #20]
   20bb8:	f042 0210 	orr.w	r2, r2, #16
   20bbc:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   20bbe:	695a      	ldr	r2, [r3, #20]
   20bc0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   20bc4:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   20bc6:	4770      	bx	lr
   20bc8:	e000ed00 	.word	0xe000ed00

00020bcc <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   20bcc:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   20bd0:	4905      	ldr	r1, [pc, #20]	; (20be8 <sys_arch_reboot+0x1c>)
   20bd2:	4b06      	ldr	r3, [pc, #24]	; (20bec <sys_arch_reboot+0x20>)
   20bd4:	68ca      	ldr	r2, [r1, #12]
   20bd6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   20bda:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   20bdc:	60cb      	str	r3, [r1, #12]
   20bde:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   20be2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   20be4:	e7fd      	b.n	20be2 <sys_arch_reboot+0x16>
   20be6:	bf00      	nop
   20be8:	e000ed00 	.word	0xe000ed00
   20bec:	05fa0004 	.word	0x05fa0004

00020bf0 <z_arm_int_lib_init>:
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
   20bf0:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   20bf2:	2120      	movs	r1, #32
   20bf4:	4803      	ldr	r0, [pc, #12]	; (20c04 <z_arm_int_lib_init+0x14>)
   20bf6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   20bf8:	3301      	adds	r3, #1
   20bfa:	2b41      	cmp	r3, #65	; 0x41
   20bfc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   20c00:	d1f9      	bne.n	20bf6 <z_arm_int_lib_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   20c02:	4770      	bx	lr
   20c04:	e000e100 	.word	0xe000e100

00020c08 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
   20c08:	b538      	push	{r3, r4, r5, lr}
   20c0a:	4604      	mov	r4, r0
	__asm__ volatile(
   20c0c:	f04f 0320 	mov.w	r3, #32
   20c10:	f3ef 8511 	mrs	r5, BASEPRI
   20c14:	f383 8811 	msr	BASEPRI, r3
   20c18:	f3bf 8f6f 	isb	sy
	unsigned int key;

	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   20c1c:	7b03      	ldrb	r3, [r0, #12]
   20c1e:	07db      	lsls	r3, r3, #31
   20c20:	d50c      	bpl.n	20c3c <z_impl_k_thread_abort+0x34>
   20c22:	4912      	ldr	r1, [pc, #72]	; (20c6c <z_impl_k_thread_abort+0x64>)
   20c24:	2323      	movs	r3, #35	; 0x23
   20c26:	4a12      	ldr	r2, [pc, #72]	; (20c70 <z_impl_k_thread_abort+0x68>)
   20c28:	4812      	ldr	r0, [pc, #72]	; (20c74 <z_impl_k_thread_abort+0x6c>)
   20c2a:	f012 fc74 	bl	33516 <printk>
   20c2e:	4812      	ldr	r0, [pc, #72]	; (20c78 <z_impl_k_thread_abort+0x70>)
   20c30:	f012 fc71 	bl	33516 <printk>
   20c34:	2123      	movs	r1, #35	; 0x23
   20c36:	480e      	ldr	r0, [pc, #56]	; (20c70 <z_impl_k_thread_abort+0x68>)
   20c38:	f012 fcb3 	bl	335a2 <assert_post_action>
		 "essential thread aborted");

	z_thread_single_abort(thread);
   20c3c:	4620      	mov	r0, r4
   20c3e:	f00f f91b 	bl	2fe78 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
   20c42:	4b0e      	ldr	r3, [pc, #56]	; (20c7c <z_impl_k_thread_abort+0x74>)
   20c44:	689b      	ldr	r3, [r3, #8]
   20c46:	42a3      	cmp	r3, r4
   20c48:	d10b      	bne.n	20c62 <z_impl_k_thread_abort+0x5a>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
   20c4a:	4b0d      	ldr	r3, [pc, #52]	; (20c80 <z_impl_k_thread_abort+0x78>)
   20c4c:	685a      	ldr	r2, [r3, #4]
   20c4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
   20c52:	b912      	cbnz	r2, 20c5a <z_impl_k_thread_abort+0x52>
	int ret;
	z_check_stack_sentinel();
#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
   20c54:	4628      	mov	r0, r5
   20c56:	f7ff fb83 	bl	20360 <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   20c5a:	685a      	ldr	r2, [r3, #4]
   20c5c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   20c60:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
   20c62:	4628      	mov	r0, r5
}
   20c64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
   20c68:	f014 bdf3 	b.w	35852 <z_reschedule_irqlock>
   20c6c:	00038a8f 	.word	0x00038a8f
   20c70:	00038a4e 	.word	0x00038a4e
   20c74:	00037a66 	.word	0x00037a66
   20c78:	00038abd 	.word	0x00038abd
   20c7c:	20023ed0 	.word	0x20023ed0
   20c80:	e000ed00 	.word	0xe000ed00

00020c84 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   20c84:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
   20c86:	4b0e      	ldr	r3, [pc, #56]	; (20cc0 <z_arm_configure_static_mpu_regions+0x3c>)
{
   20c88:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
   20c8a:	9302      	str	r3, [sp, #8]
   20c8c:	4b0d      	ldr	r3, [pc, #52]	; (20cc4 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   20c8e:	4c0e      	ldr	r4, [pc, #56]	; (20cc8 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
   20c90:	9303      	str	r3, [sp, #12]
   20c92:	4b0e      	ldr	r3, [pc, #56]	; (20ccc <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   20c94:	4a0e      	ldr	r2, [pc, #56]	; (20cd0 <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
   20c96:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
   20c98:	ab02      	add	r3, sp, #8
   20c9a:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   20c9c:	a801      	add	r0, sp, #4
   20c9e:	4623      	mov	r3, r4
   20ca0:	2101      	movs	r1, #1
   20ca2:	f000 f96d 	bl	20f80 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
   20ca6:	2300      	movs	r3, #0
   20ca8:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   20caa:	4b0a      	ldr	r3, [pc, #40]	; (20cd4 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   20cac:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   20cae:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   20cb0:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
   20cb2:	9305      	str	r3, [sp, #20]
   20cb4:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   20cb6:	f000 f987 	bl	20fc8 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   20cba:	b008      	add	sp, #32
   20cbc:	bd10      	pop	{r4, pc}
   20cbe:	bf00      	nop
   20cc0:	20020000 	.word	0x20020000
   20cc4:	00000000 	.word	0x00000000
   20cc8:	20040000 	.word	0x20040000
   20ccc:	00010006 	.word	0x00010006
   20cd0:	20020000 	.word	0x20020000
   20cd4:	20020000 	.word	0x20020000

00020cd8 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
   20cd8:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   20cda:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   20cdc:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   20cde:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   20ce2:	f004 031f 	and.w	r3, r4, #31
   20ce6:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   20ce8:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   20cea:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   20cec:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   20cf0:	4904      	ldr	r1, [pc, #16]	; (20d04 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   20cf2:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   20cf6:	f043 0301 	orr.w	r3, r3, #1
   20cfa:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   20cfc:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   20cfe:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   20d00:	bd10      	pop	{r4, pc}
   20d02:	bf00      	nop
   20d04:	e000ed90 	.word	0xe000ed90

00020d08 <mpu_configure_region>:
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const u8_t index,
	const struct k_mem_partition *new_region)
{
   20d08:	b530      	push	{r4, r5, lr}

	LOG_DBG("Configure MPU region at index 0x%x", index);

	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   20d0a:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
   20d0c:	680c      	ldr	r4, [r1, #0]
{
   20d0e:	b085      	sub	sp, #20
 */
static inline void get_region_attr_from_k_mem_partition_info(
	arm_mpu_region_attr_t *p_attr,
	const k_mem_partition_attr_t *attr, u32_t base, u32_t size)
{
	p_attr->rbar = attr->rbar &
   20d10:	890a      	ldrh	r2, [r1, #8]
   20d12:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
   20d14:	9400      	str	r4, [sp, #0]
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	p_attr->mair_idx = attr->mair_idx;
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   20d16:	3b01      	subs	r3, #1
   20d18:	f024 041f 	bic.w	r4, r4, #31
   20d1c:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   20d1e:	f002 021f 	and.w	r2, r2, #31
   20d22:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   20d26:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
   20d2a:	280f      	cmp	r0, #15
   20d2c:	4604      	mov	r4, r0
	p_attr->rbar = attr->rbar &
   20d2e:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   20d32:	9303      	str	r3, [sp, #12]
   20d34:	d909      	bls.n	20d4a <mpu_configure_region+0x42>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   20d36:	4602      	mov	r2, r0
   20d38:	2145      	movs	r1, #69	; 0x45
   20d3a:	4806      	ldr	r0, [pc, #24]	; (20d54 <mpu_configure_region+0x4c>)
   20d3c:	f012 fbeb 	bl	33516 <printk>
		return -EINVAL;
   20d40:	f06f 0415 	mvn.w	r4, #21
		&new_region->attr, new_region->start, new_region->size);

	/* Allocate and program region */
	return region_allocate_and_init(index,
		(const struct arm_mpu_region *)&region_conf);
}
   20d44:	4620      	mov	r0, r4
   20d46:	b005      	add	sp, #20
   20d48:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
   20d4a:	4669      	mov	r1, sp
   20d4c:	f7ff ffc4 	bl	20cd8 <region_init>
	return region_allocate_and_init(index,
   20d50:	e7f8      	b.n	20d44 <mpu_configure_region+0x3c>
   20d52:	bf00      	nop
   20d54:	00038adc 	.word	0x00038adc

00020d58 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   20d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20d5c:	4680      	mov	r8, r0
   20d5e:	4689      	mov	r9, r1
   20d60:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   20d62:	2700      	movs	r7, #0
	MPU->RNR = index;
   20d64:	4d4e      	ldr	r5, [pc, #312]	; (20ea0 <mpu_configure_regions_and_partition.constprop.0+0x148>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   20d66:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   20d68:	454f      	cmp	r7, r9
   20d6a:	da29      	bge.n	20dc0 <mpu_configure_regions_and_partition.constprop.0+0x68>
		if (regions[i]->size == 0U) {
   20d6c:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
   20d70:	f8d3 a004 	ldr.w	sl, [r3, #4]
   20d74:	f1ba 0f00 	cmp.w	sl, #0
   20d78:	d042      	beq.n	20e00 <mpu_configure_regions_and_partition.constprop.0+0xa8>
		&&
   20d7a:	f1ba 0f1f 	cmp.w	sl, #31
   20d7e:	d918      	bls.n	20db2 <mpu_configure_regions_and_partition.constprop.0+0x5a>
		&&
   20d80:	f01a 0f1f 	tst.w	sl, #31
   20d84:	d115      	bne.n	20db2 <mpu_configure_regions_and_partition.constprop.0+0x5a>
		((part->start &
   20d86:	f8d3 b000 	ldr.w	fp, [r3]
		&&
   20d8a:	f01b 0f1f 	tst.w	fp, #31
   20d8e:	d110      	bne.n	20db2 <mpu_configure_regions_and_partition.constprop.0+0x5a>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   20d90:	4658      	mov	r0, fp
   20d92:	f012 ff67 	bl	33c64 <arm_cmse_mpu_region_get>
   20d96:	4606      	mov	r6, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   20d98:	eb0a 000b 	add.w	r0, sl, fp
   20d9c:	3801      	subs	r0, #1
   20d9e:	f012 ff61 	bl	33c64 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   20da2:	4286      	cmp	r6, r0
   20da4:	d010      	beq.n	20dc8 <mpu_configure_regions_and_partition.constprop.0+0x70>
	return -EINVAL;
   20da6:	f06f 0615 	mvn.w	r6, #21
		int u_reg_index =
			get_region_index(regions[i]->start, regions[i]->size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   20daa:	4632      	mov	r2, r6
   20dac:	2145      	movs	r1, #69	; 0x45
   20dae:	483d      	ldr	r0, [pc, #244]	; (20ea4 <mpu_configure_regions_and_partition.constprop.0+0x14c>)
   20db0:	e002      	b.n	20db8 <mpu_configure_regions_and_partition.constprop.0+0x60>
			LOG_ERR("Partition %u: sanity check failed.", i);
   20db2:	463a      	mov	r2, r7
   20db4:	2145      	movs	r1, #69	; 0x45
   20db6:	483c      	ldr	r0, [pc, #240]	; (20ea8 <mpu_configure_regions_and_partition.constprop.0+0x150>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   20db8:	f012 fbad 	bl	33516 <printk>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   20dbc:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   20dc0:	4620      	mov	r0, r4
   20dc2:	b005      	add	sp, #20
   20dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   20dc8:	f116 0f16 	cmn.w	r6, #22
   20dcc:	d0ed      	beq.n	20daa <mpu_configure_regions_and_partition.constprop.0+0x52>
			(u_reg_index > (reg_index - 1))) {
   20dce:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   20dd0:	42b3      	cmp	r3, r6
   20dd2:	dbea      	blt.n	20daa <mpu_configure_regions_and_partition.constprop.0+0x52>
	MPU->RNR = index;
   20dd4:	60ae      	str	r6, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   20dd6:	68e8      	ldr	r0, [r5, #12]
	MPU->RNR = index;
   20dd8:	60ae      	str	r6, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   20dda:	692b      	ldr	r3, [r5, #16]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   20ddc:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   20de0:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   20de4:	f043 0b1f 	orr.w	fp, r3, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   20de8:	e9d1 3200 	ldrd	r3, r2, [r1]
   20dec:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
   20dee:	4298      	cmp	r0, r3
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   20df0:	f102 3aff 	add.w	sl, r2, #4294967295	; 0xffffffff
		if ((regions[i]->start == u_reg_base) &&
   20df4:	d116      	bne.n	20e24 <mpu_configure_regions_and_partition.constprop.0+0xcc>
   20df6:	45d3      	cmp	fp, sl
   20df8:	d104      	bne.n	20e04 <mpu_configure_regions_and_partition.constprop.0+0xac>
			mpu_configure_region(u_reg_index, regions[i]);
   20dfa:	b2f0      	uxtb	r0, r6
   20dfc:	f7ff ff84 	bl	20d08 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   20e00:	3701      	adds	r7, #1
   20e02:	e7b1      	b.n	20d68 <mpu_configure_regions_and_partition.constprop.0+0x10>
	MPU->RNR = index;
   20e04:	60ae      	str	r6, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   20e06:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   20e08:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   20e0c:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   20e10:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   20e12:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
   20e14:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
   20e16:	f7ff ff77 	bl	20d08 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   20e1a:	f110 0f16 	cmn.w	r0, #22
   20e1e:	d0cd      	beq.n	20dbc <mpu_configure_regions_and_partition.constprop.0+0x64>
			reg_index++;
   20e20:	1c44      	adds	r4, r0, #1
   20e22:	e7ed      	b.n	20e00 <mpu_configure_regions_and_partition.constprop.0+0xa8>
	MPU->RNR = index;
   20e24:	60ae      	str	r6, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   20e26:	692a      	ldr	r2, [r5, #16]
   20e28:	3b01      	subs	r3, #1
   20e2a:	f023 031f 	bic.w	r3, r3, #31
   20e2e:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   20e32:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
   20e34:	45d3      	cmp	fp, sl
   20e36:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   20e38:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
   20e3a:	d0ec      	beq.n	20e16 <mpu_configure_regions_and_partition.constprop.0+0xbe>
				mpu_configure_region(reg_index, regions[i]);
   20e3c:	f7ff ff64 	bl	20d08 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   20e40:	f110 0f16 	cmn.w	r0, #22
   20e44:	d0ba      	beq.n	20dbc <mpu_configure_regions_and_partition.constprop.0+0x64>
	MPU->RNR = index;
   20e46:	60ae      	str	r6, [r5, #8]
	attr->rbar = MPU->RBAR &
   20e48:	68ea      	ldr	r2, [r5, #12]
   20e4a:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
   20e4e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
	attr->rbar = MPU->RBAR &
   20e52:	f362 0304 	bfi	r3, r2, #0, #5
   20e56:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   20e5a:	692b      	ldr	r3, [r5, #16]
   20e5c:	f89d 2008 	ldrb.w	r2, [sp, #8]
   20e60:	085b      	lsrs	r3, r3, #1
   20e62:	f363 1247 	bfi	r2, r3, #5, #3
   20e66:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
   20e6a:	f858 2027 	ldr.w	r2, [r8, r7, lsl #2]
			reg_index++;
   20e6e:	3001      	adds	r0, #1
			fill_region.base = regions[i]->start +
   20e70:	e9d2 3200 	ldrd	r3, r2, [r2]
   20e74:	4413      	add	r3, r2
   20e76:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
   20e78:	f023 031f 	bic.w	r3, r3, #31
   20e7c:	445b      	add	r3, fp
   20e7e:	eba3 030a 	sub.w	r3, r3, sl
   20e82:	b2c0      	uxtb	r0, r0
   20e84:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
   20e88:	280f      	cmp	r0, #15
			fill_region.attr.r_limit =
   20e8a:	9303      	str	r3, [sp, #12]
   20e8c:	d903      	bls.n	20e96 <mpu_configure_regions_and_partition.constprop.0+0x13e>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   20e8e:	4602      	mov	r2, r0
   20e90:	2145      	movs	r1, #69	; 0x45
   20e92:	4806      	ldr	r0, [pc, #24]	; (20eac <mpu_configure_regions_and_partition.constprop.0+0x154>)
   20e94:	e790      	b.n	20db8 <mpu_configure_regions_and_partition.constprop.0+0x60>
	region_init(index, region_conf);
   20e96:	4669      	mov	r1, sp
   20e98:	f7ff ff1e 	bl	20cd8 <region_init>
   20e9c:	e7c0      	b.n	20e20 <mpu_configure_regions_and_partition.constprop.0+0xc8>
   20e9e:	bf00      	nop
   20ea0:	e000ed90 	.word	0xe000ed90
   20ea4:	00038b2f 	.word	0x00038b2f
   20ea8:	00038b07 	.word	0x00038b07
   20eac:	00038adc 	.word	0x00038adc

00020eb0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   20eb0:	2205      	movs	r2, #5
   20eb2:	4b03      	ldr	r3, [pc, #12]	; (20ec0 <arm_core_mpu_enable+0x10>)
   20eb4:	605a      	str	r2, [r3, #4]
   20eb6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   20eba:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   20ebe:	4770      	bx	lr
   20ec0:	e000ed90 	.word	0xe000ed90

00020ec4 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   20ec4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   20ec8:	2200      	movs	r2, #0
   20eca:	4b01      	ldr	r3, [pc, #4]	; (20ed0 <arm_core_mpu_disable+0xc>)
   20ecc:	605a      	str	r2, [r3, #4]
}
   20ece:	4770      	bx	lr
   20ed0:	e000ed90 	.word	0xe000ed90

00020ed4 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
   20ed4:	b570      	push	{r4, r5, r6, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   20ed6:	4e20      	ldr	r6, [pc, #128]	; (20f58 <arm_mpu_init+0x84>)
   20ed8:	6835      	ldr	r5, [r6, #0]
   20eda:	2d10      	cmp	r5, #16
   20edc:	d913      	bls.n	20f06 <arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   20ede:	f240 1329 	movw	r3, #297	; 0x129
   20ee2:	4a1e      	ldr	r2, [pc, #120]	; (20f5c <arm_mpu_init+0x88>)
   20ee4:	491e      	ldr	r1, [pc, #120]	; (20f60 <arm_mpu_init+0x8c>)
   20ee6:	481f      	ldr	r0, [pc, #124]	; (20f64 <arm_mpu_init+0x90>)
   20ee8:	f012 fb15 	bl	33516 <printk>
   20eec:	2210      	movs	r2, #16
   20eee:	4629      	mov	r1, r5
   20ef0:	481d      	ldr	r0, [pc, #116]	; (20f68 <arm_mpu_init+0x94>)
   20ef2:	f012 fb10 	bl	33516 <printk>
   20ef6:	4819      	ldr	r0, [pc, #100]	; (20f5c <arm_mpu_init+0x88>)
   20ef8:	f240 1129 	movw	r1, #297	; 0x129
   20efc:	f012 fb51 	bl	335a2 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
   20f00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
}
   20f04:	bd70      	pop	{r4, r5, r6, pc}
	arm_core_mpu_disable();
   20f06:	f7ff ffdd 	bl	20ec4 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   20f0a:	2000      	movs	r0, #0
	MPU->MAIR0 =
   20f0c:	4c17      	ldr	r4, [pc, #92]	; (20f6c <arm_mpu_init+0x98>)
   20f0e:	4a18      	ldr	r2, [pc, #96]	; (20f70 <arm_mpu_init+0x9c>)
   20f10:	6322      	str	r2, [r4, #48]	; 0x30
   20f12:	4285      	cmp	r5, r0
   20f14:	d119      	bne.n	20f4a <arm_mpu_init+0x76>
	static_regions_num = mpu_config.num_regions;
   20f16:	4b17      	ldr	r3, [pc, #92]	; (20f74 <arm_mpu_init+0xa0>)
   20f18:	701d      	strb	r5, [r3, #0]
	arm_core_mpu_enable();
   20f1a:	f7ff ffc9 	bl	20eb0 <arm_core_mpu_enable>
	__ASSERT(
   20f1e:	6823      	ldr	r3, [r4, #0]
   20f20:	f3c3 2307 	ubfx	r3, r3, #8, #8
   20f24:	2b10      	cmp	r3, #16
   20f26:	d00e      	beq.n	20f46 <arm_mpu_init+0x72>
   20f28:	4913      	ldr	r1, [pc, #76]	; (20f78 <arm_mpu_init+0xa4>)
   20f2a:	f240 134b 	movw	r3, #331	; 0x14b
   20f2e:	4a0b      	ldr	r2, [pc, #44]	; (20f5c <arm_mpu_init+0x88>)
   20f30:	480c      	ldr	r0, [pc, #48]	; (20f64 <arm_mpu_init+0x90>)
   20f32:	f012 faf0 	bl	33516 <printk>
   20f36:	4811      	ldr	r0, [pc, #68]	; (20f7c <arm_mpu_init+0xa8>)
   20f38:	f012 faed 	bl	33516 <printk>
   20f3c:	f240 114b 	movw	r1, #331	; 0x14b
   20f40:	4806      	ldr	r0, [pc, #24]	; (20f5c <arm_mpu_init+0x88>)
   20f42:	f012 fb2e 	bl	335a2 <assert_post_action>
	return 0;
   20f46:	2000      	movs	r0, #0
   20f48:	e7dc      	b.n	20f04 <arm_mpu_init+0x30>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   20f4a:	6871      	ldr	r1, [r6, #4]
   20f4c:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   20f50:	f7ff fec2 	bl	20cd8 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   20f54:	3001      	adds	r0, #1
   20f56:	e7dc      	b.n	20f12 <arm_mpu_init+0x3e>
   20f58:	00037028 	.word	0x00037028
   20f5c:	00038b57 	.word	0x00038b57
   20f60:	0003afd7 	.word	0x0003afd7
   20f64:	00037a66 	.word	0x00037a66
   20f68:	00038b97 	.word	0x00038b97
   20f6c:	e000ed90 	.word	0xe000ed90
   20f70:	0044ffaa 	.word	0x0044ffaa
   20f74:	200241f1 	.word	0x200241f1
   20f78:	00038bcb 	.word	0x00038bcb
   20f7c:	00038c1c 	.word	0x00038c1c

00020f80 <arm_core_mpu_configure_static_mpu_regions>:
{
   20f80:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   20f82:	4d0c      	ldr	r5, [pc, #48]	; (20fb4 <arm_core_mpu_configure_static_mpu_regions+0x34>)
   20f84:	460c      	mov	r4, r1
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   20f86:	782a      	ldrb	r2, [r5, #0]
   20f88:	f7ff fee6 	bl	20d58 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   20f8c:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   20f8e:	3016      	adds	r0, #22
   20f90:	d10f      	bne.n	20fb2 <arm_core_mpu_configure_static_mpu_regions+0x32>
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   20f92:	23f2      	movs	r3, #242	; 0xf2
   20f94:	4a08      	ldr	r2, [pc, #32]	; (20fb8 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   20f96:	4909      	ldr	r1, [pc, #36]	; (20fbc <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   20f98:	4809      	ldr	r0, [pc, #36]	; (20fc0 <arm_core_mpu_configure_static_mpu_regions+0x40>)
   20f9a:	f012 fabc 	bl	33516 <printk>
   20f9e:	4621      	mov	r1, r4
   20fa0:	4808      	ldr	r0, [pc, #32]	; (20fc4 <arm_core_mpu_configure_static_mpu_regions+0x44>)
   20fa2:	f012 fab8 	bl	33516 <printk>
}
   20fa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   20faa:	21f2      	movs	r1, #242	; 0xf2
   20fac:	4802      	ldr	r0, [pc, #8]	; (20fb8 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   20fae:	f012 baf8 	b.w	335a2 <assert_post_action>
}
   20fb2:	bd38      	pop	{r3, r4, r5, pc}
   20fb4:	200241f1 	.word	0x200241f1
   20fb8:	00038b57 	.word	0x00038b57
   20fbc:	0003afd7 	.word	0x0003afd7
   20fc0:	00037a66 	.word	0x00037a66
   20fc4:	00038c3d 	.word	0x00038c3d

00020fc8 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   20fc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20fcc:	4e2f      	ldr	r6, [pc, #188]	; (2108c <arm_core_mpu_mark_areas_for_dynamic_regions+0xc4>)
   20fce:	4689      	mov	r9, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   20fd0:	4605      	mov	r5, r0
   20fd2:	f04f 0800 	mov.w	r8, #0
   20fd6:	46b3      	mov	fp, r6
	MPU->RNR = index;
   20fd8:	4f2d      	ldr	r7, [pc, #180]	; (21090 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   20fda:	45c8      	cmp	r8, r9
   20fdc:	db02      	blt.n	20fe4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
}
   20fde:	b003      	add	sp, #12
   20fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
   20fe4:	f8d5 a004 	ldr.w	sl, [r5, #4]
   20fe8:	f1ba 0f00 	cmp.w	sl, #0
   20fec:	d049      	beq.n	21082 <arm_core_mpu_mark_areas_for_dynamic_regions+0xba>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   20fee:	6829      	ldr	r1, [r5, #0]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   20ff0:	4608      	mov	r0, r1
   20ff2:	9101      	str	r1, [sp, #4]
   20ff4:	f012 fe36 	bl	33c64 <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   20ff8:	9901      	ldr	r1, [sp, #4]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   20ffa:	4604      	mov	r4, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   20ffc:	eb0a 0001 	add.w	r0, sl, r1
   21000:	3801      	subs	r0, #1
   21002:	f012 fe2f 	bl	33c64 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   21006:	4284      	cmp	r4, r0
   21008:	f04f 0214 	mov.w	r2, #20
   2100c:	4b21      	ldr	r3, [pc, #132]	; (21094 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
   2100e:	d018      	beq.n	21042 <arm_core_mpu_mark_areas_for_dynamic_regions+0x7a>
		dyn_reg_info[i].index =
   21010:	f06f 0315 	mvn.w	r3, #21
   21014:	fb02 f808 	mul.w	r8, r2, r8
   21018:	f84b 3008 	str.w	r3, [fp, r8]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   2101c:	f44f 7381 	mov.w	r3, #258	; 0x102
   21020:	4a1d      	ldr	r2, [pc, #116]	; (21098 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
   21022:	491e      	ldr	r1, [pc, #120]	; (2109c <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
   21024:	481e      	ldr	r0, [pc, #120]	; (210a0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
   21026:	f012 fa76 	bl	33516 <printk>
   2102a:	4649      	mov	r1, r9
   2102c:	481d      	ldr	r0, [pc, #116]	; (210a4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xdc>)
   2102e:	f012 fa72 	bl	33516 <printk>
   21032:	f44f 7181 	mov.w	r1, #258	; 0x102
   21036:	4818      	ldr	r0, [pc, #96]	; (21098 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
}
   21038:	b003      	add	sp, #12
   2103a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   2103e:	f012 bab0 	b.w	335a2 <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   21042:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   21046:	6034      	str	r4, [r6, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   21048:	d0e8      	beq.n	2101c <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   2104a:	7819      	ldrb	r1, [r3, #0]
   2104c:	42a1      	cmp	r1, r4
   2104e:	dde5      	ble.n	2101c <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
   21050:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
   21054:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
   21056:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
   21058:	68fc      	ldr	r4, [r7, #12]
   2105a:	f100 0108 	add.w	r1, r0, #8
   2105e:	7b00      	ldrb	r0, [r0, #12]
   21060:	f364 0004 	bfi	r0, r4, #0, #5
   21064:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   21066:	6938      	ldr	r0, [r7, #16]
   21068:	790c      	ldrb	r4, [r1, #4]
   2106a:	0840      	lsrs	r0, r0, #1
   2106c:	f360 1447 	bfi	r4, r0, #5, #3
   21070:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   21072:	68f9      	ldr	r1, [r7, #12]
   21074:	f021 011f 	bic.w	r1, r1, #31
   21078:	6071      	str	r1, [r6, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   2107a:	6939      	ldr	r1, [r7, #16]
   2107c:	f021 011f 	bic.w	r1, r1, #31
   21080:	6131      	str	r1, [r6, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   21082:	f108 0801 	add.w	r8, r8, #1
   21086:	3614      	adds	r6, #20
   21088:	350c      	adds	r5, #12
   2108a:	e7a6      	b.n	20fda <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   2108c:	20022170 	.word	0x20022170
   21090:	e000ed90 	.word	0xe000ed90
   21094:	200241f1 	.word	0x200241f1
   21098:	00038b57 	.word	0x00038b57
   2109c:	0003afd7 	.word	0x0003afd7
   210a0:	00037a66 	.word	0x00037a66
   210a4:	00038c69 	.word	0x00038c69

000210a8 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   210a8:	b570      	push	{r4, r5, r6, lr}
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct k_mem_partition
	*dynamic_regions[], u8_t regions_num)
{
	int mpu_reg_index = static_regions_num;
   210aa:	4b16      	ldr	r3, [pc, #88]	; (21104 <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
   210ac:	460c      	mov	r4, r1
   210ae:	781e      	ldrb	r6, [r3, #0]
   210b0:	4605      	mov	r5, r0
   210b2:	4633      	mov	r3, r6
  mpu->RLAR = 0U;
   210b4:	2100      	movs	r1, #0
  mpu->RNR = rnr;
   210b6:	4a14      	ldr	r2, [pc, #80]	; (21108 <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)

	/* Disable all MPU regions except for the static ones. */
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   210b8:	2b0f      	cmp	r3, #15
   210ba:	dd1d      	ble.n	210f8 <arm_core_mpu_configure_dynamic_mpu_regions+0x50>
#if defined(CONFIG_MPU_GAP_FILLING)
	/* Reset MPU regions inside which dynamic memory regions may
	 * be programmed.
	 */
	for (int i = 0; i < MPU_DYNAMIC_REGION_AREAS_NUM; i++) {
		region_init(dyn_reg_info[i].index,
   210bc:	4913      	ldr	r1, [pc, #76]	; (2110c <arm_core_mpu_configure_dynamic_mpu_regions+0x64>)
   210be:	f851 0b04 	ldr.w	r0, [r1], #4
   210c2:	f7ff fe09 	bl	20cd8 <region_init>

	/* In ARMv8-M architecture the dynamic regions are programmed on SRAM,
	 * forming a full partition of the background area, specified by the
	 * given boundaries.
	 */
	mpu_reg_index = mpu_configure_regions_and_partition(dynamic_regions,
   210c6:	4632      	mov	r2, r6
   210c8:	4621      	mov	r1, r4
   210ca:	4628      	mov	r0, r5
   210cc:	f7ff fe44 	bl	20d58 <mpu_configure_regions_and_partition.constprop.0>
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
   210d0:	3016      	adds	r0, #22
   210d2:	d115      	bne.n	21100 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   210d4:	f240 1311 	movw	r3, #273	; 0x111
   210d8:	4a0d      	ldr	r2, [pc, #52]	; (21110 <arm_core_mpu_configure_dynamic_mpu_regions+0x68>)
   210da:	490e      	ldr	r1, [pc, #56]	; (21114 <arm_core_mpu_configure_dynamic_mpu_regions+0x6c>)
   210dc:	480e      	ldr	r0, [pc, #56]	; (21118 <arm_core_mpu_configure_dynamic_mpu_regions+0x70>)
   210de:	f012 fa1a 	bl	33516 <printk>
   210e2:	4621      	mov	r1, r4
   210e4:	480d      	ldr	r0, [pc, #52]	; (2111c <arm_core_mpu_configure_dynamic_mpu_regions+0x74>)
   210e6:	f012 fa16 	bl	33516 <printk>
}
   210ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   210ee:	f240 1111 	movw	r1, #273	; 0x111
   210f2:	4807      	ldr	r0, [pc, #28]	; (21110 <arm_core_mpu_configure_dynamic_mpu_regions+0x68>)
   210f4:	f012 ba55 	b.w	335a2 <assert_post_action>
   210f8:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
   210fa:	6111      	str	r1, [r2, #16]
	for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   210fc:	3301      	adds	r3, #1
   210fe:	e7db      	b.n	210b8 <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
}
   21100:	bd70      	pop	{r4, r5, r6, pc}
   21102:	bf00      	nop
   21104:	200241f1 	.word	0x200241f1
   21108:	e000ed90 	.word	0xe000ed90
   2110c:	20022170 	.word	0x20022170
   21110:	00038b57 	.word	0x00038b57
   21114:	0003afd7 	.word	0x0003afd7
   21118:	00037a66 	.word	0x00037a66
   2111c:	00038c98 	.word	0x00038c98

00021120 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   21120:	4b01      	ldr	r3, [pc, #4]	; (21128 <__stdout_hook_install+0x8>)
   21122:	6018      	str	r0, [r3, #0]
}
   21124:	4770      	bx	lr
   21126:	bf00      	nop
   21128:	20029560 	.word	0x20029560

0002112c <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   2112c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2112e:	4606      	mov	r6, r0
   21130:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   21132:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
   21134:	4f06      	ldr	r7, [pc, #24]	; (21150 <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
   21136:	42ac      	cmp	r4, r5
   21138:	da08      	bge.n	2114c <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   2113a:	683b      	ldr	r3, [r7, #0]
   2113c:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   2113e:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   21140:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   21142:	f104 0401 	add.w	r4, r4, #1
   21146:	d001      	beq.n	2114c <z_impl_zephyr_read_stdin+0x20>
   21148:	280d      	cmp	r0, #13
   2114a:	d1f4      	bne.n	21136 <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   2114c:	4620      	mov	r0, r4
   2114e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21150:	2002955c 	.word	0x2002955c

00021154 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/z_zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   21154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21156:	460d      	mov	r5, r1
   21158:	4f09      	ldr	r7, [pc, #36]	; (21180 <z_impl_zephyr_write_stdout+0x2c>)
   2115a:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   2115c:	f1c0 0401 	rsb	r4, r0, #1
   21160:	19a3      	adds	r3, r4, r6
   21162:	429d      	cmp	r5, r3
   21164:	dc01      	bgt.n	2116a <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   21166:	4628      	mov	r0, r5
   21168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   2116a:	7873      	ldrb	r3, [r6, #1]
   2116c:	2b0a      	cmp	r3, #10
   2116e:	d102      	bne.n	21176 <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   21170:	200d      	movs	r0, #13
   21172:	683b      	ldr	r3, [r7, #0]
   21174:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   21176:	683b      	ldr	r3, [r7, #0]
   21178:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   2117c:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   2117e:	e7ef      	b.n	21160 <z_impl_zephyr_write_stdout+0xc>
   21180:	20029560 	.word	0x20029560

00021184 <_exit>:

int _write(int fd, const void *buf, int nbytes)
{
	ARG_UNUSED(fd);

	return z_impl_zephyr_write_stdout(buf, nbytes);
   21184:	2105      	movs	r1, #5
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
   21186:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
   21188:	4801      	ldr	r0, [pc, #4]	; (21190 <_exit+0xc>)
   2118a:	f7ff ffe3 	bl	21154 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
   2118e:	e7fe      	b.n	2118e <_exit+0xa>
   21190:	00038cc5 	.word	0x00038cc5

00021194 <_sbrk>:
}

static LIBC_DATA SYS_SEM_DEFINE(heap_sem, 1, 1);

void *_sbrk(int count)
{
   21194:	b510      	push	{r4, lr}
   21196:	4604      	mov	r4, r0
	void *ret, *ptr;

	sys_sem_take(&heap_sem, K_FOREVER);
   21198:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2119c:	480a      	ldr	r0, [pc, #40]	; (211c8 <_sbrk+0x34>)
   2119e:	f012 f9cc 	bl	3353a <sys_sem_take>

#if CONFIG_NEWLIB_LIBC_ALIGNED_HEAP_SIZE
	ptr = heap_base + heap_sz;
#else
	ptr = ((char *)HEAP_BASE) + heap_sz;
   211a2:	490a      	ldr	r1, [pc, #40]	; (211cc <_sbrk+0x38>)
   211a4:	680b      	ldr	r3, [r1, #0]
#endif

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   211a6:	18e0      	adds	r0, r4, r3
   211a8:	4c09      	ldr	r4, [pc, #36]	; (211d0 <_sbrk+0x3c>)
   211aa:	f1c4 5200 	rsb	r2, r4, #536870912	; 0x20000000
   211ae:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   211b2:	4290      	cmp	r0, r2
		heap_sz += count;
		ret = ptr;
	} else {
		ret = (void *)-1;
   211b4:	bf2e      	itee	cs
   211b6:	f04f 34ff 	movcs.w	r4, #4294967295	; 0xffffffff
	ptr = ((char *)HEAP_BASE) + heap_sz;
   211ba:	18e4      	addcc	r4, r4, r3
		heap_sz += count;
   211bc:	6008      	strcc	r0, [r1, #0]
	}

	sys_sem_give(&heap_sem);
   211be:	4802      	ldr	r0, [pc, #8]	; (211c8 <_sbrk+0x34>)
   211c0:	f012 f9b6 	bl	33530 <sys_sem_give>

	return ret;
}
   211c4:	4620      	mov	r0, r4
   211c6:	bd10      	pop	{r4, pc}
   211c8:	200298a0 	.word	0x200298a0
   211cc:	20022184 	.word	0x20022184
   211d0:	2002995c 	.word	0x2002995c

000211d4 <net_if_flag_is_set>:
 *
 * @return True if the value is set, false otherwise
 */
static inline bool net_if_flag_is_set(struct net_if *iface,
				      enum net_if_flag value)
{
   211d4:	b538      	push	{r3, r4, r5, lr}
   211d6:	460d      	mov	r5, r1
	NET_ASSERT(iface);
   211d8:	4604      	mov	r4, r0
   211da:	b970      	cbnz	r0, 211fa <net_if_flag_is_set+0x26>
   211dc:	490b      	ldr	r1, [pc, #44]	; (2120c <net_if_flag_is_set+0x38>)
   211de:	f240 2311 	movw	r3, #529	; 0x211
   211e2:	4a0b      	ldr	r2, [pc, #44]	; (21210 <net_if_flag_is_set+0x3c>)
   211e4:	480b      	ldr	r0, [pc, #44]	; (21214 <net_if_flag_is_set+0x40>)
   211e6:	f012 f996 	bl	33516 <printk>
   211ea:	480b      	ldr	r0, [pc, #44]	; (21218 <net_if_flag_is_set+0x44>)
   211ec:	f012 f993 	bl	33516 <printk>
   211f0:	f240 2111 	movw	r1, #529	; 0x211
   211f4:	4806      	ldr	r0, [pc, #24]	; (21210 <net_if_flag_is_set+0x3c>)
   211f6:	f012 f9d4 	bl	335a2 <assert_post_action>
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   211fa:	6823      	ldr	r3, [r4, #0]
   211fc:	330c      	adds	r3, #12
   211fe:	e8d3 0faf 	lda	r0, [r3]
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   21202:	4128      	asrs	r0, r5

	return atomic_test_bit(iface->if_dev->flags, value);
}
   21204:	f000 0001 	and.w	r0, r0, #1
   21208:	bd38      	pop	{r3, r4, r5, pc}
   2120a:	bf00      	nop
   2120c:	00038d0a 	.word	0x00038d0a
   21210:	00038ce2 	.word	0x00038ce2
   21214:	00037a66 	.word	0x00037a66
   21218:	00038d10 	.word	0x00038d10

0002121c <net_if_flag_set.constprop.0>:
static inline void net_if_flag_set(struct net_if *iface,
   2121c:	b510      	push	{r4, lr}
	NET_ASSERT(iface);
   2121e:	4604      	mov	r4, r0
   21220:	b970      	cbnz	r0, 21240 <net_if_flag_set.constprop.0+0x24>
   21222:	490d      	ldr	r1, [pc, #52]	; (21258 <net_if_flag_set.constprop.0+0x3c>)
   21224:	f240 13e3 	movw	r3, #483	; 0x1e3
   21228:	4a0c      	ldr	r2, [pc, #48]	; (2125c <net_if_flag_set.constprop.0+0x40>)
   2122a:	480d      	ldr	r0, [pc, #52]	; (21260 <net_if_flag_set.constprop.0+0x44>)
   2122c:	f012 f973 	bl	33516 <printk>
   21230:	480c      	ldr	r0, [pc, #48]	; (21264 <net_if_flag_set.constprop.0+0x48>)
   21232:	f012 f970 	bl	33516 <printk>
   21236:	f240 11e3 	movw	r1, #483	; 0x1e3
   2123a:	4808      	ldr	r0, [pc, #32]	; (2125c <net_if_flag_set.constprop.0+0x40>)
   2123c:	f012 f9b1 	bl	335a2 <assert_post_action>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   21240:	6823      	ldr	r3, [r4, #0]
   21242:	330c      	adds	r3, #12
   21244:	e8d3 2fef 	ldaex	r2, [r3]
   21248:	f042 0201 	orr.w	r2, r2, #1
   2124c:	e8c3 2fe1 	stlex	r1, r2, [r3]
   21250:	2900      	cmp	r1, #0
   21252:	d1f7      	bne.n	21244 <net_if_flag_set.constprop.0+0x28>
}
   21254:	bd10      	pop	{r4, pc}
   21256:	bf00      	nop
   21258:	00038d0a 	.word	0x00038d0a
   2125c:	00038ce2 	.word	0x00038ce2
   21260:	00037a66 	.word	0x00037a66
   21264:	00038d10 	.word	0x00038d10

00021268 <net_if_up>:
		cb(iface, user_data);
	}
}

int net_if_up(struct net_if *iface)
{
   21268:	b538      	push	{r3, r4, r5, lr}
	int status;

	NET_DBG("iface %p", iface);

	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   2126a:	2100      	movs	r1, #0
{
   2126c:	4605      	mov	r5, r0
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   2126e:	f7ff ffb1 	bl	211d4 <net_if_flag_is_set>
   21272:	b928      	cbnz	r0, 21280 <net_if_up+0x18>
 * @return True if socket offloading is active, false otherwise.
 */
static inline bool net_if_is_socket_offloaded(struct net_if *iface)
{
#if defined(CONFIG_NET_SOCKETS_OFFLOAD)
	return iface->if_dev->offloaded;
   21274:	682b      	ldr	r3, [r5, #0]

	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
	     net_if_is_ip_offloaded(iface)) ||
	    (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD) &&
	     net_if_is_socket_offloaded(iface))) {
		net_if_flag_set(iface, NET_IF_UP);
   21276:	4628      	mov	r0, r5
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   21278:	7e9b      	ldrb	r3, [r3, #26]
   2127a:	b11b      	cbz	r3, 21284 <net_if_up+0x1c>
		net_if_flag_set(iface, NET_IF_UP);
   2127c:	f7ff ffce 	bl	2121c <net_if_flag_set.constprop.0>
		return 0;
   21280:	2000      	movs	r0, #0
   21282:	e023      	b.n	212cc <net_if_up+0x64>
		goto exit;
	}

	/* If the L2 does not support enable just set the flag */
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   21284:	f012 fd1e 	bl	33cc4 <net_if_l2>
   21288:	b9c0      	cbnz	r0, 212bc <net_if_up+0x54>

done:
	/* In many places it's assumed that link address was set with
	 * net_if_set_link_addr(). Better check that now.
	 */
	NET_ASSERT(net_if_get_link_addr(iface)->addr != NULL);
   2128a:	682b      	ldr	r3, [r5, #0]
   2128c:	691b      	ldr	r3, [r3, #16]
   2128e:	b973      	cbnz	r3, 212ae <net_if_up+0x46>
   21290:	490f      	ldr	r1, [pc, #60]	; (212d0 <net_if_up+0x68>)
   21292:	f640 538f 	movw	r3, #3471	; 0xd8f
   21296:	4a0f      	ldr	r2, [pc, #60]	; (212d4 <net_if_up+0x6c>)
   21298:	480f      	ldr	r0, [pc, #60]	; (212d8 <net_if_up+0x70>)
   2129a:	f012 f93c 	bl	33516 <printk>
   2129e:	480f      	ldr	r0, [pc, #60]	; (212dc <net_if_up+0x74>)
   212a0:	f012 f939 	bl	33516 <printk>
   212a4:	f640 518f 	movw	r1, #3471	; 0xd8f
   212a8:	480a      	ldr	r0, [pc, #40]	; (212d4 <net_if_up+0x6c>)
   212aa:	f012 f97a 	bl	335a2 <assert_post_action>

	net_if_flag_set(iface, NET_IF_UP);
   212ae:	4628      	mov	r0, r5
   212b0:	f7ff ffb4 	bl	2121c <net_if_flag_set.constprop.0>

	/* If the interface is only having point-to-point traffic then we do
	 * not need to run DAD etc for it.
	 */
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   212b4:	4628      	mov	r0, r5
   212b6:	f012 fd0a 	bl	33cce <l2_flags_get>
   212ba:	e7e1      	b.n	21280 <net_if_up+0x18>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   212bc:	6883      	ldr	r3, [r0, #8]
   212be:	2b00      	cmp	r3, #0
   212c0:	d0e3      	beq.n	2128a <net_if_up+0x22>
	status = net_if_l2(iface)->enable(iface, true);
   212c2:	2101      	movs	r1, #1
   212c4:	4628      	mov	r0, r5
   212c6:	4798      	blx	r3
	if (status < 0) {
   212c8:	2800      	cmp	r0, #0
   212ca:	dade      	bge.n	2128a <net_if_up+0x22>

exit:
	net_mgmt_event_notify(NET_EVENT_IF_UP, iface);

	return 0;
}
   212cc:	bd38      	pop	{r3, r4, r5, pc}
   212ce:	bf00      	nop
   212d0:	00038d3d 	.word	0x00038d3d
   212d4:	00038d13 	.word	0x00038d13
   212d8:	00037a66 	.word	0x00037a66
   212dc:	00038d10 	.word	0x00038d10

000212e0 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   212e0:	b538      	push	{r3, r4, r5, lr}

	NET_DBG("");

	net_tc_tx_init();

	for (iface = __net_if_start, if_count = 0; iface != __net_if_end;
   212e2:	4c07      	ldr	r4, [pc, #28]	; (21300 <net_if_init+0x20>)
   212e4:	4d07      	ldr	r5, [pc, #28]	; (21304 <net_if_init+0x24>)
   212e6:	42ac      	cmp	r4, r5
   212e8:	d100      	bne.n	212ec <net_if_init+0xc>
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
   212ea:	bd38      	pop	{r3, r4, r5, pc}
	return iface->if_dev->dev;
   212ec:	6823      	ldr	r3, [r4, #0]
	const struct net_if_api *api = net_if_get_device(iface)->driver_api;
   212ee:	681b      	ldr	r3, [r3, #0]
   212f0:	685b      	ldr	r3, [r3, #4]
	if (!api || !api->init) {
   212f2:	b11b      	cbz	r3, 212fc <net_if_init+0x1c>
   212f4:	681b      	ldr	r3, [r3, #0]
   212f6:	b10b      	cbz	r3, 212fc <net_if_init+0x1c>
	api->init(iface);
   212f8:	4620      	mov	r0, r4
   212fa:	4798      	blx	r3
	     iface++, if_count++) {
   212fc:	3420      	adds	r4, #32
   212fe:	e7f2      	b.n	212e6 <net_if_init+0x6>
   21300:	20029920 	.word	0x20029920
   21304:	20029940 	.word	0x20029940

00021308 <net_if_post_init>:

void net_if_post_init(void)
{
   21308:	b538      	push	{r3, r4, r5, lr}
	struct net_if *iface;

	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   2130a:	4c07      	ldr	r4, [pc, #28]	; (21328 <net_if_post_init+0x20>)
   2130c:	4d07      	ldr	r5, [pc, #28]	; (2132c <net_if_post_init+0x24>)
   2130e:	42ac      	cmp	r4, r5
   21310:	d100      	bne.n	21314 <net_if_post_init+0xc>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   21312:	bd38      	pop	{r3, r4, r5, pc}
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   21314:	2103      	movs	r1, #3
   21316:	4620      	mov	r0, r4
   21318:	f7ff ff5c 	bl	211d4 <net_if_flag_is_set>
   2131c:	b910      	cbnz	r0, 21324 <net_if_post_init+0x1c>
			net_if_up(iface);
   2131e:	4620      	mov	r0, r4
   21320:	f7ff ffa2 	bl	21268 <net_if_up>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   21324:	3420      	adds	r4, #32
   21326:	e7f2      	b.n	2130e <net_if_post_init+0x6>
   21328:	20029920 	.word	0x20029920
   2132c:	20029940 	.word	0x20029940

00021330 <z_impl_net_addr_ntop>:
	struct in6_addr *addr6;
	u16_t *w;
	u8_t i, bl, bh, longest = 1U;
	s8_t pos = -1;
	char delim = ':';
	unsigned char zeros[8] = { 0 };
   21330:	2300      	movs	r3, #0
{
   21332:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char *ptr = dst;
	int len = -1;
	u16_t value;
	bool needcolon = false;

	if (family == AF_INET6) {
   21336:	2802      	cmp	r0, #2
{
   21338:	b089      	sub	sp, #36	; 0x24
   2133a:	4607      	mov	r7, r0
   2133c:	4616      	mov	r6, r2
	unsigned char zeros[8] = { 0 };
   2133e:	e9cd 3306 	strd	r3, r3, [sp, #24]
{
   21342:	9104      	str	r1, [sp, #16]
	if (family == AF_INET6) {
   21344:	d13e      	bne.n	213c4 <z_impl_net_addr_ntop+0x94>
		addr6 = (struct in6_addr *)src;
		w = (u16_t *)addr6->s6_addr16;
   21346:	a806      	add	r0, sp, #24
   21348:	9105      	str	r1, [sp, #20]
   2134a:	4601      	mov	r1, r0
{
   2134c:	461a      	mov	r2, r3
   2134e:	e006      	b.n	2135e <z_impl_net_addr_ntop+0x2e>
			for (j = i; j < 8; j++) {
				if (UNALIGNED_GET(&w[j]) != 0) {
					break;
				}

				zeros[i]++;
   21350:	780c      	ldrb	r4, [r1, #0]
   21352:	3201      	adds	r2, #1
   21354:	3401      	adds	r4, #1
   21356:	700c      	strb	r4, [r1, #0]
			for (j = i; j < 8; j++) {
   21358:	b2d4      	uxtb	r4, r2
   2135a:	2c07      	cmp	r4, #7
   2135c:	d804      	bhi.n	21368 <z_impl_net_addr_ntop+0x38>
				if (UNALIGNED_GET(&w[j]) != 0) {
   2135e:	9c04      	ldr	r4, [sp, #16]
   21360:	f834 4012 	ldrh.w	r4, [r4, r2, lsl #1]
   21364:	2c00      	cmp	r4, #0
   21366:	d0f3      	beq.n	21350 <z_impl_net_addr_ntop+0x20>
		for (i = 0U; i < 8; i++) {
   21368:	3301      	adds	r3, #1
   2136a:	2b08      	cmp	r3, #8
   2136c:	f101 0101 	add.w	r1, r1, #1
   21370:	d1ec      	bne.n	2134c <z_impl_net_addr_ntop+0x1c>
	s8_t pos = -1;
   21372:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	u8_t i, bl, bh, longest = 1U;
   21376:	f04f 0901 	mov.w	r9, #1
			}
		}

		for (i = 0U; i < 8; i++) {
   2137a:	2300      	movs	r3, #0
			if (zeros[i] > longest) {
   2137c:	f810 2b01 	ldrb.w	r2, [r0], #1
   21380:	454a      	cmp	r2, r9
				longest = zeros[i];
				pos = i;
   21382:	bf88      	it	hi
   21384:	fa4f f883 	sxtbhi.w	r8, r3
		for (i = 0U; i < 8; i++) {
   21388:	f103 0301 	add.w	r3, r3, #1
   2138c:	b2db      	uxtb	r3, r3
				pos = i;
   2138e:	bf88      	it	hi
   21390:	4691      	movhi	r9, r2
		for (i = 0U; i < 8; i++) {
   21392:	2b08      	cmp	r3, #8
   21394:	d1f2      	bne.n	2137c <z_impl_net_addr_ntop+0x4c>
		len = 8;
   21396:	469b      	mov	fp, r3
   21398:	f1b9 0f01 	cmp.w	r9, #1
   2139c:	f04f 033a 	mov.w	r3, #58	; 0x3a
   213a0:	bf08      	it	eq
   213a2:	f04f 38ff 	moveq.w	r8, #4294967295	; 0xffffffff
   213a6:	9303      	str	r3, [sp, #12]
	bool needcolon = false;
   213a8:	2100      	movs	r1, #0
		delim = '.';
	} else {
		return NULL;
	}

	for (i = 0U; i < len; i++) {
   213aa:	4634      	mov	r4, r6
   213ac:	460d      	mov	r5, r1
   213ae:	455d      	cmp	r5, fp
   213b0:	db17      	blt.n	213e2 <z_impl_net_addr_ntop+0xb2>
		}

		needcolon = true;
	}

	if (!(ptr - dst)) {
   213b2:	42b4      	cmp	r4, r6
   213b4:	d008      	beq.n	213c8 <z_impl_net_addr_ntop+0x98>
		return NULL;
	}

	if (family == AF_INET) {
   213b6:	2300      	movs	r3, #0
   213b8:	2f01      	cmp	r7, #1
		*(ptr - 1) = '\0';
   213ba:	bf0c      	ite	eq
   213bc:	f804 3c01 	strbeq.w	r3, [r4, #-1]
	} else {
		*ptr = '\0';
   213c0:	7023      	strbne	r3, [r4, #0]
   213c2:	e002      	b.n	213ca <z_impl_net_addr_ntop+0x9a>
	} else if (family == AF_INET) {
   213c4:	2801      	cmp	r0, #1
   213c6:	d004      	beq.n	213d2 <z_impl_net_addr_ntop+0xa2>
		return NULL;
   213c8:	2600      	movs	r6, #0
	}

	return dst;
}
   213ca:	4630      	mov	r0, r6
   213cc:	b009      	add	sp, #36	; 0x24
   213ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		delim = '.';
   213d2:	232e      	movs	r3, #46	; 0x2e
		len = 4;
   213d4:	f04f 0b04 	mov.w	fp, #4
	s8_t pos = -1;
   213d8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	u8_t i, bl, bh, longest = 1U;
   213dc:	4681      	mov	r9, r0
		delim = '.';
   213de:	9303      	str	r3, [sp, #12]
   213e0:	e7e2      	b.n	213a8 <z_impl_net_addr_ntop+0x78>
		if (len == 4) {
   213e2:	f1bb 0f04 	cmp.w	fp, #4
   213e6:	d13b      	bne.n	21460 <z_impl_net_addr_ntop+0x130>
			value = (u32_t)addr->s4_addr[i];
   213e8:	9b04      	ldr	r3, [sp, #16]
   213ea:	5d5a      	ldrb	r2, [r3, r5]
			if (value == 0U) {
   213ec:	b94a      	cbnz	r2, 21402 <z_impl_net_addr_ntop+0xd2>
				*ptr++ = '0';
   213ee:	2330      	movs	r3, #48	; 0x30
   213f0:	4620      	mov	r0, r4
   213f2:	f800 3b02 	strb.w	r3, [r0], #2
				*ptr++ = delim;
   213f6:	9b03      	ldr	r3, [sp, #12]
   213f8:	7063      	strb	r3, [r4, #1]
	for (i = 0U; i < len; i++) {
   213fa:	3501      	adds	r5, #1
   213fc:	4604      	mov	r4, r0
   213fe:	b2ed      	uxtb	r5, r5
   21400:	e7d5      	b.n	213ae <z_impl_net_addr_ntop+0x7e>
			l = net_value_to_udec(ptr, value, 0);
   21402:	f04f 0e09 	mov.w	lr, #9
   21406:	f04f 0a00 	mov.w	sl, #0
   2140a:	e9cd 2401 	strd	r2, r4, [sp, #4]
   2140e:	483a      	ldr	r0, [pc, #232]	; (214f8 <z_impl_net_addr_ntop+0x1c8>)
		value = value % divisor;
   21410:	f8dd c004 	ldr.w	ip, [sp, #4]
		if ((precision > i) || (temp != 0)) {
   21414:	45f2      	cmp	sl, lr
		value = value % divisor;
   21416:	fbbc f2f0 	udiv	r2, ip, r0
   2141a:	fb00 c212 	mls	r2, r0, r2, ip
   2141e:	9201      	str	r2, [sp, #4]
		if ((precision > i) || (temp != 0)) {
   21420:	dc01      	bgt.n	21426 <z_impl_net_addr_ntop+0xf6>
   21422:	4584      	cmp	ip, r0
   21424:	d308      	bcc.n	21438 <z_impl_net_addr_ntop+0x108>
		temp = value / divisor;
   21426:	fbbc fcf0 	udiv	ip, ip, r0
			*buf++ = (char) (temp + '0');
   2142a:	46f2      	mov	sl, lr
   2142c:	9b02      	ldr	r3, [sp, #8]
   2142e:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
   21432:	f803 cb01 	strb.w	ip, [r3], #1
   21436:	9302      	str	r3, [sp, #8]
	for (i = 9; i >= 0; i--, divisor /= 10U) {
   21438:	220a      	movs	r2, #10
   2143a:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
   2143e:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
   21442:	fbb0 f0f2 	udiv	r0, r0, r2
   21446:	d1e3      	bne.n	21410 <z_impl_net_addr_ntop+0xe0>
	*buf = 0;
   21448:	f04f 0200 	mov.w	r2, #0
   2144c:	9b02      	ldr	r3, [sp, #8]
   2144e:	701a      	strb	r2, [r3, #0]
	return buf - start;
   21450:	1b1b      	subs	r3, r3, r4
			ptr += l;
   21452:	b2da      	uxtb	r2, r3
   21454:	fa54 f383 	uxtab	r3, r4, r3
			*ptr++ = delim;
   21458:	1c58      	adds	r0, r3, #1
   2145a:	9b03      	ldr	r3, [sp, #12]
   2145c:	54a3      	strb	r3, [r4, r2]
			continue;
   2145e:	e7cc      	b.n	213fa <z_impl_net_addr_ntop+0xca>
		if (i == pos) {
   21460:	45a8      	cmp	r8, r5
   21462:	d110      	bne.n	21486 <z_impl_net_addr_ntop+0x156>
			if (needcolon || i == 0U) {
   21464:	b911      	cbnz	r1, 2146c <z_impl_net_addr_ntop+0x13c>
   21466:	f1b8 0f00 	cmp.w	r8, #0
   2146a:	d102      	bne.n	21472 <z_impl_net_addr_ntop+0x142>
				*ptr++ = ':';
   2146c:	233a      	movs	r3, #58	; 0x3a
   2146e:	f804 3b01 	strb.w	r3, [r4], #1
			*ptr++ = ':';
   21472:	233a      	movs	r3, #58	; 0x3a
   21474:	4620      	mov	r0, r4
   21476:	f800 3b01 	strb.w	r3, [r0], #1
			i += longest - 1U;
   2147a:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
   2147e:	441d      	add	r5, r3
			needcolon = false;
   21480:	2100      	movs	r1, #0
			i += longest - 1U;
   21482:	b2ed      	uxtb	r5, r5
			continue;
   21484:	e7b9      	b.n	213fa <z_impl_net_addr_ntop+0xca>
		if (needcolon) {
   21486:	b111      	cbz	r1, 2148e <z_impl_net_addr_ntop+0x15e>
			*ptr++ = ':';
   21488:	233a      	movs	r3, #58	; 0x3a
   2148a:	f804 3b01 	strb.w	r3, [r4], #1
		value = (u32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   2148e:	9b05      	ldr	r3, [sp, #20]
   21490:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
   21494:	0219      	lsls	r1, r3, #8
   21496:	ea41 2113 	orr.w	r1, r1, r3, lsr #8
		if (bh) {
   2149a:	f411 4f7f 	tst.w	r1, #65280	; 0xff00
		value = (u32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   2149e:	b20a      	sxth	r2, r1
		bh = value >> 8;
   214a0:	f3c1 2307 	ubfx	r3, r1, #8, #8
		bl = value & 0xff;
   214a4:	fa5f fa81 	uxtb.w	sl, r1
		if (bh) {
   214a8:	d016      	beq.n	214d8 <z_impl_net_addr_ntop+0x1a8>
			if (bh > 0x0f) {
   214aa:	2b0f      	cmp	r3, #15
		bh = value >> 8;
   214ac:	b2d9      	uxtb	r1, r3
			if (bh > 0x0f) {
   214ae:	d90b      	bls.n	214c8 <z_impl_net_addr_ntop+0x198>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
   214b0:	2300      	movs	r3, #0
   214b2:	2261      	movs	r2, #97	; 0x61
   214b4:	4620      	mov	r0, r4
   214b6:	f012 fc17 	bl	33ce8 <net_byte_to_hex>
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
   214ba:	2301      	movs	r3, #1
   214bc:	2261      	movs	r2, #97	; 0x61
   214be:	4651      	mov	r1, sl
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   214c0:	f012 fc12 	bl	33ce8 <net_byte_to_hex>
		needcolon = true;
   214c4:	2101      	movs	r1, #1
   214c6:	e798      	b.n	213fa <z_impl_net_addr_ntop+0xca>
				if (bh < 10) {
   214c8:	b25b      	sxtb	r3, r3
   214ca:	2909      	cmp	r1, #9
					*ptr++ = (char)(bh + '0');
   214cc:	bf94      	ite	ls
   214ce:	3330      	addls	r3, #48	; 0x30
					*ptr++ = (char) (bh - 10 + 'a');
   214d0:	3357      	addhi	r3, #87	; 0x57
   214d2:	1c60      	adds	r0, r4, #1
   214d4:	7023      	strb	r3, [r4, #0]
   214d6:	e7f0      	b.n	214ba <z_impl_net_addr_ntop+0x18a>
		} else if (bl > 0x0f) {
   214d8:	f1ba 0f0f 	cmp.w	sl, #15
   214dc:	d903      	bls.n	214e6 <z_impl_net_addr_ntop+0x1b6>
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   214de:	2261      	movs	r2, #97	; 0x61
   214e0:	4651      	mov	r1, sl
   214e2:	4620      	mov	r0, r4
   214e4:	e7ec      	b.n	214c0 <z_impl_net_addr_ntop+0x190>
			if (bl < 10) {
   214e6:	b253      	sxtb	r3, r2
   214e8:	f1ba 0f09 	cmp.w	sl, #9
				*ptr++ = (char)(bl + '0');
   214ec:	bf94      	ite	ls
   214ee:	3330      	addls	r3, #48	; 0x30
				*ptr++ = (char) (bl - 10 + 'a');
   214f0:	3357      	addhi	r3, #87	; 0x57
   214f2:	1c60      	adds	r0, r4, #1
   214f4:	7023      	strb	r3, [r4, #0]
   214f6:	e7e5      	b.n	214c4 <z_impl_net_addr_ntop+0x194>
   214f8:	3b9aca00 	.word	0x3b9aca00

000214fc <connect_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int connect_request_encode(const struct mqtt_client *client,
			   struct buf_ctx *buf)
{
   214fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	} else {
		mqtt_proto_desc = &mqtt_3_1_0_proto_desc;
	}

	/* Reserve space for fixed header. */
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   21500:	680d      	ldr	r5, [r1, #0]
	u8_t connect_flags = client->clean_session << 1;
   21502:	f890 4078 	ldrb.w	r4, [r0, #120]	; 0x78
	start = buf->cur;

	MQTT_TRC("Encoding Protocol Description. Str:%s Size:%08x.",
		 mqtt_proto_desc->utf8, mqtt_proto_desc->size);

	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   21506:	4b3b      	ldr	r3, [pc, #236]	; (215f4 <connect_request_encode+0xf8>)
   21508:	4a3b      	ldr	r2, [pc, #236]	; (215f8 <connect_request_encode+0xfc>)
{
   2150a:	4607      	mov	r7, r0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   2150c:	f890 0076 	ldrb.w	r0, [r0, #118]	; 0x76
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   21510:	3505      	adds	r5, #5
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   21512:	2804      	cmp	r0, #4
   21514:	bf0c      	ite	eq
   21516:	4610      	moveq	r0, r2
   21518:	4618      	movne	r0, r3
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   2151a:	600d      	str	r5, [r1, #0]
{
   2151c:	4688      	mov	r8, r1
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   2151e:	f012 fccf 	bl	33ec0 <pack_utf8_str>
	u8_t connect_flags = client->clean_session << 1;
   21522:	f3c4 0440 	ubfx	r4, r4, #1, #1
	if (err_code != 0) {
   21526:	4603      	mov	r3, r0
   21528:	b938      	cbnz	r0, 2153a <connect_request_encode+0x3e>
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   2152a:	e9d8 2000 	ldrd	r2, r0, [r8]
   2152e:	4290      	cmp	r0, r2
		return err_code;
	}

	MQTT_TRC("Encoding Protocol Version %02x.", client->protocol_version);
	err_code = pack_uint8(client->protocol_version, buf);
   21530:	f897 1076 	ldrb.w	r1, [r7, #118]	; 0x76
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   21534:	d104      	bne.n	21540 <connect_request_encode+0x44>
		return -ENOMEM;
   21536:	f06f 030b 	mvn.w	r3, #11

	/* Write the flags the connect flags. */
	*connect_flags_pos = connect_flags;

	return mqtt_encode_fixed_header(message_type, start, buf);
}
   2153a:	4618      	mov	r0, r3
   2153c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*(buf->cur++) = val;
   21540:	1c50      	adds	r0, r2, #1
   21542:	f8c8 0000 	str.w	r0, [r8]
   21546:	7011      	strb	r1, [r2, #0]
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   21548:	e9d8 6200 	ldrd	r6, r2, [r8]
   2154c:	4296      	cmp	r6, r2
   2154e:	d0f2      	beq.n	21536 <connect_request_encode+0x3a>
	*(buf->cur++) = val;
   21550:	1c72      	adds	r2, r6, #1
   21552:	f8c8 2000 	str.w	r2, [r8]
   21556:	7033      	strb	r3, [r6, #0]
	err_code = pack_uint16(client->keepalive, buf);
   21558:	4641      	mov	r1, r8
   2155a:	f8b7 0074 	ldrh.w	r0, [r7, #116]	; 0x74
   2155e:	f012 fc9d 	bl	33e9c <pack_uint16>
	if (err_code != 0) {
   21562:	4603      	mov	r3, r0
   21564:	2800      	cmp	r0, #0
   21566:	d1e8      	bne.n	2153a <connect_request_encode+0x3e>
	err_code = pack_utf8_str(&client->client_id, buf);
   21568:	f107 0044 	add.w	r0, r7, #68	; 0x44
   2156c:	f012 fca8 	bl	33ec0 <pack_utf8_str>
	if (err_code != 0) {
   21570:	4603      	mov	r3, r0
   21572:	2800      	cmp	r0, #0
   21574:	d1e1      	bne.n	2153a <connect_request_encode+0x3e>
	if (client->will_topic != NULL) {
   21576:	6db8      	ldr	r0, [r7, #88]	; 0x58
	u8_t connect_flags = client->clean_session << 1;
   21578:	0064      	lsls	r4, r4, #1
	if (client->will_topic != NULL) {
   2157a:	b1d8      	cbz	r0, 215b4 <connect_request_encode+0xb8>
		connect_flags |= client->will_retain << 5;
   2157c:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
		connect_flags |= MQTT_CONNECT_FLAG_WILL_TOPIC;
   21580:	f044 0404 	orr.w	r4, r4, #4
		connect_flags |= client->will_retain << 5;
   21584:	f003 0301 	and.w	r3, r3, #1
   21588:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   2158c:	7a03      	ldrb	r3, [r0, #8]
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   2158e:	4641      	mov	r1, r8
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   21590:	00db      	lsls	r3, r3, #3
   21592:	f003 0318 	and.w	r3, r3, #24
		connect_flags |= client->will_retain << 5;
   21596:	431c      	orrs	r4, r3
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   21598:	f012 fc92 	bl	33ec0 <pack_utf8_str>
		if (err_code != 0) {
   2159c:	4603      	mov	r3, r0
   2159e:	2800      	cmp	r0, #0
   215a0:	d1cb      	bne.n	2153a <connect_request_encode+0x3e>
		if (client->will_message != NULL) {
   215a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
			err_code = pack_utf8_str(client->will_message, buf);
   215a4:	4641      	mov	r1, r8
		if (client->will_message != NULL) {
   215a6:	b30b      	cbz	r3, 215ec <connect_request_encode+0xf0>
			err_code = pack_utf8_str(client->will_message, buf);
   215a8:	4618      	mov	r0, r3
   215aa:	f012 fc89 	bl	33ec0 <pack_utf8_str>
			if (err_code != 0) {
   215ae:	4603      	mov	r3, r0
   215b0:	2800      	cmp	r0, #0
   215b2:	d1c2      	bne.n	2153a <connect_request_encode+0x3e>
	if (client->user_name != NULL) {
   215b4:	6d38      	ldr	r0, [r7, #80]	; 0x50
   215b6:	b138      	cbz	r0, 215c8 <connect_request_encode+0xcc>
		err_code = pack_utf8_str(client->user_name, buf);
   215b8:	4641      	mov	r1, r8
   215ba:	f012 fc81 	bl	33ec0 <pack_utf8_str>
		if (err_code != 0) {
   215be:	4603      	mov	r3, r0
   215c0:	2800      	cmp	r0, #0
   215c2:	d1ba      	bne.n	2153a <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_USERNAME;
   215c4:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	if (client->password != NULL) {
   215c8:	6d78      	ldr	r0, [r7, #84]	; 0x54
   215ca:	b138      	cbz	r0, 215dc <connect_request_encode+0xe0>
		err_code = pack_utf8_str(client->password, buf);
   215cc:	4641      	mov	r1, r8
   215ce:	f012 fc77 	bl	33ec0 <pack_utf8_str>
		if (err_code != 0) {
   215d2:	4603      	mov	r3, r0
   215d4:	2800      	cmp	r0, #0
   215d6:	d1b0      	bne.n	2153a <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_PASSWORD;
   215d8:	f044 0440 	orr.w	r4, r4, #64	; 0x40
	*connect_flags_pos = connect_flags;
   215dc:	7034      	strb	r4, [r6, #0]
	return mqtt_encode_fixed_header(message_type, start, buf);
   215de:	4642      	mov	r2, r8
   215e0:	4629      	mov	r1, r5
}
   215e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   215e6:	2010      	movs	r0, #16
   215e8:	f012 bc85 	b.w	33ef6 <mqtt_encode_fixed_header>
	return pack_uint16(0x0000, buf);
   215ec:	f012 fc56 	bl	33e9c <pack_uint16>
   215f0:	e7dd      	b.n	215ae <connect_request_encode+0xb2>
   215f2:	bf00      	nop
   215f4:	00037050 	.word	0x00037050
   215f8:	00037058 	.word	0x00037058

000215fc <disconnect_encode>:
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
}

int disconnect_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(disc_packet)) {
   215fc:	e9d0 2300 	ldrd	r2, r3, [r0]
   21600:	1a9b      	subs	r3, r3, r2
   21602:	2b01      	cmp	r3, #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   21604:	bf81      	itttt	hi
   21606:	4b05      	ldrhi	r3, [pc, #20]	; (2161c <disconnect_encode+0x20>)
   21608:	881b      	ldrhhi	r3, [r3, #0]
   2160a:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, disc_packet, sizeof(disc_packet));
	buf->end = buf->cur + sizeof(disc_packet);
   2160c:	6803      	ldrhi	r3, [r0, #0]
   2160e:	bf83      	ittte	hi
   21610:	3302      	addhi	r3, #2
   21612:	6043      	strhi	r3, [r0, #4]

	return 0;
   21614:	2000      	movhi	r0, #0
		return -ENOMEM;
   21616:	f06f 000b 	mvnls.w	r0, #11
}
   2161a:	4770      	bx	lr
   2161c:	00038d6e 	.word	0x00038d6e

00021620 <ping_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int ping_request_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(ping_packet)) {
   21620:	e9d0 2300 	ldrd	r2, r3, [r0]
   21624:	1a9b      	subs	r3, r3, r2
   21626:	2b01      	cmp	r3, #1
   21628:	bf81      	itttt	hi
   2162a:	4b05      	ldrhi	r3, [pc, #20]	; (21640 <ping_request_encode+0x20>)
   2162c:	881b      	ldrhhi	r3, [r3, #0]
   2162e:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, ping_packet, sizeof(ping_packet));
	buf->end = buf->cur + sizeof(ping_packet);
   21630:	6803      	ldrhi	r3, [r0, #0]
   21632:	bf83      	ittte	hi
   21634:	3302      	addhi	r3, #2
   21636:	6043      	strhi	r3, [r0, #4]

	return 0;
   21638:	2000      	movhi	r0, #0
		return -ENOMEM;
   2163a:	f06f 000b 	mvnls.w	r0, #11
}
   2163e:	4770      	bx	lr
   21640:	00038d70 	.word	0x00038d70

00021644 <close>:
{
   21644:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(socket_ops);
   21646:	4c10      	ldr	r4, [pc, #64]	; (21688 <close+0x44>)
{
   21648:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(socket_ops);
   2164a:	6823      	ldr	r3, [r4, #0]
   2164c:	b94b      	cbnz	r3, 21662 <close+0x1e>
   2164e:	490f      	ldr	r1, [pc, #60]	; (2168c <close+0x48>)
   21650:	480f      	ldr	r0, [pc, #60]	; (21690 <close+0x4c>)
   21652:	2321      	movs	r3, #33	; 0x21
   21654:	4a0f      	ldr	r2, [pc, #60]	; (21694 <close+0x50>)
   21656:	f011 ff5e 	bl	33516 <printk>
   2165a:	2121      	movs	r1, #33	; 0x21
   2165c:	480d      	ldr	r0, [pc, #52]	; (21694 <close+0x50>)
   2165e:	f011 ffa0 	bl	335a2 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->close);
   21662:	6823      	ldr	r3, [r4, #0]
   21664:	685b      	ldr	r3, [r3, #4]
   21666:	b94b      	cbnz	r3, 2167c <close+0x38>
   21668:	490b      	ldr	r1, [pc, #44]	; (21698 <close+0x54>)
   2166a:	4809      	ldr	r0, [pc, #36]	; (21690 <close+0x4c>)
   2166c:	2322      	movs	r3, #34	; 0x22
   2166e:	4a09      	ldr	r2, [pc, #36]	; (21694 <close+0x50>)
   21670:	f011 ff51 	bl	33516 <printk>
   21674:	2122      	movs	r1, #34	; 0x22
   21676:	4807      	ldr	r0, [pc, #28]	; (21694 <close+0x50>)
   21678:	f011 ff93 	bl	335a2 <assert_post_action>
	return socket_ops->close(sock);
   2167c:	6823      	ldr	r3, [r4, #0]
   2167e:	4628      	mov	r0, r5
}
   21680:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return socket_ops->close(sock);
   21684:	685b      	ldr	r3, [r3, #4]
   21686:	4718      	bx	r3
   21688:	200220f8 	.word	0x200220f8
   2168c:	00037b4f 	.word	0x00037b4f
   21690:	00037a66 	.word	0x00037a66
   21694:	00037b1f 	.word	0x00037b1f
   21698:	00038d7c 	.word	0x00038d7c

0002169c <mqtt_client_tcp_connect>:
#include <net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tcp_connect(struct mqtt_client *client)
{
   2169c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(socket_ops);
   216a0:	4c2d      	ldr	r4, [pc, #180]	; (21758 <mqtt_client_tcp_connect+0xbc>)
	const struct sockaddr *broker = client->broker;
   216a2:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
   216a4:	6823      	ldr	r3, [r4, #0]
{
   216a6:	4606      	mov	r6, r0
	int ret;

	client->transport.tcp.sock = socket(broker->sa_family, SOCK_STREAM,
   216a8:	882f      	ldrh	r7, [r5, #0]
   216aa:	b94b      	cbnz	r3, 216c0 <mqtt_client_tcp_connect+0x24>
   216ac:	492b      	ldr	r1, [pc, #172]	; (2175c <mqtt_client_tcp_connect+0xc0>)
   216ae:	482c      	ldr	r0, [pc, #176]	; (21760 <mqtt_client_tcp_connect+0xc4>)
   216b0:	2319      	movs	r3, #25
   216b2:	4a2c      	ldr	r2, [pc, #176]	; (21764 <mqtt_client_tcp_connect+0xc8>)
   216b4:	f011 ff2f 	bl	33516 <printk>
   216b8:	2119      	movs	r1, #25
   216ba:	482a      	ldr	r0, [pc, #168]	; (21764 <mqtt_client_tcp_connect+0xc8>)
   216bc:	f011 ff71 	bl	335a2 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->socket);
   216c0:	6823      	ldr	r3, [r4, #0]
   216c2:	681b      	ldr	r3, [r3, #0]
   216c4:	b94b      	cbnz	r3, 216da <mqtt_client_tcp_connect+0x3e>
   216c6:	4928      	ldr	r1, [pc, #160]	; (21768 <mqtt_client_tcp_connect+0xcc>)
   216c8:	4825      	ldr	r0, [pc, #148]	; (21760 <mqtt_client_tcp_connect+0xc4>)
   216ca:	231a      	movs	r3, #26
   216cc:	4a25      	ldr	r2, [pc, #148]	; (21764 <mqtt_client_tcp_connect+0xc8>)
   216ce:	f011 ff22 	bl	33516 <printk>
   216d2:	211a      	movs	r1, #26
   216d4:	4823      	ldr	r0, [pc, #140]	; (21764 <mqtt_client_tcp_connect+0xc8>)
   216d6:	f011 ff64 	bl	335a2 <assert_post_action>
	return socket_ops->socket(family, type, proto);
   216da:	6823      	ldr	r3, [r4, #0]
   216dc:	4638      	mov	r0, r7
   216de:	2206      	movs	r2, #6
   216e0:	2101      	movs	r1, #1
   216e2:	681b      	ldr	r3, [r3, #0]
   216e4:	4798      	blx	r3
					    IPPROTO_TCP);
	if (client->transport.tcp.sock < 0) {
   216e6:	2800      	cmp	r0, #0
   216e8:	4607      	mov	r7, r0
	client->transport.tcp.sock = socket(broker->sa_family, SOCK_STREAM,
   216ea:	62b0      	str	r0, [r6, #40]	; 0x28
	if (client->transport.tcp.sock < 0) {
   216ec:	da05      	bge.n	216fa <mqtt_client_tcp_connect+0x5e>

	ret = connect(client->transport.tcp.sock, client->broker,
		      peer_addr_size);
	if (ret < 0) {
		(void)close(client->transport.tcp.sock);
		return -errno;
   216ee:	f012 fae0 	bl	33cb2 <__errno>
   216f2:	6800      	ldr	r0, [r0, #0]
   216f4:	4240      	negs	r0, r0
	}

	MQTT_TRC("Connect completed");
	return 0;
}
   216f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (broker->sa_family == AF_INET) {
   216fa:	882b      	ldrh	r3, [r5, #0]
	ret = connect(client->transport.tcp.sock, client->broker,
   216fc:	6cf5      	ldr	r5, [r6, #76]	; 0x4c
		peer_addr_size = sizeof(struct sockaddr_in);
   216fe:	2b01      	cmp	r3, #1
	__ASSERT_NO_MSG(socket_ops);
   21700:	6823      	ldr	r3, [r4, #0]
   21702:	bf14      	ite	ne
   21704:	f04f 0818 	movne.w	r8, #24
   21708:	f04f 0808 	moveq.w	r8, #8
   2170c:	b94b      	cbnz	r3, 21722 <mqtt_client_tcp_connect+0x86>
   2170e:	4913      	ldr	r1, [pc, #76]	; (2175c <mqtt_client_tcp_connect+0xc0>)
   21710:	4813      	ldr	r0, [pc, #76]	; (21760 <mqtt_client_tcp_connect+0xc4>)
   21712:	2345      	movs	r3, #69	; 0x45
   21714:	4a13      	ldr	r2, [pc, #76]	; (21764 <mqtt_client_tcp_connect+0xc8>)
   21716:	f011 fefe 	bl	33516 <printk>
   2171a:	2145      	movs	r1, #69	; 0x45
   2171c:	4811      	ldr	r0, [pc, #68]	; (21764 <mqtt_client_tcp_connect+0xc8>)
   2171e:	f011 ff40 	bl	335a2 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->connect);
   21722:	6823      	ldr	r3, [r4, #0]
   21724:	695b      	ldr	r3, [r3, #20]
   21726:	b94b      	cbnz	r3, 2173c <mqtt_client_tcp_connect+0xa0>
   21728:	4910      	ldr	r1, [pc, #64]	; (2176c <mqtt_client_tcp_connect+0xd0>)
   2172a:	480d      	ldr	r0, [pc, #52]	; (21760 <mqtt_client_tcp_connect+0xc4>)
   2172c:	2346      	movs	r3, #70	; 0x46
   2172e:	4a0d      	ldr	r2, [pc, #52]	; (21764 <mqtt_client_tcp_connect+0xc8>)
   21730:	f011 fef1 	bl	33516 <printk>
   21734:	2146      	movs	r1, #70	; 0x46
   21736:	480b      	ldr	r0, [pc, #44]	; (21764 <mqtt_client_tcp_connect+0xc8>)
   21738:	f011 ff33 	bl	335a2 <assert_post_action>
	return socket_ops->connect(sock, addr, addrlen);
   2173c:	6823      	ldr	r3, [r4, #0]
   2173e:	4642      	mov	r2, r8
   21740:	4629      	mov	r1, r5
   21742:	4638      	mov	r0, r7
   21744:	695b      	ldr	r3, [r3, #20]
   21746:	4798      	blx	r3
	if (ret < 0) {
   21748:	2800      	cmp	r0, #0
   2174a:	da03      	bge.n	21754 <mqtt_client_tcp_connect+0xb8>
		(void)close(client->transport.tcp.sock);
   2174c:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   2174e:	f7ff ff79 	bl	21644 <close>
   21752:	e7cc      	b.n	216ee <mqtt_client_tcp_connect+0x52>
	return 0;
   21754:	2000      	movs	r0, #0
   21756:	e7ce      	b.n	216f6 <mqtt_client_tcp_connect+0x5a>
   21758:	200220f8 	.word	0x200220f8
   2175c:	00037b4f 	.word	0x00037b4f
   21760:	00037a66 	.word	0x00037a66
   21764:	00037b1f 	.word	0x00037b1f
   21768:	00038d8e 	.word	0x00038d8e
   2176c:	00038da1 	.word	0x00038da1

00021770 <mqtt_client_tcp_write>:

int mqtt_client_tcp_write(struct mqtt_client *client, const u8_t *data,
			  u32_t datalen)
{
   21770:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21774:	4680      	mov	r8, r0
	u32_t offset = 0U;
   21776:	2400      	movs	r4, #0
{
   21778:	e9cd 2100 	strd	r2, r1, [sp]
	__ASSERT_NO_MSG(socket_ops);
   2177c:	4f1d      	ldr	r7, [pc, #116]	; (217f4 <mqtt_client_tcp_write+0x84>)
   2177e:	4e1e      	ldr	r6, [pc, #120]	; (217f8 <mqtt_client_tcp_write+0x88>)
	int ret;

	while (offset < datalen) {
   21780:	9b00      	ldr	r3, [sp, #0]
   21782:	429c      	cmp	r4, r3
   21784:	d301      	bcc.n	2178a <mqtt_client_tcp_write+0x1a>
		}

		offset += ret;
	}

	return 0;
   21786:	2000      	movs	r0, #0
   21788:	e02e      	b.n	217e8 <mqtt_client_tcp_write+0x78>
		ret = send(client->transport.tcp.sock, data + offset,
   2178a:	9b01      	ldr	r3, [sp, #4]
   2178c:	f8d8 9028 	ldr.w	r9, [r8, #40]	; 0x28
   21790:	eb03 0a04 	add.w	sl, r3, r4
   21794:	9b00      	ldr	r3, [sp, #0]
   21796:	eba3 0b04 	sub.w	fp, r3, r4
   2179a:	683b      	ldr	r3, [r7, #0]
   2179c:	b94b      	cbnz	r3, 217b2 <mqtt_client_tcp_write+0x42>
   2179e:	4917      	ldr	r1, [pc, #92]	; (217fc <mqtt_client_tcp_write+0x8c>)
   217a0:	4817      	ldr	r0, [pc, #92]	; (21800 <mqtt_client_tcp_write+0x90>)
   217a2:	237e      	movs	r3, #126	; 0x7e
   217a4:	4632      	mov	r2, r6
   217a6:	f011 feb6 	bl	33516 <printk>
   217aa:	217e      	movs	r1, #126	; 0x7e
   217ac:	4630      	mov	r0, r6
   217ae:	f011 fef8 	bl	335a2 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->send);
   217b2:	683b      	ldr	r3, [r7, #0]
   217b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   217b6:	b94b      	cbnz	r3, 217cc <mqtt_client_tcp_write+0x5c>
   217b8:	4912      	ldr	r1, [pc, #72]	; (21804 <mqtt_client_tcp_write+0x94>)
   217ba:	4811      	ldr	r0, [pc, #68]	; (21800 <mqtt_client_tcp_write+0x90>)
   217bc:	237f      	movs	r3, #127	; 0x7f
   217be:	4632      	mov	r2, r6
   217c0:	f011 fea9 	bl	33516 <printk>
   217c4:	217f      	movs	r1, #127	; 0x7f
   217c6:	4630      	mov	r0, r6
   217c8:	f011 feeb 	bl	335a2 <assert_post_action>
	return socket_ops->send(sock, buf, len, flags);
   217cc:	683b      	ldr	r3, [r7, #0]
   217ce:	465a      	mov	r2, fp
   217d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   217d2:	4651      	mov	r1, sl
   217d4:	461d      	mov	r5, r3
   217d6:	4648      	mov	r0, r9
   217d8:	2300      	movs	r3, #0
   217da:	47a8      	blx	r5
		if (ret < 0) {
   217dc:	2800      	cmp	r0, #0
   217de:	da06      	bge.n	217ee <mqtt_client_tcp_write+0x7e>
			return -errno;
   217e0:	f012 fa67 	bl	33cb2 <__errno>
   217e4:	6800      	ldr	r0, [r0, #0]
   217e6:	4240      	negs	r0, r0
}
   217e8:	b003      	add	sp, #12
   217ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		offset += ret;
   217ee:	4404      	add	r4, r0
   217f0:	e7c6      	b.n	21780 <mqtt_client_tcp_write+0x10>
   217f2:	bf00      	nop
   217f4:	200220f8 	.word	0x200220f8
   217f8:	00037b1f 	.word	0x00037b1f
   217fc:	00037b4f 	.word	0x00037b4f
   21800:	00037a66 	.word	0x00037a66
   21804:	00038db5 	.word	0x00038db5

00021808 <mqtt_client_tcp_read>:

int mqtt_client_tcp_read(struct mqtt_client *client, u8_t *data, u32_t buflen,
			 bool shall_block)
{
   21808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(socket_ops);
   2180c:	4c18      	ldr	r4, [pc, #96]	; (21870 <mqtt_client_tcp_read+0x68>)
	int flags = 0;
	int ret;

	if (!shall_block) {
		flags |= MSG_DONTWAIT;
   2180e:	2b00      	cmp	r3, #0
   21810:	6823      	ldr	r3, [r4, #0]
{
   21812:	460d      	mov	r5, r1
   21814:	4616      	mov	r6, r2
		flags |= MSG_DONTWAIT;
   21816:	bf14      	ite	ne
   21818:	f04f 0800 	movne.w	r8, #0
   2181c:	f04f 0840 	moveq.w	r8, #64	; 0x40
	}

	ret = recv(client->transport.tcp.sock, data, buflen, flags);
   21820:	6a87      	ldr	r7, [r0, #40]	; 0x28
   21822:	b94b      	cbnz	r3, 21838 <mqtt_client_tcp_read+0x30>
   21824:	4913      	ldr	r1, [pc, #76]	; (21874 <mqtt_client_tcp_read+0x6c>)
   21826:	4814      	ldr	r0, [pc, #80]	; (21878 <mqtt_client_tcp_read+0x70>)
   21828:	2369      	movs	r3, #105	; 0x69
   2182a:	4a14      	ldr	r2, [pc, #80]	; (2187c <mqtt_client_tcp_read+0x74>)
   2182c:	f011 fe73 	bl	33516 <printk>
   21830:	2169      	movs	r1, #105	; 0x69
   21832:	4812      	ldr	r0, [pc, #72]	; (2187c <mqtt_client_tcp_read+0x74>)
   21834:	f011 feb5 	bl	335a2 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->recv);
   21838:	6823      	ldr	r3, [r4, #0]
   2183a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2183c:	b94b      	cbnz	r3, 21852 <mqtt_client_tcp_read+0x4a>
   2183e:	4910      	ldr	r1, [pc, #64]	; (21880 <mqtt_client_tcp_read+0x78>)
   21840:	480d      	ldr	r0, [pc, #52]	; (21878 <mqtt_client_tcp_read+0x70>)
   21842:	236a      	movs	r3, #106	; 0x6a
   21844:	4a0d      	ldr	r2, [pc, #52]	; (2187c <mqtt_client_tcp_read+0x74>)
   21846:	f011 fe66 	bl	33516 <printk>
   2184a:	216a      	movs	r1, #106	; 0x6a
   2184c:	480b      	ldr	r0, [pc, #44]	; (2187c <mqtt_client_tcp_read+0x74>)
   2184e:	f011 fea8 	bl	335a2 <assert_post_action>
	return socket_ops->recv(sock, buf, max_len, flags);
   21852:	6823      	ldr	r3, [r4, #0]
   21854:	4632      	mov	r2, r6
   21856:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   21858:	4629      	mov	r1, r5
   2185a:	4643      	mov	r3, r8
   2185c:	4638      	mov	r0, r7
   2185e:	47a0      	blx	r4
	if (ret < 0) {
   21860:	2800      	cmp	r0, #0
   21862:	da03      	bge.n	2186c <mqtt_client_tcp_read+0x64>
		return -errno;
   21864:	f012 fa25 	bl	33cb2 <__errno>
   21868:	6800      	ldr	r0, [r0, #0]
   2186a:	4240      	negs	r0, r0
	}

	return ret;
}
   2186c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21870:	200220f8 	.word	0x200220f8
   21874:	00037b4f 	.word	0x00037b4f
   21878:	00037a66 	.word	0x00037a66
   2187c:	00037b1f 	.word	0x00037b1f
   21880:	00038dc6 	.word	0x00038dc6

00021884 <mqtt_transport_connect>:
#endif /* CONFIG_MQTT_LIB_WEBSOCKET */
};

int mqtt_transport_connect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].connect(client);
   21884:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   21888:	4a01      	ldr	r2, [pc, #4]	; (21890 <mqtt_transport_connect+0xc>)
   2188a:	011b      	lsls	r3, r3, #4
   2188c:	58d3      	ldr	r3, [r2, r3]
   2188e:	4718      	bx	r3
   21890:	00037060 	.word	0x00037060

00021894 <mqtt_transport_write>:
}

int mqtt_transport_write(struct mqtt_client *client, const u8_t *data,
			 u32_t datalen)
{
   21894:	b410      	push	{r4}
	return transport_fn[client->transport.type].write(client, data,
   21896:	4b04      	ldr	r3, [pc, #16]	; (218a8 <mqtt_transport_write+0x14>)
   21898:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
   2189c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   218a0:	685b      	ldr	r3, [r3, #4]
							  datalen);
}
   218a2:	f85d 4b04 	ldr.w	r4, [sp], #4
	return transport_fn[client->transport.type].write(client, data,
   218a6:	4718      	bx	r3
   218a8:	00037060 	.word	0x00037060

000218ac <mqtt_transport_read>:

int mqtt_transport_read(struct mqtt_client *client, u8_t *data, u32_t buflen,
			bool shall_block)
{
   218ac:	b430      	push	{r4, r5}
	return transport_fn[client->transport.type].read(client, data, buflen,
   218ae:	4c04      	ldr	r4, [pc, #16]	; (218c0 <mqtt_transport_read+0x14>)
   218b0:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
   218b4:	eb04 1405 	add.w	r4, r4, r5, lsl #4
   218b8:	68a4      	ldr	r4, [r4, #8]
   218ba:	46a4      	mov	ip, r4
							 shall_block);
}
   218bc:	bc30      	pop	{r4, r5}
	return transport_fn[client->transport.type].read(client, data, buflen,
   218be:	4760      	bx	ip
   218c0:	00037060 	.word	0x00037060

000218c4 <mqtt_transport_disconnect>:

int mqtt_transport_disconnect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].disconnect(client);
   218c4:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
   218c8:	4b02      	ldr	r3, [pc, #8]	; (218d4 <mqtt_transport_disconnect+0x10>)
   218ca:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   218ce:	68db      	ldr	r3, [r3, #12]
   218d0:	4718      	bx	r3
   218d2:	bf00      	nop
   218d4:	00037060 	.word	0x00037060

000218d8 <mqtt_mutex_unlock>:
	return k_mutex_lock(&mutex->kernel_mutex, timeout);
}

static inline int sys_mutex_unlock(struct sys_mutex *mutex)
{
	if (mutex->kernel_mutex.lock_count == 0) {
   218d8:	68c2      	ldr	r2, [r0, #12]
}

/**@brief Release the lock on the module specific mutex, if any.
 */
static inline void mqtt_mutex_unlock(struct mqtt_client *client)
{
   218da:	b510      	push	{r4, lr}
   218dc:	b142      	cbz	r2, 218f0 <mqtt_mutex_unlock+0x18>
		return -EINVAL;
	}

	if (mutex->kernel_mutex.owner != _current) {
   218de:	4b0f      	ldr	r3, [pc, #60]	; (2191c <mqtt_mutex_unlock+0x44>)
   218e0:	6882      	ldr	r2, [r0, #8]
   218e2:	689b      	ldr	r3, [r3, #8]
   218e4:	429a      	cmp	r2, r3
   218e6:	d115      	bne.n	21914 <mqtt_mutex_unlock+0x3c>
	int ret = sys_mutex_unlock(&client->internal.mutex);

	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
	(void)ret;
}
   218e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   218ec:	f00d bc02 	b.w	2f0f4 <z_impl_k_mutex_unlock>
		return -EINVAL;
   218f0:	f06f 0415 	mvn.w	r4, #21
	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
   218f4:	2343      	movs	r3, #67	; 0x43
   218f6:	4a0a      	ldr	r2, [pc, #40]	; (21920 <mqtt_mutex_unlock+0x48>)
   218f8:	490a      	ldr	r1, [pc, #40]	; (21924 <mqtt_mutex_unlock+0x4c>)
   218fa:	480b      	ldr	r0, [pc, #44]	; (21928 <mqtt_mutex_unlock+0x50>)
   218fc:	f011 fe0b 	bl	33516 <printk>
   21900:	4621      	mov	r1, r4
   21902:	480a      	ldr	r0, [pc, #40]	; (2192c <mqtt_mutex_unlock+0x54>)
   21904:	f011 fe07 	bl	33516 <printk>
}
   21908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
   2190c:	2143      	movs	r1, #67	; 0x43
   2190e:	4804      	ldr	r0, [pc, #16]	; (21920 <mqtt_mutex_unlock+0x48>)
   21910:	f011 be47 	b.w	335a2 <assert_post_action>
		return -EPERM;
   21914:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   21918:	e7ec      	b.n	218f4 <mqtt_mutex_unlock+0x1c>
   2191a:	bf00      	nop
   2191c:	20023ed0 	.word	0x20023ed0
   21920:	00038dd7 	.word	0x00038dd7
   21924:	00038e08 	.word	0x00038e08
   21928:	00037a66 	.word	0x00037a66
   2192c:	00038e11 	.word	0x00038e11

00021930 <mqtt_mutex_lock>:
{
   21930:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   21932:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   21936:	f00d faff 	bl	2ef38 <z_impl_k_mutex_lock>
	__ASSERT(ret == 0, "sys_mutex_lock failed with %d", ret);
   2193a:	4604      	mov	r4, r0
   2193c:	b178      	cbz	r0, 2195e <mqtt_mutex_lock+0x2e>
   2193e:	2339      	movs	r3, #57	; 0x39
   21940:	4a07      	ldr	r2, [pc, #28]	; (21960 <mqtt_mutex_lock+0x30>)
   21942:	4908      	ldr	r1, [pc, #32]	; (21964 <mqtt_mutex_lock+0x34>)
   21944:	4808      	ldr	r0, [pc, #32]	; (21968 <mqtt_mutex_lock+0x38>)
   21946:	f011 fde6 	bl	33516 <printk>
   2194a:	4621      	mov	r1, r4
   2194c:	4807      	ldr	r0, [pc, #28]	; (2196c <mqtt_mutex_lock+0x3c>)
   2194e:	f011 fde2 	bl	33516 <printk>
}
   21952:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT(ret == 0, "sys_mutex_lock failed with %d", ret);
   21956:	2139      	movs	r1, #57	; 0x39
   21958:	4801      	ldr	r0, [pc, #4]	; (21960 <mqtt_mutex_lock+0x30>)
   2195a:	f011 be22 	b.w	335a2 <assert_post_action>
}
   2195e:	bd10      	pop	{r4, pc}
   21960:	00038dd7 	.word	0x00038dd7
   21964:	00038e08 	.word	0x00038e08
   21968:	00037a66 	.word	0x00037a66
   2196c:	00038e33 	.word	0x00038e33

00021970 <close>:
{
   21970:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(socket_ops);
   21972:	4c10      	ldr	r4, [pc, #64]	; (219b4 <close+0x44>)
{
   21974:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(socket_ops);
   21976:	6823      	ldr	r3, [r4, #0]
   21978:	b94b      	cbnz	r3, 2198e <close+0x1e>
   2197a:	490f      	ldr	r1, [pc, #60]	; (219b8 <close+0x48>)
   2197c:	480f      	ldr	r0, [pc, #60]	; (219bc <close+0x4c>)
   2197e:	2321      	movs	r3, #33	; 0x21
   21980:	4a0f      	ldr	r2, [pc, #60]	; (219c0 <close+0x50>)
   21982:	f011 fdc8 	bl	33516 <printk>
   21986:	2121      	movs	r1, #33	; 0x21
   21988:	480d      	ldr	r0, [pc, #52]	; (219c0 <close+0x50>)
   2198a:	f011 fe0a 	bl	335a2 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->close);
   2198e:	6823      	ldr	r3, [r4, #0]
   21990:	685b      	ldr	r3, [r3, #4]
   21992:	b94b      	cbnz	r3, 219a8 <close+0x38>
   21994:	490b      	ldr	r1, [pc, #44]	; (219c4 <close+0x54>)
   21996:	4809      	ldr	r0, [pc, #36]	; (219bc <close+0x4c>)
   21998:	2322      	movs	r3, #34	; 0x22
   2199a:	4a09      	ldr	r2, [pc, #36]	; (219c0 <close+0x50>)
   2199c:	f011 fdbb 	bl	33516 <printk>
   219a0:	2122      	movs	r1, #34	; 0x22
   219a2:	4807      	ldr	r0, [pc, #28]	; (219c0 <close+0x50>)
   219a4:	f011 fdfd 	bl	335a2 <assert_post_action>
	return socket_ops->close(sock);
   219a8:	6823      	ldr	r3, [r4, #0]
   219aa:	4628      	mov	r0, r5
}
   219ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return socket_ops->close(sock);
   219b0:	685b      	ldr	r3, [r3, #4]
   219b2:	4718      	bx	r3
   219b4:	200220f8 	.word	0x200220f8
   219b8:	00037b4f 	.word	0x00037b4f
   219bc:	00037a66 	.word	0x00037a66
   219c0:	00037b1f 	.word	0x00037b1f
   219c4:	00038d7c 	.word	0x00038d7c

000219c8 <setsockopt.constprop.0>:
static inline int setsockopt(int sock, int level, int optname,
   219c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(socket_ops);
   219cc:	4c15      	ldr	r4, [pc, #84]	; (21a24 <setsockopt.constprop.0+0x5c>)
static inline int setsockopt(int sock, int level, int optname,
   219ce:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(socket_ops);
   219d0:	6823      	ldr	r3, [r4, #0]
static inline int setsockopt(int sock, int level, int optname,
   219d2:	4605      	mov	r5, r0
   219d4:	460e      	mov	r6, r1
   219d6:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(socket_ops);
   219d8:	b94b      	cbnz	r3, 219ee <setsockopt.constprop.0+0x26>
   219da:	4913      	ldr	r1, [pc, #76]	; (21a28 <setsockopt.constprop.0+0x60>)
   219dc:	4813      	ldr	r0, [pc, #76]	; (21a2c <setsockopt.constprop.0+0x64>)
   219de:	2357      	movs	r3, #87	; 0x57
   219e0:	4a13      	ldr	r2, [pc, #76]	; (21a30 <setsockopt.constprop.0+0x68>)
   219e2:	f011 fd98 	bl	33516 <printk>
   219e6:	2157      	movs	r1, #87	; 0x57
   219e8:	4811      	ldr	r0, [pc, #68]	; (21a30 <setsockopt.constprop.0+0x68>)
   219ea:	f011 fdda 	bl	335a2 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->setsockopt);
   219ee:	6823      	ldr	r3, [r4, #0]
   219f0:	69db      	ldr	r3, [r3, #28]
   219f2:	b94b      	cbnz	r3, 21a08 <setsockopt.constprop.0+0x40>
   219f4:	490f      	ldr	r1, [pc, #60]	; (21a34 <setsockopt.constprop.0+0x6c>)
   219f6:	480d      	ldr	r0, [pc, #52]	; (21a2c <setsockopt.constprop.0+0x64>)
   219f8:	2358      	movs	r3, #88	; 0x58
   219fa:	4a0d      	ldr	r2, [pc, #52]	; (21a30 <setsockopt.constprop.0+0x68>)
   219fc:	f011 fd8b 	bl	33516 <printk>
   21a00:	2158      	movs	r1, #88	; 0x58
   21a02:	480b      	ldr	r0, [pc, #44]	; (21a30 <setsockopt.constprop.0+0x68>)
   21a04:	f011 fdcd 	bl	335a2 <assert_post_action>
	return socket_ops->setsockopt(sock, level, optname, optval, optlen);
   21a08:	6823      	ldr	r3, [r4, #0]
   21a0a:	f8cd 8000 	str.w	r8, [sp]
   21a0e:	69dc      	ldr	r4, [r3, #28]
   21a10:	4632      	mov	r2, r6
   21a12:	463b      	mov	r3, r7
   21a14:	f44f 718d 	mov.w	r1, #282	; 0x11a
   21a18:	4628      	mov	r0, r5
   21a1a:	47a0      	blx	r4
}
   21a1c:	b002      	add	sp, #8
   21a1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21a22:	bf00      	nop
   21a24:	200220f8 	.word	0x200220f8
   21a28:	00037b4f 	.word	0x00037b4f
   21a2c:	00037a66 	.word	0x00037a66
   21a30:	00037b1f 	.word	0x00037b1f
   21a34:	00038e53 	.word	0x00038e53

00021a38 <mqtt_client_tls_connect>:
#include <net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tls_connect(struct mqtt_client *client)
{
   21a38:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(socket_ops);
   21a3c:	4d49      	ldr	r5, [pc, #292]	; (21b64 <mqtt_client_tls_connect+0x12c>)
	const struct sockaddr *broker = client->broker;
   21a3e:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
   21a40:	682b      	ldr	r3, [r5, #0]
{
   21a42:	4604      	mov	r4, r0
	struct mqtt_sec_config *tls_config = &client->transport.tls.config;
	int ret;

	client->transport.tls.sock = socket(broker->sa_family,
   21a44:	8837      	ldrh	r7, [r6, #0]
   21a46:	b94b      	cbnz	r3, 21a5c <mqtt_client_tls_connect+0x24>
   21a48:	4947      	ldr	r1, [pc, #284]	; (21b68 <mqtt_client_tls_connect+0x130>)
   21a4a:	4848      	ldr	r0, [pc, #288]	; (21b6c <mqtt_client_tls_connect+0x134>)
   21a4c:	2319      	movs	r3, #25
   21a4e:	4a48      	ldr	r2, [pc, #288]	; (21b70 <mqtt_client_tls_connect+0x138>)
   21a50:	f011 fd61 	bl	33516 <printk>
   21a54:	2119      	movs	r1, #25
   21a56:	4846      	ldr	r0, [pc, #280]	; (21b70 <mqtt_client_tls_connect+0x138>)
   21a58:	f011 fda3 	bl	335a2 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->socket);
   21a5c:	682b      	ldr	r3, [r5, #0]
   21a5e:	681b      	ldr	r3, [r3, #0]
   21a60:	b94b      	cbnz	r3, 21a76 <mqtt_client_tls_connect+0x3e>
   21a62:	4944      	ldr	r1, [pc, #272]	; (21b74 <mqtt_client_tls_connect+0x13c>)
   21a64:	4841      	ldr	r0, [pc, #260]	; (21b6c <mqtt_client_tls_connect+0x134>)
   21a66:	231a      	movs	r3, #26
   21a68:	4a41      	ldr	r2, [pc, #260]	; (21b70 <mqtt_client_tls_connect+0x138>)
   21a6a:	f011 fd54 	bl	33516 <printk>
   21a6e:	211a      	movs	r1, #26
   21a70:	483f      	ldr	r0, [pc, #252]	; (21b70 <mqtt_client_tls_connect+0x138>)
   21a72:	f011 fd96 	bl	335a2 <assert_post_action>
	return socket_ops->socket(family, type, proto);
   21a76:	682b      	ldr	r3, [r5, #0]
   21a78:	f44f 7281 	mov.w	r2, #258	; 0x102
   21a7c:	2101      	movs	r1, #1
   21a7e:	4638      	mov	r0, r7
   21a80:	681b      	ldr	r3, [r3, #0]
   21a82:	4798      	blx	r3
					    SOCK_STREAM, IPPROTO_TLS_1_2);
	if (client->transport.tls.sock < 0) {
   21a84:	2800      	cmp	r0, #0
	client->transport.tls.sock = socket(broker->sa_family,
   21a86:	62a0      	str	r0, [r4, #40]	; 0x28
	if (client->transport.tls.sock < 0) {
   21a88:	da06      	bge.n	21a98 <mqtt_client_tls_connect+0x60>
	MQTT_TRC("Connect completed");
	return 0;

error:
	(void)close(client->transport.tls.sock);
	return -errno;
   21a8a:	f012 f912 	bl	33cb2 <__errno>
   21a8e:	6800      	ldr	r0, [r0, #0]
   21a90:	4240      	negs	r0, r0
}
   21a92:	b002      	add	sp, #8
   21a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ret = setsockopt(client->transport.tls.sock, SOL_TLS, TLS_PEER_VERIFY,
   21a98:	2304      	movs	r3, #4
   21a9a:	2105      	movs	r1, #5
   21a9c:	f104 022c 	add.w	r2, r4, #44	; 0x2c
   21aa0:	f7ff ff92 	bl	219c8 <setsockopt.constprop.0>
	if (ret < 0) {
   21aa4:	2800      	cmp	r0, #0
   21aa6:	da03      	bge.n	21ab0 <mqtt_client_tls_connect+0x78>
	(void)close(client->transport.tls.sock);
   21aa8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   21aaa:	f7ff ff61 	bl	21970 <close>
   21aae:	e7ec      	b.n	21a8a <mqtt_client_tls_connect+0x52>
	if (tls_config->cipher_list != NULL && tls_config->cipher_count > 0) {
   21ab0:	6b62      	ldr	r2, [r4, #52]	; 0x34
   21ab2:	2a00      	cmp	r2, #0
   21ab4:	d131      	bne.n	21b1a <mqtt_client_tls_connect+0xe2>
	if (tls_config->sec_tag_list != NULL && tls_config->sec_tag_count > 0) {
   21ab6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   21ab8:	2a00      	cmp	r2, #0
   21aba:	d139      	bne.n	21b30 <mqtt_client_tls_connect+0xf8>
	if (tls_config->hostname) {
   21abc:	6c22      	ldr	r2, [r4, #64]	; 0x40
   21abe:	2a00      	cmp	r2, #0
   21ac0:	d141      	bne.n	21b46 <mqtt_client_tls_connect+0x10e>
	if (broker->sa_family == AF_INET) {
   21ac2:	8833      	ldrh	r3, [r6, #0]
	ret = connect(client->transport.tls.sock, client->broker,
   21ac4:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
	size_t peer_addr_size = sizeof(struct sockaddr_in6);
   21ac6:	2b01      	cmp	r3, #1
	__ASSERT_NO_MSG(socket_ops);
   21ac8:	682b      	ldr	r3, [r5, #0]
   21aca:	bf0c      	ite	eq
   21acc:	f04f 0808 	moveq.w	r8, #8
   21ad0:	f04f 0818 	movne.w	r8, #24
	ret = connect(client->transport.tls.sock, client->broker,
   21ad4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   21ad6:	b94b      	cbnz	r3, 21aec <mqtt_client_tls_connect+0xb4>
   21ad8:	4923      	ldr	r1, [pc, #140]	; (21b68 <mqtt_client_tls_connect+0x130>)
   21ada:	4824      	ldr	r0, [pc, #144]	; (21b6c <mqtt_client_tls_connect+0x134>)
   21adc:	2345      	movs	r3, #69	; 0x45
   21ade:	4a24      	ldr	r2, [pc, #144]	; (21b70 <mqtt_client_tls_connect+0x138>)
   21ae0:	f011 fd19 	bl	33516 <printk>
   21ae4:	2145      	movs	r1, #69	; 0x45
   21ae6:	4822      	ldr	r0, [pc, #136]	; (21b70 <mqtt_client_tls_connect+0x138>)
   21ae8:	f011 fd5b 	bl	335a2 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->connect);
   21aec:	682b      	ldr	r3, [r5, #0]
   21aee:	695b      	ldr	r3, [r3, #20]
   21af0:	b94b      	cbnz	r3, 21b06 <mqtt_client_tls_connect+0xce>
   21af2:	4921      	ldr	r1, [pc, #132]	; (21b78 <mqtt_client_tls_connect+0x140>)
   21af4:	481d      	ldr	r0, [pc, #116]	; (21b6c <mqtt_client_tls_connect+0x134>)
   21af6:	2346      	movs	r3, #70	; 0x46
   21af8:	4a1d      	ldr	r2, [pc, #116]	; (21b70 <mqtt_client_tls_connect+0x138>)
   21afa:	f011 fd0c 	bl	33516 <printk>
   21afe:	2146      	movs	r1, #70	; 0x46
   21b00:	481b      	ldr	r0, [pc, #108]	; (21b70 <mqtt_client_tls_connect+0x138>)
   21b02:	f011 fd4e 	bl	335a2 <assert_post_action>
	return socket_ops->connect(sock, addr, addrlen);
   21b06:	682b      	ldr	r3, [r5, #0]
   21b08:	4642      	mov	r2, r8
   21b0a:	4639      	mov	r1, r7
   21b0c:	4630      	mov	r0, r6
   21b0e:	695b      	ldr	r3, [r3, #20]
   21b10:	4798      	blx	r3
	if (ret < 0) {
   21b12:	2800      	cmp	r0, #0
   21b14:	dbc8      	blt.n	21aa8 <mqtt_client_tls_connect+0x70>
	return 0;
   21b16:	2000      	movs	r0, #0
   21b18:	e7bb      	b.n	21a92 <mqtt_client_tls_connect+0x5a>
	if (tls_config->cipher_list != NULL && tls_config->cipher_count > 0) {
   21b1a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   21b1c:	2b00      	cmp	r3, #0
   21b1e:	d0ca      	beq.n	21ab6 <mqtt_client_tls_connect+0x7e>
		ret = setsockopt(client->transport.tls.sock, SOL_TLS,
   21b20:	2103      	movs	r1, #3
   21b22:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   21b24:	009b      	lsls	r3, r3, #2
   21b26:	f7ff ff4f 	bl	219c8 <setsockopt.constprop.0>
		if (ret < 0) {
   21b2a:	2800      	cmp	r0, #0
   21b2c:	dac3      	bge.n	21ab6 <mqtt_client_tls_connect+0x7e>
   21b2e:	e7bb      	b.n	21aa8 <mqtt_client_tls_connect+0x70>
	if (tls_config->sec_tag_list != NULL && tls_config->sec_tag_count > 0) {
   21b30:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   21b32:	2b00      	cmp	r3, #0
   21b34:	d0c2      	beq.n	21abc <mqtt_client_tls_connect+0x84>
		ret = setsockopt(client->transport.tls.sock, SOL_TLS,
   21b36:	2101      	movs	r1, #1
   21b38:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   21b3a:	009b      	lsls	r3, r3, #2
   21b3c:	f7ff ff44 	bl	219c8 <setsockopt.constprop.0>
		if (ret < 0) {
   21b40:	2800      	cmp	r0, #0
   21b42:	dabb      	bge.n	21abc <mqtt_client_tls_connect+0x84>
   21b44:	e7b0      	b.n	21aa8 <mqtt_client_tls_connect+0x70>
		ret = setsockopt(client->transport.tls.sock, SOL_TLS,
   21b46:	4610      	mov	r0, r2
   21b48:	6aa7      	ldr	r7, [r4, #40]	; 0x28
   21b4a:	9201      	str	r2, [sp, #4]
   21b4c:	f7fb fad0 	bl	1d0f0 <strlen>
   21b50:	2102      	movs	r1, #2
   21b52:	4603      	mov	r3, r0
   21b54:	9a01      	ldr	r2, [sp, #4]
   21b56:	4638      	mov	r0, r7
   21b58:	f7ff ff36 	bl	219c8 <setsockopt.constprop.0>
		if (ret < 0) {
   21b5c:	2800      	cmp	r0, #0
   21b5e:	dab0      	bge.n	21ac2 <mqtt_client_tls_connect+0x8a>
   21b60:	e7a2      	b.n	21aa8 <mqtt_client_tls_connect+0x70>
   21b62:	bf00      	nop
   21b64:	200220f8 	.word	0x200220f8
   21b68:	00037b4f 	.word	0x00037b4f
   21b6c:	00037a66 	.word	0x00037a66
   21b70:	00037b1f 	.word	0x00037b1f
   21b74:	00038d8e 	.word	0x00038d8e
   21b78:	00038da1 	.word	0x00038da1

00021b7c <mqtt_client_tls_write>:

int mqtt_client_tls_write(struct mqtt_client *client, const u8_t *data,
			  u32_t datalen)
{
   21b7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21b80:	4680      	mov	r8, r0
	u32_t offset = 0U;
   21b82:	2400      	movs	r4, #0
{
   21b84:	e9cd 2100 	strd	r2, r1, [sp]
	__ASSERT_NO_MSG(socket_ops);
   21b88:	4f1d      	ldr	r7, [pc, #116]	; (21c00 <mqtt_client_tls_write+0x84>)
   21b8a:	4e1e      	ldr	r6, [pc, #120]	; (21c04 <mqtt_client_tls_write+0x88>)
	int ret;

	while (offset < datalen) {
   21b8c:	9b00      	ldr	r3, [sp, #0]
   21b8e:	429c      	cmp	r4, r3
   21b90:	d301      	bcc.n	21b96 <mqtt_client_tls_write+0x1a>
		}

		offset += ret;
	}

	return 0;
   21b92:	2000      	movs	r0, #0
   21b94:	e02e      	b.n	21bf4 <mqtt_client_tls_write+0x78>
		ret = send(client->transport.tls.sock, data + offset,
   21b96:	9b01      	ldr	r3, [sp, #4]
   21b98:	f8d8 9028 	ldr.w	r9, [r8, #40]	; 0x28
   21b9c:	eb03 0a04 	add.w	sl, r3, r4
   21ba0:	9b00      	ldr	r3, [sp, #0]
   21ba2:	eba3 0b04 	sub.w	fp, r3, r4
   21ba6:	683b      	ldr	r3, [r7, #0]
   21ba8:	b94b      	cbnz	r3, 21bbe <mqtt_client_tls_write+0x42>
   21baa:	4917      	ldr	r1, [pc, #92]	; (21c08 <mqtt_client_tls_write+0x8c>)
   21bac:	4817      	ldr	r0, [pc, #92]	; (21c0c <mqtt_client_tls_write+0x90>)
   21bae:	237e      	movs	r3, #126	; 0x7e
   21bb0:	4632      	mov	r2, r6
   21bb2:	f011 fcb0 	bl	33516 <printk>
   21bb6:	217e      	movs	r1, #126	; 0x7e
   21bb8:	4630      	mov	r0, r6
   21bba:	f011 fcf2 	bl	335a2 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->send);
   21bbe:	683b      	ldr	r3, [r7, #0]
   21bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   21bc2:	b94b      	cbnz	r3, 21bd8 <mqtt_client_tls_write+0x5c>
   21bc4:	4912      	ldr	r1, [pc, #72]	; (21c10 <mqtt_client_tls_write+0x94>)
   21bc6:	4811      	ldr	r0, [pc, #68]	; (21c0c <mqtt_client_tls_write+0x90>)
   21bc8:	237f      	movs	r3, #127	; 0x7f
   21bca:	4632      	mov	r2, r6
   21bcc:	f011 fca3 	bl	33516 <printk>
   21bd0:	217f      	movs	r1, #127	; 0x7f
   21bd2:	4630      	mov	r0, r6
   21bd4:	f011 fce5 	bl	335a2 <assert_post_action>
	return socket_ops->send(sock, buf, len, flags);
   21bd8:	683b      	ldr	r3, [r7, #0]
   21bda:	465a      	mov	r2, fp
   21bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   21bde:	4651      	mov	r1, sl
   21be0:	461d      	mov	r5, r3
   21be2:	4648      	mov	r0, r9
   21be4:	2300      	movs	r3, #0
   21be6:	47a8      	blx	r5
		if (ret < 0) {
   21be8:	2800      	cmp	r0, #0
   21bea:	da06      	bge.n	21bfa <mqtt_client_tls_write+0x7e>
			return -errno;
   21bec:	f012 f861 	bl	33cb2 <__errno>
   21bf0:	6800      	ldr	r0, [r0, #0]
   21bf2:	4240      	negs	r0, r0
}
   21bf4:	b003      	add	sp, #12
   21bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		offset += ret;
   21bfa:	4404      	add	r4, r0
   21bfc:	e7c6      	b.n	21b8c <mqtt_client_tls_write+0x10>
   21bfe:	bf00      	nop
   21c00:	200220f8 	.word	0x200220f8
   21c04:	00037b1f 	.word	0x00037b1f
   21c08:	00037b4f 	.word	0x00037b4f
   21c0c:	00037a66 	.word	0x00037a66
   21c10:	00038db5 	.word	0x00038db5

00021c14 <mqtt_client_tls_read>:

int mqtt_client_tls_read(struct mqtt_client *client, u8_t *data, u32_t buflen,
			 bool shall_block)
{
   21c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(socket_ops);
   21c18:	4c18      	ldr	r4, [pc, #96]	; (21c7c <mqtt_client_tls_read+0x68>)
	int flags = 0;
	int ret;

	if (!shall_block) {
		flags |= MSG_DONTWAIT;
   21c1a:	2b00      	cmp	r3, #0
   21c1c:	6823      	ldr	r3, [r4, #0]
{
   21c1e:	460d      	mov	r5, r1
   21c20:	4616      	mov	r6, r2
		flags |= MSG_DONTWAIT;
   21c22:	bf14      	ite	ne
   21c24:	f04f 0800 	movne.w	r8, #0
   21c28:	f04f 0840 	moveq.w	r8, #64	; 0x40
	}

	ret = recv(client->transport.tls.sock, data, buflen, flags);
   21c2c:	6a87      	ldr	r7, [r0, #40]	; 0x28
   21c2e:	b94b      	cbnz	r3, 21c44 <mqtt_client_tls_read+0x30>
   21c30:	4913      	ldr	r1, [pc, #76]	; (21c80 <mqtt_client_tls_read+0x6c>)
   21c32:	4814      	ldr	r0, [pc, #80]	; (21c84 <mqtt_client_tls_read+0x70>)
   21c34:	2369      	movs	r3, #105	; 0x69
   21c36:	4a14      	ldr	r2, [pc, #80]	; (21c88 <mqtt_client_tls_read+0x74>)
   21c38:	f011 fc6d 	bl	33516 <printk>
   21c3c:	2169      	movs	r1, #105	; 0x69
   21c3e:	4812      	ldr	r0, [pc, #72]	; (21c88 <mqtt_client_tls_read+0x74>)
   21c40:	f011 fcaf 	bl	335a2 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->recv);
   21c44:	6823      	ldr	r3, [r4, #0]
   21c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   21c48:	b94b      	cbnz	r3, 21c5e <mqtt_client_tls_read+0x4a>
   21c4a:	4910      	ldr	r1, [pc, #64]	; (21c8c <mqtt_client_tls_read+0x78>)
   21c4c:	480d      	ldr	r0, [pc, #52]	; (21c84 <mqtt_client_tls_read+0x70>)
   21c4e:	236a      	movs	r3, #106	; 0x6a
   21c50:	4a0d      	ldr	r2, [pc, #52]	; (21c88 <mqtt_client_tls_read+0x74>)
   21c52:	f011 fc60 	bl	33516 <printk>
   21c56:	216a      	movs	r1, #106	; 0x6a
   21c58:	480b      	ldr	r0, [pc, #44]	; (21c88 <mqtt_client_tls_read+0x74>)
   21c5a:	f011 fca2 	bl	335a2 <assert_post_action>
	return socket_ops->recv(sock, buf, max_len, flags);
   21c5e:	6823      	ldr	r3, [r4, #0]
   21c60:	4632      	mov	r2, r6
   21c62:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   21c64:	4629      	mov	r1, r5
   21c66:	4643      	mov	r3, r8
   21c68:	4638      	mov	r0, r7
   21c6a:	47a0      	blx	r4
	if (ret < 0) {
   21c6c:	2800      	cmp	r0, #0
   21c6e:	da03      	bge.n	21c78 <mqtt_client_tls_read+0x64>
		return -errno;
   21c70:	f012 f81f 	bl	33cb2 <__errno>
   21c74:	6800      	ldr	r0, [r0, #0]
   21c76:	4240      	negs	r0, r0
	}

	return ret;
}
   21c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21c7c:	200220f8 	.word	0x200220f8
   21c80:	00037b4f 	.word	0x00037b4f
   21c84:	00037a66 	.word	0x00037a66
   21c88:	00037b1f 	.word	0x00037b1f
   21c8c:	00038dc6 	.word	0x00038dc6

00021c90 <z_impl_entropy_get_entropy>:
				  u16_t length);

static inline int z_impl_entropy_get_entropy(struct device *dev,
					    u8_t *buffer,
					    u16_t length)
{
   21c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct entropy_driver_api *api =
   21c94:	6847      	ldr	r7, [r0, #4]
{
   21c96:	4604      	mov	r4, r0
		(const struct entropy_driver_api *)dev->driver_api;

	__ASSERT(api->get_entropy != NULL,
   21c98:	683b      	ldr	r3, [r7, #0]
{
   21c9a:	460d      	mov	r5, r1
   21c9c:	4616      	mov	r6, r2
	__ASSERT(api->get_entropy != NULL,
   21c9e:	b963      	cbnz	r3, 21cba <z_impl_entropy_get_entropy+0x2a>
   21ca0:	4909      	ldr	r1, [pc, #36]	; (21cc8 <z_impl_entropy_get_entropy+0x38>)
   21ca2:	234b      	movs	r3, #75	; 0x4b
   21ca4:	4a09      	ldr	r2, [pc, #36]	; (21ccc <z_impl_entropy_get_entropy+0x3c>)
   21ca6:	480a      	ldr	r0, [pc, #40]	; (21cd0 <z_impl_entropy_get_entropy+0x40>)
   21ca8:	f011 fc35 	bl	33516 <printk>
   21cac:	4809      	ldr	r0, [pc, #36]	; (21cd4 <z_impl_entropy_get_entropy+0x44>)
   21cae:	f011 fc32 	bl	33516 <printk>
   21cb2:	214b      	movs	r1, #75	; 0x4b
   21cb4:	4805      	ldr	r0, [pc, #20]	; (21ccc <z_impl_entropy_get_entropy+0x3c>)
   21cb6:	f011 fc74 	bl	335a2 <assert_post_action>
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   21cba:	4632      	mov	r2, r6
   21cbc:	4629      	mov	r1, r5
   21cbe:	4620      	mov	r0, r4
   21cc0:	683b      	ldr	r3, [r7, #0]
}
   21cc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->get_entropy(dev, buffer, length);
   21cc6:	4718      	bx	r3
   21cc8:	00038e97 	.word	0x00038e97
   21ccc:	00038e6a 	.word	0x00038e6a
   21cd0:	00037a66 	.word	0x00037a66
   21cd4:	00038eb7 	.word	0x00038eb7

00021cd8 <sys_rand32_get>:

static struct device *entropy_driver;

#if defined(CONFIG_ENTROPY_DEVICE_RANDOM_GENERATOR)
u32_t sys_rand32_get(void)
{
   21cd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct device *dev = entropy_driver;
   21cda:	4d12      	ldr	r5, [pc, #72]	; (21d24 <sys_rand32_get+0x4c>)
   21cdc:	682c      	ldr	r4, [r5, #0]
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
   21cde:	b99c      	cbnz	r4, 21d08 <sys_rand32_get+0x30>
   21ce0:	4811      	ldr	r0, [pc, #68]	; (21d28 <sys_rand32_get+0x50>)
   21ce2:	f00c fc59 	bl	2e598 <z_impl_device_get_binding>
		/* Only one entropy device exists, so this is safe even
		 * if the whole operation isn't atomic.
		 */
		dev = device_get_binding(CONFIG_ENTROPY_NAME);
		__ASSERT((dev != NULL),
   21ce6:	4604      	mov	r4, r0
   21ce8:	b968      	cbnz	r0, 21d06 <sys_rand32_get+0x2e>
   21cea:	231a      	movs	r3, #26
   21cec:	4a0f      	ldr	r2, [pc, #60]	; (21d2c <sys_rand32_get+0x54>)
   21cee:	4910      	ldr	r1, [pc, #64]	; (21d30 <sys_rand32_get+0x58>)
   21cf0:	4810      	ldr	r0, [pc, #64]	; (21d34 <sys_rand32_get+0x5c>)
   21cf2:	f011 fc10 	bl	33516 <printk>
   21cf6:	490c      	ldr	r1, [pc, #48]	; (21d28 <sys_rand32_get+0x50>)
   21cf8:	480f      	ldr	r0, [pc, #60]	; (21d38 <sys_rand32_get+0x60>)
   21cfa:	f011 fc0c 	bl	33516 <printk>
   21cfe:	211a      	movs	r1, #26
   21d00:	480a      	ldr	r0, [pc, #40]	; (21d2c <sys_rand32_get+0x54>)
   21d02:	f011 fc4e 	bl	335a2 <assert_post_action>
			"Device driver for %s (CONFIG_ENTROPY_NAME) not found. "
			"Check your build configuration!",
			CONFIG_ENTROPY_NAME);
		entropy_driver = dev;
   21d06:	602c      	str	r4, [r5, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&buffer, *(uintptr_t *)&length, K_SYSCALL_ENTROPY_GET_ENTROPY);
	}
#endif
	compiler_barrier();
	return z_impl_entropy_get_entropy(dev, buffer, length);
   21d08:	2204      	movs	r2, #4
   21d0a:	4620      	mov	r0, r4
   21d0c:	eb0d 0102 	add.w	r1, sp, r2
   21d10:	f7ff ffbe 	bl	21c90 <z_impl_entropy_get_entropy>
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
   21d14:	2800      	cmp	r0, #0
   21d16:	da02      	bge.n	21d1e <sys_rand32_get+0x46>
#ifndef _ASMLANGUAGE
extern u32_t z_timer_cycle_get_32(void);

static inline u32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   21d18:	f7fe fac2 	bl	202a0 <z_timer_cycle_get_32>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
   21d1c:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
   21d1e:	9801      	ldr	r0, [sp, #4]
   21d20:	b003      	add	sp, #12
   21d22:	bd30      	pop	{r4, r5, pc}
   21d24:	20022188 	.word	0x20022188
   21d28:	00038edd 	.word	0x00038edd
   21d2c:	00038ee7 	.word	0x00038ee7
   21d30:	00038f20 	.word	0x00038f20
   21d34:	00037a66 	.word	0x00037a66
   21d38:	00038f35 	.word	0x00038f35

00021d3c <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   21d3c:	b570      	push	{r4, r5, r6, lr}
   21d3e:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   21d40:	460c      	mov	r4, r1
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   21d42:	6885      	ldr	r5, [r0, #8]
   21d44:	b961      	cbnz	r1, 21d60 <gpio_nrfx_manage_callback+0x24>
   21d46:	4922      	ldr	r1, [pc, #136]	; (21dd0 <gpio_nrfx_manage_callback+0x94>)
   21d48:	231c      	movs	r3, #28
   21d4a:	4a22      	ldr	r2, [pc, #136]	; (21dd4 <gpio_nrfx_manage_callback+0x98>)
   21d4c:	4822      	ldr	r0, [pc, #136]	; (21dd8 <gpio_nrfx_manage_callback+0x9c>)
   21d4e:	f011 fbe2 	bl	33516 <printk>
   21d52:	4822      	ldr	r0, [pc, #136]	; (21ddc <gpio_nrfx_manage_callback+0xa0>)
   21d54:	f011 fbdf 	bl	33516 <printk>
   21d58:	211c      	movs	r1, #28
   21d5a:	481e      	ldr	r0, [pc, #120]	; (21dd4 <gpio_nrfx_manage_callback+0x98>)
   21d5c:	f011 fc21 	bl	335a2 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   21d60:	6863      	ldr	r3, [r4, #4]
   21d62:	b963      	cbnz	r3, 21d7e <gpio_nrfx_manage_callback+0x42>
   21d64:	491e      	ldr	r1, [pc, #120]	; (21de0 <gpio_nrfx_manage_callback+0xa4>)
   21d66:	231d      	movs	r3, #29
   21d68:	4a1a      	ldr	r2, [pc, #104]	; (21dd4 <gpio_nrfx_manage_callback+0x98>)
   21d6a:	481b      	ldr	r0, [pc, #108]	; (21dd8 <gpio_nrfx_manage_callback+0x9c>)
   21d6c:	f011 fbd3 	bl	33516 <printk>
   21d70:	481c      	ldr	r0, [pc, #112]	; (21de4 <gpio_nrfx_manage_callback+0xa8>)
   21d72:	f011 fbd0 	bl	33516 <printk>
   21d76:	211d      	movs	r1, #29
   21d78:	4816      	ldr	r0, [pc, #88]	; (21dd4 <gpio_nrfx_manage_callback+0x98>)
   21d7a:	f011 fc12 	bl	335a2 <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
   21d7e:	682b      	ldr	r3, [r5, #0]

	if (!sys_slist_is_empty(callbacks)) {
   21d80:	b15b      	cbz	r3, 21d9a <gpio_nrfx_manage_callback+0x5e>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   21d82:	2200      	movs	r2, #0
   21d84:	429c      	cmp	r4, r3
   21d86:	d113      	bne.n	21db0 <gpio_nrfx_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
   21d88:	6823      	ldr	r3, [r4, #0]
   21d8a:	b95a      	cbnz	r2, 21da4 <gpio_nrfx_manage_callback+0x68>
   21d8c:	686a      	ldr	r2, [r5, #4]
	list->head = node;
   21d8e:	602b      	str	r3, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
   21d90:	4294      	cmp	r4, r2
   21d92:	d100      	bne.n	21d96 <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
   21d94:	606b      	str	r3, [r5, #4]
	parent->next = child;
   21d96:	2300      	movs	r3, #0
   21d98:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   21d9a:	b976      	cbnz	r6, 21dba <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   21d9c:	2000      	movs	r0, #0
				     callback, set);
}
   21d9e:	bd70      	pop	{r4, r5, r6, pc}
   21da0:	460b      	mov	r3, r1
   21da2:	e7ef      	b.n	21d84 <gpio_nrfx_manage_callback+0x48>
   21da4:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   21da6:	686b      	ldr	r3, [r5, #4]
   21da8:	429c      	cmp	r4, r3
	list->tail = node;
   21daa:	bf08      	it	eq
   21dac:	606a      	streq	r2, [r5, #4]
}
   21dae:	e7f2      	b.n	21d96 <gpio_nrfx_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21db0:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   21db2:	461a      	mov	r2, r3
   21db4:	2900      	cmp	r1, #0
   21db6:	d1f3      	bne.n	21da0 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
   21db8:	b13e      	cbz	r6, 21dca <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
   21dba:	682b      	ldr	r3, [r5, #0]
	parent->next = child;
   21dbc:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   21dbe:	6868      	ldr	r0, [r5, #4]
	list->head = node;
   21dc0:	602c      	str	r4, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   21dc2:	2800      	cmp	r0, #0
   21dc4:	d1ea      	bne.n	21d9c <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   21dc6:	606c      	str	r4, [r5, #4]
}
   21dc8:	e7e9      	b.n	21d9e <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
   21dca:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   21dce:	e7e6      	b.n	21d9e <gpio_nrfx_manage_callback+0x62>
   21dd0:	00038fba 	.word	0x00038fba
   21dd4:	00038f8d 	.word	0x00038f8d
   21dd8:	00037a66 	.word	0x00037a66
   21ddc:	00038fc3 	.word	0x00038fc3
   21de0:	00038fd2 	.word	0x00038fd2
   21de4:	00038fe4 	.word	0x00038fe4

00021de8 <nrf_gpio_pin_port_decode.isra.0.part.0>:
 *
 * @param[in,out] p_pin Pointer to the absolute pin number overriden by the pin number that is relative to the port.
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
   21de8:	b508      	push	{r3, lr}
{
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   21dea:	f240 11ff 	movw	r1, #511	; 0x1ff
   21dee:	4b02      	ldr	r3, [pc, #8]	; (21df8 <nrf_gpio_pin_port_decode.isra.0.part.0+0x10>)
   21df0:	4a02      	ldr	r2, [pc, #8]	; (21dfc <nrf_gpio_pin_port_decode.isra.0.part.0+0x14>)
   21df2:	4803      	ldr	r0, [pc, #12]	; (21e00 <nrf_gpio_pin_port_decode.isra.0.part.0+0x18>)
   21df4:	f00f fe5e 	bl	31ab4 <__assert_func>
   21df8:	00038ffb 	.word	0x00038ffb
   21dfc:	0003907b 	.word	0x0003907b
   21e00:	00039009 	.word	0x00039009

00021e04 <nrf_gpio_cfg_sense_set>:
   21e04:	281f      	cmp	r0, #31
}


NRF_STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t             pin_number,
                                              nrf_gpio_pin_sense_t sense_config)
{
   21e06:	b508      	push	{r3, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   21e08:	d901      	bls.n	21e0e <nrf_gpio_cfg_sense_set+0xa>
   21e0a:	f7ff ffed 	bl	21de8 <nrf_gpio_pin_port_decode.isra.0.part.0>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    /*lint -e{845} // A zero has been given as right argument to operator '|'" */
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   21e0e:	4b06      	ldr	r3, [pc, #24]	; (21e28 <nrf_gpio_cfg_sense_set+0x24>)
   21e10:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   21e14:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   21e18:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000

    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   21e1c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   21e20:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
}
   21e24:	bd08      	pop	{r3, pc}
   21e26:	bf00      	nop
   21e28:	40842500 	.word	0x40842500

00021e2c <gpio_nrfx_init>:
#endif
	}
}

static int gpio_nrfx_init(struct device *port)
{
   21e2c:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   21e2e:	4b09      	ldr	r3, [pc, #36]	; (21e54 <gpio_nrfx_init+0x28>)
   21e30:	781a      	ldrb	r2, [r3, #0]
   21e32:	b96a      	cbnz	r2, 21e50 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   21e34:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
   21e36:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
   21e38:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
   21e3a:	2105      	movs	r1, #5
   21e3c:	f7fe fb2c 	bl	20498 <z_arm_irq_priority_set>
			    DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0_PRIORITY,
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0);
   21e40:	2031      	movs	r0, #49	; 0x31
   21e42:	f7fe fb19 	bl	20478 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   21e46:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   21e4a:	4b03      	ldr	r3, [pc, #12]	; (21e58 <gpio_nrfx_init+0x2c>)
   21e4c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   21e50:	2000      	movs	r0, #0
   21e52:	bd08      	pop	{r3, pc}
   21e54:	200241f2 	.word	0x200241f2
   21e58:	40031000 	.word	0x40031000

00021e5c <gpiote_pin_int_cfg>:
{
   21e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return port->config->config_info;
   21e60:	6803      	ldr	r3, [r0, #0]
	struct gpio_nrfx_data *data = get_port_data(port);
   21e62:	6887      	ldr	r7, [r0, #8]
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   21e64:	689b      	ldr	r3, [r3, #8]
{
   21e66:	460d      	mov	r5, r1
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   21e68:	7918      	ldrb	r0, [r3, #4]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   21e6a:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   21e6c:	4e4b      	ldr	r6, [pc, #300]	; (21f9c <gpiote_pin_int_cfg+0x140>)
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   21e6e:	f001 041f 	and.w	r4, r1, #31
   21e72:	f8d6 2304 	ldr.w	r2, [r6, #772]	; 0x304
   21e76:	ea44 1440 	orr.w	r4, r4, r0, lsl #5
   21e7a:	b2d2      	uxtb	r2, r2
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   21e7c:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   21e80:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
   21e84:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   21e88:	428c      	cmp	r4, r1
   21e8a:	d16d      	bne.n	21f68 <gpiote_pin_int_cfg+0x10c>
		    && (intenset & BIT(i))) {
   21e8c:	fa22 f103 	lsr.w	r1, r2, r3
   21e90:	07c9      	lsls	r1, r1, #31
   21e92:	d569      	bpl.n	21f68 <gpiote_pin_int_cfg+0x10c>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   21e94:	009a      	lsls	r2, r3, #2
   21e96:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   21e9a:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   21e9e:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
   21ea2:	f021 0101 	bic.w	r1, r1, #1
   21ea6:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   21eaa:	2201      	movs	r2, #1
   21eac:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENCLR = mask;
   21eb0:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   21eb4:	2100      	movs	r1, #0
   21eb6:	4620      	mov	r0, r4
   21eb8:	f7ff ffa4 	bl	21e04 <nrf_gpio_cfg_sense_set>
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
   21ebc:	68bb      	ldr	r3, [r7, #8]
   21ebe:	40eb      	lsrs	r3, r5
   21ec0:	f013 0301 	ands.w	r3, r3, #1
   21ec4:	d04d      	beq.n	21f62 <gpiote_pin_int_cfg+0x106>
   21ec6:	68fb      	ldr	r3, [r7, #12]
   21ec8:	40eb      	lsrs	r3, r5
   21eca:	f013 0301 	ands.w	r3, r3, #1
   21ece:	d048      	beq.n	21f62 <gpiote_pin_int_cfg+0x106>
		if (data->trig_edge & BIT(pin)) {
   21ed0:	6978      	ldr	r0, [r7, #20]
   21ed2:	40e8      	lsrs	r0, r5
   21ed4:	f010 0801 	ands.w	r8, r0, #1
   21ed8:	d052      	beq.n	21f80 <gpiote_pin_int_cfg+0x124>
			if (data->double_edge & BIT(pin)) {
   21eda:	69bb      	ldr	r3, [r7, #24]
   21edc:	40eb      	lsrs	r3, r5
   21ede:	07db      	lsls	r3, r3, #31
   21ee0:	d446      	bmi.n	21f70 <gpiote_pin_int_cfg+0x114>
			} else if (((data->active_level & BIT(pin)) != 0U)
   21ee2:	693b      	ldr	r3, [r7, #16]
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   21ee4:	69f9      	ldr	r1, [r7, #28]
			} else if (((data->active_level & BIT(pin)) != 0U)
   21ee6:	40eb      	lsrs	r3, r5
				   ^ ((BIT(pin) & data->inverted) != 0)) {
   21ee8:	fa21 f505 	lsr.w	r5, r1, r5
			} else if (((data->active_level & BIT(pin)) != 0U)
   21eec:	f003 0301 	and.w	r3, r3, #1
   21ef0:	f005 0501 	and.w	r5, r5, #1
				pol = NRF_GPIOTE_POLARITY_HITOLO;
   21ef4:	42ab      	cmp	r3, r5
   21ef6:	bf14      	ite	ne
   21ef8:	2501      	movne	r5, #1
   21efa:	2502      	moveq	r5, #2
   21efc:	2700      	movs	r7, #0
    p_reg->CONFIG[idx] = 0;
}

NRF_STATIC_INLINE bool nrf_gpiote_te_is_enabled(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return (p_reg->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
   21efe:	f507 73a2 	add.w	r3, r7, #324	; 0x144
   21f02:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
		if (!nrf_gpiote_te_is_enabled(NRF_GPIOTE, channel)) {
   21f06:	f013 0303 	ands.w	r3, r3, #3
   21f0a:	d133      	bne.n	21f74 <gpiote_pin_int_cfg+0x118>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   21f0c:	00ba      	lsls	r2, r7, #2
   21f0e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   21f12:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   21f16:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   21f1a:	0224      	lsls	r4, r4, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   21f1c:	f421 3147 	bic.w	r1, r1, #203776	; 0x31c00
   21f20:	f421 7140 	bic.w	r1, r1, #768	; 0x300
   21f24:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   21f28:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
   21f2c:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
   21f30:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   21f34:	430d      	orrs	r5, r1
			nrf_gpiote_event_t evt =
   21f36:	f107 0140 	add.w	r1, r7, #64	; 0x40
   21f3a:	0089      	lsls	r1, r1, #2
    return ((uint32_t)p_reg + event);
   21f3c:	b289      	uxth	r1, r1
   21f3e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   21f42:	f501 3144 	add.w	r1, r1, #200704	; 0x31000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   21f46:	f8c2 5510 	str.w	r5, [r2, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   21f4a:	600b      	str	r3, [r1, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   21f4c:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
   21f50:	f041 0101 	orr.w	r1, r1, #1
   21f54:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
			nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   21f58:	2201      	movs	r2, #1
   21f5a:	fa02 f707 	lsl.w	r7, r2, r7
    p_reg->INTENSET = mask;
   21f5e:	f8c6 7304 	str.w	r7, [r6, #772]	; 0x304
}
   21f62:	4618      	mov	r0, r3
   21f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   21f68:	3301      	adds	r3, #1
   21f6a:	2b08      	cmp	r3, #8
   21f6c:	d186      	bne.n	21e7c <gpiote_pin_int_cfg+0x20>
   21f6e:	e7a1      	b.n	21eb4 <gpiote_pin_int_cfg+0x58>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   21f70:	2503      	movs	r5, #3
   21f72:	e7c3      	b.n	21efc <gpiote_pin_int_cfg+0xa0>
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   21f74:	3701      	adds	r7, #1
   21f76:	2f08      	cmp	r7, #8
   21f78:	d1c1      	bne.n	21efe <gpiote_pin_int_cfg+0xa2>
	return -ENODEV;
   21f7a:	f06f 0312 	mvn.w	r3, #18
   21f7e:	e7f0      	b.n	21f62 <gpiote_pin_int_cfg+0x106>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   21f80:	69fb      	ldr	r3, [r7, #28]
   21f82:	6939      	ldr	r1, [r7, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   21f84:	4620      	mov	r0, r4
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   21f86:	4059      	eors	r1, r3
   21f88:	40e9      	lsrs	r1, r5
   21f8a:	f001 0101 	and.w	r1, r1, #1
   21f8e:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   21f92:	b2c9      	uxtb	r1, r1
   21f94:	f7ff ff36 	bl	21e04 <nrf_gpio_cfg_sense_set>
	int res = 0;
   21f98:	4643      	mov	r3, r8
   21f9a:	e7e2      	b.n	21f62 <gpiote_pin_int_cfg+0x106>
   21f9c:	40031000 	.word	0x40031000

00021fa0 <gpio_nrfx_config>:
{
   21fa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   21fa4:	f403 4470 	and.w	r4, r3, #61440	; 0xf000
   21fa8:	f5b4 4fa0 	cmp.w	r4, #20480	; 0x5000
{
   21fac:	4680      	mov	r8, r0
   21fae:	461f      	mov	r7, r3
	struct gpio_nrfx_data *data = get_port_data(port);
   21fb0:	6886      	ldr	r6, [r0, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   21fb2:	d041      	beq.n	22038 <gpio_nrfx_config+0x98>
   21fb4:	dc0f      	bgt.n	21fd6 <gpio_nrfx_config+0x36>
   21fb6:	f5b4 5f40 	cmp.w	r4, #12288	; 0x3000
   21fba:	d03f      	beq.n	2203c <gpio_nrfx_config+0x9c>
   21fbc:	dc06      	bgt.n	21fcc <gpio_nrfx_config+0x2c>
   21fbe:	b1a4      	cbz	r4, 21fea <gpio_nrfx_config+0x4a>
   21fc0:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   21fc4:	d03c      	beq.n	22040 <gpio_nrfx_config+0xa0>
   21fc6:	f06f 0015 	mvn.w	r0, #21
   21fca:	e032      	b.n	22032 <gpio_nrfx_config+0x92>
   21fcc:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
   21fd0:	d1f9      	bne.n	21fc6 <gpio_nrfx_config+0x26>
		drive = NRF_GPIO_PIN_S0H1;
   21fd2:	2402      	movs	r4, #2
   21fd4:	e009      	b.n	21fea <gpio_nrfx_config+0x4a>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
   21fd6:	f5b4 4f40 	cmp.w	r4, #49152	; 0xc000
   21fda:	d033      	beq.n	22044 <gpio_nrfx_config+0xa4>
   21fdc:	f5b4 4f50 	cmp.w	r4, #53248	; 0xd000
   21fe0:	d032      	beq.n	22048 <gpio_nrfx_config+0xa8>
   21fe2:	f5b4 4fe0 	cmp.w	r4, #28672	; 0x7000
   21fe6:	d1ee      	bne.n	21fc6 <gpio_nrfx_config+0x26>
		drive = NRF_GPIO_PIN_D0H1;
   21fe8:	2405      	movs	r4, #5
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
   21fea:	f407 7040 	and.w	r0, r7, #768	; 0x300
   21fee:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   21ff2:	d02b      	beq.n	2204c <gpio_nrfx_config+0xac>
		pull = NRF_GPIO_PIN_NOPULL;
   21ff4:	f5a0 7500 	sub.w	r5, r0, #512	; 0x200
   21ff8:	4268      	negs	r0, r5
   21ffa:	4168      	adcs	r0, r5
	if (access_op == GPIO_ACCESS_BY_PORT) {
   21ffc:	2901      	cmp	r1, #1
		from_pin = pin;
   21ffe:	bf19      	ittee	ne
   22000:	b2d5      	uxtbne	r5, r2
		to_pin   = pin;
   22002:	46a9      	movne	r9, r5
		to_pin   = 31U;
   22004:	f04f 091f 	moveq.w	r9, #31
		from_pin = 0U;
   22008:	2500      	moveq	r5, #0
   2200a:	f04f 0b01 	mov.w	fp, #1
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
   2200e:	f007 0c01 	and.w	ip, r7, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
   22012:	ea4f 034c 	mov.w	r3, ip, lsl #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   22016:	ea43 030c 	orr.w	r3, r3, ip
   2201a:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   2201e:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 220c8 <gpio_nrfx_config+0x128>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   22022:	f007 0302 	and.w	r3, r7, #2
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   22026:	ea44 0480 	orr.w	r4, r4, r0, lsl #2
   2202a:	9301      	str	r3, [sp, #4]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   2202c:	45a9      	cmp	r9, r5
   2202e:	d20f      	bcs.n	22050 <gpio_nrfx_config+0xb0>
	return 0;
   22030:	2000      	movs	r0, #0
}
   22032:	b003      	add	sp, #12
   22034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		drive = NRF_GPIO_PIN_H0H1;
   22038:	2403      	movs	r4, #3
   2203a:	e7d6      	b.n	21fea <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0S1;
   2203c:	2404      	movs	r4, #4
   2203e:	e7d4      	b.n	21fea <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_H0S1;
   22040:	2401      	movs	r4, #1
   22042:	e7d2      	b.n	21fea <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_S0D1;
   22044:	2406      	movs	r4, #6
   22046:	e7d0      	b.n	21fea <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_H0D1;
   22048:	2407      	movs	r4, #7
   2204a:	e7ce      	b.n	21fea <gpio_nrfx_config+0x4a>
		pull = NRF_GPIO_PIN_PULLUP;
   2204c:	2003      	movs	r0, #3
   2204e:	e7d5      	b.n	21ffc <gpio_nrfx_config+0x5c>
	return port->config->config_info;
   22050:	f8d8 3000 	ldr.w	r3, [r8]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
   22054:	689b      	ldr	r3, [r3, #8]
   22056:	791a      	ldrb	r2, [r3, #4]
   22058:	f005 031f 	and.w	r3, r5, #31
   2205c:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   22060:	2b1f      	cmp	r3, #31
   22062:	dd01      	ble.n	22068 <gpio_nrfx_config+0xc8>
   22064:	f7ff fec0 	bl	21de8 <nrf_gpio_pin_port_decode.isra.0.part.0>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   22068:	3380      	adds	r3, #128	; 0x80
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   2206a:	9901      	ldr	r1, [sp, #4]
   2206c:	f84a 4023 	str.w	r4, [sl, r3, lsl #2]
   22070:	68b2      	ldr	r2, [r6, #8]
   22072:	fa0b f305 	lsl.w	r3, fp, r5
   22076:	b319      	cbz	r1, 220c0 <gpio_nrfx_config+0x120>
   22078:	431a      	orrs	r2, r3
   2207a:	60b2      	str	r2, [r6, #8]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
   2207c:	6972      	ldr	r2, [r6, #20]
   2207e:	06b8      	lsls	r0, r7, #26
   22080:	bf4c      	ite	mi
   22082:	431a      	orrmi	r2, r3
   22084:	439a      	bicpl	r2, r3
   22086:	6172      	str	r2, [r6, #20]
		WRITE_BIT(data->double_edge, curr_pin,
   22088:	69b2      	ldr	r2, [r6, #24]
   2208a:	0679      	lsls	r1, r7, #25
   2208c:	bf4c      	ite	mi
   2208e:	431a      	orrmi	r2, r3
   22090:	439a      	bicpl	r2, r3
   22092:	61b2      	str	r2, [r6, #24]
		WRITE_BIT(data->active_level, curr_pin,
   22094:	6932      	ldr	r2, [r6, #16]
   22096:	0778      	lsls	r0, r7, #29
   22098:	bf4c      	ite	mi
   2209a:	431a      	orrmi	r2, r3
   2209c:	439a      	bicpl	r2, r3
   2209e:	6132      	str	r2, [r6, #16]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
   220a0:	69f2      	ldr	r2, [r6, #28]
   220a2:	0639      	lsls	r1, r7, #24
   220a4:	bf4c      	ite	mi
   220a6:	4313      	orrmi	r3, r2
   220a8:	ea22 0303 	bicpl.w	r3, r2, r3
		res = gpiote_pin_int_cfg(port, curr_pin);
   220ac:	4629      	mov	r1, r5
   220ae:	4640      	mov	r0, r8
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
   220b0:	61f3      	str	r3, [r6, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
   220b2:	f7ff fed3 	bl	21e5c <gpiote_pin_int_cfg>
		if (res != 0) {
   220b6:	2800      	cmp	r0, #0
   220b8:	d1bb      	bne.n	22032 <gpio_nrfx_config+0x92>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   220ba:	3501      	adds	r5, #1
   220bc:	b2ed      	uxtb	r5, r5
   220be:	e7b5      	b.n	2202c <gpio_nrfx_config+0x8c>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
   220c0:	ea22 0203 	bic.w	r2, r2, r3
   220c4:	e7d9      	b.n	2207a <gpio_nrfx_config+0xda>
   220c6:	bf00      	nop
   220c8:	40842500 	.word	0x40842500

000220cc <gpiote_event_handler>:
{
   220cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   220d0:	4e59      	ldr	r6, [pc, #356]	; (22238 <gpiote_event_handler+0x16c>)
   220d2:	6837      	ldr	r7, [r6, #0]
	if (port_event) {
   220d4:	2f00      	cmp	r7, #0
   220d6:	d060      	beq.n	2219a <gpiote_event_handler+0xce>
	u32_t bit = 1U << pin;
   220d8:	f04f 0801 	mov.w	r8, #1
	u32_t pin = 0U;
   220dc:	f04f 0a00 	mov.w	sl, #0
	struct gpio_nrfx_data *data = get_port_data(port);
   220e0:	4a56      	ldr	r2, [pc, #344]	; (2223c <gpiote_event_handler+0x170>)
   220e2:	6893      	ldr	r3, [r2, #8]
	return port->config->config_info;
   220e4:	6812      	ldr	r2, [r2, #0]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
   220e6:	69dc      	ldr	r4, [r3, #28]
	return port->config->config_info;
   220e8:	f8d2 9008 	ldr.w	r9, [r2, #8]
	u32_t out = data->int_en & data->pin_int_en;
   220ec:	e9d3 2502 	ldrd	r2, r5, [r3, #8]
   220f0:	4015      	ands	r5, r2
	out &= ~data->trig_edge & ~data->double_edge;
   220f2:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   220f6:	430a      	orrs	r2, r1
   220f8:	ea25 0502 	bic.w	r5, r5, r2
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
   220fc:	f8d9 2000 	ldr.w	r2, [r9]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
   22100:	691b      	ldr	r3, [r3, #16]
}


NRF_STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   22102:	6912      	ldr	r2, [r2, #16]
   22104:	405c      	eors	r4, r3
   22106:	4054      	eors	r4, r2
	u32_t out = pin_states & level_pins;
   22108:	ea25 0404 	bic.w	r4, r5, r4
	while (level_pins) {
   2210c:	bb95      	cbnz	r5, 22174 <gpiote_event_handler+0xa8>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2210e:	6035      	str	r5, [r6, #0]
	u32_t fired_triggers[GPIO_COUNT] = {0};
   22110:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   22112:	2001      	movs	r0, #1
   22114:	461e      	mov	r6, r3
    return p_reg->INTENSET & mask;
   22116:	494a      	ldr	r1, [pc, #296]	; (22240 <gpiote_event_handler+0x174>)
   22118:	4d4a      	ldr	r5, [pc, #296]	; (22244 <gpiote_event_handler+0x178>)
   2211a:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
   2211e:	fa00 fc03 	lsl.w	ip, r0, r3
   22122:	ea1c 0f02 	tst.w	ip, r2
   22126:	d00d      	beq.n	22144 <gpiote_event_handler+0x78>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22128:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   2212c:	b152      	cbz	r2, 22144 <gpiote_event_handler+0x78>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   2212e:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   22132:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   22136:	f845 6023 	str.w	r6, [r5, r3, lsl #2]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   2213a:	f3c2 2204 	ubfx	r2, r2, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   2213e:	fa00 f202 	lsl.w	r2, r0, r2
   22142:	4314      	orrs	r4, r2
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   22144:	3301      	adds	r3, #1
   22146:	2b08      	cmp	r3, #8
   22148:	d1e7      	bne.n	2211a <gpiote_event_handler+0x4e>
	if (fired_triggers[0]) {
   2214a:	bb44      	cbnz	r4, 2219e <gpiote_event_handler+0xd2>
	if (port_event) {
   2214c:	b187      	cbz	r7, 22170 <gpiote_event_handler+0xa4>
	u32_t bit = 1U << pin;
   2214e:	2601      	movs	r6, #1
	u32_t pin = 0U;
   22150:	2700      	movs	r7, #0
	const struct gpio_nrfx_data *data = get_port_data(port);
   22152:	4b3a      	ldr	r3, [pc, #232]	; (2223c <gpiote_event_handler+0x170>)
   22154:	689d      	ldr	r5, [r3, #8]
	return port->config->config_info;
   22156:	681b      	ldr	r3, [r3, #0]
   22158:	f8d3 8008 	ldr.w	r8, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
   2215c:	e9d5 3402 	ldrd	r3, r4, [r5, #8]
   22160:	401c      	ands	r4, r3
	out &= ~data->trig_edge & ~data->double_edge;
   22162:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
   22166:	4313      	orrs	r3, r2
   22168:	ea24 0403 	bic.w	r4, r4, r3
	while (level_pins) {
   2216c:	2c00      	cmp	r4, #0
   2216e:	d14b      	bne.n	22208 <gpiote_event_handler+0x13c>
}
   22170:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (level_pins & bit) {
   22174:	ea15 0f08 	tst.w	r5, r8
   22178:	d00a      	beq.n	22190 <gpiote_event_handler+0xc4>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2217a:	f899 3004 	ldrb.w	r3, [r9, #4]
   2217e:	f00a 001f 	and.w	r0, sl, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   22182:	2100      	movs	r1, #0
   22184:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   22188:	f7ff fe3c 	bl	21e04 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   2218c:	ea25 0508 	bic.w	r5, r5, r8
		++pin;
   22190:	f10a 0a01 	add.w	sl, sl, #1
		bit <<= 1;
   22194:	ea4f 0848 	mov.w	r8, r8, lsl #1
   22198:	e7b8      	b.n	2210c <gpiote_event_handler+0x40>
	u32_t fired_triggers[GPIO_COUNT] = {0};
   2219a:	463c      	mov	r4, r7
   2219c:	e7b8      	b.n	22110 <gpiote_event_handler+0x44>
	struct gpio_nrfx_data *data = get_port_data(port);
   2219e:	4b27      	ldr	r3, [pc, #156]	; (2223c <gpiote_event_handler+0x170>)
   221a0:	f8d3 9008 	ldr.w	r9, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   221a4:	f8d9 5000 	ldr.w	r5, [r9]
   221a8:	2d00      	cmp	r5, #0
   221aa:	d0cf      	beq.n	2214c <gpiote_event_handler+0x80>
	return node->next;
   221ac:	682e      	ldr	r6, [r5, #0]
			cb->handler(port, cb, pins);
   221ae:	4698      	mov	r8, r3
   221b0:	2e00      	cmp	r6, #0
   221b2:	bf38      	it	cc
   221b4:	2600      	movcc	r6, #0
			__ASSERT(cb->handler, "No callback handler!");
   221b6:	f8df a098 	ldr.w	sl, [pc, #152]	; 22250 <gpiote_event_handler+0x184>
   221ba:	f8df b098 	ldr.w	fp, [pc, #152]	; 22254 <gpiote_event_handler+0x188>
		if ((cb->pin_mask & pins) & data->int_en) {
   221be:	f8d9 300c 	ldr.w	r3, [r9, #12]
   221c2:	68aa      	ldr	r2, [r5, #8]
   221c4:	4023      	ands	r3, r4
   221c6:	4213      	tst	r3, r2
   221c8:	d015      	beq.n	221f6 <gpiote_event_handler+0x12a>
			__ASSERT(cb->handler, "No callback handler!");
   221ca:	686b      	ldr	r3, [r5, #4]
   221cc:	b973      	cbnz	r3, 221ec <gpiote_event_handler+0x120>
   221ce:	4659      	mov	r1, fp
   221d0:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
   221d4:	4652      	mov	r2, sl
   221d6:	481c      	ldr	r0, [pc, #112]	; (22248 <gpiote_event_handler+0x17c>)
   221d8:	f011 f99d 	bl	33516 <printk>
   221dc:	481b      	ldr	r0, [pc, #108]	; (2224c <gpiote_event_handler+0x180>)
   221de:	f011 f99a 	bl	33516 <printk>
   221e2:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
   221e6:	4650      	mov	r0, sl
   221e8:	f011 f9db 	bl	335a2 <assert_post_action>
			cb->handler(port, cb, pins);
   221ec:	4622      	mov	r2, r4
   221ee:	4629      	mov	r1, r5
   221f0:	4640      	mov	r0, r8
   221f2:	686b      	ldr	r3, [r5, #4]
   221f4:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   221f6:	2e00      	cmp	r6, #0
   221f8:	d0a8      	beq.n	2214c <gpiote_event_handler+0x80>
   221fa:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   221fc:	4635      	mov	r5, r6
   221fe:	2b00      	cmp	r3, #0
   22200:	bf38      	it	cc
   22202:	2300      	movcc	r3, #0
   22204:	461e      	mov	r6, r3
   22206:	e7da      	b.n	221be <gpiote_event_handler+0xf2>
		if (level_pins & bit) {
   22208:	4226      	tst	r6, r4
   2220a:	d012      	beq.n	22232 <gpiote_event_handler+0x166>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   2220c:	692b      	ldr	r3, [r5, #16]
   2220e:	69e9      	ldr	r1, [r5, #28]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   22210:	f007 001f 	and.w	r0, r7, #31
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   22214:	4059      	eors	r1, r3
   22216:	40f9      	lsrs	r1, r7
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   22218:	f898 3004 	ldrb.w	r3, [r8, #4]
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
   2221c:	f001 0101 	and.w	r1, r1, #1
   22220:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   22224:	b2c9      	uxtb	r1, r1
   22226:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   2222a:	f7ff fdeb 	bl	21e04 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   2222e:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   22232:	3701      	adds	r7, #1
		bit <<= 1;
   22234:	0076      	lsls	r6, r6, #1
   22236:	e799      	b.n	2216c <gpiote_event_handler+0xa0>
   22238:	4003117c 	.word	0x4003117c
   2223c:	200297fc 	.word	0x200297fc
   22240:	40031000 	.word	0x40031000
   22244:	40031100 	.word	0x40031100
   22248:	00037a66 	.word	0x00037a66
   2224c:	00038fe4 	.word	0x00038fe4
   22250:	0003903c 	.word	0x0003903c
   22254:	00039068 	.word	0x00039068

00022258 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   22258:	4b02      	ldr	r3, [pc, #8]	; (22264 <flash_nrf_pages_layout+0xc>)
   2225a:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   2225c:	2301      	movs	r3, #1
   2225e:	6013      	str	r3, [r2, #0]
}
   22260:	4770      	bx	lr
   22262:	bf00      	nop
   22264:	200221ac 	.word	0x200221ac

00022268 <flash_nrf_erase>:
{
   22268:	b570      	push	{r4, r5, r6, lr}
   2226a:	460d      	mov	r5, r1
   2226c:	4614      	mov	r4, r2
	u32_t pg_size = nrfx_nvmc_flash_page_size_get();
   2226e:	f013 fa86 	bl	3577e <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   22272:	4621      	mov	r1, r4
	u32_t pg_size = nrfx_nvmc_flash_page_size_get();
   22274:	4606      	mov	r6, r0
	if (is_regular_addr_valid(addr, size)) {
   22276:	4628      	mov	r0, r5
   22278:	f012 facb 	bl	34812 <is_regular_addr_valid>
   2227c:	b1f0      	cbz	r0, 222bc <flash_nrf_erase+0x54>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   2227e:	fbb5 f3f6 	udiv	r3, r5, r6
   22282:	fb06 5313 	mls	r3, r6, r3, r5
   22286:	b9cb      	cbnz	r3, 222bc <flash_nrf_erase+0x54>
   22288:	fbb4 f3f6 	udiv	r3, r4, r6
   2228c:	fb06 4013 	mls	r0, r6, r3, r4
   22290:	b9a0      	cbnz	r0, 222bc <flash_nrf_erase+0x54>
		if (!n_pages) {
   22292:	42a6      	cmp	r6, r4
   22294:	d811      	bhi.n	222ba <flash_nrf_erase+0x52>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sem, *(uintptr_t *)&timeout, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
   22296:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2229a:	480a      	ldr	r0, [pc, #40]	; (222c4 <flash_nrf_erase+0x5c>)
   2229c:	f00e fabe 	bl	3081c <z_impl_k_sem_take>

#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

static int erase_op(void *context)
{
	u32_t pg_size = nrfx_nvmc_flash_page_size_get();
   222a0:	f013 fa6d 	bl	3577e <nrfx_nvmc_flash_page_size_get>
   222a4:	4606      	mov	r6, r0
		return FLASH_OP_DONE;
	}
#endif

	do {
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   222a6:	4628      	mov	r0, r5
   222a8:	f00c f908 	bl	2e4bc <nrfx_nvmc_page_erase>
				break;
			}
		}
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

	} while (e_ctx->len > 0);
   222ac:	1ba4      	subs	r4, r4, r6
   222ae:	4435      	add	r5, r6
   222b0:	d1f9      	bne.n	222a6 <flash_nrf_erase+0x3e>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   222b2:	4804      	ldr	r0, [pc, #16]	; (222c4 <flash_nrf_erase+0x5c>)
   222b4:	f00e fa68 	bl	30788 <z_impl_k_sem_give>
	return ret;
   222b8:	4620      	mov	r0, r4
}
   222ba:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   222bc:	f06f 0015 	mvn.w	r0, #21
   222c0:	e7fb      	b.n	222ba <flash_nrf_erase+0x52>
   222c2:	bf00      	nop
   222c4:	200221b4 	.word	0x200221b4

000222c8 <nrf_flash_init>:
{
   222c8:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   222ca:	2201      	movs	r2, #1
   222cc:	4806      	ldr	r0, [pc, #24]	; (222e8 <nrf_flash_init+0x20>)
   222ce:	4611      	mov	r1, r2
   222d0:	f013 faf5 	bl	358be <z_impl_k_sem_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   222d4:	f013 fa56 	bl	35784 <nrfx_nvmc_flash_page_count_get>
   222d8:	4c04      	ldr	r4, [pc, #16]	; (222ec <nrf_flash_init+0x24>)
   222da:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   222dc:	f013 fa4f 	bl	3577e <nrfx_nvmc_flash_page_size_get>
   222e0:	6060      	str	r0, [r4, #4]
}
   222e2:	2000      	movs	r0, #0
   222e4:	bd10      	pop	{r4, pc}
   222e6:	bf00      	nop
   222e8:	200221b4 	.word	0x200221b4
   222ec:	200221ac 	.word	0x200221ac

000222f0 <flash_nrf_write>:
{
   222f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   222f2:	460e      	mov	r6, r1
	if (is_regular_addr_valid(addr, len)) {
   222f4:	4619      	mov	r1, r3
   222f6:	4630      	mov	r0, r6
{
   222f8:	4617      	mov	r7, r2
   222fa:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   222fc:	f012 fa89 	bl	34812 <is_regular_addr_valid>
   22300:	b1f8      	cbz	r0, 22342 <flash_nrf_write+0x52>
	return (data & 0x3) ? false : true;
   22302:	ea46 0504 	orr.w	r5, r6, r4
	if (!is_aligned_32(addr) || (len % sizeof(u32_t))) {
   22306:	f015 0503 	ands.w	r5, r5, #3
   2230a:	d11a      	bne.n	22342 <flash_nrf_write+0x52>
	if (!len) {
   2230c:	b1e4      	cbz	r4, 22348 <flash_nrf_write+0x58>
	return z_impl_k_sem_take(sem, timeout);
   2230e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   22312:	480e      	ldr	r0, [pc, #56]	; (2234c <flash_nrf_write+0x5c>)
   22314:	f00e fa82 	bl	3081c <z_impl_k_sem_take>
	w_ctx->flash_addr += shift;
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
   22318:	f024 0403 	bic.w	r4, r4, #3
		}
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(u32_t)) {
   2231c:	42a5      	cmp	r5, r4
   2231e:	eb06 0005 	add.w	r0, r6, r5
   22322:	d109      	bne.n	22338 <flash_nrf_write+0x48>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   22324:	4a0a      	ldr	r2, [pc, #40]	; (22350 <flash_nrf_write+0x60>)
   22326:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   2232a:	07db      	lsls	r3, r3, #31
   2232c:	d5fb      	bpl.n	22326 <flash_nrf_write+0x36>
	z_impl_k_sem_give(sem);
   2232e:	4807      	ldr	r0, [pc, #28]	; (2234c <flash_nrf_write+0x5c>)
   22330:	f00e fa2a 	bl	30788 <z_impl_k_sem_give>
   22334:	2000      	movs	r0, #0
}
   22336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   22338:	5979      	ldr	r1, [r7, r5]
   2233a:	f00c f8eb 	bl	2e514 <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
   2233e:	3504      	adds	r5, #4
}
   22340:	e7ec      	b.n	2231c <flash_nrf_write+0x2c>
		return -EINVAL;
   22342:	f06f 0015 	mvn.w	r0, #21
   22346:	e7f6      	b.n	22336 <flash_nrf_write+0x46>
		return 0;
   22348:	4620      	mov	r0, r4
   2234a:	e7f4      	b.n	22336 <flash_nrf_write+0x46>
   2234c:	200221b4 	.word	0x200221b4
   22350:	40039000 	.word	0x40039000

00022354 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
   22354:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   22356:	794b      	ldrb	r3, [r1, #5]
   22358:	2b01      	cmp	r3, #1
   2235a:	d02b      	beq.n	223b4 <uarte_nrfx_configure+0x60>
   2235c:	2b03      	cmp	r3, #3
   2235e:	d126      	bne.n	223ae <uarte_nrfx_configure+0x5a>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   22360:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   22362:	798b      	ldrb	r3, [r1, #6]
   22364:	2b03      	cmp	r3, #3
   22366:	d122      	bne.n	223ae <uarte_nrfx_configure+0x5a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   22368:	79cc      	ldrb	r4, [r1, #7]
   2236a:	b12c      	cbz	r4, 22378 <uarte_nrfx_configure+0x24>
   2236c:	2c01      	cmp	r4, #1
   2236e:	d11e      	bne.n	223ae <uarte_nrfx_configure+0x5a>
	return dev->config->config_info;
   22370:	6803      	ldr	r3, [r0, #0]
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   22372:	689b      	ldr	r3, [r3, #8]
   22374:	791b      	ldrb	r3, [r3, #4]
   22376:	b1d3      	cbz	r3, 223ae <uarte_nrfx_configure+0x5a>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   22378:	790a      	ldrb	r2, [r1, #4]
   2237a:	b112      	cbz	r2, 22382 <uarte_nrfx_configure+0x2e>
   2237c:	2a02      	cmp	r2, #2
   2237e:	d116      	bne.n	223ae <uarte_nrfx_configure+0x5a>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   22380:	220e      	movs	r2, #14
	return dev->config->config_info;
   22382:	6805      	ldr	r5, [r0, #0]
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   22384:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   22386:	68ad      	ldr	r5, [r5, #8]
	switch (baudrate) {
   22388:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   2238c:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   2238e:	d064      	beq.n	2245a <uarte_nrfx_configure+0x106>
   22390:	d82d      	bhi.n	223ee <uarte_nrfx_configure+0x9a>
   22392:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   22396:	d063      	beq.n	22460 <uarte_nrfx_configure+0x10c>
   22398:	d816      	bhi.n	223c8 <uarte_nrfx_configure+0x74>
   2239a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   2239e:	d061      	beq.n	22464 <uarte_nrfx_configure+0x110>
   223a0:	d80a      	bhi.n	223b8 <uarte_nrfx_configure+0x64>
   223a2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   223a6:	d060      	beq.n	2246a <uarte_nrfx_configure+0x116>
   223a8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   223ac:	d060      	beq.n	22470 <uarte_nrfx_configure+0x11c>
   223ae:	f06f 0085 	mvn.w	r0, #133	; 0x85
   223b2:	e051      	b.n	22458 <uarte_nrfx_configure+0x104>
	switch (cfg->stop_bits) {
   223b4:	2600      	movs	r6, #0
   223b6:	e7d4      	b.n	22362 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   223b8:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   223bc:	d05b      	beq.n	22476 <uarte_nrfx_configure+0x122>
   223be:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   223c2:	d1f4      	bne.n	223ae <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   223c4:	4b36      	ldr	r3, [pc, #216]	; (224a0 <uarte_nrfx_configure+0x14c>)
   223c6:	e03c      	b.n	22442 <uarte_nrfx_configure+0xee>
	switch (baudrate) {
   223c8:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   223cc:	d056      	beq.n	2247c <uarte_nrfx_configure+0x128>
   223ce:	d807      	bhi.n	223e0 <uarte_nrfx_configure+0x8c>
   223d0:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   223d4:	d054      	beq.n	22480 <uarte_nrfx_configure+0x12c>
   223d6:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   223da:	d1e8      	bne.n	223ae <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   223dc:	4b31      	ldr	r3, [pc, #196]	; (224a4 <uarte_nrfx_configure+0x150>)
   223de:	e030      	b.n	22442 <uarte_nrfx_configure+0xee>
	switch (baudrate) {
   223e0:	f647 2712 	movw	r7, #31250	; 0x7a12
   223e4:	42bb      	cmp	r3, r7
   223e6:	d1e2      	bne.n	223ae <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   223e8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   223ec:	e029      	b.n	22442 <uarte_nrfx_configure+0xee>
	switch (baudrate) {
   223ee:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   223f2:	d047      	beq.n	22484 <uarte_nrfx_configure+0x130>
   223f4:	d813      	bhi.n	2241e <uarte_nrfx_configure+0xca>
   223f6:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   223fa:	d046      	beq.n	2248a <uarte_nrfx_configure+0x136>
   223fc:	d809      	bhi.n	22412 <uarte_nrfx_configure+0xbe>
   223fe:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   22402:	42bb      	cmp	r3, r7
   22404:	d043      	beq.n	2248e <uarte_nrfx_configure+0x13a>
   22406:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   2240a:	d1d0      	bne.n	223ae <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   2240c:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   22410:	e017      	b.n	22442 <uarte_nrfx_configure+0xee>
	switch (baudrate) {
   22412:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   22416:	d1ca      	bne.n	223ae <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   22418:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   2241c:	e011      	b.n	22442 <uarte_nrfx_configure+0xee>
	switch (baudrate) {
   2241e:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   22422:	d037      	beq.n	22494 <uarte_nrfx_configure+0x140>
   22424:	d808      	bhi.n	22438 <uarte_nrfx_configure+0xe4>
   22426:	4f20      	ldr	r7, [pc, #128]	; (224a8 <uarte_nrfx_configure+0x154>)
   22428:	42bb      	cmp	r3, r7
   2242a:	d036      	beq.n	2249a <uarte_nrfx_configure+0x146>
   2242c:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   22430:	d1bd      	bne.n	223ae <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   22432:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   22436:	e004      	b.n	22442 <uarte_nrfx_configure+0xee>
	switch (baudrate) {
   22438:	4f1c      	ldr	r7, [pc, #112]	; (224ac <uarte_nrfx_configure+0x158>)
   2243a:	42bb      	cmp	r3, r7
   2243c:	d1b7      	bne.n	223ae <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   2243e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   22442:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
   22446:	4334      	orrs	r4, r6
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   22448:	6883      	ldr	r3, [r0, #8]
   2244a:	4322      	orrs	r2, r4
   2244c:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   2244e:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   22452:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   22456:	2000      	movs	r0, #0
}
   22458:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   2245a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   2245e:	e7f0      	b.n	22442 <uarte_nrfx_configure+0xee>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   22460:	4b13      	ldr	r3, [pc, #76]	; (224b0 <uarte_nrfx_configure+0x15c>)
   22462:	e7ee      	b.n	22442 <uarte_nrfx_configure+0xee>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   22464:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   22468:	e7eb      	b.n	22442 <uarte_nrfx_configure+0xee>
		nrf_baudrate = 0x00014000;
   2246a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   2246e:	e7e8      	b.n	22442 <uarte_nrfx_configure+0xee>
	switch (baudrate) {
   22470:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   22474:	e7e5      	b.n	22442 <uarte_nrfx_configure+0xee>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   22476:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   2247a:	e7e2      	b.n	22442 <uarte_nrfx_configure+0xee>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   2247c:	4b0d      	ldr	r3, [pc, #52]	; (224b4 <uarte_nrfx_configure+0x160>)
   2247e:	e7e0      	b.n	22442 <uarte_nrfx_configure+0xee>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   22480:	4b0d      	ldr	r3, [pc, #52]	; (224b8 <uarte_nrfx_configure+0x164>)
   22482:	e7de      	b.n	22442 <uarte_nrfx_configure+0xee>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   22484:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   22488:	e7db      	b.n	22442 <uarte_nrfx_configure+0xee>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   2248a:	4b0c      	ldr	r3, [pc, #48]	; (224bc <uarte_nrfx_configure+0x168>)
   2248c:	e7d9      	b.n	22442 <uarte_nrfx_configure+0xee>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   2248e:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   22492:	e7d6      	b.n	22442 <uarte_nrfx_configure+0xee>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   22494:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   22498:	e7d3      	b.n	22442 <uarte_nrfx_configure+0xee>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   2249a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   2249e:	e7d0      	b.n	22442 <uarte_nrfx_configure+0xee>
   224a0:	0013b000 	.word	0x0013b000
   224a4:	004ea000 	.word	0x004ea000
   224a8:	0003d090 	.word	0x0003d090
   224ac:	000f4240 	.word	0x000f4240
   224b0:	00275000 	.word	0x00275000
   224b4:	0075c000 	.word	0x0075c000
   224b8:	003af000 	.word	0x003af000
   224bc:	013a9000 	.word	0x013a9000

000224c0 <uarte_0_init>:
	#endif
	#if !defined(DT_NORDIC_NRF_UARTE_UART_0_RX_PIN)
	#define DT_NORDIC_NRF_UARTE_UART_0_RX_PIN NRF_UARTE_PSEL_DISCONNECTED
	#endif

	UART_NRF_UARTE_DEVICE(0);
   224c0:	b570      	push	{r4, r5, r6, lr}
   224c2:	4605      	mov	r5, r0
   224c4:	2200      	movs	r2, #0
   224c6:	2101      	movs	r1, #1
   224c8:	2008      	movs	r0, #8
   224ca:	f7fd ffe5 	bl	20498 <z_arm_irq_priority_set>
   224ce:	2008      	movs	r0, #8
   224d0:	f7fd ffd2 	bl	20478 <arch_irq_enable>
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   224d4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
	return dev->config->config_info;
   224d8:	682b      	ldr	r3, [r5, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   224da:	68ae      	ldr	r6, [r5, #8]
	return config->uarte_regs;
   224dc:	689b      	ldr	r3, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   224de:	2103      	movs	r1, #3
   224e0:	681c      	ldr	r4, [r3, #0]
    p_reg->OUTSET = set_mask;
   224e2:	4b1a      	ldr	r3, [pc, #104]	; (2254c <uarte_0_init+0x8c>)
    p_reg->PSEL.TXD = pseltxd;
   224e4:	201d      	movs	r0, #29
   224e6:	609a      	str	r2, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   224e8:	2200      	movs	r2, #0
   224ea:	f8c3 1274 	str.w	r1, [r3, #628]	; 0x274
   224ee:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
   224f2:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   224f6:	201c      	movs	r0, #28
   224f8:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
    p_reg->OUTSET = set_mask;
   224fc:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   22500:	6098      	str	r0, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   22502:	f8c3 126c 	str.w	r1, [r3, #620]	; 0x26c
   22506:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
    p_reg->PSEL.RTS = pselrts;
   2250a:	231b      	movs	r3, #27
   2250c:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   22510:	231a      	movs	r3, #26
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   22512:	4631      	mov	r1, r6
   22514:	4628      	mov	r0, r5
   22516:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   2251a:	f7ff ff1b 	bl	22354 <uarte_nrfx_configure>
	if (err) {
   2251e:	b9a0      	cbnz	r0, 2254a <uarte_0_init+0x8a>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   22520:	2308      	movs	r3, #8
   22522:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   22526:	f106 030c 	add.w	r3, r6, #12
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2252a:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2252e:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   22532:	2301      	movs	r3, #1
		nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, 0);
   22534:	68b2      	ldr	r2, [r6, #8]
   22536:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2253a:	6892      	ldr	r2, [r2, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2253c:	6023      	str	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2253e:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   22542:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22546:	60a3      	str	r3, [r4, #8]
   22548:	60e3      	str	r3, [r4, #12]
	UART_NRF_UARTE_DEVICE(0);
   2254a:	bd70      	pop	{r4, r5, r6, pc}
   2254c:	40842500 	.word	0x40842500

00022550 <entropy_cc310_rng_get_entropy>:
#include "nrf_cc310_platform_entropy.h"
#endif

static int entropy_cc310_rng_get_entropy(struct device *dev, u8_t *buffer,
					 u16_t length)
{
   22550:	b537      	push	{r0, r1, r2, r4, r5, lr}
   22552:	460d      	mov	r5, r1
   22554:	4614      	mov	r4, r2
	int res = -EINVAL;
	size_t olen;

	__ASSERT_NO_MSG(dev != NULL);
   22556:	b948      	cbnz	r0, 2256c <entropy_cc310_rng_get_entropy+0x1c>
   22558:	4910      	ldr	r1, [pc, #64]	; (2259c <entropy_cc310_rng_get_entropy+0x4c>)
   2255a:	4811      	ldr	r0, [pc, #68]	; (225a0 <entropy_cc310_rng_get_entropy+0x50>)
   2255c:	231e      	movs	r3, #30
   2255e:	4a11      	ldr	r2, [pc, #68]	; (225a4 <entropy_cc310_rng_get_entropy+0x54>)
   22560:	f010 ffd9 	bl	33516 <printk>
   22564:	211e      	movs	r1, #30
   22566:	480f      	ldr	r0, [pc, #60]	; (225a4 <entropy_cc310_rng_get_entropy+0x54>)
   22568:	f011 f81b 	bl	335a2 <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
   2256c:	b94d      	cbnz	r5, 22582 <entropy_cc310_rng_get_entropy+0x32>
   2256e:	490e      	ldr	r1, [pc, #56]	; (225a8 <entropy_cc310_rng_get_entropy+0x58>)
   22570:	480b      	ldr	r0, [pc, #44]	; (225a0 <entropy_cc310_rng_get_entropy+0x50>)
   22572:	231f      	movs	r3, #31
   22574:	4a0b      	ldr	r2, [pc, #44]	; (225a4 <entropy_cc310_rng_get_entropy+0x54>)
   22576:	f010 ffce 	bl	33516 <printk>
   2257a:	211f      	movs	r1, #31
   2257c:	4809      	ldr	r0, [pc, #36]	; (225a4 <entropy_cc310_rng_get_entropy+0x54>)
   2257e:	f011 f810 	bl	335a2 <assert_post_action>

#if defined(CONFIG_SPM)
	/** This is a call from a non-secure app that enables secure services,
	 *  in which case entropy is gathered by calling through SPM
	 */
	res = spm_request_random_number(buffer, length, &olen);
   22582:	4621      	mov	r1, r4
   22584:	4628      	mov	r0, r5
   22586:	aa01      	add	r2, sp, #4
   22588:	f7f5 fd32 	bl	17ff0 <spm_request_random_number>
	if (olen != length) {
   2258c:	9b01      	ldr	r3, [sp, #4]
		return -EINVAL;
   2258e:	429c      	cmp	r4, r3
		return -EINVAL;
	}
#endif

	return res;
}
   22590:	bf18      	it	ne
   22592:	f06f 0015 	mvnne.w	r0, #21
   22596:	b003      	add	sp, #12
   22598:	bd30      	pop	{r4, r5, pc}
   2259a:	bf00      	nop
   2259c:	000390d4 	.word	0x000390d4
   225a0:	00037a66 	.word	0x00037a66
   225a4:	000390a4 	.word	0x000390a4
   225a8:	000390e7 	.word	0x000390e7

000225ac <parse_string>:
{
   225ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   225b0:	680a      	ldr	r2, [r1, #0]
   225b2:	688b      	ldr	r3, [r1, #8]
{
   225b4:	4680      	mov	r8, r0
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   225b6:	1c5d      	adds	r5, r3, #1
    if (buffer_at_offset(input_buffer)[0] != '\"')
   225b8:	18d0      	adds	r0, r2, r3
   225ba:	5cd3      	ldrb	r3, [r2, r3]
{
   225bc:	468a      	mov	sl, r1
    if (buffer_at_offset(input_buffer)[0] != '\"')
   225be:	2b22      	cmp	r3, #34	; 0x22
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   225c0:	4415      	add	r5, r2
    if (buffer_at_offset(input_buffer)[0] != '\"')
   225c2:	f040 80de 	bne.w	22782 <parse_string+0x1d6>
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   225c6:	462f      	mov	r7, r5
        size_t skipped_bytes = 0;
   225c8:	2300      	movs	r3, #0
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
   225ca:	684c      	ldr	r4, [r1, #4]
   225cc:	1ab9      	subs	r1, r7, r2
   225ce:	42a1      	cmp	r1, r4
   225d0:	f080 80d7 	bcs.w	22782 <parse_string+0x1d6>
   225d4:	7839      	ldrb	r1, [r7, #0]
   225d6:	2922      	cmp	r1, #34	; 0x22
   225d8:	d10e      	bne.n	225f8 <parse_string+0x4c>
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
   225da:	f1c3 0301 	rsb	r3, r3, #1
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
   225de:	1a38      	subs	r0, r7, r0
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
   225e0:	f8da 2010 	ldr.w	r2, [sl, #16]
   225e4:	4418      	add	r0, r3
   225e6:	4790      	blx	r2
        if (output == NULL)
   225e8:	4683      	mov	fp, r0
   225ea:	2800      	cmp	r0, #0
   225ec:	f000 80c9 	beq.w	22782 <parse_string+0x1d6>
   225f0:	4604      	mov	r4, r0
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
   225f2:	f8df 9198 	ldr.w	r9, [pc, #408]	; 2278c <parse_string+0x1e0>
   225f6:	e00f      	b.n	22618 <parse_string+0x6c>
            if (input_end[0] == '\\')
   225f8:	295c      	cmp	r1, #92	; 0x5c
   225fa:	d105      	bne.n	22608 <parse_string+0x5c>
   225fc:	3701      	adds	r7, #1
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
   225fe:	1ab9      	subs	r1, r7, r2
   22600:	428c      	cmp	r4, r1
   22602:	f240 80be 	bls.w	22782 <parse_string+0x1d6>
                skipped_bytes++;
   22606:	3301      	adds	r3, #1
            input_end++;
   22608:	3701      	adds	r7, #1
   2260a:	e7df      	b.n	225cc <parse_string+0x20>
        if (*input_pointer != '\\')
   2260c:	782b      	ldrb	r3, [r5, #0]
   2260e:	2b5c      	cmp	r3, #92	; 0x5c
   22610:	d012      	beq.n	22638 <parse_string+0x8c>
            *output_pointer++ = *input_pointer++;
   22612:	3501      	adds	r5, #1
   22614:	f804 3b01 	strb.w	r3, [r4], #1
    while (input_pointer < input_end)
   22618:	42bd      	cmp	r5, r7
   2261a:	d3f7      	bcc.n	2260c <parse_string+0x60>
    *output_pointer = '\0';
   2261c:	2300      	movs	r3, #0
   2261e:	7023      	strb	r3, [r4, #0]
    item->type = cJSON_String;
   22620:	2310      	movs	r3, #16
    return true;
   22622:	2001      	movs	r0, #1
    item->valuestring = (char*)output;
   22624:	e9c8 3b03 	strd	r3, fp, [r8, #12]
    input_buffer->offset = (size_t) (input_end - input_buffer->content);
   22628:	f8da 3000 	ldr.w	r3, [sl]
   2262c:	1aff      	subs	r7, r7, r3
    input_buffer->offset++;
   2262e:	3701      	adds	r7, #1
   22630:	f8ca 7008 	str.w	r7, [sl, #8]
}
   22634:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if ((input_end - input_pointer) < 1)
   22638:	1b7a      	subs	r2, r7, r5
   2263a:	2a00      	cmp	r2, #0
   2263c:	dd0d      	ble.n	2265a <parse_string+0xae>
            switch (input_pointer[1])
   2263e:	786b      	ldrb	r3, [r5, #1]
   22640:	2b75      	cmp	r3, #117	; 0x75
   22642:	d80a      	bhi.n	2265a <parse_string+0xae>
   22644:	2b6d      	cmp	r3, #109	; 0x6d
   22646:	d812      	bhi.n	2266e <parse_string+0xc2>
   22648:	2b62      	cmp	r3, #98	; 0x62
   2264a:	d02b      	beq.n	226a4 <parse_string+0xf8>
   2264c:	d826      	bhi.n	2269c <parse_string+0xf0>
   2264e:	2b2f      	cmp	r3, #47	; 0x2f
   22650:	d029      	beq.n	226a6 <parse_string+0xfa>
   22652:	2b5c      	cmp	r3, #92	; 0x5c
   22654:	d027      	beq.n	226a6 <parse_string+0xfa>
   22656:	2b22      	cmp	r3, #34	; 0x22
   22658:	d025      	beq.n	226a6 <parse_string+0xfa>
        input_buffer->hooks.deallocate(output);
   2265a:	4658      	mov	r0, fp
   2265c:	f8da 3014 	ldr.w	r3, [sl, #20]
   22660:	4798      	blx	r3
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
   22662:	f8da 0000 	ldr.w	r0, [sl]
   22666:	1a28      	subs	r0, r5, r0
   22668:	f8ca 0008 	str.w	r0, [sl, #8]
   2266c:	e08c      	b.n	22788 <parse_string+0x1dc>
   2266e:	3b6e      	subs	r3, #110	; 0x6e
   22670:	2b07      	cmp	r3, #7
   22672:	d8f2      	bhi.n	2265a <parse_string+0xae>
   22674:	a101      	add	r1, pc, #4	; (adr r1, 2267c <parse_string+0xd0>)
   22676:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   2267a:	bf00      	nop
   2267c:	000226b1 	.word	0x000226b1
   22680:	0002265b 	.word	0x0002265b
   22684:	0002265b 	.word	0x0002265b
   22688:	0002265b 	.word	0x0002265b
   2268c:	000226b5 	.word	0x000226b5
   22690:	0002265b 	.word	0x0002265b
   22694:	000226b9 	.word	0x000226b9
   22698:	000226bd 	.word	0x000226bd
            switch (input_pointer[1])
   2269c:	2b66      	cmp	r3, #102	; 0x66
   2269e:	d1dc      	bne.n	2265a <parse_string+0xae>
                    *output_pointer++ = '\f';
   226a0:	230c      	movs	r3, #12
   226a2:	e000      	b.n	226a6 <parse_string+0xfa>
                    *output_pointer++ = '\b';
   226a4:	2308      	movs	r3, #8
                    *output_pointer++ = '\f';
   226a6:	f804 3b01 	strb.w	r3, [r4], #1
            unsigned char sequence_length = 2;
   226aa:	2302      	movs	r3, #2
            input_pointer += sequence_length;
   226ac:	441d      	add	r5, r3
   226ae:	e7b3      	b.n	22618 <parse_string+0x6c>
                    *output_pointer++ = '\n';
   226b0:	230a      	movs	r3, #10
   226b2:	e7f8      	b.n	226a6 <parse_string+0xfa>
                    *output_pointer++ = '\r';
   226b4:	230d      	movs	r3, #13
   226b6:	e7f6      	b.n	226a6 <parse_string+0xfa>
                    *output_pointer++ = '\t';
   226b8:	2309      	movs	r3, #9
   226ba:	e7f4      	b.n	226a6 <parse_string+0xfa>
    if ((input_end - first_sequence) < 6)
   226bc:	2a05      	cmp	r2, #5
   226be:	ddcc      	ble.n	2265a <parse_string+0xae>
    first_code = parse_hex4(first_sequence + 2);
   226c0:	1ca8      	adds	r0, r5, #2
   226c2:	f012 fa39 	bl	34b38 <parse_hex4>
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
   226c6:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
   226ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    first_code = parse_hex4(first_sequence + 2);
   226ce:	4606      	mov	r6, r0
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
   226d0:	d3c3      	bcc.n	2265a <parse_string+0xae>
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
   226d2:	f5a0 4358 	sub.w	r3, r0, #55296	; 0xd800
   226d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   226da:	d22d      	bcs.n	22738 <parse_string+0x18c>
        const unsigned char *second_sequence = first_sequence + 6;
   226dc:	1dab      	adds	r3, r5, #6
        if ((input_end - second_sequence) < 6)
   226de:	1afb      	subs	r3, r7, r3
   226e0:	2b05      	cmp	r3, #5
   226e2:	ddba      	ble.n	2265a <parse_string+0xae>
        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
   226e4:	79ab      	ldrb	r3, [r5, #6]
   226e6:	2b5c      	cmp	r3, #92	; 0x5c
   226e8:	d1b7      	bne.n	2265a <parse_string+0xae>
   226ea:	79eb      	ldrb	r3, [r5, #7]
   226ec:	2b75      	cmp	r3, #117	; 0x75
   226ee:	d1b4      	bne.n	2265a <parse_string+0xae>
        second_code = parse_hex4(second_sequence + 2);
   226f0:	f105 0008 	add.w	r0, r5, #8
   226f4:	f012 fa20 	bl	34b38 <parse_hex4>
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
   226f8:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
   226fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   22700:	d2ab      	bcs.n	2265a <parse_string+0xae>
        sequence_length = 12; /* \uXXXX\uXXXX */
   22702:	230c      	movs	r3, #12
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
   22704:	ea09 2686 	and.w	r6, r9, r6, lsl #10
   22708:	f3c0 0009 	ubfx	r0, r0, #0, #10
   2270c:	4330      	orrs	r0, r6
   2270e:	f500 3680 	add.w	r6, r0, #65536	; 0x10000
        first_byte_mark = 0xF0; /* 11110000 */
   22712:	20f0      	movs	r0, #240	; 0xf0
        utf8_length = 4;
   22714:	2104      	movs	r1, #4
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   22716:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
   2271a:	fa5f fc8e 	uxtb.w	ip, lr
   2271e:	44a6      	add	lr, r4
   22720:	b2f2      	uxtb	r2, r6
   22722:	f1bc 0f00 	cmp.w	ip, #0
   22726:	d120      	bne.n	2276a <parse_string+0x1be>
    if (utf8_length > 1)
   22728:	2901      	cmp	r1, #1
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
   2272a:	bf14      	ite	ne
   2272c:	4302      	orrne	r2, r0
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
   2272e:	f002 027f 	andeq.w	r2, r2, #127	; 0x7f
   22732:	7022      	strb	r2, [r4, #0]
    *output_pointer += utf8_length;
   22734:	440c      	add	r4, r1
                    if (sequence_length == 0)
   22736:	e7b9      	b.n	226ac <parse_string+0x100>
    if (codepoint < 0x80)
   22738:	287f      	cmp	r0, #127	; 0x7f
   2273a:	d90a      	bls.n	22752 <parse_string+0x1a6>
    else if (codepoint < 0x800)
   2273c:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   22740:	d30b      	bcc.n	2275a <parse_string+0x1ae>
    else if (codepoint < 0x10000)
   22742:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   22746:	d30c      	bcc.n	22762 <parse_string+0x1b6>
    else if (codepoint <= 0x10FFFF)
   22748:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   2274c:	d285      	bcs.n	2265a <parse_string+0xae>
        sequence_length = 6; /* \uXXXX */
   2274e:	2306      	movs	r3, #6
   22750:	e7df      	b.n	22712 <parse_string+0x166>
   22752:	2306      	movs	r3, #6
    unsigned char first_byte_mark = 0;
   22754:	2000      	movs	r0, #0
        utf8_length = 1;
   22756:	2101      	movs	r1, #1
   22758:	e7dd      	b.n	22716 <parse_string+0x16a>
        sequence_length = 6; /* \uXXXX */
   2275a:	2306      	movs	r3, #6
        first_byte_mark = 0xC0; /* 11000000 */
   2275c:	20c0      	movs	r0, #192	; 0xc0
        utf8_length = 2;
   2275e:	2102      	movs	r1, #2
   22760:	e7d9      	b.n	22716 <parse_string+0x16a>
        sequence_length = 6; /* \uXXXX */
   22762:	2306      	movs	r3, #6
        first_byte_mark = 0xE0; /* 11100000 */
   22764:	20e0      	movs	r0, #224	; 0xe0
        utf8_length = 3;
   22766:	2103      	movs	r1, #3
   22768:	e7d5      	b.n	22716 <parse_string+0x16a>
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
   2276a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   2276e:	f062 027f 	orn	r2, r2, #127	; 0x7f
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   22772:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
   22776:	f80e 2901 	strb.w	r2, [lr], #-1
        codepoint >>= 6;
   2277a:	09b6      	lsrs	r6, r6, #6
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   2277c:	fa5f fc8c 	uxtb.w	ip, ip
   22780:	e7ce      	b.n	22720 <parse_string+0x174>
    if (input_pointer != NULL)
   22782:	2d00      	cmp	r5, #0
   22784:	f47f af6d 	bne.w	22662 <parse_string+0xb6>
    return false;
   22788:	2000      	movs	r0, #0
   2278a:	e753      	b.n	22634 <parse_string+0x88>
   2278c:	000ffc00 	.word	0x000ffc00

00022790 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
   22790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22792:	460d      	mov	r5, r1
    cJSON *current_element = NULL;

    if ((object == NULL) || (name == NULL))
   22794:	b360      	cbz	r0, 227f0 <get_object_item+0x60>
   22796:	b359      	cbz	r1, 227f0 <get_object_item+0x60>
    {
        return NULL;
    }

    current_element = object->child;
   22798:	6884      	ldr	r4, [r0, #8]
    if (case_sensitive)
   2279a:	b9fa      	cbnz	r2, 227dc <get_object_item+0x4c>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
   2279c:	4e17      	ldr	r6, [pc, #92]	; (227fc <get_object_item+0x6c>)
            current_element = current_element->next;
        }
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
   2279e:	b33c      	cbz	r4, 227f0 <get_object_item+0x60>
   227a0:	6a23      	ldr	r3, [r4, #32]
    if ((string1 == NULL) || (string2 == NULL))
   227a2:	b1c3      	cbz	r3, 227d6 <get_object_item+0x46>
    if (string1 == string2)
   227a4:	42ab      	cmp	r3, r5
   227a6:	d021      	beq.n	227ec <get_object_item+0x5c>
   227a8:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
   227ac:	3b01      	subs	r3, #1
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
   227ae:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
   227b2:	460f      	mov	r7, r1
   227b4:	5d8a      	ldrb	r2, [r1, r6]
   227b6:	f002 0203 	and.w	r2, r2, #3
   227ba:	2a01      	cmp	r2, #1
   227bc:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   227c0:	bf08      	it	eq
   227c2:	f101 0720 	addeq.w	r7, r1, #32
   227c6:	5cb0      	ldrb	r0, [r6, r2]
   227c8:	f000 0003 	and.w	r0, r0, #3
   227cc:	2801      	cmp	r0, #1
   227ce:	bf08      	it	eq
   227d0:	3220      	addeq	r2, #32
   227d2:	4297      	cmp	r7, r2
   227d4:	d00f      	beq.n	227f6 <get_object_item+0x66>
        {
            current_element = current_element->next;
   227d6:	6824      	ldr	r4, [r4, #0]
   227d8:	e7e1      	b.n	2279e <get_object_item+0xe>
            current_element = current_element->next;
   227da:	6824      	ldr	r4, [r4, #0]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
   227dc:	b144      	cbz	r4, 227f0 <get_object_item+0x60>
   227de:	6a21      	ldr	r1, [r4, #32]
   227e0:	b121      	cbz	r1, 227ec <get_object_item+0x5c>
   227e2:	4628      	mov	r0, r5
   227e4:	f7fa fc7a 	bl	1d0dc <strcmp>
   227e8:	2800      	cmp	r0, #0
   227ea:	d1f6      	bne.n	227da <get_object_item+0x4a>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
   227ec:	6a23      	ldr	r3, [r4, #32]
   227ee:	b903      	cbnz	r3, 227f2 <get_object_item+0x62>
        return NULL;
   227f0:	2400      	movs	r4, #0
        return NULL;
    }

    return current_element;
}
   227f2:	4620      	mov	r0, r4
   227f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (*string1 == '\0')
   227f6:	2900      	cmp	r1, #0
   227f8:	d1d9      	bne.n	227ae <get_object_item+0x1e>
   227fa:	e7f7      	b.n	227ec <get_object_item+0x5c>
   227fc:	0003b3ad 	.word	0x0003b3ad

00022800 <cJSON_Delete>:
{
   22800:	b570      	push	{r4, r5, r6, lr}
   22802:	4604      	mov	r4, r0
   22804:	4d0f      	ldr	r5, [pc, #60]	; (22844 <cJSON_Delete+0x44>)
    while (item != NULL)
   22806:	b904      	cbnz	r4, 2280a <cJSON_Delete+0xa>
}
   22808:	bd70      	pop	{r4, r5, r6, pc}
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   2280a:	68e3      	ldr	r3, [r4, #12]
        next = item->next;
   2280c:	6826      	ldr	r6, [r4, #0]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   2280e:	05d9      	lsls	r1, r3, #23
   22810:	d403      	bmi.n	2281a <cJSON_Delete+0x1a>
   22812:	68a0      	ldr	r0, [r4, #8]
   22814:	b968      	cbnz	r0, 22832 <cJSON_Delete+0x32>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   22816:	6920      	ldr	r0, [r4, #16]
   22818:	b988      	cbnz	r0, 2283e <cJSON_Delete+0x3e>
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   2281a:	68e3      	ldr	r3, [r4, #12]
   2281c:	059b      	lsls	r3, r3, #22
   2281e:	d403      	bmi.n	22828 <cJSON_Delete+0x28>
   22820:	6a20      	ldr	r0, [r4, #32]
   22822:	b108      	cbz	r0, 22828 <cJSON_Delete+0x28>
            global_hooks.deallocate(item->string);
   22824:	686b      	ldr	r3, [r5, #4]
   22826:	4798      	blx	r3
        global_hooks.deallocate(item);
   22828:	4620      	mov	r0, r4
   2282a:	686b      	ldr	r3, [r5, #4]
   2282c:	4798      	blx	r3
        item = next;
   2282e:	4634      	mov	r4, r6
   22830:	e7e9      	b.n	22806 <cJSON_Delete+0x6>
            cJSON_Delete(item->child);
   22832:	f7ff ffe5 	bl	22800 <cJSON_Delete>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   22836:	68e3      	ldr	r3, [r4, #12]
   22838:	05da      	lsls	r2, r3, #23
   2283a:	d5ec      	bpl.n	22816 <cJSON_Delete+0x16>
   2283c:	e7ed      	b.n	2281a <cJSON_Delete+0x1a>
            global_hooks.deallocate(item->valuestring);
   2283e:	686b      	ldr	r3, [r5, #4]
   22840:	4798      	blx	r3
   22842:	e7ea      	b.n	2281a <cJSON_Delete+0x1a>
   22844:	20029584 	.word	0x20029584

00022848 <cJSON_ParseWithOpts>:
{
   22848:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2284c:	4605      	mov	r5, r0
    global_error.json = NULL;
   2284e:	f04f 0800 	mov.w	r8, #0
{
   22852:	b089      	sub	sp, #36	; 0x24
    global_error.json = NULL;
   22854:	4f31      	ldr	r7, [pc, #196]	; (2291c <cJSON_ParseWithOpts+0xd4>)
{
   22856:	460e      	mov	r6, r1
   22858:	4691      	mov	r9, r2
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
   2285a:	2100      	movs	r1, #0
   2285c:	221c      	movs	r2, #28
   2285e:	a801      	add	r0, sp, #4
   22860:	f013 f972 	bl	35b48 <memset>
    global_error.position = 0;
   22864:	e9c7 8800 	strd	r8, r8, [r7]
    if (value == NULL)
   22868:	2d00      	cmp	r5, #0
   2286a:	d04d      	beq.n	22908 <cJSON_ParseWithOpts+0xc0>
    buffer.length = strlen((const char*)value) + sizeof("");
   2286c:	4628      	mov	r0, r5
    buffer.content = (const unsigned char*)value;
   2286e:	9501      	str	r5, [sp, #4]
    buffer.length = strlen((const char*)value) + sizeof("");
   22870:	f7fa fc3e 	bl	1d0f0 <strlen>
    buffer.hooks = global_hooks;
   22874:	4b2a      	ldr	r3, [pc, #168]	; (22920 <cJSON_ParseWithOpts+0xd8>)
    buffer.length = strlen((const char*)value) + sizeof("");
   22876:	3001      	adds	r0, #1
    buffer.offset = 0;
   22878:	e9cd 0802 	strd	r0, r8, [sp, #8]
    buffer.hooks = global_hooks;
   2287c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   22880:	ab08      	add	r3, sp, #32
   22882:	e903 0007 	stmdb	r3, {r0, r1, r2}
    item = cJSON_New_Item(&global_hooks);
   22886:	f012 f991 	bl	34bac <cJSON_New_Item.isra.0>
    if (item == NULL) /* memory fail */
   2288a:	4604      	mov	r4, r0
   2288c:	2800      	cmp	r0, #0
   2288e:	d030      	beq.n	228f2 <cJSON_ParseWithOpts+0xaa>
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
   22890:	9801      	ldr	r0, [sp, #4]
   22892:	b128      	cbz	r0, 228a0 <cJSON_ParseWithOpts+0x58>
   22894:	9b03      	ldr	r3, [sp, #12]
   22896:	b9e3      	cbnz	r3, 228d2 <cJSON_ParseWithOpts+0x8a>
    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
   22898:	9b02      	ldr	r3, [sp, #8]
   2289a:	2b04      	cmp	r3, #4
   2289c:	d80f      	bhi.n	228be <cJSON_ParseWithOpts+0x76>
    return buffer;
   2289e:	a801      	add	r0, sp, #4
    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
   228a0:	f012 f96f 	bl	34b82 <buffer_skip_whitespace>
   228a4:	4601      	mov	r1, r0
   228a6:	4620      	mov	r0, r4
   228a8:	f7fa fc2a 	bl	1d100 <parse_value>
   228ac:	b1f0      	cbz	r0, 228ec <cJSON_ParseWithOpts+0xa4>
    if (require_null_terminated)
   228ae:	f1b9 0f00 	cmp.w	r9, #0
   228b2:	d110      	bne.n	228d6 <cJSON_ParseWithOpts+0x8e>
    if (return_parse_end)
   228b4:	bb56      	cbnz	r6, 2290c <cJSON_ParseWithOpts+0xc4>
}
   228b6:	4620      	mov	r0, r4
   228b8:	b009      	add	sp, #36	; 0x24
   228ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
   228be:	2203      	movs	r2, #3
   228c0:	4918      	ldr	r1, [pc, #96]	; (22924 <cJSON_ParseWithOpts+0xdc>)
   228c2:	f013 fa5d 	bl	35d80 <strncmp>
   228c6:	2800      	cmp	r0, #0
   228c8:	d1e9      	bne.n	2289e <cJSON_ParseWithOpts+0x56>
        buffer->offset += 3;
   228ca:	9b03      	ldr	r3, [sp, #12]
   228cc:	3303      	adds	r3, #3
   228ce:	9303      	str	r3, [sp, #12]
   228d0:	e7e5      	b.n	2289e <cJSON_ParseWithOpts+0x56>
        return NULL;
   228d2:	4640      	mov	r0, r8
   228d4:	e7e4      	b.n	228a0 <cJSON_ParseWithOpts+0x58>
        buffer_skip_whitespace(&buffer);
   228d6:	a801      	add	r0, sp, #4
   228d8:	f012 f953 	bl	34b82 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
   228dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   228e0:	4293      	cmp	r3, r2
   228e2:	d203      	bcs.n	228ec <cJSON_ParseWithOpts+0xa4>
   228e4:	9a01      	ldr	r2, [sp, #4]
   228e6:	5cd3      	ldrb	r3, [r2, r3]
   228e8:	2b00      	cmp	r3, #0
   228ea:	d0e3      	beq.n	228b4 <cJSON_ParseWithOpts+0x6c>
        cJSON_Delete(item);
   228ec:	4620      	mov	r0, r4
   228ee:	f7ff ff87 	bl	22800 <cJSON_Delete>
        if (buffer.offset < buffer.length)
   228f2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   228f6:	429a      	cmp	r2, r3
   228f8:	d30d      	bcc.n	22916 <cJSON_ParseWithOpts+0xce>
        else if (buffer.length > 0)
   228fa:	b103      	cbz	r3, 228fe <cJSON_ParseWithOpts+0xb6>
            local_error.position = buffer.length - 1;
   228fc:	3b01      	subs	r3, #1
        if (return_parse_end != NULL)
   228fe:	b10e      	cbz	r6, 22904 <cJSON_ParseWithOpts+0xbc>
            *return_parse_end = (const char*)local_error.json + local_error.position;
   22900:	18ea      	adds	r2, r5, r3
   22902:	6032      	str	r2, [r6, #0]
        global_error = local_error;
   22904:	e9c7 5300 	strd	r5, r3, [r7]
    return NULL;
   22908:	2400      	movs	r4, #0
   2290a:	e7d4      	b.n	228b6 <cJSON_ParseWithOpts+0x6e>
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
   2290c:	9b01      	ldr	r3, [sp, #4]
   2290e:	9a03      	ldr	r2, [sp, #12]
   22910:	4413      	add	r3, r2
   22912:	6033      	str	r3, [r6, #0]
   22914:	e7cf      	b.n	228b6 <cJSON_ParseWithOpts+0x6e>
   22916:	4613      	mov	r3, r2
   22918:	e7f1      	b.n	228fe <cJSON_ParseWithOpts+0xb6>
   2291a:	bf00      	nop
   2291c:	200221cc 	.word	0x200221cc
   22920:	20029584 	.word	0x20029584
   22924:	0003911f 	.word	0x0003911f

00022928 <bsdlib_init>:
static int _bsdlib_init(struct device *unused)
{
	/* Setup the network IRQ used by the BSD library.
	 * Note: No call to irq_enable() here, that is done through bsd_init().
	 */
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   22928:	2200      	movs	r2, #0

	return init_ret;
}

int bsdlib_init(void)
{
   2292a:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   2292c:	4611      	mov	r1, r2
   2292e:	202a      	movs	r0, #42	; 0x2a
   22930:	f7fd fdb2 	bl	20498 <z_arm_irq_priority_set>
	init_ret = bsd_init();
   22934:	f005 fc94 	bl	28260 <bsd_init>
   22938:	4b01      	ldr	r3, [pc, #4]	; (22940 <bsdlib_init+0x18>)
   2293a:	6018      	str	r0, [r3, #0]
	return _bsdlib_init(NULL);
}
   2293c:	bd08      	pop	{r3, pc}
   2293e:	bf00      	nop
   22940:	200221d4 	.word	0x200221d4

00022944 <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which bsdlib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   22944:	b570      	push	{r4, r5, r6, lr}
	struct thread_monitor_entry *entry = thread_event_monitor;
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   22946:	4c0d      	ldr	r4, [pc, #52]	; (2297c <thread_monitor_entry_get+0x38>)
{
   22948:	4602      	mov	r2, r0
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   2294a:	250a      	movs	r5, #10
	int entry_age, oldest_entry_age = 0;
   2294c:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   2294e:	4620      	mov	r0, r4
		entry_age = rpc_event_cnt - entry->cnt;
   22950:	4b0b      	ldr	r3, [pc, #44]	; (22980 <thread_monitor_entry_get+0x3c>)
   22952:	681b      	ldr	r3, [r3, #0]
		if (entry->id == id) {
   22954:	6801      	ldr	r1, [r0, #0]
   22956:	4291      	cmp	r1, r2
   22958:	d00e      	beq.n	22978 <thread_monitor_entry_get+0x34>
		} else if (entry->id == 0) {
   2295a:	b151      	cbz	r1, 22972 <thread_monitor_entry_get+0x2e>
		entry_age = rpc_event_cnt - entry->cnt;
   2295c:	6841      	ldr	r1, [r0, #4]
   2295e:	1a59      	subs	r1, r3, r1
		if (entry_age > oldest_entry_age) {
   22960:	42b1      	cmp	r1, r6
   22962:	bfc4      	itt	gt
   22964:	4604      	movgt	r4, r0
   22966:	460e      	movgt	r6, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   22968:	3d01      	subs	r5, #1
   2296a:	f100 0008 	add.w	r0, r0, #8
   2296e:	d1f1      	bne.n	22954 <thread_monitor_entry_get+0x10>
   22970:	4620      	mov	r0, r4
			new_entry = entry;
		}
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;
   22972:	3b01      	subs	r3, #1
	new_entry->id = id;
   22974:	6002      	str	r2, [r0, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   22976:	6043      	str	r3, [r0, #4]

	return new_entry;
}
   22978:	bd70      	pop	{r4, r5, r6, pc}
   2297a:	bf00      	nop
   2297c:	200221e4 	.word	0x200221e4
   22980:	200221d8 	.word	0x200221d8

00022984 <rpc_proxy_irq_handler>:
			  */

	return 1; /* We should check if scheduling decision should be made */
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   22984:	4668      	mov	r0, sp
   22986:	f020 0107 	bic.w	r1, r0, #7
   2298a:	468d      	mov	sp, r1
   2298c:	b519      	push	{r0, r3, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2298e:	4b0f      	ldr	r3, [pc, #60]	; (229cc <rpc_proxy_irq_handler+0x48>)
   22990:	e8d3 2fef 	ldaex	r2, [r3]
   22994:	3201      	adds	r2, #1
   22996:	e8c3 2fe1 	stlex	r1, r2, [r3]
   2299a:	2900      	cmp	r1, #0
   2299c:	d1f8      	bne.n	22990 <rpc_proxy_irq_handler+0xc>
{
	atomic_inc(&rpc_event_cnt);

	bsd_os_application_irq_handler();
   2299e:	f009 fe17 	bl	2c5d0 <bsd_os_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   229a2:	4b0b      	ldr	r3, [pc, #44]	; (229d0 <rpc_proxy_irq_handler+0x4c>)
   229a4:	681c      	ldr	r4, [r3, #0]
   229a6:	2c00      	cmp	r4, #0
   229a8:	bf38      	it	cc
   229aa:	2400      	movcc	r4, #0
   229ac:	b12c      	cbz	r4, 229ba <rpc_proxy_irq_handler+0x36>
   229ae:	1d20      	adds	r0, r4, #4
   229b0:	f00d feea 	bl	30788 <z_impl_k_sem_give>
   229b4:	6824      	ldr	r4, [r4, #0]
   229b6:	2c00      	cmp	r4, #0
   229b8:	d1f8      	bne.n	229ac <rpc_proxy_irq_handler+0x28>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   229ba:	f7fd fd9f 	bl	204fc <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   229be:	f7fd fcc1 	bl	20344 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   229c2:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
   229c6:	4685      	mov	sp, r0
   229c8:	4770      	bx	lr
   229ca:	bf00      	nop
   229cc:	200221d8 	.word	0x200221d8
   229d0:	200221dc 	.word	0x200221dc

000229d4 <bsd_os_timedwait>:
{
   229d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   229d8:	4688      	mov	r8, r1
   229da:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_get();
   229dc:	f013 f80b 	bl	359f6 <z_impl_k_uptime_get>
	if (*timeout == 0) {
   229e0:	f8d8 3000 	ldr.w	r3, [r8]
   229e4:	4604      	mov	r4, r0
   229e6:	2b00      	cmp	r3, #0
   229e8:	460d      	mov	r5, r1
   229ea:	d103      	bne.n	229f4 <bsd_os_timedwait+0x20>
	z_impl_k_yield();
   229ec:	f00d fd46 	bl	3047c <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   229f0:	203c      	movs	r0, #60	; 0x3c
   229f2:	e06e      	b.n	22ad2 <bsd_os_timedwait+0xfe>
		*timeout = K_FOREVER;
   229f4:	bfbc      	itt	lt
   229f6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   229fa:	f8c8 3000 	strlt.w	r3, [r8]
	return z_impl_k_sem_init(sem, initial_count, limit);
   229fe:	2201      	movs	r2, #1
   22a00:	2100      	movs	r1, #0
   22a02:	a802      	add	r0, sp, #8
   22a04:	f012 ff5b 	bl	358be <z_impl_k_sem_init>
   22a08:	f10d 0a04 	add.w	sl, sp, #4
   22a0c:	f04f 0320 	mov.w	r3, #32
   22a10:	f3ef 8b11 	mrs	fp, BASEPRI
   22a14:	f383 8811 	msr	BASEPRI, r3
   22a18:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   22a1c:	f00d feae 	bl	3077c <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   22a20:	f7ff ff90 	bl	22944 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   22a24:	4933      	ldr	r1, [pc, #204]	; (22af4 <bsd_os_timedwait+0x120>)
   22a26:	6843      	ldr	r3, [r0, #4]
   22a28:	680a      	ldr	r2, [r1, #0]
   22a2a:	4689      	mov	r9, r1
   22a2c:	4293      	cmp	r3, r2
   22a2e:	f04f 0300 	mov.w	r3, #0
   22a32:	d108      	bne.n	22a46 <bsd_os_timedwait+0x72>
	parent->next = child;
   22a34:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   22a36:	4b30      	ldr	r3, [pc, #192]	; (22af8 <bsd_os_timedwait+0x124>)
   22a38:	685a      	ldr	r2, [r3, #4]
   22a3a:	2a00      	cmp	r2, #0
   22a3c:	d14c      	bne.n	22ad8 <bsd_os_timedwait+0x104>
	list->head = node;
   22a3e:	e9c3 aa00 	strd	sl, sl, [r3]
		allow_to_sleep = true;
   22a42:	2301      	movs	r3, #1
}
   22a44:	e000      	b.n	22a48 <bsd_os_timedwait+0x74>
	entry->cnt = rpc_event_cnt;
   22a46:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
   22a48:	f38b 8811 	msr	BASEPRI, fp
   22a4c:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
   22a50:	2b00      	cmp	r3, #0
   22a52:	d03d      	beq.n	22ad0 <bsd_os_timedwait+0xfc>
	(void)k_sem_take(&thread.sem, *timeout);
   22a54:	f8d8 1000 	ldr.w	r1, [r8]
	return z_impl_k_sem_take(sem, timeout);
   22a58:	a802      	add	r0, sp, #8
   22a5a:	f00d fedf 	bl	3081c <z_impl_k_sem_take>
	__asm__ volatile(
   22a5e:	f04f 0320 	mov.w	r3, #32
   22a62:	f3ef 8b11 	mrs	fp, BASEPRI
   22a66:	f383 8811 	msr	BASEPRI, r3
   22a6a:	f3bf 8f6f 	isb	sy
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   22a6e:	2000      	movs	r0, #0
   22a70:	4b21      	ldr	r3, [pc, #132]	; (22af8 <bsd_os_timedwait+0x124>)
   22a72:	681a      	ldr	r2, [r3, #0]
   22a74:	b152      	cbz	r2, 22a8c <bsd_os_timedwait+0xb8>
   22a76:	4552      	cmp	r2, sl
   22a78:	d139      	bne.n	22aee <bsd_os_timedwait+0x11a>
Z_GENLIST_REMOVE(slist, snode)
   22a7a:	9901      	ldr	r1, [sp, #4]
   22a7c:	bb88      	cbnz	r0, 22ae2 <bsd_os_timedwait+0x10e>
   22a7e:	6858      	ldr	r0, [r3, #4]
	list->head = node;
   22a80:	6019      	str	r1, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   22a82:	4290      	cmp	r0, r2
   22a84:	d100      	bne.n	22a88 <bsd_os_timedwait+0xb4>
	list->tail = node;
   22a86:	6059      	str	r1, [r3, #4]
	parent->next = child;
   22a88:	2300      	movs	r3, #0
   22a8a:	9301      	str	r3, [sp, #4]
	return z_impl_k_current_get();
   22a8c:	f00d fe76 	bl	3077c <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   22a90:	f7ff ff58 	bl	22944 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   22a94:	f8d9 3000 	ldr.w	r3, [r9]
   22a98:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   22a9a:	f38b 8811 	msr	BASEPRI, fp
   22a9e:	f3bf 8f6f 	isb	sy
	if (*timeout == K_FOREVER) {
   22aa2:	f8d8 9000 	ldr.w	r9, [r8]
   22aa6:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   22aaa:	d011      	beq.n	22ad0 <bsd_os_timedwait+0xfc>
	return z_impl_k_uptime_get();
   22aac:	f012 ffa3 	bl	359f6 <z_impl_k_uptime_get>
	remaining = *timeout - (k_uptime_get() - start);
   22ab0:	eb14 0409 	adds.w	r4, r4, r9
   22ab4:	eb45 75e9 	adc.w	r5, r5, r9, asr #31
   22ab8:	1a26      	subs	r6, r4, r0
   22aba:	eb65 0701 	sbc.w	r7, r5, r1
	*timeout = remaining > 0 ? remaining : 0;
   22abe:	2e00      	cmp	r6, #0
   22ac0:	f177 0300 	sbcs.w	r3, r7, #0
   22ac4:	bfb8      	it	lt
   22ac6:	2600      	movlt	r6, #0
   22ac8:	f8c8 6000 	str.w	r6, [r8]
	if (*timeout == 0) {
   22acc:	2e00      	cmp	r6, #0
   22ace:	d08f      	beq.n	229f0 <bsd_os_timedwait+0x1c>
	return 0;
   22ad0:	2000      	movs	r0, #0
}
   22ad2:	b009      	add	sp, #36	; 0x24
   22ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22ad8:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   22adc:	f8c3 a004 	str.w	sl, [r3, #4]
   22ae0:	e7af      	b.n	22a42 <bsd_os_timedwait+0x6e>
	parent->next = child;
   22ae2:	6001      	str	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   22ae4:	6859      	ldr	r1, [r3, #4]
   22ae6:	4291      	cmp	r1, r2
	list->tail = node;
   22ae8:	bf08      	it	eq
   22aea:	6058      	streq	r0, [r3, #4]
}
   22aec:	e7cc      	b.n	22a88 <bsd_os_timedwait+0xb4>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   22aee:	4610      	mov	r0, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   22af0:	6812      	ldr	r2, [r2, #0]
   22af2:	e7bf      	b.n	22a74 <bsd_os_timedwait+0xa0>
   22af4:	200221d8 	.word	0x200221d8
   22af8:	200221dc 	.word	0x200221dc

00022afc <bsd_os_errno_set>:
	switch (err_code) {
   22afc:	283c      	cmp	r0, #60	; 0x3c
{
   22afe:	b510      	push	{r4, lr}
   22b00:	4604      	mov	r4, r0
	switch (err_code) {
   22b02:	f300 8099 	bgt.w	22c38 <bsd_os_errno_set+0x13c>
   22b06:	2800      	cmp	r0, #0
   22b08:	dc18      	bgt.n	22b3c <bsd_os_errno_set+0x40>
		__ASSERT(false, "Untranslated errno %d set by bsdlib!", err_code);
   22b0a:	f44f 73a5 	mov.w	r3, #330	; 0x14a
   22b0e:	4ab4      	ldr	r2, [pc, #720]	; (22de0 <bsd_os_errno_set+0x2e4>)
   22b10:	49b4      	ldr	r1, [pc, #720]	; (22de4 <bsd_os_errno_set+0x2e8>)
   22b12:	48b5      	ldr	r0, [pc, #724]	; (22de8 <bsd_os_errno_set+0x2ec>)
   22b14:	f010 fcff 	bl	33516 <printk>
   22b18:	4621      	mov	r1, r4
   22b1a:	48b4      	ldr	r0, [pc, #720]	; (22dec <bsd_os_errno_set+0x2f0>)
   22b1c:	f010 fcfb 	bl	33516 <printk>
   22b20:	f44f 71a5 	mov.w	r1, #330	; 0x14a
   22b24:	48ae      	ldr	r0, [pc, #696]	; (22de0 <bsd_os_errno_set+0x2e4>)
   22b26:	f010 fd3c 	bl	335a2 <assert_post_action>
		LOG_ERR("Untranslated errno %d set by bsdlib!", err_code);
   22b2a:	4622      	mov	r2, r4
   22b2c:	2145      	movs	r1, #69	; 0x45
   22b2e:	48b0      	ldr	r0, [pc, #704]	; (22df0 <bsd_os_errno_set+0x2f4>)
   22b30:	f010 fcf1 	bl	33516 <printk>
		errno = 0xBAADBAAD;
   22b34:	f011 f8bd 	bl	33cb2 <__errno>
   22b38:	4bae      	ldr	r3, [pc, #696]	; (22df4 <bsd_os_errno_set+0x2f8>)
   22b3a:	e0be      	b.n	22cba <bsd_os_errno_set+0x1be>
   22b3c:	1e43      	subs	r3, r0, #1
   22b3e:	2b3b      	cmp	r3, #59	; 0x3b
   22b40:	d8e3      	bhi.n	22b0a <bsd_os_errno_set+0xe>
   22b42:	a201      	add	r2, pc, #4	; (adr r2, 22b48 <bsd_os_errno_set+0x4c>)
   22b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   22b48:	00022cb5 	.word	0x00022cb5
   22b4c:	00022cbf 	.word	0x00022cbf
   22b50:	00022b0b 	.word	0x00022b0b
   22b54:	00022b0b 	.word	0x00022b0b
   22b58:	00022cc7 	.word	0x00022cc7
   22b5c:	00022b0b 	.word	0x00022b0b
   22b60:	00022b0b 	.word	0x00022b0b
   22b64:	00022ccf 	.word	0x00022ccf
   22b68:	00022cd7 	.word	0x00022cd7
   22b6c:	00022b0b 	.word	0x00022b0b
   22b70:	00022b0b 	.word	0x00022b0b
   22b74:	00022cdf 	.word	0x00022cdf
   22b78:	00022ce7 	.word	0x00022ce7
   22b7c:	00022cef 	.word	0x00022cef
   22b80:	00022b0b 	.word	0x00022b0b
   22b84:	00022b0b 	.word	0x00022b0b
   22b88:	00022b0b 	.word	0x00022b0b
   22b8c:	00022b0b 	.word	0x00022b0b
   22b90:	00022b0b 	.word	0x00022b0b
   22b94:	00022b0b 	.word	0x00022b0b
   22b98:	00022b0b 	.word	0x00022b0b
   22b9c:	00022cf7 	.word	0x00022cf7
   22ba0:	00022b0b 	.word	0x00022b0b
   22ba4:	00022cff 	.word	0x00022cff
   22ba8:	00022b0b 	.word	0x00022b0b
   22bac:	00022b0b 	.word	0x00022b0b
   22bb0:	00022b0b 	.word	0x00022b0b
   22bb4:	00022b0b 	.word	0x00022b0b
   22bb8:	00022b0b 	.word	0x00022b0b
   22bbc:	00022b0b 	.word	0x00022b0b
   22bc0:	00022b0b 	.word	0x00022b0b
   22bc4:	00022b0b 	.word	0x00022b0b
   22bc8:	00022b0b 	.word	0x00022b0b
   22bcc:	00022b0b 	.word	0x00022b0b
   22bd0:	00022d07 	.word	0x00022d07
   22bd4:	00022b0b 	.word	0x00022b0b
   22bd8:	00022d0f 	.word	0x00022d0f
   22bdc:	00022b0b 	.word	0x00022b0b
   22be0:	00022b0b 	.word	0x00022b0b
   22be4:	00022dd7 	.word	0x00022dd7
   22be8:	00022d17 	.word	0x00022d17
   22bec:	00022d1f 	.word	0x00022d1f
   22bf0:	00022d27 	.word	0x00022d27
   22bf4:	00022d2f 	.word	0x00022d2f
   22bf8:	00022d37 	.word	0x00022d37
   22bfc:	00022b0b 	.word	0x00022b0b
   22c00:	00022d3f 	.word	0x00022d3f
   22c04:	00022d47 	.word	0x00022d47
   22c08:	00022b0b 	.word	0x00022b0b
   22c0c:	00022d4f 	.word	0x00022d4f
   22c10:	00022d57 	.word	0x00022d57
   22c14:	00022d5f 	.word	0x00022d5f
   22c18:	00022b0b 	.word	0x00022b0b
   22c1c:	00022d67 	.word	0x00022d67
   22c20:	00022b0b 	.word	0x00022b0b
   22c24:	00022d6f 	.word	0x00022d6f
   22c28:	00022d77 	.word	0x00022d77
   22c2c:	00022b0b 	.word	0x00022b0b
   22c30:	00022b0b 	.word	0x00022b0b
   22c34:	00022d7f 	.word	0x00022d7f
	switch (err_code) {
   22c38:	f1a0 0369 	sub.w	r3, r0, #105	; 0x69
   22c3c:	2b18      	cmp	r3, #24
   22c3e:	f63f af64 	bhi.w	22b0a <bsd_os_errno_set+0xe>
   22c42:	2b18      	cmp	r3, #24
   22c44:	f63f af61 	bhi.w	22b0a <bsd_os_errno_set+0xe>
   22c48:	a201      	add	r2, pc, #4	; (adr r2, 22c50 <bsd_os_errno_set+0x154>)
   22c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   22c4e:	bf00      	nop
   22c50:	00022d87 	.word	0x00022d87
   22c54:	00022b0b 	.word	0x00022b0b
   22c58:	00022b0b 	.word	0x00022b0b
   22c5c:	00022b0b 	.word	0x00022b0b
   22c60:	00022b0b 	.word	0x00022b0b
   22c64:	00022b0b 	.word	0x00022b0b
   22c68:	00022b0b 	.word	0x00022b0b
   22c6c:	00022d8f 	.word	0x00022d8f
   22c70:	00022b0b 	.word	0x00022b0b
   22c74:	00022d9f 	.word	0x00022d9f
   22c78:	00022d97 	.word	0x00022d97
   22c7c:	00022b0b 	.word	0x00022b0b
   22c80:	00022b0b 	.word	0x00022b0b
   22c84:	00022b0b 	.word	0x00022b0b
   22c88:	00022b0b 	.word	0x00022b0b
   22c8c:	00022b0b 	.word	0x00022b0b
   22c90:	00022b0b 	.word	0x00022b0b
   22c94:	00022b0b 	.word	0x00022b0b
   22c98:	00022b0b 	.word	0x00022b0b
   22c9c:	00022b0b 	.word	0x00022b0b
   22ca0:	00022da7 	.word	0x00022da7
   22ca4:	00022daf 	.word	0x00022daf
   22ca8:	00022db9 	.word	0x00022db9
   22cac:	00022dc3 	.word	0x00022dc3
   22cb0:	00022dcd 	.word	0x00022dcd
		errno = EPERM;
   22cb4:	f010 fffd 	bl	33cb2 <__errno>
   22cb8:	2301      	movs	r3, #1
		errno = 0xBAADBAAD;
   22cba:	6003      	str	r3, [r0, #0]
}
   22cbc:	bd10      	pop	{r4, pc}
		errno = ENOENT;
   22cbe:	f010 fff8 	bl	33cb2 <__errno>
   22cc2:	2302      	movs	r3, #2
   22cc4:	e7f9      	b.n	22cba <bsd_os_errno_set+0x1be>
		errno = EIO;
   22cc6:	f010 fff4 	bl	33cb2 <__errno>
   22cca:	2305      	movs	r3, #5
   22ccc:	e7f5      	b.n	22cba <bsd_os_errno_set+0x1be>
		errno = ENOEXEC;
   22cce:	f010 fff0 	bl	33cb2 <__errno>
   22cd2:	2308      	movs	r3, #8
   22cd4:	e7f1      	b.n	22cba <bsd_os_errno_set+0x1be>
		errno = EBADF;
   22cd6:	f010 ffec 	bl	33cb2 <__errno>
   22cda:	2309      	movs	r3, #9
   22cdc:	e7ed      	b.n	22cba <bsd_os_errno_set+0x1be>
		errno = ENOMEM;
   22cde:	f010 ffe8 	bl	33cb2 <__errno>
   22ce2:	230c      	movs	r3, #12
   22ce4:	e7e9      	b.n	22cba <bsd_os_errno_set+0x1be>
		errno = EACCES;
   22ce6:	f010 ffe4 	bl	33cb2 <__errno>
   22cea:	230d      	movs	r3, #13
   22cec:	e7e5      	b.n	22cba <bsd_os_errno_set+0x1be>
		errno = EFAULT;
   22cee:	f010 ffe0 	bl	33cb2 <__errno>
   22cf2:	230e      	movs	r3, #14
   22cf4:	e7e1      	b.n	22cba <bsd_os_errno_set+0x1be>
		errno = EINVAL;
   22cf6:	f010 ffdc 	bl	33cb2 <__errno>
   22cfa:	2316      	movs	r3, #22
   22cfc:	e7dd      	b.n	22cba <bsd_os_errno_set+0x1be>
		errno = EMFILE;
   22cfe:	f010 ffd8 	bl	33cb2 <__errno>
   22d02:	2318      	movs	r3, #24
   22d04:	e7d9      	b.n	22cba <bsd_os_errno_set+0x1be>
		errno = EAGAIN;
   22d06:	f010 ffd4 	bl	33cb2 <__errno>
   22d0a:	230b      	movs	r3, #11
   22d0c:	e7d5      	b.n	22cba <bsd_os_errno_set+0x1be>
		errno = EDOM;
   22d0e:	f010 ffd0 	bl	33cb2 <__errno>
   22d12:	2321      	movs	r3, #33	; 0x21
   22d14:	e7d1      	b.n	22cba <bsd_os_errno_set+0x1be>
		errno = EPROTOTYPE;
   22d16:	f010 ffcc 	bl	33cb2 <__errno>
   22d1a:	236b      	movs	r3, #107	; 0x6b
   22d1c:	e7cd      	b.n	22cba <bsd_os_errno_set+0x1be>
		errno = ENOPROTOOPT;
   22d1e:	f010 ffc8 	bl	33cb2 <__errno>
   22d22:	236d      	movs	r3, #109	; 0x6d
   22d24:	e7c9      	b.n	22cba <bsd_os_errno_set+0x1be>
		errno = EPROTONOSUPPORT;
   22d26:	f010 ffc4 	bl	33cb2 <__errno>
   22d2a:	237b      	movs	r3, #123	; 0x7b
   22d2c:	e7c5      	b.n	22cba <bsd_os_errno_set+0x1be>
		errno = ESOCKTNOSUPPORT;
   22d2e:	f010 ffc0 	bl	33cb2 <__errno>
   22d32:	237c      	movs	r3, #124	; 0x7c
   22d34:	e7c1      	b.n	22cba <bsd_os_errno_set+0x1be>
		errno = EOPNOTSUPP;
   22d36:	f010 ffbc 	bl	33cb2 <__errno>
   22d3a:	235f      	movs	r3, #95	; 0x5f
   22d3c:	e7bd      	b.n	22cba <bsd_os_errno_set+0x1be>
		errno = EAFNOSUPPORT;
   22d3e:	f010 ffb8 	bl	33cb2 <__errno>
   22d42:	236a      	movs	r3, #106	; 0x6a
   22d44:	e7b9      	b.n	22cba <bsd_os_errno_set+0x1be>
		errno = EADDRINUSE;
   22d46:	f010 ffb4 	bl	33cb2 <__errno>
   22d4a:	2370      	movs	r3, #112	; 0x70
   22d4c:	e7b5      	b.n	22cba <bsd_os_errno_set+0x1be>
		errno = ENETDOWN;
   22d4e:	f010 ffb0 	bl	33cb2 <__errno>
   22d52:	2373      	movs	r3, #115	; 0x73
   22d54:	e7b1      	b.n	22cba <bsd_os_errno_set+0x1be>
		errno = ENETUNREACH;
   22d56:	f010 ffac 	bl	33cb2 <__errno>
   22d5a:	2372      	movs	r3, #114	; 0x72
   22d5c:	e7ad      	b.n	22cba <bsd_os_errno_set+0x1be>
		errno = ENETRESET;
   22d5e:	f010 ffa8 	bl	33cb2 <__errno>
   22d62:	237e      	movs	r3, #126	; 0x7e
   22d64:	e7a9      	b.n	22cba <bsd_os_errno_set+0x1be>
		errno = ECONNRESET;
   22d66:	f010 ffa4 	bl	33cb2 <__errno>
   22d6a:	2368      	movs	r3, #104	; 0x68
   22d6c:	e7a5      	b.n	22cba <bsd_os_errno_set+0x1be>
		errno = EISCONN;
   22d6e:	f010 ffa0 	bl	33cb2 <__errno>
   22d72:	237f      	movs	r3, #127	; 0x7f
   22d74:	e7a1      	b.n	22cba <bsd_os_errno_set+0x1be>
		errno = ENOTCONN;
   22d76:	f010 ff9c 	bl	33cb2 <__errno>
   22d7a:	2380      	movs	r3, #128	; 0x80
   22d7c:	e79d      	b.n	22cba <bsd_os_errno_set+0x1be>
		errno = ETIMEDOUT;
   22d7e:	f010 ff98 	bl	33cb2 <__errno>
   22d82:	2374      	movs	r3, #116	; 0x74
   22d84:	e799      	b.n	22cba <bsd_os_errno_set+0x1be>
		errno = ENOBUFS;
   22d86:	f010 ff94 	bl	33cb2 <__errno>
   22d8a:	2369      	movs	r3, #105	; 0x69
   22d8c:	e795      	b.n	22cba <bsd_os_errno_set+0x1be>
		errno = EHOSTDOWN;
   22d8e:	f010 ff90 	bl	33cb2 <__errno>
   22d92:	2375      	movs	r3, #117	; 0x75
   22d94:	e791      	b.n	22cba <bsd_os_errno_set+0x1be>
		errno = EINPROGRESS;
   22d96:	f010 ff8c 	bl	33cb2 <__errno>
   22d9a:	2377      	movs	r3, #119	; 0x77
   22d9c:	e78d      	b.n	22cba <bsd_os_errno_set+0x1be>
		errno = EALREADY;
   22d9e:	f010 ff88 	bl	33cb2 <__errno>
   22da2:	2378      	movs	r3, #120	; 0x78
   22da4:	e789      	b.n	22cba <bsd_os_errno_set+0x1be>
		errno = ECANCELED;
   22da6:	f010 ff84 	bl	33cb2 <__errno>
   22daa:	238c      	movs	r3, #140	; 0x8c
   22dac:	e785      	b.n	22cba <bsd_os_errno_set+0x1be>
		errno = ENOKEY;
   22dae:	f010 ff80 	bl	33cb2 <__errno>
   22db2:	f240 73d1 	movw	r3, #2001	; 0x7d1
   22db6:	e780      	b.n	22cba <bsd_os_errno_set+0x1be>
		errno = EKEYEXPIRED;
   22db8:	f010 ff7b 	bl	33cb2 <__errno>
   22dbc:	f240 73d2 	movw	r3, #2002	; 0x7d2
   22dc0:	e77b      	b.n	22cba <bsd_os_errno_set+0x1be>
		errno = EKEYREVOKED;
   22dc2:	f010 ff76 	bl	33cb2 <__errno>
   22dc6:	f240 73d3 	movw	r3, #2003	; 0x7d3
   22dca:	e776      	b.n	22cba <bsd_os_errno_set+0x1be>
		errno = EKEYREJECTED;
   22dcc:	f010 ff71 	bl	33cb2 <__errno>
   22dd0:	f240 73d4 	movw	r3, #2004	; 0x7d4
   22dd4:	e771      	b.n	22cba <bsd_os_errno_set+0x1be>
		errno = EMSGSIZE;
   22dd6:	f010 ff6c 	bl	33cb2 <__errno>
   22dda:	237a      	movs	r3, #122	; 0x7a
   22ddc:	e76d      	b.n	22cba <bsd_os_errno_set+0x1be>
   22dde:	bf00      	nop
   22de0:	00039123 	.word	0x00039123
   22de4:	0003afd7 	.word	0x0003afd7
   22de8:	00037a66 	.word	0x00037a66
   22dec:	00039147 	.word	0x00039147
   22df0:	0003916e 	.word	0x0003916e
   22df4:	baadbaad 	.word	0xbaadbaad

00022df8 <bsd_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   22df8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   22dfc:	4b01      	ldr	r3, [pc, #4]	; (22e04 <bsd_os_application_irq_set+0xc>)
   22dfe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   22e02:	4770      	bx	lr
   22e04:	e000e100 	.word	0xe000e100

00022e08 <bsd_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   22e08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   22e0c:	4b01      	ldr	r3, [pc, #4]	; (22e14 <bsd_os_application_irq_clear+0xc>)
   22e0e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   22e12:	4770      	bx	lr
   22e14:	e000e100 	.word	0xe000e100

00022e18 <bsd_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   22e18:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   22e1c:	4b01      	ldr	r3, [pc, #4]	; (22e24 <bsd_os_trace_irq_set+0xc>)
   22e1e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   22e22:	4770      	bx	lr
   22e24:	e000e100 	.word	0xe000e100

00022e28 <bsd_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   22e28:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   22e2c:	4b01      	ldr	r3, [pc, #4]	; (22e34 <bsd_os_trace_irq_clear+0xc>)
   22e2e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   22e32:	4770      	bx	lr
   22e34:	e000e100 	.word	0xe000e100

00022e38 <bsd_os_init>:
#endif
}

/* This function is called by bsd_init and must not be called explicitly. */
void bsd_os_init(void)
{
   22e38:	b508      	push	{r3, lr}
	list->head = NULL;
   22e3a:	2300      	movs	r3, #0
   22e3c:	4a07      	ldr	r2, [pc, #28]	; (22e5c <bsd_os_init+0x24>)
	list->tail = NULL;
   22e3e:	e9c2 3300 	strd	r3, r3, [r2]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   22e42:	4a07      	ldr	r2, [pc, #28]	; (22e60 <bsd_os_init+0x28>)
   22e44:	e8d2 1fef 	ldaex	r1, [r2]
   22e48:	e8c2 3fe0 	stlex	r0, r3, [r2]
   22e4c:	2800      	cmp	r0, #0
   22e4e:	d1f9      	bne.n	22e44 <bsd_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   22e50:	f011 ff04 	bl	34c5c <read_task_create>

	/* Configure and enable modem tracing over UART. */
	trace_uart_init();
	trace_task_create();
}
   22e54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	trace_task_create();
   22e58:	f011 bef5 	b.w	34c46 <trace_task_create>
   22e5c:	200221dc 	.word	0x200221dc
   22e60:	200221d8 	.word	0x200221d8

00022e64 <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   22e64:	f240 2302 	movw	r3, #514	; 0x202
   22e68:	4298      	cmp	r0, r3
   22e6a:	d05b      	beq.n	22f24 <z_to_nrf_optname+0xc0>
   22e6c:	dc07      	bgt.n	22e7e <z_to_nrf_optname+0x1a>
   22e6e:	2801      	cmp	r0, #1
   22e70:	d043      	beq.n	22efa <z_to_nrf_optname+0x96>
   22e72:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   22e76:	d035      	beq.n	22ee4 <z_to_nrf_optname+0x80>
   22e78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		retval = -1;
		break;
	}

	return retval;
}
   22e7c:	4770      	bx	lr
	switch (z_in_level) {
   22e7e:	f240 2303 	movw	r3, #515	; 0x203
   22e82:	4298      	cmp	r0, r3
   22e84:	d1f8      	bne.n	22e78 <z_to_nrf_optname+0x14>
		switch (z_in_optname) {
   22e86:	3901      	subs	r1, #1
   22e88:	2913      	cmp	r1, #19
   22e8a:	d8f5      	bhi.n	22e78 <z_to_nrf_optname+0x14>
   22e8c:	a301      	add	r3, pc, #4	; (adr r3, 22e94 <z_to_nrf_optname+0x30>)
   22e8e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   22e92:	bf00      	nop
   22e94:	00022f31 	.word	0x00022f31
   22e98:	00022ef5 	.word	0x00022ef5
   22e9c:	00022f15 	.word	0x00022f15
   22ea0:	00022f07 	.word	0x00022f07
   22ea4:	00022f19 	.word	0x00022f19
   22ea8:	00022f1d 	.word	0x00022f1d
   22eac:	00022f21 	.word	0x00022f21
   22eb0:	00022e79 	.word	0x00022e79
   22eb4:	00022e79 	.word	0x00022e79
   22eb8:	00022e79 	.word	0x00022e79
   22ebc:	00022e79 	.word	0x00022e79
   22ec0:	00022e79 	.word	0x00022e79
   22ec4:	00022e79 	.word	0x00022e79
   22ec8:	00022e79 	.word	0x00022e79
   22ecc:	00022e79 	.word	0x00022e79
   22ed0:	00022e79 	.word	0x00022e79
   22ed4:	00022e79 	.word	0x00022e79
   22ed8:	00022e79 	.word	0x00022e79
   22edc:	00022e79 	.word	0x00022e79
   22ee0:	00022f0b 	.word	0x00022f0b
		switch (z_in_optname) {
   22ee4:	3901      	subs	r1, #1
   22ee6:	2905      	cmp	r1, #5
   22ee8:	d8c6      	bhi.n	22e78 <z_to_nrf_optname+0x14>
   22eea:	e8df f001 	tbb	[pc, r1]
   22eee:	1503      	.short	0x1503
   22ef0:	210c1917 	.word	0x210c1917
			*nrf_out_optname = NRF_SO_SEC_TAG_LIST;
   22ef4:	2302      	movs	r3, #2
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   22ef6:	6013      	str	r3, [r2, #0]
   22ef8:	e00a      	b.n	22f10 <z_to_nrf_optname+0xac>
		switch (z_in_optname) {
   22efa:	2914      	cmp	r1, #20
   22efc:	d005      	beq.n	22f0a <z_to_nrf_optname+0xa6>
   22efe:	2919      	cmp	r1, #25
   22f00:	d005      	beq.n	22f0e <z_to_nrf_optname+0xaa>
   22f02:	2904      	cmp	r1, #4
   22f04:	d1b8      	bne.n	22e78 <z_to_nrf_optname+0x14>
			*nrf_out_optname = NRF_SO_SEC_PEER_VERIFY;
   22f06:	2304      	movs	r3, #4
   22f08:	e7f5      	b.n	22ef6 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_RCVTIMEO;
   22f0a:	2314      	movs	r3, #20
   22f0c:	e7f3      	b.n	22ef6 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
   22f0e:	6011      	str	r1, [r2, #0]
	int retval = 0;
   22f10:	2000      	movs	r0, #0
			break;
   22f12:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_DFU_TIMEO;
   22f14:	2303      	movs	r3, #3
   22f16:	e7ee      	b.n	22ef6 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_REVERT;
   22f18:	2305      	movs	r3, #5
   22f1a:	e7ec      	b.n	22ef6 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_BACKUP_DELETE;
   22f1c:	2306      	movs	r3, #6
   22f1e:	e7ea      	b.n	22ef6 <z_to_nrf_optname+0x92>
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   22f20:	2307      	movs	r3, #7
   22f22:	e7e8      	b.n	22ef6 <z_to_nrf_optname+0x92>
		switch (z_in_optname) {
   22f24:	2902      	cmp	r1, #2
   22f26:	d0e5      	beq.n	22ef4 <z_to_nrf_optname+0x90>
   22f28:	2903      	cmp	r1, #3
   22f2a:	d0f3      	beq.n	22f14 <z_to_nrf_optname+0xb0>
   22f2c:	2901      	cmp	r1, #1
   22f2e:	d1a3      	bne.n	22e78 <z_to_nrf_optname+0x14>
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   22f30:	2301      	movs	r3, #1
   22f32:	e7e0      	b.n	22ef6 <z_to_nrf_optname+0x92>

00022f34 <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
   22f34:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
   22f36:	4b03      	ldr	r3, [pc, #12]	; (22f44 <nrf91_socket_iface_init+0x10>)
   22f38:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
   22f3a:	6803      	ldr	r3, [r0, #0]

	socket_offload_register(&nrf91_socket_offload_ops);
   22f3c:	4802      	ldr	r0, [pc, #8]	; (22f48 <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
   22f3e:	769a      	strb	r2, [r3, #26]
	socket_offload_register(&nrf91_socket_offload_ops);
   22f40:	f7fc bb7e 	b.w	1f640 <socket_offload_register>
   22f44:	20022234 	.word	0x20022234
   22f48:	00037118 	.word	0x00037118

00022f4c <close>:
{
   22f4c:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(socket_ops);
   22f4e:	4c10      	ldr	r4, [pc, #64]	; (22f90 <close+0x44>)
{
   22f50:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(socket_ops);
   22f52:	6823      	ldr	r3, [r4, #0]
   22f54:	b94b      	cbnz	r3, 22f6a <close+0x1e>
   22f56:	490f      	ldr	r1, [pc, #60]	; (22f94 <close+0x48>)
   22f58:	480f      	ldr	r0, [pc, #60]	; (22f98 <close+0x4c>)
   22f5a:	2321      	movs	r3, #33	; 0x21
   22f5c:	4a0f      	ldr	r2, [pc, #60]	; (22f9c <close+0x50>)
   22f5e:	f010 fada 	bl	33516 <printk>
   22f62:	2121      	movs	r1, #33	; 0x21
   22f64:	480d      	ldr	r0, [pc, #52]	; (22f9c <close+0x50>)
   22f66:	f010 fb1c 	bl	335a2 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->close);
   22f6a:	6823      	ldr	r3, [r4, #0]
   22f6c:	685b      	ldr	r3, [r3, #4]
   22f6e:	b94b      	cbnz	r3, 22f84 <close+0x38>
   22f70:	490b      	ldr	r1, [pc, #44]	; (22fa0 <close+0x54>)
   22f72:	4809      	ldr	r0, [pc, #36]	; (22f98 <close+0x4c>)
   22f74:	2322      	movs	r3, #34	; 0x22
   22f76:	4a09      	ldr	r2, [pc, #36]	; (22f9c <close+0x50>)
   22f78:	f010 facd 	bl	33516 <printk>
   22f7c:	2122      	movs	r1, #34	; 0x22
   22f7e:	4807      	ldr	r0, [pc, #28]	; (22f9c <close+0x50>)
   22f80:	f010 fb0f 	bl	335a2 <assert_post_action>
	return socket_ops->close(sock);
   22f84:	6823      	ldr	r3, [r4, #0]
   22f86:	4628      	mov	r0, r5
}
   22f88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return socket_ops->close(sock);
   22f8c:	685b      	ldr	r3, [r3, #4]
   22f8e:	4718      	bx	r3
   22f90:	200220f8 	.word	0x200220f8
   22f94:	00037b4f 	.word	0x00037b4f
   22f98:	00037a66 	.word	0x00037a66
   22f9c:	00037b1f 	.word	0x00037b1f
   22fa0:	00038d7c 	.word	0x00038d7c

00022fa4 <callback_worker>:

	return new_len;
}

static void callback_worker(struct k_work *item)
{
   22fa4:	b507      	push	{r0, r1, r2, lr}
	struct callback_work_item *data =
   22fa6:	9001      	str	r0, [sp, #4]
		CONTAINER_OF(item, struct callback_work_item, work);

	if (data != NULL) {
   22fa8:	b118      	cbz	r0, 22fb2 <callback_worker+0xe>
		data->callback(data->data);
   22faa:	f8d0 3a98 	ldr.w	r3, [r0, #2712]	; 0xa98
   22fae:	300c      	adds	r0, #12
   22fb0:	4798      	blx	r3
	}

	k_mem_slab_free(&rsp_work_items, (void **)&data);
   22fb2:	4803      	ldr	r0, [pc, #12]	; (22fc0 <callback_worker+0x1c>)
   22fb4:	a901      	add	r1, sp, #4
   22fb6:	f00b fcfd 	bl	2e9b4 <k_mem_slab_free>
}
   22fba:	b003      	add	sp, #12
   22fbc:	f85d fb04 	ldr.w	pc, [sp], #4
   22fc0:	20029850 	.word	0x20029850

00022fc4 <open_socket>:
{
   22fc4:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(socket_ops);
   22fc6:	4c16      	ldr	r4, [pc, #88]	; (23020 <open_socket+0x5c>)
   22fc8:	6823      	ldr	r3, [r4, #0]
   22fca:	b94b      	cbnz	r3, 22fe0 <open_socket+0x1c>
   22fcc:	4915      	ldr	r1, [pc, #84]	; (23024 <open_socket+0x60>)
   22fce:	4816      	ldr	r0, [pc, #88]	; (23028 <open_socket+0x64>)
   22fd0:	2319      	movs	r3, #25
   22fd2:	4a16      	ldr	r2, [pc, #88]	; (2302c <open_socket+0x68>)
   22fd4:	f010 fa9f 	bl	33516 <printk>
   22fd8:	2119      	movs	r1, #25
   22fda:	4814      	ldr	r0, [pc, #80]	; (2302c <open_socket+0x68>)
   22fdc:	f010 fae1 	bl	335a2 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->socket);
   22fe0:	6823      	ldr	r3, [r4, #0]
   22fe2:	681b      	ldr	r3, [r3, #0]
   22fe4:	b94b      	cbnz	r3, 22ffa <open_socket+0x36>
   22fe6:	4912      	ldr	r1, [pc, #72]	; (23030 <open_socket+0x6c>)
   22fe8:	480f      	ldr	r0, [pc, #60]	; (23028 <open_socket+0x64>)
   22fea:	231a      	movs	r3, #26
   22fec:	4a0f      	ldr	r2, [pc, #60]	; (2302c <open_socket+0x68>)
   22fee:	f010 fa92 	bl	33516 <printk>
   22ff2:	211a      	movs	r1, #26
   22ff4:	480d      	ldr	r0, [pc, #52]	; (2302c <open_socket+0x68>)
   22ff6:	f010 fad4 	bl	335a2 <assert_post_action>
	return socket_ops->socket(family, type, proto);
   22ffa:	6823      	ldr	r3, [r4, #0]
   22ffc:	f240 2201 	movw	r2, #513	; 0x201
   23000:	681b      	ldr	r3, [r3, #0]
   23002:	2102      	movs	r1, #2
   23004:	2066      	movs	r0, #102	; 0x66
   23006:	4798      	blx	r3
	common_socket_fd = socket(AF_LTE, SOCK_DGRAM, NPROTO_AT);
   23008:	4b0a      	ldr	r3, [pc, #40]	; (23034 <open_socket+0x70>)
   2300a:	6018      	str	r0, [r3, #0]
	if (common_socket_fd == -1) {
   2300c:	3001      	adds	r0, #1
   2300e:	d104      	bne.n	2301a <open_socket+0x56>
		return -errno;
   23010:	f010 fe4f 	bl	33cb2 <__errno>
   23014:	6800      	ldr	r0, [r0, #0]
   23016:	4240      	negs	r0, r0
}
   23018:	bd10      	pop	{r4, pc}
	return 0;
   2301a:	2000      	movs	r0, #0
   2301c:	e7fc      	b.n	23018 <open_socket+0x54>
   2301e:	bf00      	nop
   23020:	200220f8 	.word	0x200220f8
   23024:	00037b4f 	.word	0x00037b4f
   23028:	00037a66 	.word	0x00037a66
   2302c:	00037b1f 	.word	0x00037b1f
   23030:	00038d8e 	.word	0x00038d8e
   23034:	20022238 	.word	0x20022238

00023038 <at_write>:
		}
	}
}

static inline int at_write(const char *const cmd, enum at_cmd_state *state)
{
   23038:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2303c:	4607      	mov	r7, r0
   2303e:	460e      	mov	r6, r1
	int bytes_sent;
	int bytes_to_send = strlen(cmd);
   23040:	f7fa f856 	bl	1d0f0 <strlen>
	__ASSERT_NO_MSG(socket_ops);
   23044:	4c26      	ldr	r4, [pc, #152]	; (230e0 <at_write+0xa8>)
	struct return_state_object ret;

	LOG_DBG("Sending command %s", log_strdup(cmd));

	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   23046:	4b27      	ldr	r3, [pc, #156]	; (230e4 <at_write+0xac>)
	int bytes_to_send = strlen(cmd);
   23048:	4605      	mov	r5, r0
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   2304a:	f8d3 8000 	ldr.w	r8, [r3]
   2304e:	6823      	ldr	r3, [r4, #0]
   23050:	b94b      	cbnz	r3, 23066 <at_write+0x2e>
   23052:	4925      	ldr	r1, [pc, #148]	; (230e8 <at_write+0xb0>)
   23054:	4825      	ldr	r0, [pc, #148]	; (230ec <at_write+0xb4>)
   23056:	237e      	movs	r3, #126	; 0x7e
   23058:	4a25      	ldr	r2, [pc, #148]	; (230f0 <at_write+0xb8>)
   2305a:	f010 fa5c 	bl	33516 <printk>
   2305e:	217e      	movs	r1, #126	; 0x7e
   23060:	4823      	ldr	r0, [pc, #140]	; (230f0 <at_write+0xb8>)
   23062:	f010 fa9e 	bl	335a2 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->send);
   23066:	6823      	ldr	r3, [r4, #0]
   23068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2306a:	b94b      	cbnz	r3, 23080 <at_write+0x48>
   2306c:	4921      	ldr	r1, [pc, #132]	; (230f4 <at_write+0xbc>)
   2306e:	481f      	ldr	r0, [pc, #124]	; (230ec <at_write+0xb4>)
   23070:	237f      	movs	r3, #127	; 0x7f
   23072:	4a1f      	ldr	r2, [pc, #124]	; (230f0 <at_write+0xb8>)
   23074:	f010 fa4f 	bl	33516 <printk>
   23078:	217f      	movs	r1, #127	; 0x7f
   2307a:	481d      	ldr	r0, [pc, #116]	; (230f0 <at_write+0xb8>)
   2307c:	f010 fa91 	bl	335a2 <assert_post_action>
	return socket_ops->send(sock, buf, len, flags);
   23080:	6823      	ldr	r3, [r4, #0]
   23082:	462a      	mov	r2, r5
   23084:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   23086:	4639      	mov	r1, r7
   23088:	2300      	movs	r3, #0
   2308a:	4640      	mov	r0, r8
   2308c:	47a0      	blx	r4

	if (bytes_sent == -1) {
   2308e:	1c43      	adds	r3, r0, #1
   23090:	4604      	mov	r4, r0
   23092:	d116      	bne.n	230c2 <at_write+0x8a>
		LOG_ERR("Failed to send AT command (err:%d)", errno);
   23094:	f010 fe0d 	bl	33cb2 <__errno>
   23098:	2145      	movs	r1, #69	; 0x45
   2309a:	6802      	ldr	r2, [r0, #0]
   2309c:	4816      	ldr	r0, [pc, #88]	; (230f8 <at_write+0xc0>)
   2309e:	f010 fa3a 	bl	33516 <printk>
		ret.code  = -errno;
   230a2:	f010 fe06 	bl	33cb2 <__errno>
   230a6:	6803      	ldr	r3, [r0, #0]
   230a8:	425b      	negs	r3, r3
   230aa:	9300      	str	r3, [sp, #0]
		ret.state = AT_CMD_ERROR;
   230ac:	2301      	movs	r3, #1
   230ae:	f88d 3004 	strb.w	r3, [sp, #4]
				"same as expected (%d)",
				bytes_sent, bytes_to_send);
		}
	}

	if (state) {
   230b2:	b116      	cbz	r6, 230ba <at_write+0x82>
		*state = ret.state;
   230b4:	f89d 3004 	ldrb.w	r3, [sp, #4]
   230b8:	7033      	strb	r3, [r6, #0]
	}

	return ret.code;
}
   230ba:	9800      	ldr	r0, [sp, #0]
   230bc:	b002      	add	sp, #8
   230be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&msgq, *(uintptr_t *)&data, *(uintptr_t *)&timeout, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
   230c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   230c6:	4669      	mov	r1, sp
   230c8:	480c      	ldr	r0, [pc, #48]	; (230fc <at_write+0xc4>)
   230ca:	f00b fe89 	bl	2ede0 <z_impl_k_msgq_get>
		if (bytes_sent != bytes_to_send) {
   230ce:	42a5      	cmp	r5, r4
   230d0:	d0ef      	beq.n	230b2 <at_write+0x7a>
			LOG_ERR("Bytes sent (%d) was not the "
   230d2:	462b      	mov	r3, r5
   230d4:	4622      	mov	r2, r4
   230d6:	2145      	movs	r1, #69	; 0x45
   230d8:	4809      	ldr	r0, [pc, #36]	; (23100 <at_write+0xc8>)
   230da:	f010 fa1c 	bl	33516 <printk>
   230de:	e7e8      	b.n	230b2 <at_write+0x7a>
   230e0:	200220f8 	.word	0x200220f8
   230e4:	20022238 	.word	0x20022238
   230e8:	00037b4f 	.word	0x00037b4f
   230ec:	00037a66 	.word	0x00037a66
   230f0:	00037b1f 	.word	0x00037b1f
   230f4:	00038db5 	.word	0x00038db5
   230f8:	000391ac 	.word	0x000391ac
   230fc:	200298f4 	.word	0x200298f4
   23100:	000391d4 	.word	0x000391d4

00023104 <socket_thread_fn>:
{
   23104:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
		bytes_read = recv(common_socket_fd, item->data,
   23108:	4e84      	ldr	r6, [pc, #528]	; (2331c <socket_thread_fn+0x218>)
		k_mem_slab_alloc(&rsp_work_items, (void **)&item, K_FOREVER);
   2310a:	f8df 826c 	ldr.w	r8, [pc, #620]	; 23378 <socket_thread_fn+0x274>
   2310e:	4637      	mov	r7, r6
   23110:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   23114:	4640      	mov	r0, r8
   23116:	a901      	add	r1, sp, #4
   23118:	f00b fbe8 	bl	2e8ec <k_mem_slab_alloc>
		ret.code  = 0;
   2311c:	2300      	movs	r3, #0
		item->callback = NULL;
   2311e:	9d01      	ldr	r5, [sp, #4]
	__ASSERT_NO_MSG(socket_ops);
   23120:	4c7f      	ldr	r4, [pc, #508]	; (23320 <socket_thread_fn+0x21c>)
   23122:	f8c5 3a98 	str.w	r3, [r5, #2712]	; 0xa98
		ret.code  = 0;
   23126:	9302      	str	r3, [sp, #8]
		ret.state = AT_CMD_OK;
   23128:	f88d 300c 	strb.w	r3, [sp, #12]
   2312c:	6823      	ldr	r3, [r4, #0]
		bytes_read = recv(common_socket_fd, item->data,
   2312e:	f8d6 9000 	ldr.w	r9, [r6]
   23132:	350c      	adds	r5, #12
   23134:	b94b      	cbnz	r3, 2314a <socket_thread_fn+0x46>
   23136:	497b      	ldr	r1, [pc, #492]	; (23324 <socket_thread_fn+0x220>)
   23138:	487b      	ldr	r0, [pc, #492]	; (23328 <socket_thread_fn+0x224>)
   2313a:	2369      	movs	r3, #105	; 0x69
   2313c:	4a7b      	ldr	r2, [pc, #492]	; (2332c <socket_thread_fn+0x228>)
   2313e:	f010 f9ea 	bl	33516 <printk>
   23142:	2169      	movs	r1, #105	; 0x69
   23144:	4879      	ldr	r0, [pc, #484]	; (2332c <socket_thread_fn+0x228>)
   23146:	f010 fa2c 	bl	335a2 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->recv);
   2314a:	6823      	ldr	r3, [r4, #0]
   2314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2314e:	b94b      	cbnz	r3, 23164 <socket_thread_fn+0x60>
   23150:	4977      	ldr	r1, [pc, #476]	; (23330 <socket_thread_fn+0x22c>)
   23152:	4875      	ldr	r0, [pc, #468]	; (23328 <socket_thread_fn+0x224>)
   23154:	236a      	movs	r3, #106	; 0x6a
   23156:	4a75      	ldr	r2, [pc, #468]	; (2332c <socket_thread_fn+0x228>)
   23158:	f010 f9dd 	bl	33516 <printk>
   2315c:	216a      	movs	r1, #106	; 0x6a
   2315e:	4873      	ldr	r0, [pc, #460]	; (2332c <socket_thread_fn+0x228>)
   23160:	f010 fa1f 	bl	335a2 <assert_post_action>
	return socket_ops->recv(sock, buf, max_len, flags);
   23164:	6823      	ldr	r3, [r4, #0]
   23166:	f640 228c 	movw	r2, #2700	; 0xa8c
   2316a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   2316c:	4629      	mov	r1, r5
   2316e:	2300      	movs	r3, #0
   23170:	4648      	mov	r0, r9
   23172:	47a0      	blx	r4
		if (bytes_read < 0) {
   23174:	1e02      	subs	r2, r0, #0
   23176:	da3e      	bge.n	231f6 <socket_thread_fn+0xf2>
			LOG_ERR("AT socket recv failed with err %d",
   23178:	486e      	ldr	r0, [pc, #440]	; (23334 <socket_thread_fn+0x230>)
   2317a:	2145      	movs	r1, #69	; 0x45
   2317c:	f010 f9cb 	bl	33516 <printk>
			if ((close(common_socket_fd) == 0) &&
   23180:	6838      	ldr	r0, [r7, #0]
   23182:	f7ff fee3 	bl	22f4c <close>
   23186:	bb48      	cbnz	r0, 231dc <socket_thread_fn+0xd8>
			    (open_socket() == 0)) {
   23188:	f7ff ff1c 	bl	22fc4 <open_socket>
			if ((close(common_socket_fd) == 0) &&
   2318c:	bb30      	cbnz	r0, 231dc <socket_thread_fn+0xd8>
				LOG_INF("AT socket recovered");
   2318e:	2149      	movs	r1, #73	; 0x49
   23190:	4869      	ldr	r0, [pc, #420]	; (23338 <socket_thread_fn+0x234>)
   23192:	f010 f9c0 	bl	33516 <printk>
				ret.state = AT_CMD_ERROR;
   23196:	2301      	movs	r3, #1
   23198:	f88d 300c 	strb.w	r3, [sp, #12]
				ret.code  = -errno;
   2319c:	f010 fd89 	bl	33cb2 <__errno>
   231a0:	6803      	ldr	r3, [r0, #0]
   231a2:	425b      	negs	r3, r3
			ret.code  = -ENOBUFS;
   231a4:	9302      	str	r3, [sp, #8]
		if (item->callback == NULL) {
   231a6:	9901      	ldr	r1, [sp, #4]
   231a8:	f8d1 3a98 	ldr.w	r3, [r1, #2712]	; 0xa98
   231ac:	2b00      	cmp	r3, #0
   231ae:	f040 808b 	bne.w	232c8 <socket_thread_fn+0x1c4>
			k_mem_slab_free(&rsp_work_items, (void **)&item);
   231b2:	4640      	mov	r0, r8
   231b4:	a901      	add	r1, sp, #4
   231b6:	f00b fbfd 	bl	2e9b4 <k_mem_slab_free>
	return z_impl_k_sem_count_get(sem);
   231ba:	4b60      	ldr	r3, [pc, #384]	; (2333c <socket_thread_fn+0x238>)
		if ((k_sem_count_get(&cmd_pending) == 0) &&
   231bc:	689b      	ldr	r3, [r3, #8]
   231be:	2b00      	cmp	r3, #0
   231c0:	d1a6      	bne.n	23110 <socket_thread_fn+0xc>
   231c2:	f89d 200c 	ldrb.w	r2, [sp, #12]
   231c6:	2a04      	cmp	r2, #4
   231c8:	d0a2      	beq.n	23110 <socket_thread_fn+0xc>
			current_cmd_handler = NULL;
   231ca:	4a5d      	ldr	r2, [pc, #372]	; (23340 <socket_thread_fn+0x23c>)
   231cc:	6013      	str	r3, [r2, #0]
	return z_impl_k_msgq_put(msgq, data, timeout);
   231ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   231d2:	a902      	add	r1, sp, #8
   231d4:	485b      	ldr	r0, [pc, #364]	; (23344 <socket_thread_fn+0x240>)
   231d6:	f00b fd63 	bl	2eca0 <z_impl_k_msgq_put>
   231da:	e799      	b.n	23110 <socket_thread_fn+0xc>
			LOG_ERR("Unrecoverable reception error (err: %d), "
   231dc:	f010 fd69 	bl	33cb2 <__errno>
   231e0:	2145      	movs	r1, #69	; 0x45
   231e2:	6802      	ldr	r2, [r0, #0]
   231e4:	4858      	ldr	r0, [pc, #352]	; (23348 <socket_thread_fn+0x244>)
   231e6:	f010 f996 	bl	33516 <printk>
			close(common_socket_fd);
   231ea:	6838      	ldr	r0, [r7, #0]
   231ec:	f7ff feae 	bl	22f4c <close>
}
   231f0:	b004      	add	sp, #16
   231f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (bytes_read == sizeof(item->data) ||
   231f6:	f640 238c 	movw	r3, #2700	; 0xa8c
   231fa:	429a      	cmp	r2, r3
   231fc:	d007      	beq.n	2320e <socket_thread_fn+0x10a>
			   item->data[bytes_read - 1] != '\0') {
   231fe:	f8dd 9004 	ldr.w	r9, [sp, #4]
   23202:	444a      	add	r2, r9
		} else if (bytes_read == sizeof(item->data) ||
   23204:	f892 a00b 	ldrb.w	sl, [r2, #11]
   23208:	f1ba 0f00 	cmp.w	sl, #0
   2320c:	d006      	beq.n	2321c <socket_thread_fn+0x118>
			LOG_ERR("AT message to large for reception buffer or "
   2320e:	2145      	movs	r1, #69	; 0x45
   23210:	484e      	ldr	r0, [pc, #312]	; (2334c <socket_thread_fn+0x248>)
   23212:	f010 f980 	bl	33516 <printk>
			ret.code  = -ENOBUFS;
   23216:	f06f 0368 	mvn.w	r3, #104	; 0x68
   2321a:	e7c3      	b.n	231a4 <socket_thread_fn+0xa0>
	ret->state = AT_CMD_NOTIFICATION;
   2321c:	2304      	movs	r3, #4
		payload_len = get_return_code(item->data, &ret);
   2321e:	f109 050c 	add.w	r5, r9, #12
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   23222:	4628      	mov	r0, r5
   23224:	494a      	ldr	r1, [pc, #296]	; (23350 <socket_thread_fn+0x24c>)
	ret->state = AT_CMD_NOTIFICATION;
   23226:	f88d 300c 	strb.w	r3, [sp, #12]
		tmpstr = strstr(buf, AT_CMD_OK_STR);
   2322a:	f012 fdbb 	bl	35da4 <strstr>
		if (tmpstr) {
   2322e:	4604      	mov	r4, r0
   23230:	b1e8      	cbz	r0, 2326e <socket_thread_fn+0x16a>
			ret->state = AT_CMD_OK;
   23232:	f88d a00c 	strb.w	sl, [sp, #12]
			ret->code  = 0;
   23236:	f8cd a008 	str.w	sl, [sp, #8]
		buf[new_len++] = '\0';
   2323a:	2300      	movs	r3, #0
		new_len = tmpstr - buf;
   2323c:	1b62      	subs	r2, r4, r5
		buf[new_len++] = '\0';
   2323e:	3201      	adds	r2, #1
   23240:	7023      	strb	r3, [r4, #0]
		if (ret.state != AT_CMD_NOTIFICATION) {
   23242:	f89d 300c 	ldrb.w	r3, [sp, #12]
   23246:	2b04      	cmp	r3, #4
   23248:	d054      	beq.n	232f4 <socket_thread_fn+0x1f0>
			if ((response_buf_len > 0) &&
   2324a:	4d42      	ldr	r5, [pc, #264]	; (23354 <socket_thread_fn+0x250>)
   2324c:	682b      	ldr	r3, [r5, #0]
   2324e:	2b00      	cmp	r3, #0
   23250:	d059      	beq.n	23306 <socket_thread_fn+0x202>
			    (response_buf != NULL)) {
   23252:	4c41      	ldr	r4, [pc, #260]	; (23358 <socket_thread_fn+0x254>)
   23254:	6820      	ldr	r0, [r4, #0]
			if ((response_buf_len > 0) &&
   23256:	2800      	cmp	r0, #0
   23258:	d055      	beq.n	23306 <socket_thread_fn+0x202>
				if (response_buf_len > payload_len) {
   2325a:	4293      	cmp	r3, r2
   2325c:	d92c      	bls.n	232b8 <socket_thread_fn+0x1b4>
   2325e:	9901      	ldr	r1, [sp, #4]
   23260:	310c      	adds	r1, #12
   23262:	f012 fc51 	bl	35b08 <memcpy>
				response_buf_len = 0;
   23266:	2300      	movs	r3, #0
   23268:	602b      	str	r3, [r5, #0]
				response_buf     = NULL;
   2326a:	6023      	str	r3, [r4, #0]
				goto next;
   2326c:	e79b      	b.n	231a6 <socket_thread_fn+0xa2>
		tmpstr = strstr(buf, AT_CMD_CMS_STR);
   2326e:	4628      	mov	r0, r5
   23270:	493a      	ldr	r1, [pc, #232]	; (2335c <socket_thread_fn+0x258>)
   23272:	f012 fd97 	bl	35da4 <strstr>
		if (tmpstr) {
   23276:	4604      	mov	r4, r0
   23278:	b140      	cbz	r0, 2328c <socket_thread_fn+0x188>
			ret->state = AT_CMD_ERROR_CMS;
   2327a:	2302      	movs	r3, #2
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   2327c:	f109 0017 	add.w	r0, r9, #23
			ret->state = AT_CMD_ERROR_CME;
   23280:	f88d 300c 	strb.w	r3, [sp, #12]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   23284:	f012 fc20 	bl	35ac8 <atoi>
   23288:	9002      	str	r0, [sp, #8]
			break;
   2328a:	e7d6      	b.n	2323a <socket_thread_fn+0x136>
		tmpstr = strstr(buf, AT_CMD_CME_STR);
   2328c:	4628      	mov	r0, r5
   2328e:	4934      	ldr	r1, [pc, #208]	; (23360 <socket_thread_fn+0x25c>)
   23290:	f012 fd88 	bl	35da4 <strstr>
		if (tmpstr) {
   23294:	4604      	mov	r4, r0
   23296:	b108      	cbz	r0, 2329c <socket_thread_fn+0x198>
			ret->state = AT_CMD_ERROR_CME;
   23298:	2303      	movs	r3, #3
   2329a:	e7ef      	b.n	2327c <socket_thread_fn+0x178>
		tmpstr = strstr(buf, AT_CMD_ERROR_STR);
   2329c:	4628      	mov	r0, r5
   2329e:	4931      	ldr	r1, [pc, #196]	; (23364 <socket_thread_fn+0x260>)
   232a0:	f012 fd80 	bl	35da4 <strstr>
		if (tmpstr) {
   232a4:	4604      	mov	r4, r0
   232a6:	2800      	cmp	r0, #0
   232a8:	d032      	beq.n	23310 <socket_thread_fn+0x20c>
			ret->state = AT_CMD_ERROR;
   232aa:	2301      	movs	r3, #1
   232ac:	f88d 300c 	strb.w	r3, [sp, #12]
			ret->code  = -ENOEXEC;
   232b0:	f06f 0307 	mvn.w	r3, #7
   232b4:	9302      	str	r3, [sp, #8]
			break;
   232b6:	e7c0      	b.n	2323a <socket_thread_fn+0x136>
					LOG_ERR("Response buffer not large "
   232b8:	2145      	movs	r1, #69	; 0x45
   232ba:	482b      	ldr	r0, [pc, #172]	; (23368 <socket_thread_fn+0x264>)
   232bc:	f010 f92b 	bl	33516 <printk>
					ret.code  = -EMSGSIZE;
   232c0:	f06f 0379 	mvn.w	r3, #121	; 0x79
   232c4:	9302      	str	r3, [sp, #8]
   232c6:	e7ce      	b.n	23266 <socket_thread_fn+0x162>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   232c8:	4b28      	ldr	r3, [pc, #160]	; (2336c <socket_thread_fn+0x268>)
   232ca:	2200      	movs	r2, #0
   232cc:	604b      	str	r3, [r1, #4]
   232ce:	460b      	mov	r3, r1
   232d0:	600a      	str	r2, [r1, #0]
   232d2:	f843 2f08 	str.w	r2, [r3, #8]!
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   232d6:	e8d3 2fef 	ldaex	r2, [r3]
   232da:	f042 0001 	orr.w	r0, r2, #1
   232de:	e8c3 0fe4 	stlex	r4, r0, [r3]
   232e2:	2c00      	cmp	r4, #0
   232e4:	d1f7      	bne.n	232d6 <socket_thread_fn+0x1d2>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   232e6:	07d3      	lsls	r3, r2, #31
   232e8:	f53f af67 	bmi.w	231ba <socket_thread_fn+0xb6>
		k_queue_append(&work_q->queue, work);
   232ec:	4820      	ldr	r0, [pc, #128]	; (23370 <socket_thread_fn+0x26c>)
   232ee:	f012 fa99 	bl	35824 <k_queue_append>
   232f2:	e762      	b.n	231ba <socket_thread_fn+0xb6>
		if (payload_len == 0) {
   232f4:	2a00      	cmp	r2, #0
   232f6:	f43f af56 	beq.w	231a6 <socket_thread_fn+0xa2>
			item->callback = notification_handler;
   232fa:	4b1e      	ldr	r3, [pc, #120]	; (23374 <socket_thread_fn+0x270>)
			item->callback = current_cmd_handler;
   232fc:	681a      	ldr	r2, [r3, #0]
   232fe:	9b01      	ldr	r3, [sp, #4]
   23300:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
   23304:	e74f      	b.n	231a6 <socket_thread_fn+0xa2>
		if (payload_len == 0) {
   23306:	2a00      	cmp	r2, #0
   23308:	f43f af4d 	beq.w	231a6 <socket_thread_fn+0xa2>
			item->callback = current_cmd_handler;
   2330c:	4b0c      	ldr	r3, [pc, #48]	; (23340 <socket_thread_fn+0x23c>)
   2330e:	e7f5      	b.n	232fc <socket_thread_fn+0x1f8>
		new_len = strlen(buf) + 1;
   23310:	4628      	mov	r0, r5
   23312:	f7f9 feed 	bl	1d0f0 <strlen>
   23316:	1c42      	adds	r2, r0, #1
   23318:	e793      	b.n	23242 <socket_thread_fn+0x13e>
   2331a:	bf00      	nop
   2331c:	20022238 	.word	0x20022238
   23320:	200220f8 	.word	0x200220f8
   23324:	00037b4f 	.word	0x00037b4f
   23328:	00037a66 	.word	0x00037a66
   2332c:	00037b1f 	.word	0x00037b1f
   23330:	00038dc6 	.word	0x00038dc6
   23334:	0003920b 	.word	0x0003920b
   23338:	00039232 	.word	0x00039232
   2333c:	20029888 	.word	0x20029888
   23340:	2002223c 	.word	0x2002223c
   23344:	200298f4 	.word	0x200298f4
   23348:	0003924b 	.word	0x0003924b
   2334c:	00039287 	.word	0x00039287
   23350:	000392d6 	.word	0x000392d6
   23354:	20022248 	.word	0x20022248
   23358:	20022244 	.word	0x20022244
   2335c:	000392d9 	.word	0x000392d9
   23360:	000392e5 	.word	0x000392e5
   23364:	000392f1 	.word	0x000392f1
   23368:	000392f7 	.word	0x000392f7
   2336c:	00022fa5 	.word	0x00022fa5
   23370:	20023f18 	.word	0x20023f18
   23374:	20022240 	.word	0x20022240
   23378:	20029850 	.word	0x20029850

0002337c <at_cmd_write>:

int at_cmd_write(const char *const cmd,
		 char *buf,
		 size_t buf_len,
		 enum at_cmd_state *state)
{
   2337c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23380:	4604      	mov	r4, r0
   23382:	460f      	mov	r7, r1
   23384:	4616      	mov	r6, r2
   23386:	461d      	mov	r5, r3
	return z_impl_k_sem_take(sem, timeout);
   23388:	f8df 8030 	ldr.w	r8, [pc, #48]	; 233bc <at_cmd_write+0x40>
   2338c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   23390:	4640      	mov	r0, r8
   23392:	f00d fa43 	bl	3081c <z_impl_k_sem_take>
	k_sem_take(&cmd_pending, K_FOREVER);

	response_buf     = buf;
   23396:	4b07      	ldr	r3, [pc, #28]	; (233b4 <at_cmd_write+0x38>)
	response_buf_len = buf_len;

	int return_code = at_write(cmd, state);
   23398:	4629      	mov	r1, r5
	response_buf     = buf;
   2339a:	601f      	str	r7, [r3, #0]
	response_buf_len = buf_len;
   2339c:	4b06      	ldr	r3, [pc, #24]	; (233b8 <at_cmd_write+0x3c>)
	int return_code = at_write(cmd, state);
   2339e:	4620      	mov	r0, r4
	response_buf_len = buf_len;
   233a0:	601e      	str	r6, [r3, #0]
	int return_code = at_write(cmd, state);
   233a2:	f7ff fe49 	bl	23038 <at_write>
   233a6:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   233a8:	4640      	mov	r0, r8
   233aa:	f00d f9ed 	bl	30788 <z_impl_k_sem_give>

	k_sem_give(&cmd_pending);

	return return_code;
}
   233ae:	4620      	mov	r0, r4
   233b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   233b4:	20022244 	.word	0x20022244
   233b8:	20022248 	.word	0x20022248
   233bc:	20029888 	.word	0x20029888

000233c0 <at_cmd_set_notification_handler>:

void at_cmd_set_notification_handler(at_cmd_handler_t handler)
{
   233c0:	b538      	push	{r3, r4, r5, lr}
	LOG_DBG("Setting notification handler to %p", handler);
	if (notification_handler != NULL && handler != notification_handler) {
   233c2:	4c0a      	ldr	r4, [pc, #40]	; (233ec <at_cmd_set_notification_handler+0x2c>)
{
   233c4:	4605      	mov	r5, r0
	if (notification_handler != NULL && handler != notification_handler) {
   233c6:	6822      	ldr	r2, [r4, #0]
   233c8:	b12a      	cbz	r2, 233d6 <at_cmd_set_notification_handler+0x16>
   233ca:	4282      	cmp	r2, r0
   233cc:	d003      	beq.n	233d6 <at_cmd_set_notification_handler+0x16>
		LOG_WRN("Forgetting prior notification handler %p",
   233ce:	2157      	movs	r1, #87	; 0x57
   233d0:	4807      	ldr	r0, [pc, #28]	; (233f0 <at_cmd_set_notification_handler+0x30>)
   233d2:	f010 f8a0 	bl	33516 <printk>
	return z_impl_k_sem_take(sem, timeout);
   233d6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   233da:	4806      	ldr	r0, [pc, #24]	; (233f4 <at_cmd_set_notification_handler+0x34>)
   233dc:	f00d fa1e 	bl	3081c <z_impl_k_sem_take>
			notification_handler);
	}

	k_sem_take(&cmd_pending, K_FOREVER);

	notification_handler = handler;
   233e0:	6025      	str	r5, [r4, #0]
	z_impl_k_sem_give(sem);
   233e2:	4804      	ldr	r0, [pc, #16]	; (233f4 <at_cmd_set_notification_handler+0x34>)

	k_sem_give(&cmd_pending);
}
   233e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   233e8:	f00d b9ce 	b.w	30788 <z_impl_k_sem_give>
   233ec:	20022240 	.word	0x20022240
   233f0:	0003931d 	.word	0x0003931d
   233f4:	20029888 	.word	0x20029888

000233f8 <at_cmd_init>:

	return 0;
}

int at_cmd_init(void)
{
   233f8:	b510      	push	{r4, lr}
	if (initialized) {
   233fa:	4b11      	ldr	r3, [pc, #68]	; (23440 <at_cmd_init+0x48>)
{
   233fc:	b086      	sub	sp, #24
	if (initialized) {
   233fe:	781a      	ldrb	r2, [r3, #0]
   23400:	b9e2      	cbnz	r2, 2343c <at_cmd_init+0x44>
	initialized = true;
   23402:	2201      	movs	r2, #1
   23404:	701a      	strb	r2, [r3, #0]
	err = open_socket();
   23406:	f7ff fddd 	bl	22fc4 <open_socket>
	if (err) {
   2340a:	4604      	mov	r4, r0
   2340c:	b138      	cbz	r0, 2341e <at_cmd_init+0x26>
		LOG_ERR("Failed to open AT socket (err:%d)", err);
   2340e:	4602      	mov	r2, r0
   23410:	2145      	movs	r1, #69	; 0x45
   23412:	480c      	ldr	r0, [pc, #48]	; (23444 <at_cmd_init+0x4c>)
   23414:	f010 f87f 	bl	33516 <printk>
	return at_cmd_driver_init(NULL);
}
   23418:	4620      	mov	r0, r4
   2341a:	b006      	add	sp, #24
   2341c:	bd10      	pop	{r4, pc}
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2341e:	230a      	movs	r3, #10
   23420:	e9cd 0004 	strd	r0, r0, [sp, #16]
   23424:	e9cd 0302 	strd	r0, r3, [sp, #8]
   23428:	e9cd 0000 	strd	r0, r0, [sp]
   2342c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   23430:	4b05      	ldr	r3, [pc, #20]	; (23448 <at_cmd_init+0x50>)
   23432:	4906      	ldr	r1, [pc, #24]	; (2344c <at_cmd_init+0x54>)
   23434:	4806      	ldr	r0, [pc, #24]	; (23450 <at_cmd_init+0x58>)
   23436:	f00d fb23 	bl	30a80 <z_impl_k_thread_create>
   2343a:	e7ed      	b.n	23418 <at_cmd_init+0x20>
		return 0;
   2343c:	2400      	movs	r4, #0
	return at_cmd_driver_init(NULL);
   2343e:	e7eb      	b.n	23418 <at_cmd_init+0x20>
   23440:	20024213 	.word	0x20024213
   23444:	0003934b 	.word	0x0003934b
   23448:	00023105 	.word	0x00023105
   2344c:	20025cc0 	.word	0x20025cc0
   23450:	2002224c 	.word	0x2002224c

00023454 <find_node>:
static struct notif_handler *find_node(struct notif_handler **prev_out,
	void *ctx, at_notif_handler_t handler)
{
	struct notif_handler *prev = NULL, *curr, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   23454:	4b0f      	ldr	r3, [pc, #60]	; (23494 <find_node+0x40>)
{
   23456:	b570      	push	{r4, r5, r6, lr}
   23458:	4604      	mov	r4, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   2345a:	6818      	ldr	r0, [r3, #0]
   2345c:	b170      	cbz	r0, 2347c <find_node+0x28>
	return node->next;
   2345e:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   23460:	4603      	mov	r3, r0
   23462:	2d00      	cmp	r5, #0
   23464:	4628      	mov	r0, r5
   23466:	bf38      	it	cc
   23468:	2000      	movcc	r0, #0
   2346a:	2500      	movs	r5, #0
		if (curr->ctx == ctx && curr->handler == handler) {
   2346c:	685e      	ldr	r6, [r3, #4]
   2346e:	428e      	cmp	r6, r1
   23470:	d105      	bne.n	2347e <find_node+0x2a>
   23472:	689e      	ldr	r6, [r3, #8]
   23474:	4296      	cmp	r6, r2
   23476:	d102      	bne.n	2347e <find_node+0x2a>
			*prev_out = prev;
			return curr;
   23478:	4618      	mov	r0, r3
			*prev_out = prev;
   2347a:	6025      	str	r5, [r4, #0]
		}
		prev = curr;
	}
	return NULL;
}
   2347c:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   2347e:	2800      	cmp	r0, #0
   23480:	d0fc      	beq.n	2347c <find_node+0x28>
	return node->next;
   23482:	6806      	ldr	r6, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   23484:	461d      	mov	r5, r3
   23486:	2e00      	cmp	r6, #0
   23488:	4603      	mov	r3, r0
   2348a:	4630      	mov	r0, r6
   2348c:	bf38      	it	cc
   2348e:	2000      	movcc	r0, #0
   23490:	e7ec      	b.n	2346c <find_node+0x18>
   23492:	bf00      	nop
   23494:	200222fc 	.word	0x200222fc

00023498 <k_mutex_unlock.constprop.0>:
	return z_impl_k_mutex_unlock(mutex);
   23498:	4801      	ldr	r0, [pc, #4]	; (234a0 <k_mutex_unlock.constprop.0+0x8>)
   2349a:	f00b be2b 	b.w	2f0f4 <z_impl_k_mutex_unlock>
   2349e:	bf00      	nop
   234a0:	200298e0 	.word	0x200298e0

000234a4 <notif_dispatch>:
	return 0;
}

/**@brief AT command notifications handler. */
static void notif_dispatch(const char *response)
{
   234a4:	b538      	push	{r3, r4, r5, lr}
   234a6:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   234a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   234ac:	480d      	ldr	r0, [pc, #52]	; (234e4 <notif_dispatch+0x40>)
   234ae:	f00b fd43 	bl	2ef38 <z_impl_k_mutex_lock>

	k_mutex_lock(&list_mtx, K_FOREVER);

	/* Dispatch notifications to all registered handlers */
	LOG_DBG("Dispatching events:");
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   234b2:	4b0d      	ldr	r3, [pc, #52]	; (234e8 <notif_dispatch+0x44>)
   234b4:	681b      	ldr	r3, [r3, #0]
   234b6:	b91b      	cbnz	r3, 234c0 <notif_dispatch+0x1c>
		curr->handler(curr->ctx, response);
	}
	LOG_DBG("Done");

	k_mutex_unlock(&list_mtx);
}
   234b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&list_mtx);
   234bc:	f7ff bfec 	b.w	23498 <k_mutex_unlock.constprop.0>
	return node->next;
   234c0:	681c      	ldr	r4, [r3, #0]
   234c2:	2c00      	cmp	r4, #0
   234c4:	bf38      	it	cc
   234c6:	2400      	movcc	r4, #0
		curr->handler(curr->ctx, response);
   234c8:	4629      	mov	r1, r5
   234ca:	689a      	ldr	r2, [r3, #8]
   234cc:	6858      	ldr	r0, [r3, #4]
   234ce:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   234d0:	2c00      	cmp	r4, #0
   234d2:	d0f1      	beq.n	234b8 <notif_dispatch+0x14>
   234d4:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   234d6:	4623      	mov	r3, r4
   234d8:	2a00      	cmp	r2, #0
   234da:	bf38      	it	cc
   234dc:	2200      	movcc	r2, #0
   234de:	4614      	mov	r4, r2
   234e0:	e7f2      	b.n	234c8 <notif_dispatch+0x24>
   234e2:	bf00      	nop
   234e4:	200298e0 	.word	0x200298e0
   234e8:	200222fc 	.word	0x200222fc

000234ec <at_notif_init>:
{
	ARG_UNUSED(dev);

	static bool initialized;

	if (initialized) {
   234ec:	4a09      	ldr	r2, [pc, #36]	; (23514 <at_notif_init+0x28>)
	at_cmd_set_notification_handler(notif_dispatch);
	return 0;
}

int at_notif_init(void)
{
   234ee:	b508      	push	{r3, lr}
	if (initialized) {
   234f0:	7813      	ldrb	r3, [r2, #0]
   234f2:	b12b      	cbz	r3, 23500 <at_notif_init+0x14>
		LOG_WRN("Already initialized. Nothing to do");
   234f4:	2157      	movs	r1, #87	; 0x57
   234f6:	4808      	ldr	r0, [pc, #32]	; (23518 <at_notif_init+0x2c>)
   234f8:	f010 f80d 	bl	33516 <printk>
	return module_init(NULL);
}
   234fc:	2000      	movs	r0, #0
   234fe:	bd08      	pop	{r3, pc}
	initialized = true;
   23500:	2101      	movs	r1, #1
   23502:	7011      	strb	r1, [r2, #0]
	list->head = NULL;
   23504:	4a05      	ldr	r2, [pc, #20]	; (2351c <at_notif_init+0x30>)
	at_cmd_set_notification_handler(notif_dispatch);
   23506:	4806      	ldr	r0, [pc, #24]	; (23520 <at_notif_init+0x34>)
	list->tail = NULL;
   23508:	e9c2 3300 	strd	r3, r3, [r2]
   2350c:	f7ff ff58 	bl	233c0 <at_cmd_set_notification_handler>
	return 0;
   23510:	e7f4      	b.n	234fc <at_notif_init+0x10>
   23512:	bf00      	nop
   23514:	20024214 	.word	0x20024214
   23518:	00039379 	.word	0x00039379
   2351c:	200222fc 	.word	0x200222fc
   23520:	000234a5 	.word	0x000234a5

00023524 <at_notif_register_handler>:

int at_notif_register_handler(void *context, at_notif_handler_t handler)
{
   23524:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   23526:	4607      	mov	r7, r0
	if (handler == NULL) {
   23528:	460e      	mov	r6, r1
   2352a:	b949      	cbnz	r1, 23540 <at_notif_register_handler+0x1c>
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
   2352c:	460b      	mov	r3, r1
   2352e:	4602      	mov	r2, r0
   23530:	2145      	movs	r1, #69	; 0x45
   23532:	4818      	ldr	r0, [pc, #96]	; (23594 <at_notif_register_handler+0x70>)
   23534:	f00f ffef 	bl	33516 <printk>
			(u32_t)context, (u32_t)handler);
		return -EINVAL;
   23538:	f06f 0015 	mvn.w	r0, #21
	}
	return append_notif_handler(context, handler);
}
   2353c:	b003      	add	sp, #12
   2353e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   23540:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   23544:	4814      	ldr	r0, [pc, #80]	; (23598 <at_notif_register_handler+0x74>)
   23546:	f00b fcf7 	bl	2ef38 <z_impl_k_mutex_lock>
	if (find_node(&to_ins, ctx, handler) != NULL) {
   2354a:	4632      	mov	r2, r6
   2354c:	4639      	mov	r1, r7
   2354e:	a801      	add	r0, sp, #4
   23550:	f7ff ff80 	bl	23454 <find_node>
   23554:	4605      	mov	r5, r0
   23556:	b118      	cbz	r0, 23560 <at_notif_register_handler+0x3c>
		k_mutex_unlock(&list_mtx);
   23558:	f7ff ff9e 	bl	23498 <k_mutex_unlock.constprop.0>
		return 0;
   2355c:	2000      	movs	r0, #0
   2355e:	e7ed      	b.n	2353c <at_notif_register_handler+0x18>
	to_ins = (struct notif_handler *)k_malloc(sizeof(struct notif_handler));
   23560:	200c      	movs	r0, #12
   23562:	f00b fb7d 	bl	2ec60 <k_malloc>
   23566:	9001      	str	r0, [sp, #4]
	if (to_ins == NULL) {
   23568:	b920      	cbnz	r0, 23574 <at_notif_register_handler+0x50>
		k_mutex_unlock(&list_mtx);
   2356a:	f7ff ff95 	bl	23498 <k_mutex_unlock.constprop.0>
		return -ENOBUFS;
   2356e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   23572:	e7e3      	b.n	2353c <at_notif_register_handler+0x18>
__ssp_bos_icheck3(memset, void *, int)
   23574:	6005      	str	r5, [r0, #0]
	to_ins->ctx     = ctx;
   23576:	9c01      	ldr	r4, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   23578:	4b08      	ldr	r3, [pc, #32]	; (2359c <at_notif_register_handler+0x78>)
   2357a:	6045      	str	r5, [r0, #4]
   2357c:	6085      	str	r5, [r0, #8]
	parent->next = child;
   2357e:	6025      	str	r5, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   23580:	685a      	ldr	r2, [r3, #4]
	to_ins->handler = handler;
   23582:	e9c4 7601 	strd	r7, r6, [r4, #4]
   23586:	b912      	cbnz	r2, 2358e <at_notif_register_handler+0x6a>
	list->head = node;
   23588:	e9c3 4400 	strd	r4, r4, [r3]
}
   2358c:	e7e4      	b.n	23558 <at_notif_register_handler+0x34>
	parent->next = child;
   2358e:	6014      	str	r4, [r2, #0]
	list->tail = node;
   23590:	605c      	str	r4, [r3, #4]
}
   23592:	e7e1      	b.n	23558 <at_notif_register_handler+0x34>
   23594:	000393a1 	.word	0x000393a1
   23598:	200298e0 	.word	0x200298e0
   2359c:	200222fc 	.word	0x200222fc

000235a0 <at_notif_deregister_handler>:

int at_notif_deregister_handler(void *context, at_notif_handler_t handler)
{
   235a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   235a2:	4604      	mov	r4, r0
	if (handler == NULL) {
   235a4:	460b      	mov	r3, r1
   235a6:	b941      	cbnz	r1, 235ba <at_notif_deregister_handler+0x1a>
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
   235a8:	4602      	mov	r2, r0
   235aa:	2145      	movs	r1, #69	; 0x45
   235ac:	4818      	ldr	r0, [pc, #96]	; (23610 <at_notif_deregister_handler+0x70>)
   235ae:	f00f ffb2 	bl	33516 <printk>
			(u32_t)context, (u32_t)handler);
		return -EINVAL;
   235b2:	f06f 0015 	mvn.w	r0, #21
	}
	return remove_notif_handler(context, handler);
}
   235b6:	b004      	add	sp, #16
   235b8:	bd10      	pop	{r4, pc}
	struct notif_handler *curr, *prev = NULL;
   235ba:	2200      	movs	r2, #0
   235bc:	9101      	str	r1, [sp, #4]
   235be:	9203      	str	r2, [sp, #12]
   235c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   235c4:	4813      	ldr	r0, [pc, #76]	; (23614 <at_notif_deregister_handler+0x74>)
   235c6:	f00b fcb7 	bl	2ef38 <z_impl_k_mutex_lock>
	curr = find_node(&prev, ctx, handler);
   235ca:	9b01      	ldr	r3, [sp, #4]
   235cc:	4621      	mov	r1, r4
   235ce:	461a      	mov	r2, r3
   235d0:	a803      	add	r0, sp, #12
   235d2:	f7ff ff3f 	bl	23454 <find_node>
	if (curr == NULL) {
   235d6:	b938      	cbnz	r0, 235e8 <at_notif_deregister_handler+0x48>
		LOG_WRN("Handler not registered. Nothing to do");
   235d8:	2157      	movs	r1, #87	; 0x57
   235da:	480f      	ldr	r0, [pc, #60]	; (23618 <at_notif_deregister_handler+0x78>)
   235dc:	f00f ff9b 	bl	33516 <printk>
	k_mutex_unlock(&list_mtx);
   235e0:	f7ff ff5a 	bl	23498 <k_mutex_unlock.constprop.0>
	return remove_notif_handler(context, handler);
   235e4:	2000      	movs	r0, #0
   235e6:	e7e6      	b.n	235b6 <at_notif_deregister_handler+0x16>
	sys_slist_remove(&handler_list, &prev->node, &curr->node);
   235e8:	9a03      	ldr	r2, [sp, #12]
Z_GENLIST_REMOVE(slist, snode)
   235ea:	6801      	ldr	r1, [r0, #0]
   235ec:	4b0b      	ldr	r3, [pc, #44]	; (2361c <at_notif_deregister_handler+0x7c>)
   235ee:	b94a      	cbnz	r2, 23604 <at_notif_deregister_handler+0x64>
   235f0:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   235f2:	6019      	str	r1, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   235f4:	4290      	cmp	r0, r2
   235f6:	d100      	bne.n	235fa <at_notif_deregister_handler+0x5a>
	list->tail = node;
   235f8:	6059      	str	r1, [r3, #4]
	parent->next = child;
   235fa:	2300      	movs	r3, #0
   235fc:	6003      	str	r3, [r0, #0]
	k_free(curr);
   235fe:	f012 f8d9 	bl	357b4 <k_free>
   23602:	e7ed      	b.n	235e0 <at_notif_deregister_handler+0x40>
   23604:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   23606:	6859      	ldr	r1, [r3, #4]
   23608:	4288      	cmp	r0, r1
	list->tail = node;
   2360a:	bf08      	it	eq
   2360c:	605a      	streq	r2, [r3, #4]
}
   2360e:	e7f4      	b.n	235fa <at_notif_deregister_handler+0x5a>
   23610:	000393a1 	.word	0x000393a1
   23614:	200298e0 	.word	0x200298e0
   23618:	000393d7 	.word	0x000393d7
   2361c:	200222fc 	.word	0x200222fc

00023620 <write_uart_string>:
static struct k_work cmd_send_work;



static inline void write_uart_string(const char *str)
{
   23620:	b538      	push	{r3, r4, r5, lr}
	/* Send characters until, but not including, null */
	for (size_t i = 0; str[i]; i++) {
		uart_poll_out(uart_dev, str[i]);
   23622:	4d05      	ldr	r5, [pc, #20]	; (23638 <write_uart_string+0x18>)
   23624:	1e44      	subs	r4, r0, #1
	for (size_t i = 0; str[i]; i++) {
   23626:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   2362a:	b901      	cbnz	r1, 2362e <write_uart_string+0xe>
	}
}
   2362c:	bd38      	pop	{r3, r4, r5, pc}
		uart_poll_out(uart_dev, str[i]);
   2362e:	6828      	ldr	r0, [r5, #0]
   23630:	6843      	ldr	r3, [r0, #4]
   23632:	685b      	ldr	r3, [r3, #4]
   23634:	4798      	blx	r3
	for (size_t i = 0; str[i]; i++) {
   23636:	e7f6      	b.n	23626 <write_uart_string+0x6>
   23638:	200223d8 	.word	0x200223d8

0002363c <cmd_send>:
	/* Forward the data over UART */
	write_uart_string(response);
}

static void cmd_send(struct k_work *work)
{
   2363c:	b500      	push	{lr}
	enum at_cmd_state state;
	int               err;

	ARG_UNUSED(work);

	err = at_cmd_write(at_buf, at_buf,
   2363e:	491e      	ldr	r1, [pc, #120]	; (236b8 <cmd_send+0x7c>)
{
   23640:	b08b      	sub	sp, #44	; 0x2c
	err = at_cmd_write(at_buf, at_buf,
   23642:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   23646:	4608      	mov	r0, r1
   23648:	f10d 030b 	add.w	r3, sp, #11
   2364c:	f7ff fe96 	bl	2337c <at_cmd_write>
			   sizeof(at_buf), &state);
	if (err < 0) {
   23650:	1e02      	subs	r2, r0, #0
   23652:	da08      	bge.n	23666 <cmd_send+0x2a>
		LOG_ERR("Error while processing AT command: %d", err);
   23654:	2145      	movs	r1, #69	; 0x45
   23656:	4819      	ldr	r0, [pc, #100]	; (236bc <cmd_send+0x80>)
   23658:	f00f ff5d 	bl	33516 <printk>
		state = AT_CMD_ERROR;
   2365c:	2301      	movs	r3, #1
   2365e:	f88d 300b 	strb.w	r3, [sp, #11]
	case AT_CMD_OK:
		write_uart_string(at_buf);
		write_uart_string(OK_STR);
		break;
	case AT_CMD_ERROR:
		write_uart_string(ERROR_STR);
   23662:	4817      	ldr	r0, [pc, #92]	; (236c0 <cmd_send+0x84>)
   23664:	e012      	b.n	2368c <cmd_send+0x50>
	switch (state) {
   23666:	f89d 300b 	ldrb.w	r3, [sp, #11]
   2366a:	2b03      	cmp	r3, #3
   2366c:	d810      	bhi.n	23690 <cmd_send+0x54>
   2366e:	a101      	add	r1, pc, #4	; (adr r1, 23674 <cmd_send+0x38>)
   23670:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   23674:	00023685 	.word	0x00023685
   23678:	00023663 	.word	0x00023663
   2367c:	0002369f 	.word	0x0002369f
   23680:	000236b1 	.word	0x000236b1
		write_uart_string(at_buf);
   23684:	480c      	ldr	r0, [pc, #48]	; (236b8 <cmd_send+0x7c>)
   23686:	f7ff ffcb 	bl	23620 <write_uart_string>
		write_uart_string(OK_STR);
   2368a:	480e      	ldr	r0, [pc, #56]	; (236c4 <cmd_send+0x88>)
		sprintf(str, "+CMS ERROR: %d\r\n", err);
		write_uart_string(str);
		break;
	case AT_CMD_ERROR_CME:
		sprintf(str, "+CME ERROR: %d\r\n", err);
		write_uart_string(str);
   2368c:	f7ff ffc8 	bl	23620 <write_uart_string>
		break;
	default:
		break;
	}

	uart_irq_rx_enable(uart_dev);
   23690:	4b0d      	ldr	r3, [pc, #52]	; (236c8 <cmd_send+0x8c>)
   23692:	6818      	ldr	r0, [r3, #0]
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_UART_IRQ_RX_ENABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
   23694:	f011 fed7 	bl	35446 <z_impl_uart_irq_rx_enable>
}
   23698:	b00b      	add	sp, #44	; 0x2c
   2369a:	f85d fb04 	ldr.w	pc, [sp], #4
		sprintf(str, "+CMS ERROR: %d\r\n", err);
   2369e:	4b0b      	ldr	r3, [pc, #44]	; (236cc <cmd_send+0x90>)
   236a0:	9200      	str	r2, [sp, #0]
		sprintf(str, "+CME ERROR: %d\r\n", err);
   236a2:	2219      	movs	r2, #25
   236a4:	2100      	movs	r1, #0
   236a6:	a803      	add	r0, sp, #12
   236a8:	f012 faf8 	bl	35c9c <__sprintf_chk>
		write_uart_string(str);
   236ac:	a803      	add	r0, sp, #12
   236ae:	e7ed      	b.n	2368c <cmd_send+0x50>
		sprintf(str, "+CME ERROR: %d\r\n", err);
   236b0:	4b07      	ldr	r3, [pc, #28]	; (236d0 <cmd_send+0x94>)
   236b2:	9200      	str	r2, [sp, #0]
   236b4:	e7f5      	b.n	236a2 <cmd_send+0x66>
   236b6:	bf00      	nop
   236b8:	20024215 	.word	0x20024215
   236bc:	0003940b 	.word	0x0003940b
   236c0:	0003943b 	.word	0x0003943b
   236c4:	00039436 	.word	0x00039436
   236c8:	200223d8 	.word	0x200223d8
   236cc:	00039443 	.word	0x00039443
   236d0:	00039454 	.word	0x00039454

000236d4 <isr>:
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
	}
}

static void isr(struct device *dev)
{
   236d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   236d6:	4604      	mov	r4, r0
static inline int z_impl_uart_irq_update(struct device *dev)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	if (api->irq_update) {
   236d8:	6843      	ldr	r3, [r0, #4]
   236da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   236dc:	b103      	cbz	r3, 236e0 <isr+0xc>
		return api->irq_update(dev);
   236de:	4798      	blx	r3
	if (api->irq_rx_ready) {
   236e0:	6863      	ldr	r3, [r4, #4]
   236e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   236e4:	b193      	cbz	r3, 2370c <isr+0x38>
		return api->irq_rx_ready(dev);
   236e6:	4620      	mov	r0, r4
   236e8:	4798      	blx	r3
	u8_t character;

	uart_irq_update(dev);

	if (!uart_irq_rx_ready(dev)) {
   236ea:	b178      	cbz	r0, 2370c <isr+0x38>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   236ec:	4f3b      	ldr	r7, [pc, #236]	; (237dc <isr+0x108>)
		if (at_cmd_len > 0) {
   236ee:	4d3c      	ldr	r5, [pc, #240]	; (237e0 <isr+0x10c>)
   236f0:	463e      	mov	r6, r7
   236f2:	e8d7 3faf 	lda	r3, [r7]

	/*
	 * Check that we are not sending data (buffer must be preserved then),
	 * and that a new character is available before handling each character
	 */
	while ((!k_work_pending(&cmd_send_work)) &&
   236f6:	07db      	lsls	r3, r3, #31
   236f8:	d408      	bmi.n	2370c <isr+0x38>
	if (api->fifo_read) {
   236fa:	6863      	ldr	r3, [r4, #4]
   236fc:	699b      	ldr	r3, [r3, #24]
   236fe:	b12b      	cbz	r3, 2370c <isr+0x38>
		return api->fifo_read(dev, rx_data, size);
   23700:	2201      	movs	r2, #1
   23702:	4620      	mov	r0, r4
   23704:	f10d 0107 	add.w	r1, sp, #7
   23708:	4798      	blx	r3
   2370a:	b908      	cbnz	r0, 23710 <isr+0x3c>
	       (uart_fifo_read(dev, &character, 1))) {
		uart_rx_handler(character);
	}
}
   2370c:	b003      	add	sp, #12
   2370e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uart_rx_handler(character);
   23710:	f89d 2007 	ldrb.w	r2, [sp, #7]
	switch (character) {
   23714:	2a08      	cmp	r2, #8
   23716:	d001      	beq.n	2371c <isr+0x48>
   23718:	2a7f      	cmp	r2, #127	; 0x7f
   2371a:	d105      	bne.n	23728 <isr+0x54>
		if (at_cmd_len > 0) {
   2371c:	682b      	ldr	r3, [r5, #0]
   2371e:	2b00      	cmp	r3, #0
   23720:	d0e7      	beq.n	236f2 <isr+0x1e>
			at_cmd_len--;
   23722:	3b01      	subs	r3, #1
   23724:	602b      	str	r3, [r5, #0]
   23726:	e7e4      	b.n	236f2 <isr+0x1e>
	if (!inside_quotes) {
   23728:	492e      	ldr	r1, [pc, #184]	; (237e4 <isr+0x110>)
   2372a:	780b      	ldrb	r3, [r1, #0]
   2372c:	b983      	cbnz	r3, 23750 <isr+0x7c>
		switch (character) {
   2372e:	2a0a      	cmp	r2, #10
   23730:	d01a      	beq.n	23768 <isr+0x94>
   23732:	2a0d      	cmp	r2, #13
   23734:	d008      	beq.n	23748 <isr+0x74>
   23736:	b95a      	cbnz	r2, 23750 <isr+0x7c>
			if (term_mode == MODE_NULL_TERM) {
   23738:	4b2b      	ldr	r3, [pc, #172]	; (237e8 <isr+0x114>)
   2373a:	781b      	ldrb	r3, [r3, #0]
   2373c:	b383      	cbz	r3, 237a0 <isr+0xcc>
			LOG_WRN("Ignored null; would terminate string early.");
   2373e:	2157      	movs	r1, #87	; 0x57
   23740:	482a      	ldr	r0, [pc, #168]	; (237ec <isr+0x118>)
   23742:	f00f fee8 	bl	33516 <printk>
			return;
   23746:	e7d4      	b.n	236f2 <isr+0x1e>
			if (term_mode == MODE_CR) {
   23748:	4827      	ldr	r0, [pc, #156]	; (237e8 <isr+0x114>)
   2374a:	7800      	ldrb	r0, [r0, #0]
   2374c:	2801      	cmp	r0, #1
			    at_cmd_len > 0 &&
   2374e:	d027      	beq.n	237a0 <isr+0xcc>
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
   23750:	f8d5 c000 	ldr.w	ip, [r5]
   23754:	f10c 0001 	add.w	r0, ip, #1
   23758:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   2375c:	d315      	bcc.n	2378a <isr+0xb6>
		LOG_ERR("Buffer overflow, dropping '%c'\n", character);
   2375e:	2145      	movs	r1, #69	; 0x45
   23760:	4823      	ldr	r0, [pc, #140]	; (237f0 <isr+0x11c>)
   23762:	f00f fed8 	bl	33516 <printk>
		return;
   23766:	e7c4      	b.n	236f2 <isr+0x1e>
			if (term_mode == MODE_LF) {
   23768:	481f      	ldr	r0, [pc, #124]	; (237e8 <isr+0x114>)
   2376a:	7800      	ldrb	r0, [r0, #0]
   2376c:	2802      	cmp	r0, #2
   2376e:	d017      	beq.n	237a0 <isr+0xcc>
			if (term_mode == MODE_CR_LF &&
   23770:	2803      	cmp	r0, #3
   23772:	d1ed      	bne.n	23750 <isr+0x7c>
   23774:	f8d5 c000 	ldr.w	ip, [r5]
   23778:	f1bc 0f00 	cmp.w	ip, #0
   2377c:	d0e8      	beq.n	23750 <isr+0x7c>
			    at_buf[at_cmd_len - 1] == '\r') {
   2377e:	481d      	ldr	r0, [pc, #116]	; (237f4 <isr+0x120>)
   23780:	4460      	add	r0, ip
			    at_cmd_len > 0 &&
   23782:	f810 0c01 	ldrb.w	r0, [r0, #-1]
   23786:	280d      	cmp	r0, #13
   23788:	e7e1      	b.n	2374e <isr+0x7a>
	at_buf[at_cmd_len] = character;
   2378a:	f8df e068 	ldr.w	lr, [pc, #104]	; 237f4 <isr+0x120>
	if (character == '"') {
   2378e:	2a22      	cmp	r2, #34	; 0x22
	at_buf[at_cmd_len] = character;
   23790:	f80e 200c 	strb.w	r2, [lr, ip]
	at_cmd_len++;
   23794:	6028      	str	r0, [r5, #0]
	if (character == '"') {
   23796:	d1ac      	bne.n	236f2 <isr+0x1e>
	if (!inside_quotes) {
   23798:	f083 0301 	eor.w	r3, r3, #1
		inside_quotes = !inside_quotes;
   2379c:	700b      	strb	r3, [r1, #0]
   2379e:	e7a8      	b.n	236f2 <isr+0x1e>
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   237a0:	2300      	movs	r3, #0
   237a2:	4a14      	ldr	r2, [pc, #80]	; (237f4 <isr+0x120>)
   237a4:	6828      	ldr	r0, [r5, #0]
	inside_quotes = false;
   237a6:	700b      	strb	r3, [r1, #0]
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   237a8:	5413      	strb	r3, [r2, r0]
	at_cmd_len = 0;
   237aa:	602b      	str	r3, [r5, #0]
	if (at_buf[0]) {
   237ac:	7813      	ldrb	r3, [r2, #0]
   237ae:	2b00      	cmp	r3, #0
   237b0:	d09f      	beq.n	236f2 <isr+0x1e>
		uart_irq_rx_disable(uart_dev); /* Stop UART to protect at_buf */
   237b2:	4b11      	ldr	r3, [pc, #68]	; (237f8 <isr+0x124>)
   237b4:	6818      	ldr	r0, [r3, #0]
	if (api->irq_rx_disable) {
   237b6:	6843      	ldr	r3, [r0, #4]
   237b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   237ba:	b103      	cbz	r3, 237be <isr+0xea>
		api->irq_rx_disable(dev);
   237bc:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   237be:	e8d6 3fef 	ldaex	r3, [r6]
   237c2:	f043 0201 	orr.w	r2, r3, #1
   237c6:	e8c6 2fe1 	stlex	r1, r2, [r6]
   237ca:	2900      	cmp	r1, #0
   237cc:	d1f7      	bne.n	237be <isr+0xea>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   237ce:	07da      	lsls	r2, r3, #31
   237d0:	d48f      	bmi.n	236f2 <isr+0x1e>
		k_queue_append(&work_q->queue, work);
   237d2:	490a      	ldr	r1, [pc, #40]	; (237fc <isr+0x128>)
   237d4:	480a      	ldr	r0, [pc, #40]	; (23800 <isr+0x12c>)
   237d6:	f012 f825 	bl	35824 <k_queue_append>
   237da:	e78a      	b.n	236f2 <isr+0x1e>
   237dc:	200223d4 	.word	0x200223d4
   237e0:	20022304 	.word	0x20022304
   237e4:	20025215 	.word	0x20025215
   237e8:	20025216 	.word	0x20025216
   237ec:	00039465 	.word	0x00039465
   237f0:	00039496 	.word	0x00039496
   237f4:	20024215 	.word	0x20024215
   237f8:	200223d8 	.word	0x200223d8
   237fc:	200223cc 	.word	0x200223cc
   23800:	20022308 	.word	0x20022308

00023804 <at_host_init>:

	ARG_UNUSED(arg);

	/* Choosing the termination mode */
	if (mode < MODE_COUNT) {
		term_mode = mode;
   23804:	2202      	movs	r2, #2
{
   23806:	b5f0      	push	{r4, r5, r6, r7, lr}
		term_mode = mode;
   23808:	4b34      	ldr	r3, [pc, #208]	; (238dc <at_host_init+0xd8>)
	default:
		LOG_ERR("Unknown UART instance %d", uart_id);
		return -EINVAL;
	}

	err = at_notif_register_handler(NULL, response_handler);
   2380a:	2000      	movs	r0, #0
   2380c:	4934      	ldr	r1, [pc, #208]	; (238e0 <at_host_init+0xdc>)
{
   2380e:	b085      	sub	sp, #20
		term_mode = mode;
   23810:	701a      	strb	r2, [r3, #0]
	err = at_notif_register_handler(NULL, response_handler);
   23812:	f7ff fe87 	bl	23524 <at_notif_register_handler>
	if (err != 0) {
   23816:	4605      	mov	r5, r0
   23818:	b138      	cbz	r0, 2382a <at_host_init+0x26>
		LOG_ERR("Can't register handler err=%d", err);
   2381a:	4602      	mov	r2, r0
   2381c:	2145      	movs	r1, #69	; 0x45
   2381e:	4831      	ldr	r0, [pc, #196]	; (238e4 <at_host_init+0xe0>)
   23820:	f00f fe79 	bl	33516 <printk>
		       K_THREAD_STACK_SIZEOF(at_host_stack_area),
		       CONFIG_AT_HOST_THREAD_PRIO);
	uart_irq_rx_enable(uart_dev);

	return err;
}
   23824:	4628      	mov	r0, r5
   23826:	b005      	add	sp, #20
   23828:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2382a:	482f      	ldr	r0, [pc, #188]	; (238e8 <at_host_init+0xe4>)
   2382c:	f00a feb4 	bl	2e598 <z_impl_device_get_binding>
	uart_dev = device_get_binding(uart_dev_name);
   23830:	4c2e      	ldr	r4, [pc, #184]	; (238ec <at_host_init+0xe8>)
   23832:	6020      	str	r0, [r4, #0]
	if (uart_dev == NULL) {
   23834:	b968      	cbnz	r0, 23852 <at_host_init+0x4e>
		LOG_ERR("Cannot bind %s\n", uart_dev_name);
   23836:	4a2c      	ldr	r2, [pc, #176]	; (238e8 <at_host_init+0xe4>)
   23838:	2145      	movs	r1, #69	; 0x45
   2383a:	482d      	ldr	r0, [pc, #180]	; (238f0 <at_host_init+0xec>)
   2383c:	f00f fe6b 	bl	33516 <printk>
		return -EINVAL;
   23840:	f06f 0215 	mvn.w	r2, #21
		LOG_ERR("UART could not be initialized: %d", err);
   23844:	2145      	movs	r1, #69	; 0x45
   23846:	482b      	ldr	r0, [pc, #172]	; (238f4 <at_host_init+0xf0>)
   23848:	f00f fe65 	bl	33516 <printk>
		return -EFAULT;
   2384c:	f06f 050d 	mvn.w	r5, #13
   23850:	e7e8      	b.n	23824 <at_host_init+0x20>
	return z_impl_k_uptime_get();
   23852:	f012 f8d0 	bl	359f6 <z_impl_k_uptime_get>
   23856:	4606      	mov	r6, r0
			LOG_INF("UART check failed: %d. "
   23858:	4f27      	ldr	r7, [pc, #156]	; (238f8 <at_host_init+0xf4>)
		err = uart_err_check(uart_dev);
   2385a:	6820      	ldr	r0, [r4, #0]
	if (api->err_check != NULL) {
   2385c:	6843      	ldr	r3, [r0, #4]
   2385e:	689b      	ldr	r3, [r3, #8]
   23860:	b313      	cbz	r3, 238a8 <at_host_init+0xa4>
		return api->err_check(dev);
   23862:	4798      	blx	r3
		if (err) {
   23864:	9001      	str	r0, [sp, #4]
   23866:	b1f8      	cbz	r0, 238a8 <at_host_init+0xa4>
   23868:	f012 f8c5 	bl	359f6 <z_impl_k_uptime_get>
			if (k_uptime_get_32() - start_time >
   2386c:	1b80      	subs	r0, r0, r6
   2386e:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   23872:	9a01      	ldr	r2, [sp, #4]
   23874:	d906      	bls.n	23884 <at_host_init+0x80>
				LOG_ERR("UART check failed: %d. "
   23876:	2145      	movs	r1, #69	; 0x45
   23878:	4820      	ldr	r0, [pc, #128]	; (238fc <at_host_init+0xf8>)
   2387a:	f00f fe4c 	bl	33516 <printk>
				return -EIO;
   2387e:	f06f 0204 	mvn.w	r2, #4
   23882:	e7df      	b.n	23844 <at_host_init+0x40>
			LOG_INF("UART check failed: %d. "
   23884:	2149      	movs	r1, #73	; 0x49
   23886:	4638      	mov	r0, r7
   23888:	f00f fe45 	bl	33516 <printk>
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
   2388c:	6820      	ldr	r0, [r4, #0]
	if (api->fifo_read) {
   2388e:	6843      	ldr	r3, [r0, #4]
   23890:	699b      	ldr	r3, [r3, #24]
   23892:	b12b      	cbz	r3, 238a0 <at_host_init+0x9c>
		return api->fifo_read(dev, rx_data, size);
   23894:	2201      	movs	r2, #1
   23896:	f10d 010f 	add.w	r1, sp, #15
   2389a:	4798      	blx	r3
   2389c:	2800      	cmp	r0, #0
   2389e:	d1f5      	bne.n	2388c <at_host_init+0x88>
	return z_impl_k_sleep(ms);
   238a0:	200a      	movs	r0, #10
   238a2:	f00c ff2f 	bl	30704 <z_impl_k_sleep>
	} while (err);
   238a6:	e7d8      	b.n	2385a <at_host_init+0x56>
	uart_irq_callback_set(uart_dev, isr);
   238a8:	6822      	ldr	r2, [r4, #0]
static inline void uart_irq_callback_user_data_set(
					struct device *dev,
					uart_irq_callback_user_data_t cb,
					void *user_data)
{
	const struct uart_driver_api *api =
   238aa:	6853      	ldr	r3, [r2, #4]
		(const struct uart_driver_api *)dev->driver_api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   238ac:	b123      	cbz	r3, 238b8 <at_host_init+0xb4>
   238ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   238b0:	b113      	cbz	r3, 238b8 <at_host_init+0xb4>
		api->irq_callback_set(dev, cb, user_data);
   238b2:	4610      	mov	r0, r2
   238b4:	4912      	ldr	r1, [pc, #72]	; (23900 <at_host_init+0xfc>)
   238b6:	4798      	blx	r3
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   238b8:	2200      	movs	r2, #0
   238ba:	4b12      	ldr	r3, [pc, #72]	; (23904 <at_host_init+0x100>)
   238bc:	4912      	ldr	r1, [pc, #72]	; (23908 <at_host_init+0x104>)
   238be:	601a      	str	r2, [r3, #0]
   238c0:	e9c3 1201 	strd	r1, r2, [r3, #4]
	k_work_q_start(&at_host_work_q, at_host_stack_area,
   238c4:	4811      	ldr	r0, [pc, #68]	; (2390c <at_host_init+0x108>)
   238c6:	230a      	movs	r3, #10
   238c8:	f44f 7200 	mov.w	r2, #512	; 0x200
   238cc:	4910      	ldr	r1, [pc, #64]	; (23910 <at_host_init+0x10c>)
   238ce:	f00d fa3b 	bl	30d48 <k_work_q_start>
	uart_irq_rx_enable(uart_dev);
   238d2:	6820      	ldr	r0, [r4, #0]
   238d4:	f011 fdb7 	bl	35446 <z_impl_uart_irq_rx_enable>
	return err;
   238d8:	e7a4      	b.n	23824 <at_host_init+0x20>
   238da:	bf00      	nop
   238dc:	20025216 	.word	0x20025216
   238e0:	00035451 	.word	0x00035451
   238e4:	000394bb 	.word	0x000394bb
   238e8:	00038198 	.word	0x00038198
   238ec:	200223d8 	.word	0x200223d8
   238f0:	000394de 	.word	0x000394de
   238f4:	00039568 	.word	0x00039568
   238f8:	0003952e 	.word	0x0003952e
   238fc:	000394f3 	.word	0x000394f3
   23900:	000236d5 	.word	0x000236d5
   23904:	200223cc 	.word	0x200223cc
   23908:	0002363d 	.word	0x0002363d
   2390c:	20022308 	.word	0x20022308
   23910:	200260c0 	.word	0x200260c0

00023914 <is_valid_notification_char>:
 * @retval true  If character is valid
 * @retval false If character is not valid
 */
static inline bool is_valid_notification_char(char chr)
{
	chr = toupper(chr);
   23914:	4b06      	ldr	r3, [pc, #24]	; (23930 <is_valid_notification_char+0x1c>)
   23916:	5cc3      	ldrb	r3, [r0, r3]
   23918:	f003 0303 	and.w	r3, r3, #3
   2391c:	2b02      	cmp	r3, #2
   2391e:	bf08      	it	eq
   23920:	3820      	subeq	r0, #32

	if ((chr >= 'A') && (chr <= 'Z')) {
   23922:	3841      	subs	r0, #65	; 0x41
   23924:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
   23926:	2819      	cmp	r0, #25
   23928:	bf8c      	ite	hi
   2392a:	2000      	movhi	r0, #0
   2392c:	2001      	movls	r0, #1
   2392e:	4770      	bx	lr
   23930:	0003b3ad 	.word	0x0003b3ad

00023934 <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   23934:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   23938:	6805      	ldr	r5, [r0, #0]
{
   2393a:	b0a3      	sub	sp, #140	; 0x8c
	const char *tmpstr = *str;
   2393c:	9500      	str	r5, [sp, #0]
 * @retval true  If character is 0
 * @retval false If character is not 0
 */
static inline bool is_terminated(char chr)
{
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2393e:	782b      	ldrb	r3, [r5, #0]
{
   23940:	4680      	mov	r8, r0
   23942:	460f      	mov	r7, r1
   23944:	4616      	mov	r6, r2
   23946:	2b00      	cmp	r3, #0
   23948:	f000 80bd 	beq.w	23ac6 <at_parse_process_element+0x192>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   2394c:	4b5f      	ldr	r3, [pc, #380]	; (23acc <at_parse_process_element+0x198>)
   2394e:	781c      	ldrb	r4, [r3, #0]
   23950:	2c05      	cmp	r4, #5
   23952:	d110      	bne.n	23976 <at_parse_process_element+0x42>
		const char *start_ptr = tmpstr++;
   23954:	1c6b      	adds	r3, r5, #1
   23956:	9300      	str	r3, [sp, #0]

		while (is_valid_notification_char(*tmpstr)) {
   23958:	9a00      	ldr	r2, [sp, #0]
   2395a:	7810      	ldrb	r0, [r2, #0]
   2395c:	f7ff ffda 	bl	23914 <is_valid_notification_char>
   23960:	b930      	cbnz	r0, 23970 <at_parse_process_element+0x3c>
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   23962:	1b53      	subs	r3, r2, r5

		while (isxdigit((int)*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   23964:	462a      	mov	r2, r5
   23966:	4639      	mov	r1, r7
   23968:	4630      	mov	r0, r6
   2396a:	f011 fdea 	bl	35542 <at_params_string_put>
   2396e:	e01b      	b.n	239a8 <at_parse_process_element+0x74>
			tmpstr++;
   23970:	3201      	adds	r2, #1
   23972:	9200      	str	r2, [sp, #0]
   23974:	e7f0      	b.n	23958 <at_parse_process_element+0x24>
	} else if (state == COMMAND) {
   23976:	2c06      	cmp	r4, #6
   23978:	d124      	bne.n	239c4 <at_parse_process_element+0x90>
		skip_command_prefix(&tmpstr);
   2397a:	4668      	mov	r0, sp
   2397c:	f011 fd74 	bl	35468 <skip_command_prefix>
		while (is_valid_notification_char(*tmpstr)) {
   23980:	9a00      	ldr	r2, [sp, #0]
   23982:	7810      	ldrb	r0, [r2, #0]
   23984:	f7ff ffc6 	bl	23914 <is_valid_notification_char>
   23988:	b9a8      	cbnz	r0, 239b6 <at_parse_process_element+0x82>
		at_params_string_put(list, index, start_ptr,
   2398a:	1b53      	subs	r3, r2, r5
   2398c:	4639      	mov	r1, r7
   2398e:	462a      	mov	r2, r5
   23990:	4630      	mov	r0, r6
   23992:	f011 fdd6 	bl	35542 <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   23996:	9b00      	ldr	r3, [sp, #0]
   23998:	781a      	ldrb	r2, [r3, #0]
   2399a:	2a3d      	cmp	r2, #61	; 0x3d
   2399c:	d10e      	bne.n	239bc <at_parse_process_element+0x88>
   2399e:	785a      	ldrb	r2, [r3, #1]
   239a0:	2a3f      	cmp	r2, #63	; 0x3f
   239a2:	d101      	bne.n	239a8 <at_parse_process_element+0x74>
			tmpstr += 2;
   239a4:	3302      	adds	r3, #2
			tmpstr++;
   239a6:	9300      	str	r3, [sp, #0]
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   239a8:	2000      	movs	r0, #0
	*str = tmpstr;
   239aa:	9b00      	ldr	r3, [sp, #0]
   239ac:	f8c8 3000 	str.w	r3, [r8]
}
   239b0:	b023      	add	sp, #140	; 0x8c
   239b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			tmpstr++;
   239b6:	3201      	adds	r2, #1
   239b8:	9200      	str	r2, [sp, #0]
   239ba:	e7e1      	b.n	23980 <at_parse_process_element+0x4c>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   239bc:	2a3f      	cmp	r2, #63	; 0x3f
   239be:	d1f3      	bne.n	239a8 <at_parse_process_element+0x74>
			tmpstr++;
   239c0:	3301      	adds	r3, #1
   239c2:	e7f0      	b.n	239a6 <at_parse_process_element+0x72>
	} else if (state == OPTIONAL) {
   239c4:	2c07      	cmp	r4, #7
   239c6:	d103      	bne.n	239d0 <at_parse_process_element+0x9c>
		at_params_empty_put(list, index);
   239c8:	4610      	mov	r0, r2
   239ca:	f011 fd91 	bl	354f0 <at_params_empty_put>
   239ce:	e7eb      	b.n	239a8 <at_parse_process_element+0x74>
	} else if (state == STRING) {
   239d0:	2c02      	cmp	r4, #2
   239d2:	d112      	bne.n	239fa <at_parse_process_element+0xc6>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr) &&
   239d4:	9a00      	ldr	r2, [sp, #0]
   239d6:	7810      	ldrb	r0, [r2, #0]
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
   239d8:	2822      	cmp	r0, #34	; 0x22
   239da:	d003      	beq.n	239e4 <at_parse_process_element+0xb0>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   239dc:	b110      	cbz	r0, 239e4 <at_parse_process_element+0xb0>
		       !is_lfcr(*tmpstr)) {
   239de:	f011 fd3a 	bl	35456 <is_lfcr>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr) &&
   239e2:	b138      	cbz	r0, 239f4 <at_parse_process_element+0xc0>
		at_params_string_put(list, index, start_ptr,
   239e4:	1b53      	subs	r3, r2, r5
   239e6:	4639      	mov	r1, r7
   239e8:	462a      	mov	r2, r5
   239ea:	4630      	mov	r0, r6
   239ec:	f011 fda9 	bl	35542 <at_params_string_put>
		tmpstr++;
   239f0:	9b00      	ldr	r3, [sp, #0]
   239f2:	e7e5      	b.n	239c0 <at_parse_process_element+0x8c>
			tmpstr++;
   239f4:	3201      	adds	r2, #1
   239f6:	9200      	str	r2, [sp, #0]
   239f8:	e7ec      	b.n	239d4 <at_parse_process_element+0xa0>
	} else if (state == ARRAY) {
   239fa:	2c01      	cmp	r4, #1
   239fc:	d13c      	bne.n	23a78 <at_parse_process_element+0x144>
		tmparray[i++] = (u32_t)strtoul(tmpstr, &next, 10);
   239fe:	4628      	mov	r0, r5
   23a00:	220a      	movs	r2, #10
   23a02:	a901      	add	r1, sp, #4
   23a04:	f00e fcea 	bl	323dc <strtoul>
		tmpstr = next;
   23a08:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   23a0a:	4d31      	ldr	r5, [pc, #196]	; (23ad0 <at_parse_process_element+0x19c>)
		tmparray[i++] = (u32_t)strtoul(tmpstr, &next, 10);
   23a0c:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   23a0e:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   23a10:	9800      	ldr	r0, [sp, #0]
   23a12:	7803      	ldrb	r3, [r0, #0]
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
   23a14:	2b29      	cmp	r3, #41	; 0x29
   23a16:	d028      	beq.n	23a6a <at_parse_process_element+0x136>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   23a18:	b33b      	cbz	r3, 23a6a <at_parse_process_element+0x136>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   23a1a:	3b2c      	subs	r3, #44	; 0x2c
   23a1c:	b2db      	uxtb	r3, r3
   23a1e:	3001      	adds	r0, #1
   23a20:	2b11      	cmp	r3, #17
				tmparray[i++] =
   23a22:	9000      	str	r0, [sp, #0]
   23a24:	d803      	bhi.n	23a2e <at_parse_process_element+0xfa>
   23a26:	fa25 f303 	lsr.w	r3, r5, r3
   23a2a:	07db      	lsls	r3, r3, #31
   23a2c:	d408      	bmi.n	23a40 <at_parse_process_element+0x10c>
				tmpstr++;
   23a2e:	46a1      	mov	r9, r4
   23a30:	e004      	b.n	23a3c <at_parse_process_element+0x108>
					tmpstr = next;
   23a32:	9b01      	ldr	r3, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   23a34:	f1b9 0f20 	cmp.w	r9, #32
					tmpstr = next;
   23a38:	9300      	str	r3, [sp, #0]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   23a3a:	d015      	beq.n	23a68 <at_parse_process_element+0x134>
				tmpstr++;
   23a3c:	464c      	mov	r4, r9
   23a3e:	e7e7      	b.n	23a10 <at_parse_process_element+0xdc>
					(u32_t)strtoul(++tmpstr, &next, 10);
   23a40:	220a      	movs	r2, #10
   23a42:	a901      	add	r1, sp, #4
   23a44:	f00e fcca 	bl	323dc <strtoul>
				tmparray[i++] =
   23a48:	ab22      	add	r3, sp, #136	; 0x88
   23a4a:	f104 0901 	add.w	r9, r4, #1
   23a4e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   23a52:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   23a56:	9800      	ldr	r0, [sp, #0]
   23a58:	f7f9 fb4a 	bl	1d0f0 <strlen>
   23a5c:	4604      	mov	r4, r0
   23a5e:	9801      	ldr	r0, [sp, #4]
   23a60:	f7f9 fb46 	bl	1d0f0 <strlen>
   23a64:	4284      	cmp	r4, r0
   23a66:	d1e4      	bne.n	23a32 <at_parse_process_element+0xfe>
   23a68:	464c      	mov	r4, r9
		at_params_array_put(list, index, tmparray, i * sizeof(u32_t));
   23a6a:	4639      	mov	r1, r7
   23a6c:	4630      	mov	r0, r6
   23a6e:	00a3      	lsls	r3, r4, #2
   23a70:	aa02      	add	r2, sp, #8
   23a72:	f011 fd8c 	bl	3558e <at_params_array_put>
   23a76:	e7bb      	b.n	239f0 <at_parse_process_element+0xbc>
	} else if (state == NUMBER) {
   23a78:	2c03      	cmp	r4, #3
   23a7a:	d115      	bne.n	23aa8 <at_parse_process_element+0x174>
		int value = (u32_t)strtoul(tmpstr, &next, 10);
   23a7c:	220a      	movs	r2, #10
   23a7e:	4628      	mov	r0, r5
   23a80:	a902      	add	r1, sp, #8
   23a82:	f00e fcab 	bl	323dc <strtoul>
		tmpstr = next;
   23a86:	9b02      	ldr	r3, [sp, #8]
		if (value <= USHRT_MAX) {
   23a88:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
		int value = (u32_t)strtoul(tmpstr, &next, 10);
   23a8c:	4602      	mov	r2, r0
		tmpstr = next;
   23a8e:	9300      	str	r3, [sp, #0]
		if (value <= USHRT_MAX) {
   23a90:	da05      	bge.n	23a9e <at_parse_process_element+0x16a>
			at_params_short_put(list, index, (u16_t)value);
   23a92:	b282      	uxth	r2, r0
   23a94:	4639      	mov	r1, r7
   23a96:	4630      	mov	r0, r6
   23a98:	f011 fd15 	bl	354c6 <at_params_short_put>
   23a9c:	e784      	b.n	239a8 <at_parse_process_element+0x74>
			at_params_int_put(list, index, value);
   23a9e:	4639      	mov	r1, r7
   23aa0:	4630      	mov	r0, r6
   23aa2:	f011 fd39 	bl	35518 <at_params_int_put>
   23aa6:	e77f      	b.n	239a8 <at_parse_process_element+0x74>
	} else if (state == SMS_PDU) {
   23aa8:	2c04      	cmp	r4, #4
   23aaa:	f47f af7d 	bne.w	239a8 <at_parse_process_element+0x74>
		while (isxdigit((int)*tmpstr)) {
   23aae:	4909      	ldr	r1, [pc, #36]	; (23ad4 <at_parse_process_element+0x1a0>)
   23ab0:	9b00      	ldr	r3, [sp, #0]
   23ab2:	781a      	ldrb	r2, [r3, #0]
   23ab4:	5c52      	ldrb	r2, [r2, r1]
   23ab6:	f012 0f44 	tst.w	r2, #68	; 0x44
   23aba:	d101      	bne.n	23ac0 <at_parse_process_element+0x18c>
		at_params_string_put(list, index, start_ptr,
   23abc:	1b5b      	subs	r3, r3, r5
   23abe:	e751      	b.n	23964 <at_parse_process_element+0x30>
			tmpstr++;
   23ac0:	3301      	adds	r3, #1
   23ac2:	9300      	str	r3, [sp, #0]
   23ac4:	e7f4      	b.n	23ab0 <at_parse_process_element+0x17c>
		return -1;
   23ac6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23aca:	e771      	b.n	239b0 <at_parse_process_element+0x7c>
   23acc:	20025217 	.word	0x20025217
   23ad0:	00024001 	.word	0x00024001
   23ad4:	0003b3ad 	.word	0x0003b3ad

00023ad8 <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
   23ad8:	b510      	push	{r4, lr}
   23ada:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
   23adc:	f7f9 fb08 	bl	1d0f0 <strlen>
   23ae0:	2801      	cmp	r0, #1
   23ae2:	d922      	bls.n	23b2a <is_command+0x52>
		return false;
	}

	if ((toupper(str[0]) != 'A') || (toupper(str[1]) != 'T')) {
   23ae4:	7821      	ldrb	r1, [r4, #0]
   23ae6:	4b13      	ldr	r3, [pc, #76]	; (23b34 <is_command+0x5c>)
   23ae8:	5cca      	ldrb	r2, [r1, r3]
   23aea:	f002 0203 	and.w	r2, r2, #3
   23aee:	2a02      	cmp	r2, #2
   23af0:	bf08      	it	eq
   23af2:	3920      	subeq	r1, #32
   23af4:	2941      	cmp	r1, #65	; 0x41
   23af6:	461a      	mov	r2, r3
   23af8:	d117      	bne.n	23b2a <is_command+0x52>
   23afa:	7863      	ldrb	r3, [r4, #1]
   23afc:	5cd2      	ldrb	r2, [r2, r3]
   23afe:	f002 0203 	and.w	r2, r2, #3
   23b02:	2a02      	cmp	r2, #2
   23b04:	bf08      	it	eq
   23b06:	3b20      	subeq	r3, #32
   23b08:	2b54      	cmp	r3, #84	; 0x54
   23b0a:	d10e      	bne.n	23b2a <is_command+0x52>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   23b0c:	78a2      	ldrb	r2, [r4, #2]
   23b0e:	2a25      	cmp	r2, #37	; 0x25
   23b10:	d00d      	beq.n	23b2e <is_command+0x56>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
   23b12:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
   23b16:	2b23      	cmp	r3, #35	; 0x23
   23b18:	d009      	beq.n	23b2e <is_command+0x56>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
   23b1a:	4610      	mov	r0, r2
   23b1c:	f011 fc9b 	bl	35456 <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
   23b20:	b910      	cbnz	r0, 23b28 <is_command+0x50>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   23b22:	fab2 f082 	clz	r0, r2
   23b26:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   23b28:	bd10      	pop	{r4, pc}
	return false;
   23b2a:	2000      	movs	r0, #0
   23b2c:	e7fc      	b.n	23b28 <is_command+0x50>
		return true;
   23b2e:	2001      	movs	r0, #1
   23b30:	e7fa      	b.n	23b28 <is_command+0x50>
   23b32:	bf00      	nop
   23b34:	0003b3ad 	.word	0x0003b3ad

00023b38 <at_parse_detect_type>:
{
   23b38:	b570      	push	{r4, r5, r6, lr}
	const char *tmpstr = *str;
   23b3a:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   23b3c:	2900      	cmp	r1, #0
{
   23b3e:	4605      	mov	r5, r0
   23b40:	7822      	ldrb	r2, [r4, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   23b42:	d141      	bne.n	23bc8 <at_parse_detect_type+0x90>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   23b44:	2a2b      	cmp	r2, #43	; 0x2b
   23b46:	4e29      	ldr	r6, [pc, #164]	; (23bec <at_parse_detect_type+0xb4>)
   23b48:	d001      	beq.n	23b4e <at_parse_detect_type+0x16>
   23b4a:	2a25      	cmp	r2, #37	; 0x25
   23b4c:	d104      	bne.n	23b58 <at_parse_detect_type+0x20>
	state = new_state;
   23b4e:	2305      	movs	r3, #5
   23b50:	7033      	strb	r3, [r6, #0]
	return 0;
   23b52:	2000      	movs	r0, #0
	*str = tmpstr;
   23b54:	602c      	str	r4, [r5, #0]
}
   23b56:	bd70      	pop	{r4, r5, r6, pc}
	} else if ((index == 0) && is_command(tmpstr)) {
   23b58:	4620      	mov	r0, r4
   23b5a:	f7ff ffbd 	bl	23ad8 <is_command>
   23b5e:	b388      	cbz	r0, 23bc4 <at_parse_detect_type+0x8c>
	state = new_state;
   23b60:	2306      	movs	r3, #6
   23b62:	e7f5      	b.n	23b50 <at_parse_detect_type+0x18>
	if (chr == '"') {
   23b64:	2a22      	cmp	r2, #34	; 0x22
   23b66:	d006      	beq.n	23b76 <at_parse_detect_type+0x3e>
	if (chr == '(') {
   23b68:	2a28      	cmp	r2, #40	; 0x28
   23b6a:	d109      	bne.n	23b80 <at_parse_detect_type+0x48>
   23b6c:	2201      	movs	r2, #1
   23b6e:	4b1f      	ldr	r3, [pc, #124]	; (23bec <at_parse_detect_type+0xb4>)
		tmpstr++;
   23b70:	4414      	add	r4, r2
	state = new_state;
   23b72:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   23b74:	e7ed      	b.n	23b52 <at_parse_detect_type+0x1a>
	state = new_state;
   23b76:	2202      	movs	r2, #2
   23b78:	4b1c      	ldr	r3, [pc, #112]	; (23bec <at_parse_detect_type+0xb4>)
		tmpstr++;
   23b7a:	3401      	adds	r4, #1
	state = new_state;
   23b7c:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   23b7e:	e7e8      	b.n	23b52 <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   23b80:	4610      	mov	r0, r2
   23b82:	f011 fc68 	bl	35456 <is_lfcr>
   23b86:	b170      	cbz	r0, 23ba6 <at_parse_detect_type+0x6e>
   23b88:	4918      	ldr	r1, [pc, #96]	; (23bec <at_parse_detect_type+0xb4>)
   23b8a:	7808      	ldrb	r0, [r1, #0]
   23b8c:	2803      	cmp	r0, #3
   23b8e:	d108      	bne.n	23ba2 <at_parse_detect_type+0x6a>
		while (is_lfcr(*tmpstr)) {
   23b90:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   23b94:	f011 fc5f 	bl	35456 <is_lfcr>
   23b98:	2800      	cmp	r0, #0
   23b9a:	d1f9      	bne.n	23b90 <at_parse_detect_type+0x58>
	state = new_state;
   23b9c:	2304      	movs	r3, #4
   23b9e:	700b      	strb	r3, [r1, #0]
}
   23ba0:	e7d7      	b.n	23b52 <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   23ba2:	2807      	cmp	r0, #7
   23ba4:	d0d5      	beq.n	23b52 <at_parse_detect_type+0x1a>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   23ba6:	3a2c      	subs	r2, #44	; 0x2c
   23ba8:	b2d2      	uxtb	r2, r2
   23baa:	2a11      	cmp	r2, #17
   23bac:	d807      	bhi.n	23bbe <at_parse_detect_type+0x86>
   23bae:	4b10      	ldr	r3, [pc, #64]	; (23bf0 <at_parse_detect_type+0xb8>)
   23bb0:	fa23 f202 	lsr.w	r2, r3, r2
   23bb4:	07d3      	lsls	r3, r2, #31
   23bb6:	d502      	bpl.n	23bbe <at_parse_detect_type+0x86>
	state = new_state;
   23bb8:	2207      	movs	r2, #7
   23bba:	4b0c      	ldr	r3, [pc, #48]	; (23bec <at_parse_detect_type+0xb4>)
   23bbc:	e013      	b.n	23be6 <at_parse_detect_type+0xae>
		return -1;
   23bbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23bc2:	e7c8      	b.n	23b56 <at_parse_detect_type+0x1e>
	state = new_state;
   23bc4:	2302      	movs	r3, #2
   23bc6:	e7c3      	b.n	23b50 <at_parse_detect_type+0x18>
	} else if ((index > 0) && is_notification(*tmpstr)) {
   23bc8:	dd03      	ble.n	23bd2 <at_parse_detect_type+0x9a>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   23bca:	2a2b      	cmp	r2, #43	; 0x2b
   23bcc:	d0f7      	beq.n	23bbe <at_parse_detect_type+0x86>
   23bce:	2a25      	cmp	r2, #37	; 0x25
   23bd0:	d0f5      	beq.n	23bbe <at_parse_detect_type+0x86>
	if (isdigit(chr) || (chr == '-') || (chr == '+')) {
   23bd2:	4b08      	ldr	r3, [pc, #32]	; (23bf4 <at_parse_detect_type+0xbc>)
   23bd4:	5cd3      	ldrb	r3, [r2, r3]
   23bd6:	0759      	lsls	r1, r3, #29
   23bd8:	d403      	bmi.n	23be2 <at_parse_detect_type+0xaa>
   23bda:	2a2d      	cmp	r2, #45	; 0x2d
   23bdc:	d001      	beq.n	23be2 <at_parse_detect_type+0xaa>
   23bde:	2a2b      	cmp	r2, #43	; 0x2b
   23be0:	d1c0      	bne.n	23b64 <at_parse_detect_type+0x2c>
	state = new_state;
   23be2:	2203      	movs	r2, #3
   23be4:	4b01      	ldr	r3, [pc, #4]	; (23bec <at_parse_detect_type+0xb4>)
   23be6:	701a      	strb	r2, [r3, #0]
}
   23be8:	e7b3      	b.n	23b52 <at_parse_detect_type+0x1a>
   23bea:	bf00      	nop
   23bec:	20025217 	.word	0x20025217
   23bf0:	00024001 	.word	0x00024001
   23bf4:	0003b3ad 	.word	0x0003b3ad

00023bf8 <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   23bf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23bfc:	4688      	mov	r8, r1
   23bfe:	4616      	mov	r6, r2
   23c00:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   23c02:	4604      	mov	r4, r0
   23c04:	2800      	cmp	r0, #0
   23c06:	d07e      	beq.n	23d06 <at_parser_max_params_from_str+0x10e>
   23c08:	2a00      	cmp	r2, #0
   23c0a:	d07c      	beq.n	23d06 <at_parser_max_params_from_str+0x10e>
   23c0c:	6853      	ldr	r3, [r2, #4]
   23c0e:	2b00      	cmp	r3, #0
   23c10:	d079      	beq.n	23d06 <at_parser_max_params_from_str+0x10e>
	state = IDLE;
   23c12:	2500      	movs	r5, #0
		return -EINVAL;
	}

	at_params_list_clear(list);
   23c14:	4610      	mov	r0, r2
   23c16:	f000 f8eb 	bl	23df0 <at_params_list_clear>
	const char *str = *at_params_str;
   23c1a:	9401      	str	r4, [sp, #4]
	int index = 0;
   23c1c:	462c      	mov	r4, r5

	max_params_count = MIN(max_params_count, list->param_count);
   23c1e:	6833      	ldr	r3, [r6, #0]
		if (isspace((int)*str)) {
   23c20:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 23d10 <at_parser_max_params_from_str+0x118>
	max_params_count = MIN(max_params_count, list->param_count);
   23c24:	429f      	cmp	r7, r3
   23c26:	bf28      	it	cs
   23c28:	461f      	movcs	r7, r3
	state = IDLE;
   23c2a:	4b38      	ldr	r3, [pc, #224]	; (23d0c <at_parser_max_params_from_str+0x114>)
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   23c2c:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 23d14 <at_parser_max_params_from_str+0x11c>
   23c30:	701d      	strb	r5, [r3, #0]
	while ((!is_terminated(*str)) && (index < max_params)) {
   23c32:	9b01      	ldr	r3, [sp, #4]
   23c34:	781a      	ldrb	r2, [r3, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   23c36:	2a00      	cmp	r2, #0
   23c38:	d04b      	beq.n	23cd2 <at_parser_max_params_from_str+0xda>
   23c3a:	42a7      	cmp	r7, r4
   23c3c:	d949      	bls.n	23cd2 <at_parser_max_params_from_str+0xda>
		if (isspace((int)*str)) {
   23c3e:	f812 2009 	ldrb.w	r2, [r2, r9]
		if (at_parse_detect_type(&str, index) == -1) {
   23c42:	a801      	add	r0, sp, #4
		if (isspace((int)*str)) {
   23c44:	0711      	lsls	r1, r2, #28
			str++;
   23c46:	bf48      	it	mi
   23c48:	3301      	addmi	r3, #1
		if (at_parse_detect_type(&str, index) == -1) {
   23c4a:	4621      	mov	r1, r4
			str++;
   23c4c:	bf48      	it	mi
   23c4e:	9301      	strmi	r3, [sp, #4]
		if (at_parse_detect_type(&str, index) == -1) {
   23c50:	f7ff ff72 	bl	23b38 <at_parse_detect_type>
   23c54:	1c42      	adds	r2, r0, #1
   23c56:	d03c      	beq.n	23cd2 <at_parser_max_params_from_str+0xda>
		if (at_parse_process_element(&str, index, list) == -1) {
   23c58:	4632      	mov	r2, r6
   23c5a:	4621      	mov	r1, r4
   23c5c:	a801      	add	r0, sp, #4
   23c5e:	f7ff fe69 	bl	23934 <at_parse_process_element>
   23c62:	1c43      	adds	r3, r0, #1
   23c64:	d035      	beq.n	23cd2 <at_parser_max_params_from_str+0xda>
		if (is_separator(*str)) {
   23c66:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   23c68:	781a      	ldrb	r2, [r3, #0]
   23c6a:	3a2c      	subs	r2, #44	; 0x2c
   23c6c:	b2d2      	uxtb	r2, r2
   23c6e:	2a11      	cmp	r2, #17
   23c70:	d81a      	bhi.n	23ca8 <at_parser_max_params_from_str+0xb0>
   23c72:	fa2a f202 	lsr.w	r2, sl, r2
   23c76:	07d1      	lsls	r1, r2, #31
   23c78:	d516      	bpl.n	23ca8 <at_parser_max_params_from_str+0xb0>
			if (is_lfcr(*(str + 1))) {
   23c7a:	7858      	ldrb	r0, [r3, #1]
   23c7c:	f011 fbeb 	bl	35456 <is_lfcr>
   23c80:	b178      	cbz	r0, 23ca2 <at_parser_max_params_from_str+0xaa>
				index++;
   23c82:	3401      	adds	r4, #1
				if (index == max_params) {
   23c84:	42bc      	cmp	r4, r7
   23c86:	d039      	beq.n	23cfc <at_parser_max_params_from_str+0x104>
				if (at_parse_detect_type(&str, index) == -1) {
   23c88:	4621      	mov	r1, r4
   23c8a:	a801      	add	r0, sp, #4
   23c8c:	f7ff ff54 	bl	23b38 <at_parse_detect_type>
   23c90:	1c42      	adds	r2, r0, #1
   23c92:	d01e      	beq.n	23cd2 <at_parser_max_params_from_str+0xda>
				if (at_parse_process_element(&str, index,
   23c94:	4632      	mov	r2, r6
   23c96:	4621      	mov	r1, r4
   23c98:	a801      	add	r0, sp, #4
   23c9a:	f7ff fe4b 	bl	23934 <at_parse_process_element>
   23c9e:	1c43      	adds	r3, r0, #1
   23ca0:	d017      	beq.n	23cd2 <at_parser_max_params_from_str+0xda>
			str++;
   23ca2:	9b01      	ldr	r3, [sp, #4]
   23ca4:	3301      	adds	r3, #1
   23ca6:	9301      	str	r3, [sp, #4]
		if (is_lfcr(*str)) {
   23ca8:	9a01      	ldr	r2, [sp, #4]
   23caa:	7810      	ldrb	r0, [r2, #0]
   23cac:	f011 fbd3 	bl	35456 <is_lfcr>
   23cb0:	b1f8      	cbz	r0, 23cf2 <at_parser_max_params_from_str+0xfa>
   23cb2:	3201      	adds	r2, #1
			while (is_lfcr(str[++i])) {
   23cb4:	7811      	ldrb	r1, [r2, #0]
   23cb6:	4693      	mov	fp, r2
   23cb8:	4608      	mov	r0, r1
   23cba:	3201      	adds	r2, #1
   23cbc:	f011 fbcb 	bl	35456 <is_lfcr>
   23cc0:	2800      	cmp	r0, #0
   23cc2:	d1f7      	bne.n	23cb4 <at_parser_max_params_from_str+0xbc>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   23cc4:	b119      	cbz	r1, 23cce <at_parser_max_params_from_str+0xd6>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   23cc6:	292b      	cmp	r1, #43	; 0x2b
   23cc8:	d001      	beq.n	23cce <at_parser_max_params_from_str+0xd6>
   23cca:	2925      	cmp	r1, #37	; 0x25
   23ccc:	d111      	bne.n	23cf2 <at_parser_max_params_from_str+0xfa>
				str += i;
   23cce:	f8cd b004 	str.w	fp, [sp, #4]
	*at_params_str = str;
   23cd2:	9b01      	ldr	r3, [sp, #4]
	if (oversized) {
   23cd4:	b9a5      	cbnz	r5, 23d00 <at_parser_max_params_from_str+0x108>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   23cd6:	781a      	ldrb	r2, [r3, #0]
		return -EAGAIN;
   23cd8:	2a00      	cmp	r2, #0
   23cda:	bf0c      	ite	eq
   23cdc:	2000      	moveq	r0, #0
   23cde:	f06f 000a 	mvnne.w	r0, #10

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   23ce2:	f1b8 0f00 	cmp.w	r8, #0
   23ce6:	d001      	beq.n	23cec <at_parser_max_params_from_str+0xf4>
		*next_param_str = (char *)at_params_str;
   23ce8:	f8c8 3000 	str.w	r3, [r8]
	}

	return err;
}
   23cec:	b003      	add	sp, #12
   23cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		index++;
   23cf2:	3401      	adds	r4, #1
			oversized = true;
   23cf4:	42bc      	cmp	r4, r7
   23cf6:	bf08      	it	eq
   23cf8:	2501      	moveq	r5, #1
   23cfa:	e79a      	b.n	23c32 <at_parser_max_params_from_str+0x3a>
					oversized = true;
   23cfc:	4605      	mov	r5, r0
   23cfe:	e7e8      	b.n	23cd2 <at_parser_max_params_from_str+0xda>
		return -E2BIG;
   23d00:	f06f 0006 	mvn.w	r0, #6
   23d04:	e7ed      	b.n	23ce2 <at_parser_max_params_from_str+0xea>
		return -EINVAL;
   23d06:	f06f 0015 	mvn.w	r0, #21
   23d0a:	e7ef      	b.n	23cec <at_parser_max_params_from_str+0xf4>
   23d0c:	20025217 	.word	0x20025217
   23d10:	0003b3ad 	.word	0x0003b3ad
   23d14:	00024001 	.word	0x00024001

00023d18 <at_params_get>:
}

/* Internal function. Parameter cannot be null. */
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
   23d18:	b538      	push	{r3, r4, r5, lr}
   23d1a:	460c      	mov	r4, r1
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");
   23d1c:	4605      	mov	r5, r0
   23d1e:	b960      	cbnz	r0, 23d3a <at_params_get+0x22>
   23d20:	490a      	ldr	r1, [pc, #40]	; (23d4c <at_params_get+0x34>)
   23d22:	232b      	movs	r3, #43	; 0x2b
   23d24:	4a0a      	ldr	r2, [pc, #40]	; (23d50 <at_params_get+0x38>)
   23d26:	480b      	ldr	r0, [pc, #44]	; (23d54 <at_params_get+0x3c>)
   23d28:	f00f fbf5 	bl	33516 <printk>
   23d2c:	480a      	ldr	r0, [pc, #40]	; (23d58 <at_params_get+0x40>)
   23d2e:	f00f fbf2 	bl	33516 <printk>
   23d32:	212b      	movs	r1, #43	; 0x2b
   23d34:	4806      	ldr	r0, [pc, #24]	; (23d50 <at_params_get+0x38>)
   23d36:	f00f fc34 	bl	335a2 <assert_post_action>

	if (index >= list->param_count) {
   23d3a:	682b      	ldr	r3, [r5, #0]
   23d3c:	42a3      	cmp	r3, r4
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   23d3e:	bf85      	ittet	hi
   23d40:	210c      	movhi	r1, #12
   23d42:	6868      	ldrhi	r0, [r5, #4]
		return NULL;
   23d44:	2000      	movls	r0, #0
	return &param[index];
   23d46:	fb01 0004 	mlahi	r0, r1, r4, r0
}
   23d4a:	bd38      	pop	{r3, r4, r5, pc}
   23d4c:	000395c5 	.word	0x000395c5
   23d50:	00039597 	.word	0x00039597
   23d54:	00037a66 	.word	0x00037a66
   23d58:	000395d9 	.word	0x000395d9

00023d5c <at_param_size>:

/* Internal function. Parameter cannot be null. */
static size_t at_param_size(const struct at_param *param)
{
   23d5c:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   23d5e:	4604      	mov	r4, r0
   23d60:	b960      	cbnz	r0, 23d7c <at_param_size+0x20>
   23d62:	490e      	ldr	r1, [pc, #56]	; (23d9c <at_param_size+0x40>)
   23d64:	2339      	movs	r3, #57	; 0x39
   23d66:	4a0e      	ldr	r2, [pc, #56]	; (23da0 <at_param_size+0x44>)
   23d68:	480e      	ldr	r0, [pc, #56]	; (23da4 <at_param_size+0x48>)
   23d6a:	f00f fbd4 	bl	33516 <printk>
   23d6e:	480e      	ldr	r0, [pc, #56]	; (23da8 <at_param_size+0x4c>)
   23d70:	f00f fbd1 	bl	33516 <printk>
   23d74:	2139      	movs	r1, #57	; 0x39
   23d76:	480a      	ldr	r0, [pc, #40]	; (23da0 <at_param_size+0x44>)
   23d78:	f00f fc13 	bl	335a2 <assert_post_action>

	if (param->type == AT_PARAM_TYPE_NUM_SHORT) {
   23d7c:	7823      	ldrb	r3, [r4, #0]
   23d7e:	2b01      	cmp	r3, #1
   23d80:	d006      	beq.n	23d90 <at_param_size+0x34>
		return sizeof(u16_t);
	} else if (param->type == AT_PARAM_TYPE_NUM_INT) {
   23d82:	2b02      	cmp	r3, #2
   23d84:	d006      	beq.n	23d94 <at_param_size+0x38>
		return sizeof(u32_t);
	} else if ((param->type == AT_PARAM_TYPE_STRING) ||
   23d86:	3b03      	subs	r3, #3
   23d88:	2b01      	cmp	r3, #1
   23d8a:	d805      	bhi.n	23d98 <at_param_size+0x3c>
		   (param->type == AT_PARAM_TYPE_ARRAY)) {
		return param->size;
   23d8c:	6860      	ldr	r0, [r4, #4]
	}

	return 0;
}
   23d8e:	bd10      	pop	{r4, pc}
		return sizeof(u16_t);
   23d90:	2002      	movs	r0, #2
   23d92:	e7fc      	b.n	23d8e <at_param_size+0x32>
		return sizeof(u32_t);
   23d94:	2004      	movs	r0, #4
   23d96:	e7fa      	b.n	23d8e <at_param_size+0x32>
	return 0;
   23d98:	2000      	movs	r0, #0
   23d9a:	e7f8      	b.n	23d8e <at_param_size+0x32>
   23d9c:	000395fa 	.word	0x000395fa
   23da0:	00039597 	.word	0x00039597
   23da4:	00037a66 	.word	0x00037a66
   23da8:	0003960f 	.word	0x0003960f

00023dac <at_param_clear>:
{
   23dac:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   23dae:	4604      	mov	r4, r0
   23db0:	b960      	cbnz	r0, 23dcc <at_param_clear+0x20>
   23db2:	490b      	ldr	r1, [pc, #44]	; (23de0 <at_param_clear+0x34>)
   23db4:	231d      	movs	r3, #29
   23db6:	4a0b      	ldr	r2, [pc, #44]	; (23de4 <at_param_clear+0x38>)
   23db8:	480b      	ldr	r0, [pc, #44]	; (23de8 <at_param_clear+0x3c>)
   23dba:	f00f fbac 	bl	33516 <printk>
   23dbe:	480b      	ldr	r0, [pc, #44]	; (23dec <at_param_clear+0x40>)
   23dc0:	f00f fba9 	bl	33516 <printk>
   23dc4:	211d      	movs	r1, #29
   23dc6:	4807      	ldr	r0, [pc, #28]	; (23de4 <at_param_clear+0x38>)
   23dc8:	f00f fbeb 	bl	335a2 <assert_post_action>
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   23dcc:	7823      	ldrb	r3, [r4, #0]
   23dce:	3b03      	subs	r3, #3
   23dd0:	2b01      	cmp	r3, #1
   23dd2:	d802      	bhi.n	23dda <at_param_clear+0x2e>
		k_free(param->value.str_val);
   23dd4:	68a0      	ldr	r0, [r4, #8]
   23dd6:	f011 fced 	bl	357b4 <k_free>
	param->value.int_val = 0;
   23dda:	2300      	movs	r3, #0
   23ddc:	60a3      	str	r3, [r4, #8]
}
   23dde:	bd10      	pop	{r4, pc}
   23de0:	000395fa 	.word	0x000395fa
   23de4:	00039597 	.word	0x00039597
   23de8:	00037a66 	.word	0x00037a66
   23dec:	0003960f 	.word	0x0003960f

00023df0 <at_params_list_clear>:
	list->param_count = max_params_count;
	return 0;
}

void at_params_list_clear(struct at_param_list *list)
{
   23df0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (list == NULL || list->params == NULL) {
   23df4:	4604      	mov	r4, r0
   23df6:	b158      	cbz	r0, 23e10 <at_params_list_clear+0x20>
   23df8:	6843      	ldr	r3, [r0, #4]
   23dfa:	b14b      	cbz	r3, 23e10 <at_params_list_clear+0x20>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   23dfc:	2500      	movs	r5, #0
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   23dfe:	f8df b054 	ldr.w	fp, [pc, #84]	; 23e54 <at_params_list_clear+0x64>
   23e02:	f8df 9054 	ldr.w	r9, [pc, #84]	; 23e58 <at_params_list_clear+0x68>
   23e06:	f8df a054 	ldr.w	sl, [pc, #84]	; 23e5c <at_params_list_clear+0x6c>
	for (size_t i = 0; i < list->param_count; ++i) {
   23e0a:	6823      	ldr	r3, [r4, #0]
   23e0c:	429d      	cmp	r5, r3
   23e0e:	d301      	bcc.n	23e14 <at_params_list_clear+0x24>
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
		at_param_init(&params[i]);
	}
}
   23e10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		at_param_clear(&params[i]);
   23e14:	270c      	movs	r7, #12
   23e16:	436f      	muls	r7, r5
   23e18:	f8d4 8004 	ldr.w	r8, [r4, #4]
   23e1c:	eb08 0607 	add.w	r6, r8, r7
   23e20:	4630      	mov	r0, r6
   23e22:	f7ff ffc3 	bl	23dac <at_param_clear>
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   23e26:	b966      	cbnz	r6, 23e42 <at_params_list_clear+0x52>
   23e28:	4649      	mov	r1, r9
   23e2a:	2314      	movs	r3, #20
   23e2c:	465a      	mov	r2, fp
   23e2e:	4650      	mov	r0, sl
   23e30:	f00f fb71 	bl	33516 <printk>
   23e34:	4806      	ldr	r0, [pc, #24]	; (23e50 <at_params_list_clear+0x60>)
   23e36:	f00f fb6e 	bl	33516 <printk>
   23e3a:	2114      	movs	r1, #20
   23e3c:	4658      	mov	r0, fp
   23e3e:	f00f fbb0 	bl	335a2 <assert_post_action>
   23e42:	2300      	movs	r3, #0
	for (size_t i = 0; i < list->param_count; ++i) {
   23e44:	3501      	adds	r5, #1
   23e46:	f848 3007 	str.w	r3, [r8, r7]
   23e4a:	6073      	str	r3, [r6, #4]
   23e4c:	60b3      	str	r3, [r6, #8]
   23e4e:	e7dc      	b.n	23e0a <at_params_list_clear+0x1a>
   23e50:	0003960f 	.word	0x0003960f
   23e54:	00039597 	.word	0x00039597
   23e58:	000395fa 	.word	0x000395fa
   23e5c:	00037a66 	.word	0x00037a66

00023e60 <w_lte_lc_init>:
		k_sem_give(&link);
	}
}

static int w_lte_lc_init(void)
{
   23e60:	b508      	push	{r3, lr}
	if (at_cmd_write(nw_mode_preferred, NULL, 0, NULL) != 0) {
   23e62:	2300      	movs	r3, #0
   23e64:	4807      	ldr	r0, [pc, #28]	; (23e84 <w_lte_lc_init+0x24>)
   23e66:	461a      	mov	r2, r3
   23e68:	4619      	mov	r1, r3
   23e6a:	f7ff fa87 	bl	2337c <at_cmd_write>
   23e6e:	4603      	mov	r3, r0
   23e70:	b928      	cbnz	r0, 23e7e <w_lte_lc_init+0x1e>
#if defined(CONFIG_BSD_LIBRARY_TRACE_ENABLED)
	if (at_cmd_write(mdm_trace, NULL, 0, NULL) != 0) {
		return -EIO;
	}
#endif
	if (at_cmd_write(cereg_5_subscribe, NULL, 0, NULL) != 0) {
   23e72:	4602      	mov	r2, r0
   23e74:	4601      	mov	r1, r0
   23e76:	4804      	ldr	r0, [pc, #16]	; (23e88 <w_lte_lc_init+0x28>)
   23e78:	f7ff fa80 	bl	2337c <at_cmd_write>
   23e7c:	b108      	cbz	r0, 23e82 <w_lte_lc_init+0x22>
		return -EIO;
   23e7e:	f06f 0004 	mvn.w	r0, #4
	}
	LOG_INF("PDN Auth: %s", log_strdup(cgauth));
#endif

	return 0;
}
   23e82:	bd08      	pop	{r3, pc}
   23e84:	00039838 	.word	0x00039838
   23e88:	0003980c 	.word	0x0003980c

00023e8c <parse_nw_reg_status>:
static int parse_nw_reg_status(const char *at_response,
			       enum lte_lc_nw_reg_status *status,
			       size_t reg_status_index)
{
	int err, reg_status;
	struct at_param_list resp_list = {0};
   23e8c:	2300      	movs	r3, #0
{
   23e8e:	b5f0      	push	{r4, r5, r6, r7, lr}
   23e90:	b087      	sub	sp, #28
	struct at_param_list resp_list = {0};
   23e92:	e9cd 3304 	strd	r3, r3, [sp, #16]
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   23e96:	9302      	str	r3, [sp, #8]
   23e98:	f8ad 300c 	strh.w	r3, [sp, #12]
   23e9c:	f88d 300e 	strb.w	r3, [sp, #14]
	size_t response_prefix_len = sizeof(response_prefix);
   23ea0:	2307      	movs	r3, #7
{
   23ea2:	460d      	mov	r5, r1
   23ea4:	4617      	mov	r7, r2

	if ((at_response == NULL) || (status == NULL)) {
   23ea6:	4606      	mov	r6, r0
	size_t response_prefix_len = sizeof(response_prefix);
   23ea8:	9301      	str	r3, [sp, #4]
	if ((at_response == NULL) || (status == NULL)) {
   23eaa:	2800      	cmp	r0, #0
   23eac:	d04f      	beq.n	23f4e <parse_nw_reg_status+0xc2>
   23eae:	2900      	cmp	r1, #0
   23eb0:	d04d      	beq.n	23f4e <parse_nw_reg_status+0xc2>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   23eb2:	210a      	movs	r1, #10
   23eb4:	a804      	add	r0, sp, #16
   23eb6:	f011 fae5 	bl	35484 <at_params_list_init>
	if (err) {
   23eba:	4604      	mov	r4, r0
   23ebc:	b138      	cbz	r0, 23ece <parse_nw_reg_status+0x42>
		LOG_ERR("Could not init AT params list, error: %d", err);
   23ebe:	4602      	mov	r2, r0
   23ec0:	2145      	movs	r1, #69	; 0x45
   23ec2:	4824      	ldr	r0, [pc, #144]	; (23f54 <parse_nw_reg_status+0xc8>)
   23ec4:	f00f fb27 	bl	33516 <printk>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   23ec8:	4620      	mov	r0, r4
   23eca:	b007      	add	sp, #28
   23ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_parser_max_params_from_str(at_response,
   23ece:	4601      	mov	r1, r0
   23ed0:	230a      	movs	r3, #10
   23ed2:	4630      	mov	r0, r6
   23ed4:	aa04      	add	r2, sp, #16
   23ed6:	f7ff fe8f 	bl	23bf8 <at_parser_max_params_from_str>
	if (err) {
   23eda:	4604      	mov	r4, r0
   23edc:	b140      	cbz	r0, 23ef0 <parse_nw_reg_status+0x64>
		LOG_ERR("Could not parse AT+CEREG response, error: %d", err);
   23ede:	2145      	movs	r1, #69	; 0x45
   23ee0:	4602      	mov	r2, r0
   23ee2:	481d      	ldr	r0, [pc, #116]	; (23f58 <parse_nw_reg_status+0xcc>)
		LOG_ERR("Could not get response prefix, error: %d", err);
   23ee4:	f00f fb17 	bl	33516 <printk>
	at_params_list_free(&resp_list);
   23ee8:	a804      	add	r0, sp, #16
   23eea:	f011 fade 	bl	354aa <at_params_list_free>
	return err;
   23eee:	e7eb      	b.n	23ec8 <parse_nw_reg_status+0x3c>
	err = at_params_string_get(&resp_list,
   23ef0:	4601      	mov	r1, r0
   23ef2:	ab01      	add	r3, sp, #4
   23ef4:	aa02      	add	r2, sp, #8
   23ef6:	a804      	add	r0, sp, #16
   23ef8:	f011 fb86 	bl	35608 <at_params_string_get>
	if (err) {
   23efc:	4604      	mov	r4, r0
   23efe:	b118      	cbz	r0, 23f08 <parse_nw_reg_status+0x7c>
		LOG_ERR("Could not get response prefix, error: %d", err);
   23f00:	4602      	mov	r2, r0
   23f02:	2145      	movs	r1, #69	; 0x45
   23f04:	4815      	ldr	r0, [pc, #84]	; (23f5c <parse_nw_reg_status+0xd0>)
   23f06:	e7ed      	b.n	23ee4 <parse_nw_reg_status+0x58>
	if (!response_is_valid(response_prefix, response_prefix_len,
   23f08:	4a15      	ldr	r2, [pc, #84]	; (23f60 <parse_nw_reg_status+0xd4>)
   23f0a:	9901      	ldr	r1, [sp, #4]
   23f0c:	a802      	add	r0, sp, #8
   23f0e:	f011 fba2 	bl	35656 <response_is_valid>
   23f12:	2800      	cmp	r0, #0
   23f14:	d0e8      	beq.n	23ee8 <parse_nw_reg_status+0x5c>
	err = at_params_int_get(&resp_list, reg_status_index,
   23f16:	466a      	mov	r2, sp
   23f18:	4639      	mov	r1, r7
   23f1a:	a804      	add	r0, sp, #16
   23f1c:	f011 fb5d 	bl	355da <at_params_int_get>
	if (err) {
   23f20:	4604      	mov	r4, r0
   23f22:	b118      	cbz	r0, 23f2c <parse_nw_reg_status+0xa0>
		LOG_ERR("Could not get registration status, error: %d", err);
   23f24:	4602      	mov	r2, r0
   23f26:	2145      	movs	r1, #69	; 0x45
   23f28:	480e      	ldr	r0, [pc, #56]	; (23f64 <parse_nw_reg_status+0xd8>)
   23f2a:	e7db      	b.n	23ee4 <parse_nw_reg_status+0x58>
	switch (reg_status) {
   23f2c:	9a00      	ldr	r2, [sp, #0]
   23f2e:	2a08      	cmp	r2, #8
   23f30:	d00b      	beq.n	23f4a <parse_nw_reg_status+0xbe>
   23f32:	dc08      	bgt.n	23f46 <parse_nw_reg_status+0xba>
   23f34:	2a05      	cmp	r2, #5
   23f36:	d908      	bls.n	23f4a <parse_nw_reg_status+0xbe>
		LOG_ERR("Invalid network registration status: %d", reg_status);
   23f38:	2145      	movs	r1, #69	; 0x45
   23f3a:	480b      	ldr	r0, [pc, #44]	; (23f68 <parse_nw_reg_status+0xdc>)
   23f3c:	f00f faeb 	bl	33516 <printk>
		err = -EIO;
   23f40:	f06f 0404 	mvn.w	r4, #4
   23f44:	e7d0      	b.n	23ee8 <parse_nw_reg_status+0x5c>
	switch (reg_status) {
   23f46:	2a5a      	cmp	r2, #90	; 0x5a
   23f48:	d1f6      	bne.n	23f38 <parse_nw_reg_status+0xac>
		*status = reg_status;
   23f4a:	702a      	strb	r2, [r5, #0]
		LOG_DBG("Network registration status: %d", reg_status);
   23f4c:	e7cc      	b.n	23ee8 <parse_nw_reg_status+0x5c>
		return -EINVAL;
   23f4e:	f06f 0415 	mvn.w	r4, #21
   23f52:	e7b9      	b.n	23ec8 <parse_nw_reg_status+0x3c>
   23f54:	0003962b 	.word	0x0003962b
   23f58:	00039659 	.word	0x00039659
   23f5c:	0003968b 	.word	0x0003968b
   23f60:	000396b9 	.word	0x000396b9
   23f64:	000396c0 	.word	0x000396c0
   23f68:	000396f2 	.word	0x000396f2

00023f6c <at_handler>:
{
   23f6c:	b507      	push	{r0, r1, r2, lr}
	if (response == NULL) {
   23f6e:	4608      	mov	r0, r1
   23f70:	b931      	cbnz	r1, 23f80 <at_handler+0x14>
		LOG_ERR("Response buffer is NULL-pointer");
   23f72:	2145      	movs	r1, #69	; 0x45
   23f74:	480c      	ldr	r0, [pc, #48]	; (23fa8 <at_handler+0x3c>)
		LOG_ERR("Could not get network registration status");
   23f76:	f00f face 	bl	33516 <printk>
}
   23f7a:	b003      	add	sp, #12
   23f7c:	f85d fb04 	ldr.w	pc, [sp], #4
	err = parse_nw_reg_status(response, &status, AT_CEREG_REG_STATUS_INDEX);
   23f80:	2201      	movs	r2, #1
   23f82:	f10d 0107 	add.w	r1, sp, #7
   23f86:	f7ff ff81 	bl	23e8c <parse_nw_reg_status>
	if (err) {
   23f8a:	b110      	cbz	r0, 23f92 <at_handler+0x26>
		LOG_ERR("Could not get network registration status");
   23f8c:	2145      	movs	r1, #69	; 0x45
   23f8e:	4807      	ldr	r0, [pc, #28]	; (23fac <at_handler+0x40>)
   23f90:	e7f1      	b.n	23f76 <at_handler+0xa>
	if ((status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   23f92:	f89d 3007 	ldrb.w	r3, [sp, #7]
   23f96:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   23f9a:	2b01      	cmp	r3, #1
   23f9c:	d1ed      	bne.n	23f7a <at_handler+0xe>
	z_impl_k_sem_give(sem);
   23f9e:	4804      	ldr	r0, [pc, #16]	; (23fb0 <at_handler+0x44>)
   23fa0:	f00c fbf2 	bl	30788 <z_impl_k_sem_give>
}
   23fa4:	e7e9      	b.n	23f7a <at_handler+0xe>
   23fa6:	bf00      	nop
   23fa8:	0003971f 	.word	0x0003971f
   23fac:	00039744 	.word	0x00039744
   23fb0:	200223dc 	.word	0x200223dc

00023fb4 <w_lte_lc_connect>:
{
   23fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   23fb8:	2201      	movs	r2, #1
   23fba:	2100      	movs	r1, #0
   23fbc:	4828      	ldr	r0, [pc, #160]	; (24060 <w_lte_lc_connect+0xac>)
   23fbe:	f011 fc7e 	bl	358be <z_impl_k_sem_init>
	rc = at_notif_register_handler(NULL, at_handler);
   23fc2:	2000      	movs	r0, #0
   23fc4:	4927      	ldr	r1, [pc, #156]	; (24064 <w_lte_lc_connect+0xb0>)
   23fc6:	f7ff faad 	bl	23524 <at_notif_register_handler>
	if (rc != 0) {
   23fca:	4604      	mov	r4, r0
   23fcc:	b138      	cbz	r0, 23fde <w_lte_lc_connect+0x2a>
		LOG_ERR("Can't register handler rc=%d", rc);
   23fce:	2145      	movs	r1, #69	; 0x45
   23fd0:	4602      	mov	r2, r0
   23fd2:	4825      	ldr	r0, [pc, #148]	; (24068 <w_lte_lc_connect+0xb4>)
		LOG_ERR("Can't de-register handler rc=%d", rc);
   23fd4:	f00f fa9f 	bl	33516 <printk>
}
   23fd8:	4620      	mov	r0, r4
   23fda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   23fde:	2602      	movs	r6, #2
	const char *current_network_mode = nw_mode_preferred;
   23fe0:	4822      	ldr	r0, [pc, #136]	; (2406c <w_lte_lc_connect+0xb8>)
		if (at_cmd_write(normal, NULL, 0, NULL) != 0) {
   23fe2:	4f23      	ldr	r7, [pc, #140]	; (24070 <w_lte_lc_connect+0xbc>)
	return z_impl_k_sem_take(sem, timeout);
   23fe4:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 24088 <w_lte_lc_connect+0xd4>
   23fe8:	f8df 9074 	ldr.w	r9, [pc, #116]	; 24060 <w_lte_lc_connect+0xac>
		if (at_cmd_write(current_network_mode, NULL, 0, NULL) != 0) {
   23fec:	2300      	movs	r3, #0
   23fee:	461a      	mov	r2, r3
   23ff0:	4619      	mov	r1, r3
   23ff2:	f7ff f9c3 	bl	2337c <at_cmd_write>
   23ff6:	4603      	mov	r3, r0
   23ff8:	bb10      	cbnz	r0, 24040 <w_lte_lc_connect+0x8c>
		if (at_cmd_write(normal, NULL, 0, NULL) != 0) {
   23ffa:	4602      	mov	r2, r0
   23ffc:	4601      	mov	r1, r0
   23ffe:	4638      	mov	r0, r7
   24000:	f7ff f9bc 	bl	2337c <at_cmd_write>
   24004:	4605      	mov	r5, r0
   24006:	b9d8      	cbnz	r0, 24040 <w_lte_lc_connect+0x8c>
   24008:	4641      	mov	r1, r8
   2400a:	4648      	mov	r0, r9
   2400c:	f00c fc06 	bl	3081c <z_impl_k_sem_take>
		if (err == -EAGAIN) {
   24010:	f110 0f0b 	cmn.w	r0, #11
   24014:	4604      	mov	r4, r0
   24016:	d115      	bne.n	24044 <w_lte_lc_connect+0x90>
			LOG_INF("Network connection attempt timed out");
   24018:	2149      	movs	r1, #73	; 0x49
   2401a:	4816      	ldr	r0, [pc, #88]	; (24074 <w_lte_lc_connect+0xc0>)
   2401c:	f00f fa7b 	bl	33516 <printk>
			if (IS_ENABLED(CONFIG_LTE_NETWORK_USE_FALLBACK) &&
   24020:	2e01      	cmp	r6, #1
   24022:	d019      	beq.n	24058 <w_lte_lc_connect+0xa4>
				if (at_cmd_write(offline, NULL, 0, NULL) != 0) {
   24024:	462b      	mov	r3, r5
   24026:	462a      	mov	r2, r5
   24028:	4629      	mov	r1, r5
   2402a:	4813      	ldr	r0, [pc, #76]	; (24078 <w_lte_lc_connect+0xc4>)
   2402c:	f7ff f9a6 	bl	2337c <at_cmd_write>
   24030:	b930      	cbnz	r0, 24040 <w_lte_lc_connect+0x8c>
				LOG_INF("Using fallback network mode");
   24032:	4812      	ldr	r0, [pc, #72]	; (2407c <w_lte_lc_connect+0xc8>)
   24034:	2149      	movs	r1, #73	; 0x49
   24036:	f00f fa6e 	bl	33516 <printk>
   2403a:	2601      	movs	r6, #1
				current_network_mode = nw_mode_fallback;
   2403c:	4810      	ldr	r0, [pc, #64]	; (24080 <w_lte_lc_connect+0xcc>)
   2403e:	e7d5      	b.n	23fec <w_lte_lc_connect+0x38>
			err = -EIO;
   24040:	f06f 0404 	mvn.w	r4, #4
	rc = at_notif_deregister_handler(NULL, at_handler);
   24044:	2000      	movs	r0, #0
   24046:	4907      	ldr	r1, [pc, #28]	; (24064 <w_lte_lc_connect+0xb0>)
   24048:	f7ff faaa 	bl	235a0 <at_notif_deregister_handler>
	if (rc != 0) {
   2404c:	4602      	mov	r2, r0
   2404e:	2800      	cmp	r0, #0
   24050:	d0c2      	beq.n	23fd8 <w_lte_lc_connect+0x24>
		LOG_ERR("Can't de-register handler rc=%d", rc);
   24052:	2145      	movs	r1, #69	; 0x45
   24054:	480b      	ldr	r0, [pc, #44]	; (24084 <w_lte_lc_connect+0xd0>)
   24056:	e7bd      	b.n	23fd4 <w_lte_lc_connect+0x20>
				err = -ETIMEDOUT;
   24058:	f06f 0473 	mvn.w	r4, #115	; 0x73
   2405c:	e7f2      	b.n	24044 <w_lte_lc_connect+0x90>
   2405e:	bf00      	nop
   24060:	200223dc 	.word	0x200223dc
   24064:	00023f6d 	.word	0x00023f6d
   24068:	00039773 	.word	0x00039773
   2406c:	00039838 	.word	0x00039838
   24070:	00039817 	.word	0x00039817
   24074:	00039795 	.word	0x00039795
   24078:	0003984f 	.word	0x0003984f
   2407c:	000397bf 	.word	0x000397bf
   24080:	00039821 	.word	0x00039821
   24084:	000397e0 	.word	0x000397e0
   24088:	000927c0 	.word	0x000927c0

0002408c <lte_lc_offline>:
{
   2408c:	b508      	push	{r3, lr}
	if (at_cmd_write(offline, NULL, 0, NULL) != 0) {
   2408e:	2300      	movs	r3, #0
   24090:	4804      	ldr	r0, [pc, #16]	; (240a4 <lte_lc_offline+0x18>)
   24092:	461a      	mov	r2, r3
   24094:	4619      	mov	r1, r3
   24096:	f7ff f971 	bl	2337c <at_cmd_write>
   2409a:	2800      	cmp	r0, #0
}
   2409c:	bf18      	it	ne
   2409e:	f06f 0004 	mvnne.w	r0, #4
   240a2:	bd08      	pop	{r3, pc}
   240a4:	0003984f 	.word	0x0003984f

000240a8 <k_sys_fatal_error_handler>:
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
   240a8:	4803      	ldr	r0, [pc, #12]	; (240b8 <k_sys_fatal_error_handler+0x10>)
   240aa:	2145      	movs	r1, #69	; 0x45
{
   240ac:	b508      	push	{r3, lr}
	LOG_ERR("Resetting system");
   240ae:	f00f fa32 	bl	33516 <printk>
	sys_arch_reboot(0);
   240b2:	2000      	movs	r0, #0
   240b4:	f7fc fd8a 	bl	20bcc <sys_arch_reboot>

	CODE_UNREACHABLE;
   240b8:	00039859 	.word	0x00039859

000240bc <fragment_evt_send>:

	return 0;
}

static int fragment_evt_send(const struct download_client *client)
{
   240bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	__ASSERT(client->offset <= client->fragment_size,
   240be:	f241 0304 	movw	r3, #4100	; 0x1004
   240c2:	58c2      	ldr	r2, [r0, r3]
   240c4:	f241 0310 	movw	r3, #4112	; 0x1010
   240c8:	58c3      	ldr	r3, [r0, r3]
{
   240ca:	4604      	mov	r4, r0
	__ASSERT(client->offset <= client->fragment_size,
   240cc:	429a      	cmp	r2, r3
   240ce:	d90e      	bls.n	240ee <fragment_evt_send+0x32>
   240d0:	4919      	ldr	r1, [pc, #100]	; (24138 <fragment_evt_send+0x7c>)
   240d2:	f240 1365 	movw	r3, #357	; 0x165
   240d6:	4a19      	ldr	r2, [pc, #100]	; (2413c <fragment_evt_send+0x80>)
   240d8:	4819      	ldr	r0, [pc, #100]	; (24140 <fragment_evt_send+0x84>)
   240da:	f00f fa1c 	bl	33516 <printk>
   240de:	4819      	ldr	r0, [pc, #100]	; (24144 <fragment_evt_send+0x88>)
   240e0:	f00f fa19 	bl	33516 <printk>
   240e4:	f240 1165 	movw	r1, #357	; 0x165
   240e8:	4814      	ldr	r0, [pc, #80]	; (2413c <fragment_evt_send+0x80>)
   240ea:	f00f fa5a 	bl	335a2 <assert_post_action>
		 "Fragment overflow!");

	__ASSERT(client->offset <= CONFIG_DOWNLOAD_CLIENT_MAX_RESPONSE_SIZE,
   240ee:	f241 0304 	movw	r3, #4100	; 0x1004
   240f2:	58e3      	ldr	r3, [r4, r3]
   240f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   240f8:	d90e      	bls.n	24118 <fragment_evt_send+0x5c>
   240fa:	4913      	ldr	r1, [pc, #76]	; (24148 <fragment_evt_send+0x8c>)
   240fc:	f44f 73b4 	mov.w	r3, #360	; 0x168
   24100:	4a0e      	ldr	r2, [pc, #56]	; (2413c <fragment_evt_send+0x80>)
   24102:	480f      	ldr	r0, [pc, #60]	; (24140 <fragment_evt_send+0x84>)
   24104:	f00f fa07 	bl	33516 <printk>
   24108:	4810      	ldr	r0, [pc, #64]	; (2414c <fragment_evt_send+0x90>)
   2410a:	f00f fa04 	bl	33516 <printk>
   2410e:	f44f 71b4 	mov.w	r1, #360	; 0x168
   24112:	480a      	ldr	r0, [pc, #40]	; (2413c <fragment_evt_send+0x80>)
   24114:	f00f fa45 	bl	335a2 <assert_post_action>
		 "Buffer overflow!");

	const struct download_client_evt evt = {
   24118:	2300      	movs	r3, #0
   2411a:	f88d 3004 	strb.w	r3, [sp, #4]
		.id = DOWNLOAD_CLIENT_EVT_FRAGMENT,
		.fragment = {
			.buf = client->buf,
   2411e:	1d23      	adds	r3, r4, #4
	const struct download_client_evt evt = {
   24120:	9302      	str	r3, [sp, #8]
			.len = client->offset,
   24122:	f241 0304 	movw	r3, #4100	; 0x1004
	const struct download_client_evt evt = {
   24126:	58e3      	ldr	r3, [r4, r3]
		}
	};

	return client->callback(&evt);
   24128:	a801      	add	r0, sp, #4
	const struct download_client_evt evt = {
   2412a:	9303      	str	r3, [sp, #12]
	return client->callback(&evt);
   2412c:	f242 03e0 	movw	r3, #8416	; 0x20e0
   24130:	58e3      	ldr	r3, [r4, r3]
   24132:	4798      	blx	r3
}
   24134:	b004      	add	sp, #16
   24136:	bd10      	pop	{r4, pc}
   24138:	000398c0 	.word	0x000398c0
   2413c:	0003987b 	.word	0x0003987b
   24140:	00037a66 	.word	0x00037a66
   24144:	000398e8 	.word	0x000398e8
   24148:	000398fd 	.word	0x000398fd
   2414c:	00039914 	.word	0x00039914

00024150 <setsockopt>:
{
   24150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	__ASSERT_NO_MSG(socket_ops);
   24154:	4c15      	ldr	r4, [pc, #84]	; (241ac <setsockopt+0x5c>)
{
   24156:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(socket_ops);
   24158:	6823      	ldr	r3, [r4, #0]
{
   2415a:	4605      	mov	r5, r0
   2415c:	460e      	mov	r6, r1
   2415e:	4617      	mov	r7, r2
   24160:	f8dd 9020 	ldr.w	r9, [sp, #32]
	__ASSERT_NO_MSG(socket_ops);
   24164:	b94b      	cbnz	r3, 2417a <setsockopt+0x2a>
   24166:	4912      	ldr	r1, [pc, #72]	; (241b0 <setsockopt+0x60>)
   24168:	4812      	ldr	r0, [pc, #72]	; (241b4 <setsockopt+0x64>)
   2416a:	2357      	movs	r3, #87	; 0x57
   2416c:	4a12      	ldr	r2, [pc, #72]	; (241b8 <setsockopt+0x68>)
   2416e:	f00f f9d2 	bl	33516 <printk>
   24172:	2157      	movs	r1, #87	; 0x57
   24174:	4810      	ldr	r0, [pc, #64]	; (241b8 <setsockopt+0x68>)
   24176:	f00f fa14 	bl	335a2 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->setsockopt);
   2417a:	6823      	ldr	r3, [r4, #0]
   2417c:	69db      	ldr	r3, [r3, #28]
   2417e:	b94b      	cbnz	r3, 24194 <setsockopt+0x44>
   24180:	490e      	ldr	r1, [pc, #56]	; (241bc <setsockopt+0x6c>)
   24182:	480c      	ldr	r0, [pc, #48]	; (241b4 <setsockopt+0x64>)
   24184:	2358      	movs	r3, #88	; 0x58
   24186:	4a0c      	ldr	r2, [pc, #48]	; (241b8 <setsockopt+0x68>)
   24188:	f00f f9c5 	bl	33516 <printk>
   2418c:	2158      	movs	r1, #88	; 0x58
   2418e:	480a      	ldr	r0, [pc, #40]	; (241b8 <setsockopt+0x68>)
   24190:	f00f fa07 	bl	335a2 <assert_post_action>
	return socket_ops->setsockopt(sock, level, optname, optval, optlen);
   24194:	6823      	ldr	r3, [r4, #0]
   24196:	f8cd 9020 	str.w	r9, [sp, #32]
   2419a:	69dc      	ldr	r4, [r3, #28]
   2419c:	463a      	mov	r2, r7
   2419e:	4643      	mov	r3, r8
   241a0:	4631      	mov	r1, r6
   241a2:	4628      	mov	r0, r5
   241a4:	46a4      	mov	ip, r4
}
   241a6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return socket_ops->setsockopt(sock, level, optname, optval, optlen);
   241aa:	4760      	bx	ip
   241ac:	200220f8 	.word	0x200220f8
   241b0:	00037b4f 	.word	0x00037b4f
   241b4:	00037a66 	.word	0x00037a66
   241b8:	00037b1f 	.word	0x00037b1f
   241bc:	00038e53 	.word	0x00038e53

000241c0 <close>:
{
   241c0:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(socket_ops);
   241c2:	4c10      	ldr	r4, [pc, #64]	; (24204 <close+0x44>)
{
   241c4:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(socket_ops);
   241c6:	6823      	ldr	r3, [r4, #0]
   241c8:	b94b      	cbnz	r3, 241de <close+0x1e>
   241ca:	490f      	ldr	r1, [pc, #60]	; (24208 <close+0x48>)
   241cc:	480f      	ldr	r0, [pc, #60]	; (2420c <close+0x4c>)
   241ce:	2321      	movs	r3, #33	; 0x21
   241d0:	4a0f      	ldr	r2, [pc, #60]	; (24210 <close+0x50>)
   241d2:	f00f f9a0 	bl	33516 <printk>
   241d6:	2121      	movs	r1, #33	; 0x21
   241d8:	480d      	ldr	r0, [pc, #52]	; (24210 <close+0x50>)
   241da:	f00f f9e2 	bl	335a2 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->close);
   241de:	6823      	ldr	r3, [r4, #0]
   241e0:	685b      	ldr	r3, [r3, #4]
   241e2:	b94b      	cbnz	r3, 241f8 <close+0x38>
   241e4:	490b      	ldr	r1, [pc, #44]	; (24214 <close+0x54>)
   241e6:	4809      	ldr	r0, [pc, #36]	; (2420c <close+0x4c>)
   241e8:	2322      	movs	r3, #34	; 0x22
   241ea:	4a09      	ldr	r2, [pc, #36]	; (24210 <close+0x50>)
   241ec:	f00f f993 	bl	33516 <printk>
   241f0:	2122      	movs	r1, #34	; 0x22
   241f2:	4807      	ldr	r0, [pc, #28]	; (24210 <close+0x50>)
   241f4:	f00f f9d5 	bl	335a2 <assert_post_action>
	return socket_ops->close(sock);
   241f8:	6823      	ldr	r3, [r4, #0]
   241fa:	4628      	mov	r0, r5
}
   241fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return socket_ops->close(sock);
   24200:	685b      	ldr	r3, [r3, #4]
   24202:	4718      	bx	r3
   24204:	200220f8 	.word	0x200220f8
   24208:	00037b4f 	.word	0x00037b4f
   2420c:	00037a66 	.word	0x00037a66
   24210:	00037b1f 	.word	0x00037b1f
   24214:	00038d7c 	.word	0x00038d7c

00024218 <get_request_send>:
{
   24218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT_NO_MSG(client);
   2421c:	4605      	mov	r5, r0
{
   2421e:	b087      	sub	sp, #28
	__ASSERT_NO_MSG(client);
   24220:	b948      	cbnz	r0, 24236 <get_request_send+0x1e>
   24222:	494b      	ldr	r1, [pc, #300]	; (24350 <get_request_send+0x138>)
   24224:	484b      	ldr	r0, [pc, #300]	; (24354 <get_request_send+0x13c>)
   24226:	23f6      	movs	r3, #246	; 0xf6
   24228:	4a4b      	ldr	r2, [pc, #300]	; (24358 <get_request_send+0x140>)
   2422a:	f00f f974 	bl	33516 <printk>
   2422e:	21f6      	movs	r1, #246	; 0xf6
   24230:	4849      	ldr	r0, [pc, #292]	; (24358 <get_request_send+0x140>)
   24232:	f00f f9b6 	bl	335a2 <assert_post_action>
	__ASSERT_NO_MSG(client->host);
   24236:	f241 0318 	movw	r3, #4120	; 0x1018
   2423a:	58eb      	ldr	r3, [r5, r3]
   2423c:	b94b      	cbnz	r3, 24252 <get_request_send+0x3a>
   2423e:	4947      	ldr	r1, [pc, #284]	; (2435c <get_request_send+0x144>)
   24240:	4844      	ldr	r0, [pc, #272]	; (24354 <get_request_send+0x13c>)
   24242:	23f7      	movs	r3, #247	; 0xf7
   24244:	4a44      	ldr	r2, [pc, #272]	; (24358 <get_request_send+0x140>)
   24246:	f00f f966 	bl	33516 <printk>
   2424a:	21f7      	movs	r1, #247	; 0xf7
   2424c:	4842      	ldr	r0, [pc, #264]	; (24358 <get_request_send+0x140>)
   2424e:	f00f f9a8 	bl	335a2 <assert_post_action>
	__ASSERT_NO_MSG(client->file);
   24252:	f241 031c 	movw	r3, #4124	; 0x101c
   24256:	58eb      	ldr	r3, [r5, r3]
   24258:	b94b      	cbnz	r3, 2426e <get_request_send+0x56>
   2425a:	4941      	ldr	r1, [pc, #260]	; (24360 <get_request_send+0x148>)
   2425c:	483d      	ldr	r0, [pc, #244]	; (24354 <get_request_send+0x13c>)
   2425e:	23f8      	movs	r3, #248	; 0xf8
   24260:	4a3d      	ldr	r2, [pc, #244]	; (24358 <get_request_send+0x140>)
   24262:	f00f f958 	bl	33516 <printk>
   24266:	21f8      	movs	r1, #248	; 0xf8
   24268:	483b      	ldr	r0, [pc, #236]	; (24358 <get_request_send+0x140>)
   2426a:	f00f f99a 	bl	335a2 <assert_post_action>
	off = client->progress + client->fragment_size - 1;
   2426e:	f241 030c 	movw	r3, #4108	; 0x100c
   24272:	58ea      	ldr	r2, [r5, r3]
   24274:	f241 0310 	movw	r3, #4112	; 0x1010
	if (client->file_size != 0) {
   24278:	f241 0108 	movw	r1, #4104	; 0x1008
	off = client->progress + client->fragment_size - 1;
   2427c:	58eb      	ldr	r3, [r5, r3]
	if (client->file_size != 0) {
   2427e:	5869      	ldr	r1, [r5, r1]
	off = client->progress + client->fragment_size - 1;
   24280:	4413      	add	r3, r2
   24282:	3b01      	subs	r3, #1
	if (client->file_size != 0) {
   24284:	b111      	cbz	r1, 2428c <get_request_send+0x74>
		off = MIN(off, client->file_size);
   24286:	428b      	cmp	r3, r1
   24288:	bf28      	it	cs
   2428a:	460b      	movcs	r3, r1
	len = snprintf(client->buf, CONFIG_DOWNLOAD_CLIENT_MAX_RESPONSE_SIZE,
   2428c:	e9cd 2301 	strd	r2, r3, [sp, #4]
   24290:	f241 0318 	movw	r3, #4120	; 0x1018
   24294:	58eb      	ldr	r3, [r5, r3]
   24296:	f105 0904 	add.w	r9, r5, #4
   2429a:	9300      	str	r3, [sp, #0]
   2429c:	f241 031c 	movw	r3, #4124	; 0x101c
   242a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   242a4:	4648      	mov	r0, r9
   242a6:	58eb      	ldr	r3, [r5, r3]
   242a8:	4a2e      	ldr	r2, [pc, #184]	; (24364 <get_request_send+0x14c>)
   242aa:	f00d ff5b 	bl	32164 <sniprintf>
	if (len < 0 || len > CONFIG_DOWNLOAD_CLIENT_MAX_RESPONSE_SIZE) {
   242ae:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	len = snprintf(client->buf, CONFIG_DOWNLOAD_CLIENT_MAX_RESPONSE_SIZE,
   242b2:	4604      	mov	r4, r0
	if (len < 0 || len > CONFIG_DOWNLOAD_CLIENT_MAX_RESPONSE_SIZE) {
   242b4:	d93b      	bls.n	2432e <get_request_send+0x116>
		LOG_ERR("Cannot create GET request, buffer too small");
   242b6:	482c      	ldr	r0, [pc, #176]	; (24368 <get_request_send+0x150>)
   242b8:	2145      	movs	r1, #69	; 0x45
   242ba:	f00f f92c 	bl	33516 <printk>
		return -ENOMEM;
   242be:	f06f 000b 	mvn.w	r0, #11
}
   242c2:	b007      	add	sp, #28
   242c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		sent = send(client->fd, client->buf + off, len, 0);
   242c8:	9b05      	ldr	r3, [sp, #20]
   242ca:	f8d5 a000 	ldr.w	sl, [r5]
   242ce:	eb09 0b03 	add.w	fp, r9, r3
	__ASSERT_NO_MSG(socket_ops);
   242d2:	f8d8 3000 	ldr.w	r3, [r8]
   242d6:	b94b      	cbnz	r3, 242ec <get_request_send+0xd4>
   242d8:	4924      	ldr	r1, [pc, #144]	; (2436c <get_request_send+0x154>)
   242da:	481e      	ldr	r0, [pc, #120]	; (24354 <get_request_send+0x13c>)
   242dc:	237e      	movs	r3, #126	; 0x7e
   242de:	4632      	mov	r2, r6
   242e0:	f00f f919 	bl	33516 <printk>
   242e4:	217e      	movs	r1, #126	; 0x7e
   242e6:	4630      	mov	r0, r6
   242e8:	f00f f95b 	bl	335a2 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->send);
   242ec:	f8d8 3000 	ldr.w	r3, [r8]
   242f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   242f2:	b94b      	cbnz	r3, 24308 <get_request_send+0xf0>
   242f4:	491e      	ldr	r1, [pc, #120]	; (24370 <get_request_send+0x158>)
   242f6:	4817      	ldr	r0, [pc, #92]	; (24354 <get_request_send+0x13c>)
   242f8:	237f      	movs	r3, #127	; 0x7f
   242fa:	4632      	mov	r2, r6
   242fc:	f00f f90b 	bl	33516 <printk>
   24300:	217f      	movs	r1, #127	; 0x7f
   24302:	4630      	mov	r0, r6
   24304:	f00f f94d 	bl	335a2 <assert_post_action>
	return socket_ops->send(sock, buf, len, flags);
   24308:	f8d8 3000 	ldr.w	r3, [r8]
   2430c:	4622      	mov	r2, r4
   2430e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   24310:	4659      	mov	r1, fp
   24312:	461f      	mov	r7, r3
   24314:	4650      	mov	r0, sl
   24316:	2300      	movs	r3, #0
   24318:	47b8      	blx	r7
		if (sent <= 0) {
   2431a:	2800      	cmp	r0, #0
   2431c:	dd0d      	ble.n	2433a <get_request_send+0x122>
		off += sent;
   2431e:	9b05      	ldr	r3, [sp, #20]
		len -= sent;
   24320:	1a24      	subs	r4, r4, r0
		off += sent;
   24322:	4403      	add	r3, r0
   24324:	9305      	str	r3, [sp, #20]
	while (len) {
   24326:	2c00      	cmp	r4, #0
   24328:	d1ce      	bne.n	242c8 <get_request_send+0xb0>
	return 0;
   2432a:	4620      	mov	r0, r4
   2432c:	e7c9      	b.n	242c2 <get_request_send+0xaa>
	size_t off = 0;
   2432e:	2300      	movs	r3, #0
	__ASSERT_NO_MSG(socket_ops);
   24330:	f8df 8048 	ldr.w	r8, [pc, #72]	; 2437c <get_request_send+0x164>
   24334:	4e0f      	ldr	r6, [pc, #60]	; (24374 <get_request_send+0x15c>)
   24336:	9305      	str	r3, [sp, #20]
   24338:	e7f5      	b.n	24326 <get_request_send+0x10e>
		LOG_ERR("Failed to send HTTP request, errno %d", errno);
   2433a:	f00f fcba 	bl	33cb2 <__errno>
   2433e:	2145      	movs	r1, #69	; 0x45
   24340:	6802      	ldr	r2, [r0, #0]
   24342:	480d      	ldr	r0, [pc, #52]	; (24378 <get_request_send+0x160>)
   24344:	f00f f8e7 	bl	33516 <printk>
			return -EIO;
   24348:	f06f 0004 	mvn.w	r0, #4
		return err;
   2434c:	e7b9      	b.n	242c2 <get_request_send+0xaa>
   2434e:	bf00      	nop
   24350:	00039da5 	.word	0x00039da5
   24354:	00037a66 	.word	0x00037a66
   24358:	0003987b 	.word	0x0003987b
   2435c:	00039927 	.word	0x00039927
   24360:	00039934 	.word	0x00039934
   24364:	00039941 	.word	0x00039941
   24368:	0003998c 	.word	0x0003998c
   2436c:	00037b4f 	.word	0x00037b4f
   24370:	00038db5 	.word	0x00038db5
   24374:	00037b1f 	.word	0x00037b1f
   24378:	000399bd 	.word	0x000399bd
   2437c:	200220f8 	.word	0x200220f8

00024380 <download_client_init>:
	goto restart_and_suspend;
}

int download_client_init(struct download_client *const client,
			 download_client_callback_t callback)
{
   24380:	b530      	push	{r4, r5, lr}
	if (client == NULL || callback == NULL) {
   24382:	4605      	mov	r5, r0
{
   24384:	b087      	sub	sp, #28
	if (client == NULL || callback == NULL) {
   24386:	b1f0      	cbz	r0, 243c6 <download_client_init+0x46>
   24388:	b1e9      	cbz	r1, 243c6 <download_client_init+0x46>
		return -EINVAL;
	}

	client->fd = -1;
   2438a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2438e:	6003      	str	r3, [r0, #0]
	client->callback = callback;
   24390:	f242 03e0 	movw	r3, #8416	; 0x20e0
   24394:	50c1      	str	r1, [r0, r3]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   24396:	2400      	movs	r4, #0
   24398:	230e      	movs	r3, #14
   2439a:	e9cd 0400 	strd	r0, r4, [sp]
   2439e:	f500 5187 	add.w	r1, r0, #4320	; 0x10e0
   243a2:	f500 5081 	add.w	r0, r0, #4128	; 0x1020
   243a6:	e9cd 4302 	strd	r4, r3, [sp, #8]
   243aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   243ae:	4b07      	ldr	r3, [pc, #28]	; (243cc <download_client_init+0x4c>)
   243b0:	e9cd 4404 	strd	r4, r4, [sp, #16]
   243b4:	3010      	adds	r0, #16
   243b6:	f00c fb63 	bl	30a80 <z_impl_k_thread_create>

	/* The thread is spawned now, but it will suspend itself;
	 * it is resumed when the download is started via the API.
	 */
	client->tid =
   243ba:	f241 032c 	movw	r3, #4140	; 0x102c
   243be:	50e8      	str	r0, [r5, r3]
		k_thread_create(&client->thread, client->thread_stack,
				K_THREAD_STACK_SIZEOF(client->thread_stack),
				download_thread, client, NULL, NULL,
				K_LOWEST_APPLICATION_THREAD_PRIO, 0, K_NO_WAIT);

	return 0;
   243c0:	4620      	mov	r0, r4
}
   243c2:	b007      	add	sp, #28
   243c4:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   243c6:	f06f 0015 	mvn.w	r0, #21
   243ca:	e7fa      	b.n	243c2 <download_client_init+0x42>
   243cc:	000247d5 	.word	0x000247d5

000243d0 <download_client_connect>:

int download_client_connect(struct download_client *client, const char *host,
			    const struct download_client_cfg *config)
{
   243d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   243d4:	ed2d 8b02 	vpush	{d8}
   243d8:	4688      	mov	r8, r1
   243da:	4616      	mov	r6, r2
	int err;

	if (client == NULL || host == NULL || config == NULL) {
   243dc:	4604      	mov	r4, r0
{
   243de:	b09f      	sub	sp, #124	; 0x7c
	if (client == NULL || host == NULL || config == NULL) {
   243e0:	b938      	cbnz	r0, 243f2 <download_client_connect+0x22>
		client->fd =
			resolve_and_connect(AF_INET, host, config);
	}

	if (client->fd < 0) {
		return -EINVAL;
   243e2:	f06f 0a15 	mvn.w	sl, #21
	if (err) {
		return err;
	}

	return 0;
}
   243e6:	4650      	mov	r0, sl
   243e8:	b01f      	add	sp, #124	; 0x7c
   243ea:	ecbd 8b02 	vpop	{d8}
   243ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (client == NULL || host == NULL || config == NULL) {
   243f2:	2900      	cmp	r1, #0
   243f4:	d0f5      	beq.n	243e2 <download_client_connect+0x12>
   243f6:	2a00      	cmp	r2, #0
   243f8:	d0f3      	beq.n	243e2 <download_client_connect+0x12>
	if (config->sec_tag != -1) {
   243fa:	6852      	ldr	r2, [r2, #4]
	if (client->fd != -1) {
   243fc:	f8d0 a000 	ldr.w	sl, [r0]
		client->fragment_size =
   24400:	1c53      	adds	r3, r2, #1
   24402:	bf0c      	ite	eq
   24404:	f44f 5180 	moveq.w	r1, #4096	; 0x1000
   24408:	f44f 6100 	movne.w	r1, #2048	; 0x800
   2440c:	f241 0310 	movw	r3, #4112	; 0x1010
	if (client->fd != -1) {
   24410:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
   24414:	50c1      	str	r1, [r0, r3]
   24416:	f040 81a1 	bne.w	2475c <download_client_connect+0x38c>
	if (cfg->sec_tag == -1) {
   2441a:	3201      	adds	r2, #1
   2441c:	8833      	ldrh	r3, [r6, #0]
   2441e:	d140      	bne.n	244a2 <download_client_connect+0xd2>
		port = (cfg->port != 0) ? htons(cfg->port) :
   24420:	2b00      	cmp	r3, #0
   24422:	d047      	beq.n	244b4 <download_client_connect+0xe4>
   24424:	021a      	lsls	r2, r3, #8
   24426:	ea42 2313 	orr.w	r3, r2, r3, lsr #8
   2442a:	b29b      	uxth	r3, r3
		proto = IPPROTO_TCP;
   2442c:	f04f 0906 	mov.w	r9, #6
		port = (cfg->port != 0) ? htons(cfg->port) :
   24430:	9302      	str	r3, [sp, #8]
	struct addrinfo hints = {
   24432:	2220      	movs	r2, #32
   24434:	2100      	movs	r1, #0
   24436:	a806      	add	r0, sp, #24
   24438:	f011 fb86 	bl	35b48 <memset>
   2443c:	2301      	movs	r3, #1
	__ASSERT_NO_MSG(socket_ops);
   2443e:	4da7      	ldr	r5, [pc, #668]	; (246dc <download_client_connect+0x30c>)
   24440:	e9cd 3307 	strd	r3, r3, [sp, #28]
   24444:	68b3      	ldr	r3, [r6, #8]
   24446:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   2444a:	930c      	str	r3, [sp, #48]	; 0x30
   2444c:	682b      	ldr	r3, [r5, #0]
   2444e:	b94b      	cbnz	r3, 24464 <download_client_connect+0x94>
   24450:	49a3      	ldr	r1, [pc, #652]	; (246e0 <download_client_connect+0x310>)
   24452:	48a4      	ldr	r0, [pc, #656]	; (246e4 <download_client_connect+0x314>)
   24454:	2393      	movs	r3, #147	; 0x93
   24456:	4aa4      	ldr	r2, [pc, #656]	; (246e8 <download_client_connect+0x318>)
   24458:	f00f f85d 	bl	33516 <printk>
   2445c:	2193      	movs	r1, #147	; 0x93
   2445e:	48a2      	ldr	r0, [pc, #648]	; (246e8 <download_client_connect+0x318>)
   24460:	f00f f89f 	bl	335a2 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->getaddrinfo);
   24464:	682b      	ldr	r3, [r5, #0]
   24466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   24468:	b94b      	cbnz	r3, 2447e <download_client_connect+0xae>
   2446a:	49a0      	ldr	r1, [pc, #640]	; (246ec <download_client_connect+0x31c>)
   2446c:	489d      	ldr	r0, [pc, #628]	; (246e4 <download_client_connect+0x314>)
   2446e:	2394      	movs	r3, #148	; 0x94
   24470:	4a9d      	ldr	r2, [pc, #628]	; (246e8 <download_client_connect+0x318>)
   24472:	f00f f850 	bl	33516 <printk>
   24476:	2194      	movs	r1, #148	; 0x94
   24478:	489b      	ldr	r0, [pc, #620]	; (246e8 <download_client_connect+0x318>)
   2447a:	f00f f892 	bl	335a2 <assert_post_action>
	return socket_ops->getaddrinfo(node, service, hints, res);
   2447e:	682b      	ldr	r3, [r5, #0]
   24480:	2100      	movs	r1, #0
   24482:	6b5f      	ldr	r7, [r3, #52]	; 0x34
   24484:	4640      	mov	r0, r8
   24486:	ab04      	add	r3, sp, #16
   24488:	aa06      	add	r2, sp, #24
   2448a:	47b8      	blx	r7
	if (err) {
   2448c:	b1c0      	cbz	r0, 244c0 <download_client_connect+0xf0>
		LOG_WRN("Failed to resolve hostname %s on %s", log_strdup(host),
   2448e:	4642      	mov	r2, r8
   24490:	2157      	movs	r1, #87	; 0x57
   24492:	4b97      	ldr	r3, [pc, #604]	; (246f0 <download_client_connect+0x320>)
   24494:	4897      	ldr	r0, [pc, #604]	; (246f4 <download_client_connect+0x324>)
   24496:	f00f f83e 	bl	33516 <printk>
		client->fd =
   2449a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2449e:	6023      	str	r3, [r4, #0]
   244a0:	e79f      	b.n	243e2 <download_client_connect+0x12>
		port = (cfg->port != 0) ? htons(cfg->port) :
   244a2:	b153      	cbz	r3, 244ba <download_client_connect+0xea>
   244a4:	021a      	lsls	r2, r3, #8
   244a6:	ea42 2313 	orr.w	r3, r2, r3, lsr #8
   244aa:	b29b      	uxth	r3, r3
		proto = IPPROTO_TLS_1_2;
   244ac:	f44f 7981 	mov.w	r9, #258	; 0x102
		port = (cfg->port != 0) ? htons(cfg->port) :
   244b0:	9302      	str	r3, [sp, #8]
   244b2:	e7be      	b.n	24432 <download_client_connect+0x62>
		port = (cfg->port != 0) ? htons(cfg->port) :
   244b4:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
   244b8:	e7b8      	b.n	2442c <download_client_connect+0x5c>
		port = (cfg->port != 0) ? htons(cfg->port) :
   244ba:	f64b 3301 	movw	r3, #47873	; 0xbb01
   244be:	e7f5      	b.n	244ac <download_client_connect+0xdc>
	LOG_INF("Attempting to connect over %s",
   244c0:	2149      	movs	r1, #73	; 0x49
   244c2:	4a8b      	ldr	r2, [pc, #556]	; (246f0 <download_client_connect+0x320>)
   244c4:	488c      	ldr	r0, [pc, #560]	; (246f8 <download_client_connect+0x328>)
   244c6:	f00f f826 	bl	33516 <printk>
	__ASSERT_NO_MSG(socket_ops);
   244ca:	682b      	ldr	r3, [r5, #0]
   244cc:	b94b      	cbnz	r3, 244e2 <download_client_connect+0x112>
   244ce:	4984      	ldr	r1, [pc, #528]	; (246e0 <download_client_connect+0x310>)
   244d0:	4884      	ldr	r0, [pc, #528]	; (246e4 <download_client_connect+0x314>)
   244d2:	2319      	movs	r3, #25
   244d4:	4a84      	ldr	r2, [pc, #528]	; (246e8 <download_client_connect+0x318>)
   244d6:	f00f f81e 	bl	33516 <printk>
   244da:	2119      	movs	r1, #25
   244dc:	4882      	ldr	r0, [pc, #520]	; (246e8 <download_client_connect+0x318>)
   244de:	f00f f860 	bl	335a2 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->socket);
   244e2:	682b      	ldr	r3, [r5, #0]
   244e4:	681b      	ldr	r3, [r3, #0]
   244e6:	b94b      	cbnz	r3, 244fc <download_client_connect+0x12c>
   244e8:	4984      	ldr	r1, [pc, #528]	; (246fc <download_client_connect+0x32c>)
   244ea:	487e      	ldr	r0, [pc, #504]	; (246e4 <download_client_connect+0x314>)
   244ec:	231a      	movs	r3, #26
   244ee:	4a7e      	ldr	r2, [pc, #504]	; (246e8 <download_client_connect+0x318>)
   244f0:	f00f f811 	bl	33516 <printk>
   244f4:	211a      	movs	r1, #26
   244f6:	487c      	ldr	r0, [pc, #496]	; (246e8 <download_client_connect+0x318>)
   244f8:	f00f f853 	bl	335a2 <assert_post_action>
	return socket_ops->socket(family, type, proto);
   244fc:	2101      	movs	r1, #1
   244fe:	682b      	ldr	r3, [r5, #0]
   24500:	464a      	mov	r2, r9
   24502:	4608      	mov	r0, r1
   24504:	681b      	ldr	r3, [r3, #0]
   24506:	4798      	blx	r3
	if (fd < 0) {
   24508:	1e07      	subs	r7, r0, #0
   2450a:	da2f      	bge.n	2456c <download_client_connect+0x19c>
		LOG_ERR("Failed to create socket, errno %d", errno);
   2450c:	f00f fbd1 	bl	33cb2 <__errno>
   24510:	2145      	movs	r1, #69	; 0x45
   24512:	6802      	ldr	r2, [r0, #0]
   24514:	487a      	ldr	r0, [pc, #488]	; (24700 <download_client_connect+0x330>)
   24516:	f00e fffe 	bl	33516 <printk>
	err = getaddrinfo(host, NULL, &hints, &info);
   2451a:	f04f 0a00 	mov.w	sl, #0
	__ASSERT_NO_MSG(socket_ops);
   2451e:	682b      	ldr	r3, [r5, #0]
	freeaddrinfo(info);
   24520:	f8dd 9010 	ldr.w	r9, [sp, #16]
   24524:	b94b      	cbnz	r3, 2453a <download_client_connect+0x16a>
   24526:	496e      	ldr	r1, [pc, #440]	; (246e0 <download_client_connect+0x310>)
   24528:	486e      	ldr	r0, [pc, #440]	; (246e4 <download_client_connect+0x314>)
   2452a:	239b      	movs	r3, #155	; 0x9b
   2452c:	4a6e      	ldr	r2, [pc, #440]	; (246e8 <download_client_connect+0x318>)
   2452e:	f00e fff2 	bl	33516 <printk>
   24532:	219b      	movs	r1, #155	; 0x9b
   24534:	486c      	ldr	r0, [pc, #432]	; (246e8 <download_client_connect+0x318>)
   24536:	f00f f834 	bl	335a2 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->freeaddrinfo);
   2453a:	682b      	ldr	r3, [r5, #0]
   2453c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   2453e:	b94b      	cbnz	r3, 24554 <download_client_connect+0x184>
   24540:	4970      	ldr	r1, [pc, #448]	; (24704 <download_client_connect+0x334>)
   24542:	4868      	ldr	r0, [pc, #416]	; (246e4 <download_client_connect+0x314>)
   24544:	239c      	movs	r3, #156	; 0x9c
   24546:	4a68      	ldr	r2, [pc, #416]	; (246e8 <download_client_connect+0x318>)
   24548:	f00e ffe5 	bl	33516 <printk>
   2454c:	219c      	movs	r1, #156	; 0x9c
   2454e:	4866      	ldr	r0, [pc, #408]	; (246e8 <download_client_connect+0x318>)
   24550:	f00f f827 	bl	335a2 <assert_post_action>
	return socket_ops->freeaddrinfo(res);
   24554:	682b      	ldr	r3, [r5, #0]
   24556:	4648      	mov	r0, r9
   24558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   2455a:	4798      	blx	r3
	if (err) {
   2455c:	f1ba 0f00 	cmp.w	sl, #0
   24560:	f000 80e8 	beq.w	24734 <download_client_connect+0x364>
		close(fd);
   24564:	4638      	mov	r0, r7
   24566:	f7ff fe2b 	bl	241c0 <close>
   2456a:	e796      	b.n	2449a <download_client_connect+0xca>
	if (cfg->apn != NULL) {
   2456c:	68b2      	ldr	r2, [r6, #8]
   2456e:	2a00      	cmp	r2, #0
   24570:	d041      	beq.n	245f6 <download_client_connect+0x226>
		LOG_INF("Setting up APN: %s", log_strdup(cfg->apn));
   24572:	2149      	movs	r1, #73	; 0x49
   24574:	4864      	ldr	r0, [pc, #400]	; (24708 <download_client_connect+0x338>)
   24576:	f00e ffce 	bl	33516 <printk>
	struct ifreq ifr = {0};
   2457a:	4b64      	ldr	r3, [pc, #400]	; (2470c <download_client_connect+0x33c>)
		err = socket_apn_set(fd, cfg->apn);
   2457c:	f8d6 b008 	ldr.w	fp, [r6, #8]
	struct ifreq ifr = {0};
   24580:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
   24584:	f103 0e40 	add.w	lr, r3, #64	; 0x40
   24588:	4662      	mov	r2, ip
   2458a:	6818      	ldr	r0, [r3, #0]
   2458c:	6859      	ldr	r1, [r3, #4]
   2458e:	3308      	adds	r3, #8
   24590:	c203      	stmia	r2!, {r0, r1}
   24592:	4573      	cmp	r3, lr
   24594:	4694      	mov	ip, r2
   24596:	d1f7      	bne.n	24588 <download_client_connect+0x1b8>
	__ASSERT_NO_MSG(apn);
   24598:	f1bb 0f00 	cmp.w	fp, #0
   2459c:	d109      	bne.n	245b2 <download_client_connect+0x1e2>
   2459e:	495c      	ldr	r1, [pc, #368]	; (24710 <download_client_connect+0x340>)
   245a0:	4850      	ldr	r0, [pc, #320]	; (246e4 <download_client_connect+0x314>)
   245a2:	2366      	movs	r3, #102	; 0x66
   245a4:	4a5b      	ldr	r2, [pc, #364]	; (24714 <download_client_connect+0x344>)
   245a6:	f00e ffb6 	bl	33516 <printk>
   245aa:	2166      	movs	r1, #102	; 0x66
   245ac:	4859      	ldr	r0, [pc, #356]	; (24714 <download_client_connect+0x344>)
   245ae:	f00e fff8 	bl	335a2 <assert_post_action>
	len = strlen(apn);
   245b2:	4658      	mov	r0, fp
   245b4:	f7f8 fd9c 	bl	1d0f0 <strlen>
	if (len >= sizeof(ifr.ifr_name)) {
   245b8:	283f      	cmp	r0, #63	; 0x3f
	len = strlen(apn);
   245ba:	4602      	mov	r2, r0
	if (len >= sizeof(ifr.ifr_name)) {
   245bc:	d904      	bls.n	245c8 <download_client_connect+0x1f8>
		LOG_ERR("Access point name is too long.");
   245be:	2145      	movs	r1, #69	; 0x45
   245c0:	4855      	ldr	r0, [pc, #340]	; (24718 <download_client_connect+0x348>)
   245c2:	f00e ffa8 	bl	33516 <printk>
		if (err) {
   245c6:	e7aa      	b.n	2451e <download_client_connect+0x14e>
	memcpy(ifr.ifr_name, apn, len);
   245c8:	2340      	movs	r3, #64	; 0x40
   245ca:	4659      	mov	r1, fp
   245cc:	9003      	str	r0, [sp, #12]
   245ce:	a80e      	add	r0, sp, #56	; 0x38
   245d0:	f011 faa7 	bl	35b22 <__memcpy_chk>
	err = setsockopt(fd, SOL_SOCKET, SO_BINDTODEVICE, &ifr, len);
   245d4:	9a03      	ldr	r2, [sp, #12]
   245d6:	2101      	movs	r1, #1
   245d8:	9200      	str	r2, [sp, #0]
   245da:	4638      	mov	r0, r7
   245dc:	2219      	movs	r2, #25
   245de:	ab0e      	add	r3, sp, #56	; 0x38
   245e0:	f7ff fdb6 	bl	24150 <setsockopt>
	if (err) {
   245e4:	b138      	cbz	r0, 245f6 <download_client_connect+0x226>
		LOG_ERR("Failed to bind socket, errno %d", errno);
   245e6:	f00f fb64 	bl	33cb2 <__errno>
   245ea:	2145      	movs	r1, #69	; 0x45
   245ec:	6802      	ldr	r2, [r0, #0]
   245ee:	484b      	ldr	r0, [pc, #300]	; (2471c <download_client_connect+0x34c>)
		LOG_ERR("Failed to setup peer verification, errno %d", errno);
   245f0:	f00e ff91 	bl	33516 <printk>
		if (err) {
   245f4:	e793      	b.n	2451e <download_client_connect+0x14e>
	if (proto == IPPROTO_TLS_1_2) {
   245f6:	f5b9 7f81 	cmp.w	r9, #258	; 0x102
   245fa:	d129      	bne.n	24650 <download_client_connect+0x280>
		LOG_INF("Setting up TLS credentials");
   245fc:	2149      	movs	r1, #73	; 0x49
   245fe:	4848      	ldr	r0, [pc, #288]	; (24720 <download_client_connect+0x350>)
   24600:	f00e ff89 	bl	33516 <printk>
	sec_tag_t sec_tag_list[] = { sec_tag };
   24604:	6873      	ldr	r3, [r6, #4]
	err = setsockopt(fd, SOL_TLS, TLS_PEER_VERIFY, &verify, sizeof(verify));
   24606:	f04f 0904 	mov.w	r9, #4
	sec_tag_t sec_tag_list[] = { sec_tag };
   2460a:	930e      	str	r3, [sp, #56]	; 0x38
	verify = REQUIRED;
   2460c:	2302      	movs	r3, #2
	err = setsockopt(fd, SOL_TLS, TLS_PEER_VERIFY, &verify, sizeof(verify));
   2460e:	2205      	movs	r2, #5
	verify = REQUIRED;
   24610:	9305      	str	r3, [sp, #20]
	err = setsockopt(fd, SOL_TLS, TLS_PEER_VERIFY, &verify, sizeof(verify));
   24612:	f44f 718d 	mov.w	r1, #282	; 0x11a
   24616:	4638      	mov	r0, r7
   24618:	f8cd 9000 	str.w	r9, [sp]
   2461c:	ab05      	add	r3, sp, #20
   2461e:	f7ff fd97 	bl	24150 <setsockopt>
	if (err) {
   24622:	b128      	cbz	r0, 24630 <download_client_connect+0x260>
		LOG_ERR("Failed to setup peer verification, errno %d", errno);
   24624:	f00f fb45 	bl	33cb2 <__errno>
   24628:	2145      	movs	r1, #69	; 0x45
   2462a:	6802      	ldr	r2, [r0, #0]
   2462c:	483d      	ldr	r0, [pc, #244]	; (24724 <download_client_connect+0x354>)
   2462e:	e7df      	b.n	245f0 <download_client_connect+0x220>
	err = setsockopt(fd, SOL_TLS, TLS_SEC_TAG_LIST, sec_tag_list,
   24630:	2201      	movs	r2, #1
   24632:	f44f 718d 	mov.w	r1, #282	; 0x11a
   24636:	4638      	mov	r0, r7
   24638:	f8cd 9000 	str.w	r9, [sp]
   2463c:	ab0e      	add	r3, sp, #56	; 0x38
   2463e:	f7ff fd87 	bl	24150 <setsockopt>
	if (err) {
   24642:	b128      	cbz	r0, 24650 <download_client_connect+0x280>
		LOG_ERR("Failed to setup socket security tag, errno %d", errno);
   24644:	f00f fb35 	bl	33cb2 <__errno>
   24648:	2145      	movs	r1, #69	; 0x45
   2464a:	6802      	ldr	r2, [r0, #0]
   2464c:	4836      	ldr	r0, [pc, #216]	; (24728 <download_client_connect+0x358>)
   2464e:	e7cf      	b.n	245f0 <download_client_connect+0x220>
	for (addr = info; addr != NULL; addr = addr->ai_next) {
   24650:	f8dd b010 	ldr.w	fp, [sp, #16]
	__ASSERT_NO_MSG(socket_ops);
   24654:	f8df 9090 	ldr.w	r9, [pc, #144]	; 246e8 <download_client_connect+0x318>
   24658:	f1bb 0f00 	cmp.w	fp, #0
   2465c:	f43f af5f 	beq.w	2451e <download_client_connect+0x14e>
		struct sockaddr * const sa = addr->ai_addr;
   24660:	f8db a014 	ldr.w	sl, [fp, #20]
		switch (sa->sa_family) {
   24664:	f8ba 3000 	ldrh.w	r3, [sl]
   24668:	2b01      	cmp	r3, #1
   2466a:	d001      	beq.n	24670 <download_client_connect+0x2a0>
   2466c:	2b02      	cmp	r3, #2
   2466e:	d102      	bne.n	24676 <download_client_connect+0x2a6>
			((struct sockaddr_in *)sa)->sin_port = port;
   24670:	9b02      	ldr	r3, [sp, #8]
   24672:	f8aa 3002 	strh.w	r3, [sl, #2]
		err = connect(fd, sa, addr->ai_addrlen);
   24676:	f8db 3010 	ldr.w	r3, [fp, #16]
   2467a:	ee08 3a10 	vmov	s16, r3
   2467e:	682b      	ldr	r3, [r5, #0]
   24680:	b94b      	cbnz	r3, 24696 <download_client_connect+0x2c6>
   24682:	4917      	ldr	r1, [pc, #92]	; (246e0 <download_client_connect+0x310>)
   24684:	4817      	ldr	r0, [pc, #92]	; (246e4 <download_client_connect+0x314>)
   24686:	2345      	movs	r3, #69	; 0x45
   24688:	464a      	mov	r2, r9
   2468a:	f00e ff44 	bl	33516 <printk>
   2468e:	2145      	movs	r1, #69	; 0x45
   24690:	4648      	mov	r0, r9
   24692:	f00e ff86 	bl	335a2 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->connect);
   24696:	682b      	ldr	r3, [r5, #0]
   24698:	695b      	ldr	r3, [r3, #20]
   2469a:	b94b      	cbnz	r3, 246b0 <download_client_connect+0x2e0>
   2469c:	4923      	ldr	r1, [pc, #140]	; (2472c <download_client_connect+0x35c>)
   2469e:	4811      	ldr	r0, [pc, #68]	; (246e4 <download_client_connect+0x314>)
   246a0:	2346      	movs	r3, #70	; 0x46
   246a2:	464a      	mov	r2, r9
   246a4:	f00e ff37 	bl	33516 <printk>
   246a8:	2146      	movs	r1, #70	; 0x46
   246aa:	4648      	mov	r0, r9
   246ac:	f00e ff79 	bl	335a2 <assert_post_action>
	return socket_ops->connect(sock, addr, addrlen);
   246b0:	682b      	ldr	r3, [r5, #0]
   246b2:	4651      	mov	r1, sl
   246b4:	ee18 2a10 	vmov	r2, s16
   246b8:	4638      	mov	r0, r7
   246ba:	695b      	ldr	r3, [r3, #20]
   246bc:	4798      	blx	r3
		if (err) {
   246be:	4682      	mov	sl, r0
   246c0:	2800      	cmp	r0, #0
   246c2:	f43f af2c 	beq.w	2451e <download_client_connect+0x14e>
			LOG_ERR("Unable to connect, errno %d", errno);
   246c6:	f00f faf4 	bl	33cb2 <__errno>
   246ca:	2145      	movs	r1, #69	; 0x45
   246cc:	6802      	ldr	r2, [r0, #0]
   246ce:	4818      	ldr	r0, [pc, #96]	; (24730 <download_client_connect+0x360>)
   246d0:	f00e ff21 	bl	33516 <printk>
	for (addr = info; addr != NULL; addr = addr->ai_next) {
   246d4:	f8db b01c 	ldr.w	fp, [fp, #28]
   246d8:	e7be      	b.n	24658 <download_client_connect+0x288>
   246da:	bf00      	nop
   246dc:	200220f8 	.word	0x200220f8
   246e0:	00037b4f 	.word	0x00037b4f
   246e4:	00037a66 	.word	0x00037a66
   246e8:	00037b1f 	.word	0x00037b1f
   246ec:	00037b5a 	.word	0x00037b5a
   246f0:	000399e8 	.word	0x000399e8
   246f4:	000399ed 	.word	0x000399ed
   246f8:	00039a16 	.word	0x00039a16
   246fc:	00038d8e 	.word	0x00038d8e
   24700:	00039a39 	.word	0x00039a39
   24704:	00037c0b 	.word	0x00037c0b
   24708:	00039a60 	.word	0x00039a60
   2470c:	00036e08 	.word	0x00036e08
   24710:	00039a78 	.word	0x00039a78
   24714:	0003987b 	.word	0x0003987b
   24718:	00039a7c 	.word	0x00039a7c
   2471c:	00039aa0 	.word	0x00039aa0
   24720:	00039ac5 	.word	0x00039ac5
   24724:	00039ae5 	.word	0x00039ae5
   24728:	00039b16 	.word	0x00039b16
   2472c:	00038da1 	.word	0x00038da1
   24730:	00039b49 	.word	0x00039b49
	if (client->fd < 0) {
   24734:	2f00      	cmp	r7, #0
		client->fd =
   24736:	6027      	str	r7, [r4, #0]
	if (client->fd < 0) {
   24738:	f6ff ae53 	blt.w	243e2 <download_client_connect+0x12>
	client->config = *config;
   2473c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
	client->host = host;
   24740:	f241 0318 	movw	r3, #4120	; 0x1018
   24744:	f844 8003 	str.w	r8, [r4, r3]
	client->config = *config;
   24748:	f504 5481 	add.w	r4, r4, #4128	; 0x1020
   2474c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	LOG_INF("Connected to %s", log_strdup(host));
   24750:	4642      	mov	r2, r8
   24752:	2149      	movs	r1, #73	; 0x49
   24754:	4803      	ldr	r0, [pc, #12]	; (24764 <download_client_connect+0x394>)
   24756:	f00e fede 	bl	33516 <printk>
	if (err) {
   2475a:	e644      	b.n	243e6 <download_client_connect+0x16>
		return 0;
   2475c:	f04f 0a00 	mov.w	sl, #0
   24760:	e641      	b.n	243e6 <download_client_connect+0x16>
   24762:	bf00      	nop
   24764:	00039b6a 	.word	0x00039b6a

00024768 <download_client_disconnect>:

int download_client_disconnect(struct download_client *const client)
{
   24768:	b510      	push	{r4, lr}
	int err;

	if (client == NULL || client->fd < 0) {
   2476a:	4604      	mov	r4, r0
   2476c:	b1a8      	cbz	r0, 2479a <download_client_disconnect+0x32>
   2476e:	6800      	ldr	r0, [r0, #0]
   24770:	2800      	cmp	r0, #0
   24772:	db12      	blt.n	2479a <download_client_disconnect+0x32>
		return -EINVAL;
	}

	err = close(client->fd);
   24774:	f7ff fd24 	bl	241c0 <close>
	if (err) {
   24778:	b158      	cbz	r0, 24792 <download_client_disconnect+0x2a>
		LOG_ERR("Failed to close socket, errno %d", errno);
   2477a:	f00f fa9a 	bl	33cb2 <__errno>
   2477e:	2145      	movs	r1, #69	; 0x45
   24780:	6802      	ldr	r2, [r0, #0]
   24782:	4807      	ldr	r0, [pc, #28]	; (247a0 <download_client_disconnect+0x38>)
   24784:	f00e fec7 	bl	33516 <printk>
		return -errno;
   24788:	f00f fa93 	bl	33cb2 <__errno>
   2478c:	6800      	ldr	r0, [r0, #0]
   2478e:	4240      	negs	r0, r0
	}

	client->fd = -1;

	return 0;
}
   24790:	bd10      	pop	{r4, pc}
	client->fd = -1;
   24792:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   24796:	6023      	str	r3, [r4, #0]
	return 0;
   24798:	e7fa      	b.n	24790 <download_client_disconnect+0x28>
		return -EINVAL;
   2479a:	f06f 0015 	mvn.w	r0, #21
   2479e:	e7f7      	b.n	24790 <download_client_disconnect+0x28>
   247a0:	00039b7f 	.word	0x00039b7f

000247a4 <reconnect>:
{
   247a4:	b510      	push	{r4, lr}
   247a6:	4604      	mov	r4, r0
	LOG_INF("Reconnecting..");
   247a8:	2149      	movs	r1, #73	; 0x49
   247aa:	4809      	ldr	r0, [pc, #36]	; (247d0 <reconnect+0x2c>)
   247ac:	f00e feb3 	bl	33516 <printk>
	err = download_client_disconnect(dl);
   247b0:	4620      	mov	r0, r4
   247b2:	f7ff ffd9 	bl	24768 <download_client_disconnect>
	if (err) {
   247b6:	b948      	cbnz	r0, 247cc <reconnect+0x28>
	err = download_client_connect(dl, dl->host, &dl->config);
   247b8:	f241 0318 	movw	r3, #4120	; 0x1018
   247bc:	4620      	mov	r0, r4
   247be:	58e1      	ldr	r1, [r4, r3]
   247c0:	f504 5281 	add.w	r2, r4, #4128	; 0x1020
}
   247c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = download_client_connect(dl, dl->host, &dl->config);
   247c8:	f7ff be02 	b.w	243d0 <download_client_connect>
}
   247cc:	bd10      	pop	{r4, pc}
   247ce:	bf00      	nop
   247d0:	00039ba5 	.word	0x00039ba5

000247d4 <download_thread>:
{
   247d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   247d8:	4604      	mov	r4, r0
	k_thread_suspend(dl->tid);
   247da:	f500 5381 	add.w	r3, r0, #4128	; 0x1020
{
   247de:	b089      	sub	sp, #36	; 0x24
	k_thread_suspend(dl->tid);
   247e0:	330c      	adds	r3, #12
		__ASSERT(dl->offset < sizeof(dl->buf), "Buffer overflow");
   247e2:	f500 5580 	add.w	r5, r0, #4096	; 0x1000
	k_thread_suspend(dl->tid);
   247e6:	9303      	str	r3, [sp, #12]
		__ASSERT(dl->offset < sizeof(dl->buf), "Buffer overflow");
   247e8:	3504      	adds	r5, #4
	k_thread_suspend(dl->tid);
   247ea:	9b03      	ldr	r3, [sp, #12]
   247ec:	6818      	ldr	r0, [r3, #0]
	z_impl_k_thread_suspend(thread);
   247ee:	f00c fa25 	bl	30c3c <z_impl_k_thread_suspend>
		__ASSERT(dl->offset < sizeof(dl->buf), "Buffer overflow");
   247f2:	f8df a2cc 	ldr.w	sl, [pc, #716]	; 24ac0 <download_thread+0x2ec>
   247f6:	682b      	ldr	r3, [r5, #0]
   247f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   247fc:	d30e      	bcc.n	2481c <download_thread+0x48>
   247fe:	499c      	ldr	r1, [pc, #624]	; (24a70 <download_thread+0x29c>)
   24800:	f240 139f 	movw	r3, #415	; 0x19f
   24804:	4652      	mov	r2, sl
   24806:	489b      	ldr	r0, [pc, #620]	; (24a74 <download_thread+0x2a0>)
   24808:	f00e fe85 	bl	33516 <printk>
   2480c:	489a      	ldr	r0, [pc, #616]	; (24a78 <download_thread+0x2a4>)
   2480e:	f00e fe82 	bl	33516 <printk>
   24812:	f240 119f 	movw	r1, #415	; 0x19f
   24816:	4650      	mov	r0, sl
   24818:	f00e fec3 	bl	335a2 <assert_post_action>
		len = recv(dl->fd, dl->buf + dl->offset,
   2481c:	4626      	mov	r6, r4
	__ASSERT_NO_MSG(socket_ops);
   2481e:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 24ac4 <download_thread+0x2f0>
   24822:	682f      	ldr	r7, [r5, #0]
   24824:	f856 9b04 	ldr.w	r9, [r6], #4
   24828:	f8d8 3000 	ldr.w	r3, [r8]
   2482c:	eb06 0b07 	add.w	fp, r6, r7
   24830:	f5c7 5780 	rsb	r7, r7, #4096	; 0x1000
   24834:	b94b      	cbnz	r3, 2484a <download_thread+0x76>
   24836:	4991      	ldr	r1, [pc, #580]	; (24a7c <download_thread+0x2a8>)
   24838:	488e      	ldr	r0, [pc, #568]	; (24a74 <download_thread+0x2a0>)
   2483a:	2369      	movs	r3, #105	; 0x69
   2483c:	4a90      	ldr	r2, [pc, #576]	; (24a80 <download_thread+0x2ac>)
   2483e:	f00e fe6a 	bl	33516 <printk>
   24842:	2169      	movs	r1, #105	; 0x69
   24844:	488e      	ldr	r0, [pc, #568]	; (24a80 <download_thread+0x2ac>)
   24846:	f00e feac 	bl	335a2 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->recv);
   2484a:	f8d8 3000 	ldr.w	r3, [r8]
   2484e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   24850:	b94b      	cbnz	r3, 24866 <download_thread+0x92>
   24852:	498c      	ldr	r1, [pc, #560]	; (24a84 <download_thread+0x2b0>)
   24854:	4887      	ldr	r0, [pc, #540]	; (24a74 <download_thread+0x2a0>)
   24856:	236a      	movs	r3, #106	; 0x6a
   24858:	4a89      	ldr	r2, [pc, #548]	; (24a80 <download_thread+0x2ac>)
   2485a:	f00e fe5c 	bl	33516 <printk>
   2485e:	216a      	movs	r1, #106	; 0x6a
   24860:	4887      	ldr	r0, [pc, #540]	; (24a80 <download_thread+0x2ac>)
   24862:	f00e fe9e 	bl	335a2 <assert_post_action>
	return socket_ops->recv(sock, buf, max_len, flags);
   24866:	f8d8 3000 	ldr.w	r3, [r8]
   2486a:	463a      	mov	r2, r7
   2486c:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
   24870:	4659      	mov	r1, fp
   24872:	2300      	movs	r3, #0
   24874:	4648      	mov	r0, r9
   24876:	47c0      	blx	r8
		if ((len == 0) || (len == -1)) {
   24878:	1e43      	subs	r3, r0, #1
   2487a:	3303      	adds	r3, #3
   2487c:	4680      	mov	r8, r0
			if ((dl->offset > 0) && (dl->has_header)) {
   2487e:	682b      	ldr	r3, [r5, #0]
		if ((len == 0) || (len == -1)) {
   24880:	d945      	bls.n	2490e <download_thread+0x13a>
			if ((dl->offset > 0) && (dl->has_header)) {
   24882:	b163      	cbz	r3, 2489e <download_thread+0xca>
   24884:	f241 0314 	movw	r3, #4116	; 0x1014
   24888:	5ce3      	ldrb	r3, [r4, r3]
   2488a:	b143      	cbz	r3, 2489e <download_thread+0xca>
				rc = fragment_evt_send(dl);
   2488c:	4620      	mov	r0, r4
   2488e:	f7ff fc15 	bl	240bc <fragment_evt_send>
				if (rc) {
   24892:	b120      	cbz	r0, 2489e <download_thread+0xca>
			LOG_INF("Fragment refused, download stopped.");
   24894:	2149      	movs	r1, #73	; 0x49
   24896:	487c      	ldr	r0, [pc, #496]	; (24a88 <download_thread+0x2b4>)
   24898:	f00e fe3d 	bl	33516 <printk>
   2489c:	e7a5      	b.n	247ea <download_thread+0x16>
			if (len == -1) {
   2489e:	f504 5603 	add.w	r6, r4, #8384	; 0x20c0
   248a2:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   248a6:	f106 0620 	add.w	r6, r6, #32
   248aa:	d12a      	bne.n	24902 <download_thread+0x12e>
				LOG_ERR("Error in recv(), errno %d", errno);
   248ac:	f00f fa01 	bl	33cb2 <__errno>
   248b0:	2145      	movs	r1, #69	; 0x45
   248b2:	6802      	ldr	r2, [r0, #0]
   248b4:	4875      	ldr	r0, [pc, #468]	; (24a8c <download_thread+0x2b8>)
   248b6:	f00e fe2e 	bl	33516 <printk>
				rc = error_evt_send(dl, ENOTCONN);
   248ba:	2180      	movs	r1, #128	; 0x80
				rc = error_evt_send(dl, ECONNRESET);
   248bc:	4630      	mov	r0, r6
   248be:	f010 feea 	bl	35696 <error_evt_send.isra.0>
			if (rc) {
   248c2:	2800      	cmp	r0, #0
   248c4:	d191      	bne.n	247ea <download_thread+0x16>
			reconnect(dl);
   248c6:	4620      	mov	r0, r4
   248c8:	f7ff ff6c 	bl	247a4 <reconnect>
		dl->offset = 0;
   248cc:	2700      	movs	r7, #0
			rc = error_evt_send(dl, ECONNRESET);
   248ce:	f242 09e0 	movw	r9, #8416	; 0x20e0
		dl->has_header = false;
   248d2:	46b8      	mov	r8, r7
   248d4:	f504 5680 	add.w	r6, r4, #4096	; 0x1000
   248d8:	3614      	adds	r6, #20
		dl->offset = 0;
   248da:	602f      	str	r7, [r5, #0]
		rc = get_request_send(dl);
   248dc:	4620      	mov	r0, r4
		dl->has_header = false;
   248de:	f886 8000 	strb.w	r8, [r6]
		rc = get_request_send(dl);
   248e2:	f7ff fc99 	bl	24218 <get_request_send>
		if (rc) {
   248e6:	2800      	cmp	r0, #0
   248e8:	d085      	beq.n	247f6 <download_thread+0x22>
			rc = error_evt_send(dl, ECONNRESET);
   248ea:	2168      	movs	r1, #104	; 0x68
   248ec:	eb04 0009 	add.w	r0, r4, r9
   248f0:	f010 fed1 	bl	35696 <error_evt_send.isra.0>
			if (rc) {
   248f4:	2800      	cmp	r0, #0
   248f6:	f47f af78 	bne.w	247ea <download_thread+0x16>
			reconnect(dl);
   248fa:	4620      	mov	r0, r4
   248fc:	f7ff ff52 	bl	247a4 <reconnect>
			goto send_again;
   24900:	e7eb      	b.n	248da <download_thread+0x106>
				LOG_WRN("Peer closed connection!");
   24902:	2157      	movs	r1, #87	; 0x57
   24904:	4862      	ldr	r0, [pc, #392]	; (24a90 <download_thread+0x2bc>)
   24906:	f00e fe06 	bl	33516 <printk>
				rc = error_evt_send(dl, ECONNRESET);
   2490a:	2168      	movs	r1, #104	; 0x68
   2490c:	e7d6      	b.n	248bc <download_thread+0xe8>
		dl->offset += len;
   2490e:	4403      	add	r3, r0
   24910:	602b      	str	r3, [r5, #0]
		if (!dl->has_header) {
   24912:	f241 0314 	movw	r3, #4116	; 0x1014
   24916:	5ce3      	ldrb	r3, [r4, r3]
   24918:	2b00      	cmp	r3, #0
   2491a:	d165      	bne.n	249e8 <download_thread+0x214>
	p = strstr(client->buf, "\r\n\r\n");
   2491c:	4630      	mov	r0, r6
   2491e:	495d      	ldr	r1, [pc, #372]	; (24a94 <download_thread+0x2c0>)
   24920:	f011 fa40 	bl	35da4 <strstr>
	if (!p) {
   24924:	4607      	mov	r7, r0
   24926:	2800      	cmp	r0, #0
   24928:	f43f af65 	beq.w	247f6 <download_thread+0x22>
	hdr = p + strlen("\r\n\r\n") - client->buf;
   2492c:	4859      	ldr	r0, [pc, #356]	; (24a94 <download_thread+0x2c0>)
   2492e:	f7f8 fbdf 	bl	1d0f0 <strlen>
   24932:	4407      	add	r7, r0
   24934:	eba7 0906 	sub.w	r9, r7, r6
	__ASSERT(hdr < sizeof(client->buf), "Buffer overflow");
   24938:	f5b9 5f80 	cmp.w	r9, #4096	; 0x1000
   2493c:	d30e      	bcc.n	2495c <download_thread+0x188>
   2493e:	4956      	ldr	r1, [pc, #344]	; (24a98 <download_thread+0x2c4>)
   24940:	f240 132d 	movw	r3, #301	; 0x12d
   24944:	4652      	mov	r2, sl
   24946:	484b      	ldr	r0, [pc, #300]	; (24a74 <download_thread+0x2a0>)
   24948:	f00e fde5 	bl	33516 <printk>
   2494c:	484a      	ldr	r0, [pc, #296]	; (24a78 <download_thread+0x2a4>)
   2494e:	f00e fde2 	bl	33516 <printk>
   24952:	f240 112d 	movw	r1, #301	; 0x12d
   24956:	4650      	mov	r0, sl
   24958:	f00e fe23 	bl	335a2 <assert_post_action>
	if (client->file_size == 0) {
   2495c:	f241 0b08 	movw	fp, #4104	; 0x1008
   24960:	f854 300b 	ldr.w	r3, [r4, fp]
   24964:	b9db      	cbnz	r3, 2499e <download_thread+0x1ca>
		p = strstr(client->buf, "Content-Range: bytes");
   24966:	4630      	mov	r0, r6
   24968:	494c      	ldr	r1, [pc, #304]	; (24a9c <download_thread+0x2c8>)
   2496a:	f011 fa1b 	bl	35da4 <strstr>
		if (!p) {
   2496e:	b950      	cbnz	r0, 24986 <download_thread+0x1b2>
			LOG_ERR("Server did not send "
   24970:	2145      	movs	r1, #69	; 0x45
   24972:	484b      	ldr	r0, [pc, #300]	; (24aa0 <download_thread+0x2cc>)
			LOG_ERR("Server did not send file size in response");
   24974:	f00e fdcf 	bl	33516 <printk>
				error_evt_send(dl, EBADMSG);
   24978:	f504 5003 	add.w	r0, r4, #8384	; 0x20c0
   2497c:	214d      	movs	r1, #77	; 0x4d
   2497e:	3020      	adds	r0, #32
   24980:	f010 fe89 	bl	35696 <error_evt_send.isra.0>
				break;
   24984:	e731      	b.n	247ea <download_thread+0x16>
		p = strstr(p, "/");
   24986:	4947      	ldr	r1, [pc, #284]	; (24aa4 <download_thread+0x2d0>)
   24988:	f011 fa0c 	bl	35da4 <strstr>
		if (!p) {
   2498c:	b910      	cbnz	r0, 24994 <download_thread+0x1c0>
			LOG_ERR("Server did not send file size in response");
   2498e:	2145      	movs	r1, #69	; 0x45
   24990:	4845      	ldr	r0, [pc, #276]	; (24aa8 <download_thread+0x2d4>)
   24992:	e7ef      	b.n	24974 <download_thread+0x1a0>
		client->file_size = atoi(p + 1);
   24994:	3001      	adds	r0, #1
   24996:	f011 f897 	bl	35ac8 <atoi>
   2499a:	f844 000b 	str.w	r0, [r4, fp]
	p = strstr(client->buf, "Connection: close");
   2499e:	4630      	mov	r0, r6
   249a0:	4942      	ldr	r1, [pc, #264]	; (24aac <download_thread+0x2d8>)
   249a2:	f011 f9ff 	bl	35da4 <strstr>
	if (p) {
   249a6:	b138      	cbz	r0, 249b8 <download_thread+0x1e4>
		LOG_WRN("Peer closed connection, will attempt to re-connect");
   249a8:	2157      	movs	r1, #87	; 0x57
   249aa:	4841      	ldr	r0, [pc, #260]	; (24ab0 <download_thread+0x2dc>)
   249ac:	f00e fdb3 	bl	33516 <printk>
		client->connection_close = true;
   249b0:	f241 0315 	movw	r3, #4117	; 0x1015
   249b4:	2201      	movs	r2, #1
   249b6:	54e2      	strb	r2, [r4, r3]
	if (client->offset != hdr) {
   249b8:	682a      	ldr	r2, [r5, #0]
   249ba:	4591      	cmp	r9, r2
   249bc:	d04e      	beq.n	24a5c <download_thread+0x288>
		LOG_WRN("Copying %u payload bytes", client->offset - hdr);
   249be:	2157      	movs	r1, #87	; 0x57
   249c0:	483c      	ldr	r0, [pc, #240]	; (24ab4 <download_thread+0x2e0>)
   249c2:	eba2 0209 	sub.w	r2, r2, r9
   249c6:	f00e fda6 	bl	33516 <printk>
		memcpy(client->buf, client->buf + hdr, client->offset - hdr);
   249ca:	682a      	ldr	r2, [r5, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   249cc:	4639      	mov	r1, r7
   249ce:	4630      	mov	r0, r6
   249d0:	eba2 0209 	sub.w	r2, r2, r9
   249d4:	f011 f898 	bl	35b08 <memcpy>
		client->offset -= hdr;
   249d8:	682b      	ldr	r3, [r5, #0]
   249da:	eba3 0309 	sub.w	r3, r3, r9
		client->offset = 0;
   249de:	602b      	str	r3, [r5, #0]
			dl->has_header = true;
   249e0:	f241 0214 	movw	r2, #4116	; 0x1014
   249e4:	2301      	movs	r3, #1
   249e6:	54a3      	strb	r3, [r4, r2]
		dl->progress += MIN(dl->offset, len);
   249e8:	f241 070c 	movw	r7, #4108	; 0x100c
		if ((dl->offset < dl->fragment_size) &&
   249ec:	f241 0010 	movw	r0, #4112	; 0x1010
		dl->progress += MIN(dl->offset, len);
   249f0:	6829      	ldr	r1, [r5, #0]
   249f2:	59e2      	ldr	r2, [r4, r7]
		if ((dl->offset < dl->fragment_size) &&
   249f4:	5820      	ldr	r0, [r4, r0]
		dl->progress += MIN(dl->offset, len);
   249f6:	4541      	cmp	r1, r8
   249f8:	bf94      	ite	ls
   249fa:	1852      	addls	r2, r2, r1
   249fc:	4442      	addhi	r2, r8
   249fe:	f241 0808 	movw	r8, #4104	; 0x1008
		if ((dl->offset < dl->fragment_size) &&
   24a02:	4281      	cmp	r1, r0
   24a04:	f854 3008 	ldr.w	r3, [r4, r8]
		dl->progress += MIN(dl->offset, len);
   24a08:	51e2      	str	r2, [r4, r7]
		if ((dl->offset < dl->fragment_size) &&
   24a0a:	d202      	bcs.n	24a12 <download_thread+0x23e>
   24a0c:	429a      	cmp	r2, r3
   24a0e:	f47f aef2 	bne.w	247f6 <download_thread+0x22>
		LOG_INF("Downloaded %u/%u bytes (%d%%)", dl->progress,
   24a12:	2164      	movs	r1, #100	; 0x64
   24a14:	4351      	muls	r1, r2
   24a16:	fbb1 f1f3 	udiv	r1, r1, r3
   24a1a:	4827      	ldr	r0, [pc, #156]	; (24ab8 <download_thread+0x2e4>)
   24a1c:	9100      	str	r1, [sp, #0]
   24a1e:	2149      	movs	r1, #73	; 0x49
   24a20:	f00e fd79 	bl	33516 <printk>
		rc = fragment_evt_send(dl);
   24a24:	4620      	mov	r0, r4
   24a26:	f7ff fb49 	bl	240bc <fragment_evt_send>
		if (rc) {
   24a2a:	4606      	mov	r6, r0
   24a2c:	2800      	cmp	r0, #0
   24a2e:	f47f af31 	bne.w	24894 <download_thread+0xc0>
		if (dl->progress == dl->file_size) {
   24a32:	59e2      	ldr	r2, [r4, r7]
   24a34:	f854 3008 	ldr.w	r3, [r4, r8]
   24a38:	429a      	cmp	r2, r3
   24a3a:	d111      	bne.n	24a60 <download_thread+0x28c>
			LOG_INF("Download complete");
   24a3c:	2149      	movs	r1, #73	; 0x49
   24a3e:	481f      	ldr	r0, [pc, #124]	; (24abc <download_thread+0x2e8>)
   24a40:	f00e fd69 	bl	33516 <printk>
			const struct download_client_evt evt = {
   24a44:	2302      	movs	r3, #2
   24a46:	e9cd 6605 	strd	r6, r6, [sp, #20]
   24a4a:	f88d 3014 	strb.w	r3, [sp, #20]
			dl->callback(&evt);
   24a4e:	f242 03e0 	movw	r3, #8416	; 0x20e0
			const struct download_client_evt evt = {
   24a52:	9607      	str	r6, [sp, #28]
			dl->callback(&evt);
   24a54:	58e3      	ldr	r3, [r4, r3]
   24a56:	a805      	add	r0, sp, #20
   24a58:	4798      	blx	r3
			break;
   24a5a:	e6c6      	b.n	247ea <download_thread+0x16>
		client->offset = 0;
   24a5c:	2300      	movs	r3, #0
   24a5e:	e7be      	b.n	249de <download_thread+0x20a>
		if (dl->connection_close) {
   24a60:	f241 0315 	movw	r3, #4117	; 0x1015
   24a64:	5ce2      	ldrb	r2, [r4, r3]
   24a66:	2a00      	cmp	r2, #0
   24a68:	f43f af30 	beq.w	248cc <download_thread+0xf8>
			dl->connection_close = false;
   24a6c:	54e0      	strb	r0, [r4, r3]
   24a6e:	e72a      	b.n	248c6 <download_thread+0xf2>
   24a70:	00039bb9 	.word	0x00039bb9
   24a74:	00037a66 	.word	0x00037a66
   24a78:	00039bd6 	.word	0x00039bd6
   24a7c:	00037b4f 	.word	0x00037b4f
   24a80:	00037b1f 	.word	0x00037b1f
   24a84:	00038dc6 	.word	0x00038dc6
   24a88:	00039be8 	.word	0x00039be8
   24a8c:	00039c11 	.word	0x00039c11
   24a90:	00039c30 	.word	0x00039c30
   24a94:	00039987 	.word	0x00039987
   24a98:	00039c4d 	.word	0x00039c4d
   24a9c:	00039c67 	.word	0x00039c67
   24aa0:	00039c7c 	.word	0x00039c7c
   24aa4:	000375b7 	.word	0x000375b7
   24aa8:	00039cb1 	.word	0x00039cb1
   24aac:	00039ce0 	.word	0x00039ce0
   24ab0:	00039cf2 	.word	0x00039cf2
   24ab4:	00039d2a 	.word	0x00039d2a
   24ab8:	00039d48 	.word	0x00039d48
   24abc:	00039d6b 	.word	0x00039d6b
   24ac0:	0003987b 	.word	0x0003987b
   24ac4:	200220f8 	.word	0x200220f8

00024ac8 <download_client_start>:

int download_client_start(struct download_client *client, const char *file,
			  size_t from)
{
   24ac8:	b538      	push	{r3, r4, r5, lr}
	int err;

	if (client == NULL || client->fd < 0) {
   24aca:	4604      	mov	r4, r0
   24acc:	b320      	cbz	r0, 24b18 <download_client_start+0x50>
   24ace:	6803      	ldr	r3, [r0, #0]
   24ad0:	2b00      	cmp	r3, #0
   24ad2:	db21      	blt.n	24b18 <download_client_start+0x50>
		return -EINVAL;
	}

	client->file = file;
   24ad4:	f241 031c 	movw	r3, #4124	; 0x101c
   24ad8:	50c1      	str	r1, [r0, r3]
	client->file_size = 0;
   24ada:	2300      	movs	r3, #0
   24adc:	f241 0008 	movw	r0, #4104	; 0x1008
   24ae0:	5023      	str	r3, [r4, r0]
	client->progress = from;
   24ae2:	f241 000c 	movw	r0, #4108	; 0x100c
   24ae6:	5022      	str	r2, [r4, r0]

	client->offset = 0;
   24ae8:	f241 0004 	movw	r0, #4100	; 0x1004
   24aec:	5023      	str	r3, [r4, r0]
	client->has_header = false;
   24aee:	f241 0014 	movw	r0, #4116	; 0x1014
   24af2:	5423      	strb	r3, [r4, r0]

	LOG_INF("Downloading: %s [%u]", log_strdup(client->file),
   24af4:	4613      	mov	r3, r2
   24af6:	480a      	ldr	r0, [pc, #40]	; (24b20 <download_client_start+0x58>)
   24af8:	460a      	mov	r2, r1
   24afa:	2149      	movs	r1, #73	; 0x49
   24afc:	f00e fd0b 	bl	33516 <printk>
		client->progress);

	err = get_request_send(client);
   24b00:	4620      	mov	r0, r4
   24b02:	f7ff fb89 	bl	24218 <get_request_send>
	if (err) {
   24b06:	4605      	mov	r5, r0
   24b08:	b920      	cbnz	r0, 24b14 <download_client_start+0x4c>
		return err;
	}

	/* Let the thread run */
	k_thread_resume(client->tid);
   24b0a:	f241 032c 	movw	r3, #4140	; 0x102c
   24b0e:	58e0      	ldr	r0, [r4, r3]
	z_impl_k_thread_resume(thread);
   24b10:	f00c f8e8 	bl	30ce4 <z_impl_k_thread_resume>

	return 0;
}
   24b14:	4628      	mov	r0, r5
   24b16:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   24b18:	f06f 0515 	mvn.w	r5, #21
   24b1c:	e7fa      	b.n	24b14 <download_client_start+0x4c>
   24b1e:	bf00      	nop
   24b20:	00039d82 	.word	0x00039d82

00024b24 <download_with_offset>:

	return 0;
}

static void download_with_offset(struct k_work *unused)
{
   24b24:	b513      	push	{r0, r1, r4, lr}
	int offset;
	int err = dfu_target_offset_get(&offset);
   24b26:	a801      	add	r0, sp, #4
   24b28:	f000 fdd0 	bl	256cc <dfu_target_offset_get>

	err = download_client_start(&dlc, dlc.file, offset);
   24b2c:	f241 031c 	movw	r3, #4124	; 0x101c
   24b30:	4809      	ldr	r0, [pc, #36]	; (24b58 <download_with_offset+0x34>)
   24b32:	9a01      	ldr	r2, [sp, #4]
   24b34:	58c1      	ldr	r1, [r0, r3]
   24b36:	f7ff ffc7 	bl	24ac8 <download_client_start>
   24b3a:	4604      	mov	r4, r0

	LOG_INF("Downloading from offset: 0x%x", offset);
   24b3c:	2149      	movs	r1, #73	; 0x49
   24b3e:	9a01      	ldr	r2, [sp, #4]
   24b40:	4806      	ldr	r0, [pc, #24]	; (24b5c <download_with_offset+0x38>)
   24b42:	f00e fce8 	bl	33516 <printk>
	if (err != 0) {
   24b46:	b12c      	cbz	r4, 24b54 <download_with_offset+0x30>
		LOG_ERR("%s failed with error %d", __func__, err);
   24b48:	4623      	mov	r3, r4
   24b4a:	2145      	movs	r1, #69	; 0x45
   24b4c:	4a04      	ldr	r2, [pc, #16]	; (24b60 <download_with_offset+0x3c>)
   24b4e:	4805      	ldr	r0, [pc, #20]	; (24b64 <download_with_offset+0x40>)
   24b50:	f00e fce1 	bl	33516 <printk>
	}
}
   24b54:	b002      	add	sp, #8
   24b56:	bd10      	pop	{r4, pc}
   24b58:	20020000 	.word	0x20020000
   24b5c:	00039dac 	.word	0x00039dac
   24b60:	00039f03 	.word	0x00039f03
   24b64:	00039dcf 	.word	0x00039dcf

00024b68 <send_evt>:
	const struct fota_download_evt evt = {
   24b68:	2300      	movs	r3, #0
{
   24b6a:	b507      	push	{r0, r1, r2, lr}
	const struct fota_download_evt evt = {
   24b6c:	e9cd 3300 	strd	r3, r3, [sp]
	callback(&evt);
   24b70:	4b04      	ldr	r3, [pc, #16]	; (24b84 <send_evt+0x1c>)
	const struct fota_download_evt evt = {
   24b72:	f88d 0000 	strb.w	r0, [sp]
	callback(&evt);
   24b76:	681b      	ldr	r3, [r3, #0]
   24b78:	4668      	mov	r0, sp
   24b7a:	4798      	blx	r3
}
   24b7c:	b003      	add	sp, #12
   24b7e:	f85d fb04 	ldr.w	pc, [sp], #4
   24b82:	bf00      	nop
   24b84:	200223f4 	.word	0x200223f4

00024b88 <download_client_callback>:
{
   24b88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (event == NULL) {
   24b8a:	4605      	mov	r5, r0
   24b8c:	2800      	cmp	r0, #0
   24b8e:	f000 8096 	beq.w	24cbe <download_client_callback+0x136>
	switch (event->id) {
   24b92:	7803      	ldrb	r3, [r0, #0]
   24b94:	2b01      	cmp	r3, #1
   24b96:	d066      	beq.n	24c66 <download_client_callback+0xde>
   24b98:	2b02      	cmp	r3, #2
   24b9a:	d04c      	beq.n	24c36 <download_client_callback+0xae>
   24b9c:	2b00      	cmp	r3, #0
   24b9e:	d172      	bne.n	24c86 <download_client_callback+0xfe>
		if (first_fragment) {
   24ba0:	4f48      	ldr	r7, [pc, #288]	; (24cc4 <download_client_callback+0x13c>)
   24ba2:	783b      	ldrb	r3, [r7, #0]
   24ba4:	2b00      	cmp	r3, #0
   24ba6:	d036      	beq.n	24c16 <download_client_callback+0x8e>
			err = download_client_file_size_get(&dlc, &file_size);
   24ba8:	4e47      	ldr	r6, [pc, #284]	; (24cc8 <download_client_callback+0x140>)
   24baa:	4848      	ldr	r0, [pc, #288]	; (24ccc <download_client_callback+0x144>)
   24bac:	4631      	mov	r1, r6
   24bae:	f010 fd81 	bl	356b4 <download_client_file_size_get>
			if (err != 0) {
   24bb2:	4604      	mov	r4, r0
   24bb4:	b118      	cbz	r0, 24bbe <download_client_callback+0x36>
			send_evt(FOTA_DOWNLOAD_EVT_ERROR);
   24bb6:	2004      	movs	r0, #4
   24bb8:	f7ff ffd6 	bl	24b68 <send_evt>
			return err;
   24bbc:	e012      	b.n	24be4 <download_client_callback+0x5c>
			first_fragment = false;
   24bbe:	7038      	strb	r0, [r7, #0]
			int img_type = dfu_target_img_type(event->fragment.buf,
   24bc0:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
   24bc4:	f000 fd3e 	bl	25644 <dfu_target_img_type>
			err = dfu_target_init(img_type, file_size,
   24bc8:	4a41      	ldr	r2, [pc, #260]	; (24cd0 <download_client_callback+0x148>)
   24bca:	6831      	ldr	r1, [r6, #0]
   24bcc:	f000 fd56 	bl	2567c <dfu_target_init>
			if ((err < 0) && (err != -EBUSY)) {
   24bd0:	1e04      	subs	r4, r0, #0
   24bd2:	da0a      	bge.n	24bea <download_client_callback+0x62>
   24bd4:	f114 0f10 	cmn.w	r4, #16
   24bd8:	d007      	beq.n	24bea <download_client_callback+0x62>
				LOG_ERR("dfu_target_init error %d", err);
   24bda:	4622      	mov	r2, r4
   24bdc:	2145      	movs	r1, #69	; 0x45
   24bde:	483d      	ldr	r0, [pc, #244]	; (24cd4 <download_client_callback+0x14c>)
   24be0:	f00e fc99 	bl	33516 <printk>
}
   24be4:	4620      	mov	r0, r4
   24be6:	b003      	add	sp, #12
   24be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			err = dfu_target_offset_get(&offset);
   24bea:	a801      	add	r0, sp, #4
   24bec:	f000 fd6e 	bl	256cc <dfu_target_offset_get>
			if (err != 0) {
   24bf0:	b110      	cbz	r0, 24bf8 <download_client_callback+0x70>
				send_evt(FOTA_DOWNLOAD_EVT_ERROR);
   24bf2:	2004      	movs	r0, #4
   24bf4:	f7ff ffb8 	bl	24b68 <send_evt>
			if (offset != 0) {
   24bf8:	9b01      	ldr	r3, [sp, #4]
   24bfa:	b163      	cbz	r3, 24c16 <download_client_callback+0x8e>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   24bfc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   24c00:	4935      	ldr	r1, [pc, #212]	; (24cd8 <download_client_callback+0x150>)
   24c02:	4836      	ldr	r0, [pc, #216]	; (24cdc <download_client_callback+0x154>)
   24c04:	f00c f8c2 	bl	30d8c <k_delayed_work_submit_to_queue>
				LOG_INF("Refuse fragment, restart with offset");
   24c08:	2149      	movs	r1, #73	; 0x49
   24c0a:	4835      	ldr	r0, [pc, #212]	; (24ce0 <download_client_callback+0x158>)
   24c0c:	f00e fc83 	bl	33516 <printk>
				return -1;
   24c10:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   24c14:	e7e6      	b.n	24be4 <download_client_callback+0x5c>
		err = dfu_target_write(event->fragment.buf,
   24c16:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
   24c1a:	f000 fd61 	bl	256e0 <dfu_target_write>
		if (err != 0) {
   24c1e:	4604      	mov	r4, r0
   24c20:	2800      	cmp	r0, #0
   24c22:	d0df      	beq.n	24be4 <download_client_callback+0x5c>
			LOG_ERR("dfu_target_write error %d", err);
   24c24:	4602      	mov	r2, r0
   24c26:	2145      	movs	r1, #69	; 0x45
   24c28:	482e      	ldr	r0, [pc, #184]	; (24ce4 <download_client_callback+0x15c>)
   24c2a:	f00e fc74 	bl	33516 <printk>
			(void) download_client_disconnect(&dlc);
   24c2e:	4827      	ldr	r0, [pc, #156]	; (24ccc <download_client_callback+0x144>)
   24c30:	f7ff fd9a 	bl	24768 <download_client_disconnect>
   24c34:	e7bf      	b.n	24bb6 <download_client_callback+0x2e>
		err = dfu_target_done(true);
   24c36:	2001      	movs	r0, #1
   24c38:	f000 fd5e 	bl	256f8 <dfu_target_done>
		if (err != 0) {
   24c3c:	4604      	mov	r4, r0
   24c3e:	b128      	cbz	r0, 24c4c <download_client_callback+0xc4>
			LOG_ERR("dfu_target_done error: %d", err);
   24c40:	4602      	mov	r2, r0
   24c42:	2145      	movs	r1, #69	; 0x45
   24c44:	4828      	ldr	r0, [pc, #160]	; (24ce8 <download_client_callback+0x160>)
   24c46:	f00e fc66 	bl	33516 <printk>
			send_evt(FOTA_DOWNLOAD_EVT_ERROR);
   24c4a:	e7b4      	b.n	24bb6 <download_client_callback+0x2e>
		err = download_client_disconnect(&dlc);
   24c4c:	481f      	ldr	r0, [pc, #124]	; (24ccc <download_client_callback+0x144>)
   24c4e:	f7ff fd8b 	bl	24768 <download_client_disconnect>
		if (err != 0) {
   24c52:	4604      	mov	r4, r0
   24c54:	2800      	cmp	r0, #0
   24c56:	d1ae      	bne.n	24bb6 <download_client_callback+0x2e>
		send_evt(FOTA_DOWNLOAD_EVT_FINISHED);
   24c58:	2001      	movs	r0, #1
   24c5a:	f7ff ff85 	bl	24b68 <send_evt>
		first_fragment = true;
   24c5e:	2201      	movs	r2, #1
   24c60:	4b18      	ldr	r3, [pc, #96]	; (24cc4 <download_client_callback+0x13c>)
   24c62:	701a      	strb	r2, [r3, #0]
		break;
   24c64:	e7be      	b.n	24be4 <download_client_callback+0x5c>
		if ((socket_retries_left) && ((event->error == -ENOTCONN) ||
   24c66:	4c21      	ldr	r4, [pc, #132]	; (24cec <download_client_callback+0x164>)
   24c68:	6822      	ldr	r2, [r4, #0]
   24c6a:	b172      	cbz	r2, 24c8a <download_client_callback+0x102>
   24c6c:	6843      	ldr	r3, [r0, #4]
   24c6e:	f113 0f80 	cmn.w	r3, #128	; 0x80
   24c72:	d001      	beq.n	24c78 <download_client_callback+0xf0>
   24c74:	3368      	adds	r3, #104	; 0x68
   24c76:	d108      	bne.n	24c8a <download_client_callback+0x102>
			LOG_WRN("Download socket error. %d retries left...",
   24c78:	2157      	movs	r1, #87	; 0x57
   24c7a:	481d      	ldr	r0, [pc, #116]	; (24cf0 <download_client_callback+0x168>)
   24c7c:	f00e fc4b 	bl	33516 <printk>
			socket_retries_left--;
   24c80:	6823      	ldr	r3, [r4, #0]
   24c82:	3b01      	subs	r3, #1
   24c84:	6023      	str	r3, [r4, #0]
	switch (event->id) {
   24c86:	2400      	movs	r4, #0
   24c88:	e7ac      	b.n	24be4 <download_client_callback+0x5c>
			download_client_disconnect(&dlc);
   24c8a:	4810      	ldr	r0, [pc, #64]	; (24ccc <download_client_callback+0x144>)
   24c8c:	f7ff fd6c 	bl	24768 <download_client_disconnect>
			LOG_ERR("Download client error");
   24c90:	2145      	movs	r1, #69	; 0x45
   24c92:	4818      	ldr	r0, [pc, #96]	; (24cf4 <download_client_callback+0x16c>)
   24c94:	f00e fc3f 	bl	33516 <printk>
			err = dfu_target_done(false);
   24c98:	2000      	movs	r0, #0
   24c9a:	f000 fd2d 	bl	256f8 <dfu_target_done>
			if (err == -EACCES) {
   24c9e:	f110 0f0d 	cmn.w	r0, #13
   24ca2:	d004      	beq.n	24cae <download_client_callback+0x126>
			} else if (err != 0) {
   24ca4:	b118      	cbz	r0, 24cae <download_client_callback+0x126>
				LOG_ERR("Unable to deinitialze resources "
   24ca6:	2145      	movs	r1, #69	; 0x45
   24ca8:	4813      	ldr	r0, [pc, #76]	; (24cf8 <download_client_callback+0x170>)
   24caa:	f00e fc34 	bl	33516 <printk>
			first_fragment = true;
   24cae:	2201      	movs	r2, #1
   24cb0:	4b04      	ldr	r3, [pc, #16]	; (24cc4 <download_client_callback+0x13c>)
			send_evt(FOTA_DOWNLOAD_EVT_ERROR);
   24cb2:	2004      	movs	r0, #4
			first_fragment = true;
   24cb4:	701a      	strb	r2, [r3, #0]
			send_evt(FOTA_DOWNLOAD_EVT_ERROR);
   24cb6:	f7ff ff57 	bl	24b68 <send_evt>
			return event->error;
   24cba:	686c      	ldr	r4, [r5, #4]
   24cbc:	e792      	b.n	24be4 <download_client_callback+0x5c>
		return -EINVAL;
   24cbe:	f06f 0415 	mvn.w	r4, #21
   24cc2:	e78f      	b.n	24be4 <download_client_callback+0x5c>
   24cc4:	2002978c 	.word	0x2002978c
   24cc8:	20022418 	.word	0x20022418
   24ccc:	20020000 	.word	0x20020000
   24cd0:	000356cb 	.word	0x000356cb
   24cd4:	00039dec 	.word	0x00039dec
   24cd8:	200223f8 	.word	0x200223f8
   24cdc:	20023f18 	.word	0x20023f18
   24ce0:	00039e0a 	.word	0x00039e0a
   24ce4:	00039e34 	.word	0x00039e34
   24ce8:	00039e53 	.word	0x00039e53
   24cec:	2002241c 	.word	0x2002241c
   24cf0:	00039e72 	.word	0x00039e72
   24cf4:	00039ea1 	.word	0x00039ea1
   24cf8:	00039ebc 	.word	0x00039ebc

00024cfc <fota_download_start>:

int fota_download_start(const char *host, const char *file, int sec_tag)
{
	int err = -1;

	struct download_client_cfg config = {
   24cfc:	2300      	movs	r3, #0
{
   24cfe:	b530      	push	{r4, r5, lr}
   24d00:	b085      	sub	sp, #20
   24d02:	460d      	mov	r5, r1
	struct download_client_cfg config = {
   24d04:	e9cd 2302 	strd	r2, r3, [sp, #8]
		.sec_tag = sec_tag,
	};

	if (host == NULL || file == NULL || callback == NULL) {
   24d08:	4601      	mov	r1, r0
	struct download_client_cfg config = {
   24d0a:	9301      	str	r3, [sp, #4]
	if (host == NULL || file == NULL || callback == NULL) {
   24d0c:	b1c8      	cbz	r0, 24d42 <fota_download_start+0x46>
   24d0e:	b1c5      	cbz	r5, 24d42 <fota_download_start+0x46>
   24d10:	4b0d      	ldr	r3, [pc, #52]	; (24d48 <fota_download_start+0x4c>)
   24d12:	681b      	ldr	r3, [r3, #0]
   24d14:	b1ab      	cbz	r3, 24d42 <fota_download_start+0x46>
		return -EINVAL;
	}

	socket_retries_left = CONFIG_FOTA_SOCKET_RETRIES;
   24d16:	2202      	movs	r2, #2
   24d18:	4b0c      	ldr	r3, [pc, #48]	; (24d4c <fota_download_start+0x50>)
		LOG_INF("B1 update, selected file:\n%s", update);
		file = update;
	}
#endif /* PM_S1_ADDRESS */

	err = download_client_connect(&dlc, host, &config);
   24d1a:	480d      	ldr	r0, [pc, #52]	; (24d50 <fota_download_start+0x54>)
	socket_retries_left = CONFIG_FOTA_SOCKET_RETRIES;
   24d1c:	601a      	str	r2, [r3, #0]
	err = download_client_connect(&dlc, host, &config);
   24d1e:	aa01      	add	r2, sp, #4
   24d20:	f7ff fb56 	bl	243d0 <download_client_connect>
	if (err != 0) {
   24d24:	4604      	mov	r4, r0
   24d26:	b948      	cbnz	r0, 24d3c <fota_download_start+0x40>
		return err;
	}

	err = download_client_start(&dlc, file, 0);
   24d28:	4602      	mov	r2, r0
   24d2a:	4629      	mov	r1, r5
   24d2c:	4808      	ldr	r0, [pc, #32]	; (24d50 <fota_download_start+0x54>)
   24d2e:	f7ff fecb 	bl	24ac8 <download_client_start>
	if (err != 0) {
   24d32:	4604      	mov	r4, r0
   24d34:	b110      	cbz	r0, 24d3c <fota_download_start+0x40>
		download_client_disconnect(&dlc);
   24d36:	4806      	ldr	r0, [pc, #24]	; (24d50 <fota_download_start+0x54>)
   24d38:	f7ff fd16 	bl	24768 <download_client_disconnect>
		return err;
	}

	return 0;
}
   24d3c:	4620      	mov	r0, r4
   24d3e:	b005      	add	sp, #20
   24d40:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   24d42:	f06f 0415 	mvn.w	r4, #21
   24d46:	e7f9      	b.n	24d3c <fota_download_start+0x40>
   24d48:	200223f4 	.word	0x200223f4
   24d4c:	2002241c 	.word	0x2002241c
   24d50:	20020000 	.word	0x20020000

00024d54 <fota_download_init>:

int fota_download_init(fota_download_callback_t client_callback)
{
   24d54:	b508      	push	{r3, lr}
	if (client_callback == NULL) {
   24d56:	b158      	cbz	r0, 24d70 <fota_download_init+0x1c>
		return -EINVAL;
	}

	callback = client_callback;
   24d58:	4b07      	ldr	r3, [pc, #28]	; (24d78 <fota_download_init+0x24>)

	k_delayed_work_init(&dlc_with_offset_work, download_with_offset);
   24d5a:	4908      	ldr	r1, [pc, #32]	; (24d7c <fota_download_init+0x28>)
	callback = client_callback;
   24d5c:	6018      	str	r0, [r3, #0]
	k_delayed_work_init(&dlc_with_offset_work, download_with_offset);
   24d5e:	4808      	ldr	r0, [pc, #32]	; (24d80 <fota_download_init+0x2c>)
   24d60:	f010 fe3d 	bl	359de <k_delayed_work_init>
	if (err != 0) {
		return err;
	}

	return 0;
}
   24d64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	int err = download_client_init(&dlc, download_client_callback);
   24d68:	4906      	ldr	r1, [pc, #24]	; (24d84 <fota_download_init+0x30>)
   24d6a:	4807      	ldr	r0, [pc, #28]	; (24d88 <fota_download_init+0x34>)
   24d6c:	f7ff bb08 	b.w	24380 <download_client_init>
}
   24d70:	f06f 0015 	mvn.w	r0, #21
   24d74:	bd08      	pop	{r3, pc}
   24d76:	bf00      	nop
   24d78:	200223f4 	.word	0x200223f4
   24d7c:	00024b25 	.word	0x00024b25
   24d80:	200223f8 	.word	0x200223f8
   24d84:	00024b89 	.word	0x00024b89
   24d88:	20020000 	.word	0x20020000

00024d8c <construct_topic>:
 */
#define TOPIC_TEMPLATE "$aws/things/%s/jobs/%s%s%s%s"
static int construct_topic(const u8_t *client_id, const u8_t *job_id,
			   const struct topic_conf *conf, u8_t *out_buf,
			   struct mqtt_topic *topic, bool remove_suffix)
{
   24d8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   24d90:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
   24d94:	460c      	mov	r4, r1
   24d96:	4615      	mov	r5, r2
   24d98:	461e      	mov	r6, r3
	if (client_id == NULL || job_id == NULL || conf == NULL ||
   24d9a:	4607      	mov	r7, r0
   24d9c:	2800      	cmp	r0, #0
   24d9e:	d044      	beq.n	24e2a <construct_topic+0x9e>
   24da0:	2900      	cmp	r1, #0
   24da2:	d042      	beq.n	24e2a <construct_topic+0x9e>
   24da4:	6853      	ldr	r3, [r2, #4]
   24da6:	2b00      	cmp	r3, #0
   24da8:	d03f      	beq.n	24e2a <construct_topic+0x9e>
	    conf->name == NULL || conf->suffix == NULL ||
   24daa:	f8d2 8008 	ldr.w	r8, [r2, #8]
   24dae:	f1b8 0f00 	cmp.w	r8, #0
   24db2:	d03a      	beq.n	24e2a <construct_topic+0x9e>
   24db4:	2e00      	cmp	r6, #0
   24db6:	d038      	beq.n	24e2a <construct_topic+0x9e>
	    out_buf == NULL || topic == NULL) {
		return -EINVAL;
	}

	const char *suffix = remove_suffix  ? "" : conf->suffix;
   24db8:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
   24dbc:	f8df a080 	ldr.w	sl, [pc, #128]	; 24e40 <construct_topic+0xb4>
	const char *slash_after_job_id = strlen(job_id) > 0 ? "/" : "";
   24dc0:	4608      	mov	r0, r1
	const char *suffix = remove_suffix  ? "" : conf->suffix;
   24dc2:	2b00      	cmp	r3, #0
   24dc4:	bf18      	it	ne
   24dc6:	46d0      	movne	r8, sl
	const char *slash_after_job_id = strlen(job_id) > 0 ? "/" : "";
   24dc8:	f7f8 f992 	bl	1d0f0 <strlen>
   24dcc:	4b18      	ldr	r3, [pc, #96]	; (24e30 <construct_topic+0xa4>)
	int ret = snprintf(out_buf, AWS_JOBS_TOPIC_MAX_LEN, TOPIC_TEMPLATE,
   24dce:	9400      	str	r4, [sp, #0]
	const char *slash_after_job_id = strlen(job_id) > 0 ? "/" : "";
   24dd0:	2800      	cmp	r0, #0
   24dd2:	bf14      	ite	ne
   24dd4:	4618      	movne	r0, r3
   24dd6:	4650      	moveq	r0, sl
	int ret = snprintf(out_buf, AWS_JOBS_TOPIC_MAX_LEN, TOPIC_TEMPLATE,
   24dd8:	686b      	ldr	r3, [r5, #4]
   24dda:	2195      	movs	r1, #149	; 0x95
   24ddc:	e9cd 0301 	strd	r0, r3, [sp, #4]
   24de0:	4a14      	ldr	r2, [pc, #80]	; (24e34 <construct_topic+0xa8>)
   24de2:	463b      	mov	r3, r7
   24de4:	4630      	mov	r0, r6
   24de6:	f8cd 800c 	str.w	r8, [sp, #12]
   24dea:	f00d f9bb 	bl	32164 <sniprintf>
			client_id, job_id, slash_after_job_id, conf->name,
			suffix);

	if (ret >= AWS_JOBS_TOPIC_MAX_LEN) {
   24dee:	2894      	cmp	r0, #148	; 0x94
	int ret = snprintf(out_buf, AWS_JOBS_TOPIC_MAX_LEN, TOPIC_TEMPLATE,
   24df0:	4604      	mov	r4, r0
	if (ret >= AWS_JOBS_TOPIC_MAX_LEN) {
   24df2:	dd0a      	ble.n	24e0a <construct_topic+0x7e>
		LOG_ERR("Unable to fit formated string into to allocate "
   24df4:	2145      	movs	r1, #69	; 0x45
   24df6:	686a      	ldr	r2, [r5, #4]
   24df8:	480f      	ldr	r0, [pc, #60]	; (24e38 <construct_topic+0xac>)
   24dfa:	f00e fb8c 	bl	33516 <printk>
			"memory for %s", log_strdup(conf->name));
		return -ENOMEM;
   24dfe:	f06f 040b 	mvn.w	r4, #11

	topic->topic.size = ret;
	topic->topic.utf8 = out_buf;
	topic->qos = MQTT_QOS_1_AT_LEAST_ONCE;
	return 0;
}
   24e02:	4620      	mov	r0, r4
   24e04:	b004      	add	sp, #16
   24e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (ret < 0) {
   24e0a:	2800      	cmp	r0, #0
   24e0c:	da06      	bge.n	24e1c <construct_topic+0x90>
		LOG_ERR("Output error for %s was encountered with return value "
   24e0e:	4603      	mov	r3, r0
   24e10:	2145      	movs	r1, #69	; 0x45
   24e12:	686a      	ldr	r2, [r5, #4]
   24e14:	4809      	ldr	r0, [pc, #36]	; (24e3c <construct_topic+0xb0>)
   24e16:	f00e fb7e 	bl	33516 <printk>
		return ret;
   24e1a:	e7f2      	b.n	24e02 <construct_topic+0x76>
	topic->qos = MQTT_QOS_1_AT_LEAST_ONCE;
   24e1c:	2301      	movs	r3, #1
	return 0;
   24e1e:	2400      	movs	r4, #0
	topic->topic.utf8 = out_buf;
   24e20:	e9c9 6000 	strd	r6, r0, [r9]
	topic->qos = MQTT_QOS_1_AT_LEAST_ONCE;
   24e24:	f889 3008 	strb.w	r3, [r9, #8]
	return 0;
   24e28:	e7eb      	b.n	24e02 <construct_topic+0x76>
		return -EINVAL;
   24e2a:	f06f 0415 	mvn.w	r4, #21
   24e2e:	e7e8      	b.n	24e02 <construct_topic+0x76>
   24e30:	000375b7 	.word	0x000375b7
   24e34:	00039f18 	.word	0x00039f18
   24e38:	00039f35 	.word	0x00039f35
   24e3c:	00039f77 	.word	0x00039f77
   24e40:	00038d12 	.word	0x00038d12

00024e44 <reg_topic>:

static int reg_topic(struct mqtt_client *const client, u8_t *topic_buf,
		     struct topic_conf const *conf, const u8_t *job_id,
		     bool subscribe)
{
   24e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24e48:	b088      	sub	sp, #32
   24e4a:	460f      	mov	r7, r1
   24e4c:	4615      	mov	r5, r2
   24e4e:	4619      	mov	r1, r3
	if (client == NULL) {
   24e50:	4604      	mov	r4, r0
{
   24e52:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
	if (client == NULL) {
   24e56:	b330      	cbz	r0, 24ea6 <reg_topic+0x62>
		return -EINVAL;
	}

	struct mqtt_topic topic;
	int err = construct_topic(client->client_id.utf8, job_id, conf,
   24e58:	2300      	movs	r3, #0
   24e5a:	ae05      	add	r6, sp, #20
   24e5c:	9301      	str	r3, [sp, #4]
   24e5e:	9600      	str	r6, [sp, #0]
   24e60:	463b      	mov	r3, r7
   24e62:	6c40      	ldr	r0, [r0, #68]	; 0x44
   24e64:	f7ff ff92 	bl	24d8c <construct_topic>
				  topic_buf, &topic, false);

	const struct mqtt_subscription_list subscription_list = {
   24e68:	2301      	movs	r3, #1
   24e6a:	f8ad 3010 	strh.w	r3, [sp, #16]
   24e6e:	682b      	ldr	r3, [r5, #0]
   24e70:	9603      	str	r6, [sp, #12]
   24e72:	f8ad 3012 	strh.w	r3, [sp, #18]
		.list = &topic,
		.list_count = 1,
		.message_id = conf->msg_id
	};

	if (err) {
   24e76:	b958      	cbnz	r0, 24e90 <reg_topic+0x4c>
		return err;
	}

	if (subscribe) {
		LOG_INF("Subscribe: %s", log_strdup(topic.topic.utf8));
   24e78:	2149      	movs	r1, #73	; 0x49
   24e7a:	9a05      	ldr	r2, [sp, #20]
	if (subscribe) {
   24e7c:	f1b8 0f00 	cmp.w	r8, #0
   24e80:	d009      	beq.n	24e96 <reg_topic+0x52>
		LOG_INF("Subscribe: %s", log_strdup(topic.topic.utf8));
   24e82:	480a      	ldr	r0, [pc, #40]	; (24eac <reg_topic+0x68>)
   24e84:	f00e fb47 	bl	33516 <printk>
		return mqtt_subscribe(client, &subscription_list);
   24e88:	4620      	mov	r0, r4
   24e8a:	a903      	add	r1, sp, #12
   24e8c:	f00f fb78 	bl	34580 <mqtt_subscribe>
	}

	LOG_INF("Unsubscribe: %s", log_strdup(topic.topic.utf8));
	return mqtt_unsubscribe(client, &subscription_list);
}
   24e90:	b008      	add	sp, #32
   24e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LOG_INF("Unsubscribe: %s", log_strdup(topic.topic.utf8));
   24e96:	4806      	ldr	r0, [pc, #24]	; (24eb0 <reg_topic+0x6c>)
   24e98:	f00e fb3d 	bl	33516 <printk>
	return mqtt_unsubscribe(client, &subscription_list);
   24e9c:	4620      	mov	r0, r4
   24e9e:	a903      	add	r1, sp, #12
   24ea0:	f00f fb95 	bl	345ce <mqtt_unsubscribe>
   24ea4:	e7f4      	b.n	24e90 <reg_topic+0x4c>
		return -EINVAL;
   24ea6:	f06f 0015 	mvn.w	r0, #21
   24eaa:	e7f1      	b.n	24e90 <reg_topic+0x4c>
   24eac:	00039fb5 	.word	0x00039fb5
   24eb0:	00039fc8 	.word	0x00039fc8

00024eb4 <publish>:
}

static int publish(struct mqtt_client *const client, const u8_t *job_id,
		   const struct topic_conf *conf, u8_t *payload_data,
		   size_t payload_data_len, u8_t *topic_buf)
{
   24eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
   24eb6:	461e      	mov	r6, r3
	struct mqtt_topic topic;

	int ret = construct_topic(client->client_id.utf8, job_id, conf,
   24eb8:	2301      	movs	r3, #1
{
   24eba:	b08d      	sub	sp, #52	; 0x34
	int ret = construct_topic(client->client_id.utf8, job_id, conf,
   24ebc:	af03      	add	r7, sp, #12
   24ebe:	9301      	str	r3, [sp, #4]
   24ec0:	9700      	str	r7, [sp, #0]
{
   24ec2:	4604      	mov	r4, r0
	int ret = construct_topic(client->client_id.utf8, job_id, conf,
   24ec4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   24ec6:	6c40      	ldr	r0, [r0, #68]	; 0x44
   24ec8:	f7ff ff60 	bl	24d8c <construct_topic>
				  topic_buf, &topic, true);

	if (ret) {
   24ecc:	b9f8      	cbnz	r0, 24f0e <publish+0x5a>
		return ret;
	}

	LOG_INF("Publish topic: %s", log_strdup(topic.topic.utf8));
   24ece:	2149      	movs	r1, #73	; 0x49
   24ed0:	9a03      	ldr	r2, [sp, #12]
   24ed2:	4810      	ldr	r0, [pc, #64]	; (24f14 <publish+0x60>)
   24ed4:	f00e fb1f 	bl	33516 <printk>
	LOG_INF("Publish payload %s", log_strdup(payload_data));
   24ed8:	4632      	mov	r2, r6
   24eda:	2149      	movs	r1, #73	; 0x49
   24edc:	480e      	ldr	r0, [pc, #56]	; (24f18 <publish+0x64>)
   24ede:	f00e fb1a 	bl	33516 <printk>

	struct mqtt_publish_param param = {
   24ee2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   24ee6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   24ee8:	ad06      	add	r5, sp, #24
   24eea:	e885 0007 	stmia.w	r5, {r0, r1, r2}
   24eee:	930a      	str	r3, [sp, #40]	; 0x28
   24ef0:	9609      	str	r6, [sp, #36]	; 0x24
		.message.topic = topic,
		.message.payload.data = payload_data,
		.message.payload.len = payload_data_len,
		.message_id = sys_rand32_get(),
   24ef2:	f7fc fef1 	bl	21cd8 <sys_rand32_get>
	struct mqtt_publish_param param = {
   24ef6:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
   24efa:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
   24efe:	f023 0303 	bic.w	r3, r3, #3
		.dup_flag = 0,
		.retain_flag = 0,
	};

	return mqtt_publish(client, &param);
   24f02:	4629      	mov	r1, r5
   24f04:	4620      	mov	r0, r4
	struct mqtt_publish_param param = {
   24f06:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	return mqtt_publish(client, &param);
   24f0a:	f00f fabb 	bl	34484 <mqtt_publish>
}
   24f0e:	b00d      	add	sp, #52	; 0x34
   24f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24f12:	bf00      	nop
   24f14:	00039fdd 	.word	0x00039fdd
   24f18:	00039ff4 	.word	0x00039ff4

00024f1c <aws_jobs_subscribe_topic_notify_next>:
	return reg_topic(client, topic_buf, &TOPIC_NOTIFY_NEXT_CONF, "", true);
   24f1c:	2301      	movs	r3, #1
{
   24f1e:	b507      	push	{r0, r1, r2, lr}
	return reg_topic(client, topic_buf, &TOPIC_NOTIFY_NEXT_CONF, "", true);
   24f20:	4a03      	ldr	r2, [pc, #12]	; (24f30 <aws_jobs_subscribe_topic_notify_next+0x14>)
   24f22:	9300      	str	r3, [sp, #0]
   24f24:	4b03      	ldr	r3, [pc, #12]	; (24f34 <aws_jobs_subscribe_topic_notify_next+0x18>)
   24f26:	f7ff ff8d 	bl	24e44 <reg_topic>
}
   24f2a:	b003      	add	sp, #12
   24f2c:	f85d fb04 	ldr.w	pc, [sp], #4
   24f30:	00037164 	.word	0x00037164
   24f34:	00038d12 	.word	0x00038d12

00024f38 <aws_jobs_subscribe_topic_get>:
{
   24f38:	b507      	push	{r0, r1, r2, lr}
   24f3a:	460b      	mov	r3, r1
   24f3c:	4611      	mov	r1, r2
	return reg_topic(client, topic_buf, &TOPIC_GET_CONF, job_id, true);
   24f3e:	2201      	movs	r2, #1
   24f40:	9200      	str	r2, [sp, #0]
   24f42:	4a03      	ldr	r2, [pc, #12]	; (24f50 <aws_jobs_subscribe_topic_get+0x18>)
   24f44:	f7ff ff7e 	bl	24e44 <reg_topic>
}
   24f48:	b003      	add	sp, #12
   24f4a:	f85d fb04 	ldr.w	pc, [sp], #4
   24f4e:	bf00      	nop
   24f50:	00037158 	.word	0x00037158

00024f54 <aws_jobs_subscribe_topic_update>:
{
   24f54:	b507      	push	{r0, r1, r2, lr}
   24f56:	460b      	mov	r3, r1
   24f58:	4611      	mov	r1, r2
	return reg_topic(client, topic_buf, &TOPIC_UPDATE_CONF, job_id, true);
   24f5a:	2201      	movs	r2, #1
   24f5c:	9200      	str	r2, [sp, #0]
   24f5e:	4a03      	ldr	r2, [pc, #12]	; (24f6c <aws_jobs_subscribe_topic_update+0x18>)
   24f60:	f7ff ff70 	bl	24e44 <reg_topic>
}
   24f64:	b003      	add	sp, #12
   24f66:	f85d fb04 	ldr.w	pc, [sp], #4
   24f6a:	bf00      	nop
   24f6c:	00037170 	.word	0x00037170

00024f70 <aws_jobs_update_job_execution>:
				  const u8_t *job_id,
				  enum execution_status status,
				  const u8_t *status_details,
				  int expected_version,
				  const u8_t *client_token, u8_t *topic_buf)
{
   24f70:	b570      	push	{r4, r5, r6, lr}
   24f72:	f5ad 6dab 	sub.w	sp, sp, #1368	; 0x558
   24f76:	460e      	mov	r6, r1
   24f78:	f8dd 156c 	ldr.w	r1, [sp, #1388]	; 0x56c
   24f7c:	4605      	mov	r5, r0
	/* The rest of the parameters are checked later */
	if (client_token == NULL) {
   24f7e:	b3a1      	cbz	r1, 24fea <aws_jobs_update_job_execution+0x7a>
	 * is actually 32kb set it to what is the limiting factor which is the
	 * MQTT buffer size for reception.
	 */
	u8_t update_job_payload[CONFIG_UPDATE_JOB_PAYLOAD_LEN];

	int ret = snprintf(update_job_payload, sizeof(update_job_payload),
   24f80:	481b      	ldr	r0, [pc, #108]	; (24ff0 <aws_jobs_update_job_execution+0x80>)
   24f82:	9102      	str	r1, [sp, #8]
   24f84:	2b00      	cmp	r3, #0
   24f86:	bf08      	it	eq
   24f88:	4603      	moveq	r3, r0
   24f8a:	f8dd 1568 	ldr.w	r1, [sp, #1384]	; 0x568
   24f8e:	a804      	add	r0, sp, #16
   24f90:	e9cd 3100 	strd	r3, r1, [sp]
   24f94:	4b17      	ldr	r3, [pc, #92]	; (24ff4 <aws_jobs_update_job_execution+0x84>)
   24f96:	f240 5146 	movw	r1, #1350	; 0x546
   24f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   24f9e:	4a16      	ldr	r2, [pc, #88]	; (24ff8 <aws_jobs_update_job_execution+0x88>)
   24fa0:	f00d f8e0 	bl	32164 <sniprintf>
			   UPDATE_JOB_PAYLOAD, execution_status_strings[status],
			   (status_details ? (char *)status_details : "null"),
			   expected_version, client_token);

	if (ret >= CONFIG_UPDATE_JOB_PAYLOAD_LEN) {
   24fa4:	f240 5345 	movw	r3, #1349	; 0x545
   24fa8:	4298      	cmp	r0, r3
	int ret = snprintf(update_job_payload, sizeof(update_job_payload),
   24faa:	4604      	mov	r4, r0
	if (ret >= CONFIG_UPDATE_JOB_PAYLOAD_LEN) {
   24fac:	dd09      	ble.n	24fc2 <aws_jobs_update_job_execution+0x52>
		LOG_ERR("Unable to fit formated string in provided buffer.");
   24fae:	2145      	movs	r1, #69	; 0x45
   24fb0:	4812      	ldr	r0, [pc, #72]	; (24ffc <aws_jobs_update_job_execution+0x8c>)
   24fb2:	f00e fab0 	bl	33516 <printk>
		return -ENOMEM;
   24fb6:	f06f 040b 	mvn.w	r4, #11
	}

	return publish(client, job_id, &TOPIC_UPDATE_CONF, update_job_payload,
		       ret, topic_buf);

}
   24fba:	4620      	mov	r0, r4
   24fbc:	f50d 6dab 	add.w	sp, sp, #1368	; 0x558
   24fc0:	bd70      	pop	{r4, r5, r6, pc}
	} else if (ret < 0) {
   24fc2:	2800      	cmp	r0, #0
   24fc4:	da05      	bge.n	24fd2 <aws_jobs_update_job_execution+0x62>
		LOG_ERR("Error when creating payload %d", ret);
   24fc6:	4602      	mov	r2, r0
   24fc8:	2145      	movs	r1, #69	; 0x45
   24fca:	480d      	ldr	r0, [pc, #52]	; (25000 <aws_jobs_update_job_execution+0x90>)
   24fcc:	f00e faa3 	bl	33516 <printk>
		return ret;
   24fd0:	e7f3      	b.n	24fba <aws_jobs_update_job_execution+0x4a>
	return publish(client, job_id, &TOPIC_UPDATE_CONF, update_job_payload,
   24fd2:	f8dd 3570 	ldr.w	r3, [sp, #1392]	; 0x570
   24fd6:	4631      	mov	r1, r6
   24fd8:	e9cd 0300 	strd	r0, r3, [sp]
   24fdc:	4a09      	ldr	r2, [pc, #36]	; (25004 <aws_jobs_update_job_execution+0x94>)
   24fde:	4628      	mov	r0, r5
   24fe0:	ab04      	add	r3, sp, #16
   24fe2:	f7ff ff67 	bl	24eb4 <publish>
   24fe6:	4604      	mov	r4, r0
   24fe8:	e7e7      	b.n	24fba <aws_jobs_update_job_execution+0x4a>
		return -EINVAL;
   24fea:	f06f 0415 	mvn.w	r4, #21
   24fee:	e7e4      	b.n	24fba <aws_jobs_update_job_execution+0x4a>
   24ff0:	000390fd 	.word	0x000390fd
   24ff4:	0003717c 	.word	0x0003717c
   24ff8:	0003a00c 	.word	0x0003a00c
   24ffc:	0003a05c 	.word	0x0003a05c
   25000:	0003a093 	.word	0x0003a093
   25004:	00037170 	.word	0x00037170

00025008 <aws_jobs_get_job_execution>:

#define JOB_ID_GET_PAYLOAD "{\"clientToken\": \"\"}"
int aws_jobs_get_job_execution(struct mqtt_client *const client,
			       const char *job_id, u8_t *topic_buf)
{
   25008:	b530      	push	{r4, r5, lr}
	return publish(client, job_id, &TOPIC_GET_CONF, JOB_ID_GET_PAYLOAD,
   2500a:	4b09      	ldr	r3, [pc, #36]	; (25030 <aws_jobs_get_job_execution+0x28>)
{
   2500c:	b085      	sub	sp, #20
   2500e:	4604      	mov	r4, r0
	return publish(client, job_id, &TOPIC_GET_CONF, JOB_ID_GET_PAYLOAD,
   25010:	4618      	mov	r0, r3
{
   25012:	4615      	mov	r5, r2
   25014:	9103      	str	r1, [sp, #12]
	return publish(client, job_id, &TOPIC_GET_CONF, JOB_ID_GET_PAYLOAD,
   25016:	f7f8 f86b 	bl	1d0f0 <strlen>
   2501a:	4b05      	ldr	r3, [pc, #20]	; (25030 <aws_jobs_get_job_execution+0x28>)
   2501c:	e9cd 0500 	strd	r0, r5, [sp]
   25020:	4a04      	ldr	r2, [pc, #16]	; (25034 <aws_jobs_get_job_execution+0x2c>)
   25022:	4620      	mov	r0, r4
   25024:	9903      	ldr	r1, [sp, #12]
   25026:	f7ff ff45 	bl	24eb4 <publish>
		       strlen(JOB_ID_GET_PAYLOAD), topic_buf);
}
   2502a:	b005      	add	sp, #20
   2502c:	bd30      	pop	{r4, r5, pc}
   2502e:	bf00      	nop
   25030:	0003a0b7 	.word	0x0003a0b7
   25034:	00037158 	.word	0x00037158

00025038 <update_job_execution.constprop.0>:
 * @param[in] client_token  Client identifier which will be repeated in the
 *			    respone of the update.
 *
 * @return 0 If successful otherwise a negative error code is returned.
 */
static int update_job_execution(struct mqtt_client *const client,
   25038:	460a      	mov	r2, r1
   2503a:	b510      	push	{r4, lr}
	while (!accepted) {
   2503c:	4c10      	ldr	r4, [pc, #64]	; (25080 <update_job_execution.constprop.0+0x48>)
static int update_job_execution(struct mqtt_client *const client,
   2503e:	b086      	sub	sp, #24
	while (!accepted) {
   25040:	7823      	ldrb	r3, [r4, #0]
   25042:	b1ab      	cbz	r3, 25070 <update_job_execution.constprop.0+0x38>
{
	int ret;

	/* Waiting for the previous call to this function to be accepted. */
	wait_for_update_accepted();
	accepted = false;
   25044:	2300      	movs	r3, #0
	LOG_DBG("%s, state: %d, version_number: %d", __func__,
		state, execution_version_number);

	ret = aws_jobs_update_job_execution(client, job_id, state,
   25046:	490f      	ldr	r1, [pc, #60]	; (25084 <update_job_execution.constprop.0+0x4c>)
	accepted = false;
   25048:	7023      	strb	r3, [r4, #0]
	ret = aws_jobs_update_job_execution(client, job_id, state,
   2504a:	9102      	str	r1, [sp, #8]
   2504c:	490e      	ldr	r1, [pc, #56]	; (25088 <update_job_execution.constprop.0+0x50>)
   2504e:	9101      	str	r1, [sp, #4]
   25050:	490e      	ldr	r1, [pc, #56]	; (2508c <update_job_execution.constprop.0+0x54>)
   25052:	6809      	ldr	r1, [r1, #0]
   25054:	9100      	str	r1, [sp, #0]
   25056:	490e      	ldr	r1, [pc, #56]	; (25090 <update_job_execution.constprop.0+0x58>)
   25058:	f7ff ff8a 	bl	24f70 <aws_jobs_update_job_execution>
						 NULL,
					     execution_version_number,
					     client_token, update_topic);

	if (ret < 0) {
   2505c:	1e04      	subs	r4, r0, #0
   2505e:	da04      	bge.n	2506a <update_job_execution.constprop.0+0x32>
		LOG_ERR("aws_jobs_update_job_execution failed: %d", ret);
   25060:	4622      	mov	r2, r4
   25062:	2145      	movs	r1, #69	; 0x45
   25064:	480b      	ldr	r0, [pc, #44]	; (25094 <update_job_execution.constprop.0+0x5c>)
   25066:	f00e fa56 	bl	33516 <printk>
	}

	return ret;
}
   2506a:	4620      	mov	r0, r4
   2506c:	b006      	add	sp, #24
   2506e:	bd10      	pop	{r4, pc}
   25070:	e9cd 0204 	strd	r0, r2, [sp, #16]
	z_impl_k_yield();
   25074:	f00b fa02 	bl	3047c <z_impl_k_yield>
   25078:	e9dd 0204 	ldrd	r0, r2, [sp, #16]
}
   2507c:	e7e0      	b.n	25040 <update_job_execution.constprop.0+0x8>
   2507e:	bf00      	nop
   25080:	2002978d 	.word	0x2002978d
   25084:	20025ac9 	.word	0x20025ac9
   25088:	00038d12 	.word	0x00038d12
   2508c:	20022428 	.word	0x20022428
   25090:	200254ad 	.word	0x200254ad
   25094:	0003a132 	.word	0x0003a132

00025098 <http_fota_handler>:
		return 1;
	}
}

static void http_fota_handler(const struct fota_download_evt *evt)
{
   25098:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__ASSERT_NO_MSG(c != NULL);
   2509a:	4c28      	ldr	r4, [pc, #160]	; (2513c <http_fota_handler+0xa4>)
{
   2509c:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(c != NULL);
   2509e:	6823      	ldr	r3, [r4, #0]
   250a0:	b95b      	cbnz	r3, 250ba <http_fota_handler+0x22>
   250a2:	4927      	ldr	r1, [pc, #156]	; (25140 <http_fota_handler+0xa8>)
   250a4:	4827      	ldr	r0, [pc, #156]	; (25144 <http_fota_handler+0xac>)
   250a6:	f240 13cf 	movw	r3, #463	; 0x1cf
   250aa:	4a27      	ldr	r2, [pc, #156]	; (25148 <http_fota_handler+0xb0>)
   250ac:	f00e fa33 	bl	33516 <printk>
   250b0:	f240 11cf 	movw	r1, #463	; 0x1cf
   250b4:	4824      	ldr	r0, [pc, #144]	; (25148 <http_fota_handler+0xb0>)
   250b6:	f00e fa74 	bl	335a2 <assert_post_action>

	int err = 0;
	struct aws_fota_event aws_fota_evt;

	switch (evt->id) {
   250ba:	782b      	ldrb	r3, [r5, #0]
   250bc:	2b04      	cmp	r3, #4
   250be:	d81e      	bhi.n	250fe <http_fota_handler+0x66>
   250c0:	e8df f003 	tbb	[pc, r3]
   250c4:	251f0336 	.word	0x251f0336
   250c8:	27          	.byte	0x27
   250c9:	00          	.byte	0x00
	case FOTA_DOWNLOAD_EVT_FINISHED:
		LOG_INF("FOTA download completed evt received");
   250ca:	2149      	movs	r1, #73	; 0x49
   250cc:	481f      	ldr	r0, [pc, #124]	; (2514c <http_fota_handler+0xb4>)
   250ce:	f00e fa22 	bl	33516 <printk>

		/* Always send download complete progress */
		aws_fota_evt.id = AWS_FOTA_EVT_DL_PROGRESS;
   250d2:	2305      	movs	r3, #5
   250d4:	f88d 3000 	strb.w	r3, [sp]
		aws_fota_evt.dl.progress = AWS_FOTA_EVT_DL_COMPLETE_VAL;
   250d8:	2364      	movs	r3, #100	; 0x64
		callback(&aws_fota_evt);

		fota_state = APPLY_UPDATE;
   250da:	2602      	movs	r6, #2
		callback(&aws_fota_evt);
   250dc:	4d1c      	ldr	r5, [pc, #112]	; (25150 <http_fota_handler+0xb8>)
   250de:	4668      	mov	r0, sp
		aws_fota_evt.dl.progress = AWS_FOTA_EVT_DL_COMPLETE_VAL;
   250e0:	9301      	str	r3, [sp, #4]
		callback(&aws_fota_evt);
   250e2:	682b      	ldr	r3, [r5, #0]
   250e4:	4798      	blx	r3
		fota_state = APPLY_UPDATE;
   250e6:	4b1b      	ldr	r3, [pc, #108]	; (25154 <http_fota_handler+0xbc>)
		err = update_job_execution(c, job_id, AWS_JOBS_IN_PROGRESS, "");
   250e8:	2101      	movs	r1, #1
   250ea:	6820      	ldr	r0, [r4, #0]
		fota_state = APPLY_UPDATE;
   250ec:	701e      	strb	r6, [r3, #0]
		err = update_job_execution(c, job_id, AWS_JOBS_IN_PROGRESS, "");
   250ee:	f7ff ffa3 	bl	25038 <update_job_execution.constprop.0>
		if (err != 0) {
   250f2:	b120      	cbz	r0, 250fe <http_fota_handler+0x66>
			aws_fota_evt.id = AWS_FOTA_EVT_ERROR;
			callback(&aws_fota_evt);
   250f4:	682b      	ldr	r3, [r5, #0]
			aws_fota_evt.id = AWS_FOTA_EVT_ERROR;
   250f6:	f88d 6000 	strb.w	r6, [sp]
	case FOTA_DOWNLOAD_EVT_PROGRESS:
		/* Only if CONFIG_FOTA_DOWNLOAD_PROGRESS_EVT is enabled */
		download_progress = evt->progress;
		aws_fota_evt.id = AWS_FOTA_EVT_DL_PROGRESS;
		aws_fota_evt.dl.progress = download_progress;
		callback(&aws_fota_evt);
   250fa:	4668      	mov	r0, sp
   250fc:	4798      	blx	r3
		break;
	}
}
   250fe:	b002      	add	sp, #8
   25100:	bd70      	pop	{r4, r5, r6, pc}
		aws_fota_evt.id = AWS_FOTA_EVT_ERASE_PENDING;
   25102:	2303      	movs	r3, #3
		aws_fota_evt.id = AWS_FOTA_EVT_ERROR;
   25104:	f88d 3000 	strb.w	r3, [sp]
		callback(&aws_fota_evt);
   25108:	4b11      	ldr	r3, [pc, #68]	; (25150 <http_fota_handler+0xb8>)
   2510a:	681b      	ldr	r3, [r3, #0]
   2510c:	e7f5      	b.n	250fa <http_fota_handler+0x62>
		aws_fota_evt.id = AWS_FOTA_EVT_ERASE_DONE;
   2510e:	2304      	movs	r3, #4
   25110:	e7f8      	b.n	25104 <http_fota_handler+0x6c>
		LOG_ERR("FOTA download failed, report back");
   25112:	2145      	movs	r1, #69	; 0x45
   25114:	4810      	ldr	r0, [pc, #64]	; (25158 <http_fota_handler+0xc0>)
   25116:	f00e f9fe 	bl	33516 <printk>
		fota_state = NONE;
   2511a:	2300      	movs	r3, #0
   2511c:	4a0d      	ldr	r2, [pc, #52]	; (25154 <http_fota_handler+0xbc>)
		(void)update_job_execution(c, job_id, AWS_JOBS_FAILED, "");
   2511e:	2103      	movs	r1, #3
		fota_state = NONE;
   25120:	7013      	strb	r3, [r2, #0]
		execution_state = AWS_JOBS_QUEUED;
   25122:	4a0e      	ldr	r2, [pc, #56]	; (2515c <http_fota_handler+0xc4>)
		(void)update_job_execution(c, job_id, AWS_JOBS_FAILED, "");
   25124:	6820      	ldr	r0, [r4, #0]
		execution_state = AWS_JOBS_QUEUED;
   25126:	7013      	strb	r3, [r2, #0]
		(void)update_job_execution(c, job_id, AWS_JOBS_FAILED, "");
   25128:	f7ff ff86 	bl	25038 <update_job_execution.constprop.0>
		aws_fota_evt.id = AWS_FOTA_EVT_ERROR;
   2512c:	2302      	movs	r3, #2
   2512e:	e7e9      	b.n	25104 <http_fota_handler+0x6c>
		aws_fota_evt.id = AWS_FOTA_EVT_DL_PROGRESS;
   25130:	2205      	movs	r2, #5
		download_progress = evt->progress;
   25132:	686b      	ldr	r3, [r5, #4]
		aws_fota_evt.id = AWS_FOTA_EVT_DL_PROGRESS;
   25134:	f88d 2000 	strb.w	r2, [sp]
		aws_fota_evt.dl.progress = download_progress;
   25138:	9301      	str	r3, [sp, #4]
   2513a:	e7e5      	b.n	25108 <http_fota_handler+0x70>
   2513c:	20022420 	.word	0x20022420
   25140:	0003a197 	.word	0x0003a197
   25144:	00037a66 	.word	0x00037a66
   25148:	0003a160 	.word	0x0003a160
   2514c:	0003a1a8 	.word	0x0003a1a8
   25150:	20022424 	.word	0x20022424
   25154:	20025318 	.word	0x20025318
   25158:	0003a1d2 	.word	0x0003a1d2
   2515c:	20025218 	.word	0x20025218

00025160 <get_published_payload.constprop.0>:
	if (length > sizeof(payload_buf)) {
   25160:	f240 5346 	movw	r3, #1350	; 0x546
static int get_published_payload(struct mqtt_client *client, u8_t *write_buf,
   25164:	b570      	push	{r4, r5, r6, lr}
	u8_t *end = buf + length;
   25166:	4c0d      	ldr	r4, [pc, #52]	; (2519c <get_published_payload.constprop.0+0x3c>)
	if (length > sizeof(payload_buf)) {
   25168:	4299      	cmp	r1, r3
static int get_published_payload(struct mqtt_client *client, u8_t *write_buf,
   2516a:	4605      	mov	r5, r0
	u8_t *end = buf + length;
   2516c:	eb04 0601 	add.w	r6, r4, r1
	if (length > sizeof(payload_buf)) {
   25170:	d80d      	bhi.n	2518e <get_published_payload.constprop.0+0x2e>
	while (buf < end) {
   25172:	42a6      	cmp	r6, r4
   25174:	d801      	bhi.n	2517a <get_published_payload.constprop.0+0x1a>
	return 0;
   25176:	2000      	movs	r0, #0
}
   25178:	bd70      	pop	{r4, r5, r6, pc}
		int ret = mqtt_read_publish_payload_blocking(client, buf,
   2517a:	4621      	mov	r1, r4
   2517c:	4628      	mov	r0, r5
   2517e:	1b32      	subs	r2, r6, r4
   25180:	f00f fabf 	bl	34702 <mqtt_read_publish_payload_blocking>
		if (ret < 0) {
   25184:	2800      	cmp	r0, #0
   25186:	dbf7      	blt.n	25178 <get_published_payload.constprop.0+0x18>
		} else if (ret == 0) {
   25188:	d004      	beq.n	25194 <get_published_payload.constprop.0+0x34>
		buf += ret;
   2518a:	4404      	add	r4, r0
   2518c:	e7f1      	b.n	25172 <get_published_payload.constprop.0+0x12>
		return -EMSGSIZE;
   2518e:	f06f 0079 	mvn.w	r0, #121	; 0x79
   25192:	e7f1      	b.n	25178 <get_published_payload.constprop.0+0x18>
			return -EIO;
   25194:	f06f 0004 	mvn.w	r0, #4
   25198:	e7ee      	b.n	25178 <get_published_payload.constprop.0+0x18>
   2519a:	bf00      	nop
   2519c:	20025583 	.word	0x20025583

000251a0 <aws_fota_mqtt_evt_handler>:
{
   251a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   251a4:	780b      	ldrb	r3, [r1, #0]
   251a6:	4606      	mov	r6, r0
   251a8:	460d      	mov	r5, r1
   251aa:	b086      	sub	sp, #24
   251ac:	2b07      	cmp	r3, #7
   251ae:	d80b      	bhi.n	251c8 <aws_fota_mqtt_evt_handler+0x28>
   251b0:	e8df f013 	tbh	[pc, r3, lsl #1]
   251b4:	000a0008 	.word	0x000a0008
   251b8:	01210024 	.word	0x01210024
   251bc:	000a000a 	.word	0x000a000a
   251c0:	012b000a 	.word	0x012b000a
		if (evt->result != 0) {
   251c4:	69cb      	ldr	r3, [r1, #28]
   251c6:	b10b      	cbz	r3, 251cc <aws_fota_mqtt_evt_handler+0x2c>
	switch (evt->type) {
   251c8:	2401      	movs	r4, #1
   251ca:	e008      	b.n	251de <aws_fota_mqtt_evt_handler+0x3e>
		err = aws_jobs_subscribe_topic_notify_next(client,
   251cc:	49a2      	ldr	r1, [pc, #648]	; (25458 <aws_fota_mqtt_evt_handler+0x2b8>)
   251ce:	f7ff fea5 	bl	24f1c <aws_jobs_subscribe_topic_notify_next>
		if (err) {
   251d2:	4604      	mov	r4, r0
   251d4:	b138      	cbz	r0, 251e6 <aws_fota_mqtt_evt_handler+0x46>
			LOG_ERR("Unable to subscribe to notify-next topic");
   251d6:	2145      	movs	r1, #69	; 0x45
   251d8:	48a0      	ldr	r0, [pc, #640]	; (2545c <aws_fota_mqtt_evt_handler+0x2bc>)
			LOG_ERR("Unable to subscribe to jobs/$next/get");
   251da:	f00e f99c 	bl	33516 <printk>
}
   251de:	4620      	mov	r0, r4
   251e0:	b006      	add	sp, #24
   251e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		err = aws_jobs_subscribe_topic_get(client, "$next", get_topic);
   251e6:	4630      	mov	r0, r6
   251e8:	4a9d      	ldr	r2, [pc, #628]	; (25460 <aws_fota_mqtt_evt_handler+0x2c0>)
   251ea:	499e      	ldr	r1, [pc, #632]	; (25464 <aws_fota_mqtt_evt_handler+0x2c4>)
   251ec:	f7ff fea4 	bl	24f38 <aws_jobs_subscribe_topic_get>
		if (err) {
   251f0:	4604      	mov	r4, r0
   251f2:	2800      	cmp	r0, #0
   251f4:	d0e8      	beq.n	251c8 <aws_fota_mqtt_evt_handler+0x28>
			LOG_ERR("Unable to subscribe to jobs/$next/get");
   251f6:	2145      	movs	r1, #69	; 0x45
   251f8:	489b      	ldr	r0, [pc, #620]	; (25468 <aws_fota_mqtt_evt_handler+0x2c8>)
   251fa:	e7ee      	b.n	251da <aws_fota_mqtt_evt_handler+0x3a>
		err = on_publish_evt(client,
   251fc:	e9d1 1201 	ldrd	r1, r2, [r1, #4]
		aws_jobs_cmp(get_topic, topic, topic_len, "");
   25200:	4b9a      	ldr	r3, [pc, #616]	; (2546c <aws_fota_mqtt_evt_handler+0x2cc>)
   25202:	4897      	ldr	r0, [pc, #604]	; (25460 <aws_fota_mqtt_evt_handler+0x2c0>)
   25204:	e9cd 1202 	strd	r1, r2, [sp, #8]
		err = on_publish_evt(client,
   25208:	696f      	ldr	r7, [r5, #20]
		aws_jobs_cmp(get_topic, topic, topic_len, "");
   2520a:	f010 fa68 	bl	356de <aws_jobs_cmp>
		aws_jobs_cmp(get_topic, topic, topic_len, "accepted");
   2520e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   25212:	4b97      	ldr	r3, [pc, #604]	; (25470 <aws_fota_mqtt_evt_handler+0x2d0>)
		aws_jobs_cmp(get_topic, topic, topic_len, "");
   25214:	4681      	mov	r9, r0
		aws_jobs_cmp(get_topic, topic, topic_len, "accepted");
   25216:	4892      	ldr	r0, [pc, #584]	; (25460 <aws_fota_mqtt_evt_handler+0x2c0>)
   25218:	f010 fa61 	bl	356de <aws_jobs_cmp>
		aws_jobs_cmp(notify_next_topic, topic, topic_len, "");
   2521c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   25220:	4b92      	ldr	r3, [pc, #584]	; (2546c <aws_fota_mqtt_evt_handler+0x2cc>)
		aws_jobs_cmp(get_topic, topic, topic_len, "accepted");
   25222:	4680      	mov	r8, r0
		aws_jobs_cmp(notify_next_topic, topic, topic_len, "");
   25224:	488c      	ldr	r0, [pc, #560]	; (25458 <aws_fota_mqtt_evt_handler+0x2b8>)
   25226:	f010 fa5a 	bl	356de <aws_jobs_cmp>
		aws_jobs_cmp(update_topic, topic, topic_len, "accepted");
   2522a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
		aws_jobs_cmp(notify_next_topic, topic, topic_len, "");
   2522e:	4682      	mov	sl, r0
		aws_jobs_cmp(update_topic, topic, topic_len, "accepted");
   25230:	4b8f      	ldr	r3, [pc, #572]	; (25470 <aws_fota_mqtt_evt_handler+0x2d0>)
   25232:	4890      	ldr	r0, [pc, #576]	; (25474 <aws_fota_mqtt_evt_handler+0x2d4>)
   25234:	f010 fa53 	bl	356de <aws_jobs_cmp>
		aws_jobs_cmp(update_topic, topic, topic_len, "rejected");
   25238:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
		aws_jobs_cmp(update_topic, topic, topic_len, "accepted");
   2523c:	4604      	mov	r4, r0
		aws_jobs_cmp(update_topic, topic, topic_len, "rejected");
   2523e:	4b8e      	ldr	r3, [pc, #568]	; (25478 <aws_fota_mqtt_evt_handler+0x2d8>)
   25240:	488c      	ldr	r0, [pc, #560]	; (25474 <aws_fota_mqtt_evt_handler+0x2d4>)
   25242:	f010 fa4c 	bl	356de <aws_jobs_cmp>
	if (is_notify_next_topic || is_get_next_topic || is_get_accepted) {
   25246:	f1ba 0f00 	cmp.w	sl, #0
   2524a:	d105      	bne.n	25258 <aws_fota_mqtt_evt_handler+0xb8>
   2524c:	f1b9 0f00 	cmp.w	r9, #0
   25250:	d102      	bne.n	25258 <aws_fota_mqtt_evt_handler+0xb8>
   25252:	f1b8 0f00 	cmp.w	r8, #0
   25256:	d043      	beq.n	252e0 <aws_fota_mqtt_evt_handler+0x140>
		LOG_INF("Checking for an available job");
   25258:	2149      	movs	r1, #73	; 0x49
   2525a:	4888      	ldr	r0, [pc, #544]	; (2547c <aws_fota_mqtt_evt_handler+0x2dc>)
   2525c:	f00e f95b 	bl	33516 <printk>
	int err = get_published_payload(client, payload_buf, payload_len);
   25260:	4639      	mov	r1, r7
   25262:	4630      	mov	r0, r6
   25264:	f7ff ff7c 	bl	25160 <get_published_payload.constprop.0>
	if (err) {
   25268:	4604      	mov	r4, r0
   2526a:	b118      	cbz	r0, 25274 <aws_fota_mqtt_evt_handler+0xd4>
		LOG_ERR("Error when getting the payload: %d", err);
   2526c:	4622      	mov	r2, r4
   2526e:	2145      	movs	r1, #69	; 0x45
   25270:	4883      	ldr	r0, [pc, #524]	; (25480 <aws_fota_mqtt_evt_handler+0x2e0>)
   25272:	e021      	b.n	252b8 <aws_fota_mqtt_evt_handler+0x118>
	err = aws_fota_parse_DescribeJobExecution_rsp(payload_buf, payload_len,
   25274:	4b83      	ldr	r3, [pc, #524]	; (25484 <aws_fota_mqtt_evt_handler+0x2e4>)
   25276:	4639      	mov	r1, r7
   25278:	9301      	str	r3, [sp, #4]
   2527a:	4b83      	ldr	r3, [pc, #524]	; (25488 <aws_fota_mqtt_evt_handler+0x2e8>)
   2527c:	4a83      	ldr	r2, [pc, #524]	; (2548c <aws_fota_mqtt_evt_handler+0x2ec>)
   2527e:	9300      	str	r3, [sp, #0]
   25280:	4883      	ldr	r0, [pc, #524]	; (25490 <aws_fota_mqtt_evt_handler+0x2f0>)
   25282:	4b84      	ldr	r3, [pc, #528]	; (25494 <aws_fota_mqtt_evt_handler+0x2f4>)
   25284:	f000 f95c 	bl	25540 <aws_fota_parse_DescribeJobExecution_rsp>
	if (err < 0) {
   25288:	1e04      	subs	r4, r0, #0
   2528a:	da05      	bge.n	25298 <aws_fota_mqtt_evt_handler+0xf8>
		LOG_ERR("Error when parsing the json: %d", err);
   2528c:	4622      	mov	r2, r4
   2528e:	2145      	movs	r1, #69	; 0x45
   25290:	4881      	ldr	r0, [pc, #516]	; (25498 <aws_fota_mqtt_evt_handler+0x2f8>)
   25292:	f00e f940 	bl	33516 <printk>
		if (err < 0) {
   25296:	e7a2      	b.n	251de <aws_fota_mqtt_evt_handler+0x3e>
	} else if (err == 0) {
   25298:	d104      	bne.n	252a4 <aws_fota_mqtt_evt_handler+0x104>
		LOG_INF("No queued jobs for this device");
   2529a:	2149      	movs	r1, #73	; 0x49
   2529c:	487f      	ldr	r0, [pc, #508]	; (2549c <aws_fota_mqtt_evt_handler+0x2fc>)
		LOG_INF("Ready to reboot");
   2529e:	f00e f93a 	bl	33516 <printk>
		if (err < 0) {
   252a2:	e00f      	b.n	252c4 <aws_fota_mqtt_evt_handler+0x124>
	err = aws_jobs_subscribe_topic_update(client, job_id, update_topic);
   252a4:	4630      	mov	r0, r6
   252a6:	4a73      	ldr	r2, [pc, #460]	; (25474 <aws_fota_mqtt_evt_handler+0x2d4>)
   252a8:	4978      	ldr	r1, [pc, #480]	; (2548c <aws_fota_mqtt_evt_handler+0x2ec>)
   252aa:	f7ff fe53 	bl	24f54 <aws_jobs_subscribe_topic_update>
	if (err) {
   252ae:	4604      	mov	r4, r0
   252b0:	b128      	cbz	r0, 252be <aws_fota_mqtt_evt_handler+0x11e>
		LOG_ERR("Error when subscribing job_id_update: "
   252b2:	2145      	movs	r1, #69	; 0x45
   252b4:	4602      	mov	r2, r0
   252b6:	487a      	ldr	r0, [pc, #488]	; (254a0 <aws_fota_mqtt_evt_handler+0x300>)
		LOG_ERR("Error %d when getting the payload", err);
   252b8:	f00e f92d 	bl	33516 <printk>
		return job_update_rejected(client, payload_len);
   252bc:	e058      	b.n	25370 <aws_fota_mqtt_evt_handler+0x1d0>
	fota_state = DOWNLOAD_FIRMWARE;
   252be:	2201      	movs	r2, #1
   252c0:	4b78      	ldr	r3, [pc, #480]	; (254a4 <aws_fota_mqtt_evt_handler+0x304>)
   252c2:	701a      	strb	r2, [r3, #0]
		if (p->message.topic.qos == MQTT_QOS_1_AT_LEAST_ONCE) {
   252c4:	7b2b      	ldrb	r3, [r5, #12]
   252c6:	2b01      	cmp	r3, #1
   252c8:	f040 809d 	bne.w	25406 <aws_fota_mqtt_evt_handler+0x266>
			const struct mqtt_puback_param ack = {
   252cc:	8b2b      	ldrh	r3, [r5, #24]
			err = mqtt_publish_qos1_ack(c, &ack);
   252ce:	a904      	add	r1, sp, #16
			const struct mqtt_puback_param ack = {
   252d0:	f8ad 3010 	strh.w	r3, [sp, #16]
			err = mqtt_publish_qos1_ack(c, &ack);
   252d4:	4b74      	ldr	r3, [pc, #464]	; (254a8 <aws_fota_mqtt_evt_handler+0x308>)
   252d6:	6818      	ldr	r0, [r3, #0]
   252d8:	f00f f902 	bl	344e0 <mqtt_publish_qos1_ack>
			err = update_job_execution(client, job_id,
   252dc:	4604      	mov	r4, r0
			if (err) {
   252de:	e77e      	b.n	251de <aws_fota_mqtt_evt_handler+0x3e>
	} else if (doc_update_accepted) {
   252e0:	2c00      	cmp	r4, #0
   252e2:	d05e      	beq.n	253a2 <aws_fota_mqtt_evt_handler+0x202>
	int err = get_published_payload(client, payload_buf, payload_len);
   252e4:	4639      	mov	r1, r7
   252e6:	4630      	mov	r0, r6
   252e8:	f7ff ff3a 	bl	25160 <get_published_payload.constprop.0>
	if (err) {
   252ec:	4604      	mov	r4, r0
   252ee:	2800      	cmp	r0, #0
   252f0:	d1bc      	bne.n	2526c <aws_fota_mqtt_evt_handler+0xcc>
	accepted = true;
   252f2:	2201      	movs	r2, #1
	execution_version_number++;
   252f4:	4963      	ldr	r1, [pc, #396]	; (25484 <aws_fota_mqtt_evt_handler+0x2e4>)
	accepted = true;
   252f6:	4b6d      	ldr	r3, [pc, #436]	; (254ac <aws_fota_mqtt_evt_handler+0x30c>)
	if (execution_state != AWS_JOBS_IN_PROGRESS
   252f8:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 254e4 <aws_fota_mqtt_evt_handler+0x344>
	accepted = true;
   252fc:	701a      	strb	r2, [r3, #0]
	execution_version_number++;
   252fe:	680b      	ldr	r3, [r1, #0]
   25300:	4413      	add	r3, r2
   25302:	600b      	str	r3, [r1, #0]
	if (execution_state != AWS_JOBS_IN_PROGRESS
   25304:	f898 3000 	ldrb.w	r3, [r8]
   25308:	4966      	ldr	r1, [pc, #408]	; (254a4 <aws_fota_mqtt_evt_handler+0x304>)
   2530a:	4293      	cmp	r3, r2
   2530c:	780f      	ldrb	r7, [r1, #0]
   2530e:	d01c      	beq.n	2534a <aws_fota_mqtt_evt_handler+0x1aa>
	    && fota_state == DOWNLOAD_FIRMWARE) {
   25310:	4297      	cmp	r7, r2
   25312:	d133      	bne.n	2537c <aws_fota_mqtt_evt_handler+0x1dc>
		LOG_INF("Start downloading firmware from %s/%s",
   25314:	2149      	movs	r1, #73	; 0x49
		struct aws_fota_event aws_fota_evt = {
   25316:	e9cd 0004 	strd	r0, r0, [sp, #16]
		LOG_INF("Start downloading firmware from %s/%s",
   2531a:	4b5b      	ldr	r3, [pc, #364]	; (25488 <aws_fota_mqtt_evt_handler+0x2e8>)
   2531c:	4a5d      	ldr	r2, [pc, #372]	; (25494 <aws_fota_mqtt_evt_handler+0x2f4>)
   2531e:	4864      	ldr	r0, [pc, #400]	; (254b0 <aws_fota_mqtt_evt_handler+0x310>)
		execution_state = AWS_JOBS_IN_PROGRESS;
   25320:	f888 7000 	strb.w	r7, [r8]
		LOG_INF("Start downloading firmware from %s/%s",
   25324:	f00e f8f7 	bl	33516 <printk>
		err = fota_download_start(hostname, file_path, sec_tag);
   25328:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2532c:	4956      	ldr	r1, [pc, #344]	; (25488 <aws_fota_mqtt_evt_handler+0x2e8>)
   2532e:	4859      	ldr	r0, [pc, #356]	; (25494 <aws_fota_mqtt_evt_handler+0x2f4>)
   25330:	f7ff fce4 	bl	24cfc <fota_download_start>
		if (err) {
   25334:	4604      	mov	r4, r0
   25336:	b118      	cbz	r0, 25340 <aws_fota_mqtt_evt_handler+0x1a0>
			LOG_ERR("Error (%d) when trying to start firmware "
   25338:	4602      	mov	r2, r0
   2533a:	2145      	movs	r1, #69	; 0x45
   2533c:	485d      	ldr	r0, [pc, #372]	; (254b4 <aws_fota_mqtt_evt_handler+0x314>)
   2533e:	e7bb      	b.n	252b8 <aws_fota_mqtt_evt_handler+0x118>
		callback(&aws_fota_evt);
   25340:	4b5d      	ldr	r3, [pc, #372]	; (254b8 <aws_fota_mqtt_evt_handler+0x318>)
   25342:	a804      	add	r0, sp, #16
   25344:	681b      	ldr	r3, [r3, #0]
   25346:	4798      	blx	r3
		if (err < 0) {
   25348:	e7bc      	b.n	252c4 <aws_fota_mqtt_evt_handler+0x124>
		   && fota_state == APPLY_UPDATE) {
   2534a:	2f02      	cmp	r7, #2
   2534c:	d1ba      	bne.n	252c4 <aws_fota_mqtt_evt_handler+0x124>
		LOG_INF("Firmware download completed");
   2534e:	2149      	movs	r1, #73	; 0x49
   25350:	485a      	ldr	r0, [pc, #360]	; (254bc <aws_fota_mqtt_evt_handler+0x31c>)
   25352:	f00e f8e0 	bl	33516 <printk>
		err = update_job_execution(client, job_id, execution_state, "");
   25356:	4639      	mov	r1, r7
   25358:	4630      	mov	r0, r6
		execution_state = AWS_JOBS_SUCCEEDED;
   2535a:	f888 7000 	strb.w	r7, [r8]
		err = update_job_execution(client, job_id, execution_state, "");
   2535e:	f7ff fe6b 	bl	25038 <update_job_execution.constprop.0>
		if (err) {
   25362:	4604      	mov	r4, r0
   25364:	2800      	cmp	r0, #0
   25366:	d0ad      	beq.n	252c4 <aws_fota_mqtt_evt_handler+0x124>
			LOG_ERR("Unable to update the job execution");
   25368:	2145      	movs	r1, #69	; 0x45
   2536a:	4855      	ldr	r0, [pc, #340]	; (254c0 <aws_fota_mqtt_evt_handler+0x320>)
   2536c:	f00e f8d3 	bl	33516 <printk>
		if (err < 0) {
   25370:	2c00      	cmp	r4, #0
   25372:	f6ff af34 	blt.w	251de <aws_fota_mqtt_evt_handler+0x3e>
		} else if (err == 1) {
   25376:	2c01      	cmp	r4, #1
   25378:	d1a4      	bne.n	252c4 <aws_fota_mqtt_evt_handler+0x124>
   2537a:	e725      	b.n	251c8 <aws_fota_mqtt_evt_handler+0x28>
	} else if (execution_state == AWS_JOBS_SUCCEEDED &&
   2537c:	2b02      	cmp	r3, #2
   2537e:	d1a1      	bne.n	252c4 <aws_fota_mqtt_evt_handler+0x124>
   25380:	2f02      	cmp	r7, #2
   25382:	d19f      	bne.n	252c4 <aws_fota_mqtt_evt_handler+0x124>
		callback(&aws_fota_evt);
   25384:	4b4c      	ldr	r3, [pc, #304]	; (254b8 <aws_fota_mqtt_evt_handler+0x318>)
		struct aws_fota_event aws_fota_evt = {
   25386:	e9cd 0004 	strd	r0, r0, [sp, #16]
		callback(&aws_fota_evt);
   2538a:	681b      	ldr	r3, [r3, #0]
		struct aws_fota_event aws_fota_evt = {
   2538c:	f88d 2010 	strb.w	r2, [sp, #16]
		callback(&aws_fota_evt);
   25390:	a804      	add	r0, sp, #16
   25392:	4798      	blx	r3
		LOG_INF("Job document updated with SUCCEDED");
   25394:	2149      	movs	r1, #73	; 0x49
   25396:	484b      	ldr	r0, [pc, #300]	; (254c4 <aws_fota_mqtt_evt_handler+0x324>)
   25398:	f00e f8bd 	bl	33516 <printk>
		LOG_INF("Ready to reboot");
   2539c:	2149      	movs	r1, #73	; 0x49
   2539e:	484a      	ldr	r0, [pc, #296]	; (254c8 <aws_fota_mqtt_evt_handler+0x328>)
   253a0:	e77d      	b.n	2529e <aws_fota_mqtt_evt_handler+0xfe>
	} else if (doc_update_rejected) {
   253a2:	2800      	cmp	r0, #0
   253a4:	f43f af10 	beq.w	251c8 <aws_fota_mqtt_evt_handler+0x28>
		LOG_ERR("Job document update was rejected");
   253a8:	2145      	movs	r1, #69	; 0x45
   253aa:	4848      	ldr	r0, [pc, #288]	; (254cc <aws_fota_mqtt_evt_handler+0x32c>)
   253ac:	f00e f8b3 	bl	33516 <printk>
	struct aws_fota_event aws_fota_evt = { .id = AWS_FOTA_EVT_ERROR };
   253b0:	2302      	movs	r3, #2
	LOG_ERR("Job document update was rejected");
   253b2:	2145      	movs	r1, #69	; 0x45
   253b4:	4845      	ldr	r0, [pc, #276]	; (254cc <aws_fota_mqtt_evt_handler+0x32c>)
	struct aws_fota_event aws_fota_evt = { .id = AWS_FOTA_EVT_ERROR };
   253b6:	e9cd 4404 	strd	r4, r4, [sp, #16]
   253ba:	f88d 3010 	strb.w	r3, [sp, #16]
	LOG_ERR("Job document update was rejected");
   253be:	f00e f8aa 	bl	33516 <printk>
	execution_version_number--;
   253c2:	4a30      	ldr	r2, [pc, #192]	; (25484 <aws_fota_mqtt_evt_handler+0x2e4>)
	int err = get_published_payload(client, payload_buf, payload_len);
   253c4:	4639      	mov	r1, r7
	execution_version_number--;
   253c6:	6813      	ldr	r3, [r2, #0]
	int err = get_published_payload(client, payload_buf, payload_len);
   253c8:	4630      	mov	r0, r6
	execution_version_number--;
   253ca:	3b01      	subs	r3, #1
   253cc:	6013      	str	r3, [r2, #0]
	int err = get_published_payload(client, payload_buf, payload_len);
   253ce:	f7ff fec7 	bl	25160 <get_published_payload.constprop.0>
	if (err) {
   253d2:	4604      	mov	r4, r0
   253d4:	b118      	cbz	r0, 253de <aws_fota_mqtt_evt_handler+0x23e>
		LOG_ERR("Error %d when getting the payload", err);
   253d6:	4602      	mov	r2, r0
   253d8:	2145      	movs	r1, #69	; 0x45
   253da:	483d      	ldr	r0, [pc, #244]	; (254d0 <aws_fota_mqtt_evt_handler+0x330>)
   253dc:	e76c      	b.n	252b8 <aws_fota_mqtt_evt_handler+0x118>
	LOG_ERR("%s", log_strdup(payload_buf));
   253de:	2145      	movs	r1, #69	; 0x45
   253e0:	4a2b      	ldr	r2, [pc, #172]	; (25490 <aws_fota_mqtt_evt_handler+0x2f0>)
   253e2:	483c      	ldr	r0, [pc, #240]	; (254d4 <aws_fota_mqtt_evt_handler+0x334>)
   253e4:	f00e f897 	bl	33516 <printk>
	callback(&aws_fota_evt);
   253e8:	4b33      	ldr	r3, [pc, #204]	; (254b8 <aws_fota_mqtt_evt_handler+0x318>)
   253ea:	a804      	add	r0, sp, #16
   253ec:	681b      	ldr	r3, [r3, #0]
   253ee:	4798      	blx	r3
	return -EFAULT;
   253f0:	f06f 040d 	mvn.w	r4, #13
   253f4:	e6f3      	b.n	251de <aws_fota_mqtt_evt_handler+0x3e>
		if (evt->result != 0) {
   253f6:	69ca      	ldr	r2, [r1, #28]
   253f8:	2a00      	cmp	r2, #0
   253fa:	f43f aee5 	beq.w	251c8 <aws_fota_mqtt_evt_handler+0x28>
			LOG_ERR("MQTT PUBACK error %d", evt->result);
   253fe:	2145      	movs	r1, #69	; 0x45
   25400:	4835      	ldr	r0, [pc, #212]	; (254d8 <aws_fota_mqtt_evt_handler+0x338>)
   25402:	f00e f888 	bl	33516 <printk>
		return 0;
   25406:	2400      	movs	r4, #0
   25408:	e6e9      	b.n	251de <aws_fota_mqtt_evt_handler+0x3e>
		if (evt->result != 0) {
   2540a:	69cc      	ldr	r4, [r1, #28]
   2540c:	2c00      	cmp	r4, #0
   2540e:	f47f aee6 	bne.w	251de <aws_fota_mqtt_evt_handler+0x3e>
		if (evt->param.suback.message_id == SUBSCRIBE_NOTIFY_NEXT) {
   25412:	888b      	ldrh	r3, [r1, #4]
   25414:	f5b3 6f04 	cmp.w	r3, #2112	; 0x840
   25418:	d109      	bne.n	2542e <aws_fota_mqtt_evt_handler+0x28e>
			LOG_INF("subscribed to notify-next topic");
   2541a:	2149      	movs	r1, #73	; 0x49
   2541c:	482f      	ldr	r0, [pc, #188]	; (254dc <aws_fota_mqtt_evt_handler+0x33c>)
   2541e:	f00e f87a 	bl	33516 <printk>
			err = aws_jobs_get_job_execution(client, "$next",
   25422:	4630      	mov	r0, r6
   25424:	4a0e      	ldr	r2, [pc, #56]	; (25460 <aws_fota_mqtt_evt_handler+0x2c0>)
   25426:	490f      	ldr	r1, [pc, #60]	; (25464 <aws_fota_mqtt_evt_handler+0x2c4>)
   25428:	f7ff fdee 	bl	25008 <aws_jobs_get_job_execution>
   2542c:	e756      	b.n	252dc <aws_fota_mqtt_evt_handler+0x13c>
		if (evt->param.suback.message_id == SUBSCRIBE_GET) {
   2542e:	f640 0241 	movw	r2, #2113	; 0x841
   25432:	4293      	cmp	r3, r2
   25434:	d102      	bne.n	2543c <aws_fota_mqtt_evt_handler+0x29c>
			LOG_INF("subscribed to get topic");
   25436:	2149      	movs	r1, #73	; 0x49
   25438:	4829      	ldr	r0, [pc, #164]	; (254e0 <aws_fota_mqtt_evt_handler+0x340>)
   2543a:	e6ce      	b.n	251da <aws_fota_mqtt_evt_handler+0x3a>
		if ((fota_state == DOWNLOAD_FIRMWARE) &&
   2543c:	4a19      	ldr	r2, [pc, #100]	; (254a4 <aws_fota_mqtt_evt_handler+0x304>)
   2543e:	7811      	ldrb	r1, [r2, #0]
   25440:	2901      	cmp	r1, #1
   25442:	f47f aec1 	bne.w	251c8 <aws_fota_mqtt_evt_handler+0x28>
   25446:	f640 0243 	movw	r2, #2115	; 0x843
   2544a:	4293      	cmp	r3, r2
   2544c:	f47f aebc 	bne.w	251c8 <aws_fota_mqtt_evt_handler+0x28>
			err = update_job_execution(client, job_id,
   25450:	f7ff fdf2 	bl	25038 <update_job_execution.constprop.0>
   25454:	e742      	b.n	252dc <aws_fota_mqtt_evt_handler+0x13c>
   25456:	bf00      	nop
   25458:	200254ee 	.word	0x200254ee
   2545c:	0003a1f9 	.word	0x0003a1f9
   25460:	20025319 	.word	0x20025319
   25464:	0003a227 	.word	0x0003a227
   25468:	0003a22d 	.word	0x0003a22d
   2546c:	00038d12 	.word	0x00038d12
   25470:	0003a258 	.word	0x0003a258
   25474:	20025ac9 	.word	0x20025ac9
   25478:	0003a261 	.word	0x0003a261
   2547c:	0003a26a 	.word	0x0003a26a
   25480:	0003a28d 	.word	0x0003a28d
   25484:	20022428 	.word	0x20022428
   25488:	20025219 	.word	0x20025219
   2548c:	200254ad 	.word	0x200254ad
   25490:	20025583 	.word	0x20025583
   25494:	200253ae 	.word	0x200253ae
   25498:	0003a2b5 	.word	0x0003a2b5
   2549c:	0003a2da 	.word	0x0003a2da
   254a0:	0003a2fe 	.word	0x0003a2fe
   254a4:	20025318 	.word	0x20025318
   254a8:	20022420 	.word	0x20022420
   254ac:	2002978d 	.word	0x2002978d
   254b0:	0003a32c 	.word	0x0003a32c
   254b4:	0003a357 	.word	0x0003a357
   254b8:	20022424 	.word	0x20022424
   254bc:	0003a38e 	.word	0x0003a38e
   254c0:	0003a3af 	.word	0x0003a3af
   254c4:	0003a3d7 	.word	0x0003a3d7
   254c8:	0003a3ff 	.word	0x0003a3ff
   254cc:	0003a414 	.word	0x0003a414
   254d0:	0003a43a 	.word	0x0003a43a
   254d4:	0003a461 	.word	0x0003a461
   254d8:	0003a469 	.word	0x0003a469
   254dc:	0003a483 	.word	0x0003a483
   254e0:	0003a4a8 	.word	0x0003a4a8
   254e4:	20025218 	.word	0x20025218

000254e8 <aws_fota_init>:

int aws_fota_init(struct mqtt_client *const client,
		  aws_fota_callback_t evt_handler)
{
   254e8:	b510      	push	{r4, lr}
	int err;

	if (client == NULL || evt_handler == NULL) {
   254ea:	b180      	cbz	r0, 2550e <aws_fota_init+0x26>
   254ec:	b179      	cbz	r1, 2550e <aws_fota_init+0x26>
		return -EINVAL;
	}

	/* Store client to make it available in event handlers. */
	c = client;
   254ee:	4b09      	ldr	r3, [pc, #36]	; (25514 <aws_fota_init+0x2c>)
   254f0:	6018      	str	r0, [r3, #0]
	callback = evt_handler;
   254f2:	4b09      	ldr	r3, [pc, #36]	; (25518 <aws_fota_init+0x30>)

	err = fota_download_init(http_fota_handler);
   254f4:	4809      	ldr	r0, [pc, #36]	; (2551c <aws_fota_init+0x34>)
	callback = evt_handler;
   254f6:	6019      	str	r1, [r3, #0]
	err = fota_download_init(http_fota_handler);
   254f8:	f7ff fc2c 	bl	24d54 <fota_download_init>
	if (err != 0) {
   254fc:	4604      	mov	r4, r0
   254fe:	b120      	cbz	r0, 2550a <aws_fota_init+0x22>
		LOG_ERR("fota_download_init error %d", err);
   25500:	4602      	mov	r2, r0
   25502:	2145      	movs	r1, #69	; 0x45
   25504:	4806      	ldr	r0, [pc, #24]	; (25520 <aws_fota_init+0x38>)
   25506:	f00e f806 	bl	33516 <printk>
		return err;
	}

	return 0;
}
   2550a:	4620      	mov	r0, r4
   2550c:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2550e:	f06f 0415 	mvn.w	r4, #21
   25512:	e7fa      	b.n	2550a <aws_fota_init+0x22>
   25514:	20022420 	.word	0x20022420
   25518:	20022424 	.word	0x20022424
   2551c:	00025099 	.word	0x00025099
   25520:	0003a4c5 	.word	0x0003a4c5

00025524 <aws_fota_get_job_id>:

int aws_fota_get_job_id(u8_t *const job_id_buf, size_t buf_size)
{
	if ((job_id_buf == NULL) || (buf_size == 0)) {
   25524:	b120      	cbz	r0, 25530 <aws_fota_get_job_id+0xc>
   25526:	b119      	cbz	r1, 25530 <aws_fota_get_job_id+0xc>
		return -EINVAL;
	}
	return snprintf(job_id_buf, buf_size, "%s", job_id);
   25528:	4b03      	ldr	r3, [pc, #12]	; (25538 <aws_fota_get_job_id+0x14>)
   2552a:	4a04      	ldr	r2, [pc, #16]	; (2553c <aws_fota_get_job_id+0x18>)
   2552c:	f00c be1a 	b.w	32164 <sniprintf>
}
   25530:	f06f 0015 	mvn.w	r0, #21
   25534:	4770      	bx	lr
   25536:	bf00      	nop
   25538:	200254ad 	.word	0x200254ad
   2553c:	00039f32 	.word	0x00039f32

00025540 <aws_fota_parse_DescribeJobExecution_rsp>:
					   u32_t payload_len,
					   char *job_id_buf,
					   char *hostname_buf,
					   char *file_path_buf,
					   int *execution_version_number)
{
   25540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25544:	4616      	mov	r6, r2
   25546:	e9dd a908 	ldrd	sl, r9, [sp, #32]
   2554a:	461f      	mov	r7, r3
	if (job_document == NULL
   2554c:	2800      	cmp	r0, #0
   2554e:	d068      	beq.n	25622 <aws_fota_parse_DescribeJobExecution_rsp+0xe2>
	    || job_id_buf == NULL
   25550:	2a00      	cmp	r2, #0
   25552:	d066      	beq.n	25622 <aws_fota_parse_DescribeJobExecution_rsp+0xe2>
	    || hostname_buf == NULL
   25554:	2b00      	cmp	r3, #0
   25556:	d064      	beq.n	25622 <aws_fota_parse_DescribeJobExecution_rsp+0xe2>
	    || file_path_buf == NULL
   25558:	f1ba 0f00 	cmp.w	sl, #0
   2555c:	d061      	beq.n	25622 <aws_fota_parse_DescribeJobExecution_rsp+0xe2>
	    || execution_version_number == NULL) {
   2555e:	f1b9 0f00 	cmp.w	r9, #0
   25562:	d05e      	beq.n	25622 <aws_fota_parse_DescribeJobExecution_rsp+0xe2>
		return -EINVAL;
	}

	int ret;

	cJSON *json_data = cJSON_Parse(job_document);
   25564:	f00f fb2e 	bl	34bc4 <cJSON_Parse>

	if (json_data == NULL) {
   25568:	4605      	mov	r5, r0
   2556a:	b938      	cbnz	r0, 2557c <aws_fota_parse_DescribeJobExecution_rsp+0x3c>
		ret = -ENODATA;
   2556c:	f06f 043c 	mvn.w	r4, #60	; 0x3c
		goto cleanup;
	}

	ret = 1;
cleanup:
	cJSON_Delete(json_data);
   25570:	4628      	mov	r0, r5
   25572:	f7fd f945 	bl	22800 <cJSON_Delete>
	return ret;
}
   25576:	4620      	mov	r0, r4
   25578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	cJSON *execution = cJSON_GetObjectItemCaseSensitive(json_data,
   2557c:	492a      	ldr	r1, [pc, #168]	; (25628 <aws_fota_parse_DescribeJobExecution_rsp+0xe8>)
   2557e:	f00f fb25 	bl	34bcc <cJSON_GetObjectItemCaseSensitive>
	if (execution == NULL) {
   25582:	4604      	mov	r4, r0
   25584:	2800      	cmp	r0, #0
   25586:	d0f3      	beq.n	25570 <aws_fota_parse_DescribeJobExecution_rsp+0x30>
	cJSON *job_id = cJSON_GetObjectItemCaseSensitive(execution, "jobId");
   25588:	4928      	ldr	r1, [pc, #160]	; (2562c <aws_fota_parse_DescribeJobExecution_rsp+0xec>)
   2558a:	f00f fb1f 	bl	34bcc <cJSON_GetObjectItemCaseSensitive>
   2558e:	4680      	mov	r8, r0
	if (cJSON_GetStringValue(job_id) != NULL) {
   25590:	f00f fb2d 	bl	34bee <cJSON_GetStringValue>
   25594:	2800      	cmp	r0, #0
   25596:	d0e9      	beq.n	2556c <aws_fota_parse_DescribeJobExecution_rsp+0x2c>
		strncpy_nullterm(job_id_buf, job_id->valuestring,
   25598:	4630      	mov	r0, r6
   2559a:	2241      	movs	r2, #65	; 0x41
   2559c:	f8d8 1010 	ldr.w	r1, [r8, #16]
   255a0:	f010 f8d2 	bl	35748 <strncpy_nullterm>
	cJSON *job_data = cJSON_GetObjectItemCaseSensitive(execution,
   255a4:	4620      	mov	r0, r4
   255a6:	4922      	ldr	r1, [pc, #136]	; (25630 <aws_fota_parse_DescribeJobExecution_rsp+0xf0>)
   255a8:	f00f fb10 	bl	34bcc <cJSON_GetObjectItemCaseSensitive>
   255ac:	4606      	mov	r6, r0
	if (!cJSON_IsObject(job_data)) {
   255ae:	f00f fb25 	bl	34bfc <cJSON_IsObject>
   255b2:	2800      	cmp	r0, #0
   255b4:	d0da      	beq.n	2556c <aws_fota_parse_DescribeJobExecution_rsp+0x2c>
	cJSON *location = cJSON_GetObjectItemCaseSensitive(job_data,
   255b6:	4630      	mov	r0, r6
   255b8:	491e      	ldr	r1, [pc, #120]	; (25634 <aws_fota_parse_DescribeJobExecution_rsp+0xf4>)
   255ba:	f00f fb07 	bl	34bcc <cJSON_GetObjectItemCaseSensitive>
   255be:	4606      	mov	r6, r0
	if (!cJSON_IsObject(location)) {
   255c0:	f00f fb1c 	bl	34bfc <cJSON_IsObject>
   255c4:	2800      	cmp	r0, #0
   255c6:	d0d1      	beq.n	2556c <aws_fota_parse_DescribeJobExecution_rsp+0x2c>
	cJSON *hostname = cJSON_GetObjectItemCaseSensitive(location, "host");
   255c8:	4630      	mov	r0, r6
   255ca:	491b      	ldr	r1, [pc, #108]	; (25638 <aws_fota_parse_DescribeJobExecution_rsp+0xf8>)
   255cc:	f00f fafe 	bl	34bcc <cJSON_GetObjectItemCaseSensitive>
	cJSON *path = cJSON_GetObjectItemCaseSensitive(location, "path");
   255d0:	491a      	ldr	r1, [pc, #104]	; (2563c <aws_fota_parse_DescribeJobExecution_rsp+0xfc>)
	cJSON *hostname = cJSON_GetObjectItemCaseSensitive(location, "host");
   255d2:	4680      	mov	r8, r0
	cJSON *path = cJSON_GetObjectItemCaseSensitive(location, "path");
   255d4:	4630      	mov	r0, r6
   255d6:	f00f faf9 	bl	34bcc <cJSON_GetObjectItemCaseSensitive>
   255da:	4606      	mov	r6, r0
	if ((cJSON_GetStringValue(hostname) != NULL)
   255dc:	4640      	mov	r0, r8
   255de:	f00f fb06 	bl	34bee <cJSON_GetStringValue>
   255e2:	2800      	cmp	r0, #0
   255e4:	d0c2      	beq.n	2556c <aws_fota_parse_DescribeJobExecution_rsp+0x2c>
	   && (cJSON_GetStringValue(path) != NULL)) {
   255e6:	4630      	mov	r0, r6
   255e8:	f00f fb01 	bl	34bee <cJSON_GetStringValue>
   255ec:	2800      	cmp	r0, #0
   255ee:	d0bd      	beq.n	2556c <aws_fota_parse_DescribeJobExecution_rsp+0x2c>
		strncpy_nullterm(hostname_buf, hostname->valuestring,
   255f0:	22ff      	movs	r2, #255	; 0xff
   255f2:	4638      	mov	r0, r7
   255f4:	f8d8 1010 	ldr.w	r1, [r8, #16]
   255f8:	f010 f8a6 	bl	35748 <strncpy_nullterm>
		strncpy_nullterm(file_path_buf, path->valuestring,
   255fc:	22ff      	movs	r2, #255	; 0xff
   255fe:	4650      	mov	r0, sl
   25600:	6931      	ldr	r1, [r6, #16]
   25602:	f010 f8a1 	bl	35748 <strncpy_nullterm>
	cJSON *version_number = cJSON_GetObjectItemCaseSensitive(
   25606:	4620      	mov	r0, r4
   25608:	490d      	ldr	r1, [pc, #52]	; (25640 <aws_fota_parse_DescribeJobExecution_rsp+0x100>)
   2560a:	f00f fadf 	bl	34bcc <cJSON_GetObjectItemCaseSensitive>
   2560e:	4604      	mov	r4, r0
	if (cJSON_IsNumber(version_number)) {
   25610:	f00f fadf 	bl	34bd2 <cJSON_IsNumber>
   25614:	2800      	cmp	r0, #0
   25616:	d0a9      	beq.n	2556c <aws_fota_parse_DescribeJobExecution_rsp+0x2c>
		*execution_version_number = version_number->valueint;
   25618:	6963      	ldr	r3, [r4, #20]
	ret = 1;
   2561a:	2401      	movs	r4, #1
		*execution_version_number = version_number->valueint;
   2561c:	f8c9 3000 	str.w	r3, [r9]
	ret = 1;
   25620:	e7a6      	b.n	25570 <aws_fota_parse_DescribeJobExecution_rsp+0x30>
		return -EINVAL;
   25622:	f06f 0415 	mvn.w	r4, #21
   25626:	e7a6      	b.n	25576 <aws_fota_parse_DescribeJobExecution_rsp+0x36>
   25628:	0003a4ef 	.word	0x0003a4ef
   2562c:	0003a4f9 	.word	0x0003a4f9
   25630:	0003a4ff 	.word	0x0003a4ff
   25634:	0003a50b 	.word	0x0003a50b
   25638:	0003992f 	.word	0x0003992f
   2563c:	0003a514 	.word	0x0003a514
   25640:	0003a519 	.word	0x0003a519

00025644 <dfu_target_img_type>:
LOG_MODULE_REGISTER(dfu_target, CONFIG_DFU_TARGET_LOG_LEVEL);

static const struct dfu_target *current_target;

int dfu_target_img_type(const void *const buf, size_t len)
{
   25644:	b538      	push	{r3, r4, r5, lr}
   25646:	4605      	mov	r5, r0
   25648:	460c      	mov	r4, r1
#ifdef CONFIG_DFU_TARGET_MCUBOOT
	if (dfu_target_mcuboot_identify(buf)) {
   2564a:	f000 fb6f 	bl	25d2c <dfu_target_mcuboot_identify>
   2564e:	b960      	cbnz	r0, 2566a <dfu_target_img_type+0x26>
		return DFU_TARGET_IMAGE_TYPE_MCUBOOT;
	}
#endif
#ifdef CONFIG_DFU_TARGET_MODEM
	if (dfu_target_modem_identify(buf)) {
   25650:	4628      	mov	r0, r5
   25652:	f000 f955 	bl	25900 <dfu_target_modem_identify>
   25656:	b950      	cbnz	r0, 2566e <dfu_target_img_type+0x2a>
		return DFU_TARGET_IMAGE_TYPE_MODEM_DELTA;
	}
#endif
	if (len < MIN_SIZE_IDENTIFY_BUF) {
   25658:	2c1f      	cmp	r4, #31
   2565a:	d90a      	bls.n	25672 <dfu_target_img_type+0x2e>
		return -EAGAIN;
	}

	LOG_ERR("No supported image type found");
   2565c:	4806      	ldr	r0, [pc, #24]	; (25678 <dfu_target_img_type+0x34>)
   2565e:	2145      	movs	r1, #69	; 0x45
   25660:	f00d ff59 	bl	33516 <printk>
	return -ENOTSUP;
   25664:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   25668:	bd38      	pop	{r3, r4, r5, pc}
		return DFU_TARGET_IMAGE_TYPE_MCUBOOT;
   2566a:	2001      	movs	r0, #1
   2566c:	e7fc      	b.n	25668 <dfu_target_img_type+0x24>
		return DFU_TARGET_IMAGE_TYPE_MODEM_DELTA;
   2566e:	2002      	movs	r0, #2
   25670:	e7fa      	b.n	25668 <dfu_target_img_type+0x24>
		return -EAGAIN;
   25672:	f06f 000a 	mvn.w	r0, #10
   25676:	e7f7      	b.n	25668 <dfu_target_img_type+0x24>
   25678:	0003a527 	.word	0x0003a527

0002567c <dfu_target_init>:

int dfu_target_init(int img_type, size_t file_size, dfu_target_callback_t cb)
{
   2567c:	4603      	mov	r3, r0
	const struct dfu_target *new_target = NULL;

#ifdef CONFIG_DFU_TARGET_MCUBOOT
	if (img_type == DFU_TARGET_IMAGE_TYPE_MCUBOOT) {
   2567e:	2b01      	cmp	r3, #1
{
   25680:	4608      	mov	r0, r1
   25682:	b570      	push	{r4, r5, r6, lr}
   25684:	4611      	mov	r1, r2
	if (img_type == DFU_TARGET_IMAGE_TYPE_MCUBOOT) {
   25686:	d008      	beq.n	2569a <dfu_target_init+0x1e>
		new_target = &dfu_target_mcuboot;
	}
#endif
#ifdef CONFIG_DFU_TARGET_MODEM
	if (img_type == DFU_TARGET_IMAGE_TYPE_MODEM_DELTA) {
   25688:	2b02      	cmp	r3, #2
   2568a:	d012      	beq.n	256b2 <dfu_target_init+0x36>
		new_target = &dfu_target_modem;
	}
#endif
	if (new_target == NULL) {
		LOG_ERR("Unknown image type");
   2568c:	480b      	ldr	r0, [pc, #44]	; (256bc <dfu_target_init+0x40>)
   2568e:	2145      	movs	r1, #69	; 0x45
   25690:	f00d ff41 	bl	33516 <printk>
		return -ENOTSUP;
   25694:	f06f 0085 	mvn.w	r0, #133	; 0x85
	}

	current_target = new_target;

	return current_target->init(file_size, cb);
}
   25698:	bd70      	pop	{r4, r5, r6, pc}
		new_target = &dfu_target_mcuboot;
   2569a:	4c09      	ldr	r4, [pc, #36]	; (256c0 <dfu_target_init+0x44>)
	if (new_target == current_target
   2569c:	4d09      	ldr	r5, [pc, #36]	; (256c4 <dfu_target_init+0x48>)
   2569e:	682a      	ldr	r2, [r5, #0]
   256a0:	42a2      	cmp	r2, r4
   256a2:	d101      	bne.n	256a8 <dfu_target_init+0x2c>
	   && img_type != DFU_TARGET_IMAGE_TYPE_MODEM_DELTA) {
   256a4:	2b02      	cmp	r3, #2
   256a6:	d106      	bne.n	256b6 <dfu_target_init+0x3a>
	return current_target->init(file_size, cb);
   256a8:	6823      	ldr	r3, [r4, #0]
	current_target = new_target;
   256aa:	602c      	str	r4, [r5, #0]
}
   256ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return current_target->init(file_size, cb);
   256b0:	4718      	bx	r3
		new_target = &dfu_target_modem;
   256b2:	4c05      	ldr	r4, [pc, #20]	; (256c8 <dfu_target_init+0x4c>)
   256b4:	e7f2      	b.n	2569c <dfu_target_init+0x20>
		return 0;
   256b6:	2000      	movs	r0, #0
   256b8:	e7ee      	b.n	25698 <dfu_target_init+0x1c>
   256ba:	bf00      	nop
   256bc:	0003a54a 	.word	0x0003a54a
   256c0:	0003719c 	.word	0x0003719c
   256c4:	2002242c 	.word	0x2002242c
   256c8:	000371ac 	.word	0x000371ac

000256cc <dfu_target_offset_get>:

int dfu_target_offset_get(size_t *offset)
{
	if (current_target == NULL) {
   256cc:	4b03      	ldr	r3, [pc, #12]	; (256dc <dfu_target_offset_get+0x10>)
   256ce:	681b      	ldr	r3, [r3, #0]
   256d0:	b10b      	cbz	r3, 256d6 <dfu_target_offset_get+0xa>
		return -EACCES;
	}

	return current_target->offset_get(offset);
   256d2:	685b      	ldr	r3, [r3, #4]
   256d4:	4718      	bx	r3
}
   256d6:	f06f 000c 	mvn.w	r0, #12
   256da:	4770      	bx	lr
   256dc:	2002242c 	.word	0x2002242c

000256e0 <dfu_target_write>:

int dfu_target_write(const void *const buf, size_t len)
{
	if (current_target == NULL || buf == NULL) {
   256e0:	4a04      	ldr	r2, [pc, #16]	; (256f4 <dfu_target_write+0x14>)
   256e2:	6812      	ldr	r2, [r2, #0]
   256e4:	b112      	cbz	r2, 256ec <dfu_target_write+0xc>
   256e6:	b108      	cbz	r0, 256ec <dfu_target_write+0xc>
		return -EACCES;
	}

	return current_target->write(buf, len);
   256e8:	6893      	ldr	r3, [r2, #8]
   256ea:	4718      	bx	r3
}
   256ec:	f06f 000c 	mvn.w	r0, #12
   256f0:	4770      	bx	lr
   256f2:	bf00      	nop
   256f4:	2002242c 	.word	0x2002242c

000256f8 <dfu_target_done>:

int dfu_target_done(bool successful)
{
   256f8:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (current_target == NULL) {
   256fa:	4e0a      	ldr	r6, [pc, #40]	; (25724 <dfu_target_done+0x2c>)
{
   256fc:	4605      	mov	r5, r0
	if (current_target == NULL) {
   256fe:	6833      	ldr	r3, [r6, #0]
   25700:	b16b      	cbz	r3, 2571e <dfu_target_done+0x26>
		return -EACCES;
	}

	err = current_target->done(successful);
   25702:	68db      	ldr	r3, [r3, #12]
   25704:	4798      	blx	r3
	if (err != 0) {
   25706:	4604      	mov	r4, r0
   25708:	b128      	cbz	r0, 25716 <dfu_target_done+0x1e>
		LOG_ERR("Unable to clean up dfu_target");
   2570a:	2145      	movs	r1, #69	; 0x45
   2570c:	4806      	ldr	r0, [pc, #24]	; (25728 <dfu_target_done+0x30>)
   2570e:	f00d ff02 	bl	33516 <printk>
	if (successful) {
		current_target = NULL;
	}

	return 0;
}
   25712:	4620      	mov	r0, r4
   25714:	bd70      	pop	{r4, r5, r6, pc}
	if (successful) {
   25716:	2d00      	cmp	r5, #0
   25718:	d0fb      	beq.n	25712 <dfu_target_done+0x1a>
		current_target = NULL;
   2571a:	6030      	str	r0, [r6, #0]
   2571c:	e7f9      	b.n	25712 <dfu_target_done+0x1a>
		return -EACCES;
   2571e:	f06f 040c 	mvn.w	r4, #12
   25722:	e7f6      	b.n	25712 <dfu_target_done+0x1a>
   25724:	2002242c 	.word	0x2002242c
   25728:	0003a562 	.word	0x0003a562

0002572c <getsockopt.constprop.0>:
static inline int getsockopt(int sock, int level, int optname,
   2572c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(socket_ops);
   25730:	4c15      	ldr	r4, [pc, #84]	; (25788 <getsockopt.constprop.0+0x5c>)
static inline int getsockopt(int sock, int level, int optname,
   25732:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(socket_ops);
   25734:	6823      	ldr	r3, [r4, #0]
static inline int getsockopt(int sock, int level, int optname,
   25736:	4605      	mov	r5, r0
   25738:	460e      	mov	r6, r1
   2573a:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(socket_ops);
   2573c:	b94b      	cbnz	r3, 25752 <getsockopt.constprop.0+0x26>
   2573e:	4913      	ldr	r1, [pc, #76]	; (2578c <getsockopt.constprop.0+0x60>)
   25740:	4813      	ldr	r0, [pc, #76]	; (25790 <getsockopt.constprop.0+0x64>)
   25742:	2360      	movs	r3, #96	; 0x60
   25744:	4a13      	ldr	r2, [pc, #76]	; (25794 <getsockopt.constprop.0+0x68>)
   25746:	f00d fee6 	bl	33516 <printk>
   2574a:	2160      	movs	r1, #96	; 0x60
   2574c:	4811      	ldr	r0, [pc, #68]	; (25794 <getsockopt.constprop.0+0x68>)
   2574e:	f00d ff28 	bl	335a2 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->getsockopt);
   25752:	6823      	ldr	r3, [r4, #0]
   25754:	6a1b      	ldr	r3, [r3, #32]
   25756:	b94b      	cbnz	r3, 2576c <getsockopt.constprop.0+0x40>
   25758:	490f      	ldr	r1, [pc, #60]	; (25798 <getsockopt.constprop.0+0x6c>)
   2575a:	480d      	ldr	r0, [pc, #52]	; (25790 <getsockopt.constprop.0+0x64>)
   2575c:	2361      	movs	r3, #97	; 0x61
   2575e:	4a0d      	ldr	r2, [pc, #52]	; (25794 <getsockopt.constprop.0+0x68>)
   25760:	f00d fed9 	bl	33516 <printk>
   25764:	2161      	movs	r1, #97	; 0x61
   25766:	480b      	ldr	r0, [pc, #44]	; (25794 <getsockopt.constprop.0+0x68>)
   25768:	f00d ff1b 	bl	335a2 <assert_post_action>
	return socket_ops->getsockopt(sock, level, optname, optval, optlen);
   2576c:	6823      	ldr	r3, [r4, #0]
   2576e:	f8cd 8000 	str.w	r8, [sp]
   25772:	6a1c      	ldr	r4, [r3, #32]
   25774:	4632      	mov	r2, r6
   25776:	463b      	mov	r3, r7
   25778:	f240 2103 	movw	r1, #515	; 0x203
   2577c:	4628      	mov	r0, r5
   2577e:	47a0      	blx	r4
}
   25780:	b002      	add	sp, #8
   25782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25786:	bf00      	nop
   25788:	200220f8 	.word	0x200220f8
   2578c:	00037b4f 	.word	0x00037b4f
   25790:	00037a66 	.word	0x00037a66
   25794:	00037b1f 	.word	0x00037b1f
   25798:	0003a590 	.word	0x0003a590

0002579c <get_modem_error>:
static int  fd;
static int  offset;
static dfu_target_callback_t callback;

static int get_modem_error(void)
{
   2579c:	b507      	push	{r0, r1, r2, lr}
	int rc;
	int err = 0;
	socklen_t len;

	len = sizeof(err);
   2579e:	2304      	movs	r3, #4
   257a0:	2200      	movs	r2, #0
	rc = getsockopt(fd, SOL_DFU, SO_DFU_ERROR, &err, &len);
   257a2:	480a      	ldr	r0, [pc, #40]	; (257cc <get_modem_error+0x30>)
	len = sizeof(err);
   257a4:	e9cd 2300 	strd	r2, r3, [sp]
	rc = getsockopt(fd, SOL_DFU, SO_DFU_ERROR, &err, &len);
   257a8:	2114      	movs	r1, #20
   257aa:	466a      	mov	r2, sp
   257ac:	6800      	ldr	r0, [r0, #0]
   257ae:	446b      	add	r3, sp
   257b0:	f7ff ffbc 	bl	2572c <getsockopt.constprop.0>
	if (rc) {
   257b4:	b130      	cbz	r0, 257c4 <get_modem_error+0x28>
		LOG_ERR("Unable to fetch modem error, errno %d", errno);
   257b6:	f00e fa7c 	bl	33cb2 <__errno>
   257ba:	2145      	movs	r1, #69	; 0x45
   257bc:	6802      	ldr	r2, [r0, #0]
   257be:	4804      	ldr	r0, [pc, #16]	; (257d0 <get_modem_error+0x34>)
   257c0:	f00d fea9 	bl	33516 <printk>
	}

	return err;
}
   257c4:	9800      	ldr	r0, [sp, #0]
   257c6:	b003      	add	sp, #12
   257c8:	f85d fb04 	ldr.w	pc, [sp], #4
   257cc:	20022434 	.word	0x20022434
   257d0:	0003a5a7 	.word	0x0003a5a7

000257d4 <setsockopt.constprop.0>:
static inline int setsockopt(int sock, int level, int optname,
   257d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(socket_ops);
   257d8:	4c15      	ldr	r4, [pc, #84]	; (25830 <setsockopt.constprop.0+0x5c>)
static inline int setsockopt(int sock, int level, int optname,
   257da:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(socket_ops);
   257dc:	6823      	ldr	r3, [r4, #0]
static inline int setsockopt(int sock, int level, int optname,
   257de:	4605      	mov	r5, r0
   257e0:	460e      	mov	r6, r1
   257e2:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(socket_ops);
   257e4:	b94b      	cbnz	r3, 257fa <setsockopt.constprop.0+0x26>
   257e6:	4913      	ldr	r1, [pc, #76]	; (25834 <setsockopt.constprop.0+0x60>)
   257e8:	4813      	ldr	r0, [pc, #76]	; (25838 <setsockopt.constprop.0+0x64>)
   257ea:	2357      	movs	r3, #87	; 0x57
   257ec:	4a13      	ldr	r2, [pc, #76]	; (2583c <setsockopt.constprop.0+0x68>)
   257ee:	f00d fe92 	bl	33516 <printk>
   257f2:	2157      	movs	r1, #87	; 0x57
   257f4:	4811      	ldr	r0, [pc, #68]	; (2583c <setsockopt.constprop.0+0x68>)
   257f6:	f00d fed4 	bl	335a2 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->setsockopt);
   257fa:	6823      	ldr	r3, [r4, #0]
   257fc:	69db      	ldr	r3, [r3, #28]
   257fe:	b94b      	cbnz	r3, 25814 <setsockopt.constprop.0+0x40>
   25800:	490f      	ldr	r1, [pc, #60]	; (25840 <setsockopt.constprop.0+0x6c>)
   25802:	480d      	ldr	r0, [pc, #52]	; (25838 <setsockopt.constprop.0+0x64>)
   25804:	2358      	movs	r3, #88	; 0x58
   25806:	4a0d      	ldr	r2, [pc, #52]	; (2583c <setsockopt.constprop.0+0x68>)
   25808:	f00d fe85 	bl	33516 <printk>
   2580c:	2158      	movs	r1, #88	; 0x58
   2580e:	480b      	ldr	r0, [pc, #44]	; (2583c <setsockopt.constprop.0+0x68>)
   25810:	f00d fec7 	bl	335a2 <assert_post_action>
	return socket_ops->setsockopt(sock, level, optname, optval, optlen);
   25814:	6823      	ldr	r3, [r4, #0]
   25816:	f8cd 8000 	str.w	r8, [sp]
   2581a:	69dc      	ldr	r4, [r3, #28]
   2581c:	4632      	mov	r2, r6
   2581e:	463b      	mov	r3, r7
   25820:	f240 2103 	movw	r1, #515	; 0x203
   25824:	4628      	mov	r0, r5
   25826:	47a0      	blx	r4
}
   25828:	b002      	add	sp, #8
   2582a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2582e:	bf00      	nop
   25830:	200220f8 	.word	0x200220f8
   25834:	00037b4f 	.word	0x00037b4f
   25838:	00037a66 	.word	0x00037a66
   2583c:	00037b1f 	.word	0x00037b1f
   25840:	00038e53 	.word	0x00038e53

00025844 <delete_banked_modem_fw>:
}
#define SLEEP_TIME 1
static int delete_banked_modem_fw(void)
{
	int err;
	socklen_t len = sizeof(offset);
   25844:	2304      	movs	r3, #4
{
   25846:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	int timeout = CONFIG_DFU_TARGET_MODEM_TIMEOUT;

	LOG_INF("Deleting firmware image, this can take several minutes");
   2584a:	2149      	movs	r1, #73	; 0x49
   2584c:	4825      	ldr	r0, [pc, #148]	; (258e4 <delete_banked_modem_fw+0xa0>)
	socklen_t len = sizeof(offset);
   2584e:	9301      	str	r3, [sp, #4]
	LOG_INF("Deleting firmware image, this can take several minutes");
   25850:	f00d fe61 	bl	33516 <printk>
	err = setsockopt(fd, SOL_DFU, SO_DFU_BACKUP_DELETE, NULL, 0);
   25854:	2300      	movs	r3, #0
   25856:	4d24      	ldr	r5, [pc, #144]	; (258e8 <delete_banked_modem_fw+0xa4>)
   25858:	461a      	mov	r2, r3
   2585a:	2106      	movs	r1, #6
   2585c:	6828      	ldr	r0, [r5, #0]
   2585e:	f7ff ffb9 	bl	257d4 <setsockopt.constprop.0>
	if (err < 0) {
   25862:	2800      	cmp	r0, #0
   25864:	da0b      	bge.n	2587e <delete_banked_modem_fw+0x3a>
		LOG_ERR("Failed to delete backup, errno %d", errno);
   25866:	f00e fa24 	bl	33cb2 <__errno>
   2586a:	2145      	movs	r1, #69	; 0x45
   2586c:	6802      	ldr	r2, [r0, #0]
   2586e:	481f      	ldr	r0, [pc, #124]	; (258ec <delete_banked_modem_fw+0xa8>)
   25870:	f00d fe51 	bl	33516 <printk>
		return -EFAULT;
   25874:	f06f 000d 	mvn.w	r0, #13
			break;
		}
	}

	return 0;
}
   25878:	b002      	add	sp, #8
   2587a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	int timeout = CONFIG_DFU_TARGET_MODEM_TIMEOUT;
   2587e:	243c      	movs	r4, #60	; 0x3c
		err = getsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, &len);
   25880:	4e1b      	ldr	r6, [pc, #108]	; (258f0 <delete_banked_modem_fw+0xac>)
				callback(DFU_TARGET_EVT_TIMEOUT);
   25882:	4f1c      	ldr	r7, [pc, #112]	; (258f4 <delete_banked_modem_fw+0xb0>)
					LOG_ERR("DFU error: %d", err);
   25884:	f8df 8074 	ldr.w	r8, [pc, #116]	; 258fc <delete_banked_modem_fw+0xb8>
		err = getsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, &len);
   25888:	4632      	mov	r2, r6
   2588a:	2107      	movs	r1, #7
   2588c:	6828      	ldr	r0, [r5, #0]
   2588e:	ab01      	add	r3, sp, #4
   25890:	f7ff ff4c 	bl	2572c <getsockopt.constprop.0>
		if (err < 0) {
   25894:	2800      	cmp	r0, #0
   25896:	da1a      	bge.n	258ce <delete_banked_modem_fw+0x8a>
			if (timeout < 0) {
   25898:	2c00      	cmp	r4, #0
   2589a:	da03      	bge.n	258a4 <delete_banked_modem_fw+0x60>
				callback(DFU_TARGET_EVT_TIMEOUT);
   2589c:	2000      	movs	r0, #0
   2589e:	683b      	ldr	r3, [r7, #0]
   258a0:	4798      	blx	r3
				timeout = CONFIG_DFU_TARGET_MODEM_TIMEOUT;
   258a2:	243c      	movs	r4, #60	; 0x3c
			if (errno == ENOEXEC) {
   258a4:	f00e fa05 	bl	33cb2 <__errno>
   258a8:	6803      	ldr	r3, [r0, #0]
   258aa:	2b08      	cmp	r3, #8
   258ac:	d10d      	bne.n	258ca <delete_banked_modem_fw+0x86>
				err = get_modem_error();
   258ae:	f7ff ff75 	bl	2579c <get_modem_error>
				if (err != DFU_ERASE_PENDING) {
   258b2:	f110 0f11 	cmn.w	r0, #17
				err = get_modem_error();
   258b6:	4602      	mov	r2, r0
				if (err != DFU_ERASE_PENDING) {
   258b8:	d003      	beq.n	258c2 <delete_banked_modem_fw+0x7e>
					LOG_ERR("DFU error: %d", err);
   258ba:	2145      	movs	r1, #69	; 0x45
   258bc:	4640      	mov	r0, r8
   258be:	f00d fe2a 	bl	33516 <printk>
	return z_impl_k_sleep(ms);
   258c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   258c6:	f00a ff1d 	bl	30704 <z_impl_k_sleep>
			timeout -= SLEEP_TIME;
   258ca:	3c01      	subs	r4, #1
		err = getsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, &len);
   258cc:	e7dc      	b.n	25888 <delete_banked_modem_fw+0x44>
			callback(DFU_TARGET_EVT_ERASE_DONE);
   258ce:	4b09      	ldr	r3, [pc, #36]	; (258f4 <delete_banked_modem_fw+0xb0>)
   258d0:	2001      	movs	r0, #1
   258d2:	681b      	ldr	r3, [r3, #0]
   258d4:	4798      	blx	r3
			LOG_INF("Modem FW delete complete");
   258d6:	4808      	ldr	r0, [pc, #32]	; (258f8 <delete_banked_modem_fw+0xb4>)
   258d8:	2149      	movs	r1, #73	; 0x49
   258da:	f00d fe1c 	bl	33516 <printk>
	return 0;
   258de:	2000      	movs	r0, #0
   258e0:	e7ca      	b.n	25878 <delete_banked_modem_fw+0x34>
   258e2:	bf00      	nop
   258e4:	0003a5d2 	.word	0x0003a5d2
   258e8:	20022434 	.word	0x20022434
   258ec:	0003a60e 	.word	0x0003a60e
   258f0:	20022438 	.word	0x20022438
   258f4:	20022430 	.word	0x20022430
   258f8:	0003a648 	.word	0x0003a648
   258fc:	0003a635 	.word	0x0003a635

00025900 <dfu_target_modem_identify>:
	return err;
}

bool dfu_target_modem_identify(const void *const buf)
{
	return ((const struct modem_delta_header *)buf)->magic == MODEM_MAGIC;
   25900:	6840      	ldr	r0, [r0, #4]

}
   25902:	4b02      	ldr	r3, [pc, #8]	; (2590c <dfu_target_modem_identify+0xc>)
   25904:	1ac3      	subs	r3, r0, r3
   25906:	4258      	negs	r0, r3
   25908:	4158      	adcs	r0, r3
   2590a:	4770      	bx	lr
   2590c:	7544656d 	.word	0x7544656d

00025910 <dfu_target_modem_init>:

int dfu_target_modem_init(size_t file_size, dfu_target_callback_t cb)
{
	int err;
	size_t scratch_space;
	socklen_t len = sizeof(offset);
   25910:	2304      	movs	r3, #4
{
   25912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25916:	b098      	sub	sp, #96	; 0x60
	__ASSERT_NO_MSG(socket_ops);
   25918:	4c5b      	ldr	r4, [pc, #364]	; (25a88 <dfu_target_modem_init+0x178>)
	socklen_t len = sizeof(offset);
   2591a:	9303      	str	r3, [sp, #12]

	callback = cb;
   2591c:	4b5b      	ldr	r3, [pc, #364]	; (25a8c <dfu_target_modem_init+0x17c>)
{
   2591e:	4605      	mov	r5, r0
	callback = cb;
   25920:	6019      	str	r1, [r3, #0]
   25922:	6823      	ldr	r3, [r4, #0]
   25924:	b94b      	cbnz	r3, 2593a <dfu_target_modem_init+0x2a>
   25926:	495a      	ldr	r1, [pc, #360]	; (25a90 <dfu_target_modem_init+0x180>)
   25928:	485a      	ldr	r0, [pc, #360]	; (25a94 <dfu_target_modem_init+0x184>)
   2592a:	2319      	movs	r3, #25
   2592c:	4a5a      	ldr	r2, [pc, #360]	; (25a98 <dfu_target_modem_init+0x188>)
   2592e:	f00d fdf2 	bl	33516 <printk>
   25932:	2119      	movs	r1, #25
   25934:	4858      	ldr	r0, [pc, #352]	; (25a98 <dfu_target_modem_init+0x188>)
   25936:	f00d fe34 	bl	335a2 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->socket);
   2593a:	6823      	ldr	r3, [r4, #0]
   2593c:	681b      	ldr	r3, [r3, #0]
   2593e:	b94b      	cbnz	r3, 25954 <dfu_target_modem_init+0x44>
   25940:	4956      	ldr	r1, [pc, #344]	; (25a9c <dfu_target_modem_init+0x18c>)
   25942:	4854      	ldr	r0, [pc, #336]	; (25a94 <dfu_target_modem_init+0x184>)
   25944:	231a      	movs	r3, #26
   25946:	4a54      	ldr	r2, [pc, #336]	; (25a98 <dfu_target_modem_init+0x188>)
   25948:	f00d fde5 	bl	33516 <printk>
   2594c:	211a      	movs	r1, #26
   2594e:	4852      	ldr	r0, [pc, #328]	; (25a98 <dfu_target_modem_init+0x188>)
   25950:	f00d fe27 	bl	335a2 <assert_post_action>
	return socket_ops->socket(family, type, proto);
   25954:	6823      	ldr	r3, [r4, #0]
   25956:	f240 2203 	movw	r2, #515	; 0x203
   2595a:	2101      	movs	r1, #1
   2595c:	2067      	movs	r0, #103	; 0x67
   2595e:	681b      	ldr	r3, [r3, #0]
   25960:	4798      	blx	r3
	fd = socket(AF_LOCAL, SOCK_STREAM, NPROTO_DFU);
   25962:	4e4f      	ldr	r6, [pc, #316]	; (25aa0 <dfu_target_modem_init+0x190>)
	if (fd < 0) {
   25964:	2800      	cmp	r0, #0
   25966:	4634      	mov	r4, r6
	fd = socket(AF_LOCAL, SOCK_STREAM, NPROTO_DFU);
   25968:	6030      	str	r0, [r6, #0]
	if (fd < 0) {
   2596a:	da25      	bge.n	259b8 <dfu_target_modem_init+0xa8>
		LOG_ERR("Failed to open Modem DFU socket.");
   2596c:	484d      	ldr	r0, [pc, #308]	; (25aa4 <dfu_target_modem_init+0x194>)
   2596e:	2145      	movs	r1, #69	; 0x45
   25970:	f00d fdd1 	bl	33516 <printk>
		return fd;
   25974:	6830      	ldr	r0, [r6, #0]

	err = modem_dfu_socket_init();
	if (err < 0) {
   25976:	2800      	cmp	r0, #0
   25978:	db37      	blt.n	259ea <dfu_target_modem_init+0xda>
		return err;
	}

	err = getsockopt(fd, SOL_DFU, SO_DFU_RESOURCES, &scratch_space, &len);
   2597a:	2102      	movs	r1, #2
   2597c:	6820      	ldr	r0, [r4, #0]
   2597e:	ab03      	add	r3, sp, #12
   25980:	aa0e      	add	r2, sp, #56	; 0x38
   25982:	f7ff fed3 	bl	2572c <getsockopt.constprop.0>
	if (err < 0) {
   25986:	2800      	cmp	r0, #0
   25988:	da0b      	bge.n	259a2 <dfu_target_modem_init+0x92>
		if (errno == ENOEXEC) {
   2598a:	f00e f992 	bl	33cb2 <__errno>
   2598e:	6803      	ldr	r3, [r0, #0]
   25990:	2b08      	cmp	r3, #8
   25992:	d13b      	bne.n	25a0c <dfu_target_modem_init+0xfc>
			LOG_ERR("Modem error: %d", get_modem_error());
   25994:	f7ff ff02 	bl	2579c <get_modem_error>
   25998:	2145      	movs	r1, #69	; 0x45
   2599a:	4602      	mov	r2, r0
   2599c:	4842      	ldr	r0, [pc, #264]	; (25aa8 <dfu_target_modem_init+0x198>)
		} else {
			LOG_ERR("getsockopt(OFFSET) errno: %d", errno);
   2599e:	f00d fdba 	bl	33516 <printk>
		}
	}

	if (file_size > scratch_space) {
   259a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   259a4:	42ab      	cmp	r3, r5
   259a6:	d237      	bcs.n	25a18 <dfu_target_modem_init+0x108>
		LOG_ERR("Requested file too big to fit in flash %d > %d",
   259a8:	4840      	ldr	r0, [pc, #256]	; (25aac <dfu_target_modem_init+0x19c>)
   259aa:	462a      	mov	r2, r5
   259ac:	2145      	movs	r1, #69	; 0x45
   259ae:	f00d fdb2 	bl	33516 <printk>
			file_size, scratch_space);
		return -EFBIG;
   259b2:	f06f 001a 	mvn.w	r0, #26
   259b6:	e018      	b.n	259ea <dfu_target_modem_init+0xda>
	len = sizeof(version);
   259b8:	2724      	movs	r7, #36	; 0x24
	LOG_INF("Modem DFU Socket created");
   259ba:	2149      	movs	r1, #73	; 0x49
   259bc:	483c      	ldr	r0, [pc, #240]	; (25ab0 <dfu_target_modem_init+0x1a0>)
	err = getsockopt(fd, SOL_DFU, SO_DFU_FW_VERSION, &version,
   259be:	f10d 0814 	add.w	r8, sp, #20
	LOG_INF("Modem DFU Socket created");
   259c2:	f00d fda8 	bl	33516 <printk>
	err = getsockopt(fd, SOL_DFU, SO_DFU_FW_VERSION, &version,
   259c6:	4642      	mov	r2, r8
   259c8:	2101      	movs	r1, #1
   259ca:	6830      	ldr	r0, [r6, #0]
   259cc:	ab04      	add	r3, sp, #16
	len = sizeof(version);
   259ce:	9704      	str	r7, [sp, #16]
	err = getsockopt(fd, SOL_DFU, SO_DFU_FW_VERSION, &version,
   259d0:	f7ff feac 	bl	2572c <getsockopt.constprop.0>
	if (err < 0) {
   259d4:	2800      	cmp	r0, #0
   259d6:	da0b      	bge.n	259f0 <dfu_target_modem_init+0xe0>
		LOG_ERR("Firmware version request failed, errno %d", errno);
   259d8:	f00e f96b 	bl	33cb2 <__errno>
   259dc:	2145      	movs	r1, #69	; 0x45
   259de:	6802      	ldr	r2, [r0, #0]
   259e0:	4834      	ldr	r0, [pc, #208]	; (25ab4 <dfu_target_modem_init+0x1a4>)
   259e2:	f00d fd98 	bl	33516 <printk>
		return -1;
   259e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			LOG_INF("Error while setting offset: %d", offset);
		}
	}

	return 0;
}
   259ea:	b018      	add	sp, #96	; 0x60
   259ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	snprintf(version_string, sizeof(version_string), "%.*s",
   259f0:	463b      	mov	r3, r7
   259f2:	2125      	movs	r1, #37	; 0x25
   259f4:	4a30      	ldr	r2, [pc, #192]	; (25ab8 <dfu_target_modem_init+0x1a8>)
   259f6:	f8cd 8000 	str.w	r8, [sp]
   259fa:	a80e      	add	r0, sp, #56	; 0x38
   259fc:	f00c fbb2 	bl	32164 <sniprintf>
	LOG_INF("Modem firmware version: %s", log_strdup(version_string));
   25a00:	2149      	movs	r1, #73	; 0x49
   25a02:	482e      	ldr	r0, [pc, #184]	; (25abc <dfu_target_modem_init+0x1ac>)
   25a04:	aa0e      	add	r2, sp, #56	; 0x38
   25a06:	f00d fd86 	bl	33516 <printk>
	if (err < 0) {
   25a0a:	e7b6      	b.n	2597a <dfu_target_modem_init+0x6a>
			LOG_ERR("getsockopt(OFFSET) errno: %d", errno);
   25a0c:	f00e f951 	bl	33cb2 <__errno>
   25a10:	2145      	movs	r1, #69	; 0x45
   25a12:	6802      	ldr	r2, [r0, #0]
   25a14:	482a      	ldr	r0, [pc, #168]	; (25ac0 <dfu_target_modem_init+0x1b0>)
   25a16:	e7c2      	b.n	2599e <dfu_target_modem_init+0x8e>
	err = getsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, &len);
   25a18:	2107      	movs	r1, #7
   25a1a:	4a2a      	ldr	r2, [pc, #168]	; (25ac4 <dfu_target_modem_init+0x1b4>)
   25a1c:	6820      	ldr	r0, [r4, #0]
   25a1e:	ab03      	add	r3, sp, #12
   25a20:	f7ff fe84 	bl	2572c <getsockopt.constprop.0>
	if (err < 0) {
   25a24:	2800      	cmp	r0, #0
   25a26:	da0b      	bge.n	25a40 <dfu_target_modem_init+0x130>
		if (errno == ENOEXEC) {
   25a28:	f00e f943 	bl	33cb2 <__errno>
   25a2c:	6803      	ldr	r3, [r0, #0]
   25a2e:	2b08      	cmp	r3, #8
   25a30:	d10f      	bne.n	25a52 <dfu_target_modem_init+0x142>
			LOG_ERR("Modem error: %d", get_modem_error());
   25a32:	f7ff feb3 	bl	2579c <get_modem_error>
   25a36:	2145      	movs	r1, #69	; 0x45
   25a38:	4602      	mov	r2, r0
   25a3a:	481b      	ldr	r0, [pc, #108]	; (25aa8 <dfu_target_modem_init+0x198>)
			LOG_ERR("getsockopt(OFFSET) errno: %d", errno);
   25a3c:	f00d fd6b 	bl	33516 <printk>
	if (offset == DIRTY_IMAGE) {
   25a40:	4d20      	ldr	r5, [pc, #128]	; (25ac4 <dfu_target_modem_init+0x1b4>)
   25a42:	682a      	ldr	r2, [r5, #0]
   25a44:	f5b2 1f20 	cmp.w	r2, #2621440	; 0x280000
   25a48:	d109      	bne.n	25a5e <dfu_target_modem_init+0x14e>
		delete_banked_modem_fw();
   25a4a:	f7ff fefb 	bl	25844 <delete_banked_modem_fw>
	return 0;
   25a4e:	2000      	movs	r0, #0
   25a50:	e7cb      	b.n	259ea <dfu_target_modem_init+0xda>
			LOG_ERR("getsockopt(OFFSET) errno: %d", errno);
   25a52:	f00e f92e 	bl	33cb2 <__errno>
   25a56:	2145      	movs	r1, #69	; 0x45
   25a58:	6802      	ldr	r2, [r0, #0]
   25a5a:	4819      	ldr	r0, [pc, #100]	; (25ac0 <dfu_target_modem_init+0x1b0>)
   25a5c:	e7ee      	b.n	25a3c <dfu_target_modem_init+0x12c>
	} else if (offset != 0) {
   25a5e:	2a00      	cmp	r2, #0
   25a60:	d0f5      	beq.n	25a4e <dfu_target_modem_init+0x13e>
		LOG_INF("Setting offset to 0x%x", offset);
   25a62:	2149      	movs	r1, #73	; 0x49
   25a64:	4818      	ldr	r0, [pc, #96]	; (25ac8 <dfu_target_modem_init+0x1b8>)
   25a66:	f00d fd56 	bl	33516 <printk>
		len = sizeof(offset);
   25a6a:	2304      	movs	r3, #4
		err = setsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, len);
   25a6c:	462a      	mov	r2, r5
   25a6e:	2107      	movs	r1, #7
   25a70:	6820      	ldr	r0, [r4, #0]
		len = sizeof(offset);
   25a72:	9303      	str	r3, [sp, #12]
		err = setsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, len);
   25a74:	f7ff feae 	bl	257d4 <setsockopt.constprop.0>
		if (err != 0) {
   25a78:	2800      	cmp	r0, #0
   25a7a:	d0e8      	beq.n	25a4e <dfu_target_modem_init+0x13e>
			LOG_INF("Error while setting offset: %d", offset);
   25a7c:	2149      	movs	r1, #73	; 0x49
   25a7e:	682a      	ldr	r2, [r5, #0]
   25a80:	4812      	ldr	r0, [pc, #72]	; (25acc <dfu_target_modem_init+0x1bc>)
   25a82:	f00d fd48 	bl	33516 <printk>
   25a86:	e7e2      	b.n	25a4e <dfu_target_modem_init+0x13e>
   25a88:	200220f8 	.word	0x200220f8
   25a8c:	20022430 	.word	0x20022430
   25a90:	00037b4f 	.word	0x00037b4f
   25a94:	00037a66 	.word	0x00037a66
   25a98:	00037b1f 	.word	0x00037b1f
   25a9c:	00038d8e 	.word	0x00038d8e
   25aa0:	20022434 	.word	0x20022434
   25aa4:	0003a666 	.word	0x0003a666
   25aa8:	0003a6fe 	.word	0x0003a6fe
   25aac:	0003a735 	.word	0x0003a735
   25ab0:	0003a68c 	.word	0x0003a68c
   25ab4:	0003a6aa 	.word	0x0003a6aa
   25ab8:	0003a6d9 	.word	0x0003a6d9
   25abc:	0003a6de 	.word	0x0003a6de
   25ac0:	0003a713 	.word	0x0003a713
   25ac4:	20022438 	.word	0x20022438
   25ac8:	0003a769 	.word	0x0003a769
   25acc:	0003a785 	.word	0x0003a785

00025ad0 <dfu_target_modem_offset_get>:

int dfu_target_modem_offset_get(size_t *out)
{
	*out = offset;
   25ad0:	4b02      	ldr	r3, [pc, #8]	; (25adc <dfu_target_modem_offset_get+0xc>)
   25ad2:	681b      	ldr	r3, [r3, #0]
   25ad4:	6003      	str	r3, [r0, #0]
	return 0;
}
   25ad6:	2000      	movs	r0, #0
   25ad8:	4770      	bx	lr
   25ada:	bf00      	nop
   25adc:	20022438 	.word	0x20022438

00025ae0 <dfu_target_modem_write>:

int dfu_target_modem_write(const void *const buf, size_t len)
{
   25ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err = 0;
	int sent = 0;
	int modem_error = 0;

	sent = send(fd, buf, len, 0);
   25ae2:	4b2b      	ldr	r3, [pc, #172]	; (25b90 <dfu_target_modem_write+0xb0>)
	__ASSERT_NO_MSG(socket_ops);
   25ae4:	4c2b      	ldr	r4, [pc, #172]	; (25b94 <dfu_target_modem_write+0xb4>)
   25ae6:	681f      	ldr	r7, [r3, #0]
   25ae8:	6823      	ldr	r3, [r4, #0]
{
   25aea:	4606      	mov	r6, r0
   25aec:	460d      	mov	r5, r1
   25aee:	b94b      	cbnz	r3, 25b04 <dfu_target_modem_write+0x24>
   25af0:	4929      	ldr	r1, [pc, #164]	; (25b98 <dfu_target_modem_write+0xb8>)
   25af2:	482a      	ldr	r0, [pc, #168]	; (25b9c <dfu_target_modem_write+0xbc>)
   25af4:	237e      	movs	r3, #126	; 0x7e
   25af6:	4a2a      	ldr	r2, [pc, #168]	; (25ba0 <dfu_target_modem_write+0xc0>)
   25af8:	f00d fd0d 	bl	33516 <printk>
   25afc:	217e      	movs	r1, #126	; 0x7e
   25afe:	4828      	ldr	r0, [pc, #160]	; (25ba0 <dfu_target_modem_write+0xc0>)
   25b00:	f00d fd4f 	bl	335a2 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->send);
   25b04:	6823      	ldr	r3, [r4, #0]
   25b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   25b08:	b94b      	cbnz	r3, 25b1e <dfu_target_modem_write+0x3e>
   25b0a:	4926      	ldr	r1, [pc, #152]	; (25ba4 <dfu_target_modem_write+0xc4>)
   25b0c:	4823      	ldr	r0, [pc, #140]	; (25b9c <dfu_target_modem_write+0xbc>)
   25b0e:	237f      	movs	r3, #127	; 0x7f
   25b10:	4a23      	ldr	r2, [pc, #140]	; (25ba0 <dfu_target_modem_write+0xc0>)
   25b12:	f00d fd00 	bl	33516 <printk>
   25b16:	217f      	movs	r1, #127	; 0x7f
   25b18:	4821      	ldr	r0, [pc, #132]	; (25ba0 <dfu_target_modem_write+0xc0>)
   25b1a:	f00d fd42 	bl	335a2 <assert_post_action>
	return socket_ops->send(sock, buf, len, flags);
   25b1e:	6823      	ldr	r3, [r4, #0]
   25b20:	462a      	mov	r2, r5
   25b22:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   25b24:	4631      	mov	r1, r6
   25b26:	2300      	movs	r3, #0
   25b28:	4638      	mov	r0, r7
   25b2a:	47a0      	blx	r4
	if (sent > 0) {
   25b2c:	2800      	cmp	r0, #0
   25b2e:	dd05      	ble.n	25b3c <dfu_target_modem_write+0x5c>
		offset += len;
		return 0;
   25b30:	2000      	movs	r0, #0
		offset += len;
   25b32:	4b1d      	ldr	r3, [pc, #116]	; (25ba8 <dfu_target_modem_write+0xc8>)
   25b34:	6819      	ldr	r1, [r3, #0]
   25b36:	4429      	add	r1, r5
   25b38:	6019      	str	r1, [r3, #0]
			return 0;
		}
	default:
		return -EFAULT;
	}
}
   25b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (errno != ENOEXEC) {
   25b3c:	f00e f8b9 	bl	33cb2 <__errno>
   25b40:	6803      	ldr	r3, [r0, #0]
   25b42:	2b08      	cmp	r3, #8
   25b44:	d121      	bne.n	25b8a <dfu_target_modem_write+0xaa>
	modem_error = get_modem_error();
   25b46:	f7ff fe29 	bl	2579c <get_modem_error>
   25b4a:	4604      	mov	r4, r0
	LOG_ERR("send failed, modem errno %d, dfu err %d", errno, modem_error);
   25b4c:	f00e f8b1 	bl	33cb2 <__errno>
   25b50:	4623      	mov	r3, r4
   25b52:	6802      	ldr	r2, [r0, #0]
   25b54:	2145      	movs	r1, #69	; 0x45
   25b56:	4815      	ldr	r0, [pc, #84]	; (25bac <dfu_target_modem_write+0xcc>)
   25b58:	f00d fcdd 	bl	33516 <printk>
	switch (modem_error) {
   25b5c:	f114 0f0b 	cmn.w	r4, #11
   25b60:	d004      	beq.n	25b6c <dfu_target_modem_write+0x8c>
   25b62:	f114 0f09 	cmn.w	r4, #9
   25b66:	d00d      	beq.n	25b84 <dfu_target_modem_write+0xa4>
   25b68:	340e      	adds	r4, #14
   25b6a:	d10e      	bne.n	25b8a <dfu_target_modem_write+0xaa>
		delete_banked_modem_fw();
   25b6c:	f7ff fe6a 	bl	25844 <delete_banked_modem_fw>
		err = dfu_target_modem_write(buf, len);
   25b70:	4629      	mov	r1, r5
   25b72:	4630      	mov	r0, r6
   25b74:	f7ff ffb4 	bl	25ae0 <dfu_target_modem_write>
			return 0;
   25b78:	2800      	cmp	r0, #0
   25b7a:	bfb4      	ite	lt
   25b7c:	f06f 0015 	mvnlt.w	r0, #21
   25b80:	2000      	movge	r0, #0
   25b82:	e7da      	b.n	25b3a <dfu_target_modem_write+0x5a>
		return -EINVAL;
   25b84:	f06f 0015 	mvn.w	r0, #21
   25b88:	e7d7      	b.n	25b3a <dfu_target_modem_write+0x5a>
	switch (modem_error) {
   25b8a:	f06f 000d 	mvn.w	r0, #13
   25b8e:	e7d4      	b.n	25b3a <dfu_target_modem_write+0x5a>
   25b90:	20022434 	.word	0x20022434
   25b94:	200220f8 	.word	0x200220f8
   25b98:	00037b4f 	.word	0x00037b4f
   25b9c:	00037a66 	.word	0x00037a66
   25ba0:	00037b1f 	.word	0x00037b1f
   25ba4:	00038db5 	.word	0x00038db5
   25ba8:	20022438 	.word	0x20022438
   25bac:	0003a7a9 	.word	0x0003a7a9

00025bb0 <dfu_target_modem_done>:

int dfu_target_modem_done(bool successful)
{
   25bb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	LOG_INF("Scheduling modem firmware upgrade at next boot");
   25bb2:	2149      	movs	r1, #73	; 0x49
   25bb4:	4c24      	ldr	r4, [pc, #144]	; (25c48 <dfu_target_modem_done+0x98>)
	int err = 0;

	if (successful) {
   25bb6:	2800      	cmp	r0, #0
   25bb8:	d040      	beq.n	25c3c <dfu_target_modem_done+0x8c>
	LOG_INF("Scheduling modem firmware upgrade at next boot");
   25bba:	4824      	ldr	r0, [pc, #144]	; (25c4c <dfu_target_modem_done+0x9c>)
   25bbc:	f00d fcab 	bl	33516 <printk>
	err = setsockopt(fd, SOL_DFU, SO_DFU_APPLY, NULL, 0);
   25bc0:	2300      	movs	r3, #0
   25bc2:	2104      	movs	r1, #4
   25bc4:	461a      	mov	r2, r3
   25bc6:	6820      	ldr	r0, [r4, #0]
   25bc8:	f7ff fe04 	bl	257d4 <setsockopt.constprop.0>
	if (err < 0) {
   25bcc:	1e02      	subs	r2, r0, #0
   25bce:	da0d      	bge.n	25bec <dfu_target_modem_done+0x3c>
   25bd0:	9201      	str	r2, [sp, #4]
		if (errno == ENOEXEC) {
   25bd2:	f00e f86e 	bl	33cb2 <__errno>
   25bd6:	6803      	ldr	r3, [r0, #0]
   25bd8:	9a01      	ldr	r2, [sp, #4]
   25bda:	2b08      	cmp	r3, #8
   25bdc:	d102      	bne.n	25be4 <dfu_target_modem_done+0x34>
			LOG_ERR("SO_DFU_APPLY failed, modem error %d",
   25bde:	f7ff fddd 	bl	2579c <get_modem_error>
   25be2:	4602      	mov	r2, r0
			LOG_ERR("SO_DFU_APPLY failed, modem error %d", err);
   25be4:	2145      	movs	r1, #69	; 0x45
   25be6:	481a      	ldr	r0, [pc, #104]	; (25c50 <dfu_target_modem_done+0xa0>)
   25be8:	f00d fc95 	bl	33516 <printk>
	} else {
		LOG_INF("Modem upgrade aborted.");
	}


	err = close(fd);
   25bec:	6825      	ldr	r5, [r4, #0]
	__ASSERT_NO_MSG(socket_ops);
   25bee:	4c19      	ldr	r4, [pc, #100]	; (25c54 <dfu_target_modem_done+0xa4>)
   25bf0:	6823      	ldr	r3, [r4, #0]
   25bf2:	b94b      	cbnz	r3, 25c08 <dfu_target_modem_done+0x58>
   25bf4:	4918      	ldr	r1, [pc, #96]	; (25c58 <dfu_target_modem_done+0xa8>)
   25bf6:	4819      	ldr	r0, [pc, #100]	; (25c5c <dfu_target_modem_done+0xac>)
   25bf8:	2321      	movs	r3, #33	; 0x21
   25bfa:	4a19      	ldr	r2, [pc, #100]	; (25c60 <dfu_target_modem_done+0xb0>)
   25bfc:	f00d fc8b 	bl	33516 <printk>
   25c00:	2121      	movs	r1, #33	; 0x21
   25c02:	4817      	ldr	r0, [pc, #92]	; (25c60 <dfu_target_modem_done+0xb0>)
   25c04:	f00d fccd 	bl	335a2 <assert_post_action>
	__ASSERT_NO_MSG(socket_ops->close);
   25c08:	6823      	ldr	r3, [r4, #0]
   25c0a:	685b      	ldr	r3, [r3, #4]
   25c0c:	b94b      	cbnz	r3, 25c22 <dfu_target_modem_done+0x72>
   25c0e:	4915      	ldr	r1, [pc, #84]	; (25c64 <dfu_target_modem_done+0xb4>)
   25c10:	4812      	ldr	r0, [pc, #72]	; (25c5c <dfu_target_modem_done+0xac>)
   25c12:	2322      	movs	r3, #34	; 0x22
   25c14:	4a12      	ldr	r2, [pc, #72]	; (25c60 <dfu_target_modem_done+0xb0>)
   25c16:	f00d fc7e 	bl	33516 <printk>
   25c1a:	2122      	movs	r1, #34	; 0x22
   25c1c:	4810      	ldr	r0, [pc, #64]	; (25c60 <dfu_target_modem_done+0xb0>)
   25c1e:	f00d fcc0 	bl	335a2 <assert_post_action>
	return socket_ops->close(sock);
   25c22:	6823      	ldr	r3, [r4, #0]
   25c24:	4628      	mov	r0, r5
   25c26:	685b      	ldr	r3, [r3, #4]
   25c28:	4798      	blx	r3
	if (err < 0) {
   25c2a:	1e04      	subs	r4, r0, #0
   25c2c:	da0a      	bge.n	25c44 <dfu_target_modem_done+0x94>
		LOG_ERR("Failed to close modem DFU socket.");
   25c2e:	2145      	movs	r1, #69	; 0x45
   25c30:	480d      	ldr	r0, [pc, #52]	; (25c68 <dfu_target_modem_done+0xb8>)
   25c32:	f00d fc70 	bl	33516 <printk>
		return err;
	}

	return 0;
}
   25c36:	4620      	mov	r0, r4
   25c38:	b003      	add	sp, #12
   25c3a:	bd30      	pop	{r4, r5, pc}
		LOG_INF("Modem upgrade aborted.");
   25c3c:	480b      	ldr	r0, [pc, #44]	; (25c6c <dfu_target_modem_done+0xbc>)
   25c3e:	f00d fc6a 	bl	33516 <printk>
   25c42:	e7d3      	b.n	25bec <dfu_target_modem_done+0x3c>
	return 0;
   25c44:	2400      	movs	r4, #0
   25c46:	e7f6      	b.n	25c36 <dfu_target_modem_done+0x86>
   25c48:	20022434 	.word	0x20022434
   25c4c:	0003a7d6 	.word	0x0003a7d6
   25c50:	0003a80a 	.word	0x0003a80a
   25c54:	200220f8 	.word	0x200220f8
   25c58:	00037b4f 	.word	0x00037b4f
   25c5c:	00037a66 	.word	0x00037a66
   25c60:	00037b1f 	.word	0x00037b1f
   25c64:	00038d7c 	.word	0x00038d7c
   25c68:	0003a84f 	.word	0x0003a84f
   25c6c:	0003a833 	.word	0x0003a833

00025c70 <store_flash_img_context>:
/**
 * @brief Store the information stored in the flash_img instance so that it can
 *	  be restored from flash in case of a power failure, reboot etc.
 */
static int store_flash_img_context(void)
{
   25c70:	b570      	push	{r4, r5, r6, lr}
   25c72:	b086      	sub	sp, #24
	if (IS_ENABLED(CONFIG_DFU_TARGET_MCUBOOT_SAVE_PROGRESS)) {
		char key[] = MODULE "/" FILE_FLASH_IMG;
   25c74:	466a      	mov	r2, sp
   25c76:	4615      	mov	r5, r2
   25c78:	4b0e      	ldr	r3, [pc, #56]	; (25cb4 <store_flash_img_context+0x44>)
   25c7a:	f103 0610 	add.w	r6, r3, #16
   25c7e:	4614      	mov	r4, r2
   25c80:	6818      	ldr	r0, [r3, #0]
   25c82:	6859      	ldr	r1, [r3, #4]
   25c84:	3308      	adds	r3, #8
   25c86:	c403      	stmia	r4!, {r0, r1}
   25c88:	42b3      	cmp	r3, r6
   25c8a:	4622      	mov	r2, r4
   25c8c:	d1f7      	bne.n	25c7e <store_flash_img_context+0xe>
   25c8e:	6818      	ldr	r0, [r3, #0]
   25c90:	889b      	ldrh	r3, [r3, #4]
   25c92:	6020      	str	r0, [r4, #0]
   25c94:	80a3      	strh	r3, [r4, #4]
		int err = settings_save_one(key, &flash_img.bytes_written,
   25c96:	2204      	movs	r2, #4
   25c98:	4628      	mov	r0, r5
   25c9a:	4907      	ldr	r1, [pc, #28]	; (25cb8 <store_flash_img_context+0x48>)
   25c9c:	f7f9 fd4a 	bl	1f734 <settings_save_one>
					    sizeof(flash_img.bytes_written));

		if (err) {
   25ca0:	4604      	mov	r4, r0
   25ca2:	b120      	cbz	r0, 25cae <store_flash_img_context+0x3e>
			LOG_ERR("Problem storing offset (err %d)", err);
   25ca4:	4602      	mov	r2, r0
   25ca6:	2145      	movs	r1, #69	; 0x45
   25ca8:	4804      	ldr	r0, [pc, #16]	; (25cbc <store_flash_img_context+0x4c>)
   25caa:	f00d fc34 	bl	33516 <printk>
			return err;
		}
	}

	return 0;
}
   25cae:	4620      	mov	r0, r4
   25cb0:	b006      	add	sp, #24
   25cb2:	bd70      	pop	{r4, r5, r6, pc}
   25cb4:	0003a8ac 	.word	0x0003a8ac
   25cb8:	20022640 	.word	0x20022640
   25cbc:	0003a887 	.word	0x0003a887

00025cc0 <reset_flash_context>:

	return 0;
}

static void reset_flash_context(void)
{
   25cc0:	b508      	push	{r3, lr}
	/* Need to set bytes_written to 0 */
	int err = flash_img_init(&flash_img);
   25cc2:	4809      	ldr	r0, [pc, #36]	; (25ce8 <reset_flash_context+0x28>)
   25cc4:	f00d fe13 	bl	338ee <flash_img_init>

	if (err) {
   25cc8:	b118      	cbz	r0, 25cd2 <reset_flash_context+0x12>
		LOG_ERR("Unable to re-initialize flash_img");
   25cca:	2145      	movs	r1, #69	; 0x45
   25ccc:	4807      	ldr	r0, [pc, #28]	; (25cec <reset_flash_context+0x2c>)
   25cce:	f00d fc22 	bl	33516 <printk>
	}
	err = store_flash_img_context();
   25cd2:	f7ff ffcd 	bl	25c70 <store_flash_img_context>
	if (err != 0) {
   25cd6:	4602      	mov	r2, r0
   25cd8:	b128      	cbz	r0, 25ce6 <reset_flash_context+0x26>
		LOG_ERR("Unable to reset write progress: %d", err);
	}
}
   25cda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("Unable to reset write progress: %d", err);
   25cde:	2145      	movs	r1, #69	; 0x45
   25ce0:	4803      	ldr	r0, [pc, #12]	; (25cf0 <reset_flash_context+0x30>)
   25ce2:	f00d bc18 	b.w	33516 <printk>
}
   25ce6:	bd08      	pop	{r3, pc}
   25ce8:	2002243c 	.word	0x2002243c
   25cec:	0003a8c2 	.word	0x0003a8c2
   25cf0:	0003a8e9 	.word	0x0003a8e9

00025cf4 <settings_set>:
{
   25cf4:	b538      	push	{r3, r4, r5, lr}
	if (!strcmp(key, FILE_FLASH_IMG)) {
   25cf6:	490a      	ldr	r1, [pc, #40]	; (25d20 <settings_set+0x2c>)
{
   25cf8:	4614      	mov	r4, r2
   25cfa:	461d      	mov	r5, r3
	if (!strcmp(key, FILE_FLASH_IMG)) {
   25cfc:	f7f7 f9ee 	bl	1d0dc <strcmp>
   25d00:	b110      	cbz	r0, 25d08 <settings_set+0x14>
	return 0;
   25d02:	2400      	movs	r4, #0
}
   25d04:	4620      	mov	r0, r4
   25d06:	bd38      	pop	{r3, r4, r5, pc}
		ssize_t len = read_cb(cb_arg, &flash_img.bytes_written,
   25d08:	2204      	movs	r2, #4
   25d0a:	4628      	mov	r0, r5
   25d0c:	4905      	ldr	r1, [pc, #20]	; (25d24 <settings_set+0x30>)
   25d0e:	47a0      	blx	r4
		if (len != sizeof(flash_img.bytes_written)) {
   25d10:	2804      	cmp	r0, #4
		ssize_t len = read_cb(cb_arg, &flash_img.bytes_written,
   25d12:	4604      	mov	r4, r0
		if (len != sizeof(flash_img.bytes_written)) {
   25d14:	d0f5      	beq.n	25d02 <settings_set+0xe>
			LOG_ERR("Can't read flash_img from storage");
   25d16:	2145      	movs	r1, #69	; 0x45
   25d18:	4803      	ldr	r0, [pc, #12]	; (25d28 <settings_set+0x34>)
   25d1a:	f00d fbfc 	bl	33516 <printk>
			return len;
   25d1e:	e7f1      	b.n	25d04 <settings_set+0x10>
   25d20:	0003a8b0 	.word	0x0003a8b0
   25d24:	20022640 	.word	0x20022640
   25d28:	0003a911 	.word	0x0003a911

00025d2c <dfu_target_mcuboot_identify>:
	return *((const u32_t *)buf) == MCUBOOT_HEADER_MAGIC;
   25d2c:	6800      	ldr	r0, [r0, #0]
}
   25d2e:	4b02      	ldr	r3, [pc, #8]	; (25d38 <dfu_target_mcuboot_identify+0xc>)
   25d30:	1ac3      	subs	r3, r0, r3
   25d32:	4258      	negs	r0, r3
   25d34:	4158      	adcs	r0, r3
   25d36:	4770      	bx	lr
   25d38:	96f3b83d 	.word	0x96f3b83d

00025d3c <dfu_target_mcuboot_init>:
{
   25d3c:	b538      	push	{r3, r4, r5, lr}
   25d3e:	4605      	mov	r5, r0
	int err = flash_img_init(&flash_img);
   25d40:	4819      	ldr	r0, [pc, #100]	; (25da8 <dfu_target_mcuboot_init+0x6c>)
   25d42:	f00d fdd4 	bl	338ee <flash_img_init>
	if (err != 0) {
   25d46:	4604      	mov	r4, r0
   25d48:	b128      	cbz	r0, 25d56 <dfu_target_mcuboot_init+0x1a>
		LOG_ERR("flash_img_init error %d", err);
   25d4a:	2145      	movs	r1, #69	; 0x45
   25d4c:	4602      	mov	r2, r0
   25d4e:	4817      	ldr	r0, [pc, #92]	; (25dac <dfu_target_mcuboot_init+0x70>)
			LOG_ERR("Cannot load settings (err %d)", err);
   25d50:	f00d fbe1 	bl	33516 <printk>
			return err;
   25d54:	e00b      	b.n	25d6e <dfu_target_mcuboot_init+0x32>
	if (file_size > PM_MCUBOOT_SECONDARY_SIZE) {
   25d56:	f5b5 2fee 	cmp.w	r5, #487424	; 0x77000
   25d5a:	d90a      	bls.n	25d72 <dfu_target_mcuboot_init+0x36>
		LOG_ERR("Requested file too big to fit in flash %zu > 0x%x",
   25d5c:	f44f 23ee 	mov.w	r3, #487424	; 0x77000
   25d60:	462a      	mov	r2, r5
   25d62:	2145      	movs	r1, #69	; 0x45
   25d64:	4812      	ldr	r0, [pc, #72]	; (25db0 <dfu_target_mcuboot_init+0x74>)
   25d66:	f00d fbd6 	bl	33516 <printk>
		return -EFBIG;
   25d6a:	f06f 041a 	mvn.w	r4, #26
}
   25d6e:	4620      	mov	r0, r4
   25d70:	bd38      	pop	{r3, r4, r5, pc}
		err = settings_subsys_init();
   25d72:	f7f9 feaf 	bl	1fad4 <settings_subsys_init>
		if (err) {
   25d76:	4604      	mov	r4, r0
   25d78:	b118      	cbz	r0, 25d82 <dfu_target_mcuboot_init+0x46>
			LOG_ERR("settings_subsys_init failed (err %d)", err);
   25d7a:	4602      	mov	r2, r0
   25d7c:	2145      	movs	r1, #69	; 0x45
   25d7e:	480d      	ldr	r0, [pc, #52]	; (25db4 <dfu_target_mcuboot_init+0x78>)
   25d80:	e7e6      	b.n	25d50 <dfu_target_mcuboot_init+0x14>
		err = settings_register(&sh);
   25d82:	480d      	ldr	r0, [pc, #52]	; (25db8 <dfu_target_mcuboot_init+0x7c>)
   25d84:	f7f9 fd56 	bl	1f834 <settings_register>
		if (err) {
   25d88:	4604      	mov	r4, r0
   25d8a:	b118      	cbz	r0, 25d94 <dfu_target_mcuboot_init+0x58>
			LOG_ERR("Cannot register settings (err %d)", err);
   25d8c:	4602      	mov	r2, r0
   25d8e:	2145      	movs	r1, #69	; 0x45
   25d90:	480a      	ldr	r0, [pc, #40]	; (25dbc <dfu_target_mcuboot_init+0x80>)
   25d92:	e7dd      	b.n	25d50 <dfu_target_mcuboot_init+0x14>
		err = settings_load();
   25d94:	f00d fe51 	bl	33a3a <settings_load>
		if (err) {
   25d98:	4604      	mov	r4, r0
   25d9a:	2800      	cmp	r0, #0
   25d9c:	d0e7      	beq.n	25d6e <dfu_target_mcuboot_init+0x32>
			LOG_ERR("Cannot load settings (err %d)", err);
   25d9e:	4602      	mov	r2, r0
   25da0:	2145      	movs	r1, #69	; 0x45
   25da2:	4807      	ldr	r0, [pc, #28]	; (25dc0 <dfu_target_mcuboot_init+0x84>)
   25da4:	e7d4      	b.n	25d50 <dfu_target_mcuboot_init+0x14>
   25da6:	bf00      	nop
   25da8:	2002243c 	.word	0x2002243c
   25dac:	0003a938 	.word	0x0003a938
   25db0:	0003a955 	.word	0x0003a955
   25db4:	0003a98c 	.word	0x0003a98c
   25db8:	20029594 	.word	0x20029594
   25dbc:	0003a9b6 	.word	0x0003a9b6
   25dc0:	0003a9dd 	.word	0x0003a9dd

00025dc4 <dfu_target_mcuboot_offset_get>:
{
   25dc4:	b510      	push	{r4, lr}
   25dc6:	4604      	mov	r4, r0
	*out = flash_img_bytes_written(&flash_img);
   25dc8:	4802      	ldr	r0, [pc, #8]	; (25dd4 <dfu_target_mcuboot_offset_get+0x10>)
   25dca:	f00d fd8d 	bl	338e8 <flash_img_bytes_written>
   25dce:	6020      	str	r0, [r4, #0]
}
   25dd0:	2000      	movs	r0, #0
   25dd2:	bd10      	pop	{r4, pc}
   25dd4:	2002243c 	.word	0x2002243c

00025dd8 <dfu_target_mcuboot_write>:
{
   25dd8:	460a      	mov	r2, r1
   25dda:	b510      	push	{r4, lr}
	int err = flash_img_buffered_write(&flash_img, (u8_t *)buf, len, false);
   25ddc:	4601      	mov	r1, r0
   25dde:	2300      	movs	r3, #0
   25de0:	4809      	ldr	r0, [pc, #36]	; (25e08 <dfu_target_mcuboot_write+0x30>)
   25de2:	f00d fd34 	bl	3384e <flash_img_buffered_write>
	if (err != 0) {
   25de6:	4604      	mov	r4, r0
   25de8:	b130      	cbz	r0, 25df8 <dfu_target_mcuboot_write+0x20>
		LOG_ERR("flash_img_buffered_write error %d", err);
   25dea:	2145      	movs	r1, #69	; 0x45
   25dec:	4602      	mov	r2, r0
   25dee:	4807      	ldr	r0, [pc, #28]	; (25e0c <dfu_target_mcuboot_write+0x34>)
		LOG_WRN("Unable to store write progress: %d", err);
   25df0:	f00d fb91 	bl	33516 <printk>
}
   25df4:	4620      	mov	r0, r4
   25df6:	bd10      	pop	{r4, pc}
	err = store_flash_img_context();
   25df8:	f7ff ff3a 	bl	25c70 <store_flash_img_context>
	if (err != 0) {
   25dfc:	4602      	mov	r2, r0
   25dfe:	2800      	cmp	r0, #0
   25e00:	d0f8      	beq.n	25df4 <dfu_target_mcuboot_write+0x1c>
		LOG_WRN("Unable to store write progress: %d", err);
   25e02:	2157      	movs	r1, #87	; 0x57
   25e04:	4802      	ldr	r0, [pc, #8]	; (25e10 <dfu_target_mcuboot_write+0x38>)
   25e06:	e7f3      	b.n	25df0 <dfu_target_mcuboot_write+0x18>
   25e08:	2002243c 	.word	0x2002243c
   25e0c:	0003aa00 	.word	0x0003aa00
   25e10:	0003aa27 	.word	0x0003aa27

00025e14 <dfu_target_mcuboot_done>:

int dfu_target_mcuboot_done(bool successful)
{
   25e14:	b510      	push	{r4, lr}
	int err = 0;

	if (successful) {
   25e16:	b300      	cbz	r0, 25e5a <dfu_target_mcuboot_done+0x46>
		err = flash_img_buffered_write(&flash_img, NULL, 0, true);
   25e18:	2200      	movs	r2, #0
   25e1a:	2301      	movs	r3, #1
   25e1c:	4611      	mov	r1, r2
   25e1e:	4810      	ldr	r0, [pc, #64]	; (25e60 <dfu_target_mcuboot_done+0x4c>)
   25e20:	f00d fd15 	bl	3384e <flash_img_buffered_write>
		if (err != 0) {
   25e24:	4604      	mov	r4, r0
   25e26:	b140      	cbz	r0, 25e3a <dfu_target_mcuboot_done+0x26>
			LOG_ERR("flash_img_buffered_write error %d", err);
   25e28:	2145      	movs	r1, #69	; 0x45
   25e2a:	4602      	mov	r2, r0
   25e2c:	480d      	ldr	r0, [pc, #52]	; (25e64 <dfu_target_mcuboot_done+0x50>)
			return err;
		}

		err = boot_request_upgrade(BOOT_UPGRADE_TEST);
		if (err != 0) {
			LOG_ERR("boot_request_upgrade error %d", err);
   25e2e:	f00d fb72 	bl	33516 <printk>
			reset_flash_context();
   25e32:	f7ff ff45 	bl	25cc0 <reset_flash_context>
		LOG_INF("MCUBoot image upgrade aborted.");
	}

	reset_flash_context();
	return err;
}
   25e36:	4620      	mov	r0, r4
   25e38:	bd10      	pop	{r4, pc}
		err = boot_request_upgrade(BOOT_UPGRADE_TEST);
   25e3a:	f7f9 fb1f 	bl	1f47c <boot_request_upgrade>
		if (err != 0) {
   25e3e:	4604      	mov	r4, r0
   25e40:	b118      	cbz	r0, 25e4a <dfu_target_mcuboot_done+0x36>
			LOG_ERR("boot_request_upgrade error %d", err);
   25e42:	4602      	mov	r2, r0
   25e44:	2145      	movs	r1, #69	; 0x45
   25e46:	4808      	ldr	r0, [pc, #32]	; (25e68 <dfu_target_mcuboot_done+0x54>)
   25e48:	e7f1      	b.n	25e2e <dfu_target_mcuboot_done+0x1a>
		LOG_INF("MCUBoot image upgrade scheduled. Reset the device to "
   25e4a:	2149      	movs	r1, #73	; 0x49
   25e4c:	4807      	ldr	r0, [pc, #28]	; (25e6c <dfu_target_mcuboot_done+0x58>)
		LOG_INF("MCUBoot image upgrade aborted.");
   25e4e:	f00d fb62 	bl	33516 <printk>
	return err;
   25e52:	2400      	movs	r4, #0
	reset_flash_context();
   25e54:	f7ff ff34 	bl	25cc0 <reset_flash_context>
	return err;
   25e58:	e7ed      	b.n	25e36 <dfu_target_mcuboot_done+0x22>
		LOG_INF("MCUBoot image upgrade aborted.");
   25e5a:	2149      	movs	r1, #73	; 0x49
   25e5c:	4804      	ldr	r0, [pc, #16]	; (25e70 <dfu_target_mcuboot_done+0x5c>)
   25e5e:	e7f6      	b.n	25e4e <dfu_target_mcuboot_done+0x3a>
   25e60:	2002243c 	.word	0x2002243c
   25e64:	0003aa00 	.word	0x0003aa00
   25e68:	0003aa4f 	.word	0x0003aa4f
   25e6c:	0003aa72 	.word	0x0003aa72
   25e70:	0003aab2 	.word	0x0003aab2

00025e74 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(struct device *dev)
{
   25e74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   25e78:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   25e7a:	4c21      	ldr	r4, [pc, #132]	; (25f00 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							u32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const u32_t ext_api_magic[] = {EXT_API_MAGIC};
   25e7c:	4e21      	ldr	r6, [pc, #132]	; (25f04 <check_ext_api_requests+0x90>)
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   25e7e:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   25e82:	f8df 9088 	ldr.w	r9, [pc, #136]	; 25f0c <check_ext_api_requests+0x98>
{
   25e86:	b085      	sub	sp, #20
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   25e88:	45a8      	cmp	r8, r5
   25e8a:	d803      	bhi.n	25e94 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   25e8c:	2000      	movs	r0, #0
   25e8e:	b005      	add	sp, #20
   25e90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((u32_t)*(ext_api_req->ext_api))
   25e94:	6a63      	ldr	r3, [r4, #36]	; 0x24
   25e96:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   25e9a:	681f      	ldr	r7, [r3, #0]
   25e9c:	ab01      	add	r3, sp, #4
   25e9e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   25ea2:	220c      	movs	r2, #12
   25ea4:	4619      	mov	r1, r3
   25ea6:	4638      	mov	r0, r7
   25ea8:	f00f fe20 	bl	35aec <memcmp>
   25eac:	b990      	cbnz	r0, 25ed4 <check_ext_api_requests+0x60>
   25eae:	b18f      	cbz	r7, 25ed4 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   25eb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const u32_t req_id = ext_api_req->request.ext_api_id;
   25eb2:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   25eb4:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   25eb6:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   25eb8:	4291      	cmp	r1, r2
   25eba:	d10b      	bne.n	25ed4 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   25ebc:	699a      	ldr	r2, [r3, #24]
	const u32_t req_min_version = ext_api_req->request.ext_api_version;
   25ebe:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   25ec0:	4291      	cmp	r1, r2
   25ec2:	d807      	bhi.n	25ed4 <check_ext_api_requests+0x60>
	const u32_t req_max_version = ext_api_req->ext_api_max_version;
   25ec4:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   25ec6:	4291      	cmp	r1, r2
   25ec8:	d904      	bls.n	25ed4 <check_ext_api_requests+0x60>
	const u32_t req_flags = ext_api_req->request.ext_api_flags;
   25eca:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   25ecc:	695b      	ldr	r3, [r3, #20]
   25ece:	ea32 0303 	bics.w	r3, r2, r3
   25ed2:	d00a      	beq.n	25eea <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   25ed4:	6a27      	ldr	r7, [r4, #32]
   25ed6:	b167      	cbz	r7, 25ef2 <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   25ed8:	480b      	ldr	r0, [pc, #44]	; (25f08 <check_ext_api_requests+0x94>)
   25eda:	f00d fb1c 	bl	33516 <printk>
			k_panic();
   25ede:	4040      	eors	r0, r0
   25ee0:	f380 8811 	msr	BASEPRI, r0
   25ee4:	f04f 0004 	mov.w	r0, #4
   25ee8:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   25eea:	68e3      	ldr	r3, [r4, #12]
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   25eec:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   25eee:	441c      	add	r4, r3
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   25ef0:	e7ca      	b.n	25e88 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   25ef2:	4648      	mov	r0, r9
   25ef4:	f00d fb0f 	bl	33516 <printk>
			*ext_api_req->ext_api = NULL;
   25ef8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   25efa:	601f      	str	r7, [r3, #0]
   25efc:	e7f5      	b.n	25eea <check_ext_api_requests+0x76>
   25efe:	bf00      	nop
   25f00:	0001c43c 	.word	0x0001c43c
   25f04:	00036df0 	.word	0x00036df0
   25f08:	0003aaed 	.word	0x0003aaed
   25f0c:	0003ab16 	.word	0x0003ab16

00025f10 <rpc_logobj_client_evt_handler>:
   25f10:	b120      	cbz	r0, 25f1c <rpc_logobj_client_evt_handler+0xc>
   25f12:	f850 1b08 	ldr.w	r1, [r0], #8
   25f16:	0c09      	lsrs	r1, r1, #16
   25f18:	f000 b852 	b.w	25fc0 <logobj_event_handler>
   25f1c:	4770      	bx	lr
   25f1e:	bf00      	nop

00025f20 <rpc_logobj_client_init>:
   25f20:	4801      	ldr	r0, [pc, #4]	; (25f28 <rpc_logobj_client_init+0x8>)
   25f22:	f006 bbcf 	b.w	2c6c4 <rpc_client_register>
   25f26:	bf00      	nop
   25f28:	000371bc 	.word	0x000371bc

00025f2c <rpc_logobj_client_request_alloc>:
   25f2c:	2300      	movs	r3, #0
   25f2e:	b510      	push	{r4, lr}
   25f30:	b082      	sub	sp, #8
   25f32:	9301      	str	r3, [sp, #4]
   25f34:	b961      	cbnz	r1, 25f50 <rpc_logobj_client_request_alloc+0x24>
   25f36:	b170      	cbz	r0, 25f56 <rpc_logobj_client_request_alloc+0x2a>
   25f38:	4604      	mov	r4, r0
   25f3a:	aa01      	add	r2, sp, #4
   25f3c:	2009      	movs	r0, #9
   25f3e:	f006 fdf9 	bl	2cb34 <rpc_message_alloc>
   25f42:	b918      	cbnz	r0, 25f4c <rpc_logobj_client_request_alloc+0x20>
   25f44:	9b01      	ldr	r3, [sp, #4]
   25f46:	b10b      	cbz	r3, 25f4c <rpc_logobj_client_request_alloc+0x20>
   25f48:	3308      	adds	r3, #8
   25f4a:	6023      	str	r3, [r4, #0]
   25f4c:	b002      	add	sp, #8
   25f4e:	bd10      	pop	{r4, pc}
   25f50:	200f      	movs	r0, #15
   25f52:	b002      	add	sp, #8
   25f54:	bd10      	pop	{r4, pc}
   25f56:	200e      	movs	r0, #14
   25f58:	b002      	add	sp, #8
   25f5a:	bd10      	pop	{r4, pc}

00025f5c <rpc_logobj_client_request_send>:
   25f5c:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   25f60:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   25f64:	d10b      	bne.n	25f7e <rpc_logobj_client_request_send+0x22>
   25f66:	b160      	cbz	r0, 25f82 <rpc_logobj_client_request_send+0x26>
   25f68:	4603      	mov	r3, r0
   25f6a:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   25f6e:	2009      	movs	r0, #9
   25f70:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   25f74:	f843 1d08 	str.w	r1, [r3, #-8]!
   25f78:	4619      	mov	r1, r3
   25f7a:	f006 bdc3 	b.w	2cb04 <rpc_message_send>
   25f7e:	200f      	movs	r0, #15
   25f80:	4770      	bx	lr
   25f82:	200e      	movs	r0, #14
   25f84:	4770      	bx	lr
   25f86:	bf00      	nop

00025f88 <rpc_logobj_client_message_free>:
   25f88:	b120      	cbz	r0, 25f94 <rpc_logobj_client_message_free+0xc>
   25f8a:	f1a0 0108 	sub.w	r1, r0, #8
   25f8e:	2009      	movs	r0, #9
   25f90:	f006 be02 	b.w	2cb98 <rpc_message_free>
   25f94:	200e      	movs	r0, #14
   25f96:	4770      	bx	lr

00025f98 <rpc_logobj_client_data_free>:
   25f98:	b118      	cbz	r0, 25fa2 <rpc_logobj_client_data_free+0xa>
   25f9a:	4601      	mov	r1, r0
   25f9c:	2009      	movs	r0, #9
   25f9e:	f006 bf0d 	b.w	2cdbc <rpc_message_data_free>
   25fa2:	200e      	movs	r0, #14
   25fa4:	4770      	bx	lr
   25fa6:	bf00      	nop

00025fa8 <packet_free_cb>:
   25fa8:	b510      	push	{r4, lr}
   25faa:	4604      	mov	r4, r0
   25fac:	6800      	ldr	r0, [r0, #0]
   25fae:	f7ff fff3 	bl	25f98 <rpc_logobj_client_data_free>
   25fb2:	68a0      	ldr	r0, [r4, #8]
   25fb4:	b118      	cbz	r0, 25fbe <packet_free_cb+0x16>
   25fb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   25fba:	f001 b935 	b.w	27228 <nrf_free>
   25fbe:	bd10      	pop	{r4, pc}

00025fc0 <logobj_event_handler>:
   25fc0:	b530      	push	{r4, r5, lr}
   25fc2:	4b3b      	ldr	r3, [pc, #236]	; (260b0 <logobj_event_handler+0xf0>)
   25fc4:	b085      	sub	sp, #20
   25fc6:	681d      	ldr	r5, [r3, #0]
   25fc8:	2d00      	cmp	r5, #0
   25fca:	d04c      	beq.n	26066 <logobj_event_handler+0xa6>
   25fcc:	f248 0302 	movw	r3, #32770	; 0x8002
   25fd0:	4299      	cmp	r1, r3
   25fd2:	d053      	beq.n	2607c <logobj_event_handler+0xbc>
   25fd4:	d91c      	bls.n	26010 <logobj_event_handler+0x50>
   25fd6:	f248 0303 	movw	r3, #32771	; 0x8003
   25fda:	4299      	cmp	r1, r3
   25fdc:	d05a      	beq.n	26094 <logobj_event_handler+0xd4>
   25fde:	f249 0301 	movw	r3, #36865	; 0x9001
   25fe2:	4299      	cmp	r1, r3
   25fe4:	d147      	bne.n	26076 <logobj_event_handler+0xb6>
   25fe6:	2400      	movs	r4, #0
   25fe8:	6843      	ldr	r3, [r0, #4]
   25fea:	6802      	ldr	r2, [r0, #0]
   25fec:	e9cd 4402 	strd	r4, r4, [sp, #8]
   25ff0:	e9cd 2300 	strd	r2, r3, [sp]
   25ff4:	69e8      	ldr	r0, [r5, #28]
   25ff6:	4669      	mov	r1, sp
   25ff8:	6803      	ldr	r3, [r0, #0]
   25ffa:	685b      	ldr	r3, [r3, #4]
   25ffc:	4798      	blx	r3
   25ffe:	3001      	adds	r0, #1
   26000:	d04e      	beq.n	260a0 <logobj_event_handler+0xe0>
   26002:	4620      	mov	r0, r4
   26004:	682b      	ldr	r3, [r5, #0]
   26006:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   2600a:	602b      	str	r3, [r5, #0]
   2600c:	b005      	add	sp, #20
   2600e:	bd30      	pop	{r4, r5, pc}
   26010:	f248 0301 	movw	r3, #32769	; 0x8001
   26014:	4299      	cmp	r1, r3
   26016:	d12e      	bne.n	26076 <logobj_event_handler+0xb6>
   26018:	68c3      	ldr	r3, [r0, #12]
   2601a:	2b00      	cmp	r3, #0
   2601c:	d135      	bne.n	2608a <logobj_event_handler+0xca>
   2601e:	6828      	ldr	r0, [r5, #0]
   26020:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   26024:	d03e      	beq.n	260a4 <logobj_event_handler+0xe4>
   26026:	682b      	ldr	r3, [r5, #0]
   26028:	b29b      	uxth	r3, r3
   2602a:	2b01      	cmp	r3, #1
   2602c:	d105      	bne.n	2603a <logobj_event_handler+0x7a>
   2602e:	682b      	ldr	r3, [r5, #0]
   26030:	0c1b      	lsrs	r3, r3, #16
   26032:	041b      	lsls	r3, r3, #16
   26034:	f043 0302 	orr.w	r3, r3, #2
   26038:	602b      	str	r3, [r5, #0]
   2603a:	4b1e      	ldr	r3, [pc, #120]	; (260b4 <logobj_event_handler+0xf4>)
   2603c:	781a      	ldrb	r2, [r3, #0]
   2603e:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   26042:	2a00      	cmp	r2, #0
   26044:	d031      	beq.n	260aa <logobj_event_handler+0xea>
   26046:	4a1c      	ldr	r2, [pc, #112]	; (260b8 <logobj_event_handler+0xf8>)
   26048:	7811      	ldrb	r1, [r2, #0]
   2604a:	b909      	cbnz	r1, 26050 <logobj_event_handler+0x90>
   2604c:	2101      	movs	r1, #1
   2604e:	7011      	strb	r1, [r2, #0]
   26050:	2000      	movs	r0, #0
   26052:	7018      	strb	r0, [r3, #0]
   26054:	682b      	ldr	r3, [r5, #0]
   26056:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   2605a:	602b      	str	r3, [r5, #0]
   2605c:	682b      	ldr	r3, [r5, #0]
   2605e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   26062:	602b      	str	r3, [r5, #0]
   26064:	e7d2      	b.n	2600c <logobj_event_handler+0x4c>
   26066:	6800      	ldr	r0, [r0, #0]
   26068:	2800      	cmp	r0, #0
   2606a:	d0cf      	beq.n	2600c <logobj_event_handler+0x4c>
   2606c:	f7ff ff94 	bl	25f98 <rpc_logobj_client_data_free>
   26070:	4628      	mov	r0, r5
   26072:	b005      	add	sp, #20
   26074:	bd30      	pop	{r4, r5, pc}
   26076:	2000      	movs	r0, #0
   26078:	b005      	add	sp, #20
   2607a:	bd30      	pop	{r4, r5, pc}
   2607c:	682b      	ldr	r3, [r5, #0]
   2607e:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
   26082:	d00b      	beq.n	2609c <logobj_event_handler+0xdc>
   26084:	68c0      	ldr	r0, [r0, #12]
   26086:	2800      	cmp	r0, #0
   26088:	d0e4      	beq.n	26054 <logobj_event_handler+0x94>
   2608a:	230e      	movs	r3, #14
   2608c:	2000      	movs	r0, #0
   2608e:	606b      	str	r3, [r5, #4]
   26090:	b005      	add	sp, #20
   26092:	bd30      	pop	{r4, r5, pc}
   26094:	68c3      	ldr	r3, [r0, #12]
   26096:	2b01      	cmp	r3, #1
   26098:	d1a5      	bne.n	25fe6 <logobj_event_handler+0x26>
   2609a:	e7f6      	b.n	2608a <logobj_event_handler+0xca>
   2609c:	4618      	mov	r0, r3
   2609e:	e7b5      	b.n	2600c <logobj_event_handler+0x4c>
   260a0:	2002      	movs	r0, #2
   260a2:	e7b3      	b.n	2600c <logobj_event_handler+0x4c>
   260a4:	230e      	movs	r3, #14
   260a6:	606b      	str	r3, [r5, #4]
   260a8:	e7b0      	b.n	2600c <logobj_event_handler+0x4c>
   260aa:	4a03      	ldr	r2, [pc, #12]	; (260b8 <logobj_event_handler+0xf8>)
   260ac:	7011      	strb	r1, [r2, #0]
   260ae:	e7cf      	b.n	26050 <logobj_event_handler+0x90>
   260b0:	20022650 	.word	0x20022650
   260b4:	20025b5e 	.word	0x20025b5e
   260b8:	20025b5f 	.word	0x20025b5f

000260bc <logobj_interface_init>:
   260bc:	2300      	movs	r3, #0
   260be:	b510      	push	{r4, lr}
   260c0:	4907      	ldr	r1, [pc, #28]	; (260e0 <logobj_interface_init+0x24>)
   260c2:	4a08      	ldr	r2, [pc, #32]	; (260e4 <logobj_interface_init+0x28>)
   260c4:	4c08      	ldr	r4, [pc, #32]	; (260e8 <logobj_interface_init+0x2c>)
   260c6:	4809      	ldr	r0, [pc, #36]	; (260ec <logobj_interface_init+0x30>)
   260c8:	7023      	strb	r3, [r4, #0]
   260ca:	6003      	str	r3, [r0, #0]
   260cc:	700b      	strb	r3, [r1, #0]
   260ce:	6013      	str	r3, [r2, #0]
   260d0:	f7ff ff26 	bl	25f20 <rpc_logobj_client_init>
   260d4:	3000      	adds	r0, #0
   260d6:	bf18      	it	ne
   260d8:	2001      	movne	r0, #1
   260da:	4240      	negs	r0, r0
   260dc:	bd10      	pop	{r4, pc}
   260de:	bf00      	nop
   260e0:	20025b5e 	.word	0x20025b5e
   260e4:	2002264c 	.word	0x2002264c
   260e8:	20025b5f 	.word	0x20025b5f
   260ec:	20022650 	.word	0x20022650

000260f0 <logobj_interface_open>:
   260f0:	2300      	movs	r3, #0
   260f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   260f6:	2866      	cmp	r0, #102	; 0x66
   260f8:	b082      	sub	sp, #8
   260fa:	9300      	str	r3, [sp, #0]
   260fc:	d172      	bne.n	261e4 <logobj_interface_open+0xf4>
   260fe:	2902      	cmp	r1, #2
   26100:	4689      	mov	r9, r1
   26102:	d16f      	bne.n	261e4 <logobj_interface_open+0xf4>
   26104:	f240 2305 	movw	r3, #517	; 0x205
   26108:	429a      	cmp	r2, r3
   2610a:	4692      	mov	sl, r2
   2610c:	d16a      	bne.n	261e4 <logobj_interface_open+0xf4>
   2610e:	4f48      	ldr	r7, [pc, #288]	; (26230 <logobj_interface_open+0x140>)
   26110:	683d      	ldr	r5, [r7, #0]
   26112:	2d00      	cmp	r5, #0
   26114:	d17c      	bne.n	26210 <logobj_interface_open+0x120>
   26116:	4680      	mov	r8, r0
   26118:	4a46      	ldr	r2, [pc, #280]	; (26234 <logobj_interface_open+0x144>)
   2611a:	4668      	mov	r0, sp
   2611c:	f006 f870 	bl	2c200 <interface_socket_allocate>
   26120:	9b00      	ldr	r3, [sp, #0]
   26122:	4606      	mov	r6, r0
   26124:	2b00      	cmp	r3, #0
   26126:	d07d      	beq.n	26224 <logobj_interface_open+0x134>
   26128:	4629      	mov	r1, r5
   2612a:	2204      	movs	r2, #4
   2612c:	4842      	ldr	r0, [pc, #264]	; (26238 <logobj_interface_open+0x148>)
   2612e:	603b      	str	r3, [r7, #0]
   26130:	f00f fd0a 	bl	35b48 <memset>
   26134:	9c00      	ldr	r4, [sp, #0]
   26136:	4629      	mov	r1, r5
   26138:	e9c4 8903 	strd	r8, r9, [r4, #12]
   2613c:	f8c4 a014 	str.w	sl, [r4, #20]
   26140:	a801      	add	r0, sp, #4
   26142:	f7ff fef3 	bl	25f2c <rpc_logobj_client_request_alloc>
   26146:	2800      	cmp	r0, #0
   26148:	d13c      	bne.n	261c4 <logobj_interface_open+0xd4>
   2614a:	2201      	movs	r2, #1
   2614c:	2104      	movs	r1, #4
   2614e:	9b01      	ldr	r3, [sp, #4]
   26150:	4d3a      	ldr	r5, [pc, #232]	; (2623c <logobj_interface_open+0x14c>)
   26152:	7358      	strb	r0, [r3, #13]
   26154:	7398      	strb	r0, [r3, #14]
   26156:	73d8      	strb	r0, [r3, #15]
   26158:	7258      	strb	r0, [r3, #9]
   2615a:	7298      	strb	r0, [r3, #10]
   2615c:	72d8      	strb	r0, [r3, #11]
   2615e:	7219      	strb	r1, [r3, #8]
   26160:	702a      	strb	r2, [r5, #0]
   26162:	731a      	strb	r2, [r3, #12]
   26164:	6822      	ldr	r2, [r4, #0]
   26166:	4618      	mov	r0, r3
   26168:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   2616c:	6022      	str	r2, [r4, #0]
   2616e:	f247 0101 	movw	r1, #28673	; 0x7001
   26172:	f7ff fef3 	bl	25f5c <rpc_logobj_client_request_send>
   26176:	bb38      	cbnz	r0, 261c8 <logobj_interface_open+0xd8>
   26178:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   2617c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26180:	4611      	mov	r1, r2
   26182:	4630      	mov	r0, r6
   26184:	f006 f8ee 	bl	2c364 <interface_socket_wait>
   26188:	4604      	mov	r4, r0
   2618a:	b310      	cbz	r0, 261d2 <logobj_interface_open+0xe2>
   2618c:	9a00      	ldr	r2, [sp, #0]
   2618e:	2e00      	cmp	r6, #0
   26190:	6813      	ldr	r3, [r2, #0]
   26192:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   26196:	6013      	str	r3, [r2, #0]
   26198:	9a00      	ldr	r2, [sp, #0]
   2619a:	6813      	ldr	r3, [r2, #0]
   2619c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   261a0:	6013      	str	r3, [r2, #0]
   261a2:	9a00      	ldr	r2, [sp, #0]
   261a4:	6813      	ldr	r3, [r2, #0]
   261a6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   261aa:	6013      	str	r3, [r2, #0]
   261ac:	da36      	bge.n	2621c <logobj_interface_open+0x12c>
   261ae:	2300      	movs	r3, #0
   261b0:	4620      	mov	r0, r4
   261b2:	603b      	str	r3, [r7, #0]
   261b4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   261b8:	f7fc fca0 	bl	22afc <bsd_os_errno_set>
   261bc:	4630      	mov	r0, r6
   261be:	b002      	add	sp, #8
   261c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   261c4:	240c      	movs	r4, #12
   261c6:	e7e1      	b.n	2618c <logobj_interface_open+0x9c>
   261c8:	9801      	ldr	r0, [sp, #4]
   261ca:	f7ff fedd 	bl	25f88 <rpc_logobj_client_message_free>
   261ce:	2405      	movs	r4, #5
   261d0:	e7dc      	b.n	2618c <logobj_interface_open+0x9c>
   261d2:	4630      	mov	r0, r6
   261d4:	f006 f93a 	bl	2c44c <interface_socket_from_handle_get>
   261d8:	b150      	cbz	r0, 261f0 <logobj_interface_open+0x100>
   261da:	6844      	ldr	r4, [r0, #4]
   261dc:	b144      	cbz	r4, 261f0 <logobj_interface_open+0x100>
   261de:	2300      	movs	r3, #0
   261e0:	6043      	str	r3, [r0, #4]
   261e2:	e7d3      	b.n	2618c <logobj_interface_open+0x9c>
   261e4:	2016      	movs	r0, #22
   261e6:	f7fc fc89 	bl	22afc <bsd_os_errno_set>
   261ea:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   261ee:	e7e5      	b.n	261bc <logobj_interface_open+0xcc>
   261f0:	9a00      	ldr	r2, [sp, #0]
   261f2:	6813      	ldr	r3, [r2, #0]
   261f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   261f8:	6013      	str	r3, [r2, #0]
   261fa:	9a00      	ldr	r2, [sp, #0]
   261fc:	6813      	ldr	r3, [r2, #0]
   261fe:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   26202:	6013      	str	r3, [r2, #0]
   26204:	9a00      	ldr	r2, [sp, #0]
   26206:	6813      	ldr	r3, [r2, #0]
   26208:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   2620c:	6013      	str	r3, [r2, #0]
   2620e:	e7d5      	b.n	261bc <logobj_interface_open+0xcc>
   26210:	2001      	movs	r0, #1
   26212:	f7fc fc73 	bl	22afc <bsd_os_errno_set>
   26216:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2621a:	e7cf      	b.n	261bc <logobj_interface_open+0xcc>
   2621c:	4630      	mov	r0, r6
   2621e:	f006 f853 	bl	2c2c8 <interface_socket_free>
   26222:	e7c4      	b.n	261ae <logobj_interface_open+0xbe>
   26224:	2018      	movs	r0, #24
   26226:	f7fc fc69 	bl	22afc <bsd_os_errno_set>
   2622a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2622e:	e7c5      	b.n	261bc <logobj_interface_open+0xcc>
   26230:	20022650 	.word	0x20022650
   26234:	00025fa9 	.word	0x00025fa9
   26238:	2002264c 	.word	0x2002264c
   2623c:	20025b5e 	.word	0x20025b5e

00026240 <logobj_interface_read>:
   26240:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   26244:	b085      	sub	sp, #20
   26246:	2900      	cmp	r1, #0
   26248:	d068      	beq.n	2631c <logobj_interface_read+0xdc>
   2624a:	2a00      	cmp	r2, #0
   2624c:	4617      	mov	r7, r2
   2624e:	dd65      	ble.n	2631c <logobj_interface_read+0xdc>
   26250:	461d      	mov	r5, r3
   26252:	4680      	mov	r8, r0
   26254:	460e      	mov	r6, r1
   26256:	f006 f8f9 	bl	2c44c <interface_socket_from_handle_get>
   2625a:	4604      	mov	r4, r0
   2625c:	2800      	cmp	r0, #0
   2625e:	d063      	beq.n	26328 <logobj_interface_read+0xe8>
   26260:	bb4d      	cbnz	r5, 262b6 <logobj_interface_read+0x76>
   26262:	69e0      	ldr	r0, [r4, #28]
   26264:	07aa      	lsls	r2, r5, #30
   26266:	6803      	ldr	r3, [r0, #0]
   26268:	68db      	ldr	r3, [r3, #12]
   2626a:	d52d      	bpl.n	262c8 <logobj_interface_read+0x88>
   2626c:	4798      	blx	r3
   2626e:	3001      	adds	r0, #1
   26270:	d044      	beq.n	262fc <logobj_interface_read+0xbc>
   26272:	6823      	ldr	r3, [r4, #0]
   26274:	69e0      	ldr	r0, [r4, #28]
   26276:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
   2627a:	d041      	beq.n	26300 <logobj_interface_read+0xc0>
   2627c:	2100      	movs	r1, #0
   2627e:	6823      	ldr	r3, [r4, #0]
   26280:	462a      	mov	r2, r5
   26282:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   26286:	6023      	str	r3, [r4, #0]
   26288:	e9cd 1102 	strd	r1, r1, [sp, #8]
   2628c:	e9cd 6700 	strd	r6, r7, [sp]
   26290:	6803      	ldr	r3, [r0, #0]
   26292:	4669      	mov	r1, sp
   26294:	689b      	ldr	r3, [r3, #8]
   26296:	4798      	blx	r3
   26298:	4605      	mov	r5, r0
   2629a:	69e0      	ldr	r0, [r4, #28]
   2629c:	6803      	ldr	r3, [r0, #0]
   2629e:	68db      	ldr	r3, [r3, #12]
   262a0:	4798      	blx	r3
   262a2:	3001      	adds	r0, #1
   262a4:	d003      	beq.n	262ae <logobj_interface_read+0x6e>
   262a6:	6823      	ldr	r3, [r4, #0]
   262a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   262ac:	6023      	str	r3, [r4, #0]
   262ae:	4628      	mov	r0, r5
   262b0:	b005      	add	sp, #20
   262b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   262b6:	f015 0f0a 	tst.w	r5, #10
   262ba:	d1d2      	bne.n	26262 <logobj_interface_read+0x22>
   262bc:	202d      	movs	r0, #45	; 0x2d
   262be:	f7fc fc1d 	bl	22afc <bsd_os_errno_set>
   262c2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   262c6:	e7f2      	b.n	262ae <logobj_interface_read+0x6e>
   262c8:	6822      	ldr	r2, [r4, #0]
   262ca:	f012 5980 	ands.w	r9, r2, #268435456	; 0x10000000
   262ce:	d1cd      	bne.n	2626c <logobj_interface_read+0x2c>
   262d0:	4798      	blx	r3
   262d2:	1c43      	adds	r3, r0, #1
   262d4:	d1cd      	bne.n	26272 <logobj_interface_read+0x32>
   262d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   262da:	6a23      	ldr	r3, [r4, #32]
   262dc:	4611      	mov	r1, r2
   262de:	2b00      	cmp	r3, #0
   262e0:	bf08      	it	eq
   262e2:	4603      	moveq	r3, r0
   262e4:	4640      	mov	r0, r8
   262e6:	f006 f83d 	bl	2c364 <interface_socket_wait>
   262ea:	b158      	cbz	r0, 26304 <logobj_interface_read+0xc4>
   262ec:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   262f0:	f7fc fc04 	bl	22afc <bsd_os_errno_set>
   262f4:	4628      	mov	r0, r5
   262f6:	b005      	add	sp, #20
   262f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   262fc:	2023      	movs	r0, #35	; 0x23
   262fe:	e7f5      	b.n	262ec <logobj_interface_read+0xac>
   26300:	461d      	mov	r5, r3
   26302:	e7cb      	b.n	2629c <logobj_interface_read+0x5c>
   26304:	4640      	mov	r0, r8
   26306:	f006 f8a1 	bl	2c44c <interface_socket_from_handle_get>
   2630a:	4603      	mov	r3, r0
   2630c:	2800      	cmp	r0, #0
   2630e:	d0b0      	beq.n	26272 <logobj_interface_read+0x32>
   26310:	6840      	ldr	r0, [r0, #4]
   26312:	2800      	cmp	r0, #0
   26314:	d0ad      	beq.n	26272 <logobj_interface_read+0x32>
   26316:	f8c3 9004 	str.w	r9, [r3, #4]
   2631a:	e7e7      	b.n	262ec <logobj_interface_read+0xac>
   2631c:	2016      	movs	r0, #22
   2631e:	f7fc fbed 	bl	22afc <bsd_os_errno_set>
   26322:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   26326:	e7c2      	b.n	262ae <logobj_interface_read+0x6e>
   26328:	2009      	movs	r0, #9
   2632a:	f7fc fbe7 	bl	22afc <bsd_os_errno_set>
   2632e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   26332:	e7bc      	b.n	262ae <logobj_interface_read+0x6e>

00026334 <logobj_interface_write>:
   26334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26338:	b082      	sub	sp, #8
   2633a:	2900      	cmp	r1, #0
   2633c:	d05e      	beq.n	263fc <logobj_interface_write+0xc8>
   2633e:	2a04      	cmp	r2, #4
   26340:	d15c      	bne.n	263fc <logobj_interface_write+0xc8>
   26342:	461e      	mov	r6, r3
   26344:	4607      	mov	r7, r0
   26346:	460d      	mov	r5, r1
   26348:	f006 f880 	bl	2c44c <interface_socket_from_handle_get>
   2634c:	4604      	mov	r4, r0
   2634e:	2800      	cmp	r0, #0
   26350:	d070      	beq.n	26434 <logobj_interface_write+0x100>
   26352:	b1e6      	cbz	r6, 2638e <logobj_interface_write+0x5a>
   26354:	07b0      	lsls	r0, r6, #30
   26356:	d567      	bpl.n	26428 <logobj_interface_write+0xf4>
   26358:	6823      	ldr	r3, [r4, #0]
   2635a:	039b      	lsls	r3, r3, #14
   2635c:	d560      	bpl.n	26420 <logobj_interface_write+0xec>
   2635e:	2600      	movs	r6, #0
   26360:	6823      	ldr	r3, [r4, #0]
   26362:	2100      	movs	r1, #0
   26364:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   26368:	6023      	str	r3, [r4, #0]
   2636a:	a801      	add	r0, sp, #4
   2636c:	f8d5 8000 	ldr.w	r8, [r5]
   26370:	f7ff fddc 	bl	25f2c <rpc_logobj_client_request_alloc>
   26374:	b198      	cbz	r0, 2639e <logobj_interface_write+0x6a>
   26376:	200c      	movs	r0, #12
   26378:	6823      	ldr	r3, [r4, #0]
   2637a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2637e:	6023      	str	r3, [r4, #0]
   26380:	f7fc fbbc 	bl	22afc <bsd_os_errno_set>
   26384:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26388:	b002      	add	sp, #8
   2638a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2638e:	6803      	ldr	r3, [r0, #0]
   26390:	00d9      	lsls	r1, r3, #3
   26392:	d4e1      	bmi.n	26358 <logobj_interface_write+0x24>
   26394:	6803      	ldr	r3, [r0, #0]
   26396:	039a      	lsls	r2, r3, #14
   26398:	d544      	bpl.n	26424 <logobj_interface_write+0xf0>
   2639a:	2601      	movs	r6, #1
   2639c:	e7e0      	b.n	26360 <logobj_interface_write+0x2c>
   2639e:	2504      	movs	r5, #4
   263a0:	9b01      	ldr	r3, [sp, #4]
   263a2:	f247 0103 	movw	r1, #28675	; 0x7003
   263a6:	f8c3 800c 	str.w	r8, [r3, #12]
   263aa:	7258      	strb	r0, [r3, #9]
   263ac:	7298      	strb	r0, [r3, #10]
   263ae:	72d8      	strb	r0, [r3, #11]
   263b0:	721d      	strb	r5, [r3, #8]
   263b2:	4618      	mov	r0, r3
   263b4:	f7ff fdd2 	bl	25f5c <rpc_logobj_client_request_send>
   263b8:	4680      	mov	r8, r0
   263ba:	b9b0      	cbnz	r0, 263ea <logobj_interface_write+0xb6>
   263bc:	b93e      	cbnz	r6, 263ce <logobj_interface_write+0x9a>
   263be:	4628      	mov	r0, r5
   263c0:	6823      	ldr	r3, [r4, #0]
   263c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   263c6:	6023      	str	r3, [r4, #0]
   263c8:	b002      	add	sp, #8
   263ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   263ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   263d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   263d6:	4611      	mov	r1, r2
   263d8:	4638      	mov	r0, r7
   263da:	f005 ffc3 	bl	2c364 <interface_socket_wait>
   263de:	b198      	cbz	r0, 26408 <logobj_interface_write+0xd4>
   263e0:	6823      	ldr	r3, [r4, #0]
   263e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   263e6:	6023      	str	r3, [r4, #0]
   263e8:	e7ca      	b.n	26380 <logobj_interface_write+0x4c>
   263ea:	9801      	ldr	r0, [sp, #4]
   263ec:	f7ff fdcc 	bl	25f88 <rpc_logobj_client_message_free>
   263f0:	6823      	ldr	r3, [r4, #0]
   263f2:	2005      	movs	r0, #5
   263f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   263f8:	6023      	str	r3, [r4, #0]
   263fa:	e7c1      	b.n	26380 <logobj_interface_write+0x4c>
   263fc:	2016      	movs	r0, #22
   263fe:	f7fc fb7d 	bl	22afc <bsd_os_errno_set>
   26402:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26406:	e7bf      	b.n	26388 <logobj_interface_write+0x54>
   26408:	4638      	mov	r0, r7
   2640a:	f006 f81f 	bl	2c44c <interface_socket_from_handle_get>
   2640e:	4603      	mov	r3, r0
   26410:	2800      	cmp	r0, #0
   26412:	d0d4      	beq.n	263be <logobj_interface_write+0x8a>
   26414:	6840      	ldr	r0, [r0, #4]
   26416:	2800      	cmp	r0, #0
   26418:	d0d1      	beq.n	263be <logobj_interface_write+0x8a>
   2641a:	f8c3 8004 	str.w	r8, [r3, #4]
   2641e:	e7df      	b.n	263e0 <logobj_interface_write+0xac>
   26420:	2073      	movs	r0, #115	; 0x73
   26422:	e7ad      	b.n	26380 <logobj_interface_write+0x4c>
   26424:	2009      	movs	r0, #9
   26426:	e7ab      	b.n	26380 <logobj_interface_write+0x4c>
   26428:	202d      	movs	r0, #45	; 0x2d
   2642a:	f7fc fb67 	bl	22afc <bsd_os_errno_set>
   2642e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26432:	e7a9      	b.n	26388 <logobj_interface_write+0x54>
   26434:	2009      	movs	r0, #9
   26436:	f7fc fb61 	bl	22afc <bsd_os_errno_set>
   2643a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2643e:	e7a3      	b.n	26388 <logobj_interface_write+0x54>

00026440 <logobj_interface_setopt>:
   26440:	b5f0      	push	{r4, r5, r6, r7, lr}
   26442:	2901      	cmp	r1, #1
   26444:	b085      	sub	sp, #20
   26446:	d068      	beq.n	2651a <logobj_interface_setopt+0xda>
   26448:	461e      	mov	r6, r3
   2644a:	f240 2305 	movw	r3, #517	; 0x205
   2644e:	4299      	cmp	r1, r3
   26450:	f040 8095 	bne.w	2657e <logobj_interface_setopt+0x13e>
   26454:	4607      	mov	r7, r0
   26456:	4615      	mov	r5, r2
   26458:	f005 fff8 	bl	2c44c <interface_socket_from_handle_get>
   2645c:	4604      	mov	r4, r0
   2645e:	2800      	cmp	r0, #0
   26460:	f000 80b2 	beq.w	265c8 <logobj_interface_setopt+0x188>
   26464:	2d01      	cmp	r5, #1
   26466:	d019      	beq.n	2649c <logobj_interface_setopt+0x5c>
   26468:	2d02      	cmp	r5, #2
   2646a:	d010      	beq.n	2648e <logobj_interface_setopt+0x4e>
   2646c:	252a      	movs	r5, #42	; 0x2a
   2646e:	6803      	ldr	r3, [r0, #0]
   26470:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   26474:	6023      	str	r3, [r4, #0]
   26476:	6823      	ldr	r3, [r4, #0]
   26478:	4628      	mov	r0, r5
   2647a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   2647e:	6023      	str	r3, [r4, #0]
   26480:	f7fc fb3c 	bl	22afc <bsd_os_errno_set>
   26484:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   26488:	4628      	mov	r0, r5
   2648a:	b005      	add	sp, #20
   2648c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2648e:	b116      	cbz	r6, 26496 <logobj_interface_setopt+0x56>
   26490:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   26492:	2b01      	cmp	r3, #1
   26494:	d049      	beq.n	2652a <logobj_interface_setopt+0xea>
   26496:	6823      	ldr	r3, [r4, #0]
   26498:	2516      	movs	r5, #22
   2649a:	e7e9      	b.n	26470 <logobj_interface_setopt+0x30>
   2649c:	2e00      	cmp	r6, #0
   2649e:	d0fa      	beq.n	26496 <logobj_interface_setopt+0x56>
   264a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   264a2:	2b04      	cmp	r3, #4
   264a4:	d1f7      	bne.n	26496 <logobj_interface_setopt+0x56>
   264a6:	2100      	movs	r1, #0
   264a8:	a803      	add	r0, sp, #12
   264aa:	f7ff fd3f 	bl	25f2c <rpc_logobj_client_request_alloc>
   264ae:	4605      	mov	r5, r0
   264b0:	2800      	cmp	r0, #0
   264b2:	d16a      	bne.n	2658a <logobj_interface_setopt+0x14a>
   264b4:	9803      	ldr	r0, [sp, #12]
   264b6:	2208      	movs	r2, #8
   264b8:	4629      	mov	r1, r5
   264ba:	300c      	adds	r0, #12
   264bc:	f00f fb44 	bl	35b48 <memset>
   264c0:	9803      	ldr	r0, [sp, #12]
   264c2:	4631      	mov	r1, r6
   264c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   264c6:	300c      	adds	r0, #12
   264c8:	f00f fb1e 	bl	35b08 <memcpy>
   264cc:	2308      	movs	r3, #8
   264ce:	9803      	ldr	r0, [sp, #12]
   264d0:	f247 0102 	movw	r1, #28674	; 0x7002
   264d4:	7203      	strb	r3, [r0, #8]
   264d6:	7245      	strb	r5, [r0, #9]
   264d8:	7285      	strb	r5, [r0, #10]
   264da:	72c5      	strb	r5, [r0, #11]
   264dc:	6823      	ldr	r3, [r4, #0]
   264de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   264e2:	6023      	str	r3, [r4, #0]
   264e4:	f7ff fd3a 	bl	25f5c <rpc_logobj_client_request_send>
   264e8:	2800      	cmp	r0, #0
   264ea:	d151      	bne.n	26590 <logobj_interface_setopt+0x150>
   264ec:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   264f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   264f4:	4611      	mov	r1, r2
   264f6:	4638      	mov	r0, r7
   264f8:	f005 ff34 	bl	2c364 <interface_socket_wait>
   264fc:	4605      	mov	r5, r0
   264fe:	2800      	cmp	r0, #0
   26500:	d13b      	bne.n	2657a <logobj_interface_setopt+0x13a>
   26502:	4638      	mov	r0, r7
   26504:	f005 ffa2 	bl	2c44c <interface_socket_from_handle_get>
   26508:	2800      	cmp	r0, #0
   2650a:	d04f      	beq.n	265ac <logobj_interface_setopt+0x16c>
   2650c:	6843      	ldr	r3, [r0, #4]
   2650e:	2b00      	cmp	r3, #0
   26510:	d04c      	beq.n	265ac <logobj_interface_setopt+0x16c>
   26512:	2200      	movs	r2, #0
   26514:	461d      	mov	r5, r3
   26516:	6042      	str	r2, [r0, #4]
   26518:	e02f      	b.n	2657a <logobj_interface_setopt+0x13a>
   2651a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   2651c:	9400      	str	r4, [sp, #0]
   2651e:	f005 ffbd 	bl	2c49c <interface_socket_setopt>
   26522:	4605      	mov	r5, r0
   26524:	4628      	mov	r0, r5
   26526:	b005      	add	sp, #20
   26528:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2652a:	2100      	movs	r1, #0
   2652c:	a803      	add	r0, sp, #12
   2652e:	7835      	ldrb	r5, [r6, #0]
   26530:	f7ff fcfc 	bl	25f2c <rpc_logobj_client_request_alloc>
   26534:	bb48      	cbnz	r0, 2658a <logobj_interface_setopt+0x14a>
   26536:	2d01      	cmp	r5, #1
   26538:	bf08      	it	eq
   2653a:	4b26      	ldreq	r3, [pc, #152]	; (265d4 <logobj_interface_setopt+0x194>)
   2653c:	f04f 0204 	mov.w	r2, #4
   26540:	bf08      	it	eq
   26542:	701d      	strbeq	r5, [r3, #0]
   26544:	2300      	movs	r3, #0
   26546:	9803      	ldr	r0, [sp, #12]
   26548:	f247 0101 	movw	r1, #28673	; 0x7001
   2654c:	7243      	strb	r3, [r0, #9]
   2654e:	60c5      	str	r5, [r0, #12]
   26550:	7283      	strb	r3, [r0, #10]
   26552:	72c3      	strb	r3, [r0, #11]
   26554:	7202      	strb	r2, [r0, #8]
   26556:	6823      	ldr	r3, [r4, #0]
   26558:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   2655c:	6023      	str	r3, [r4, #0]
   2655e:	f7ff fcfd 	bl	25f5c <rpc_logobj_client_request_send>
   26562:	4606      	mov	r6, r0
   26564:	b9a0      	cbnz	r0, 26590 <logobj_interface_setopt+0x150>
   26566:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   2656a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2656e:	4611      	mov	r1, r2
   26570:	4638      	mov	r0, r7
   26572:	f005 fef7 	bl	2c364 <interface_socket_wait>
   26576:	4605      	mov	r5, r0
   26578:	b180      	cbz	r0, 2659c <logobj_interface_setopt+0x15c>
   2657a:	6823      	ldr	r3, [r4, #0]
   2657c:	e778      	b.n	26470 <logobj_interface_setopt+0x30>
   2657e:	202a      	movs	r0, #42	; 0x2a
   26580:	f7fc fabc 	bl	22afc <bsd_os_errno_set>
   26584:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   26588:	e77e      	b.n	26488 <logobj_interface_setopt+0x48>
   2658a:	6823      	ldr	r3, [r4, #0]
   2658c:	250c      	movs	r5, #12
   2658e:	e76f      	b.n	26470 <logobj_interface_setopt+0x30>
   26590:	9803      	ldr	r0, [sp, #12]
   26592:	f7ff fcf9 	bl	25f88 <rpc_logobj_client_message_free>
   26596:	2505      	movs	r5, #5
   26598:	6823      	ldr	r3, [r4, #0]
   2659a:	e769      	b.n	26470 <logobj_interface_setopt+0x30>
   2659c:	4638      	mov	r0, r7
   2659e:	f005 ff55 	bl	2c44c <interface_socket_from_handle_get>
   265a2:	b140      	cbz	r0, 265b6 <logobj_interface_setopt+0x176>
   265a4:	6845      	ldr	r5, [r0, #4]
   265a6:	b135      	cbz	r5, 265b6 <logobj_interface_setopt+0x176>
   265a8:	6046      	str	r6, [r0, #4]
   265aa:	e7e6      	b.n	2657a <logobj_interface_setopt+0x13a>
   265ac:	4631      	mov	r1, r6
   265ae:	2204      	movs	r2, #4
   265b0:	4809      	ldr	r0, [pc, #36]	; (265d8 <logobj_interface_setopt+0x198>)
   265b2:	f00f faa9 	bl	35b08 <memcpy>
   265b6:	6823      	ldr	r3, [r4, #0]
   265b8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   265bc:	6023      	str	r3, [r4, #0]
   265be:	6823      	ldr	r3, [r4, #0]
   265c0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   265c4:	6023      	str	r3, [r4, #0]
   265c6:	e75f      	b.n	26488 <logobj_interface_setopt+0x48>
   265c8:	2009      	movs	r0, #9
   265ca:	f7fc fa97 	bl	22afc <bsd_os_errno_set>
   265ce:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   265d2:	e759      	b.n	26488 <logobj_interface_setopt+0x48>
   265d4:	20025b5e 	.word	0x20025b5e
   265d8:	2002264c 	.word	0x2002264c

000265dc <logobj_interface_getopt>:
   265dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   265de:	2901      	cmp	r1, #1
   265e0:	b083      	sub	sp, #12
   265e2:	9e08      	ldr	r6, [sp, #32]
   265e4:	d030      	beq.n	26648 <logobj_interface_getopt+0x6c>
   265e6:	461f      	mov	r7, r3
   265e8:	f240 2305 	movw	r3, #517	; 0x205
   265ec:	4299      	cmp	r1, r3
   265ee:	d134      	bne.n	2665a <logobj_interface_getopt+0x7e>
   265f0:	4615      	mov	r5, r2
   265f2:	f005 ff2b 	bl	2c44c <interface_socket_from_handle_get>
   265f6:	2800      	cmp	r0, #0
   265f8:	d037      	beq.n	2666a <logobj_interface_getopt+0x8e>
   265fa:	2d01      	cmp	r5, #1
   265fc:	d015      	beq.n	2662a <logobj_interface_getopt+0x4e>
   265fe:	2d02      	cmp	r5, #2
   26600:	d10b      	bne.n	2661a <logobj_interface_getopt+0x3e>
   26602:	b387      	cbz	r7, 26666 <logobj_interface_getopt+0x8a>
   26604:	6833      	ldr	r3, [r6, #0]
   26606:	b373      	cbz	r3, 26666 <logobj_interface_getopt+0x8a>
   26608:	2300      	movs	r3, #0
   2660a:	2201      	movs	r2, #1
   2660c:	4618      	mov	r0, r3
   2660e:	491a      	ldr	r1, [pc, #104]	; (26678 <logobj_interface_getopt+0x9c>)
   26610:	7809      	ldrb	r1, [r1, #0]
   26612:	7039      	strb	r1, [r7, #0]
   26614:	6032      	str	r2, [r6, #0]
   26616:	b003      	add	sp, #12
   26618:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2661a:	2009      	movs	r0, #9
   2661c:	f7fc fa6e 	bl	22afc <bsd_os_errno_set>
   26620:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26624:	4618      	mov	r0, r3
   26626:	b003      	add	sp, #12
   26628:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2662a:	b1e7      	cbz	r7, 26666 <logobj_interface_getopt+0x8a>
   2662c:	6833      	ldr	r3, [r6, #0]
   2662e:	2b03      	cmp	r3, #3
   26630:	d919      	bls.n	26666 <logobj_interface_getopt+0x8a>
   26632:	4638      	mov	r0, r7
   26634:	2204      	movs	r2, #4
   26636:	4911      	ldr	r1, [pc, #68]	; (2667c <logobj_interface_getopt+0xa0>)
   26638:	f00f fa66 	bl	35b08 <memcpy>
   2663c:	2300      	movs	r3, #0
   2663e:	2204      	movs	r2, #4
   26640:	4618      	mov	r0, r3
   26642:	6032      	str	r2, [r6, #0]
   26644:	b003      	add	sp, #12
   26646:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26648:	9600      	str	r6, [sp, #0]
   2664a:	f005 ff69 	bl	2c520 <interface_socket_getopt>
   2664e:	4603      	mov	r3, r0
   26650:	2800      	cmp	r0, #0
   26652:	d1e3      	bne.n	2661c <logobj_interface_getopt+0x40>
   26654:	4618      	mov	r0, r3
   26656:	b003      	add	sp, #12
   26658:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2665a:	202a      	movs	r0, #42	; 0x2a
   2665c:	f7fc fa4e 	bl	22afc <bsd_os_errno_set>
   26660:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26664:	e7de      	b.n	26624 <logobj_interface_getopt+0x48>
   26666:	2016      	movs	r0, #22
   26668:	e7d8      	b.n	2661c <logobj_interface_getopt+0x40>
   2666a:	2009      	movs	r0, #9
   2666c:	f7fc fa46 	bl	22afc <bsd_os_errno_set>
   26670:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26674:	e7d6      	b.n	26624 <logobj_interface_getopt+0x48>
   26676:	bf00      	nop
   26678:	20025b5f 	.word	0x20025b5f
   2667c:	2002264c 	.word	0x2002264c

00026680 <logobj_interface_close>:
   26680:	b510      	push	{r4, lr}
   26682:	4604      	mov	r4, r0
   26684:	f005 fee2 	bl	2c44c <interface_socket_from_handle_get>
   26688:	b138      	cbz	r0, 2669a <logobj_interface_close+0x1a>
   2668a:	4620      	mov	r0, r4
   2668c:	f005 fe1c 	bl	2c2c8 <interface_socket_free>
   26690:	2300      	movs	r3, #0
   26692:	4a05      	ldr	r2, [pc, #20]	; (266a8 <logobj_interface_close+0x28>)
   26694:	4618      	mov	r0, r3
   26696:	6013      	str	r3, [r2, #0]
   26698:	bd10      	pop	{r4, pc}
   2669a:	2009      	movs	r0, #9
   2669c:	f7fc fa2e 	bl	22afc <bsd_os_errno_set>
   266a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   266a4:	bd10      	pop	{r4, pc}
   266a6:	bf00      	nop
   266a8:	20022650 	.word	0x20022650

000266ac <packet_free_cb>:
   266ac:	6800      	ldr	r0, [r0, #0]
   266ae:	f004 b9ef 	b.w	2aa90 <rpc_at_client_data_free>
   266b2:	bf00      	nop

000266b4 <at_interface_write>:
   266b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   266b8:	b082      	sub	sp, #8
   266ba:	9c08      	ldr	r4, [sp, #32]
   266bc:	2c00      	cmp	r4, #0
   266be:	d15b      	bne.n	26778 <at_interface_write+0xc4>
   266c0:	460f      	mov	r7, r1
   266c2:	4615      	mov	r5, r2
   266c4:	4698      	mov	r8, r3
   266c6:	4606      	mov	r6, r0
   266c8:	f005 fec0 	bl	2c44c <interface_socket_from_handle_get>
   266cc:	4604      	mov	r4, r0
   266ce:	f1b8 0f00 	cmp.w	r8, #0
   266d2:	d12b      	bne.n	2672c <at_interface_write+0x78>
   266d4:	2800      	cmp	r0, #0
   266d6:	d055      	beq.n	26784 <at_interface_write+0xd0>
   266d8:	6803      	ldr	r3, [r0, #0]
   266da:	039b      	lsls	r3, r3, #14
   266dc:	d552      	bpl.n	26784 <at_interface_write+0xd0>
   266de:	6803      	ldr	r3, [r0, #0]
   266e0:	4629      	mov	r1, r5
   266e2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   266e6:	6003      	str	r3, [r0, #0]
   266e8:	6803      	ldr	r3, [r0, #0]
   266ea:	a801      	add	r0, sp, #4
   266ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   266f0:	6023      	str	r3, [r4, #0]
   266f2:	f004 f9a3 	bl	2aa3c <rpc_at_client_request_alloc>
   266f6:	bb08      	cbnz	r0, 2673c <at_interface_write+0x88>
   266f8:	2204      	movs	r2, #4
   266fa:	9b01      	ldr	r3, [sp, #4]
   266fc:	721a      	strb	r2, [r3, #8]
   266fe:	7258      	strb	r0, [r3, #9]
   26700:	7298      	strb	r0, [r3, #10]
   26702:	72d8      	strb	r0, [r3, #11]
   26704:	60de      	str	r6, [r3, #12]
   26706:	b9fd      	cbnz	r5, 26748 <at_interface_write+0x94>
   26708:	4618      	mov	r0, r3
   2670a:	2101      	movs	r1, #1
   2670c:	f004 f9aa 	bl	2aa64 <rpc_at_client_request_send>
   26710:	bb48      	cbnz	r0, 26766 <at_interface_write+0xb2>
   26712:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   26716:	4630      	mov	r0, r6
   26718:	4611      	mov	r1, r2
   2671a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2671e:	f005 fe21 	bl	2c364 <interface_socket_wait>
   26722:	b960      	cbnz	r0, 2673e <at_interface_write+0x8a>
   26724:	4628      	mov	r0, r5
   26726:	b002      	add	sp, #8
   26728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2672c:	b360      	cbz	r0, 26788 <at_interface_write+0xd4>
   2672e:	6803      	ldr	r3, [r0, #0]
   26730:	202d      	movs	r0, #45	; 0x2d
   26732:	f7fc f9e3 	bl	22afc <bsd_os_errno_set>
   26736:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2673a:	e7f4      	b.n	26726 <at_interface_write+0x72>
   2673c:	200c      	movs	r0, #12
   2673e:	6823      	ldr	r3, [r4, #0]
   26740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   26744:	6023      	str	r3, [r4, #0]
   26746:	e7f4      	b.n	26732 <at_interface_write+0x7e>
   26748:	4639      	mov	r1, r7
   2674a:	6818      	ldr	r0, [r3, #0]
   2674c:	462a      	mov	r2, r5
   2674e:	f00f f9db 	bl	35b08 <memcpy>
   26752:	2101      	movs	r1, #1
   26754:	9801      	ldr	r0, [sp, #4]
   26756:	f004 f985 	bl	2aa64 <rpc_at_client_request_send>
   2675a:	2800      	cmp	r0, #0
   2675c:	d0d9      	beq.n	26712 <at_interface_write+0x5e>
   2675e:	9b01      	ldr	r3, [sp, #4]
   26760:	6818      	ldr	r0, [r3, #0]
   26762:	f004 f995 	bl	2aa90 <rpc_at_client_data_free>
   26766:	9801      	ldr	r0, [sp, #4]
   26768:	f004 f98a 	bl	2aa80 <rpc_at_client_message_free>
   2676c:	6823      	ldr	r3, [r4, #0]
   2676e:	2023      	movs	r0, #35	; 0x23
   26770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   26774:	6023      	str	r3, [r4, #0]
   26776:	e7dc      	b.n	26732 <at_interface_write+0x7e>
   26778:	2038      	movs	r0, #56	; 0x38
   2677a:	f7fc f9bf 	bl	22afc <bsd_os_errno_set>
   2677e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26782:	e7d0      	b.n	26726 <at_interface_write+0x72>
   26784:	2016      	movs	r0, #22
   26786:	e7d4      	b.n	26732 <at_interface_write+0x7e>
   26788:	202d      	movs	r0, #45	; 0x2d
   2678a:	e7d2      	b.n	26732 <at_interface_write+0x7e>

0002678c <at_interface_init>:
   2678c:	f004 b950 	b.w	2aa30 <rpc_at_client_init>

00026790 <at_interface_open>:
   26790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26794:	2600      	movs	r6, #0
   26796:	b082      	sub	sp, #8
   26798:	2902      	cmp	r1, #2
   2679a:	9600      	str	r6, [sp, #0]
   2679c:	d13e      	bne.n	2681c <at_interface_open+0x8c>
   2679e:	4680      	mov	r8, r0
   267a0:	4617      	mov	r7, r2
   267a2:	4668      	mov	r0, sp
   267a4:	4a20      	ldr	r2, [pc, #128]	; (26828 <at_interface_open+0x98>)
   267a6:	460c      	mov	r4, r1
   267a8:	f005 fd2a 	bl	2c200 <interface_socket_allocate>
   267ac:	9b00      	ldr	r3, [sp, #0]
   267ae:	4605      	mov	r5, r0
   267b0:	b30b      	cbz	r3, 267f6 <at_interface_open+0x66>
   267b2:	e9c3 8403 	strd	r8, r4, [r3, #12]
   267b6:	615f      	str	r7, [r3, #20]
   267b8:	4631      	mov	r1, r6
   267ba:	a801      	add	r0, sp, #4
   267bc:	f004 f93e 	bl	2aa3c <rpc_at_client_request_alloc>
   267c0:	bb50      	cbnz	r0, 26818 <at_interface_open+0x88>
   267c2:	2204      	movs	r2, #4
   267c4:	9b01      	ldr	r3, [sp, #4]
   267c6:	2105      	movs	r1, #5
   267c8:	7258      	strb	r0, [r3, #9]
   267ca:	7298      	strb	r0, [r3, #10]
   267cc:	72d8      	strb	r0, [r3, #11]
   267ce:	721a      	strb	r2, [r3, #8]
   267d0:	60dd      	str	r5, [r3, #12]
   267d2:	4618      	mov	r0, r3
   267d4:	f004 f946 	bl	2aa64 <rpc_at_client_request_send>
   267d8:	b988      	cbnz	r0, 267fe <at_interface_open+0x6e>
   267da:	4622      	mov	r2, r4
   267dc:	4621      	mov	r1, r4
   267de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   267e2:	4628      	mov	r0, r5
   267e4:	f005 fdbe 	bl	2c364 <interface_socket_wait>
   267e8:	4604      	mov	r4, r0
   267ea:	b960      	cbnz	r0, 26806 <at_interface_open+0x76>
   267ec:	9a00      	ldr	r2, [sp, #0]
   267ee:	6813      	ldr	r3, [r2, #0]
   267f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   267f4:	6013      	str	r3, [r2, #0]
   267f6:	4628      	mov	r0, r5
   267f8:	b002      	add	sp, #8
   267fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   267fe:	9801      	ldr	r0, [sp, #4]
   26800:	f004 f93e 	bl	2aa80 <rpc_at_client_message_free>
   26804:	2423      	movs	r4, #35	; 0x23
   26806:	4628      	mov	r0, r5
   26808:	f005 fd5e 	bl	2c2c8 <interface_socket_free>
   2680c:	4620      	mov	r0, r4
   2680e:	f7fc f975 	bl	22afc <bsd_os_errno_set>
   26812:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   26816:	e7ee      	b.n	267f6 <at_interface_open+0x66>
   26818:	240c      	movs	r4, #12
   2681a:	e7f4      	b.n	26806 <at_interface_open+0x76>
   2681c:	2029      	movs	r0, #41	; 0x29
   2681e:	f7fc f96d 	bl	22afc <bsd_os_errno_set>
   26822:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   26826:	e7e6      	b.n	267f6 <at_interface_open+0x66>
   26828:	000266ad 	.word	0x000266ad

0002682c <at_interface_close>:
   2682c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2682e:	b083      	sub	sp, #12
   26830:	4606      	mov	r6, r0
   26832:	f005 fe0b 	bl	2c44c <interface_socket_from_handle_get>
   26836:	2800      	cmp	r0, #0
   26838:	d03d      	beq.n	268b6 <at_interface_close+0x8a>
   2683a:	230d      	movs	r3, #13
   2683c:	6807      	ldr	r7, [r0, #0]
   2683e:	6003      	str	r3, [r0, #0]
   26840:	6803      	ldr	r3, [r0, #0]
   26842:	4604      	mov	r4, r0
   26844:	039b      	lsls	r3, r3, #14
   26846:	d41f      	bmi.n	26888 <at_interface_close+0x5c>
   26848:	2100      	movs	r1, #0
   2684a:	a801      	add	r0, sp, #4
   2684c:	f004 f8f6 	bl	2aa3c <rpc_at_client_request_alloc>
   26850:	bb20      	cbnz	r0, 2689c <at_interface_close+0x70>
   26852:	2204      	movs	r2, #4
   26854:	9b01      	ldr	r3, [sp, #4]
   26856:	2106      	movs	r1, #6
   26858:	7258      	strb	r0, [r3, #9]
   2685a:	7298      	strb	r0, [r3, #10]
   2685c:	72d8      	strb	r0, [r3, #11]
   2685e:	721a      	strb	r2, [r3, #8]
   26860:	60de      	str	r6, [r3, #12]
   26862:	4618      	mov	r0, r3
   26864:	f004 f8fe 	bl	2aa64 <rpc_at_client_request_send>
   26868:	b9d0      	cbnz	r0, 268a0 <at_interface_close+0x74>
   2686a:	220e      	movs	r2, #14
   2686c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26870:	4611      	mov	r1, r2
   26872:	4630      	mov	r0, r6
   26874:	f005 fd76 	bl	2c364 <interface_socket_wait>
   26878:	4605      	mov	r5, r0
   2687a:	b9a8      	cbnz	r0, 268a8 <at_interface_close+0x7c>
   2687c:	4630      	mov	r0, r6
   2687e:	f005 fd23 	bl	2c2c8 <interface_socket_free>
   26882:	4628      	mov	r0, r5
   26884:	b003      	add	sp, #12
   26886:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26888:	6803      	ldr	r3, [r0, #0]
   2688a:	2100      	movs	r1, #0
   2688c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   26890:	6003      	str	r3, [r0, #0]
   26892:	a801      	add	r0, sp, #4
   26894:	f004 f8d2 	bl	2aa3c <rpc_at_client_request_alloc>
   26898:	2800      	cmp	r0, #0
   2689a:	d0da      	beq.n	26852 <at_interface_close+0x26>
   2689c:	250c      	movs	r5, #12
   2689e:	e003      	b.n	268a8 <at_interface_close+0x7c>
   268a0:	9801      	ldr	r0, [sp, #4]
   268a2:	f004 f8ed 	bl	2aa80 <rpc_at_client_message_free>
   268a6:	2523      	movs	r5, #35	; 0x23
   268a8:	6027      	str	r7, [r4, #0]
   268aa:	4628      	mov	r0, r5
   268ac:	f7fc f926 	bl	22afc <bsd_os_errno_set>
   268b0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   268b4:	e7e5      	b.n	26882 <at_interface_close+0x56>
   268b6:	2516      	movs	r5, #22
   268b8:	e7f7      	b.n	268aa <at_interface_close+0x7e>
   268ba:	bf00      	nop

000268bc <at_interface_read>:
   268bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   268c0:	b084      	sub	sp, #16
   268c2:	4688      	mov	r8, r1
   268c4:	4615      	mov	r5, r2
   268c6:	461e      	mov	r6, r3
   268c8:	4607      	mov	r7, r0
   268ca:	f005 fdbf 	bl	2c44c <interface_socket_from_handle_get>
   268ce:	2800      	cmp	r0, #0
   268d0:	d043      	beq.n	2695a <at_interface_read+0x9e>
   268d2:	2300      	movs	r3, #0
   268d4:	4604      	mov	r4, r0
   268d6:	e9cd 8500 	strd	r8, r5, [sp]
   268da:	e9cd 3302 	strd	r3, r3, [sp, #8]
   268de:	bb2e      	cbnz	r6, 2692c <at_interface_read+0x70>
   268e0:	f016 0502 	ands.w	r5, r6, #2
   268e4:	d00d      	beq.n	26902 <at_interface_read+0x46>
   268e6:	e028      	b.n	2693a <at_interface_read+0x7e>
   268e8:	b9cd      	cbnz	r5, 2691e <at_interface_read+0x62>
   268ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   268ee:	6a23      	ldr	r3, [r4, #32]
   268f0:	4611      	mov	r1, r2
   268f2:	2b00      	cmp	r3, #0
   268f4:	bf08      	it	eq
   268f6:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   268fa:	4638      	mov	r0, r7
   268fc:	f005 fd32 	bl	2c364 <interface_socket_wait>
   26900:	4605      	mov	r5, r0
   26902:	6823      	ldr	r3, [r4, #0]
   26904:	69e0      	ldr	r0, [r4, #28]
   26906:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   2690a:	6023      	str	r3, [r4, #0]
   2690c:	6803      	ldr	r3, [r0, #0]
   2690e:	4632      	mov	r2, r6
   26910:	689b      	ldr	r3, [r3, #8]
   26912:	4669      	mov	r1, sp
   26914:	4798      	blx	r3
   26916:	f1b0 0800 	subs.w	r8, r0, #0
   2691a:	dbe5      	blt.n	268e8 <at_interface_read+0x2c>
   2691c:	b115      	cbz	r5, 26924 <at_interface_read+0x68>
   2691e:	4628      	mov	r0, r5
   26920:	f7fc f8ec 	bl	22afc <bsd_os_errno_set>
   26924:	4640      	mov	r0, r8
   26926:	b004      	add	sp, #16
   26928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2692c:	f016 0f0a 	tst.w	r6, #10
   26930:	d1d6      	bne.n	268e0 <at_interface_read+0x24>
   26932:	252d      	movs	r5, #45	; 0x2d
   26934:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   26938:	e7f1      	b.n	2691e <at_interface_read+0x62>
   2693a:	6823      	ldr	r3, [r4, #0]
   2693c:	69e0      	ldr	r0, [r4, #28]
   2693e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   26942:	6023      	str	r3, [r4, #0]
   26944:	6803      	ldr	r3, [r0, #0]
   26946:	4632      	mov	r2, r6
   26948:	689b      	ldr	r3, [r3, #8]
   2694a:	4669      	mov	r1, sp
   2694c:	4798      	blx	r3
   2694e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   26952:	4680      	mov	r8, r0
   26954:	d1e6      	bne.n	26924 <at_interface_read+0x68>
   26956:	2523      	movs	r5, #35	; 0x23
   26958:	e7e1      	b.n	2691e <at_interface_read+0x62>
   2695a:	2516      	movs	r5, #22
   2695c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   26960:	e7dd      	b.n	2691e <at_interface_read+0x62>
   26962:	bf00      	nop

00026964 <at_interface_getopt>:
   26964:	f005 bddc 	b.w	2c520 <interface_socket_getopt>

00026968 <at_interface_setopt>:
   26968:	f005 bd98 	b.w	2c49c <interface_socket_setopt>

0002696c <rpc_at_event_handler>:
   2696c:	b570      	push	{r4, r5, r6, lr}
   2696e:	4606      	mov	r6, r0
   26970:	b084      	sub	sp, #16
   26972:	68c0      	ldr	r0, [r0, #12]
   26974:	460d      	mov	r5, r1
   26976:	f005 fd69 	bl	2c44c <interface_socket_from_handle_get>
   2697a:	4604      	mov	r4, r0
   2697c:	b348      	cbz	r0, 269d2 <rpc_at_event_handler+0x66>
   2697e:	6803      	ldr	r3, [r0, #0]
   26980:	b29b      	uxth	r3, r3
   26982:	2b01      	cmp	r3, #1
   26984:	d01f      	beq.n	269c6 <rpc_at_event_handler+0x5a>
   26986:	6803      	ldr	r3, [r0, #0]
   26988:	b29b      	uxth	r3, r3
   2698a:	2b0d      	cmp	r3, #13
   2698c:	d029      	beq.n	269e2 <rpc_at_event_handler+0x76>
   2698e:	6803      	ldr	r3, [r0, #0]
   26990:	b29b      	uxth	r3, r3
   26992:	2b02      	cmp	r3, #2
   26994:	d02d      	beq.n	269f2 <rpc_at_event_handler+0x86>
   26996:	3d03      	subs	r5, #3
   26998:	2d01      	cmp	r5, #1
   2699a:	d817      	bhi.n	269cc <rpc_at_event_handler+0x60>
   2699c:	2500      	movs	r5, #0
   2699e:	6873      	ldr	r3, [r6, #4]
   269a0:	6832      	ldr	r2, [r6, #0]
   269a2:	e9cd 5502 	strd	r5, r5, [sp, #8]
   269a6:	e9cd 2300 	strd	r2, r3, [sp]
   269aa:	69e0      	ldr	r0, [r4, #28]
   269ac:	4669      	mov	r1, sp
   269ae:	6803      	ldr	r3, [r0, #0]
   269b0:	685b      	ldr	r3, [r3, #4]
   269b2:	4798      	blx	r3
   269b4:	3001      	adds	r0, #1
   269b6:	d019      	beq.n	269ec <rpc_at_event_handler+0x80>
   269b8:	4628      	mov	r0, r5
   269ba:	6823      	ldr	r3, [r4, #0]
   269bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   269c0:	6023      	str	r3, [r4, #0]
   269c2:	b004      	add	sp, #16
   269c4:	bd70      	pop	{r4, r5, r6, pc}
   269c6:	2d02      	cmp	r5, #2
   269c8:	d1e5      	bne.n	26996 <rpc_at_event_handler+0x2a>
   269ca:	6005      	str	r5, [r0, #0]
   269cc:	2000      	movs	r0, #0
   269ce:	b004      	add	sp, #16
   269d0:	bd70      	pop	{r4, r5, r6, pc}
   269d2:	6830      	ldr	r0, [r6, #0]
   269d4:	2800      	cmp	r0, #0
   269d6:	d0f9      	beq.n	269cc <rpc_at_event_handler+0x60>
   269d8:	f004 f85a 	bl	2aa90 <rpc_at_client_data_free>
   269dc:	4620      	mov	r0, r4
   269de:	b004      	add	sp, #16
   269e0:	bd70      	pop	{r4, r5, r6, pc}
   269e2:	2d02      	cmp	r5, #2
   269e4:	d1d7      	bne.n	26996 <rpc_at_event_handler+0x2a>
   269e6:	230e      	movs	r3, #14
   269e8:	6003      	str	r3, [r0, #0]
   269ea:	e7ef      	b.n	269cc <rpc_at_event_handler+0x60>
   269ec:	2002      	movs	r0, #2
   269ee:	b004      	add	sp, #16
   269f0:	bd70      	pop	{r4, r5, r6, pc}
   269f2:	6803      	ldr	r3, [r0, #0]
   269f4:	029b      	lsls	r3, r3, #10
   269f6:	d5ce      	bpl.n	26996 <rpc_at_event_handler+0x2a>
   269f8:	2d02      	cmp	r5, #2
   269fa:	d1cc      	bne.n	26996 <rpc_at_event_handler+0x2a>
   269fc:	6803      	ldr	r3, [r0, #0]
   269fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   26a02:	6003      	str	r3, [r0, #0]
   26a04:	6803      	ldr	r3, [r0, #0]
   26a06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   26a0a:	6003      	str	r3, [r0, #0]
   26a0c:	e7de      	b.n	269cc <rpc_at_event_handler+0x60>
   26a0e:	bf00      	nop

00026a10 <dfu_client_event_handler>:
   26a10:	f850 1b08 	ldr.w	r1, [r0], #8
   26a14:	0c09      	lsrs	r1, r1, #16
   26a16:	f001 b925 	b.w	27c64 <rpc_dfu_event_handler>
   26a1a:	bf00      	nop

00026a1c <rpc_dfu_client_init>:
   26a1c:	4801      	ldr	r0, [pc, #4]	; (26a24 <rpc_dfu_client_init+0x8>)
   26a1e:	f005 be51 	b.w	2c6c4 <rpc_client_register>
   26a22:	bf00      	nop
   26a24:	000371cc 	.word	0x000371cc

00026a28 <rpc_dfu_client_request_alloc>:
   26a28:	2300      	movs	r3, #0
   26a2a:	b510      	push	{r4, lr}
   26a2c:	b082      	sub	sp, #8
   26a2e:	9301      	str	r3, [sp, #4]
   26a30:	b158      	cbz	r0, 26a4a <rpc_dfu_client_request_alloc+0x22>
   26a32:	4604      	mov	r4, r0
   26a34:	aa01      	add	r2, sp, #4
   26a36:	2006      	movs	r0, #6
   26a38:	f006 f87c 	bl	2cb34 <rpc_message_alloc>
   26a3c:	b918      	cbnz	r0, 26a46 <rpc_dfu_client_request_alloc+0x1e>
   26a3e:	9b01      	ldr	r3, [sp, #4]
   26a40:	b10b      	cbz	r3, 26a46 <rpc_dfu_client_request_alloc+0x1e>
   26a42:	3308      	adds	r3, #8
   26a44:	6023      	str	r3, [r4, #0]
   26a46:	b002      	add	sp, #8
   26a48:	bd10      	pop	{r4, pc}
   26a4a:	2007      	movs	r0, #7
   26a4c:	b002      	add	sp, #8
   26a4e:	bd10      	pop	{r4, pc}

00026a50 <rpc_dfu_client_request_send>:
   26a50:	f411 4f70 	tst.w	r1, #61440	; 0xf000
   26a54:	d10b      	bne.n	26a6e <rpc_dfu_client_request_send+0x1e>
   26a56:	b160      	cbz	r0, 26a72 <rpc_dfu_client_request_send+0x22>
   26a58:	4603      	mov	r3, r0
   26a5a:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   26a5e:	2006      	movs	r0, #6
   26a60:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   26a64:	f843 1d08 	str.w	r1, [r3, #-8]!
   26a68:	4619      	mov	r1, r3
   26a6a:	f006 b84b 	b.w	2cb04 <rpc_message_send>
   26a6e:	200f      	movs	r0, #15
   26a70:	4770      	bx	lr
   26a72:	2007      	movs	r0, #7
   26a74:	4770      	bx	lr
   26a76:	bf00      	nop

00026a78 <rpc_dfu_client_message_free>:
   26a78:	b120      	cbz	r0, 26a84 <rpc_dfu_client_message_free+0xc>
   26a7a:	f1a0 0108 	sub.w	r1, r0, #8
   26a7e:	2006      	movs	r0, #6
   26a80:	f006 b88a 	b.w	2cb98 <rpc_message_free>
   26a84:	2007      	movs	r0, #7
   26a86:	4770      	bx	lr

00026a88 <rpc_dfu_client_data_free>:
   26a88:	b118      	cbz	r0, 26a92 <rpc_dfu_client_data_free+0xa>
   26a8a:	4601      	mov	r1, r0
   26a8c:	2006      	movs	r0, #6
   26a8e:	f006 b995 	b.w	2cdbc <rpc_message_data_free>
   26a92:	2007      	movs	r0, #7
   26a94:	4770      	bx	lr
   26a96:	bf00      	nop

00026a98 <mem_free>:
   26a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26a9c:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 26b6c <mem_free+0xd4>
   26aa0:	b083      	sub	sp, #12
   26aa2:	9000      	str	r0, [sp, #0]
   26aa4:	f10c 0b3c 	add.w	fp, ip, #60	; 0x3c
   26aa8:	f8dc 3008 	ldr.w	r3, [ip, #8]
   26aac:	b12b      	cbz	r3, 26aba <mem_free+0x22>
   26aae:	f8dc 2000 	ldr.w	r2, [ip]
   26ab2:	9c00      	ldr	r4, [sp, #0]
   26ab4:	7810      	ldrb	r0, [r2, #0]
   26ab6:	42a0      	cmp	r0, r4
   26ab8:	d006      	beq.n	26ac8 <mem_free+0x30>
   26aba:	f10c 0c0c 	add.w	ip, ip, #12
   26abe:	45e3      	cmp	fp, ip
   26ac0:	d1f2      	bne.n	26aa8 <mem_free+0x10>
   26ac2:	b003      	add	sp, #12
   26ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26ac8:	f8dc a004 	ldr.w	sl, [ip, #4]
   26acc:	eb03 080a 	add.w	r8, r3, sl
   26ad0:	45c2      	cmp	sl, r8
   26ad2:	d2f2      	bcs.n	26aba <mem_free+0x22>
   26ad4:	6853      	ldr	r3, [r2, #4]
   26ad6:	f8cd c004 	str.w	ip, [sp, #4]
   26ada:	46d6      	mov	lr, sl
   26adc:	469c      	mov	ip, r3
   26ade:	f8d2 9010 	ldr.w	r9, [r2, #16]
   26ae2:	8997      	ldrh	r7, [r2, #12]
   26ae4:	ebae 000a 	sub.w	r0, lr, sl
   26ae8:	b3df      	cbz	r7, 26b62 <mem_free+0xca>
   26aea:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   26aee:	4290      	cmp	r0, r2
   26af0:	d31c      	bcc.n	26b2c <mem_free+0x94>
   26af2:	4665      	mov	r5, ip
   26af4:	2400      	movs	r4, #0
   26af6:	f109 0304 	add.w	r3, r9, #4
   26afa:	e003      	b.n	26b04 <mem_free+0x6c>
   26afc:	885a      	ldrh	r2, [r3, #2]
   26afe:	3304      	adds	r3, #4
   26b00:	4282      	cmp	r2, r0
   26b02:	d815      	bhi.n	26b30 <mem_free+0x98>
   26b04:	f833 6c04 	ldrh.w	r6, [r3, #-4]
   26b08:	3401      	adds	r4, #1
   26b0a:	42a7      	cmp	r7, r4
   26b0c:	fb02 5506 	mla	r5, r2, r6, r5
   26b10:	eba0 0002 	sub.w	r0, r0, r2
   26b14:	461e      	mov	r6, r3
   26b16:	d1f1      	bne.n	26afc <mem_free+0x64>
   26b18:	2000      	movs	r0, #0
   26b1a:	4281      	cmp	r1, r0
   26b1c:	d00d      	beq.n	26b3a <mem_free+0xa2>
   26b1e:	f10e 0e01 	add.w	lr, lr, #1
   26b22:	45f0      	cmp	r8, lr
   26b24:	d1de      	bne.n	26ae4 <mem_free+0x4c>
   26b26:	f8dd c004 	ldr.w	ip, [sp, #4]
   26b2a:	e7c6      	b.n	26aba <mem_free+0x22>
   26b2c:	4665      	mov	r5, ip
   26b2e:	464e      	mov	r6, r9
   26b30:	8833      	ldrh	r3, [r6, #0]
   26b32:	fb00 5003 	mla	r0, r0, r3, r5
   26b36:	4281      	cmp	r1, r0
   26b38:	d1f1      	bne.n	26b1e <mem_free+0x86>
   26b3a:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   26b3e:	f8dd c004 	ldr.w	ip, [sp, #4]
   26b42:	d0ba      	beq.n	26aba <mem_free+0x22>
   26b44:	2301      	movs	r3, #1
   26b46:	4a08      	ldr	r2, [pc, #32]	; (26b68 <mem_free+0xd0>)
   26b48:	ea4f 115e 	mov.w	r1, lr, lsr #5
   26b4c:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   26b50:	f00e 0e1f 	and.w	lr, lr, #31
   26b54:	fa03 fe0e 	lsl.w	lr, r3, lr
   26b58:	ea4e 0000 	orr.w	r0, lr, r0
   26b5c:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   26b60:	e7af      	b.n	26ac2 <mem_free+0x2a>
   26b62:	4638      	mov	r0, r7
   26b64:	e7d9      	b.n	26b1a <mem_free+0x82>
   26b66:	bf00      	nop
   26b68:	20022654 	.word	0x20022654
   26b6c:	20022698 	.word	0x20022698

00026b70 <mem_alloc.constprop.5>:
   26b70:	2800      	cmp	r0, #0
   26b72:	d050      	beq.n	26c16 <mem_alloc.constprop.5+0xa6>
   26b74:	4b6d      	ldr	r3, [pc, #436]	; (26d2c <mem_alloc.constprop.5+0x1bc>)
   26b76:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   26b7a:	4290      	cmp	r0, r2
   26b7c:	d84b      	bhi.n	26c16 <mem_alloc.constprop.5+0xa6>
   26b7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26b82:	f8d3 b08c 	ldr.w	fp, [r3, #140]	; 0x8c
   26b86:	b083      	sub	sp, #12
   26b88:	f1bb 0f00 	cmp.w	fp, #0
   26b8c:	d054      	beq.n	26c38 <mem_alloc.constprop.5+0xc8>
   26b8e:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
   26b92:	4691      	mov	r9, r2
   26b94:	2600      	movs	r6, #0
   26b96:	f04f 0812 	mov.w	r8, #18
   26b9a:	4f65      	ldr	r7, [pc, #404]	; (26d30 <mem_alloc.constprop.5+0x1c0>)
   26b9c:	9201      	str	r2, [sp, #4]
   26b9e:	f10b 0e11 	add.w	lr, fp, #17
   26ba2:	eb06 0209 	add.w	r2, r6, r9
   26ba6:	f853 4038 	ldr.w	r4, [r3, r8, lsl #3]
   26baa:	3201      	adds	r2, #1
   26bac:	0852      	lsrs	r2, r2, #1
   26bae:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
   26bb2:	f102 0112 	add.w	r1, r2, #18
   26bb6:	f853 5031 	ldr.w	r5, [r3, r1, lsl #3]
   26bba:	f857 a02c 	ldr.w	sl, [r7, ip, lsl #2]
   26bbe:	f853 403e 	ldr.w	r4, [r3, lr, lsl #3]
   26bc2:	eb03 0cc8 	add.w	ip, r3, r8, lsl #3
   26bc6:	f8dc c004 	ldr.w	ip, [ip, #4]
   26bca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   26bce:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   26bd2:	f8da a010 	ldr.w	sl, [sl, #16]
   26bd6:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
   26bda:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
   26bde:	f83a a02c 	ldrh.w	sl, [sl, ip, lsl #2]
   26be2:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   26be6:	eb03 0cce 	add.w	ip, r3, lr, lsl #3
   26bea:	6849      	ldr	r1, [r1, #4]
   26bec:	692d      	ldr	r5, [r5, #16]
   26bee:	6924      	ldr	r4, [r4, #16]
   26bf0:	f8dc c004 	ldr.w	ip, [ip, #4]
   26bf4:	4550      	cmp	r0, sl
   26bf6:	f835 5021 	ldrh.w	r5, [r5, r1, lsl #2]
   26bfa:	f834 102c 	ldrh.w	r1, [r4, ip, lsl #2]
   26bfe:	d915      	bls.n	26c2c <mem_alloc.constprop.5+0xbc>
   26c00:	4288      	cmp	r0, r1
   26c02:	d211      	bcs.n	26c28 <mem_alloc.constprop.5+0xb8>
   26c04:	42a8      	cmp	r0, r5
   26c06:	d908      	bls.n	26c1a <mem_alloc.constprop.5+0xaa>
   26c08:	1c56      	adds	r6, r2, #1
   26c0a:	45b1      	cmp	r9, r6
   26c0c:	f0c0 8087 	bcc.w	26d1e <mem_alloc.constprop.5+0x1ae>
   26c10:	f102 0813 	add.w	r8, r2, #19
   26c14:	e7c5      	b.n	26ba2 <mem_alloc.constprop.5+0x32>
   26c16:	2000      	movs	r0, #0
   26c18:	4770      	bx	lr
   26c1a:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
   26c1e:	454e      	cmp	r6, r9
   26c20:	d87d      	bhi.n	26d1e <mem_alloc.constprop.5+0x1ae>
   26c22:	f102 0e11 	add.w	lr, r2, #17
   26c26:	e7bc      	b.n	26ba2 <mem_alloc.constprop.5+0x32>
   26c28:	f109 0601 	add.w	r6, r9, #1
   26c2c:	45b3      	cmp	fp, r6
   26c2e:	d007      	beq.n	26c40 <mem_alloc.constprop.5+0xd0>
   26c30:	2e10      	cmp	r6, #16
   26c32:	d001      	beq.n	26c38 <mem_alloc.constprop.5+0xc8>
   26c34:	45b3      	cmp	fp, r6
   26c36:	d808      	bhi.n	26c4a <mem_alloc.constprop.5+0xda>
   26c38:	2000      	movs	r0, #0
   26c3a:	b003      	add	sp, #12
   26c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26c40:	9a01      	ldr	r2, [sp, #4]
   26c42:	2a10      	cmp	r2, #16
   26c44:	bf18      	it	ne
   26c46:	4616      	movne	r6, r2
   26c48:	d0f6      	beq.n	26c38 <mem_alloc.constprop.5+0xc8>
   26c4a:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 26d34 <mem_alloc.constprop.5+0x1c4>
   26c4e:	eb03 08c6 	add.w	r8, r3, r6, lsl #3
   26c52:	e9d8 2424 	ldrd	r2, r4, [r8, #144]	; 0x90
   26c56:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   26c5a:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
   26c5e:	eb07 0282 	add.w	r2, r7, r2, lsl #2
   26c62:	f8d2 e004 	ldr.w	lr, [r2, #4]
   26c66:	691d      	ldr	r5, [r3, #16]
   26c68:	2c00      	cmp	r4, #0
   26c6a:	d056      	beq.n	26d1a <mem_alloc.constprop.5+0x1aa>
   26c6c:	462a      	mov	r2, r5
   26c6e:	4670      	mov	r0, lr
   26c70:	00a4      	lsls	r4, r4, #2
   26c72:	eb05 0904 	add.w	r9, r5, r4
   26c76:	8851      	ldrh	r1, [r2, #2]
   26c78:	3204      	adds	r2, #4
   26c7a:	4591      	cmp	r9, r2
   26c7c:	4408      	add	r0, r1
   26c7e:	d1fa      	bne.n	26c76 <mem_alloc.constprop.5+0x106>
   26c80:	1929      	adds	r1, r5, r4
   26c82:	f8b1 a002 	ldrh.w	sl, [r1, #2]
   26c86:	4482      	add	sl, r0
   26c88:	4582      	cmp	sl, r0
   26c8a:	d918      	bls.n	26cbe <mem_alloc.constprop.5+0x14e>
   26c8c:	0941      	lsrs	r1, r0, #5
   26c8e:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   26c92:	f000 041f 	and.w	r4, r0, #31
   26c96:	fa22 f904 	lsr.w	r9, r2, r4
   26c9a:	f019 0f01 	tst.w	r9, #1
   26c9e:	d007      	beq.n	26cb0 <mem_alloc.constprop.5+0x140>
   26ca0:	e013      	b.n	26cca <mem_alloc.constprop.5+0x15a>
   26ca2:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   26ca6:	fa22 f904 	lsr.w	r9, r2, r4
   26caa:	f019 0f01 	tst.w	r9, #1
   26cae:	d10c      	bne.n	26cca <mem_alloc.constprop.5+0x15a>
   26cb0:	3001      	adds	r0, #1
   26cb2:	4582      	cmp	sl, r0
   26cb4:	ea4f 1150 	mov.w	r1, r0, lsr #5
   26cb8:	f000 041f 	and.w	r4, r0, #31
   26cbc:	d1f1      	bne.n	26ca2 <mem_alloc.constprop.5+0x132>
   26cbe:	3601      	adds	r6, #1
   26cc0:	455e      	cmp	r6, fp
   26cc2:	f108 0808 	add.w	r8, r8, #8
   26cc6:	d3c4      	bcc.n	26c52 <mem_alloc.constprop.5+0xe2>
   26cc8:	e7b6      	b.n	26c38 <mem_alloc.constprop.5+0xc8>
   26cca:	2601      	movs	r6, #1
   26ccc:	fa06 f404 	lsl.w	r4, r6, r4
   26cd0:	899e      	ldrh	r6, [r3, #12]
   26cd2:	ea22 0204 	bic.w	r2, r2, r4
   26cd6:	eba0 000e 	sub.w	r0, r0, lr
   26cda:	f84c 2021 	str.w	r2, [ip, r1, lsl #2]
   26cde:	685c      	ldr	r4, [r3, #4]
   26ce0:	2e00      	cmp	r6, #0
   26ce2:	d0a9      	beq.n	26c38 <mem_alloc.constprop.5+0xc8>
   26ce4:	886a      	ldrh	r2, [r5, #2]
   26ce6:	4282      	cmp	r2, r0
   26ce8:	d811      	bhi.n	26d0e <mem_alloc.constprop.5+0x19e>
   26cea:	2100      	movs	r1, #0
   26cec:	1d2b      	adds	r3, r5, #4
   26cee:	e003      	b.n	26cf8 <mem_alloc.constprop.5+0x188>
   26cf0:	885a      	ldrh	r2, [r3, #2]
   26cf2:	3304      	adds	r3, #4
   26cf4:	4282      	cmp	r2, r0
   26cf6:	d80a      	bhi.n	26d0e <mem_alloc.constprop.5+0x19e>
   26cf8:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   26cfc:	3101      	adds	r1, #1
   26cfe:	428e      	cmp	r6, r1
   26d00:	fb02 4405 	mla	r4, r2, r5, r4
   26d04:	eba0 0002 	sub.w	r0, r0, r2
   26d08:	461d      	mov	r5, r3
   26d0a:	d1f1      	bne.n	26cf0 <mem_alloc.constprop.5+0x180>
   26d0c:	e794      	b.n	26c38 <mem_alloc.constprop.5+0xc8>
   26d0e:	882b      	ldrh	r3, [r5, #0]
   26d10:	fb00 4003 	mla	r0, r0, r3, r4
   26d14:	b003      	add	sp, #12
   26d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26d1a:	4670      	mov	r0, lr
   26d1c:	e7b0      	b.n	26c80 <mem_alloc.constprop.5+0x110>
   26d1e:	f1bb 0f10 	cmp.w	fp, #16
   26d22:	bf08      	it	eq
   26d24:	260f      	moveq	r6, #15
   26d26:	d090      	beq.n	26c4a <mem_alloc.constprop.5+0xda>
   26d28:	e786      	b.n	26c38 <mem_alloc.constprop.5+0xc8>
   26d2a:	bf00      	nop
   26d2c:	200226d4 	.word	0x200226d4
   26d30:	20022698 	.word	0x20022698
   26d34:	20022654 	.word	0x20022654

00026d38 <mem_alloc.constprop.4>:
   26d38:	2800      	cmp	r0, #0
   26d3a:	d04c      	beq.n	26dd6 <mem_alloc.constprop.4+0x9e>
   26d3c:	4b6b      	ldr	r3, [pc, #428]	; (26eec <mem_alloc.constprop.4+0x1b4>)
   26d3e:	681a      	ldr	r2, [r3, #0]
   26d40:	4290      	cmp	r0, r2
   26d42:	d848      	bhi.n	26dd6 <mem_alloc.constprop.4+0x9e>
   26d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26d48:	685f      	ldr	r7, [r3, #4]
   26d4a:	b083      	sub	sp, #12
   26d4c:	9700      	str	r7, [sp, #0]
   26d4e:	2f00      	cmp	r7, #0
   26d50:	d051      	beq.n	26df6 <mem_alloc.constprop.4+0xbe>
   26d52:	1e7a      	subs	r2, r7, #1
   26d54:	4696      	mov	lr, r2
   26d56:	2100      	movs	r1, #0
   26d58:	f04f 0c01 	mov.w	ip, #1
   26d5c:	4c64      	ldr	r4, [pc, #400]	; (26ef0 <mem_alloc.constprop.4+0x1b8>)
   26d5e:	9201      	str	r2, [sp, #4]
   26d60:	eb01 020e 	add.w	r2, r1, lr
   26d64:	3201      	adds	r2, #1
   26d66:	f853 503c 	ldr.w	r5, [r3, ip, lsl #3]
   26d6a:	0852      	lsrs	r2, r2, #1
   26d6c:	f102 0801 	add.w	r8, r2, #1
   26d70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   26d74:	f853 9037 	ldr.w	r9, [r3, r7, lsl #3]
   26d78:	f854 a025 	ldr.w	sl, [r4, r5, lsl #2]
   26d7c:	f853 6038 	ldr.w	r6, [r3, r8, lsl #3]
   26d80:	eb09 0549 	add.w	r5, r9, r9, lsl #1
   26d84:	eb03 09cc 	add.w	r9, r3, ip, lsl #3
   26d88:	f8d9 9004 	ldr.w	r9, [r9, #4]
   26d8c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   26d90:	f8da a010 	ldr.w	sl, [sl, #16]
   26d94:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
   26d98:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   26d9c:	f83a a029 	ldrh.w	sl, [sl, r9, lsl #2]
   26da0:	eb03 0bc8 	add.w	fp, r3, r8, lsl #3
   26da4:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
   26da8:	6936      	ldr	r6, [r6, #16]
   26daa:	f8db b004 	ldr.w	fp, [fp, #4]
   26dae:	692d      	ldr	r5, [r5, #16]
   26db0:	f8d9 9004 	ldr.w	r9, [r9, #4]
   26db4:	4550      	cmp	r0, sl
   26db6:	f836 602b 	ldrh.w	r6, [r6, fp, lsl #2]
   26dba:	f835 5029 	ldrh.w	r5, [r5, r9, lsl #2]
   26dbe:	d913      	bls.n	26de8 <mem_alloc.constprop.4+0xb0>
   26dc0:	42a8      	cmp	r0, r5
   26dc2:	d210      	bcs.n	26de6 <mem_alloc.constprop.4+0xae>
   26dc4:	42b0      	cmp	r0, r6
   26dc6:	d908      	bls.n	26dda <mem_alloc.constprop.4+0xa2>
   26dc8:	45c6      	cmp	lr, r8
   26dca:	4641      	mov	r1, r8
   26dcc:	f0c0 8087 	bcc.w	26ede <mem_alloc.constprop.4+0x1a6>
   26dd0:	f108 0c01 	add.w	ip, r8, #1
   26dd4:	e7c4      	b.n	26d60 <mem_alloc.constprop.4+0x28>
   26dd6:	2000      	movs	r0, #0
   26dd8:	4770      	bx	lr
   26dda:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
   26dde:	4571      	cmp	r1, lr
   26de0:	d87d      	bhi.n	26ede <mem_alloc.constprop.4+0x1a6>
   26de2:	4617      	mov	r7, r2
   26de4:	e7bc      	b.n	26d60 <mem_alloc.constprop.4+0x28>
   26de6:	4639      	mov	r1, r7
   26de8:	9a00      	ldr	r2, [sp, #0]
   26dea:	428a      	cmp	r2, r1
   26dec:	d007      	beq.n	26dfe <mem_alloc.constprop.4+0xc6>
   26dee:	2910      	cmp	r1, #16
   26df0:	d001      	beq.n	26df6 <mem_alloc.constprop.4+0xbe>
   26df2:	428a      	cmp	r2, r1
   26df4:	d808      	bhi.n	26e08 <mem_alloc.constprop.4+0xd0>
   26df6:	2000      	movs	r0, #0
   26df8:	b003      	add	sp, #12
   26dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26dfe:	9a01      	ldr	r2, [sp, #4]
   26e00:	2a10      	cmp	r2, #16
   26e02:	bf18      	it	ne
   26e04:	4611      	movne	r1, r2
   26e06:	d0f6      	beq.n	26df6 <mem_alloc.constprop.4+0xbe>
   26e08:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 26ef4 <mem_alloc.constprop.4+0x1bc>
   26e0c:	f8dd 9000 	ldr.w	r9, [sp]
   26e10:	eb03 08c1 	add.w	r8, r3, r1, lsl #3
   26e14:	e9d8 2602 	ldrd	r2, r6, [r8, #8]
   26e18:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   26e1c:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
   26e20:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   26e24:	f8d2 e004 	ldr.w	lr, [r2, #4]
   26e28:	691f      	ldr	r7, [r3, #16]
   26e2a:	2e00      	cmp	r6, #0
   26e2c:	d055      	beq.n	26eda <mem_alloc.constprop.4+0x1a2>
   26e2e:	463a      	mov	r2, r7
   26e30:	4670      	mov	r0, lr
   26e32:	00b6      	lsls	r6, r6, #2
   26e34:	eb07 0a06 	add.w	sl, r7, r6
   26e38:	8855      	ldrh	r5, [r2, #2]
   26e3a:	3204      	adds	r2, #4
   26e3c:	4592      	cmp	sl, r2
   26e3e:	4428      	add	r0, r5
   26e40:	d1fa      	bne.n	26e38 <mem_alloc.constprop.4+0x100>
   26e42:	19bd      	adds	r5, r7, r6
   26e44:	f8b5 b002 	ldrh.w	fp, [r5, #2]
   26e48:	4483      	add	fp, r0
   26e4a:	4583      	cmp	fp, r0
   26e4c:	d918      	bls.n	26e80 <mem_alloc.constprop.4+0x148>
   26e4e:	0945      	lsrs	r5, r0, #5
   26e50:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   26e54:	f000 061f 	and.w	r6, r0, #31
   26e58:	fa22 fa06 	lsr.w	sl, r2, r6
   26e5c:	f01a 0f01 	tst.w	sl, #1
   26e60:	d007      	beq.n	26e72 <mem_alloc.constprop.4+0x13a>
   26e62:	e013      	b.n	26e8c <mem_alloc.constprop.4+0x154>
   26e64:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   26e68:	fa22 fa06 	lsr.w	sl, r2, r6
   26e6c:	f01a 0f01 	tst.w	sl, #1
   26e70:	d10c      	bne.n	26e8c <mem_alloc.constprop.4+0x154>
   26e72:	3001      	adds	r0, #1
   26e74:	4583      	cmp	fp, r0
   26e76:	ea4f 1550 	mov.w	r5, r0, lsr #5
   26e7a:	f000 061f 	and.w	r6, r0, #31
   26e7e:	d1f1      	bne.n	26e64 <mem_alloc.constprop.4+0x12c>
   26e80:	3101      	adds	r1, #1
   26e82:	4549      	cmp	r1, r9
   26e84:	f108 0808 	add.w	r8, r8, #8
   26e88:	d3c4      	bcc.n	26e14 <mem_alloc.constprop.4+0xdc>
   26e8a:	e7b4      	b.n	26df6 <mem_alloc.constprop.4+0xbe>
   26e8c:	2101      	movs	r1, #1
   26e8e:	40b1      	lsls	r1, r6
   26e90:	899e      	ldrh	r6, [r3, #12]
   26e92:	ea22 0201 	bic.w	r2, r2, r1
   26e96:	eba0 000e 	sub.w	r0, r0, lr
   26e9a:	f84c 2025 	str.w	r2, [ip, r5, lsl #2]
   26e9e:	685c      	ldr	r4, [r3, #4]
   26ea0:	2e00      	cmp	r6, #0
   26ea2:	d0a8      	beq.n	26df6 <mem_alloc.constprop.4+0xbe>
   26ea4:	887a      	ldrh	r2, [r7, #2]
   26ea6:	4282      	cmp	r2, r0
   26ea8:	d811      	bhi.n	26ece <mem_alloc.constprop.4+0x196>
   26eaa:	2100      	movs	r1, #0
   26eac:	1d3b      	adds	r3, r7, #4
   26eae:	e003      	b.n	26eb8 <mem_alloc.constprop.4+0x180>
   26eb0:	885a      	ldrh	r2, [r3, #2]
   26eb2:	3304      	adds	r3, #4
   26eb4:	4282      	cmp	r2, r0
   26eb6:	d80a      	bhi.n	26ece <mem_alloc.constprop.4+0x196>
   26eb8:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   26ebc:	3101      	adds	r1, #1
   26ebe:	428e      	cmp	r6, r1
   26ec0:	eba0 0002 	sub.w	r0, r0, r2
   26ec4:	fb02 4405 	mla	r4, r2, r5, r4
   26ec8:	461f      	mov	r7, r3
   26eca:	d1f1      	bne.n	26eb0 <mem_alloc.constprop.4+0x178>
   26ecc:	e793      	b.n	26df6 <mem_alloc.constprop.4+0xbe>
   26ece:	883b      	ldrh	r3, [r7, #0]
   26ed0:	fb00 4003 	mla	r0, r0, r3, r4
   26ed4:	b003      	add	sp, #12
   26ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26eda:	4670      	mov	r0, lr
   26edc:	e7b1      	b.n	26e42 <mem_alloc.constprop.4+0x10a>
   26ede:	9a00      	ldr	r2, [sp, #0]
   26ee0:	2a10      	cmp	r2, #16
   26ee2:	bf08      	it	eq
   26ee4:	210f      	moveq	r1, #15
   26ee6:	d08f      	beq.n	26e08 <mem_alloc.constprop.4+0xd0>
   26ee8:	e785      	b.n	26df6 <mem_alloc.constprop.4+0xbe>
   26eea:	bf00      	nop
   26eec:	200226d4 	.word	0x200226d4
   26ef0:	20022698 	.word	0x20022698
   26ef4:	20022654 	.word	0x20022654

00026ef8 <nrf_mem_init>:
   26ef8:	b570      	push	{r4, r5, r6, lr}
   26efa:	2200      	movs	r2, #0
   26efc:	2501      	movs	r5, #1
   26efe:	4833      	ldr	r0, [pc, #204]	; (26fcc <nrf_mem_init+0xd4>)
   26f00:	0951      	lsrs	r1, r2, #5
   26f02:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   26f06:	f002 031f 	and.w	r3, r2, #31
   26f0a:	fa05 f303 	lsl.w	r3, r5, r3
   26f0e:	3201      	adds	r2, #1
   26f10:	4323      	orrs	r3, r4
   26f12:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   26f16:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   26f1a:	d1f1      	bne.n	26f00 <nrf_mem_init+0x8>
   26f1c:	2400      	movs	r4, #0
   26f1e:	4b2c      	ldr	r3, [pc, #176]	; (26fd0 <nrf_mem_init+0xd8>)
   26f20:	4621      	mov	r1, r4
   26f22:	223c      	movs	r2, #60	; 0x3c
   26f24:	482b      	ldr	r0, [pc, #172]	; (26fd4 <nrf_mem_init+0xdc>)
   26f26:	601c      	str	r4, [r3, #0]
   26f28:	f00e fe0e 	bl	35b48 <memset>
   26f2c:	2110      	movs	r1, #16
   26f2e:	2205      	movs	r2, #5
   26f30:	4b29      	ldr	r3, [pc, #164]	; (26fd8 <nrf_mem_init+0xe0>)
   26f32:	4e2a      	ldr	r6, [pc, #168]	; (26fdc <nrf_mem_init+0xe4>)
   26f34:	e9c3 4400 	strd	r4, r4, [r3]
   26f38:	60d9      	str	r1, [r3, #12]
   26f3a:	6159      	str	r1, [r3, #20]
   26f3c:	61d9      	str	r1, [r3, #28]
   26f3e:	6259      	str	r1, [r3, #36]	; 0x24
   26f40:	62d9      	str	r1, [r3, #44]	; 0x2c
   26f42:	6359      	str	r1, [r3, #52]	; 0x34
   26f44:	63d9      	str	r1, [r3, #60]	; 0x3c
   26f46:	6459      	str	r1, [r3, #68]	; 0x44
   26f48:	64d9      	str	r1, [r3, #76]	; 0x4c
   26f4a:	6559      	str	r1, [r3, #84]	; 0x54
   26f4c:	65d9      	str	r1, [r3, #92]	; 0x5c
   26f4e:	6659      	str	r1, [r3, #100]	; 0x64
   26f50:	66d9      	str	r1, [r3, #108]	; 0x6c
   26f52:	6759      	str	r1, [r3, #116]	; 0x74
   26f54:	67d9      	str	r1, [r3, #124]	; 0x7c
   26f56:	609a      	str	r2, [r3, #8]
   26f58:	611a      	str	r2, [r3, #16]
   26f5a:	619a      	str	r2, [r3, #24]
   26f5c:	621a      	str	r2, [r3, #32]
   26f5e:	629a      	str	r2, [r3, #40]	; 0x28
   26f60:	631a      	str	r2, [r3, #48]	; 0x30
   26f62:	639a      	str	r2, [r3, #56]	; 0x38
   26f64:	641a      	str	r2, [r3, #64]	; 0x40
   26f66:	649a      	str	r2, [r3, #72]	; 0x48
   26f68:	651a      	str	r2, [r3, #80]	; 0x50
   26f6a:	659a      	str	r2, [r3, #88]	; 0x58
   26f6c:	661a      	str	r2, [r3, #96]	; 0x60
   26f6e:	669a      	str	r2, [r3, #104]	; 0x68
   26f70:	671a      	str	r2, [r3, #112]	; 0x70
   26f72:	679a      	str	r2, [r3, #120]	; 0x78
   26f74:	e9c3 2120 	strd	r2, r1, [r3, #128]	; 0x80
   26f78:	e9c3 4422 	strd	r4, r4, [r3, #136]	; 0x88
   26f7c:	e9c3 2124 	strd	r2, r1, [r3, #144]	; 0x90
   26f80:	e9c3 2126 	strd	r2, r1, [r3, #152]	; 0x98
   26f84:	e9c3 2128 	strd	r2, r1, [r3, #160]	; 0xa0
   26f88:	e9c3 212a 	strd	r2, r1, [r3, #168]	; 0xa8
   26f8c:	e9c3 212c 	strd	r2, r1, [r3, #176]	; 0xb0
   26f90:	e9c3 212e 	strd	r2, r1, [r3, #184]	; 0xb8
   26f94:	e9c3 2130 	strd	r2, r1, [r3, #192]	; 0xc0
   26f98:	e9c3 2132 	strd	r2, r1, [r3, #200]	; 0xc8
   26f9c:	e9c3 2134 	strd	r2, r1, [r3, #208]	; 0xd0
   26fa0:	e9c3 2136 	strd	r2, r1, [r3, #216]	; 0xd8
   26fa4:	e9c3 2138 	strd	r2, r1, [r3, #224]	; 0xe0
   26fa8:	e9c3 213a 	strd	r2, r1, [r3, #232]	; 0xe8
   26fac:	e9c3 213c 	strd	r2, r1, [r3, #240]	; 0xf0
   26fb0:	e9c3 213e 	strd	r2, r1, [r3, #248]	; 0xf8
   26fb4:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   26fb8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   26fbc:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
   26fc0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   26fc4:	4620      	mov	r0, r4
   26fc6:	7035      	strb	r5, [r6, #0]
   26fc8:	bd70      	pop	{r4, r5, r6, pc}
   26fca:	bf00      	nop
   26fcc:	20022654 	.word	0x20022654
   26fd0:	20022694 	.word	0x20022694
   26fd4:	20022698 	.word	0x20022698
   26fd8:	200226d4 	.word	0x200226d4
   26fdc:	20025b60 	.word	0x20025b60

00026fe0 <nrf_mem_register>:
   26fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26fe4:	4b87      	ldr	r3, [pc, #540]	; (27204 <nrf_mem_register+0x224>)
   26fe6:	b087      	sub	sp, #28
   26fe8:	781b      	ldrb	r3, [r3, #0]
   26fea:	2b00      	cmp	r3, #0
   26fec:	f000 808c 	beq.w	27108 <nrf_mem_register+0x128>
   26ff0:	b328      	cbz	r0, 2703e <nrf_mem_register+0x5e>
   26ff2:	b321      	cbz	r1, 2703e <nrf_mem_register+0x5e>
   26ff4:	780b      	ldrb	r3, [r1, #0]
   26ff6:	f8df 8218 	ldr.w	r8, [pc, #536]	; 27210 <nrf_mem_register+0x230>
   26ffa:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   26ffe:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   27002:	685b      	ldr	r3, [r3, #4]
   27004:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
   27008:	4463      	add	r3, ip
   2700a:	2b10      	cmp	r3, #16
   2700c:	d811      	bhi.n	27032 <nrf_mem_register+0x52>
   2700e:	f04f 0a00 	mov.w	sl, #0
   27012:	4689      	mov	r9, r1
   27014:	4b7c      	ldr	r3, [pc, #496]	; (27208 <nrf_mem_register+0x228>)
   27016:	4f7d      	ldr	r7, [pc, #500]	; (2720c <nrf_mem_register+0x22c>)
   27018:	681b      	ldr	r3, [r3, #0]
   2701a:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
   2701e:	9300      	str	r3, [sp, #0]
   27020:	68b9      	ldr	r1, [r7, #8]
   27022:	b191      	cbz	r1, 2704a <nrf_mem_register+0x6a>
   27024:	f10a 0a01 	add.w	sl, sl, #1
   27028:	f1ba 0f05 	cmp.w	sl, #5
   2702c:	f107 070c 	add.w	r7, r7, #12
   27030:	d1f6      	bne.n	27020 <nrf_mem_register+0x40>
   27032:	f248 1b07 	movw	fp, #33031	; 0x8107
   27036:	4658      	mov	r0, fp
   27038:	b007      	add	sp, #28
   2703a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2703e:	f248 1b0e 	movw	fp, #33038	; 0x810e
   27042:	4658      	mov	r0, fp
   27044:	b007      	add	sp, #28
   27046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2704a:	f1bc 0f00 	cmp.w	ip, #0
   2704e:	d061      	beq.n	27114 <nrf_mem_register+0x134>
   27050:	460d      	mov	r5, r1
   27052:	460c      	mov	r4, r1
   27054:	f8d9 3010 	ldr.w	r3, [r9, #16]
   27058:	eb0e 0b03 	add.w	fp, lr, r3
   2705c:	885a      	ldrh	r2, [r3, #2]
   2705e:	f833 6b04 	ldrh.w	r6, [r3], #4
   27062:	4415      	add	r5, r2
   27064:	459b      	cmp	fp, r3
   27066:	fb02 4406 	mla	r4, r2, r6, r4
   2706a:	d1f7      	bne.n	2705c <nrf_mem_register+0x7c>
   2706c:	f8d9 3008 	ldr.w	r3, [r9, #8]
   27070:	42a3      	cmp	r3, r4
   27072:	d3d7      	bcc.n	27024 <nrf_mem_register+0x44>
   27074:	9b00      	ldr	r3, [sp, #0]
   27076:	442b      	add	r3, r5
   27078:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   2707c:	d2d2      	bcs.n	27024 <nrf_mem_register+0x44>
   2707e:	4c63      	ldr	r4, [pc, #396]	; (2720c <nrf_mem_register+0x22c>)
   27080:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
   27084:	0092      	lsls	r2, r2, #2
   27086:	f8c0 a000 	str.w	sl, [r0]
   2708a:	18a0      	adds	r0, r4, r2
   2708c:	f844 9002 	str.w	r9, [r4, r2]
   27090:	9a00      	ldr	r2, [sp, #0]
   27092:	468b      	mov	fp, r1
   27094:	e9c0 2501 	strd	r2, r5, [r0, #4]
   27098:	f899 2001 	ldrb.w	r2, [r9, #1]
   2709c:	485a      	ldr	r0, [pc, #360]	; (27208 <nrf_mem_register+0x228>)
   2709e:	2a01      	cmp	r2, #1
   270a0:	6003      	str	r3, [r0, #0]
   270a2:	d0c8      	beq.n	27036 <nrf_mem_register+0x56>
   270a4:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   270a8:	2b00      	cmp	r3, #0
   270aa:	d0c4      	beq.n	27036 <nrf_mem_register+0x56>
   270ac:	2500      	movs	r5, #0
   270ae:	f8cd 9004 	str.w	r9, [sp, #4]
   270b2:	f8cd a00c 	str.w	sl, [sp, #12]
   270b6:	f8cd b014 	str.w	fp, [sp, #20]
   270ba:	9b01      	ldr	r3, [sp, #4]
   270bc:	781f      	ldrb	r7, [r3, #0]
   270be:	691a      	ldr	r2, [r3, #16]
   270c0:	013b      	lsls	r3, r7, #4
   270c2:	eb03 0907 	add.w	r9, r3, r7
   270c6:	9300      	str	r3, [sp, #0]
   270c8:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
   270cc:	6859      	ldr	r1, [r3, #4]
   270ce:	f832 4025 	ldrh.w	r4, [r2, r5, lsl #2]
   270d2:	9102      	str	r1, [sp, #8]
   270d4:	bb39      	cbnz	r1, 27126 <nrf_mem_register+0x146>
   270d6:	9a03      	ldr	r2, [sp, #12]
   270d8:	60dd      	str	r5, [r3, #12]
   270da:	609a      	str	r2, [r3, #8]
   270dc:	9b00      	ldr	r3, [sp, #0]
   270de:	443b      	add	r3, r7
   270e0:	461f      	mov	r7, r3
   270e2:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
   270e6:	684b      	ldr	r3, [r1, #4]
   270e8:	f858 2037 	ldr.w	r2, [r8, r7, lsl #3]
   270ec:	3301      	adds	r3, #1
   270ee:	4294      	cmp	r4, r2
   270f0:	604b      	str	r3, [r1, #4]
   270f2:	d912      	bls.n	2711a <nrf_mem_register+0x13a>
   270f4:	9b01      	ldr	r3, [sp, #4]
   270f6:	f848 4037 	str.w	r4, [r8, r7, lsl #3]
   270fa:	899b      	ldrh	r3, [r3, #12]
   270fc:	3501      	adds	r5, #1
   270fe:	429d      	cmp	r5, r3
   27100:	d3db      	bcc.n	270ba <nrf_mem_register+0xda>
   27102:	f8dd b014 	ldr.w	fp, [sp, #20]
   27106:	e796      	b.n	27036 <nrf_mem_register+0x56>
   27108:	f248 1b08 	movw	fp, #33032	; 0x8108
   2710c:	4658      	mov	r0, fp
   2710e:	b007      	add	sp, #28
   27110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27114:	9b00      	ldr	r3, [sp, #0]
   27116:	4665      	mov	r5, ip
   27118:	e7ae      	b.n	27078 <nrf_mem_register+0x98>
   2711a:	9b01      	ldr	r3, [sp, #4]
   2711c:	3501      	adds	r5, #1
   2711e:	899b      	ldrh	r3, [r3, #12]
   27120:	42ab      	cmp	r3, r5
   27122:	d8ca      	bhi.n	270ba <nrf_mem_register+0xda>
   27124:	e7ed      	b.n	27102 <nrf_mem_register+0x122>
   27126:	2600      	movs	r6, #0
   27128:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
   2712c:	9504      	str	r5, [sp, #16]
   2712e:	eb06 000a 	add.w	r0, r6, sl
   27132:	eb09 0206 	add.w	r2, r9, r6
   27136:	3201      	adds	r2, #1
   27138:	3001      	adds	r0, #1
   2713a:	f858 c032 	ldr.w	ip, [r8, r2, lsl #3]
   2713e:	0840      	lsrs	r0, r0, #1
   27140:	4d32      	ldr	r5, [pc, #200]	; (2720c <nrf_mem_register+0x22c>)
   27142:	eb09 0100 	add.w	r1, r9, r0
   27146:	eb09 030a 	add.w	r3, r9, sl
   2714a:	3101      	adds	r1, #1
   2714c:	3301      	adds	r3, #1
   2714e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   27152:	f858 e031 	ldr.w	lr, [r8, r1, lsl #3]
   27156:	f855 b02c 	ldr.w	fp, [r5, ip, lsl #2]
   2715a:	f858 c033 	ldr.w	ip, [r8, r3, lsl #3]
   2715e:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
   27162:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   27166:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   2716a:	f8db b010 	ldr.w	fp, [fp, #16]
   2716e:	6852      	ldr	r2, [r2, #4]
   27170:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
   27174:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
   27178:	eb08 01c1 	add.w	r1, r8, r1, lsl #3
   2717c:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   27180:	f83b 2022 	ldrh.w	r2, [fp, r2, lsl #2]
   27184:	f8de e010 	ldr.w	lr, [lr, #16]
   27188:	6849      	ldr	r1, [r1, #4]
   2718a:	f8dc c010 	ldr.w	ip, [ip, #16]
   2718e:	685b      	ldr	r3, [r3, #4]
   27190:	4294      	cmp	r4, r2
   27192:	f83e 1021 	ldrh.w	r1, [lr, r1, lsl #2]
   27196:	f83c 3023 	ldrh.w	r3, [ip, r3, lsl #2]
   2719a:	d92d      	bls.n	271f8 <nrf_mem_register+0x218>
   2719c:	429c      	cmp	r4, r3
   2719e:	d22d      	bcs.n	271fc <nrf_mem_register+0x21c>
   271a0:	428c      	cmp	r4, r1
   271a2:	d924      	bls.n	271ee <nrf_mem_register+0x20e>
   271a4:	1c46      	adds	r6, r0, #1
   271a6:	45b2      	cmp	sl, r6
   271a8:	d2c1      	bcs.n	2712e <nrf_mem_register+0x14e>
   271aa:	2610      	movs	r6, #16
   271ac:	9d04      	ldr	r5, [sp, #16]
   271ae:	9a02      	ldr	r2, [sp, #8]
   271b0:	42b2      	cmp	r2, r6
   271b2:	d911      	bls.n	271d8 <nrf_mem_register+0x1f8>
   271b4:	9b00      	ldr	r3, [sp, #0]
   271b6:	443b      	add	r3, r7
   271b8:	441a      	add	r2, r3
   271ba:	4433      	add	r3, r6
   271bc:	eb08 0ac2 	add.w	sl, r8, r2, lsl #3
   271c0:	eb08 09c3 	add.w	r9, r8, r3, lsl #3
   271c4:	2208      	movs	r2, #8
   271c6:	4651      	mov	r1, sl
   271c8:	eb0a 0002 	add.w	r0, sl, r2
   271cc:	f1aa 0a08 	sub.w	sl, sl, #8
   271d0:	f00e fc9a 	bl	35b08 <memcpy>
   271d4:	45d1      	cmp	r9, sl
   271d6:	d1f5      	bne.n	271c4 <nrf_mem_register+0x1e4>
   271d8:	9b00      	ldr	r3, [sp, #0]
   271da:	9903      	ldr	r1, [sp, #12]
   271dc:	443b      	add	r3, r7
   271de:	4433      	add	r3, r6
   271e0:	3301      	adds	r3, #1
   271e2:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   271e6:	f848 1033 	str.w	r1, [r8, r3, lsl #3]
   271ea:	6055      	str	r5, [r2, #4]
   271ec:	e776      	b.n	270dc <nrf_mem_register+0xfc>
   271ee:	f100 3aff 	add.w	sl, r0, #4294967295	; 0xffffffff
   271f2:	4556      	cmp	r6, sl
   271f4:	d99b      	bls.n	2712e <nrf_mem_register+0x14e>
   271f6:	e7d8      	b.n	271aa <nrf_mem_register+0x1ca>
   271f8:	9d04      	ldr	r5, [sp, #16]
   271fa:	e7d8      	b.n	271ae <nrf_mem_register+0x1ce>
   271fc:	9d04      	ldr	r5, [sp, #16]
   271fe:	f10a 0601 	add.w	r6, sl, #1
   27202:	e7d4      	b.n	271ae <nrf_mem_register+0x1ce>
   27204:	20025b60 	.word	0x20025b60
   27208:	20022694 	.word	0x20022694
   2720c:	20022698 	.word	0x20022698
   27210:	200226d4 	.word	0x200226d4

00027214 <nrf_malloc>:
   27214:	4b03      	ldr	r3, [pc, #12]	; (27224 <nrf_malloc+0x10>)
   27216:	781b      	ldrb	r3, [r3, #0]
   27218:	b10b      	cbz	r3, 2721e <nrf_malloc+0xa>
   2721a:	f7ff bd8d 	b.w	26d38 <mem_alloc.constprop.4>
   2721e:	4618      	mov	r0, r3
   27220:	4770      	bx	lr
   27222:	bf00      	nop
   27224:	20025b60 	.word	0x20025b60

00027228 <nrf_free>:
   27228:	4b04      	ldr	r3, [pc, #16]	; (2723c <nrf_free+0x14>)
   2722a:	781b      	ldrb	r3, [r3, #0]
   2722c:	b123      	cbz	r3, 27238 <nrf_free+0x10>
   2722e:	b118      	cbz	r0, 27238 <nrf_free+0x10>
   27230:	4601      	mov	r1, r0
   27232:	2000      	movs	r0, #0
   27234:	f7ff bc30 	b.w	26a98 <mem_free>
   27238:	4770      	bx	lr
   2723a:	bf00      	nop
   2723c:	20025b60 	.word	0x20025b60

00027240 <nrf_shared_malloc>:
   27240:	4b03      	ldr	r3, [pc, #12]	; (27250 <nrf_shared_malloc+0x10>)
   27242:	781b      	ldrb	r3, [r3, #0]
   27244:	b10b      	cbz	r3, 2724a <nrf_shared_malloc+0xa>
   27246:	f7ff bc93 	b.w	26b70 <mem_alloc.constprop.5>
   2724a:	4618      	mov	r0, r3
   2724c:	4770      	bx	lr
   2724e:	bf00      	nop
   27250:	20025b60 	.word	0x20025b60

00027254 <nrf_shared_free>:
   27254:	4b04      	ldr	r3, [pc, #16]	; (27268 <nrf_shared_free+0x14>)
   27256:	781b      	ldrb	r3, [r3, #0]
   27258:	b123      	cbz	r3, 27264 <nrf_shared_free+0x10>
   2725a:	b118      	cbz	r0, 27264 <nrf_shared_free+0x10>
   2725c:	4601      	mov	r1, r0
   2725e:	2001      	movs	r0, #1
   27260:	f7ff bc1a 	b.w	26a98 <mem_free>
   27264:	4770      	bx	lr
   27266:	bf00      	nop
   27268:	20025b60 	.word	0x20025b60

0002726c <ip_client_event_handler>:
   2726c:	f850 1b08 	ldr.w	r1, [r0], #8
   27270:	0c09      	lsrs	r1, r1, #16
   27272:	f004 bd33 	b.w	2bcdc <rpc_ip_event_handler>
   27276:	bf00      	nop

00027278 <rpc_ip_client_init>:
   27278:	4801      	ldr	r0, [pc, #4]	; (27280 <rpc_ip_client_init+0x8>)
   2727a:	f005 ba23 	b.w	2c6c4 <rpc_client_register>
   2727e:	bf00      	nop
   27280:	000371dc 	.word	0x000371dc

00027284 <rpc_ip_client_request_alloc>:
   27284:	2300      	movs	r3, #0
   27286:	b510      	push	{r4, lr}
   27288:	b082      	sub	sp, #8
   2728a:	9301      	str	r3, [sp, #4]
   2728c:	b158      	cbz	r0, 272a6 <rpc_ip_client_request_alloc+0x22>
   2728e:	4604      	mov	r4, r0
   27290:	aa01      	add	r2, sp, #4
   27292:	2004      	movs	r0, #4
   27294:	f005 fc4e 	bl	2cb34 <rpc_message_alloc>
   27298:	b918      	cbnz	r0, 272a2 <rpc_ip_client_request_alloc+0x1e>
   2729a:	9b01      	ldr	r3, [sp, #4]
   2729c:	b10b      	cbz	r3, 272a2 <rpc_ip_client_request_alloc+0x1e>
   2729e:	3308      	adds	r3, #8
   272a0:	6023      	str	r3, [r4, #0]
   272a2:	b002      	add	sp, #8
   272a4:	bd10      	pop	{r4, pc}
   272a6:	2007      	movs	r0, #7
   272a8:	b002      	add	sp, #8
   272aa:	bd10      	pop	{r4, pc}

000272ac <rpc_ip_client_request_send>:
   272ac:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   272b0:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   272b4:	d10b      	bne.n	272ce <rpc_ip_client_request_send+0x22>
   272b6:	b160      	cbz	r0, 272d2 <rpc_ip_client_request_send+0x26>
   272b8:	4603      	mov	r3, r0
   272ba:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   272be:	2004      	movs	r0, #4
   272c0:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   272c4:	f843 1d08 	str.w	r1, [r3, #-8]!
   272c8:	4619      	mov	r1, r3
   272ca:	f005 bc1b 	b.w	2cb04 <rpc_message_send>
   272ce:	200f      	movs	r0, #15
   272d0:	4770      	bx	lr
   272d2:	2007      	movs	r0, #7
   272d4:	4770      	bx	lr
   272d6:	bf00      	nop

000272d8 <rpc_ip_client_message_free>:
   272d8:	b120      	cbz	r0, 272e4 <rpc_ip_client_message_free+0xc>
   272da:	f1a0 0108 	sub.w	r1, r0, #8
   272de:	2004      	movs	r0, #4
   272e0:	f005 bc5a 	b.w	2cb98 <rpc_message_free>
   272e4:	2007      	movs	r0, #7
   272e6:	4770      	bx	lr

000272e8 <rpc_ip_client_data_free>:
   272e8:	b118      	cbz	r0, 272f2 <rpc_ip_client_data_free+0xa>
   272ea:	4601      	mov	r1, r0
   272ec:	2004      	movs	r0, #4
   272ee:	f005 bd65 	b.w	2cdbc <rpc_message_data_free>
   272f2:	2007      	movs	r0, #7
   272f4:	4770      	bx	lr
   272f6:	bf00      	nop

000272f8 <secure_client_socket>:
   272f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   272fc:	460c      	mov	r4, r1
   272fe:	680b      	ldr	r3, [r1, #0]
   27300:	4f46      	ldr	r7, [pc, #280]	; (2741c <secure_client_socket+0x124>)
   27302:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   27306:	600b      	str	r3, [r1, #0]
   27308:	680b      	ldr	r3, [r1, #0]
   2730a:	00c6      	lsls	r6, r0, #3
   2730c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   27310:	600b      	str	r3, [r1, #0]
   27312:	eb07 0a06 	add.w	sl, r7, r6
   27316:	b082      	sub	sp, #8
   27318:	f8da 3004 	ldr.w	r3, [sl, #4]
   2731c:	6989      	ldr	r1, [r1, #24]
   2731e:	f247 0281 	movw	r2, #28801	; 0x7081
   27322:	4605      	mov	r5, r0
   27324:	f8d4 8000 	ldr.w	r8, [r4]
   27328:	f003 fbd0 	bl	2aacc <ip_interface_request_create>
   2732c:	2800      	cmp	r0, #0
   2732e:	d06f      	beq.n	27410 <secure_client_socket+0x118>
   27330:	f8da 2004 	ldr.w	r2, [sl, #4]
   27334:	4681      	mov	r9, r0
   27336:	2a00      	cmp	r2, #0
   27338:	d15f      	bne.n	273fa <secure_client_socket+0x102>
   2733a:	4b39      	ldr	r3, [pc, #228]	; (27420 <secure_client_socket+0x128>)
   2733c:	1971      	adds	r1, r6, r5
   2733e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   27342:	2224      	movs	r2, #36	; 0x24
   27344:	f109 0014 	add.w	r0, r9, #20
   27348:	f00e fbde 	bl	35b08 <memcpy>
   2734c:	f8d9 3008 	ldr.w	r3, [r9, #8]
   27350:	4649      	mov	r1, r9
   27352:	3324      	adds	r3, #36	; 0x24
   27354:	f8c9 3008 	str.w	r3, [r9, #8]
   27358:	6822      	ldr	r2, [r4, #0]
   2735a:	4643      	mov	r3, r8
   2735c:	0c12      	lsrs	r2, r2, #16
   2735e:	0412      	lsls	r2, r2, #16
   27360:	f042 020a 	orr.w	r2, r2, #10
   27364:	6022      	str	r2, [r4, #0]
   27366:	4620      	mov	r0, r4
   27368:	f247 0281 	movw	r2, #28801	; 0x7081
   2736c:	f003 fbce 	bl	2ab0c <ip_interface_request_send>
   27370:	4603      	mov	r3, r0
   27372:	b970      	cbnz	r0, 27392 <secure_client_socket+0x9a>
   27374:	6823      	ldr	r3, [r4, #0]
   27376:	00db      	lsls	r3, r3, #3
   27378:	d40f      	bmi.n	2739a <secure_client_socket+0xa2>
   2737a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2737e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   27382:	210b      	movs	r1, #11
   27384:	4628      	mov	r0, r5
   27386:	f003 fbd5 	bl	2ab34 <ip_interface_wait>
   2738a:	4603      	mov	r3, r0
   2738c:	b150      	cbz	r0, 273a4 <secure_client_socket+0xac>
   2738e:	f8c4 8000 	str.w	r8, [r4]
   27392:	4618      	mov	r0, r3
   27394:	b002      	add	sp, #8
   27396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2739a:	2373      	movs	r3, #115	; 0x73
   2739c:	4618      	mov	r0, r3
   2739e:	b002      	add	sp, #8
   273a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   273a4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   273a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   273ac:	4611      	mov	r1, r2
   273ae:	4628      	mov	r0, r5
   273b0:	f003 fbc0 	bl	2ab34 <ip_interface_wait>
   273b4:	4603      	mov	r3, r0
   273b6:	bb30      	cbnz	r0, 27406 <secure_client_socket+0x10e>
   273b8:	f857 0035 	ldr.w	r0, [r7, r5, lsl #3]
   273bc:	b138      	cbz	r0, 273ce <secure_client_socket+0xd6>
   273be:	9301      	str	r3, [sp, #4]
   273c0:	f7ff ff32 	bl	27228 <nrf_free>
   273c4:	9b01      	ldr	r3, [sp, #4]
   273c6:	443e      	add	r6, r7
   273c8:	6073      	str	r3, [r6, #4]
   273ca:	f847 3035 	str.w	r3, [r7, r5, lsl #3]
   273ce:	4618      	mov	r0, r3
   273d0:	6822      	ldr	r2, [r4, #0]
   273d2:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   273d6:	6022      	str	r2, [r4, #0]
   273d8:	6822      	ldr	r2, [r4, #0]
   273da:	0c12      	lsrs	r2, r2, #16
   273dc:	0412      	lsls	r2, r2, #16
   273de:	f042 020c 	orr.w	r2, r2, #12
   273e2:	6022      	str	r2, [r4, #0]
   273e4:	6822      	ldr	r2, [r4, #0]
   273e6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   273ea:	6022      	str	r2, [r4, #0]
   273ec:	6822      	ldr	r2, [r4, #0]
   273ee:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   273f2:	6022      	str	r2, [r4, #0]
   273f4:	b002      	add	sp, #8
   273f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   273fa:	f857 1035 	ldr.w	r1, [r7, r5, lsl #3]
   273fe:	6800      	ldr	r0, [r0, #0]
   27400:	f00e fb82 	bl	35b08 <memcpy>
   27404:	e799      	b.n	2733a <secure_client_socket+0x42>
   27406:	2b73      	cmp	r3, #115	; 0x73
   27408:	d0c3      	beq.n	27392 <secure_client_socket+0x9a>
   2740a:	f8c4 8000 	str.w	r8, [r4]
   2740e:	e7c0      	b.n	27392 <secure_client_socket+0x9a>
   27410:	230c      	movs	r3, #12
   27412:	4618      	mov	r0, r3
   27414:	b002      	add	sp, #8
   27416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2741a:	bf00      	nop
   2741c:	20022928 	.word	0x20022928
   27420:	200227e4 	.word	0x200227e4

00027424 <tls_interface_init>:
   27424:	2000      	movs	r0, #0
   27426:	4770      	bx	lr

00027428 <tls_interface_open>:
   27428:	b538      	push	{r3, r4, r5, lr}
   2742a:	1e4b      	subs	r3, r1, #1
   2742c:	2b01      	cmp	r3, #1
   2742e:	d808      	bhi.n	27442 <tls_interface_open+0x1a>
   27430:	4614      	mov	r4, r2
   27432:	b162      	cbz	r2, 2744e <tls_interface_open+0x26>
   27434:	2901      	cmp	r1, #1
   27436:	d02d      	beq.n	27494 <tls_interface_open+0x6c>
   27438:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   2743c:	bf08      	it	eq
   2743e:	2202      	moveq	r2, #2
   27440:	d00d      	beq.n	2745e <tls_interface_open+0x36>
   27442:	2029      	movs	r0, #41	; 0x29
   27444:	f7fb fb5a 	bl	22afc <bsd_os_errno_set>
   27448:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2744c:	e020      	b.n	27490 <tls_interface_open+0x68>
   2744e:	2901      	cmp	r1, #1
   27450:	bf0b      	itete	eq
   27452:	2201      	moveq	r2, #1
   27454:	2202      	movne	r2, #2
   27456:	f44f 7482 	moveq.w	r4, #260	; 0x104
   2745a:	f44f 7487 	movne.w	r4, #270	; 0x10e
   2745e:	f003 fb95 	bl	2ab8c <ip_interface_open>
   27462:	1e05      	subs	r5, r0, #0
   27464:	db1b      	blt.n	2749e <tls_interface_open+0x76>
   27466:	4b0f      	ldr	r3, [pc, #60]	; (274a4 <tls_interface_open+0x7c>)
   27468:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
   2746c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   27470:	2224      	movs	r2, #36	; 0x24
   27472:	490d      	ldr	r1, [pc, #52]	; (274a8 <tls_interface_open+0x80>)
   27474:	f00e fb48 	bl	35b08 <memcpy>
   27478:	4628      	mov	r0, r5
   2747a:	f004 ffe7 	bl	2c44c <interface_socket_from_handle_get>
   2747e:	6803      	ldr	r3, [r0, #0]
   27480:	6144      	str	r4, [r0, #20]
   27482:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   27486:	6003      	str	r3, [r0, #0]
   27488:	6803      	ldr	r3, [r0, #0]
   2748a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   2748e:	6003      	str	r3, [r0, #0]
   27490:	4628      	mov	r0, r5
   27492:	bd38      	pop	{r3, r4, r5, pc}
   27494:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   27498:	d1d3      	bne.n	27442 <tls_interface_open+0x1a>
   2749a:	460a      	mov	r2, r1
   2749c:	e7df      	b.n	2745e <tls_interface_open+0x36>
   2749e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   274a2:	e7f5      	b.n	27490 <tls_interface_open+0x68>
   274a4:	200227e4 	.word	0x200227e4
   274a8:	000371ec 	.word	0x000371ec

000274ac <tls_interface_close>:
   274ac:	b538      	push	{r3, r4, r5, lr}
   274ae:	4604      	mov	r4, r0
   274b0:	f004 ffcc 	bl	2c44c <interface_socket_from_handle_get>
   274b4:	b180      	cbz	r0, 274d8 <tls_interface_close+0x2c>
   274b6:	4d0b      	ldr	r5, [pc, #44]	; (274e4 <tls_interface_close+0x38>)
   274b8:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
   274bc:	b138      	cbz	r0, 274ce <tls_interface_close+0x22>
   274be:	f7ff feb3 	bl	27228 <nrf_free>
   274c2:	2300      	movs	r3, #0
   274c4:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
   274c8:	f845 3034 	str.w	r3, [r5, r4, lsl #3]
   274cc:	6053      	str	r3, [r2, #4]
   274ce:	4620      	mov	r0, r4
   274d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   274d4:	f003 bc0c 	b.w	2acf0 <ip_interface_close>
   274d8:	2009      	movs	r0, #9
   274da:	f7fb fb0f 	bl	22afc <bsd_os_errno_set>
   274de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   274e2:	bd38      	pop	{r3, r4, r5, pc}
   274e4:	20022928 	.word	0x20022928

000274e8 <tls_interface_sendto>:
   274e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   274ec:	460d      	mov	r5, r1
   274ee:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   274f2:	4616      	mov	r6, r2
   274f4:	461f      	mov	r7, r3
   274f6:	4604      	mov	r4, r0
   274f8:	f004 ffa8 	bl	2c44c <interface_socket_from_handle_get>
   274fc:	2800      	cmp	r0, #0
   274fe:	d03b      	beq.n	27578 <tls_interface_sendto+0x90>
   27500:	6803      	ldr	r3, [r0, #0]
   27502:	b29b      	uxth	r3, r3
   27504:	2b0c      	cmp	r3, #12
   27506:	d039      	beq.n	2757c <tls_interface_sendto+0x94>
   27508:	6803      	ldr	r3, [r0, #0]
   2750a:	b29b      	uxth	r3, r3
   2750c:	2b0b      	cmp	r3, #11
   2750e:	d111      	bne.n	27534 <tls_interface_sendto+0x4c>
   27510:	4b20      	ldr	r3, [pc, #128]	; (27594 <tls_interface_sendto+0xac>)
   27512:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   27516:	f813 3024 	ldrb.w	r3, [r3, r4, lsl #2]
   2751a:	2b02      	cmp	r3, #2
   2751c:	d038      	beq.n	27590 <tls_interface_sendto+0xa8>
   2751e:	6903      	ldr	r3, [r0, #16]
   27520:	2b01      	cmp	r3, #1
   27522:	bf14      	ite	ne
   27524:	2039      	movne	r0, #57	; 0x39
   27526:	202a      	moveq	r0, #42	; 0x2a
   27528:	f7fb fae8 	bl	22afc <bsd_os_errno_set>
   2752c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   27530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   27534:	6903      	ldr	r3, [r0, #16]
   27536:	2b01      	cmp	r3, #1
   27538:	d00b      	beq.n	27552 <tls_interface_sendto+0x6a>
   2753a:	2b02      	cmp	r3, #2
   2753c:	d001      	beq.n	27542 <tls_interface_sendto+0x5a>
   2753e:	2039      	movs	r0, #57	; 0x39
   27540:	e7f2      	b.n	27528 <tls_interface_sendto+0x40>
   27542:	6803      	ldr	r3, [r0, #0]
   27544:	b29b      	uxth	r3, r3
   27546:	2b02      	cmp	r3, #2
   27548:	d007      	beq.n	2755a <tls_interface_sendto+0x72>
   2754a:	6803      	ldr	r3, [r0, #0]
   2754c:	b29b      	uxth	r3, r3
   2754e:	2b04      	cmp	r3, #4
   27550:	d003      	beq.n	2755a <tls_interface_sendto+0x72>
   27552:	6803      	ldr	r3, [r0, #0]
   27554:	b29b      	uxth	r3, r3
   27556:	2b05      	cmp	r3, #5
   27558:	d1f1      	bne.n	2753e <tls_interface_sendto+0x56>
   2755a:	4b0e      	ldr	r3, [pc, #56]	; (27594 <tls_interface_sendto+0xac>)
   2755c:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   27560:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   27564:	2b02      	cmp	r3, #2
   27566:	d1ea      	bne.n	2753e <tls_interface_sendto+0x56>
   27568:	4601      	mov	r1, r0
   2756a:	4620      	mov	r0, r4
   2756c:	f7ff fec4 	bl	272f8 <secure_client_socket>
   27570:	2800      	cmp	r0, #0
   27572:	d003      	beq.n	2757c <tls_interface_sendto+0x94>
   27574:	dcd8      	bgt.n	27528 <tls_interface_sendto+0x40>
   27576:	e7d9      	b.n	2752c <tls_interface_sendto+0x44>
   27578:	2009      	movs	r0, #9
   2757a:	e7d5      	b.n	27528 <tls_interface_sendto+0x40>
   2757c:	e9cd 8908 	strd	r8, r9, [sp, #32]
   27580:	463b      	mov	r3, r7
   27582:	4632      	mov	r2, r6
   27584:	4629      	mov	r1, r5
   27586:	4620      	mov	r0, r4
   27588:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2758c:	f003 bc20 	b.w	2add0 <ip_interface_sendto>
   27590:	2023      	movs	r0, #35	; 0x23
   27592:	e7c9      	b.n	27528 <tls_interface_sendto+0x40>
   27594:	200227e4 	.word	0x200227e4

00027598 <tls_interface_recvfrom>:
   27598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2759c:	460d      	mov	r5, r1
   2759e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   275a2:	4616      	mov	r6, r2
   275a4:	461f      	mov	r7, r3
   275a6:	4604      	mov	r4, r0
   275a8:	f004 ff50 	bl	2c44c <interface_socket_from_handle_get>
   275ac:	2800      	cmp	r0, #0
   275ae:	d038      	beq.n	27622 <tls_interface_recvfrom+0x8a>
   275b0:	6803      	ldr	r3, [r0, #0]
   275b2:	b29b      	uxth	r3, r3
   275b4:	2b0c      	cmp	r3, #12
   275b6:	d00f      	beq.n	275d8 <tls_interface_recvfrom+0x40>
   275b8:	6803      	ldr	r3, [r0, #0]
   275ba:	b29b      	uxth	r3, r3
   275bc:	2b0d      	cmp	r3, #13
   275be:	d00b      	beq.n	275d8 <tls_interface_recvfrom+0x40>
   275c0:	6903      	ldr	r3, [r0, #16]
   275c2:	2b01      	cmp	r3, #1
   275c4:	d01a      	beq.n	275fc <tls_interface_recvfrom+0x64>
   275c6:	2b02      	cmp	r3, #2
   275c8:	d010      	beq.n	275ec <tls_interface_recvfrom+0x54>
   275ca:	2023      	movs	r0, #35	; 0x23
   275cc:	f7fb fa96 	bl	22afc <bsd_os_errno_set>
   275d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   275d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   275d8:	e9cd 8908 	strd	r8, r9, [sp, #32]
   275dc:	463b      	mov	r3, r7
   275de:	4632      	mov	r2, r6
   275e0:	4629      	mov	r1, r5
   275e2:	4620      	mov	r0, r4
   275e4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   275e8:	f003 bd6a 	b.w	2b0c0 <ip_interface_recvfrom>
   275ec:	6803      	ldr	r3, [r0, #0]
   275ee:	b29b      	uxth	r3, r3
   275f0:	2b02      	cmp	r3, #2
   275f2:	d007      	beq.n	27604 <tls_interface_recvfrom+0x6c>
   275f4:	6803      	ldr	r3, [r0, #0]
   275f6:	b29b      	uxth	r3, r3
   275f8:	2b04      	cmp	r3, #4
   275fa:	d003      	beq.n	27604 <tls_interface_recvfrom+0x6c>
   275fc:	6803      	ldr	r3, [r0, #0]
   275fe:	b29b      	uxth	r3, r3
   27600:	2b05      	cmp	r3, #5
   27602:	d1e2      	bne.n	275ca <tls_interface_recvfrom+0x32>
   27604:	4b08      	ldr	r3, [pc, #32]	; (27628 <tls_interface_recvfrom+0x90>)
   27606:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   2760a:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   2760e:	2b02      	cmp	r3, #2
   27610:	d1db      	bne.n	275ca <tls_interface_recvfrom+0x32>
   27612:	4601      	mov	r1, r0
   27614:	4620      	mov	r0, r4
   27616:	f7ff fe6f 	bl	272f8 <secure_client_socket>
   2761a:	2800      	cmp	r0, #0
   2761c:	d0dc      	beq.n	275d8 <tls_interface_recvfrom+0x40>
   2761e:	dcd5      	bgt.n	275cc <tls_interface_recvfrom+0x34>
   27620:	e7d6      	b.n	275d0 <tls_interface_recvfrom+0x38>
   27622:	2009      	movs	r0, #9
   27624:	e7d2      	b.n	275cc <tls_interface_recvfrom+0x34>
   27626:	bf00      	nop
   27628:	200227e4 	.word	0x200227e4

0002762c <tls_interface_bind>:
   2762c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27630:	460c      	mov	r4, r1
   27632:	4617      	mov	r7, r2
   27634:	4606      	mov	r6, r0
   27636:	f004 ff09 	bl	2c44c <interface_socket_from_handle_get>
   2763a:	2800      	cmp	r0, #0
   2763c:	d06d      	beq.n	2771a <tls_interface_bind+0xee>
   2763e:	6803      	ldr	r3, [r0, #0]
   27640:	4605      	mov	r5, r0
   27642:	b29b      	uxth	r3, r3
   27644:	2b02      	cmp	r3, #2
   27646:	d15a      	bne.n	276fe <tls_interface_bind+0xd2>
   27648:	4621      	mov	r1, r4
   2764a:	463a      	mov	r2, r7
   2764c:	4630      	mov	r0, r6
   2764e:	f003 ff25 	bl	2b49c <ip_interface_bind>
   27652:	4604      	mov	r4, r0
   27654:	2800      	cmp	r0, #0
   27656:	d148      	bne.n	276ea <tls_interface_bind+0xbe>
   27658:	00f7      	lsls	r7, r6, #3
   2765a:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 27720 <tls_interface_bind+0xf4>
   2765e:	19bb      	adds	r3, r7, r6
   27660:	f818 3023 	ldrb.w	r3, [r8, r3, lsl #2]
   27664:	2b01      	cmp	r3, #1
   27666:	d002      	beq.n	2766e <tls_interface_bind+0x42>
   27668:	4620      	mov	r0, r4
   2766a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2766e:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 27724 <tls_interface_bind+0xf8>
   27672:	f247 0281 	movw	r2, #28801	; 0x7081
   27676:	eb0b 0a07 	add.w	sl, fp, r7
   2767a:	f8da 3004 	ldr.w	r3, [sl, #4]
   2767e:	69a9      	ldr	r1, [r5, #24]
   27680:	4630      	mov	r0, r6
   27682:	f003 fa23 	bl	2aacc <ip_interface_request_create>
   27686:	4681      	mov	r9, r0
   27688:	2800      	cmp	r0, #0
   2768a:	d044      	beq.n	27716 <tls_interface_bind+0xea>
   2768c:	f8da 2004 	ldr.w	r2, [sl, #4]
   27690:	2a00      	cmp	r2, #0
   27692:	d13a      	bne.n	2770a <tls_interface_bind+0xde>
   27694:	19b9      	adds	r1, r7, r6
   27696:	eb08 0181 	add.w	r1, r8, r1, lsl #2
   2769a:	2224      	movs	r2, #36	; 0x24
   2769c:	f109 0014 	add.w	r0, r9, #20
   276a0:	f00e fa32 	bl	35b08 <memcpy>
   276a4:	f8d9 3008 	ldr.w	r3, [r9, #8]
   276a8:	4649      	mov	r1, r9
   276aa:	3324      	adds	r3, #36	; 0x24
   276ac:	f8c9 3008 	str.w	r3, [r9, #8]
   276b0:	682a      	ldr	r2, [r5, #0]
   276b2:	2304      	movs	r3, #4
   276b4:	0c12      	lsrs	r2, r2, #16
   276b6:	0412      	lsls	r2, r2, #16
   276b8:	f042 020a 	orr.w	r2, r2, #10
   276bc:	602a      	str	r2, [r5, #0]
   276be:	4628      	mov	r0, r5
   276c0:	f247 0281 	movw	r2, #28801	; 0x7081
   276c4:	f003 fa22 	bl	2ab0c <ip_interface_request_send>
   276c8:	b9e8      	cbnz	r0, 27706 <tls_interface_bind+0xda>
   276ca:	682b      	ldr	r3, [r5, #0]
   276cc:	00db      	lsls	r3, r3, #3
   276ce:	d418      	bmi.n	27702 <tls_interface_bind+0xd6>
   276d0:	4630      	mov	r0, r6
   276d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   276d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   276da:	210b      	movs	r1, #11
   276dc:	f003 fa2a 	bl	2ab34 <ip_interface_wait>
   276e0:	2800      	cmp	r0, #0
   276e2:	d0c1      	beq.n	27668 <tls_interface_bind+0x3c>
   276e4:	2304      	movs	r3, #4
   276e6:	4604      	mov	r4, r0
   276e8:	602b      	str	r3, [r5, #0]
   276ea:	2c00      	cmp	r4, #0
   276ec:	ddbc      	ble.n	27668 <tls_interface_bind+0x3c>
   276ee:	4620      	mov	r0, r4
   276f0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   276f4:	f7fb fa02 	bl	22afc <bsd_os_errno_set>
   276f8:	4620      	mov	r0, r4
   276fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   276fe:	242d      	movs	r4, #45	; 0x2d
   27700:	e7f5      	b.n	276ee <tls_interface_bind+0xc2>
   27702:	2473      	movs	r4, #115	; 0x73
   27704:	e7f3      	b.n	276ee <tls_interface_bind+0xc2>
   27706:	4604      	mov	r4, r0
   27708:	e7ef      	b.n	276ea <tls_interface_bind+0xbe>
   2770a:	f85b 1036 	ldr.w	r1, [fp, r6, lsl #3]
   2770e:	6800      	ldr	r0, [r0, #0]
   27710:	f00e f9fa 	bl	35b08 <memcpy>
   27714:	e7be      	b.n	27694 <tls_interface_bind+0x68>
   27716:	240c      	movs	r4, #12
   27718:	e7e9      	b.n	276ee <tls_interface_bind+0xc2>
   2771a:	2409      	movs	r4, #9
   2771c:	e7e7      	b.n	276ee <tls_interface_bind+0xc2>
   2771e:	bf00      	nop
   27720:	200227e4 	.word	0x200227e4
   27724:	20022928 	.word	0x20022928

00027728 <tls_interface_connect>:
   27728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2772a:	460e      	mov	r6, r1
   2772c:	4617      	mov	r7, r2
   2772e:	4604      	mov	r4, r0
   27730:	f004 fe8c 	bl	2c44c <interface_socket_from_handle_get>
   27734:	b1e8      	cbz	r0, 27772 <tls_interface_connect+0x4a>
   27736:	4b13      	ldr	r3, [pc, #76]	; (27784 <tls_interface_connect+0x5c>)
   27738:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   2773c:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   27740:	2b02      	cmp	r3, #2
   27742:	d11c      	bne.n	2777e <tls_interface_connect+0x56>
   27744:	6803      	ldr	r3, [r0, #0]
   27746:	4605      	mov	r5, r0
   27748:	b29b      	uxth	r3, r3
   2774a:	2b02      	cmp	r3, #2
   2774c:	d003      	beq.n	27756 <tls_interface_connect+0x2e>
   2774e:	6803      	ldr	r3, [r0, #0]
   27750:	b29b      	uxth	r3, r3
   27752:	2b04      	cmp	r3, #4
   27754:	d113      	bne.n	2777e <tls_interface_connect+0x56>
   27756:	463a      	mov	r2, r7
   27758:	4631      	mov	r1, r6
   2775a:	4620      	mov	r0, r4
   2775c:	f003 fde4 	bl	2b328 <ip_interface_connect>
   27760:	b110      	cbz	r0, 27768 <tls_interface_connect+0x40>
   27762:	2800      	cmp	r0, #0
   27764:	dc06      	bgt.n	27774 <tls_interface_connect+0x4c>
   27766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27768:	4629      	mov	r1, r5
   2776a:	4620      	mov	r0, r4
   2776c:	f7ff fdc4 	bl	272f8 <secure_client_socket>
   27770:	e7f7      	b.n	27762 <tls_interface_connect+0x3a>
   27772:	2009      	movs	r0, #9
   27774:	f7fb f9c2 	bl	22afc <bsd_os_errno_set>
   27778:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2777c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2777e:	202d      	movs	r0, #45	; 0x2d
   27780:	e7f8      	b.n	27774 <tls_interface_connect+0x4c>
   27782:	bf00      	nop
   27784:	200227e4 	.word	0x200227e4

00027788 <tls_interface_listen>:
   27788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2778c:	b083      	sub	sp, #12
   2778e:	9101      	str	r1, [sp, #4]
   27790:	4605      	mov	r5, r0
   27792:	f004 fe5b 	bl	2c44c <interface_socket_from_handle_get>
   27796:	2800      	cmp	r0, #0
   27798:	d079      	beq.n	2788e <tls_interface_listen+0x106>
   2779a:	6903      	ldr	r3, [r0, #16]
   2779c:	4604      	mov	r4, r0
   2779e:	2b01      	cmp	r3, #1
   277a0:	d173      	bne.n	2788a <tls_interface_listen+0x102>
   277a2:	6803      	ldr	r3, [r0, #0]
   277a4:	b29b      	uxth	r3, r3
   277a6:	2b04      	cmp	r3, #4
   277a8:	d05f      	beq.n	2786a <tls_interface_listen+0xe2>
   277aa:	6823      	ldr	r3, [r4, #0]
   277ac:	b29b      	uxth	r3, r3
   277ae:	2b0b      	cmp	r3, #11
   277b0:	d16b      	bne.n	2788a <tls_interface_listen+0x102>
   277b2:	00ee      	lsls	r6, r5, #3
   277b4:	4f37      	ldr	r7, [pc, #220]	; (27894 <tls_interface_listen+0x10c>)
   277b6:	1973      	adds	r3, r6, r5
   277b8:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   277bc:	2b01      	cmp	r3, #1
   277be:	d164      	bne.n	2788a <tls_interface_listen+0x102>
   277c0:	2201      	movs	r2, #1
   277c2:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 27898 <tls_interface_listen+0x110>
   277c6:	1973      	adds	r3, r6, r5
   277c8:	00ee      	lsls	r6, r5, #3
   277ca:	f807 2023 	strb.w	r2, [r7, r3, lsl #2]
   277ce:	eb09 0806 	add.w	r8, r9, r6
   277d2:	69a1      	ldr	r1, [r4, #24]
   277d4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   277d8:	f247 0281 	movw	r2, #28801	; 0x7081
   277dc:	4628      	mov	r0, r5
   277de:	f8d4 a000 	ldr.w	sl, [r4]
   277e2:	f003 f973 	bl	2aacc <ip_interface_request_create>
   277e6:	4683      	mov	fp, r0
   277e8:	2800      	cmp	r0, #0
   277ea:	d04c      	beq.n	27886 <tls_interface_listen+0xfe>
   277ec:	f8d8 2004 	ldr.w	r2, [r8, #4]
   277f0:	2a00      	cmp	r2, #0
   277f2:	d142      	bne.n	2787a <tls_interface_listen+0xf2>
   277f4:	1971      	adds	r1, r6, r5
   277f6:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   277fa:	2224      	movs	r2, #36	; 0x24
   277fc:	f10b 0014 	add.w	r0, fp, #20
   27800:	f00e f982 	bl	35b08 <memcpy>
   27804:	f8db 2008 	ldr.w	r2, [fp, #8]
   27808:	4659      	mov	r1, fp
   2780a:	3224      	adds	r2, #36	; 0x24
   2780c:	f8cb 2008 	str.w	r2, [fp, #8]
   27810:	6822      	ldr	r2, [r4, #0]
   27812:	4653      	mov	r3, sl
   27814:	0c12      	lsrs	r2, r2, #16
   27816:	0412      	lsls	r2, r2, #16
   27818:	f042 020a 	orr.w	r2, r2, #10
   2781c:	6022      	str	r2, [r4, #0]
   2781e:	4620      	mov	r0, r4
   27820:	f247 0281 	movw	r2, #28801	; 0x7081
   27824:	f003 f972 	bl	2ab0c <ip_interface_request_send>
   27828:	b968      	cbnz	r0, 27846 <tls_interface_listen+0xbe>
   2782a:	6823      	ldr	r3, [r4, #0]
   2782c:	00db      	lsls	r3, r3, #3
   2782e:	d40f      	bmi.n	27850 <tls_interface_listen+0xc8>
   27830:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   27834:	f64f 72ff 	movw	r2, #65535	; 0xffff
   27838:	210b      	movs	r1, #11
   2783a:	4628      	mov	r0, r5
   2783c:	f003 f97a 	bl	2ab34 <ip_interface_wait>
   27840:	b170      	cbz	r0, 27860 <tls_interface_listen+0xd8>
   27842:	f8c4 a000 	str.w	sl, [r4]
   27846:	2800      	cmp	r0, #0
   27848:	dc03      	bgt.n	27852 <tls_interface_listen+0xca>
   2784a:	b003      	add	sp, #12
   2784c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27850:	2073      	movs	r0, #115	; 0x73
   27852:	f7fb f953 	bl	22afc <bsd_os_errno_set>
   27856:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2785a:	b003      	add	sp, #12
   2785c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27860:	9901      	ldr	r1, [sp, #4]
   27862:	4628      	mov	r0, r5
   27864:	f003 feba 	bl	2b5dc <ip_interface_listen>
   27868:	e7ed      	b.n	27846 <tls_interface_listen+0xbe>
   2786a:	00ee      	lsls	r6, r5, #3
   2786c:	4f09      	ldr	r7, [pc, #36]	; (27894 <tls_interface_listen+0x10c>)
   2786e:	1973      	adds	r3, r6, r5
   27870:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   27874:	2b02      	cmp	r3, #2
   27876:	d198      	bne.n	277aa <tls_interface_listen+0x22>
   27878:	e7a2      	b.n	277c0 <tls_interface_listen+0x38>
   2787a:	f859 1035 	ldr.w	r1, [r9, r5, lsl #3]
   2787e:	6800      	ldr	r0, [r0, #0]
   27880:	f00e f942 	bl	35b08 <memcpy>
   27884:	e7b6      	b.n	277f4 <tls_interface_listen+0x6c>
   27886:	200c      	movs	r0, #12
   27888:	e7e3      	b.n	27852 <tls_interface_listen+0xca>
   2788a:	202d      	movs	r0, #45	; 0x2d
   2788c:	e7e1      	b.n	27852 <tls_interface_listen+0xca>
   2788e:	2009      	movs	r0, #9
   27890:	e7df      	b.n	27852 <tls_interface_listen+0xca>
   27892:	bf00      	nop
   27894:	200227e4 	.word	0x200227e4
   27898:	20022928 	.word	0x20022928

0002789c <tls_interface_accept>:
   2789c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2789e:	460c      	mov	r4, r1
   278a0:	4616      	mov	r6, r2
   278a2:	461f      	mov	r7, r3
   278a4:	4605      	mov	r5, r0
   278a6:	f004 fdd1 	bl	2c44c <interface_socket_from_handle_get>
   278aa:	2800      	cmp	r0, #0
   278ac:	d03b      	beq.n	27926 <tls_interface_accept+0x8a>
   278ae:	6800      	ldr	r0, [r0, #0]
   278b0:	b280      	uxth	r0, r0
   278b2:	2806      	cmp	r0, #6
   278b4:	d137      	bne.n	27926 <tls_interface_accept+0x8a>
   278b6:	4621      	mov	r1, r4
   278b8:	463b      	mov	r3, r7
   278ba:	4632      	mov	r2, r6
   278bc:	4628      	mov	r0, r5
   278be:	f003 ff03 	bl	2b6c8 <ip_interface_accept>
   278c2:	4604      	mov	r4, r0
   278c4:	b118      	cbz	r0, 278ce <tls_interface_accept+0x32>
   278c6:	2c00      	cmp	r4, #0
   278c8:	dc2e      	bgt.n	27928 <tls_interface_accept+0x8c>
   278ca:	4620      	mov	r0, r4
   278cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   278ce:	4628      	mov	r0, r5
   278d0:	f004 fdbc 	bl	2c44c <interface_socket_from_handle_get>
   278d4:	6803      	ldr	r3, [r0, #0]
   278d6:	4f18      	ldr	r7, [pc, #96]	; (27938 <tls_interface_accept+0x9c>)
   278d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   278dc:	6003      	str	r3, [r0, #0]
   278de:	6803      	ldr	r3, [r0, #0]
   278e0:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   278e4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   278e8:	4606      	mov	r6, r0
   278ea:	6003      	str	r3, [r0, #0]
   278ec:	eb07 0185 	add.w	r1, r7, r5, lsl #2
   278f0:	2224      	movs	r2, #36	; 0x24
   278f2:	4638      	mov	r0, r7
   278f4:	f00e f908 	bl	35b08 <memcpy>
   278f8:	2302      	movs	r3, #2
   278fa:	703b      	strb	r3, [r7, #0]
   278fc:	6833      	ldr	r3, [r6, #0]
   278fe:	4620      	mov	r0, r4
   27900:	0c1b      	lsrs	r3, r3, #16
   27902:	041b      	lsls	r3, r3, #16
   27904:	f043 030b 	orr.w	r3, r3, #11
   27908:	6033      	str	r3, [r6, #0]
   2790a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2790e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   27912:	210c      	movs	r1, #12
   27914:	f003 f90e 	bl	2ab34 <ip_interface_wait>
   27918:	4604      	mov	r4, r0
   2791a:	2800      	cmp	r0, #0
   2791c:	d0d5      	beq.n	278ca <tls_interface_accept+0x2e>
   2791e:	2000      	movs	r0, #0
   27920:	f003 f9e6 	bl	2acf0 <ip_interface_close>
   27924:	e7cf      	b.n	278c6 <tls_interface_accept+0x2a>
   27926:	2409      	movs	r4, #9
   27928:	4620      	mov	r0, r4
   2792a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2792e:	f7fb f8e5 	bl	22afc <bsd_os_errno_set>
   27932:	4620      	mov	r0, r4
   27934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27936:	bf00      	nop
   27938:	200227e4 	.word	0x200227e4

0002793c <tls_interface_setopt>:
   2793c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27940:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   27944:	9e06      	ldr	r6, [sp, #24]
   27946:	d11e      	bne.n	27986 <tls_interface_setopt+0x4a>
   27948:	461f      	mov	r7, r3
   2794a:	4605      	mov	r5, r0
   2794c:	2b00      	cmp	r3, #0
   2794e:	f000 808c 	beq.w	27a6a <tls_interface_setopt+0x12e>
   27952:	4690      	mov	r8, r2
   27954:	f004 fd7a 	bl	2c44c <interface_socket_from_handle_get>
   27958:	2800      	cmp	r0, #0
   2795a:	d07b      	beq.n	27a54 <tls_interface_setopt+0x118>
   2795c:	6804      	ldr	r4, [r0, #0]
   2795e:	b2a4      	uxth	r4, r4
   27960:	2c02      	cmp	r4, #2
   27962:	d007      	beq.n	27974 <tls_interface_setopt+0x38>
   27964:	6803      	ldr	r3, [r0, #0]
   27966:	b29b      	uxth	r3, r3
   27968:	2b04      	cmp	r3, #4
   2796a:	d003      	beq.n	27974 <tls_interface_setopt+0x38>
   2796c:	6803      	ldr	r3, [r0, #0]
   2796e:	b29b      	uxth	r3, r3
   27970:	2b05      	cmp	r3, #5
   27972:	d16f      	bne.n	27a54 <tls_interface_setopt+0x118>
   27974:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
   27978:	2a04      	cmp	r2, #4
   2797a:	d87c      	bhi.n	27a76 <tls_interface_setopt+0x13a>
   2797c:	e8df f002 	tbb	[pc, r2]
   27980:	41324e24 	.word	0x41324e24
   27984:	07          	.byte	0x07
   27985:	00          	.byte	0x00
   27986:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2798a:	f003 bfd5 	b.w	2b938 <ip_interface_setopt>
   2798e:	4c3b      	ldr	r4, [pc, #236]	; (27a7c <tls_interface_setopt+0x140>)
   27990:	f854 0035 	ldr.w	r0, [r4, r5, lsl #3]
   27994:	b138      	cbz	r0, 279a6 <tls_interface_setopt+0x6a>
   27996:	f7ff fc47 	bl	27228 <nrf_free>
   2799a:	2200      	movs	r2, #0
   2799c:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   279a0:	f844 2035 	str.w	r2, [r4, r5, lsl #3]
   279a4:	605a      	str	r2, [r3, #4]
   279a6:	4630      	mov	r0, r6
   279a8:	b34e      	cbz	r6, 279fe <tls_interface_setopt+0xc2>
   279aa:	f7ff fc33 	bl	27214 <nrf_malloc>
   279ae:	f844 0035 	str.w	r0, [r4, r5, lsl #3]
   279b2:	2800      	cmp	r0, #0
   279b4:	d057      	beq.n	27a66 <tls_interface_setopt+0x12a>
   279b6:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   279ba:	4632      	mov	r2, r6
   279bc:	4639      	mov	r1, r7
   279be:	6066      	str	r6, [r4, #4]
   279c0:	f00e f8a2 	bl	35b08 <memcpy>
   279c4:	2000      	movs	r0, #0
   279c6:	e01a      	b.n	279fe <tls_interface_setopt+0xc2>
   279c8:	2e04      	cmp	r6, #4
   279ca:	d14a      	bne.n	27a62 <tls_interface_setopt+0x126>
   279cc:	6838      	ldr	r0, [r7, #0]
   279ce:	2800      	cmp	r0, #0
   279d0:	d039      	beq.n	27a46 <tls_interface_setopt+0x10a>
   279d2:	2801      	cmp	r0, #1
   279d4:	d145      	bne.n	27a62 <tls_interface_setopt+0x126>
   279d6:	4a2a      	ldr	r2, [pc, #168]	; (27a80 <tls_interface_setopt+0x144>)
   279d8:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   279dc:	f802 0024 	strb.w	r0, [r2, r4, lsl #2]
   279e0:	2000      	movs	r0, #0
   279e2:	e00c      	b.n	279fe <tls_interface_setopt+0xc2>
   279e4:	2e01      	cmp	r6, #1
   279e6:	d13c      	bne.n	27a62 <tls_interface_setopt+0x126>
   279e8:	783a      	ldrb	r2, [r7, #0]
   279ea:	2000      	movs	r0, #0
   279ec:	3200      	adds	r2, #0
   279ee:	bf18      	it	ne
   279f0:	2201      	movne	r2, #1
   279f2:	4b23      	ldr	r3, [pc, #140]	; (27a80 <tls_interface_setopt+0x144>)
   279f4:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   279f8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   279fc:	7062      	strb	r2, [r4, #1]
   279fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27a02:	2e04      	cmp	r6, #4
   27a04:	d12d      	bne.n	27a62 <tls_interface_setopt+0x126>
   27a06:	683a      	ldr	r2, [r7, #0]
   27a08:	2a02      	cmp	r2, #2
   27a0a:	d82a      	bhi.n	27a62 <tls_interface_setopt+0x126>
   27a0c:	4b1c      	ldr	r3, [pc, #112]	; (27a80 <tls_interface_setopt+0x144>)
   27a0e:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   27a12:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   27a16:	70a2      	strb	r2, [r4, #2]
   27a18:	2000      	movs	r0, #0
   27a1a:	e7f0      	b.n	279fe <tls_interface_setopt+0xc2>
   27a1c:	ea5f 0c96 	movs.w	ip, r6, lsr #2
   27a20:	d01f      	beq.n	27a62 <tls_interface_setopt+0x126>
   27a22:	f016 0403 	ands.w	r4, r6, #3
   27a26:	d11c      	bne.n	27a62 <tls_interface_setopt+0x126>
   27a28:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   27a2c:	00ad      	lsls	r5, r5, #2
   27a2e:	4b14      	ldr	r3, [pc, #80]	; (27a80 <tls_interface_setopt+0x144>)
   27a30:	1d28      	adds	r0, r5, #4
   27a32:	4418      	add	r0, r3
   27a34:	442b      	add	r3, r5
   27a36:	4632      	mov	r2, r6
   27a38:	4639      	mov	r1, r7
   27a3a:	f883 c003 	strb.w	ip, [r3, #3]
   27a3e:	f00e f863 	bl	35b08 <memcpy>
   27a42:	4620      	mov	r0, r4
   27a44:	e7db      	b.n	279fe <tls_interface_setopt+0xc2>
   27a46:	2102      	movs	r1, #2
   27a48:	4a0d      	ldr	r2, [pc, #52]	; (27a80 <tls_interface_setopt+0x144>)
   27a4a:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   27a4e:	f802 1024 	strb.w	r1, [r2, r4, lsl #2]
   27a52:	e7d4      	b.n	279fe <tls_interface_setopt+0xc2>
   27a54:	2009      	movs	r0, #9
   27a56:	f7fb f851 	bl	22afc <bsd_os_errno_set>
   27a5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   27a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27a62:	2016      	movs	r0, #22
   27a64:	e7f7      	b.n	27a56 <tls_interface_setopt+0x11a>
   27a66:	200c      	movs	r0, #12
   27a68:	e7f5      	b.n	27a56 <tls_interface_setopt+0x11a>
   27a6a:	200e      	movs	r0, #14
   27a6c:	f7fb f846 	bl	22afc <bsd_os_errno_set>
   27a70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   27a74:	e7c3      	b.n	279fe <tls_interface_setopt+0xc2>
   27a76:	202a      	movs	r0, #42	; 0x2a
   27a78:	e7ed      	b.n	27a56 <tls_interface_setopt+0x11a>
   27a7a:	bf00      	nop
   27a7c:	20022928 	.word	0x20022928
   27a80:	200227e4 	.word	0x200227e4

00027a84 <tls_interface_getopt>:
   27a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27a88:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   27a8c:	9f06      	ldr	r7, [sp, #24]
   27a8e:	d112      	bne.n	27ab6 <tls_interface_getopt+0x32>
   27a90:	461d      	mov	r5, r3
   27a92:	b16b      	cbz	r3, 27ab0 <tls_interface_getopt+0x2c>
   27a94:	b167      	cbz	r7, 27ab0 <tls_interface_getopt+0x2c>
   27a96:	4606      	mov	r6, r0
   27a98:	4614      	mov	r4, r2
   27a9a:	f004 fcd7 	bl	2c44c <interface_socket_from_handle_get>
   27a9e:	2800      	cmp	r0, #0
   27aa0:	d04f      	beq.n	27b42 <tls_interface_getopt+0xbe>
   27aa2:	3c01      	subs	r4, #1
   27aa4:	2c03      	cmp	r4, #3
   27aa6:	d852      	bhi.n	27b4e <tls_interface_getopt+0xca>
   27aa8:	e8df f004 	tbb	[pc, r4]
   27aac:	09152139 	.word	0x09152139
   27ab0:	200e      	movs	r0, #14
   27ab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27ab6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   27aba:	f003 bff9 	b.w	2bab0 <ip_interface_getopt>
   27abe:	683b      	ldr	r3, [r7, #0]
   27ac0:	2b04      	cmp	r3, #4
   27ac2:	d13c      	bne.n	27b3e <tls_interface_getopt+0xba>
   27ac4:	4b23      	ldr	r3, [pc, #140]	; (27b54 <tls_interface_getopt+0xd0>)
   27ac6:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   27aca:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   27ace:	78b3      	ldrb	r3, [r6, #2]
   27ad0:	2000      	movs	r0, #0
   27ad2:	602b      	str	r3, [r5, #0]
   27ad4:	e7ed      	b.n	27ab2 <tls_interface_getopt+0x2e>
   27ad6:	683b      	ldr	r3, [r7, #0]
   27ad8:	2b01      	cmp	r3, #1
   27ada:	d130      	bne.n	27b3e <tls_interface_getopt+0xba>
   27adc:	4b1d      	ldr	r3, [pc, #116]	; (27b54 <tls_interface_getopt+0xd0>)
   27ade:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   27ae2:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   27ae6:	7873      	ldrb	r3, [r6, #1]
   27ae8:	2000      	movs	r0, #0
   27aea:	702b      	strb	r3, [r5, #0]
   27aec:	e7e1      	b.n	27ab2 <tls_interface_getopt+0x2e>
   27aee:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   27af2:	4918      	ldr	r1, [pc, #96]	; (27b54 <tls_interface_getopt+0xd0>)
   27af4:	683b      	ldr	r3, [r7, #0]
   27af6:	00b6      	lsls	r6, r6, #2
   27af8:	198a      	adds	r2, r1, r6
   27afa:	f013 0403 	ands.w	r4, r3, #3
   27afe:	78d0      	ldrb	r0, [r2, #3]
   27b00:	d121      	bne.n	27b46 <tls_interface_getopt+0xc2>
   27b02:	089b      	lsrs	r3, r3, #2
   27b04:	4283      	cmp	r3, r0
   27b06:	bf28      	it	cs
   27b08:	4603      	movcs	r3, r0
   27b0a:	009a      	lsls	r2, r3, #2
   27b0c:	b1db      	cbz	r3, 27b46 <tls_interface_getopt+0xc2>
   27b0e:	3604      	adds	r6, #4
   27b10:	4431      	add	r1, r6
   27b12:	603a      	str	r2, [r7, #0]
   27b14:	4628      	mov	r0, r5
   27b16:	f00d fff7 	bl	35b08 <memcpy>
   27b1a:	4620      	mov	r0, r4
   27b1c:	e7c9      	b.n	27ab2 <tls_interface_getopt+0x2e>
   27b1e:	683b      	ldr	r3, [r7, #0]
   27b20:	2b04      	cmp	r3, #4
   27b22:	d10c      	bne.n	27b3e <tls_interface_getopt+0xba>
   27b24:	4b0b      	ldr	r3, [pc, #44]	; (27b54 <tls_interface_getopt+0xd0>)
   27b26:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   27b2a:	f813 3026 	ldrb.w	r3, [r3, r6, lsl #2]
   27b2e:	2000      	movs	r0, #0
   27b30:	f1a3 0301 	sub.w	r3, r3, #1
   27b34:	fab3 f383 	clz	r3, r3
   27b38:	095b      	lsrs	r3, r3, #5
   27b3a:	602b      	str	r3, [r5, #0]
   27b3c:	e7b9      	b.n	27ab2 <tls_interface_getopt+0x2e>
   27b3e:	2016      	movs	r0, #22
   27b40:	e7b7      	b.n	27ab2 <tls_interface_getopt+0x2e>
   27b42:	2009      	movs	r0, #9
   27b44:	e7b5      	b.n	27ab2 <tls_interface_getopt+0x2e>
   27b46:	2800      	cmp	r0, #0
   27b48:	d1f9      	bne.n	27b3e <tls_interface_getopt+0xba>
   27b4a:	6038      	str	r0, [r7, #0]
   27b4c:	e7b1      	b.n	27ab2 <tls_interface_getopt+0x2e>
   27b4e:	202a      	movs	r0, #42	; 0x2a
   27b50:	e7af      	b.n	27ab2 <tls_interface_getopt+0x2e>
   27b52:	bf00      	nop
   27b54:	200227e4 	.word	0x200227e4

00027b58 <tls_rpc_ip_event_handler>:
   27b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27b5a:	f248 0581 	movw	r5, #32897	; 0x8081
   27b5e:	42ab      	cmp	r3, r5
   27b60:	460c      	mov	r4, r1
   27b62:	d062      	beq.n	27c2a <tls_rpc_ip_event_handler+0xd2>
   27b64:	f249 0182 	movw	r1, #36994	; 0x9082
   27b68:	428b      	cmp	r3, r1
   27b6a:	4606      	mov	r6, r0
   27b6c:	d02e      	beq.n	27bcc <tls_rpc_ip_event_handler+0x74>
   27b6e:	f248 0102 	movw	r1, #32770	; 0x8002
   27b72:	428b      	cmp	r3, r1
   27b74:	d001      	beq.n	27b7a <tls_rpc_ip_event_handler+0x22>
   27b76:	2001      	movs	r0, #1
   27b78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27b7a:	2c00      	cmp	r4, #0
   27b7c:	d0fb      	beq.n	27b76 <tls_rpc_ip_event_handler+0x1e>
   27b7e:	6963      	ldr	r3, [r4, #20]
   27b80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   27b84:	d002      	beq.n	27b8c <tls_rpc_ip_event_handler+0x34>
   27b86:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   27b8a:	d1f4      	bne.n	27b76 <tls_rpc_ip_event_handler+0x1e>
   27b8c:	6823      	ldr	r3, [r4, #0]
   27b8e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   27b92:	6023      	str	r3, [r4, #0]
   27b94:	6955      	ldr	r5, [r2, #20]
   27b96:	2d00      	cmp	r5, #0
   27b98:	d156      	bne.n	27c48 <tls_rpc_ip_event_handler+0xf0>
   27b9a:	6823      	ldr	r3, [r4, #0]
   27b9c:	0c1b      	lsrs	r3, r3, #16
   27b9e:	041b      	lsls	r3, r3, #16
   27ba0:	f043 0305 	orr.w	r3, r3, #5
   27ba4:	6023      	str	r3, [r4, #0]
   27ba6:	6823      	ldr	r3, [r4, #0]
   27ba8:	00da      	lsls	r2, r3, #3
   27baa:	d50d      	bpl.n	27bc8 <tls_rpc_ip_event_handler+0x70>
   27bac:	4b2b      	ldr	r3, [pc, #172]	; (27c5c <tls_rpc_ip_event_handler+0x104>)
   27bae:	eb06 02c6 	add.w	r2, r6, r6, lsl #3
   27bb2:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   27bb6:	2b02      	cmp	r3, #2
   27bb8:	d106      	bne.n	27bc8 <tls_rpc_ip_event_handler+0x70>
   27bba:	4630      	mov	r0, r6
   27bbc:	4621      	mov	r1, r4
   27bbe:	f7ff fb9b 	bl	272f8 <secure_client_socket>
   27bc2:	b108      	cbz	r0, 27bc8 <tls_rpc_ip_event_handler+0x70>
   27bc4:	2873      	cmp	r0, #115	; 0x73
   27bc6:	d142      	bne.n	27c4e <tls_rpc_ip_event_handler+0xf6>
   27bc8:	2000      	movs	r0, #0
   27bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27bcc:	2c00      	cmp	r4, #0
   27bce:	d0fb      	beq.n	27bc8 <tls_rpc_ip_event_handler+0x70>
   27bd0:	6823      	ldr	r3, [r4, #0]
   27bd2:	b29b      	uxth	r3, r3
   27bd4:	2b0b      	cmp	r3, #11
   27bd6:	d1f7      	bne.n	27bc8 <tls_rpc_ip_event_handler+0x70>
   27bd8:	6915      	ldr	r5, [r2, #16]
   27bda:	2d00      	cmp	r5, #0
   27bdc:	d134      	bne.n	27c48 <tls_rpc_ip_event_handler+0xf0>
   27bde:	6823      	ldr	r3, [r4, #0]
   27be0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   27be4:	6023      	str	r3, [r4, #0]
   27be6:	6823      	ldr	r3, [r4, #0]
   27be8:	00db      	lsls	r3, r3, #3
   27bea:	d5ed      	bpl.n	27bc8 <tls_rpc_ip_event_handler+0x70>
   27bec:	4f1c      	ldr	r7, [pc, #112]	; (27c60 <tls_rpc_ip_event_handler+0x108>)
   27bee:	f857 0030 	ldr.w	r0, [r7, r0, lsl #3]
   27bf2:	b130      	cbz	r0, 27c02 <tls_rpc_ip_event_handler+0xaa>
   27bf4:	f7ff fb18 	bl	27228 <nrf_free>
   27bf8:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
   27bfc:	f847 5036 	str.w	r5, [r7, r6, lsl #3]
   27c00:	605d      	str	r5, [r3, #4]
   27c02:	6823      	ldr	r3, [r4, #0]
   27c04:	2000      	movs	r0, #0
   27c06:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   27c0a:	6023      	str	r3, [r4, #0]
   27c0c:	6823      	ldr	r3, [r4, #0]
   27c0e:	0c1b      	lsrs	r3, r3, #16
   27c10:	041b      	lsls	r3, r3, #16
   27c12:	f043 030c 	orr.w	r3, r3, #12
   27c16:	6023      	str	r3, [r4, #0]
   27c18:	6823      	ldr	r3, [r4, #0]
   27c1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   27c1e:	6023      	str	r3, [r4, #0]
   27c20:	6823      	ldr	r3, [r4, #0]
   27c22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   27c26:	6023      	str	r3, [r4, #0]
   27c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27c2a:	2900      	cmp	r1, #0
   27c2c:	d0cc      	beq.n	27bc8 <tls_rpc_ip_event_handler+0x70>
   27c2e:	680b      	ldr	r3, [r1, #0]
   27c30:	b29b      	uxth	r3, r3
   27c32:	2b0a      	cmp	r3, #10
   27c34:	d1c8      	bne.n	27bc8 <tls_rpc_ip_event_handler+0x70>
   27c36:	6950      	ldr	r0, [r2, #20]
   27c38:	b938      	cbnz	r0, 27c4a <tls_rpc_ip_event_handler+0xf2>
   27c3a:	680b      	ldr	r3, [r1, #0]
   27c3c:	0c1b      	lsrs	r3, r3, #16
   27c3e:	041b      	lsls	r3, r3, #16
   27c40:	f043 030b 	orr.w	r3, r3, #11
   27c44:	600b      	str	r3, [r1, #0]
   27c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27c48:	4628      	mov	r0, r5
   27c4a:	f002 ff35 	bl	2aab8 <rpc_error_to_nrf_bsd_error>
   27c4e:	6060      	str	r0, [r4, #4]
   27c50:	6823      	ldr	r3, [r4, #0]
   27c52:	2000      	movs	r0, #0
   27c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   27c58:	6023      	str	r3, [r4, #0]
   27c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27c5c:	200227e4 	.word	0x200227e4
   27c60:	20022928 	.word	0x20022928

00027c64 <rpc_dfu_event_handler>:
   27c64:	b508      	push	{r3, lr}
   27c66:	4a08      	ldr	r2, [pc, #32]	; (27c88 <rpc_dfu_event_handler+0x24>)
   27c68:	68c1      	ldr	r1, [r0, #12]
   27c6a:	8812      	ldrh	r2, [r2, #0]
   27c6c:	4603      	mov	r3, r0
   27c6e:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
   27c72:	d005      	beq.n	27c80 <rpc_dfu_event_handler+0x1c>
   27c74:	6800      	ldr	r0, [r0, #0]
   27c76:	b110      	cbz	r0, 27c7e <rpc_dfu_event_handler+0x1a>
   27c78:	f7fe ff06 	bl	26a88 <rpc_dfu_client_data_free>
   27c7c:	2000      	movs	r0, #0
   27c7e:	bd08      	pop	{r3, pc}
   27c80:	4a02      	ldr	r2, [pc, #8]	; (27c8c <rpc_dfu_event_handler+0x28>)
   27c82:	2001      	movs	r0, #1
   27c84:	6013      	str	r3, [r2, #0]
   27c86:	bd08      	pop	{r3, pc}
   27c88:	20024010 	.word	0x20024010
   27c8c:	20022974 	.word	0x20022974

00027c90 <mfu_interface_init>:
   27c90:	2300      	movs	r3, #0
   27c92:	b510      	push	{r4, lr}
   27c94:	4808      	ldr	r0, [pc, #32]	; (27cb8 <mfu_interface_init+0x28>)
   27c96:	4909      	ldr	r1, [pc, #36]	; (27cbc <mfu_interface_init+0x2c>)
   27c98:	4a09      	ldr	r2, [pc, #36]	; (27cc0 <mfu_interface_init+0x30>)
   27c9a:	4c0a      	ldr	r4, [pc, #40]	; (27cc4 <mfu_interface_init+0x34>)
   27c9c:	8003      	strh	r3, [r0, #0]
   27c9e:	600b      	str	r3, [r1, #0]
   27ca0:	6013      	str	r3, [r2, #0]
   27ca2:	6023      	str	r3, [r4, #0]
   27ca4:	f7fe feba 	bl	26a1c <rpc_dfu_client_init>
   27ca8:	b910      	cbnz	r0, 27cb0 <mfu_interface_init+0x20>
   27caa:	2301      	movs	r3, #1
   27cac:	6023      	str	r3, [r4, #0]
   27cae:	bd10      	pop	{r4, pc}
   27cb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   27cb4:	bd10      	pop	{r4, pc}
   27cb6:	bf00      	nop
   27cb8:	20024010 	.word	0x20024010
   27cbc:	20022974 	.word	0x20022974
   27cc0:	20022970 	.word	0x20022970
   27cc4:	20022968 	.word	0x20022968

00027cc8 <mfu_interface_open>:
   27cc8:	b508      	push	{r3, lr}
   27cca:	4b07      	ldr	r3, [pc, #28]	; (27ce8 <mfu_interface_open+0x20>)
   27ccc:	681a      	ldr	r2, [r3, #0]
   27cce:	2a01      	cmp	r2, #1
   27cd0:	d103      	bne.n	27cda <mfu_interface_open+0x12>
   27cd2:	2202      	movs	r2, #2
   27cd4:	601a      	str	r2, [r3, #0]
   27cd6:	4805      	ldr	r0, [pc, #20]	; (27cec <mfu_interface_open+0x24>)
   27cd8:	bd08      	pop	{r3, pc}
   27cda:	2001      	movs	r0, #1
   27cdc:	f7fa ff0e 	bl	22afc <bsd_os_errno_set>
   27ce0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   27ce4:	bd08      	pop	{r3, pc}
   27ce6:	bf00      	nop
   27ce8:	20022968 	.word	0x20022968
   27cec:	49765432 	.word	0x49765432

00027cf0 <mfu_interface_close>:
   27cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
   27cf2:	4c32      	ldr	r4, [pc, #200]	; (27dbc <mfu_interface_close+0xcc>)
   27cf4:	b083      	sub	sp, #12
   27cf6:	6823      	ldr	r3, [r4, #0]
   27cf8:	1e9a      	subs	r2, r3, #2
   27cfa:	2a01      	cmp	r2, #1
   27cfc:	d857      	bhi.n	27dae <mfu_interface_close+0xbe>
   27cfe:	2b03      	cmp	r3, #3
   27d00:	d004      	beq.n	27d0c <mfu_interface_close+0x1c>
   27d02:	2301      	movs	r3, #1
   27d04:	2000      	movs	r0, #0
   27d06:	6023      	str	r3, [r4, #0]
   27d08:	b003      	add	sp, #12
   27d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27d0c:	2100      	movs	r1, #0
   27d0e:	4668      	mov	r0, sp
   27d10:	f7fe fe8a 	bl	26a28 <rpc_dfu_client_request_alloc>
   27d14:	4603      	mov	r3, r0
   27d16:	2800      	cmp	r0, #0
   27d18:	d13d      	bne.n	27d96 <mfu_interface_close+0xa6>
   27d1a:	2104      	movs	r1, #4
   27d1c:	4e28      	ldr	r6, [pc, #160]	; (27dc0 <mfu_interface_close+0xd0>)
   27d1e:	9800      	ldr	r0, [sp, #0]
   27d20:	8832      	ldrh	r2, [r6, #0]
   27d22:	7201      	strb	r1, [r0, #8]
   27d24:	3201      	adds	r2, #1
   27d26:	b292      	uxth	r2, r2
   27d28:	0411      	lsls	r1, r2, #16
   27d2a:	f041 0106 	orr.w	r1, r1, #6
   27d2e:	4d25      	ldr	r5, [pc, #148]	; (27dc4 <mfu_interface_close+0xd4>)
   27d30:	60c1      	str	r1, [r0, #12]
   27d32:	7103      	strb	r3, [r0, #4]
   27d34:	7143      	strb	r3, [r0, #5]
   27d36:	7183      	strb	r3, [r0, #6]
   27d38:	71c3      	strb	r3, [r0, #7]
   27d3a:	7243      	strb	r3, [r0, #9]
   27d3c:	7283      	strb	r3, [r0, #10]
   27d3e:	72c3      	strb	r3, [r0, #11]
   27d40:	2106      	movs	r1, #6
   27d42:	8032      	strh	r2, [r6, #0]
   27d44:	602b      	str	r3, [r5, #0]
   27d46:	f7fe fe83 	bl	26a50 <rpc_dfu_client_request_send>
   27d4a:	b9d8      	cbnz	r0, 27d84 <mfu_interface_close+0x94>
   27d4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   27d50:	ae02      	add	r6, sp, #8
   27d52:	4627      	mov	r7, r4
   27d54:	f846 3d04 	str.w	r3, [r6, #-4]!
   27d58:	e004      	b.n	27d64 <mfu_interface_close+0x74>
   27d5a:	4631      	mov	r1, r6
   27d5c:	4638      	mov	r0, r7
   27d5e:	f7fa fe39 	bl	229d4 <bsd_os_timedwait>
   27d62:	b9f0      	cbnz	r0, 27da2 <mfu_interface_close+0xb2>
   27d64:	6828      	ldr	r0, [r5, #0]
   27d66:	2800      	cmp	r0, #0
   27d68:	d0f7      	beq.n	27d5a <mfu_interface_close+0x6a>
   27d6a:	6905      	ldr	r5, [r0, #16]
   27d6c:	f7fe fe84 	bl	26a78 <rpc_dfu_client_message_free>
   27d70:	2d00      	cmp	r5, #0
   27d72:	d0c6      	beq.n	27d02 <mfu_interface_close+0x12>
   27d74:	4b14      	ldr	r3, [pc, #80]	; (27dc8 <mfu_interface_close+0xd8>)
   27d76:	2008      	movs	r0, #8
   27d78:	601d      	str	r5, [r3, #0]
   27d7a:	f7fa febf 	bl	22afc <bsd_os_errno_set>
   27d7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   27d82:	e7c1      	b.n	27d08 <mfu_interface_close+0x18>
   27d84:	9800      	ldr	r0, [sp, #0]
   27d86:	6803      	ldr	r3, [r0, #0]
   27d88:	b11b      	cbz	r3, 27d92 <mfu_interface_close+0xa2>
   27d8a:	4618      	mov	r0, r3
   27d8c:	f7fe fe7c 	bl	26a88 <rpc_dfu_client_data_free>
   27d90:	9800      	ldr	r0, [sp, #0]
   27d92:	f7fe fe71 	bl	26a78 <rpc_dfu_client_message_free>
   27d96:	200c      	movs	r0, #12
   27d98:	f7fa feb0 	bl	22afc <bsd_os_errno_set>
   27d9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   27da0:	e7b2      	b.n	27d08 <mfu_interface_close+0x18>
   27da2:	203c      	movs	r0, #60	; 0x3c
   27da4:	f7fa feaa 	bl	22afc <bsd_os_errno_set>
   27da8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   27dac:	e7ac      	b.n	27d08 <mfu_interface_close+0x18>
   27dae:	2001      	movs	r0, #1
   27db0:	f7fa fea4 	bl	22afc <bsd_os_errno_set>
   27db4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   27db8:	e7a6      	b.n	27d08 <mfu_interface_close+0x18>
   27dba:	bf00      	nop
   27dbc:	20022968 	.word	0x20022968
   27dc0:	20024010 	.word	0x20024010
   27dc4:	20022974 	.word	0x20022974
   27dc8:	2002296c 	.word	0x2002296c

00027dcc <mfu_interface_sendto>:
   27dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27dd0:	4e64      	ldr	r6, [pc, #400]	; (27f64 <mfu_interface_sendto+0x198>)
   27dd2:	460f      	mov	r7, r1
   27dd4:	6831      	ldr	r1, [r6, #0]
   27dd6:	4615      	mov	r5, r2
   27dd8:	1e8a      	subs	r2, r1, #2
   27dda:	2a01      	cmp	r2, #1
   27ddc:	b082      	sub	sp, #8
   27dde:	f200 80b4 	bhi.w	27f4a <mfu_interface_sendto+0x17e>
   27de2:	2f00      	cmp	r7, #0
   27de4:	f000 80a5 	beq.w	27f32 <mfu_interface_sendto+0x166>
   27de8:	2d00      	cmp	r5, #0
   27dea:	f000 80a2 	beq.w	27f32 <mfu_interface_sendto+0x166>
   27dee:	2b00      	cmp	r3, #0
   27df0:	f040 80b1 	bne.w	27f56 <mfu_interface_sendto+0x18a>
   27df4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   27df6:	2b00      	cmp	r3, #0
   27df8:	f040 80a1 	bne.w	27f3e <mfu_interface_sendto+0x172>
   27dfc:	2902      	cmp	r1, #2
   27dfe:	d04f      	beq.n	27ea0 <mfu_interface_sendto+0xd4>
   27e00:	46e8      	mov	r8, sp
   27e02:	4640      	mov	r0, r8
   27e04:	4629      	mov	r1, r5
   27e06:	f7fe fe0f 	bl	26a28 <rpc_dfu_client_request_alloc>
   27e0a:	4606      	mov	r6, r0
   27e0c:	b140      	cbz	r0, 27e20 <mfu_interface_sendto+0x54>
   27e0e:	200c      	movs	r0, #12
   27e10:	f7fa fe74 	bl	22afc <bsd_os_errno_set>
   27e14:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   27e18:	4628      	mov	r0, r5
   27e1a:	b002      	add	sp, #8
   27e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   27e20:	9b00      	ldr	r3, [sp, #0]
   27e22:	4639      	mov	r1, r7
   27e24:	6818      	ldr	r0, [r3, #0]
   27e26:	462a      	mov	r2, r5
   27e28:	f00d fe6e 	bl	35b08 <memcpy>
   27e2c:	2104      	movs	r1, #4
   27e2e:	4c4e      	ldr	r4, [pc, #312]	; (27f68 <mfu_interface_sendto+0x19c>)
   27e30:	9800      	ldr	r0, [sp, #0]
   27e32:	8823      	ldrh	r3, [r4, #0]
   27e34:	6045      	str	r5, [r0, #4]
   27e36:	3301      	adds	r3, #1
   27e38:	b29b      	uxth	r3, r3
   27e3a:	041a      	lsls	r2, r3, #16
   27e3c:	8023      	strh	r3, [r4, #0]
   27e3e:	430a      	orrs	r2, r1
   27e40:	4c4a      	ldr	r4, [pc, #296]	; (27f6c <mfu_interface_sendto+0x1a0>)
   27e42:	60c2      	str	r2, [r0, #12]
   27e44:	7246      	strb	r6, [r0, #9]
   27e46:	7286      	strb	r6, [r0, #10]
   27e48:	72c6      	strb	r6, [r0, #11]
   27e4a:	7201      	strb	r1, [r0, #8]
   27e4c:	6026      	str	r6, [r4, #0]
   27e4e:	f7fe fdff 	bl	26a50 <rpc_dfu_client_request_send>
   27e52:	2800      	cmp	r0, #0
   27e54:	d163      	bne.n	27f1e <mfu_interface_sendto+0x152>
   27e56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   27e5a:	ae02      	add	r6, sp, #8
   27e5c:	4f41      	ldr	r7, [pc, #260]	; (27f64 <mfu_interface_sendto+0x198>)
   27e5e:	f846 3d04 	str.w	r3, [r6, #-4]!
   27e62:	e004      	b.n	27e6e <mfu_interface_sendto+0xa2>
   27e64:	4631      	mov	r1, r6
   27e66:	4638      	mov	r0, r7
   27e68:	f7fa fdb4 	bl	229d4 <bsd_os_timedwait>
   27e6c:	b978      	cbnz	r0, 27e8e <mfu_interface_sendto+0xc2>
   27e6e:	6820      	ldr	r0, [r4, #0]
   27e70:	2800      	cmp	r0, #0
   27e72:	d0f7      	beq.n	27e64 <mfu_interface_sendto+0x98>
   27e74:	6904      	ldr	r4, [r0, #16]
   27e76:	f7fe fdff 	bl	26a78 <rpc_dfu_client_message_free>
   27e7a:	2c00      	cmp	r4, #0
   27e7c:	d0cc      	beq.n	27e18 <mfu_interface_sendto+0x4c>
   27e7e:	4b3c      	ldr	r3, [pc, #240]	; (27f70 <mfu_interface_sendto+0x1a4>)
   27e80:	2008      	movs	r0, #8
   27e82:	601c      	str	r4, [r3, #0]
   27e84:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   27e88:	f7fa fe38 	bl	22afc <bsd_os_errno_set>
   27e8c:	e7c4      	b.n	27e18 <mfu_interface_sendto+0x4c>
   27e8e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   27e92:	203c      	movs	r0, #60	; 0x3c
   27e94:	f7fa fe32 	bl	22afc <bsd_os_errno_set>
   27e98:	4628      	mov	r0, r5
   27e9a:	b002      	add	sp, #8
   27e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   27ea0:	46e8      	mov	r8, sp
   27ea2:	4619      	mov	r1, r3
   27ea4:	4640      	mov	r0, r8
   27ea6:	f7fe fdbf 	bl	26a28 <rpc_dfu_client_request_alloc>
   27eaa:	4602      	mov	r2, r0
   27eac:	2800      	cmp	r0, #0
   27eae:	d1ae      	bne.n	27e0e <mfu_interface_sendto+0x42>
   27eb0:	f04f 0c08 	mov.w	ip, #8
   27eb4:	492c      	ldr	r1, [pc, #176]	; (27f68 <mfu_interface_sendto+0x19c>)
   27eb6:	482f      	ldr	r0, [pc, #188]	; (27f74 <mfu_interface_sendto+0x1a8>)
   27eb8:	880b      	ldrh	r3, [r1, #0]
   27eba:	6804      	ldr	r4, [r0, #0]
   27ebc:	3301      	adds	r3, #1
   27ebe:	9800      	ldr	r0, [sp, #0]
   27ec0:	b29b      	uxth	r3, r3
   27ec2:	800b      	strh	r3, [r1, #0]
   27ec4:	041b      	lsls	r3, r3, #16
   27ec6:	f043 0303 	orr.w	r3, r3, #3
   27eca:	6104      	str	r4, [r0, #16]
   27ecc:	4c27      	ldr	r4, [pc, #156]	; (27f6c <mfu_interface_sendto+0x1a0>)
   27ece:	60c3      	str	r3, [r0, #12]
   27ed0:	7102      	strb	r2, [r0, #4]
   27ed2:	7142      	strb	r2, [r0, #5]
   27ed4:	7182      	strb	r2, [r0, #6]
   27ed6:	71c2      	strb	r2, [r0, #7]
   27ed8:	7242      	strb	r2, [r0, #9]
   27eda:	7282      	strb	r2, [r0, #10]
   27edc:	72c2      	strb	r2, [r0, #11]
   27ede:	f880 c008 	strb.w	ip, [r0, #8]
   27ee2:	2103      	movs	r1, #3
   27ee4:	6022      	str	r2, [r4, #0]
   27ee6:	f7fe fdb3 	bl	26a50 <rpc_dfu_client_request_send>
   27eea:	b9c0      	cbnz	r0, 27f1e <mfu_interface_sendto+0x152>
   27eec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   27ef0:	f10d 0908 	add.w	r9, sp, #8
   27ef4:	f849 3d04 	str.w	r3, [r9, #-4]!
   27ef8:	46b2      	mov	sl, r6
   27efa:	e005      	b.n	27f08 <mfu_interface_sendto+0x13c>
   27efc:	4649      	mov	r1, r9
   27efe:	4650      	mov	r0, sl
   27f00:	f7fa fd68 	bl	229d4 <bsd_os_timedwait>
   27f04:	2800      	cmp	r0, #0
   27f06:	d1c2      	bne.n	27e8e <mfu_interface_sendto+0xc2>
   27f08:	6820      	ldr	r0, [r4, #0]
   27f0a:	2800      	cmp	r0, #0
   27f0c:	d0f6      	beq.n	27efc <mfu_interface_sendto+0x130>
   27f0e:	6904      	ldr	r4, [r0, #16]
   27f10:	f7fe fdb2 	bl	26a78 <rpc_dfu_client_message_free>
   27f14:	2c00      	cmp	r4, #0
   27f16:	d1b2      	bne.n	27e7e <mfu_interface_sendto+0xb2>
   27f18:	2303      	movs	r3, #3
   27f1a:	6033      	str	r3, [r6, #0]
   27f1c:	e771      	b.n	27e02 <mfu_interface_sendto+0x36>
   27f1e:	9800      	ldr	r0, [sp, #0]
   27f20:	6803      	ldr	r3, [r0, #0]
   27f22:	b11b      	cbz	r3, 27f2c <mfu_interface_sendto+0x160>
   27f24:	4618      	mov	r0, r3
   27f26:	f7fe fdaf 	bl	26a88 <rpc_dfu_client_data_free>
   27f2a:	9800      	ldr	r0, [sp, #0]
   27f2c:	f7fe fda4 	bl	26a78 <rpc_dfu_client_message_free>
   27f30:	e76d      	b.n	27e0e <mfu_interface_sendto+0x42>
   27f32:	2016      	movs	r0, #22
   27f34:	f7fa fde2 	bl	22afc <bsd_os_errno_set>
   27f38:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   27f3c:	e76c      	b.n	27e18 <mfu_interface_sendto+0x4c>
   27f3e:	2038      	movs	r0, #56	; 0x38
   27f40:	f7fa fddc 	bl	22afc <bsd_os_errno_set>
   27f44:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   27f48:	e766      	b.n	27e18 <mfu_interface_sendto+0x4c>
   27f4a:	2001      	movs	r0, #1
   27f4c:	f7fa fdd6 	bl	22afc <bsd_os_errno_set>
   27f50:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   27f54:	e760      	b.n	27e18 <mfu_interface_sendto+0x4c>
   27f56:	202d      	movs	r0, #45	; 0x2d
   27f58:	f7fa fdd0 	bl	22afc <bsd_os_errno_set>
   27f5c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   27f60:	e75a      	b.n	27e18 <mfu_interface_sendto+0x4c>
   27f62:	bf00      	nop
   27f64:	20022968 	.word	0x20022968
   27f68:	20024010 	.word	0x20024010
   27f6c:	20022974 	.word	0x20022974
   27f70:	2002296c 	.word	0x2002296c
   27f74:	20022970 	.word	0x20022970

00027f78 <mfu_interface_setopt>:
   27f78:	b5f0      	push	{r4, r5, r6, r7, lr}
   27f7a:	4846      	ldr	r0, [pc, #280]	; (28094 <mfu_interface_setopt+0x11c>)
   27f7c:	b083      	sub	sp, #12
   27f7e:	6800      	ldr	r0, [r0, #0]
   27f80:	3802      	subs	r0, #2
   27f82:	2801      	cmp	r0, #1
   27f84:	d877      	bhi.n	28076 <mfu_interface_setopt+0xfe>
   27f86:	f240 2003 	movw	r0, #515	; 0x203
   27f8a:	4281      	cmp	r1, r0
   27f8c:	d16d      	bne.n	2806a <mfu_interface_setopt+0xf2>
   27f8e:	3a04      	subs	r2, #4
   27f90:	2a03      	cmp	r2, #3
   27f92:	d85c      	bhi.n	2804e <mfu_interface_setopt+0xd6>
   27f94:	e8df f002 	tbb	[pc, r2]
   27f98:	514e024b 	.word	0x514e024b
   27f9c:	2407      	movs	r4, #7
   27f9e:	4625      	mov	r5, r4
   27fa0:	2100      	movs	r1, #0
   27fa2:	4668      	mov	r0, sp
   27fa4:	f7fe fd40 	bl	26a28 <rpc_dfu_client_request_alloc>
   27fa8:	4603      	mov	r3, r0
   27faa:	2800      	cmp	r0, #0
   27fac:	d138      	bne.n	28020 <mfu_interface_setopt+0xa8>
   27fae:	2704      	movs	r7, #4
   27fb0:	4e39      	ldr	r6, [pc, #228]	; (28098 <mfu_interface_setopt+0x120>)
   27fb2:	9800      	ldr	r0, [sp, #0]
   27fb4:	8832      	ldrh	r2, [r6, #0]
   27fb6:	4629      	mov	r1, r5
   27fb8:	3201      	adds	r2, #1
   27fba:	b292      	uxth	r2, r2
   27fbc:	ea44 4502 	orr.w	r5, r4, r2, lsl #16
   27fc0:	4c36      	ldr	r4, [pc, #216]	; (2809c <mfu_interface_setopt+0x124>)
   27fc2:	60c5      	str	r5, [r0, #12]
   27fc4:	7103      	strb	r3, [r0, #4]
   27fc6:	7143      	strb	r3, [r0, #5]
   27fc8:	7183      	strb	r3, [r0, #6]
   27fca:	71c3      	strb	r3, [r0, #7]
   27fcc:	7243      	strb	r3, [r0, #9]
   27fce:	7283      	strb	r3, [r0, #10]
   27fd0:	72c3      	strb	r3, [r0, #11]
   27fd2:	7207      	strb	r7, [r0, #8]
   27fd4:	8032      	strh	r2, [r6, #0]
   27fd6:	6023      	str	r3, [r4, #0]
   27fd8:	f7fe fd3a 	bl	26a50 <rpc_dfu_client_request_send>
   27fdc:	b9b8      	cbnz	r0, 2800e <mfu_interface_setopt+0x96>
   27fde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   27fe2:	ad02      	add	r5, sp, #8
   27fe4:	4e2b      	ldr	r6, [pc, #172]	; (28094 <mfu_interface_setopt+0x11c>)
   27fe6:	f845 3d04 	str.w	r3, [r5, #-4]!
   27fea:	e005      	b.n	27ff8 <mfu_interface_setopt+0x80>
   27fec:	4629      	mov	r1, r5
   27fee:	4630      	mov	r0, r6
   27ff0:	f7fa fcf0 	bl	229d4 <bsd_os_timedwait>
   27ff4:	2800      	cmp	r0, #0
   27ff6:	d131      	bne.n	2805c <mfu_interface_setopt+0xe4>
   27ff8:	6820      	ldr	r0, [r4, #0]
   27ffa:	2800      	cmp	r0, #0
   27ffc:	d0f6      	beq.n	27fec <mfu_interface_setopt+0x74>
   27ffe:	6904      	ldr	r4, [r0, #16]
   28000:	f7fe fd3a 	bl	26a78 <rpc_dfu_client_message_free>
   28004:	2c00      	cmp	r4, #0
   28006:	d13c      	bne.n	28082 <mfu_interface_setopt+0x10a>
   28008:	4620      	mov	r0, r4
   2800a:	b003      	add	sp, #12
   2800c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2800e:	9800      	ldr	r0, [sp, #0]
   28010:	6803      	ldr	r3, [r0, #0]
   28012:	b11b      	cbz	r3, 2801c <mfu_interface_setopt+0xa4>
   28014:	4618      	mov	r0, r3
   28016:	f7fe fd37 	bl	26a88 <rpc_dfu_client_data_free>
   2801a:	9800      	ldr	r0, [sp, #0]
   2801c:	f7fe fd2c 	bl	26a78 <rpc_dfu_client_message_free>
   28020:	200c      	movs	r0, #12
   28022:	f7fa fd6b 	bl	22afc <bsd_os_errno_set>
   28026:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2802a:	b003      	add	sp, #12
   2802c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2802e:	2405      	movs	r4, #5
   28030:	4625      	mov	r5, r4
   28032:	e7b5      	b.n	27fa0 <mfu_interface_setopt+0x28>
   28034:	2408      	movs	r4, #8
   28036:	4625      	mov	r5, r4
   28038:	e7b2      	b.n	27fa0 <mfu_interface_setopt+0x28>
   2803a:	b1b3      	cbz	r3, 2806a <mfu_interface_setopt+0xf2>
   2803c:	9a08      	ldr	r2, [sp, #32]
   2803e:	2a04      	cmp	r2, #4
   28040:	d113      	bne.n	2806a <mfu_interface_setopt+0xf2>
   28042:	2000      	movs	r0, #0
   28044:	681a      	ldr	r2, [r3, #0]
   28046:	4b16      	ldr	r3, [pc, #88]	; (280a0 <mfu_interface_setopt+0x128>)
   28048:	601a      	str	r2, [r3, #0]
   2804a:	b003      	add	sp, #12
   2804c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2804e:	202a      	movs	r0, #42	; 0x2a
   28050:	f7fa fd54 	bl	22afc <bsd_os_errno_set>
   28054:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   28058:	b003      	add	sp, #12
   2805a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2805c:	203c      	movs	r0, #60	; 0x3c
   2805e:	f7fa fd4d 	bl	22afc <bsd_os_errno_set>
   28062:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   28066:	b003      	add	sp, #12
   28068:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2806a:	2016      	movs	r0, #22
   2806c:	f7fa fd46 	bl	22afc <bsd_os_errno_set>
   28070:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   28074:	e7c9      	b.n	2800a <mfu_interface_setopt+0x92>
   28076:	2001      	movs	r0, #1
   28078:	f7fa fd40 	bl	22afc <bsd_os_errno_set>
   2807c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   28080:	e7c3      	b.n	2800a <mfu_interface_setopt+0x92>
   28082:	4b08      	ldr	r3, [pc, #32]	; (280a4 <mfu_interface_setopt+0x12c>)
   28084:	2008      	movs	r0, #8
   28086:	601c      	str	r4, [r3, #0]
   28088:	f7fa fd38 	bl	22afc <bsd_os_errno_set>
   2808c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   28090:	e7bb      	b.n	2800a <mfu_interface_setopt+0x92>
   28092:	bf00      	nop
   28094:	20022968 	.word	0x20022968
   28098:	20024010 	.word	0x20024010
   2809c:	20022974 	.word	0x20022974
   280a0:	20022970 	.word	0x20022970
   280a4:	2002296c 	.word	0x2002296c

000280a8 <mfu_interface_getopt>:
   280a8:	f240 2003 	movw	r0, #515	; 0x203
   280ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   280b0:	4281      	cmp	r1, r0
   280b2:	b082      	sub	sp, #8
   280b4:	9e08      	ldr	r6, [sp, #32]
   280b6:	f040 80ae 	bne.w	28216 <mfu_interface_getopt+0x16e>
   280ba:	461d      	mov	r5, r3
   280bc:	2b00      	cmp	r3, #0
   280be:	f000 80aa 	beq.w	28216 <mfu_interface_getopt+0x16e>
   280c2:	2e00      	cmp	r6, #0
   280c4:	f000 80a7 	beq.w	28216 <mfu_interface_getopt+0x16e>
   280c8:	4b5e      	ldr	r3, [pc, #376]	; (28244 <mfu_interface_getopt+0x19c>)
   280ca:	681b      	ldr	r3, [r3, #0]
   280cc:	3b02      	subs	r3, #2
   280ce:	2b01      	cmp	r3, #1
   280d0:	f200 80a7 	bhi.w	28222 <mfu_interface_getopt+0x17a>
   280d4:	3a01      	subs	r2, #1
   280d6:	2a13      	cmp	r2, #19
   280d8:	d879      	bhi.n	281ce <mfu_interface_getopt+0x126>
   280da:	e8df f002 	tbb	[pc, r2]
   280de:	5f17      	.short	0x5f17
   280e0:	78787878 	.word	0x78787878
   280e4:	78787872 	.word	0x78787872
   280e8:	78787878 	.word	0x78787878
   280ec:	78787878 	.word	0x78787878
   280f0:	0a78      	.short	0x0a78
   280f2:	6833      	ldr	r3, [r6, #0]
   280f4:	2b04      	cmp	r3, #4
   280f6:	f040 808e 	bne.w	28216 <mfu_interface_getopt+0x16e>
   280fa:	2200      	movs	r2, #0
   280fc:	4610      	mov	r0, r2
   280fe:	4b52      	ldr	r3, [pc, #328]	; (28248 <mfu_interface_getopt+0x1a0>)
   28100:	6819      	ldr	r1, [r3, #0]
   28102:	601a      	str	r2, [r3, #0]
   28104:	6029      	str	r1, [r5, #0]
   28106:	b002      	add	sp, #8
   28108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2810c:	6833      	ldr	r3, [r6, #0]
   2810e:	2b24      	cmp	r3, #36	; 0x24
   28110:	f040 8081 	bne.w	28216 <mfu_interface_getopt+0x16e>
   28114:	2401      	movs	r4, #1
   28116:	46a0      	mov	r8, r4
   28118:	2100      	movs	r1, #0
   2811a:	4668      	mov	r0, sp
   2811c:	f7fe fc84 	bl	26a28 <rpc_dfu_client_request_alloc>
   28120:	2800      	cmp	r0, #0
   28122:	d146      	bne.n	281b2 <mfu_interface_getopt+0x10a>
   28124:	4949      	ldr	r1, [pc, #292]	; (2824c <mfu_interface_getopt+0x1a4>)
   28126:	9b00      	ldr	r3, [sp, #0]
   28128:	880a      	ldrh	r2, [r1, #0]
   2812a:	f1b8 0f03 	cmp.w	r8, #3
   2812e:	f102 0201 	add.w	r2, r2, #1
   28132:	b292      	uxth	r2, r2
   28134:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   28138:	7118      	strb	r0, [r3, #4]
   2813a:	800a      	strh	r2, [r1, #0]
   2813c:	60dc      	str	r4, [r3, #12]
   2813e:	7158      	strb	r0, [r3, #5]
   28140:	7198      	strb	r0, [r3, #6]
   28142:	71d8      	strb	r0, [r3, #7]
   28144:	d04b      	beq.n	281de <mfu_interface_getopt+0x136>
   28146:	2104      	movs	r1, #4
   28148:	2200      	movs	r2, #0
   2814a:	4f41      	ldr	r7, [pc, #260]	; (28250 <mfu_interface_getopt+0x1a8>)
   2814c:	6099      	str	r1, [r3, #8]
   2814e:	4618      	mov	r0, r3
   28150:	4641      	mov	r1, r8
   28152:	603a      	str	r2, [r7, #0]
   28154:	f7fe fc7c 	bl	26a50 <rpc_dfu_client_request_send>
   28158:	2800      	cmp	r0, #0
   2815a:	d14d      	bne.n	281f8 <mfu_interface_getopt+0x150>
   2815c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28160:	ac02      	add	r4, sp, #8
   28162:	f844 3d04 	str.w	r3, [r4, #-4]!
   28166:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 28244 <mfu_interface_getopt+0x19c>
   2816a:	e005      	b.n	28178 <mfu_interface_getopt+0xd0>
   2816c:	4621      	mov	r1, r4
   2816e:	4640      	mov	r0, r8
   28170:	f7fa fc30 	bl	229d4 <bsd_os_timedwait>
   28174:	2800      	cmp	r0, #0
   28176:	d137      	bne.n	281e8 <mfu_interface_getopt+0x140>
   28178:	6839      	ldr	r1, [r7, #0]
   2817a:	2900      	cmp	r1, #0
   2817c:	d0f6      	beq.n	2816c <mfu_interface_getopt+0xc4>
   2817e:	690c      	ldr	r4, [r1, #16]
   28180:	2c00      	cmp	r4, #0
   28182:	d154      	bne.n	2822e <mfu_interface_getopt+0x186>
   28184:	6832      	ldr	r2, [r6, #0]
   28186:	3114      	adds	r1, #20
   28188:	4628      	mov	r0, r5
   2818a:	f00d fcbd 	bl	35b08 <memcpy>
   2818e:	6838      	ldr	r0, [r7, #0]
   28190:	f7fe fc72 	bl	26a78 <rpc_dfu_client_message_free>
   28194:	4620      	mov	r0, r4
   28196:	b002      	add	sp, #8
   28198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2819c:	6833      	ldr	r3, [r6, #0]
   2819e:	2b04      	cmp	r3, #4
   281a0:	d139      	bne.n	28216 <mfu_interface_getopt+0x16e>
   281a2:	2402      	movs	r4, #2
   281a4:	2100      	movs	r1, #0
   281a6:	4668      	mov	r0, sp
   281a8:	46a0      	mov	r8, r4
   281aa:	f7fe fc3d 	bl	26a28 <rpc_dfu_client_request_alloc>
   281ae:	2800      	cmp	r0, #0
   281b0:	d0b8      	beq.n	28124 <mfu_interface_getopt+0x7c>
   281b2:	200c      	movs	r0, #12
   281b4:	f7fa fca2 	bl	22afc <bsd_os_errno_set>
   281b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   281bc:	b002      	add	sp, #8
   281be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   281c2:	6833      	ldr	r3, [r6, #0]
   281c4:	2b04      	cmp	r3, #4
   281c6:	d126      	bne.n	28216 <mfu_interface_getopt+0x16e>
   281c8:	2409      	movs	r4, #9
   281ca:	46a0      	mov	r8, r4
   281cc:	e7a4      	b.n	28118 <mfu_interface_getopt+0x70>
   281ce:	202a      	movs	r0, #42	; 0x2a
   281d0:	f7fa fc94 	bl	22afc <bsd_os_errno_set>
   281d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   281d8:	b002      	add	sp, #8
   281da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   281de:	4a1d      	ldr	r2, [pc, #116]	; (28254 <mfu_interface_getopt+0x1ac>)
   281e0:	2108      	movs	r1, #8
   281e2:	6812      	ldr	r2, [r2, #0]
   281e4:	611a      	str	r2, [r3, #16]
   281e6:	e7af      	b.n	28148 <mfu_interface_getopt+0xa0>
   281e8:	203c      	movs	r0, #60	; 0x3c
   281ea:	f7fa fc87 	bl	22afc <bsd_os_errno_set>
   281ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   281f2:	b002      	add	sp, #8
   281f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   281f8:	9800      	ldr	r0, [sp, #0]
   281fa:	6803      	ldr	r3, [r0, #0]
   281fc:	b11b      	cbz	r3, 28206 <mfu_interface_getopt+0x15e>
   281fe:	4618      	mov	r0, r3
   28200:	f7fe fc42 	bl	26a88 <rpc_dfu_client_data_free>
   28204:	9800      	ldr	r0, [sp, #0]
   28206:	f7fe fc37 	bl	26a78 <rpc_dfu_client_message_free>
   2820a:	200c      	movs	r0, #12
   2820c:	f7fa fc76 	bl	22afc <bsd_os_errno_set>
   28210:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   28214:	e7d2      	b.n	281bc <mfu_interface_getopt+0x114>
   28216:	2016      	movs	r0, #22
   28218:	f7fa fc70 	bl	22afc <bsd_os_errno_set>
   2821c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   28220:	e771      	b.n	28106 <mfu_interface_getopt+0x5e>
   28222:	2001      	movs	r0, #1
   28224:	f7fa fc6a 	bl	22afc <bsd_os_errno_set>
   28228:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2822c:	e76b      	b.n	28106 <mfu_interface_getopt+0x5e>
   2822e:	4b06      	ldr	r3, [pc, #24]	; (28248 <mfu_interface_getopt+0x1a0>)
   28230:	2008      	movs	r0, #8
   28232:	601c      	str	r4, [r3, #0]
   28234:	f7fa fc62 	bl	22afc <bsd_os_errno_set>
   28238:	6838      	ldr	r0, [r7, #0]
   2823a:	f7fe fc1d 	bl	26a78 <rpc_dfu_client_message_free>
   2823e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   28242:	e760      	b.n	28106 <mfu_interface_getopt+0x5e>
   28244:	20022968 	.word	0x20022968
   28248:	2002296c 	.word	0x2002296c
   2824c:	20024010 	.word	0x20024010
   28250:	20022974 	.word	0x20022974
   28254:	20022970 	.word	0x20022970

00028258 <bsd_platform_error_handler>:
   28258:	b508      	push	{r3, lr}
   2825a:	f7f6 f857 	bl	1e30c <bsd_recoverable_error_handler>
   2825e:	bd08      	pop	{r3, pc}

00028260 <bsd_init>:
   28260:	b510      	push	{r4, lr}
   28262:	4c06      	ldr	r4, [pc, #24]	; (2827c <bsd_init+0x1c>)
   28264:	7823      	ldrb	r3, [r4, #0]
   28266:	b92b      	cbnz	r3, 28274 <bsd_init+0x14>
   28268:	f000 f818 	bl	2829c <bsd_platform_init>
   2826c:	b908      	cbnz	r0, 28272 <bsd_init+0x12>
   2826e:	2301      	movs	r3, #1
   28270:	7023      	strb	r3, [r4, #0]
   28272:	bd10      	pop	{r4, pc}
   28274:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   28278:	bd10      	pop	{r4, pc}
   2827a:	bf00      	nop
   2827c:	20025b61 	.word	0x20025b61

00028280 <unimplemented_method>:
   28280:	b40f      	push	{r0, r1, r2, r3}
   28282:	b508      	push	{r3, lr}
   28284:	202d      	movs	r0, #45	; 0x2d
   28286:	f7fa fc39 	bl	22afc <bsd_os_errno_set>
   2828a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2828e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   28292:	b004      	add	sp, #16
   28294:	4770      	bx	lr
   28296:	bf00      	nop

00028298 <rpc_transport_ipc_fault_handler>:
   28298:	f7ff bfde 	b.w	28258 <bsd_platform_error_handler>

0002829c <bsd_platform_init>:
   2829c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2829e:	b093      	sub	sp, #76	; 0x4c
   282a0:	f7fe fe2a 	bl	26ef8 <nrf_mem_init>
   282a4:	2800      	cmp	r0, #0
   282a6:	d14c      	bne.n	28342 <bsd_platform_init+0xa6>
   282a8:	4928      	ldr	r1, [pc, #160]	; (2834c <bsd_platform_init+0xb0>)
   282aa:	a801      	add	r0, sp, #4
   282ac:	f7fe fe98 	bl	26fe0 <nrf_mem_register>
   282b0:	2800      	cmp	r0, #0
   282b2:	d146      	bne.n	28342 <bsd_platform_init+0xa6>
   282b4:	f7fa fdc0 	bl	22e38 <bsd_os_init>
   282b8:	f004 f9fa 	bl	2c6b0 <rpc_framework_init>
   282bc:	2800      	cmp	r0, #0
   282be:	d140      	bne.n	28342 <bsd_platform_init+0xa6>
   282c0:	2320      	movs	r3, #32
   282c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   282c6:	2208      	movs	r2, #8
   282c8:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
   282cc:	4f20      	ldr	r7, [pc, #128]	; (28350 <bsd_platform_init+0xb4>)
   282ce:	4e21      	ldr	r6, [pc, #132]	; (28354 <bsd_platform_init+0xb8>)
   282d0:	9303      	str	r3, [sp, #12]
   282d2:	9305      	str	r3, [sp, #20]
   282d4:	9307      	str	r3, [sp, #28]
   282d6:	4d20      	ldr	r5, [pc, #128]	; (28358 <bsd_platform_init+0xbc>)
   282d8:	9109      	str	r1, [sp, #36]	; 0x24
   282da:	910d      	str	r1, [sp, #52]	; 0x34
   282dc:	4c1f      	ldr	r4, [pc, #124]	; (2835c <bsd_platform_init+0xc0>)
   282de:	4920      	ldr	r1, [pc, #128]	; (28360 <bsd_platform_init+0xc4>)
   282e0:	4b20      	ldr	r3, [pc, #128]	; (28364 <bsd_platform_init+0xc8>)
   282e2:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
   282e6:	eb0d 0002 	add.w	r0, sp, r2
   282ea:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   282ee:	e9cd 220e 	strd	r2, r2, [sp, #56]	; 0x38
   282f2:	9702      	str	r7, [sp, #8]
   282f4:	9604      	str	r6, [sp, #16]
   282f6:	9506      	str	r5, [sp, #24]
   282f8:	9408      	str	r4, [sp, #32]
   282fa:	910a      	str	r1, [sp, #40]	; 0x28
   282fc:	930c      	str	r3, [sp, #48]	; 0x30
   282fe:	f000 fbe9 	bl	28ad4 <rpc_transport_ipc_init>
   28302:	b108      	cbz	r0, 28308 <bsd_platform_init+0x6c>
   28304:	b013      	add	sp, #76	; 0x4c
   28306:	bdf0      	pop	{r4, r5, r6, r7, pc}
   28308:	f003 ff6e 	bl	2c1e8 <interface_init>
   2830c:	b9c8      	cbnz	r0, 28342 <bsd_platform_init+0xa6>
   2830e:	f7fe fa3d 	bl	2678c <at_interface_init>
   28312:	b9b0      	cbnz	r0, 28342 <bsd_platform_init+0xa6>
   28314:	f002 fc22 	bl	2ab5c <ip_interface_init>
   28318:	b998      	cbnz	r0, 28342 <bsd_platform_init+0xa6>
   2831a:	f7ff f883 	bl	27424 <tls_interface_init>
   2831e:	b980      	cbnz	r0, 28342 <bsd_platform_init+0xa6>
   28320:	f7ff fcb6 	bl	27c90 <mfu_interface_init>
   28324:	b968      	cbnz	r0, 28342 <bsd_platform_init+0xa6>
   28326:	f001 f9e9 	bl	296fc <pdn_interface_init>
   2832a:	b950      	cbnz	r0, 28342 <bsd_platform_init+0xa6>
   2832c:	f005 fc94 	bl	2dc58 <gnss_interface_init>
   28330:	b938      	cbnz	r0, 28342 <bsd_platform_init+0xa6>
   28332:	f7fd fec3 	bl	260bc <logobj_interface_init>
   28336:	3000      	adds	r0, #0
   28338:	bf18      	it	ne
   2833a:	2001      	movne	r0, #1
   2833c:	4240      	negs	r0, r0
   2833e:	b013      	add	sp, #76	; 0x4c
   28340:	bdf0      	pop	{r4, r5, r6, r7, pc}
   28342:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   28346:	b013      	add	sp, #76	; 0x4c
   28348:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2834a:	bf00      	nop
   2834c:	00037368 	.word	0x00037368
   28350:	20010000 	.word	0x20010000
   28354:	20010040 	.word	0x20010040
   28358:	20010020 	.word	0x20010020
   2835c:	20017060 	.word	0x20017060
   28360:	20010060 	.word	0x20010060
   28364:	20013060 	.word	0x20013060

00028368 <bsd_platform_af_method_table_get>:
   28368:	2805      	cmp	r0, #5
   2836a:	d02a      	beq.n	283c2 <bsd_platform_af_method_table_get+0x5a>
   2836c:	b508      	push	{r3, lr}
   2836e:	d914      	bls.n	2839a <bsd_platform_af_method_table_get+0x32>
   28370:	280a      	cmp	r0, #10
   28372:	d016      	beq.n	283a2 <bsd_platform_af_method_table_get+0x3a>
   28374:	2866      	cmp	r0, #102	; 0x66
   28376:	d11f      	bne.n	283b8 <bsd_platform_af_method_table_get+0x50>
   28378:	f240 2302 	movw	r3, #514	; 0x202
   2837c:	429a      	cmp	r2, r3
   2837e:	d035      	beq.n	283ec <bsd_platform_af_method_table_get+0x84>
   28380:	f240 2305 	movw	r3, #517	; 0x205
   28384:	429a      	cmp	r2, r3
   28386:	d035      	beq.n	283f4 <bsd_platform_af_method_table_get+0x8c>
   28388:	f240 2301 	movw	r3, #513	; 0x201
   2838c:	429a      	cmp	r2, r3
   2838e:	d02f      	beq.n	283f0 <bsd_platform_af_method_table_get+0x88>
   28390:	202b      	movs	r0, #43	; 0x2b
   28392:	f7fa fbb3 	bl	22afc <bsd_os_errno_set>
   28396:	2000      	movs	r0, #0
   28398:	bd08      	pop	{r3, pc}
   2839a:	2801      	cmp	r0, #1
   2839c:	d016      	beq.n	283cc <bsd_platform_af_method_table_get+0x64>
   2839e:	2802      	cmp	r0, #2
   283a0:	d10a      	bne.n	283b8 <bsd_platform_af_method_table_get+0x50>
   283a2:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   283a6:	d21a      	bcs.n	283de <bsd_platform_af_method_table_get+0x76>
   283a8:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   283ac:	d21a      	bcs.n	283e4 <bsd_platform_af_method_table_get+0x7c>
   283ae:	3a01      	subs	r2, #1
   283b0:	2a01      	cmp	r2, #1
   283b2:	d8ed      	bhi.n	28390 <bsd_platform_af_method_table_get+0x28>
   283b4:	4810      	ldr	r0, [pc, #64]	; (283f8 <bsd_platform_af_method_table_get+0x90>)
   283b6:	bd08      	pop	{r3, pc}
   283b8:	2016      	movs	r0, #22
   283ba:	f7fa fb9f 	bl	22afc <bsd_os_errno_set>
   283be:	2000      	movs	r0, #0
   283c0:	bd08      	pop	{r3, pc}
   283c2:	2903      	cmp	r1, #3
   283c4:	480d      	ldr	r0, [pc, #52]	; (283fc <bsd_platform_af_method_table_get+0x94>)
   283c6:	bf18      	it	ne
   283c8:	2000      	movne	r0, #0
   283ca:	4770      	bx	lr
   283cc:	f240 2303 	movw	r3, #515	; 0x203
   283d0:	429a      	cmp	r2, r3
   283d2:	d009      	beq.n	283e8 <bsd_platform_af_method_table_get+0x80>
   283d4:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   283d8:	d1da      	bne.n	28390 <bsd_platform_af_method_table_get+0x28>
   283da:	4809      	ldr	r0, [pc, #36]	; (28400 <bsd_platform_af_method_table_get+0x98>)
   283dc:	bd08      	pop	{r3, pc}
   283de:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   283e2:	d1d5      	bne.n	28390 <bsd_platform_af_method_table_get+0x28>
   283e4:	4807      	ldr	r0, [pc, #28]	; (28404 <bsd_platform_af_method_table_get+0x9c>)
   283e6:	bd08      	pop	{r3, pc}
   283e8:	4807      	ldr	r0, [pc, #28]	; (28408 <bsd_platform_af_method_table_get+0xa0>)
   283ea:	bd08      	pop	{r3, pc}
   283ec:	4807      	ldr	r0, [pc, #28]	; (2840c <bsd_platform_af_method_table_get+0xa4>)
   283ee:	bd08      	pop	{r3, pc}
   283f0:	4807      	ldr	r0, [pc, #28]	; (28410 <bsd_platform_af_method_table_get+0xa8>)
   283f2:	bd08      	pop	{r3, pc}
   283f4:	4807      	ldr	r0, [pc, #28]	; (28414 <bsd_platform_af_method_table_get+0xac>)
   283f6:	bd08      	pop	{r3, pc}
   283f8:	00037238 	.word	0x00037238
   283fc:	00037328 	.word	0x00037328
   28400:	000372d8 	.word	0x000372d8
   28404:	00037260 	.word	0x00037260
   28408:	00037288 	.word	0x00037288
   2840c:	000372b0 	.word	0x000372b0
   28410:	00037210 	.word	0x00037210
   28414:	00037300 	.word	0x00037300

00028418 <bsd_platform_fd_method_table_get>:
   28418:	b538      	push	{r3, r4, r5, lr}
   2841a:	4605      	mov	r5, r0
   2841c:	f004 f816 	bl	2c44c <interface_socket_from_handle_get>
   28420:	4604      	mov	r4, r0
   28422:	b960      	cbnz	r0, 2843e <bsd_platform_fd_method_table_get+0x26>
   28424:	4b2c      	ldr	r3, [pc, #176]	; (284d8 <bsd_platform_fd_method_table_get+0xc0>)
   28426:	429d      	cmp	r5, r3
   28428:	d02f      	beq.n	2848a <bsd_platform_fd_method_table_get+0x72>
   2842a:	0c2b      	lsrs	r3, r5, #16
   2842c:	4a2b      	ldr	r2, [pc, #172]	; (284dc <bsd_platform_fd_method_table_get+0xc4>)
   2842e:	041b      	lsls	r3, r3, #16
   28430:	4293      	cmp	r3, r2
   28432:	d03d      	beq.n	284b0 <bsd_platform_fd_method_table_get+0x98>
   28434:	4b2a      	ldr	r3, [pc, #168]	; (284e0 <bsd_platform_fd_method_table_get+0xc8>)
   28436:	429d      	cmp	r5, r3
   28438:	d149      	bne.n	284ce <bsd_platform_fd_method_table_get+0xb6>
   2843a:	482a      	ldr	r0, [pc, #168]	; (284e4 <bsd_platform_fd_method_table_get+0xcc>)
   2843c:	bd38      	pop	{r3, r4, r5, pc}
   2843e:	68c3      	ldr	r3, [r0, #12]
   28440:	6942      	ldr	r2, [r0, #20]
   28442:	2b05      	cmp	r3, #5
   28444:	d036      	beq.n	284b4 <bsd_platform_fd_method_table_get+0x9c>
   28446:	d911      	bls.n	2846c <bsd_platform_fd_method_table_get+0x54>
   28448:	2b0a      	cmp	r3, #10
   2844a:	d013      	beq.n	28474 <bsd_platform_fd_method_table_get+0x5c>
   2844c:	2b66      	cmp	r3, #102	; 0x66
   2844e:	d11e      	bne.n	2848e <bsd_platform_fd_method_table_get+0x76>
   28450:	f240 2302 	movw	r3, #514	; 0x202
   28454:	429a      	cmp	r2, r3
   28456:	d02b      	beq.n	284b0 <bsd_platform_fd_method_table_get+0x98>
   28458:	f240 2305 	movw	r3, #517	; 0x205
   2845c:	429a      	cmp	r2, r3
   2845e:	d02f      	beq.n	284c0 <bsd_platform_fd_method_table_get+0xa8>
   28460:	f240 2301 	movw	r3, #513	; 0x201
   28464:	429a      	cmp	r2, r3
   28466:	d11e      	bne.n	284a6 <bsd_platform_fd_method_table_get+0x8e>
   28468:	481f      	ldr	r0, [pc, #124]	; (284e8 <bsd_platform_fd_method_table_get+0xd0>)
   2846a:	bd38      	pop	{r3, r4, r5, pc}
   2846c:	2b01      	cmp	r3, #1
   2846e:	d013      	beq.n	28498 <bsd_platform_fd_method_table_get+0x80>
   28470:	2b02      	cmp	r3, #2
   28472:	d10c      	bne.n	2848e <bsd_platform_fd_method_table_get+0x76>
   28474:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   28478:	d224      	bcs.n	284c4 <bsd_platform_fd_method_table_get+0xac>
   2847a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   2847e:	d224      	bcs.n	284ca <bsd_platform_fd_method_table_get+0xb2>
   28480:	3a01      	subs	r2, #1
   28482:	2a01      	cmp	r2, #1
   28484:	d80f      	bhi.n	284a6 <bsd_platform_fd_method_table_get+0x8e>
   28486:	4819      	ldr	r0, [pc, #100]	; (284ec <bsd_platform_fd_method_table_get+0xd4>)
   28488:	bd38      	pop	{r3, r4, r5, pc}
   2848a:	4819      	ldr	r0, [pc, #100]	; (284f0 <bsd_platform_fd_method_table_get+0xd8>)
   2848c:	bd38      	pop	{r3, r4, r5, pc}
   2848e:	2016      	movs	r0, #22
   28490:	f7fa fb34 	bl	22afc <bsd_os_errno_set>
   28494:	2000      	movs	r0, #0
   28496:	bd38      	pop	{r3, r4, r5, pc}
   28498:	f240 2303 	movw	r3, #515	; 0x203
   2849c:	429a      	cmp	r2, r3
   2849e:	d0f4      	beq.n	2848a <bsd_platform_fd_method_table_get+0x72>
   284a0:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   284a4:	d0c9      	beq.n	2843a <bsd_platform_fd_method_table_get+0x22>
   284a6:	202b      	movs	r0, #43	; 0x2b
   284a8:	f7fa fb28 	bl	22afc <bsd_os_errno_set>
   284ac:	2000      	movs	r0, #0
   284ae:	bd38      	pop	{r3, r4, r5, pc}
   284b0:	4810      	ldr	r0, [pc, #64]	; (284f4 <bsd_platform_fd_method_table_get+0xdc>)
   284b2:	bd38      	pop	{r3, r4, r5, pc}
   284b4:	6903      	ldr	r3, [r0, #16]
   284b6:	4810      	ldr	r0, [pc, #64]	; (284f8 <bsd_platform_fd_method_table_get+0xe0>)
   284b8:	2b03      	cmp	r3, #3
   284ba:	bf18      	it	ne
   284bc:	2000      	movne	r0, #0
   284be:	bd38      	pop	{r3, r4, r5, pc}
   284c0:	480e      	ldr	r0, [pc, #56]	; (284fc <bsd_platform_fd_method_table_get+0xe4>)
   284c2:	bd38      	pop	{r3, r4, r5, pc}
   284c4:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   284c8:	d1ed      	bne.n	284a6 <bsd_platform_fd_method_table_get+0x8e>
   284ca:	480d      	ldr	r0, [pc, #52]	; (28500 <bsd_platform_fd_method_table_get+0xe8>)
   284cc:	bd38      	pop	{r3, r4, r5, pc}
   284ce:	2009      	movs	r0, #9
   284d0:	f7fa fb14 	bl	22afc <bsd_os_errno_set>
   284d4:	4620      	mov	r0, r4
   284d6:	bd38      	pop	{r3, r4, r5, pc}
   284d8:	49765432 	.word	0x49765432
   284dc:	789a0000 	.word	0x789a0000
   284e0:	49765443 	.word	0x49765443
   284e4:	000372d8 	.word	0x000372d8
   284e8:	00037210 	.word	0x00037210
   284ec:	00037238 	.word	0x00037238
   284f0:	00037288 	.word	0x00037288
   284f4:	000372b0 	.word	0x000372b0
   284f8:	00037328 	.word	0x00037328
   284fc:	00037300 	.word	0x00037300
   28500:	00037260 	.word	0x00037260

00028504 <bsd_platform_getaddrinfo>:
   28504:	f003 bad6 	b.w	2bab4 <ip_interface_getaddrinfo>

00028508 <bsd_platform_freeaddrinfo>:
   28508:	f003 bbca 	b.w	2bca0 <ip_interface_freeaddrinfo>

0002850c <bsd_platform_poll>:
   2850c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28510:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
   28514:	b083      	sub	sp, #12
   28516:	9200      	str	r2, [sp, #0]
   28518:	2800      	cmp	r0, #0
   2851a:	d048      	beq.n	285ae <bsd_platform_poll+0xa2>
   2851c:	1e4b      	subs	r3, r1, #1
   2851e:	2b08      	cmp	r3, #8
   28520:	d845      	bhi.n	285ae <bsd_platform_poll+0xa2>
   28522:	4680      	mov	r8, r0
   28524:	4605      	mov	r5, r0
   28526:	2400      	movs	r4, #0
   28528:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
   2852c:	88ab      	ldrh	r3, [r5, #4]
   2852e:	6828      	ldr	r0, [r5, #0]
   28530:	f003 0303 	and.w	r3, r3, #3
   28534:	a901      	add	r1, sp, #4
   28536:	f043 061c 	orr.w	r6, r3, #28
   2853a:	f003 ff95 	bl	2c468 <interface_socket_event_get>
   2853e:	9b01      	ldr	r3, [sp, #4]
   28540:	3508      	adds	r5, #8
   28542:	4033      	ands	r3, r6
   28544:	f825 3c02 	strh.w	r3, [r5, #-2]
   28548:	b103      	cbz	r3, 2854c <bsd_platform_poll+0x40>
   2854a:	3401      	adds	r4, #1
   2854c:	42af      	cmp	r7, r5
   2854e:	d1ed      	bne.n	2852c <bsd_platform_poll+0x20>
   28550:	bb9c      	cbnz	r4, 285ba <bsd_platform_poll+0xae>
   28552:	4669      	mov	r1, sp
   28554:	4640      	mov	r0, r8
   28556:	f7fa fa3d 	bl	229d4 <bsd_os_timedwait>
   2855a:	4607      	mov	r7, r0
   2855c:	b108      	cbz	r0, 28562 <bsd_platform_poll+0x56>
   2855e:	283c      	cmp	r0, #60	; 0x3c
   28560:	d11d      	bne.n	2859e <bsd_platform_poll+0x92>
   28562:	46c1      	mov	r9, r8
   28564:	2600      	movs	r6, #0
   28566:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   2856a:	f8d9 0000 	ldr.w	r0, [r9]
   2856e:	f003 0303 	and.w	r3, r3, #3
   28572:	a901      	add	r1, sp, #4
   28574:	f043 041c 	orr.w	r4, r3, #28
   28578:	f003 ff76 	bl	2c468 <interface_socket_event_get>
   2857c:	9b01      	ldr	r3, [sp, #4]
   2857e:	f109 0908 	add.w	r9, r9, #8
   28582:	4023      	ands	r3, r4
   28584:	f829 3c02 	strh.w	r3, [r9, #-2]
   28588:	b103      	cbz	r3, 2858c <bsd_platform_poll+0x80>
   2858a:	3601      	adds	r6, #1
   2858c:	454d      	cmp	r5, r9
   2858e:	d1ea      	bne.n	28566 <bsd_platform_poll+0x5a>
   28590:	b90e      	cbnz	r6, 28596 <bsd_platform_poll+0x8a>
   28592:	2f00      	cmp	r7, #0
   28594:	d0dd      	beq.n	28552 <bsd_platform_poll+0x46>
   28596:	4630      	mov	r0, r6
   28598:	b003      	add	sp, #12
   2859a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2859e:	2023      	movs	r0, #35	; 0x23
   285a0:	f7fa faac 	bl	22afc <bsd_os_errno_set>
   285a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   285a8:	b003      	add	sp, #12
   285aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   285ae:	2016      	movs	r0, #22
   285b0:	f7fa faa4 	bl	22afc <bsd_os_errno_set>
   285b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   285b8:	e7ee      	b.n	28598 <bsd_platform_poll+0x8c>
   285ba:	4620      	mov	r0, r4
   285bc:	e7ec      	b.n	28598 <bsd_platform_poll+0x8c>
   285be:	bf00      	nop

000285c0 <bsd_platform_fcntl>:
   285c0:	b508      	push	{r3, lr}
   285c2:	4b06      	ldr	r3, [pc, #24]	; (285dc <bsd_platform_fcntl+0x1c>)
   285c4:	4298      	cmp	r0, r3
   285c6:	d003      	beq.n	285d0 <bsd_platform_fcntl+0x10>
   285c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   285cc:	f003 bfd6 	b.w	2c57c <interface_socket_fcntl>
   285d0:	202d      	movs	r0, #45	; 0x2d
   285d2:	f7fa fa93 	bl	22afc <bsd_os_errno_set>
   285d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   285da:	bd08      	pop	{r3, pc}
   285dc:	49765432 	.word	0x49765432

000285e0 <ipc_trace_init>:
   285e0:	4b01      	ldr	r3, [pc, #4]	; (285e8 <ipc_trace_init+0x8>)
   285e2:	6018      	str	r0, [r3, #0]
   285e4:	4770      	bx	lr
   285e6:	bf00      	nop
   285e8:	20022984 	.word	0x20022984

000285ec <bsd_os_trace_irq_handler>:
   285ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   285ee:	4b6c      	ldr	r3, [pc, #432]	; (287a0 <bsd_os_trace_irq_handler+0x1b4>)
   285f0:	b083      	sub	sp, #12
   285f2:	781b      	ldrb	r3, [r3, #0]
   285f4:	2b00      	cmp	r3, #0
   285f6:	f000 80ad 	beq.w	28754 <bsd_os_trace_irq_handler+0x168>
   285fa:	4b6a      	ldr	r3, [pc, #424]	; (287a4 <bsd_os_trace_irq_handler+0x1b8>)
   285fc:	681c      	ldr	r4, [r3, #0]
   285fe:	68a2      	ldr	r2, [r4, #8]
   28600:	6863      	ldr	r3, [r4, #4]
   28602:	429a      	cmp	r2, r3
   28604:	d02d      	beq.n	28662 <bsd_os_trace_irq_handler+0x76>
   28606:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   2860a:	f8ad 3000 	strh.w	r3, [sp]
   2860e:	7823      	ldrb	r3, [r4, #0]
   28610:	466e      	mov	r6, sp
   28612:	f88d 3004 	strb.w	r3, [sp, #4]
   28616:	6863      	ldr	r3, [r4, #4]
   28618:	2105      	movs	r1, #5
   2861a:	429a      	cmp	r2, r3
   2861c:	bf2a      	itet	cs
   2861e:	6927      	ldrcs	r7, [r4, #16]
   28620:	1a9f      	subcc	r7, r3, r2
   28622:	1abf      	subcs	r7, r7, r2
   28624:	429a      	cmp	r2, r3
   28626:	bf94      	ite	ls
   28628:	2500      	movls	r5, #0
   2862a:	68e5      	ldrhi	r5, [r4, #12]
   2862c:	b2bf      	uxth	r7, r7
   2862e:	bf88      	it	hi
   28630:	1b5b      	subhi	r3, r3, r5
   28632:	4630      	mov	r0, r6
   28634:	bf88      	it	hi
   28636:	b29d      	uxthhi	r5, r3
   28638:	f8ad 7002 	strh.w	r7, [sp, #2]
   2863c:	f00c fb19 	bl	34c72 <bsd_os_trace_put>
   28640:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   28644:	68a0      	ldr	r0, [r4, #8]
   28646:	f00c fb14 	bl	34c72 <bsd_os_trace_put>
   2864a:	68a3      	ldr	r3, [r4, #8]
   2864c:	6922      	ldr	r2, [r4, #16]
   2864e:	441f      	add	r7, r3
   28650:	4297      	cmp	r7, r2
   28652:	bf08      	it	eq
   28654:	68e3      	ldreq	r3, [r4, #12]
   28656:	60a7      	str	r7, [r4, #8]
   28658:	bf08      	it	eq
   2865a:	60a3      	streq	r3, [r4, #8]
   2865c:	2d00      	cmp	r5, #0
   2865e:	f040 808d 	bne.w	2877c <bsd_os_trace_irq_handler+0x190>
   28662:	4b51      	ldr	r3, [pc, #324]	; (287a8 <bsd_os_trace_irq_handler+0x1bc>)
   28664:	681c      	ldr	r4, [r3, #0]
   28666:	68a2      	ldr	r2, [r4, #8]
   28668:	6863      	ldr	r3, [r4, #4]
   2866a:	429a      	cmp	r2, r3
   2866c:	d02c      	beq.n	286c8 <bsd_os_trace_irq_handler+0xdc>
   2866e:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   28672:	f8ad 3000 	strh.w	r3, [sp]
   28676:	7823      	ldrb	r3, [r4, #0]
   28678:	466e      	mov	r6, sp
   2867a:	f88d 3004 	strb.w	r3, [sp, #4]
   2867e:	6863      	ldr	r3, [r4, #4]
   28680:	2105      	movs	r1, #5
   28682:	429a      	cmp	r2, r3
   28684:	bf2a      	itet	cs
   28686:	6927      	ldrcs	r7, [r4, #16]
   28688:	1a9f      	subcc	r7, r3, r2
   2868a:	1abf      	subcs	r7, r7, r2
   2868c:	429a      	cmp	r2, r3
   2868e:	bf94      	ite	ls
   28690:	2500      	movls	r5, #0
   28692:	68e5      	ldrhi	r5, [r4, #12]
   28694:	b2bf      	uxth	r7, r7
   28696:	bf88      	it	hi
   28698:	1b5b      	subhi	r3, r3, r5
   2869a:	4630      	mov	r0, r6
   2869c:	bf88      	it	hi
   2869e:	b29d      	uxthhi	r5, r3
   286a0:	f8ad 7002 	strh.w	r7, [sp, #2]
   286a4:	f00c fae5 	bl	34c72 <bsd_os_trace_put>
   286a8:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   286ac:	68a0      	ldr	r0, [r4, #8]
   286ae:	f00c fae0 	bl	34c72 <bsd_os_trace_put>
   286b2:	68a3      	ldr	r3, [r4, #8]
   286b4:	6922      	ldr	r2, [r4, #16]
   286b6:	441f      	add	r7, r3
   286b8:	4297      	cmp	r7, r2
   286ba:	bf08      	it	eq
   286bc:	68e3      	ldreq	r3, [r4, #12]
   286be:	60a7      	str	r7, [r4, #8]
   286c0:	bf08      	it	eq
   286c2:	60a3      	streq	r3, [r4, #8]
   286c4:	2d00      	cmp	r5, #0
   286c6:	d148      	bne.n	2875a <bsd_os_trace_irq_handler+0x16e>
   286c8:	4b38      	ldr	r3, [pc, #224]	; (287ac <bsd_os_trace_irq_handler+0x1c0>)
   286ca:	681c      	ldr	r4, [r3, #0]
   286cc:	68a2      	ldr	r2, [r4, #8]
   286ce:	6863      	ldr	r3, [r4, #4]
   286d0:	429a      	cmp	r2, r3
   286d2:	d02b      	beq.n	2872c <bsd_os_trace_irq_handler+0x140>
   286d4:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   286d8:	f8ad 3000 	strh.w	r3, [sp]
   286dc:	7823      	ldrb	r3, [r4, #0]
   286de:	466e      	mov	r6, sp
   286e0:	f88d 3004 	strb.w	r3, [sp, #4]
   286e4:	6863      	ldr	r3, [r4, #4]
   286e6:	2105      	movs	r1, #5
   286e8:	429a      	cmp	r2, r3
   286ea:	bf2a      	itet	cs
   286ec:	6927      	ldrcs	r7, [r4, #16]
   286ee:	1a9f      	subcc	r7, r3, r2
   286f0:	1abf      	subcs	r7, r7, r2
   286f2:	429a      	cmp	r2, r3
   286f4:	bf94      	ite	ls
   286f6:	2500      	movls	r5, #0
   286f8:	68e5      	ldrhi	r5, [r4, #12]
   286fa:	b2bf      	uxth	r7, r7
   286fc:	bf88      	it	hi
   286fe:	1b5b      	subhi	r3, r3, r5
   28700:	4630      	mov	r0, r6
   28702:	bf88      	it	hi
   28704:	b29d      	uxthhi	r5, r3
   28706:	f8ad 7002 	strh.w	r7, [sp, #2]
   2870a:	f00c fab2 	bl	34c72 <bsd_os_trace_put>
   2870e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   28712:	68a0      	ldr	r0, [r4, #8]
   28714:	f00c faad 	bl	34c72 <bsd_os_trace_put>
   28718:	68a3      	ldr	r3, [r4, #8]
   2871a:	6922      	ldr	r2, [r4, #16]
   2871c:	441f      	add	r7, r3
   2871e:	4297      	cmp	r7, r2
   28720:	bf08      	it	eq
   28722:	68e3      	ldreq	r3, [r4, #12]
   28724:	60a7      	str	r7, [r4, #8]
   28726:	bf08      	it	eq
   28728:	60a3      	streq	r3, [r4, #8]
   2872a:	b90d      	cbnz	r5, 28730 <bsd_os_trace_irq_handler+0x144>
   2872c:	b003      	add	sp, #12
   2872e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   28730:	4630      	mov	r0, r6
   28732:	2105      	movs	r1, #5
   28734:	f8ad 5002 	strh.w	r5, [sp, #2]
   28738:	f00c fa9b 	bl	34c72 <bsd_os_trace_put>
   2873c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   28740:	68e0      	ldr	r0, [r4, #12]
   28742:	f00c fa96 	bl	34c72 <bsd_os_trace_put>
   28746:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   2874a:	68e3      	ldr	r3, [r4, #12]
   2874c:	4413      	add	r3, r2
   2874e:	60a3      	str	r3, [r4, #8]
   28750:	b003      	add	sp, #12
   28752:	bdf0      	pop	{r4, r5, r6, r7, pc}
   28754:	f7fa fb68 	bl	22e28 <bsd_os_trace_irq_clear>
   28758:	e74f      	b.n	285fa <bsd_os_trace_irq_handler+0xe>
   2875a:	2105      	movs	r1, #5
   2875c:	4630      	mov	r0, r6
   2875e:	f8ad 5002 	strh.w	r5, [sp, #2]
   28762:	f00c fa86 	bl	34c72 <bsd_os_trace_put>
   28766:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   2876a:	68e0      	ldr	r0, [r4, #12]
   2876c:	f00c fa81 	bl	34c72 <bsd_os_trace_put>
   28770:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   28774:	68e3      	ldr	r3, [r4, #12]
   28776:	4413      	add	r3, r2
   28778:	60a3      	str	r3, [r4, #8]
   2877a:	e7a5      	b.n	286c8 <bsd_os_trace_irq_handler+0xdc>
   2877c:	2105      	movs	r1, #5
   2877e:	4630      	mov	r0, r6
   28780:	f8ad 5002 	strh.w	r5, [sp, #2]
   28784:	f00c fa75 	bl	34c72 <bsd_os_trace_put>
   28788:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   2878c:	68e0      	ldr	r0, [r4, #12]
   2878e:	f00c fa70 	bl	34c72 <bsd_os_trace_put>
   28792:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   28796:	68e3      	ldr	r3, [r4, #12]
   28798:	4413      	add	r3, r2
   2879a:	60a3      	str	r3, [r4, #8]
   2879c:	e761      	b.n	28662 <bsd_os_trace_irq_handler+0x76>
   2879e:	bf00      	nop
   287a0:	20025b62 	.word	0x20025b62
   287a4:	20022980 	.word	0x20022980
   287a8:	20022978 	.word	0x20022978
   287ac:	2002297c 	.word	0x2002297c

000287b0 <ipc_trace_handle>:
   287b0:	2200      	movs	r2, #0
   287b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   287b6:	4bb0      	ldr	r3, [pc, #704]	; (28a78 <ipc_trace_handle+0x2c8>)
   287b8:	b083      	sub	sp, #12
   287ba:	681b      	ldr	r3, [r3, #0]
   287bc:	6919      	ldr	r1, [r3, #16]
   287be:	695c      	ldr	r4, [r3, #20]
   287c0:	7c18      	ldrb	r0, [r3, #16]
   287c2:	741a      	strb	r2, [r3, #16]
   287c4:	7c58      	ldrb	r0, [r3, #17]
   287c6:	745a      	strb	r2, [r3, #17]
   287c8:	7c98      	ldrb	r0, [r3, #18]
   287ca:	749a      	strb	r2, [r3, #18]
   287cc:	7cd8      	ldrb	r0, [r3, #19]
   287ce:	74da      	strb	r2, [r3, #19]
   287d0:	7d18      	ldrb	r0, [r3, #20]
   287d2:	751a      	strb	r2, [r3, #20]
   287d4:	7d58      	ldrb	r0, [r3, #21]
   287d6:	755a      	strb	r2, [r3, #21]
   287d8:	7d98      	ldrb	r0, [r3, #22]
   287da:	759a      	strb	r2, [r3, #22]
   287dc:	7dd8      	ldrb	r0, [r3, #23]
   287de:	75da      	strb	r2, [r3, #23]
   287e0:	b1b9      	cbz	r1, 28812 <ipc_trace_handle+0x62>
   287e2:	3901      	subs	r1, #1
   287e4:	2903      	cmp	r1, #3
   287e6:	d814      	bhi.n	28812 <ipc_trace_handle+0x62>
   287e8:	e8df f011 	tbh	[pc, r1, lsl #1]
   287ec:	010300d6 	.word	0x010300d6
   287f0:	00160004 	.word	0x00160004
   287f4:	2501      	movs	r5, #1
   287f6:	2003      	movs	r0, #3
   287f8:	2200      	movs	r2, #0
   287fa:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   287fe:	4c9f      	ldr	r4, [pc, #636]	; (28a7c <ipc_trace_handle+0x2cc>)
   28800:	7025      	strb	r5, [r4, #0]
   28802:	7a1c      	ldrb	r4, [r3, #8]
   28804:	7218      	strb	r0, [r3, #8]
   28806:	7a58      	ldrb	r0, [r3, #9]
   28808:	725a      	strb	r2, [r3, #9]
   2880a:	7a98      	ldrb	r0, [r3, #10]
   2880c:	729a      	strb	r2, [r3, #10]
   2880e:	7ada      	ldrb	r2, [r3, #11]
   28810:	72d9      	strb	r1, [r3, #11]
   28812:	b003      	add	sp, #12
   28814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28818:	2104      	movs	r1, #4
   2881a:	2200      	movs	r2, #0
   2881c:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   28820:	7a1c      	ldrb	r4, [r3, #8]
   28822:	7219      	strb	r1, [r3, #8]
   28824:	7a59      	ldrb	r1, [r3, #9]
   28826:	725a      	strb	r2, [r3, #9]
   28828:	4994      	ldr	r1, [pc, #592]	; (28a7c <ipc_trace_handle+0x2cc>)
   2882a:	7a9c      	ldrb	r4, [r3, #10]
   2882c:	729a      	strb	r2, [r3, #10]
   2882e:	7adc      	ldrb	r4, [r3, #11]
   28830:	72d8      	strb	r0, [r3, #11]
   28832:	700a      	strb	r2, [r1, #0]
   28834:	780b      	ldrb	r3, [r1, #0]
   28836:	2b00      	cmp	r3, #0
   28838:	f000 8117 	beq.w	28a6a <ipc_trace_handle+0x2ba>
   2883c:	4b90      	ldr	r3, [pc, #576]	; (28a80 <ipc_trace_handle+0x2d0>)
   2883e:	681c      	ldr	r4, [r3, #0]
   28840:	68a2      	ldr	r2, [r4, #8]
   28842:	6863      	ldr	r3, [r4, #4]
   28844:	429a      	cmp	r2, r3
   28846:	d02d      	beq.n	288a4 <ipc_trace_handle+0xf4>
   28848:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   2884c:	f8ad 3000 	strh.w	r3, [sp]
   28850:	7823      	ldrb	r3, [r4, #0]
   28852:	466e      	mov	r6, sp
   28854:	f88d 3004 	strb.w	r3, [sp, #4]
   28858:	6863      	ldr	r3, [r4, #4]
   2885a:	2105      	movs	r1, #5
   2885c:	429a      	cmp	r2, r3
   2885e:	bf2a      	itet	cs
   28860:	6927      	ldrcs	r7, [r4, #16]
   28862:	1a9f      	subcc	r7, r3, r2
   28864:	1abf      	subcs	r7, r7, r2
   28866:	429a      	cmp	r2, r3
   28868:	bf94      	ite	ls
   2886a:	2500      	movls	r5, #0
   2886c:	68e5      	ldrhi	r5, [r4, #12]
   2886e:	b2bf      	uxth	r7, r7
   28870:	bf88      	it	hi
   28872:	1b5b      	subhi	r3, r3, r5
   28874:	4630      	mov	r0, r6
   28876:	bf88      	it	hi
   28878:	b29d      	uxthhi	r5, r3
   2887a:	f8ad 7002 	strh.w	r7, [sp, #2]
   2887e:	f00c f9f8 	bl	34c72 <bsd_os_trace_put>
   28882:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   28886:	68a0      	ldr	r0, [r4, #8]
   28888:	f00c f9f3 	bl	34c72 <bsd_os_trace_put>
   2888c:	68a3      	ldr	r3, [r4, #8]
   2888e:	6922      	ldr	r2, [r4, #16]
   28890:	441f      	add	r7, r3
   28892:	4297      	cmp	r7, r2
   28894:	bf08      	it	eq
   28896:	68e3      	ldreq	r3, [r4, #12]
   28898:	60a7      	str	r7, [r4, #8]
   2889a:	bf08      	it	eq
   2889c:	60a3      	streq	r3, [r4, #8]
   2889e:	2d00      	cmp	r5, #0
   288a0:	f040 80d2 	bne.w	28a48 <ipc_trace_handle+0x298>
   288a4:	4b77      	ldr	r3, [pc, #476]	; (28a84 <ipc_trace_handle+0x2d4>)
   288a6:	681c      	ldr	r4, [r3, #0]
   288a8:	68a2      	ldr	r2, [r4, #8]
   288aa:	6863      	ldr	r3, [r4, #4]
   288ac:	429a      	cmp	r2, r3
   288ae:	d02d      	beq.n	2890c <ipc_trace_handle+0x15c>
   288b0:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   288b4:	f8ad 3000 	strh.w	r3, [sp]
   288b8:	7823      	ldrb	r3, [r4, #0]
   288ba:	466e      	mov	r6, sp
   288bc:	f88d 3004 	strb.w	r3, [sp, #4]
   288c0:	6863      	ldr	r3, [r4, #4]
   288c2:	2105      	movs	r1, #5
   288c4:	429a      	cmp	r2, r3
   288c6:	bf2a      	itet	cs
   288c8:	6927      	ldrcs	r7, [r4, #16]
   288ca:	1a9f      	subcc	r7, r3, r2
   288cc:	1abf      	subcs	r7, r7, r2
   288ce:	429a      	cmp	r2, r3
   288d0:	bf94      	ite	ls
   288d2:	2500      	movls	r5, #0
   288d4:	68e5      	ldrhi	r5, [r4, #12]
   288d6:	b2bf      	uxth	r7, r7
   288d8:	bf88      	it	hi
   288da:	1b5b      	subhi	r3, r3, r5
   288dc:	4630      	mov	r0, r6
   288de:	bf88      	it	hi
   288e0:	b29d      	uxthhi	r5, r3
   288e2:	f8ad 7002 	strh.w	r7, [sp, #2]
   288e6:	f00c f9c4 	bl	34c72 <bsd_os_trace_put>
   288ea:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   288ee:	68a0      	ldr	r0, [r4, #8]
   288f0:	f00c f9bf 	bl	34c72 <bsd_os_trace_put>
   288f4:	68a3      	ldr	r3, [r4, #8]
   288f6:	6922      	ldr	r2, [r4, #16]
   288f8:	441f      	add	r7, r3
   288fa:	4297      	cmp	r7, r2
   288fc:	bf08      	it	eq
   288fe:	68e3      	ldreq	r3, [r4, #12]
   28900:	60a7      	str	r7, [r4, #8]
   28902:	bf08      	it	eq
   28904:	60a3      	streq	r3, [r4, #8]
   28906:	2d00      	cmp	r5, #0
   28908:	f040 808d 	bne.w	28a26 <ipc_trace_handle+0x276>
   2890c:	4b5e      	ldr	r3, [pc, #376]	; (28a88 <ipc_trace_handle+0x2d8>)
   2890e:	681c      	ldr	r4, [r3, #0]
   28910:	68a2      	ldr	r2, [r4, #8]
   28912:	6863      	ldr	r3, [r4, #4]
   28914:	429a      	cmp	r2, r3
   28916:	f43f af7c 	beq.w	28812 <ipc_trace_handle+0x62>
   2891a:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   2891e:	f8ad 3000 	strh.w	r3, [sp]
   28922:	7823      	ldrb	r3, [r4, #0]
   28924:	466e      	mov	r6, sp
   28926:	f88d 3004 	strb.w	r3, [sp, #4]
   2892a:	6863      	ldr	r3, [r4, #4]
   2892c:	2105      	movs	r1, #5
   2892e:	429a      	cmp	r2, r3
   28930:	bf2a      	itet	cs
   28932:	6927      	ldrcs	r7, [r4, #16]
   28934:	1a9f      	subcc	r7, r3, r2
   28936:	1abf      	subcs	r7, r7, r2
   28938:	429a      	cmp	r2, r3
   2893a:	bf94      	ite	ls
   2893c:	2500      	movls	r5, #0
   2893e:	68e5      	ldrhi	r5, [r4, #12]
   28940:	b2bf      	uxth	r7, r7
   28942:	bf88      	it	hi
   28944:	1b5b      	subhi	r3, r3, r5
   28946:	4630      	mov	r0, r6
   28948:	bf88      	it	hi
   2894a:	b29d      	uxthhi	r5, r3
   2894c:	f8ad 7002 	strh.w	r7, [sp, #2]
   28950:	f00c f98f 	bl	34c72 <bsd_os_trace_put>
   28954:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   28958:	68a0      	ldr	r0, [r4, #8]
   2895a:	f00c f98a 	bl	34c72 <bsd_os_trace_put>
   2895e:	68a3      	ldr	r3, [r4, #8]
   28960:	6922      	ldr	r2, [r4, #16]
   28962:	441f      	add	r7, r3
   28964:	4297      	cmp	r7, r2
   28966:	bf08      	it	eq
   28968:	68e3      	ldreq	r3, [r4, #12]
   2896a:	60a7      	str	r7, [r4, #8]
   2896c:	bf08      	it	eq
   2896e:	60a3      	streq	r3, [r4, #8]
   28970:	2d00      	cmp	r5, #0
   28972:	f43f af4e 	beq.w	28812 <ipc_trace_handle+0x62>
   28976:	2105      	movs	r1, #5
   28978:	4630      	mov	r0, r6
   2897a:	f8ad 5002 	strh.w	r5, [sp, #2]
   2897e:	f00c f978 	bl	34c72 <bsd_os_trace_put>
   28982:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   28986:	68e0      	ldr	r0, [r4, #12]
   28988:	f00c f973 	bl	34c72 <bsd_os_trace_put>
   2898c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   28990:	68e3      	ldr	r3, [r4, #12]
   28992:	4413      	add	r3, r2
   28994:	60a3      	str	r3, [r4, #8]
   28996:	e73c      	b.n	28812 <ipc_trace_handle+0x62>
   28998:	4a38      	ldr	r2, [pc, #224]	; (28a7c <ipc_trace_handle+0x2cc>)
   2899a:	7811      	ldrb	r1, [r2, #0]
   2899c:	b109      	cbz	r1, 289a2 <ipc_trace_handle+0x1f2>
   2899e:	2100      	movs	r1, #0
   289a0:	7011      	strb	r1, [r2, #0]
   289a2:	68a5      	ldr	r5, [r4, #8]
   289a4:	2d00      	cmp	r5, #0
   289a6:	d039      	beq.n	28a1c <ipc_trace_handle+0x26c>
   289a8:	f04f 0c00 	mov.w	ip, #0
   289ac:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 28a84 <ipc_trace_handle+0x2d4>
   289b0:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 28a80 <ipc_trace_handle+0x2d0>
   289b4:	4934      	ldr	r1, [pc, #208]	; (28a88 <ipc_trace_handle+0x2d8>)
   289b6:	46e1      	mov	r9, ip
   289b8:	4666      	mov	r6, ip
   289ba:	4662      	mov	r2, ip
   289bc:	f8d1 e000 	ldr.w	lr, [r1]
   289c0:	f8da 8000 	ldr.w	r8, [sl]
   289c4:	f8db 7000 	ldr.w	r7, [fp]
   289c8:	e008      	b.n	289dc <ipc_trace_handle+0x22c>
   289ca:	2963      	cmp	r1, #99	; 0x63
   289cc:	d016      	beq.n	289fc <ipc_trace_handle+0x24c>
   289ce:	2961      	cmp	r1, #97	; 0x61
   289d0:	bf04      	itt	eq
   289d2:	4607      	moveq	r7, r0
   289d4:	2601      	moveq	r6, #1
   289d6:	3201      	adds	r2, #1
   289d8:	42aa      	cmp	r2, r5
   289da:	d013      	beq.n	28a04 <ipc_trace_handle+0x254>
   289dc:	1c91      	adds	r1, r2, #2
   289de:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   289e2:	6848      	ldr	r0, [r1, #4]
   289e4:	7801      	ldrb	r1, [r0, #0]
   289e6:	2962      	cmp	r1, #98	; 0x62
   289e8:	d1ef      	bne.n	289ca <ipc_trace_handle+0x21a>
   289ea:	4680      	mov	r8, r0
   289ec:	f04f 0901 	mov.w	r9, #1
   289f0:	e7f1      	b.n	289d6 <ipc_trace_handle+0x226>
   289f2:	f7fa fa11 	bl	22e18 <bsd_os_trace_irq_set>
   289f6:	b003      	add	sp, #12
   289f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   289fc:	4686      	mov	lr, r0
   289fe:	f04f 0c01 	mov.w	ip, #1
   28a02:	e7e8      	b.n	289d6 <ipc_trace_handle+0x226>
   28a04:	bba6      	cbnz	r6, 28a70 <ipc_trace_handle+0x2c0>
   28a06:	f1b9 0f00 	cmp.w	r9, #0
   28a0a:	d001      	beq.n	28a10 <ipc_trace_handle+0x260>
   28a0c:	f8ca 8000 	str.w	r8, [sl]
   28a10:	f1bc 0f00 	cmp.w	ip, #0
   28a14:	d002      	beq.n	28a1c <ipc_trace_handle+0x26c>
   28a16:	4a1c      	ldr	r2, [pc, #112]	; (28a88 <ipc_trace_handle+0x2d8>)
   28a18:	f8c2 e000 	str.w	lr, [r2]
   28a1c:	2001      	movs	r0, #1
   28a1e:	2200      	movs	r2, #0
   28a20:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   28a24:	e6ed      	b.n	28802 <ipc_trace_handle+0x52>
   28a26:	2105      	movs	r1, #5
   28a28:	4630      	mov	r0, r6
   28a2a:	f8ad 5002 	strh.w	r5, [sp, #2]
   28a2e:	f00c f920 	bl	34c72 <bsd_os_trace_put>
   28a32:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   28a36:	68e0      	ldr	r0, [r4, #12]
   28a38:	f00c f91b 	bl	34c72 <bsd_os_trace_put>
   28a3c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   28a40:	68e3      	ldr	r3, [r4, #12]
   28a42:	4413      	add	r3, r2
   28a44:	60a3      	str	r3, [r4, #8]
   28a46:	e761      	b.n	2890c <ipc_trace_handle+0x15c>
   28a48:	2105      	movs	r1, #5
   28a4a:	4630      	mov	r0, r6
   28a4c:	f8ad 5002 	strh.w	r5, [sp, #2]
   28a50:	f00c f90f 	bl	34c72 <bsd_os_trace_put>
   28a54:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   28a58:	68e0      	ldr	r0, [r4, #12]
   28a5a:	f00c f90a 	bl	34c72 <bsd_os_trace_put>
   28a5e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   28a62:	68e3      	ldr	r3, [r4, #12]
   28a64:	4413      	add	r3, r2
   28a66:	60a3      	str	r3, [r4, #8]
   28a68:	e71c      	b.n	288a4 <ipc_trace_handle+0xf4>
   28a6a:	f7fa f9dd 	bl	22e28 <bsd_os_trace_irq_clear>
   28a6e:	e6e5      	b.n	2883c <ipc_trace_handle+0x8c>
   28a70:	f8cb 7000 	str.w	r7, [fp]
   28a74:	e7c7      	b.n	28a06 <ipc_trace_handle+0x256>
   28a76:	bf00      	nop
   28a78:	20022984 	.word	0x20022984
   28a7c:	20025b62 	.word	0x20025b62
   28a80:	20022980 	.word	0x20022980
   28a84:	20022978 	.word	0x20022978
   28a88:	2002297c 	.word	0x2002297c

00028a8c <rpc_trace_coredump_in_progress>:
   28a8c:	4b01      	ldr	r3, [pc, #4]	; (28a94 <rpc_trace_coredump_in_progress+0x8>)
   28a8e:	7818      	ldrb	r0, [r3, #0]
   28a90:	4770      	bx	lr
   28a92:	bf00      	nop
   28a94:	20025b62 	.word	0x20025b62

00028a98 <transport_reset>:
   28a98:	2000      	movs	r0, #0
   28a9a:	4770      	bx	lr

00028a9c <transport_data_free>:
   28a9c:	4b0b      	ldr	r3, [pc, #44]	; (28acc <transport_data_free+0x30>)
   28a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   28aa2:	4413      	add	r3, r2
   28aa4:	4298      	cmp	r0, r3
   28aa6:	d20d      	bcs.n	28ac4 <transport_data_free+0x28>
   28aa8:	4282      	cmp	r2, r0
   28aaa:	d80b      	bhi.n	28ac4 <transport_data_free+0x28>
   28aac:	b510      	push	{r4, lr}
   28aae:	4604      	mov	r4, r0
   28ab0:	f000 fd5a 	bl	29568 <rpc_transport_ipc_tx_rpc_ctrl_alloc>
   28ab4:	b140      	cbz	r0, 28ac8 <transport_data_free+0x2c>
   28ab6:	4a06      	ldr	r2, [pc, #24]	; (28ad0 <transport_data_free+0x34>)
   28ab8:	6084      	str	r4, [r0, #8]
   28aba:	6002      	str	r2, [r0, #0]
   28abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   28ac0:	f000 bc9a 	b.w	293f8 <rpc_transport_ipc_tx_send>
   28ac4:	f7fe bbc6 	b.w	27254 <nrf_shared_free>
   28ac8:	bd10      	pop	{r4, pc}
   28aca:	bf00      	nop
   28acc:	20022988 	.word	0x20022988
   28ad0:	00020001 	.word	0x00020001

00028ad4 <rpc_transport_ipc_init>:
   28ad4:	2800      	cmp	r0, #0
   28ad6:	d02b      	beq.n	28b30 <rpc_transport_ipc_init+0x5c>
   28ad8:	b530      	push	{r4, r5, lr}
   28ada:	b089      	sub	sp, #36	; 0x24
   28adc:	aa01      	add	r2, sp, #4
   28ade:	4669      	mov	r1, sp
   28ae0:	4604      	mov	r4, r0
   28ae2:	f000 fb9f 	bl	29224 <rpc_transport_ipc_tx_init>
   28ae6:	4603      	mov	r3, r0
   28ae8:	b140      	cbz	r0, 28afc <rpc_transport_ipc_init+0x28>
   28aea:	4a13      	ldr	r2, [pc, #76]	; (28b38 <rpc_transport_ipc_init+0x64>)
   28aec:	f104 0028 	add.w	r0, r4, #40	; 0x28
   28af0:	c803      	ldmia	r0, {r0, r1}
   28af2:	e882 0003 	stmia.w	r2, {r0, r1}
   28af6:	4618      	mov	r0, r3
   28af8:	b009      	add	sp, #36	; 0x24
   28afa:	bd30      	pop	{r4, r5, pc}
   28afc:	e9dd 1200 	ldrd	r1, r2, [sp]
   28b00:	4620      	mov	r0, r4
   28b02:	f000 f84b 	bl	28b9c <rpc_transport_ipc_rx_init>
   28b06:	4603      	mov	r3, r0
   28b08:	2800      	cmp	r0, #0
   28b0a:	d1ee      	bne.n	28aea <rpc_transport_ipc_init+0x16>
   28b0c:	4b0b      	ldr	r3, [pc, #44]	; (28b3c <rpc_transport_ipc_init+0x68>)
   28b0e:	490c      	ldr	r1, [pc, #48]	; (28b40 <rpc_transport_ipc_init+0x6c>)
   28b10:	480c      	ldr	r0, [pc, #48]	; (28b44 <rpc_transport_ipc_init+0x70>)
   28b12:	4a0d      	ldr	r2, [pc, #52]	; (28b48 <rpc_transport_ipc_init+0x74>)
   28b14:	9303      	str	r3, [sp, #12]
   28b16:	4d0d      	ldr	r5, [pc, #52]	; (28b4c <rpc_transport_ipc_init+0x78>)
   28b18:	4b0d      	ldr	r3, [pc, #52]	; (28b50 <rpc_transport_ipc_init+0x7c>)
   28b1a:	9104      	str	r1, [sp, #16]
   28b1c:	9005      	str	r0, [sp, #20]
   28b1e:	490d      	ldr	r1, [pc, #52]	; (28b54 <rpc_transport_ipc_init+0x80>)
   28b20:	a802      	add	r0, sp, #8
   28b22:	9307      	str	r3, [sp, #28]
   28b24:	9506      	str	r5, [sp, #24]
   28b26:	9202      	str	r2, [sp, #8]
   28b28:	f003 ff44 	bl	2c9b4 <rpc_transport_register>
   28b2c:	4603      	mov	r3, r0
   28b2e:	e7dc      	b.n	28aea <rpc_transport_ipc_init+0x16>
   28b30:	230e      	movs	r3, #14
   28b32:	4618      	mov	r0, r3
   28b34:	4770      	bx	lr
   28b36:	bf00      	nop
   28b38:	20022988 	.word	0x20022988
   28b3c:	000294f9 	.word	0x000294f9
   28b40:	000295c9 	.word	0x000295c9
   28b44:	000291b9 	.word	0x000291b9
   28b48:	000293f9 	.word	0x000293f9
   28b4c:	00028a9d 	.word	0x00028a9d
   28b50:	00028a99 	.word	0x00028a99
   28b54:	20022990 	.word	0x20022990

00028b58 <rpc_transport_rx_handle>:
   28b58:	b160      	cbz	r0, 28b74 <rpc_transport_rx_handle+0x1c>
   28b5a:	b508      	push	{r3, lr}
   28b5c:	6843      	ldr	r3, [r0, #4]
   28b5e:	b2db      	uxtb	r3, r3
   28b60:	2b02      	cmp	r3, #2
   28b62:	d00e      	beq.n	28b82 <rpc_transport_rx_handle+0x2a>
   28b64:	6803      	ldr	r3, [r0, #0]
   28b66:	0c1b      	lsrs	r3, r3, #16
   28b68:	2b02      	cmp	r3, #2
   28b6a:	d005      	beq.n	28b78 <rpc_transport_rx_handle+0x20>
   28b6c:	2b04      	cmp	r3, #4
   28b6e:	d00e      	beq.n	28b8e <rpc_transport_rx_handle+0x36>
   28b70:	2000      	movs	r0, #0
   28b72:	bd08      	pop	{r3, pc}
   28b74:	2000      	movs	r0, #0
   28b76:	4770      	bx	lr
   28b78:	6880      	ldr	r0, [r0, #8]
   28b7a:	f7fe fb6b 	bl	27254 <nrf_shared_free>
   28b7e:	2000      	movs	r0, #0
   28b80:	bd08      	pop	{r3, pc}
   28b82:	4601      	mov	r1, r0
   28b84:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   28b88:	4803      	ldr	r0, [pc, #12]	; (28b98 <rpc_transport_rx_handle+0x40>)
   28b8a:	f003 be05 	b.w	2c798 <rpc_transport_input>
   28b8e:	4802      	ldr	r0, [pc, #8]	; (28b98 <rpc_transport_rx_handle+0x40>)
   28b90:	f003 ff70 	bl	2ca74 <rpc_transport_unregister>
   28b94:	2000      	movs	r0, #0
   28b96:	bd08      	pop	{r3, pc}
   28b98:	20022990 	.word	0x20022990

00028b9c <rpc_transport_ipc_rx_init>:
   28b9c:	2800      	cmp	r0, #0
   28b9e:	f000 80ff 	beq.w	28da0 <rpc_transport_ipc_rx_init+0x204>
   28ba2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28ba6:	6805      	ldr	r5, [r0, #0]
   28ba8:	b095      	sub	sp, #84	; 0x54
   28baa:	2d00      	cmp	r5, #0
   28bac:	f000 80ee 	beq.w	28d8c <rpc_transport_ipc_rx_init+0x1f0>
   28bb0:	6883      	ldr	r3, [r0, #8]
   28bb2:	2b00      	cmp	r3, #0
   28bb4:	f000 80ea 	beq.w	28d8c <rpc_transport_ipc_rx_init+0x1f0>
   28bb8:	6907      	ldr	r7, [r0, #16]
   28bba:	2f00      	cmp	r7, #0
   28bbc:	f000 80e6 	beq.w	28d8c <rpc_transport_ipc_rx_init+0x1f0>
   28bc0:	6a84      	ldr	r4, [r0, #40]	; 0x28
   28bc2:	2c00      	cmp	r4, #0
   28bc4:	f000 80e2 	beq.w	28d8c <rpc_transport_ipc_rx_init+0x1f0>
   28bc8:	6844      	ldr	r4, [r0, #4]
   28bca:	2c1b      	cmp	r4, #27
   28bcc:	f240 80e3 	bls.w	28d96 <rpc_transport_ipc_rx_init+0x1fa>
   28bd0:	68c4      	ldr	r4, [r0, #12]
   28bd2:	2c0b      	cmp	r4, #11
   28bd4:	f240 80df 	bls.w	28d96 <rpc_transport_ipc_rx_init+0x1fa>
   28bd8:	f8d0 e014 	ldr.w	lr, [r0, #20]
   28bdc:	f1be 0f17 	cmp.w	lr, #23
   28be0:	f240 80d9 	bls.w	28d96 <rpc_transport_ipc_rx_init+0x1fa>
   28be4:	2600      	movs	r6, #0
   28be6:	4604      	mov	r4, r0
   28be8:	486f      	ldr	r0, [pc, #444]	; (28da8 <rpc_transport_ipc_rx_init+0x20c>)
   28bea:	e9cd 1200 	strd	r1, r2, [sp]
   28bee:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 28dc8 <rpc_transport_ipc_rx_init+0x22c>
   28bf2:	496e      	ldr	r1, [pc, #440]	; (28dac <rpc_transport_ipc_rx_init+0x210>)
   28bf4:	8006      	strh	r6, [r0, #0]
   28bf6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   28bf8:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 28dcc <rpc_transport_ipc_rx_init+0x230>
   28bfc:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 28dd0 <rpc_transport_ipc_rx_init+0x234>
   28c00:	f8df b1d0 	ldr.w	fp, [pc, #464]	; 28dd4 <rpc_transport_ipc_rx_init+0x238>
   28c04:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 28dd8 <rpc_transport_ipc_rx_init+0x23c>
   28c08:	4672      	mov	r2, lr
   28c0a:	600e      	str	r6, [r1, #0]
   28c0c:	f8ca 0000 	str.w	r0, [sl]
   28c10:	4631      	mov	r1, r6
   28c12:	4638      	mov	r0, r7
   28c14:	f8cc 6000 	str.w	r6, [ip]
   28c18:	f8cb 3000 	str.w	r3, [fp]
   28c1c:	f8c8 6000 	str.w	r6, [r8]
   28c20:	f8c9 6000 	str.w	r6, [r9]
   28c24:	f00c ff90 	bl	35b48 <memset>
   28c28:	69e3      	ldr	r3, [r4, #28]
   28c2a:	4638      	mov	r0, r7
   28c2c:	603b      	str	r3, [r7, #0]
   28c2e:	69a3      	ldr	r3, [r4, #24]
   28c30:	607b      	str	r3, [r7, #4]
   28c32:	f7ff fcd5 	bl	285e0 <ipc_trace_init>
   28c36:	2201      	movs	r2, #1
   28c38:	f04f 0c04 	mov.w	ip, #4
   28c3c:	4b5c      	ldr	r3, [pc, #368]	; (28db0 <rpc_transport_ipc_rx_init+0x214>)
   28c3e:	495d      	ldr	r1, [pc, #372]	; (28db4 <rpc_transport_ipc_rx_init+0x218>)
   28c40:	f8c3 5610 	str.w	r5, [r3, #1552]	; 0x610
   28c44:	6809      	ldr	r1, [r1, #0]
   28c46:	2080      	movs	r0, #128	; 0x80
   28c48:	9104      	str	r1, [sp, #16]
   28c4a:	495b      	ldr	r1, [pc, #364]	; (28db8 <rpc_transport_ipc_rx_init+0x21c>)
   28c4c:	f8dd e010 	ldr.w	lr, [sp, #16]
   28c50:	f8c3 6614 	str.w	r6, [r3, #1556]	; 0x614
   28c54:	6809      	ldr	r1, [r1, #0]
   28c56:	702e      	strb	r6, [r5, #0]
   28c58:	9103      	str	r1, [sp, #12]
   28c5a:	706e      	strb	r6, [r5, #1]
   28c5c:	70ee      	strb	r6, [r5, #3]
   28c5e:	70aa      	strb	r2, [r5, #2]
   28c60:	9903      	ldr	r1, [sp, #12]
   28c62:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   28c64:	f8db e000 	ldr.w	lr, [fp]
   28c68:	6069      	str	r1, [r5, #4]
   28c6a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   28c6c:	9c01      	ldr	r4, [sp, #4]
   28c6e:	60a9      	str	r1, [r5, #8]
   28c70:	60ec      	str	r4, [r5, #12]
   28c72:	9c00      	ldr	r4, [sp, #0]
   28c74:	4951      	ldr	r1, [pc, #324]	; (28dbc <rpc_transport_ipc_rx_init+0x220>)
   28c76:	61af      	str	r7, [r5, #24]
   28c78:	f8c5 e014 	str.w	lr, [r5, #20]
   28c7c:	612c      	str	r4, [r5, #16]
   28c7e:	f8c3 2590 	str.w	r2, [r3, #1424]	; 0x590
   28c82:	680c      	ldr	r4, [r1, #0]
   28c84:	f5a1 6192 	sub.w	r1, r1, #1168	; 0x490
   28c88:	9405      	str	r4, [sp, #20]
   28c8a:	9c05      	ldr	r4, [sp, #20]
   28c8c:	f8c3 c598 	str.w	ip, [r3, #1432]	; 0x598
   28c90:	f8d1 4498 	ldr.w	r4, [r1, #1176]	; 0x498
   28c94:	f44f 6780 	mov.w	r7, #1024	; 0x400
   28c98:	9406      	str	r4, [sp, #24]
   28c9a:	9c06      	ldr	r4, [sp, #24]
   28c9c:	2410      	movs	r4, #16
   28c9e:	f8c3 45a0 	str.w	r4, [r3, #1440]	; 0x5a0
   28ca2:	f8d1 44a0 	ldr.w	r4, [r1, #1184]	; 0x4a0
   28ca6:	4d46      	ldr	r5, [pc, #280]	; (28dc0 <rpc_transport_ipc_rx_init+0x224>)
   28ca8:	9407      	str	r4, [sp, #28]
   28caa:	9c07      	ldr	r4, [sp, #28]
   28cac:	2440      	movs	r4, #64	; 0x40
   28cae:	f8c3 45a8 	str.w	r4, [r3, #1448]	; 0x5a8
   28cb2:	f8d1 44a8 	ldr.w	r4, [r1, #1192]	; 0x4a8
   28cb6:	9408      	str	r4, [sp, #32]
   28cb8:	9c08      	ldr	r4, [sp, #32]
   28cba:	f8c3 05ac 	str.w	r0, [r3, #1452]	; 0x5ac
   28cbe:	f8d1 04ac 	ldr.w	r0, [r1, #1196]	; 0x4ac
   28cc2:	9009      	str	r0, [sp, #36]	; 0x24
   28cc4:	9809      	ldr	r0, [sp, #36]	; 0x24
   28cc6:	f8c3 6100 	str.w	r6, [r3, #256]	; 0x100
   28cca:	6808      	ldr	r0, [r1, #0]
   28ccc:	900a      	str	r0, [sp, #40]	; 0x28
   28cce:	980a      	ldr	r0, [sp, #40]	; 0x28
   28cd0:	f8c3 6108 	str.w	r6, [r3, #264]	; 0x108
   28cd4:	6888      	ldr	r0, [r1, #8]
   28cd6:	900b      	str	r0, [sp, #44]	; 0x2c
   28cd8:	980b      	ldr	r0, [sp, #44]	; 0x2c
   28cda:	f8c3 6110 	str.w	r6, [r3, #272]	; 0x110
   28cde:	6908      	ldr	r0, [r1, #16]
   28ce0:	900c      	str	r0, [sp, #48]	; 0x30
   28ce2:	980c      	ldr	r0, [sp, #48]	; 0x30
   28ce4:	f8c3 6118 	str.w	r6, [r3, #280]	; 0x118
   28ce8:	6988      	ldr	r0, [r1, #24]
   28cea:	900d      	str	r0, [sp, #52]	; 0x34
   28cec:	980d      	ldr	r0, [sp, #52]	; 0x34
   28cee:	f8c3 611c 	str.w	r6, [r3, #284]	; 0x11c
   28cf2:	69c8      	ldr	r0, [r1, #28]
   28cf4:	f501 7101 	add.w	r1, r1, #516	; 0x204
   28cf8:	900e      	str	r0, [sp, #56]	; 0x38
   28cfa:	980e      	ldr	r0, [sp, #56]	; 0x38
   28cfc:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
   28d00:	4310      	orrs	r0, r2
   28d02:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
   28d06:	680c      	ldr	r4, [r1, #0]
   28d08:	482e      	ldr	r0, [pc, #184]	; (28dc4 <rpc_transport_ipc_rx_init+0x228>)
   28d0a:	940f      	str	r4, [sp, #60]	; 0x3c
   28d0c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   28d0e:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   28d12:	ea44 040c 	orr.w	r4, r4, ip
   28d16:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   28d1a:	680c      	ldr	r4, [r1, #0]
   28d1c:	9410      	str	r4, [sp, #64]	; 0x40
   28d1e:	9c10      	ldr	r4, [sp, #64]	; 0x40
   28d20:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   28d24:	f044 0410 	orr.w	r4, r4, #16
   28d28:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   28d2c:	680c      	ldr	r4, [r1, #0]
   28d2e:	9411      	str	r4, [sp, #68]	; 0x44
   28d30:	9c11      	ldr	r4, [sp, #68]	; 0x44
   28d32:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   28d36:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   28d3a:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   28d3e:	680c      	ldr	r4, [r1, #0]
   28d40:	9412      	str	r4, [sp, #72]	; 0x48
   28d42:	9c12      	ldr	r4, [sp, #72]	; 0x48
   28d44:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   28d48:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   28d4c:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   28d50:	f8da 3000 	ldr.w	r3, [sl]
   28d54:	6809      	ldr	r1, [r1, #0]
   28d56:	015b      	lsls	r3, r3, #5
   28d58:	9113      	str	r1, [sp, #76]	; 0x4c
   28d5a:	b2db      	uxtb	r3, r3
   28d5c:	9913      	ldr	r1, [sp, #76]	; 0x4c
   28d5e:	f8c8 2000 	str.w	r2, [r8]
   28d62:	f880 332a 	strb.w	r3, [r0, #810]	; 0x32a
   28d66:	f8c0 7184 	str.w	r7, [r0, #388]	; 0x184
   28d6a:	6047      	str	r7, [r0, #4]
   28d6c:	9602      	str	r6, [sp, #8]
   28d6e:	f8c5 6610 	str.w	r6, [r5, #1552]	; 0x610
   28d72:	f8d5 3610 	ldr.w	r3, [r5, #1552]	; 0x610
   28d76:	9302      	str	r3, [sp, #8]
   28d78:	9b02      	ldr	r3, [sp, #8]
   28d7a:	f8d8 3000 	ldr.w	r3, [r8]
   28d7e:	2b01      	cmp	r3, #1
   28d80:	d0fb      	beq.n	28d7a <rpc_transport_ipc_rx_init+0x1de>
   28d82:	f8d9 0000 	ldr.w	r0, [r9]
   28d86:	b015      	add	sp, #84	; 0x54
   28d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28d8c:	f24c 000e 	movw	r0, #49166	; 0xc00e
   28d90:	b015      	add	sp, #84	; 0x54
   28d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28d96:	f24c 0009 	movw	r0, #49161	; 0xc009
   28d9a:	b015      	add	sp, #84	; 0x54
   28d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28da0:	f24c 000e 	movw	r0, #49166	; 0xc00e
   28da4:	4770      	bx	lr
   28da6:	bf00      	nop
   28da8:	20024012 	.word	0x20024012
   28dac:	200229a0 	.word	0x200229a0
   28db0:	4002a000 	.word	0x4002a000
   28db4:	4002a610 	.word	0x4002a610
   28db8:	4002a614 	.word	0x4002a614
   28dbc:	4002a590 	.word	0x4002a590
   28dc0:	40005000 	.word	0x40005000
   28dc4:	e000e100 	.word	0xe000e100
   28dc8:	20022998 	.word	0x20022998
   28dcc:	200229a4 	.word	0x200229a4
   28dd0:	2002299c 	.word	0x2002299c
   28dd4:	200229a8 	.word	0x200229a8
   28dd8:	20022994 	.word	0x20022994

00028ddc <IPC_IRQHandler>:
   28ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28de0:	f44f 6580 	mov.w	r5, #1024	; 0x400
   28de4:	4ca7      	ldr	r4, [pc, #668]	; (29084 <IPC_IRQHandler+0x2a8>)
   28de6:	b087      	sub	sp, #28
   28de8:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
   28dec:	f3bf 8f4f 	dsb	sy
   28df0:	f3bf 8f6f 	isb	sy
   28df4:	4ea4      	ldr	r6, [pc, #656]	; (29088 <IPC_IRQHandler+0x2ac>)
   28df6:	f8c4 5184 	str.w	r5, [r4, #388]	; 0x184
   28dfa:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   28dfe:	061f      	lsls	r7, r3, #24
   28e00:	f100 80c8 	bmi.w	28f94 <IPC_IRQHandler+0x1b8>
   28e04:	4ba0      	ldr	r3, [pc, #640]	; (29088 <IPC_IRQHandler+0x2ac>)
   28e06:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   28e0a:	07d0      	lsls	r0, r2, #31
   28e0c:	f100 80d4 	bmi.w	28fb8 <IPC_IRQHandler+0x1dc>
   28e10:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   28e14:	f012 0240 	ands.w	r2, r2, #64	; 0x40
   28e18:	f040 80b6 	bne.w	28f88 <IPC_IRQHandler+0x1ac>
   28e1c:	f8d3 130c 	ldr.w	r1, [r3, #780]	; 0x30c
   28e20:	0749      	lsls	r1, r1, #29
   28e22:	f100 80e6 	bmi.w	28ff2 <IPC_IRQHandler+0x216>
   28e26:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   28e2a:	06da      	lsls	r2, r3, #27
   28e2c:	f140 809d 	bpl.w	28f6a <IPC_IRQHandler+0x18e>
   28e30:	2100      	movs	r1, #0
   28e32:	4a95      	ldr	r2, [pc, #596]	; (29088 <IPC_IRQHandler+0x2ac>)
   28e34:	4b95      	ldr	r3, [pc, #596]	; (2908c <IPC_IRQHandler+0x2b0>)
   28e36:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
   28e3a:	681b      	ldr	r3, [r3, #0]
   28e3c:	9304      	str	r3, [sp, #16]
   28e3e:	9b04      	ldr	r3, [sp, #16]
   28e40:	f8df 8270 	ldr.w	r8, [pc, #624]	; 290b4 <IPC_IRQHandler+0x2d8>
   28e44:	4f92      	ldr	r7, [pc, #584]	; (29090 <IPC_IRQHandler+0x2b4>)
   28e46:	f8df 9270 	ldr.w	r9, [pc, #624]	; 290b8 <IPC_IRQHandler+0x2dc>
   28e4a:	f8d8 a000 	ldr.w	sl, [r8]
   28e4e:	f8da 1000 	ldr.w	r1, [sl]
   28e52:	2900      	cmp	r1, #0
   28e54:	d03f      	beq.n	28ed6 <IPC_IRQHandler+0xfa>
   28e56:	2200      	movs	r2, #0
   28e58:	4614      	mov	r4, r2
   28e5a:	e002      	b.n	28e62 <IPC_IRQHandler+0x86>
   28e5c:	3401      	adds	r4, #1
   28e5e:	428c      	cmp	r4, r1
   28e60:	d227      	bcs.n	28eb2 <IPC_IRQHandler+0xd6>
   28e62:	eb0a 05c4 	add.w	r5, sl, r4, lsl #3
   28e66:	68ab      	ldr	r3, [r5, #8]
   28e68:	2b00      	cmp	r3, #0
   28e6a:	d0f7      	beq.n	28e5c <IPC_IRQHandler+0x80>
   28e6c:	686e      	ldr	r6, [r5, #4]
   28e6e:	b2f6      	uxtb	r6, r6
   28e70:	2e01      	cmp	r6, #1
   28e72:	d1f3      	bne.n	28e5c <IPC_IRQHandler+0x80>
   28e74:	6868      	ldr	r0, [r5, #4]
   28e76:	f8b9 3000 	ldrh.w	r3, [r9]
   28e7a:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   28e7e:	d1ed      	bne.n	28e5c <IPC_IRQHandler+0x80>
   28e80:	686a      	ldr	r2, [r5, #4]
   28e82:	3301      	adds	r3, #1
   28e84:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   28e88:	f042 0202 	orr.w	r2, r2, #2
   28e8c:	606a      	str	r2, [r5, #4]
   28e8e:	68a8      	ldr	r0, [r5, #8]
   28e90:	f8a9 3000 	strh.w	r3, [r9]
   28e94:	f7ff fe60 	bl	28b58 <rpc_transport_rx_handle>
   28e98:	4632      	mov	r2, r6
   28e9a:	b928      	cbnz	r0, 28ea8 <IPC_IRQHandler+0xcc>
   28e9c:	686b      	ldr	r3, [r5, #4]
   28e9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   28ea2:	f043 0303 	orr.w	r3, r3, #3
   28ea6:	606b      	str	r3, [r5, #4]
   28ea8:	f8da 1000 	ldr.w	r1, [sl]
   28eac:	3401      	adds	r4, #1
   28eae:	428c      	cmp	r4, r1
   28eb0:	d3d7      	bcc.n	28e62 <IPC_IRQHandler+0x86>
   28eb2:	2a00      	cmp	r2, #0
   28eb4:	d1cd      	bne.n	28e52 <IPC_IRQHandler+0x76>
   28eb6:	b171      	cbz	r1, 28ed6 <IPC_IRQHandler+0xfa>
   28eb8:	4613      	mov	r3, r2
   28eba:	eb0a 02c3 	add.w	r2, sl, r3, lsl #3
   28ebe:	6890      	ldr	r0, [r2, #8]
   28ec0:	3301      	adds	r3, #1
   28ec2:	b130      	cbz	r0, 28ed2 <IPC_IRQHandler+0xf6>
   28ec4:	f8d2 b004 	ldr.w	fp, [r2, #4]
   28ec8:	fa5f fb8b 	uxtb.w	fp, fp
   28ecc:	f1bb 0f01 	cmp.w	fp, #1
   28ed0:	d003      	beq.n	28eda <IPC_IRQHandler+0xfe>
   28ed2:	428b      	cmp	r3, r1
   28ed4:	d1f1      	bne.n	28eba <IPC_IRQHandler+0xde>
   28ed6:	f04f 0b00 	mov.w	fp, #0
   28eda:	f8d7 a000 	ldr.w	sl, [r7]
   28ede:	f8da 2000 	ldr.w	r2, [sl]
   28ee2:	2a00      	cmp	r2, #0
   28ee4:	d03d      	beq.n	28f62 <IPC_IRQHandler+0x186>
   28ee6:	2100      	movs	r1, #0
   28ee8:	460c      	mov	r4, r1
   28eea:	e002      	b.n	28ef2 <IPC_IRQHandler+0x116>
   28eec:	3401      	adds	r4, #1
   28eee:	4294      	cmp	r4, r2
   28ef0:	d227      	bcs.n	28f42 <IPC_IRQHandler+0x166>
   28ef2:	eb0a 05c4 	add.w	r5, sl, r4, lsl #3
   28ef6:	68ab      	ldr	r3, [r5, #8]
   28ef8:	2b00      	cmp	r3, #0
   28efa:	d0f7      	beq.n	28eec <IPC_IRQHandler+0x110>
   28efc:	686e      	ldr	r6, [r5, #4]
   28efe:	b2f6      	uxtb	r6, r6
   28f00:	2e01      	cmp	r6, #1
   28f02:	d1f3      	bne.n	28eec <IPC_IRQHandler+0x110>
   28f04:	6868      	ldr	r0, [r5, #4]
   28f06:	f8b9 3000 	ldrh.w	r3, [r9]
   28f0a:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   28f0e:	d1ed      	bne.n	28eec <IPC_IRQHandler+0x110>
   28f10:	686a      	ldr	r2, [r5, #4]
   28f12:	3301      	adds	r3, #1
   28f14:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   28f18:	f042 0202 	orr.w	r2, r2, #2
   28f1c:	606a      	str	r2, [r5, #4]
   28f1e:	68a8      	ldr	r0, [r5, #8]
   28f20:	f8a9 3000 	strh.w	r3, [r9]
   28f24:	f7ff fe18 	bl	28b58 <rpc_transport_rx_handle>
   28f28:	4631      	mov	r1, r6
   28f2a:	b928      	cbnz	r0, 28f38 <IPC_IRQHandler+0x15c>
   28f2c:	686a      	ldr	r2, [r5, #4]
   28f2e:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
   28f32:	f043 0303 	orr.w	r3, r3, #3
   28f36:	606b      	str	r3, [r5, #4]
   28f38:	f8da 2000 	ldr.w	r2, [sl]
   28f3c:	3401      	adds	r4, #1
   28f3e:	4294      	cmp	r4, r2
   28f40:	d3d7      	bcc.n	28ef2 <IPC_IRQHandler+0x116>
   28f42:	2900      	cmp	r1, #0
   28f44:	d1cd      	bne.n	28ee2 <IPC_IRQHandler+0x106>
   28f46:	b162      	cbz	r2, 28f62 <IPC_IRQHandler+0x186>
   28f48:	460b      	mov	r3, r1
   28f4a:	eb0a 01c3 	add.w	r1, sl, r3, lsl #3
   28f4e:	6888      	ldr	r0, [r1, #8]
   28f50:	3301      	adds	r3, #1
   28f52:	b120      	cbz	r0, 28f5e <IPC_IRQHandler+0x182>
   28f54:	6849      	ldr	r1, [r1, #4]
   28f56:	b2c9      	uxtb	r1, r1
   28f58:	2901      	cmp	r1, #1
   28f5a:	f43f af76 	beq.w	28e4a <IPC_IRQHandler+0x6e>
   28f5e:	4293      	cmp	r3, r2
   28f60:	d1f3      	bne.n	28f4a <IPC_IRQHandler+0x16e>
   28f62:	f1bb 0f00 	cmp.w	fp, #0
   28f66:	f47f af70 	bne.w	28e4a <IPC_IRQHandler+0x6e>
   28f6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   28f6e:	4b49      	ldr	r3, [pc, #292]	; (29094 <IPC_IRQHandler+0x2b8>)
   28f70:	4a44      	ldr	r2, [pc, #272]	; (29084 <IPC_IRQHandler+0x2a8>)
   28f72:	681b      	ldr	r3, [r3, #0]
   28f74:	015b      	lsls	r3, r3, #5
   28f76:	b2db      	uxtb	r3, r3
   28f78:	f882 332a 	strb.w	r3, [r2, #810]	; 0x32a
   28f7c:	f8c2 1184 	str.w	r1, [r2, #388]	; 0x184
   28f80:	6051      	str	r1, [r2, #4]
   28f82:	b007      	add	sp, #28
   28f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28f88:	2206      	movs	r2, #6
   28f8a:	4b43      	ldr	r3, [pc, #268]	; (29098 <IPC_IRQHandler+0x2bc>)
   28f8c:	601a      	str	r2, [r3, #0]
   28f8e:	b007      	add	sp, #28
   28f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28f94:	f7ff fc0c 	bl	287b0 <ipc_trace_handle>
   28f98:	f7ff fd78 	bl	28a8c <rpc_trace_coredump_in_progress>
   28f9c:	2800      	cmp	r0, #0
   28f9e:	d149      	bne.n	29034 <IPC_IRQHandler+0x258>
   28fa0:	4b3e      	ldr	r3, [pc, #248]	; (2909c <IPC_IRQHandler+0x2c0>)
   28fa2:	f8c6 011c 	str.w	r0, [r6, #284]	; 0x11c
   28fa6:	681b      	ldr	r3, [r3, #0]
   28fa8:	9301      	str	r3, [sp, #4]
   28faa:	9b01      	ldr	r3, [sp, #4]
   28fac:	4b36      	ldr	r3, [pc, #216]	; (29088 <IPC_IRQHandler+0x2ac>)
   28fae:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   28fb2:	07d0      	lsls	r0, r2, #31
   28fb4:	f57f af2c 	bpl.w	28e10 <IPC_IRQHandler+0x34>
   28fb8:	2000      	movs	r0, #0
   28fba:	f248 0202 	movw	r2, #32770	; 0x8002
   28fbe:	4938      	ldr	r1, [pc, #224]	; (290a0 <IPC_IRQHandler+0x2c4>)
   28fc0:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   28fc4:	6809      	ldr	r1, [r1, #0]
   28fc6:	9102      	str	r1, [sp, #8]
   28fc8:	9902      	ldr	r1, [sp, #8]
   28fca:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
   28fce:	4293      	cmp	r3, r2
   28fd0:	d040      	beq.n	29054 <IPC_IRQHandler+0x278>
   28fd2:	d81e      	bhi.n	29012 <IPC_IRQHandler+0x236>
   28fd4:	2b00      	cmp	r3, #0
   28fd6:	d04f      	beq.n	29078 <IPC_IRQHandler+0x29c>
   28fd8:	2b02      	cmp	r3, #2
   28fda:	d942      	bls.n	29062 <IPC_IRQHandler+0x286>
   28fdc:	f248 0201 	movw	r2, #32769	; 0x8001
   28fe0:	4293      	cmp	r3, r2
   28fe2:	d149      	bne.n	29078 <IPC_IRQHandler+0x29c>
   28fe4:	2003      	movs	r0, #3
   28fe6:	2207      	movs	r2, #7
   28fe8:	492b      	ldr	r1, [pc, #172]	; (29098 <IPC_IRQHandler+0x2bc>)
   28fea:	4b2e      	ldr	r3, [pc, #184]	; (290a4 <IPC_IRQHandler+0x2c8>)
   28fec:	6008      	str	r0, [r1, #0]
   28fee:	601a      	str	r2, [r3, #0]
   28ff0:	e7cd      	b.n	28f8e <IPC_IRQHandler+0x1b2>
   28ff2:	4d29      	ldr	r5, [pc, #164]	; (29098 <IPC_IRQHandler+0x2bc>)
   28ff4:	6829      	ldr	r1, [r5, #0]
   28ff6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   28ffa:	2901      	cmp	r1, #1
   28ffc:	492a      	ldr	r1, [pc, #168]	; (290a8 <IPC_IRQHandler+0x2cc>)
   28ffe:	d05d      	beq.n	290bc <IPC_IRQHandler+0x2e0>
   29000:	680a      	ldr	r2, [r1, #0]
   29002:	9203      	str	r2, [sp, #12]
   29004:	9a03      	ldr	r2, [sp, #12]
   29006:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   2900a:	06db      	lsls	r3, r3, #27
   2900c:	f53f af10 	bmi.w	28e30 <IPC_IRQHandler+0x54>
   29010:	e716      	b.n	28e40 <IPC_IRQHandler+0x64>
   29012:	4a26      	ldr	r2, [pc, #152]	; (290ac <IPC_IRQHandler+0x2d0>)
   29014:	4293      	cmp	r3, r2
   29016:	d814      	bhi.n	29042 <IPC_IRQHandler+0x266>
   29018:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
   2901c:	d814      	bhi.n	29048 <IPC_IRQHandler+0x26c>
   2901e:	f248 0203 	movw	r2, #32771	; 0x8003
   29022:	4293      	cmp	r3, r2
   29024:	d128      	bne.n	29078 <IPC_IRQHandler+0x29c>
   29026:	2003      	movs	r0, #3
   29028:	2204      	movs	r2, #4
   2902a:	491b      	ldr	r1, [pc, #108]	; (29098 <IPC_IRQHandler+0x2bc>)
   2902c:	4b1d      	ldr	r3, [pc, #116]	; (290a4 <IPC_IRQHandler+0x2c8>)
   2902e:	6008      	str	r0, [r1, #0]
   29030:	601a      	str	r2, [r3, #0]
   29032:	e7ac      	b.n	28f8e <IPC_IRQHandler+0x1b2>
   29034:	23e0      	movs	r3, #224	; 0xe0
   29036:	f884 332a 	strb.w	r3, [r4, #810]	; 0x32a
   2903a:	6065      	str	r5, [r4, #4]
   2903c:	b007      	add	sp, #28
   2903e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29042:	4a1b      	ldr	r2, [pc, #108]	; (290b0 <IPC_IRQHandler+0x2d4>)
   29044:	4293      	cmp	r3, r2
   29046:	d117      	bne.n	29078 <IPC_IRQHandler+0x29c>
   29048:	2003      	movs	r0, #3
   2904a:	4913      	ldr	r1, [pc, #76]	; (29098 <IPC_IRQHandler+0x2bc>)
   2904c:	4a15      	ldr	r2, [pc, #84]	; (290a4 <IPC_IRQHandler+0x2c8>)
   2904e:	6008      	str	r0, [r1, #0]
   29050:	6013      	str	r3, [r2, #0]
   29052:	e79c      	b.n	28f8e <IPC_IRQHandler+0x1b2>
   29054:	2003      	movs	r0, #3
   29056:	2206      	movs	r2, #6
   29058:	490f      	ldr	r1, [pc, #60]	; (29098 <IPC_IRQHandler+0x2bc>)
   2905a:	4b12      	ldr	r3, [pc, #72]	; (290a4 <IPC_IRQHandler+0x2c8>)
   2905c:	6008      	str	r0, [r1, #0]
   2905e:	601a      	str	r2, [r3, #0]
   29060:	e795      	b.n	28f8e <IPC_IRQHandler+0x1b2>
   29062:	2303      	movs	r3, #3
   29064:	4618      	mov	r0, r3
   29066:	490c      	ldr	r1, [pc, #48]	; (29098 <IPC_IRQHandler+0x2bc>)
   29068:	4a0e      	ldr	r2, [pc, #56]	; (290a4 <IPC_IRQHandler+0x2c8>)
   2906a:	600b      	str	r3, [r1, #0]
   2906c:	6013      	str	r3, [r2, #0]
   2906e:	b007      	add	sp, #28
   29070:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29074:	f7ff b910 	b.w	28298 <rpc_transport_ipc_fault_handler>
   29078:	2303      	movs	r3, #3
   2907a:	4907      	ldr	r1, [pc, #28]	; (29098 <IPC_IRQHandler+0x2bc>)
   2907c:	4a09      	ldr	r2, [pc, #36]	; (290a4 <IPC_IRQHandler+0x2c8>)
   2907e:	600b      	str	r3, [r1, #0]
   29080:	6013      	str	r3, [r2, #0]
   29082:	e784      	b.n	28f8e <IPC_IRQHandler+0x1b2>
   29084:	e000e100 	.word	0xe000e100
   29088:	4002a000 	.word	0x4002a000
   2908c:	4002a110 	.word	0x4002a110
   29090:	200229a0 	.word	0x200229a0
   29094:	20022998 	.word	0x20022998
   29098:	2002299c 	.word	0x2002299c
   2909c:	4002a11c 	.word	0x4002a11c
   290a0:	4002a100 	.word	0x4002a100
   290a4:	20022994 	.word	0x20022994
   290a8:	4002a108 	.word	0x4002a108
   290ac:	04400004 	.word	0x04400004
   290b0:	05500001 	.word	0x05500001
   290b4:	200229a4 	.word	0x200229a4
   290b8:	20024012 	.word	0x20024012
   290bc:	4a37      	ldr	r2, [pc, #220]	; (2919c <IPC_IRQHandler+0x3c0>)
   290be:	680b      	ldr	r3, [r1, #0]
   290c0:	6812      	ldr	r2, [r2, #0]
   290c2:	9305      	str	r3, [sp, #20]
   290c4:	6893      	ldr	r3, [r2, #8]
   290c6:	4836      	ldr	r0, [pc, #216]	; (291a0 <IPC_IRQHandler+0x3c4>)
   290c8:	4936      	ldr	r1, [pc, #216]	; (291a4 <IPC_IRQHandler+0x3c8>)
   290ca:	6003      	str	r3, [r0, #0]
   290cc:	6854      	ldr	r4, [r2, #4]
   290ce:	9a05      	ldr	r2, [sp, #20]
   290d0:	600c      	str	r4, [r1, #0]
   290d2:	b16b      	cbz	r3, 290f0 <IPC_IRQHandler+0x314>
   290d4:	b164      	cbz	r4, 290f0 <IPC_IRQHandler+0x314>
   290d6:	681b      	ldr	r3, [r3, #0]
   290d8:	2b10      	cmp	r3, #16
   290da:	d802      	bhi.n	290e2 <IPC_IRQHandler+0x306>
   290dc:	6822      	ldr	r2, [r4, #0]
   290de:	2a10      	cmp	r2, #16
   290e0:	d90c      	bls.n	290fc <IPC_IRQHandler+0x320>
   290e2:	2103      	movs	r1, #3
   290e4:	f24c 0206 	movw	r2, #49158	; 0xc006
   290e8:	4b2f      	ldr	r3, [pc, #188]	; (291a8 <IPC_IRQHandler+0x3cc>)
   290ea:	6029      	str	r1, [r5, #0]
   290ec:	601a      	str	r2, [r3, #0]
   290ee:	e74e      	b.n	28f8e <IPC_IRQHandler+0x1b2>
   290f0:	2103      	movs	r1, #3
   290f2:	2210      	movs	r2, #16
   290f4:	4b2c      	ldr	r3, [pc, #176]	; (291a8 <IPC_IRQHandler+0x3cc>)
   290f6:	6029      	str	r1, [r5, #0]
   290f8:	601a      	str	r2, [r3, #0]
   290fa:	e748      	b.n	28f8e <IPC_IRQHandler+0x1b2>
   290fc:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 291b4 <IPC_IRQHandler+0x3d8>
   29100:	2a00      	cmp	r2, #0
   29102:	d042      	beq.n	2918a <IPC_IRQHandler+0x3ae>
   29104:	2300      	movs	r3, #0
   29106:	f104 0904 	add.w	r9, r4, #4
   2910a:	461e      	mov	r6, r3
   2910c:	e002      	b.n	29114 <IPC_IRQHandler+0x338>
   2910e:	3601      	adds	r6, #1
   29110:	4296      	cmp	r6, r2
   29112:	d22a      	bcs.n	2916a <IPC_IRQHandler+0x38e>
   29114:	00f7      	lsls	r7, r6, #3
   29116:	19e1      	adds	r1, r4, r7
   29118:	6888      	ldr	r0, [r1, #8]
   2911a:	2800      	cmp	r0, #0
   2911c:	d0f7      	beq.n	2910e <IPC_IRQHandler+0x332>
   2911e:	f8d1 a004 	ldr.w	sl, [r1, #4]
   29122:	fa5f fa8a 	uxtb.w	sl, sl
   29126:	f1ba 0f01 	cmp.w	sl, #1
   2912a:	d1f0      	bne.n	2910e <IPC_IRQHandler+0x332>
   2912c:	f8d1 c004 	ldr.w	ip, [r1, #4]
   29130:	f8b8 0000 	ldrh.w	r0, [r8]
   29134:	ebb0 4f1c 	cmp.w	r0, ip, lsr #16
   29138:	d1e9      	bne.n	2910e <IPC_IRQHandler+0x332>
   2913a:	684b      	ldr	r3, [r1, #4]
   2913c:	1c42      	adds	r2, r0, #1
   2913e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   29142:	f043 0302 	orr.w	r3, r3, #2
   29146:	604b      	str	r3, [r1, #4]
   29148:	6888      	ldr	r0, [r1, #8]
   2914a:	f8a8 2000 	strh.w	r2, [r8]
   2914e:	f7ff fd03 	bl	28b58 <rpc_transport_rx_handle>
   29152:	4653      	mov	r3, sl
   29154:	b938      	cbnz	r0, 29166 <IPC_IRQHandler+0x38a>
   29156:	f859 2007 	ldr.w	r2, [r9, r7]
   2915a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   2915e:	f042 0203 	orr.w	r2, r2, #3
   29162:	f849 2007 	str.w	r2, [r9, r7]
   29166:	6822      	ldr	r2, [r4, #0]
   29168:	e7d1      	b.n	2910e <IPC_IRQHandler+0x332>
   2916a:	2b00      	cmp	r3, #0
   2916c:	d1c8      	bne.n	29100 <IPC_IRQHandler+0x324>
   2916e:	b912      	cbnz	r2, 29176 <IPC_IRQHandler+0x39a>
   29170:	e00b      	b.n	2918a <IPC_IRQHandler+0x3ae>
   29172:	4293      	cmp	r3, r2
   29174:	d009      	beq.n	2918a <IPC_IRQHandler+0x3ae>
   29176:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
   2917a:	6888      	ldr	r0, [r1, #8]
   2917c:	3301      	adds	r3, #1
   2917e:	2800      	cmp	r0, #0
   29180:	d0f7      	beq.n	29172 <IPC_IRQHandler+0x396>
   29182:	6849      	ldr	r1, [r1, #4]
   29184:	b2c9      	uxtb	r1, r1
   29186:	2901      	cmp	r1, #1
   29188:	d1f3      	bne.n	29172 <IPC_IRQHandler+0x396>
   2918a:	2002      	movs	r0, #2
   2918c:	4b07      	ldr	r3, [pc, #28]	; (291ac <IPC_IRQHandler+0x3d0>)
   2918e:	f44f 6180 	mov.w	r1, #1024	; 0x400
   29192:	4a07      	ldr	r2, [pc, #28]	; (291b0 <IPC_IRQHandler+0x3d4>)
   29194:	681b      	ldr	r3, [r3, #0]
   29196:	6028      	str	r0, [r5, #0]
   29198:	e6ec      	b.n	28f74 <IPC_IRQHandler+0x198>
   2919a:	bf00      	nop
   2919c:	200229a8 	.word	0x200229a8
   291a0:	200229a4 	.word	0x200229a4
   291a4:	200229a0 	.word	0x200229a0
   291a8:	20022994 	.word	0x20022994
   291ac:	20022998 	.word	0x20022998
   291b0:	e000e100 	.word	0xe000e100
   291b4:	20024012 	.word	0x20024012

000291b8 <rpc_transport_msg_free>:
   291b8:	b430      	push	{r4, r5}
   291ba:	4b18      	ldr	r3, [pc, #96]	; (2921c <rpc_transport_msg_free+0x64>)
   291bc:	681c      	ldr	r4, [r3, #0]
   291be:	6825      	ldr	r5, [r4, #0]
   291c0:	b16d      	cbz	r5, 291de <rpc_transport_msg_free+0x26>
   291c2:	68a3      	ldr	r3, [r4, #8]
   291c4:	4283      	cmp	r3, r0
   291c6:	d027      	beq.n	29218 <rpc_transport_msg_free+0x60>
   291c8:	2300      	movs	r3, #0
   291ca:	e002      	b.n	291d2 <rpc_transport_msg_free+0x1a>
   291cc:	6889      	ldr	r1, [r1, #8]
   291ce:	4281      	cmp	r1, r0
   291d0:	d019      	beq.n	29206 <rpc_transport_msg_free+0x4e>
   291d2:	3301      	adds	r3, #1
   291d4:	00da      	lsls	r2, r3, #3
   291d6:	42ab      	cmp	r3, r5
   291d8:	eb04 0102 	add.w	r1, r4, r2
   291dc:	d1f6      	bne.n	291cc <rpc_transport_msg_free+0x14>
   291de:	4b10      	ldr	r3, [pc, #64]	; (29220 <rpc_transport_msg_free+0x68>)
   291e0:	681c      	ldr	r4, [r3, #0]
   291e2:	6825      	ldr	r5, [r4, #0]
   291e4:	b16d      	cbz	r5, 29202 <rpc_transport_msg_free+0x4a>
   291e6:	68a3      	ldr	r3, [r4, #8]
   291e8:	4283      	cmp	r3, r0
   291ea:	d015      	beq.n	29218 <rpc_transport_msg_free+0x60>
   291ec:	2300      	movs	r3, #0
   291ee:	e002      	b.n	291f6 <rpc_transport_msg_free+0x3e>
   291f0:	6889      	ldr	r1, [r1, #8]
   291f2:	4281      	cmp	r1, r0
   291f4:	d007      	beq.n	29206 <rpc_transport_msg_free+0x4e>
   291f6:	3301      	adds	r3, #1
   291f8:	00da      	lsls	r2, r3, #3
   291fa:	429d      	cmp	r5, r3
   291fc:	eb04 0102 	add.w	r1, r4, r2
   29200:	d1f6      	bne.n	291f0 <rpc_transport_msg_free+0x38>
   29202:	bc30      	pop	{r4, r5}
   29204:	4770      	bx	lr
   29206:	3204      	adds	r2, #4
   29208:	58a3      	ldr	r3, [r4, r2]
   2920a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   2920e:	f043 0303 	orr.w	r3, r3, #3
   29212:	50a3      	str	r3, [r4, r2]
   29214:	bc30      	pop	{r4, r5}
   29216:	4770      	bx	lr
   29218:	2204      	movs	r2, #4
   2921a:	e7f5      	b.n	29208 <rpc_transport_msg_free+0x50>
   2921c:	200229a4 	.word	0x200229a4
   29220:	200229a0 	.word	0x200229a0

00029224 <rpc_transport_ipc_tx_init>:
   29224:	2800      	cmp	r0, #0
   29226:	f000 80b8 	beq.w	2939a <rpc_transport_ipc_tx_init+0x176>
   2922a:	2900      	cmp	r1, #0
   2922c:	f000 80b5 	beq.w	2939a <rpc_transport_ipc_tx_init+0x176>
   29230:	2a00      	cmp	r2, #0
   29232:	f000 80b2 	beq.w	2939a <rpc_transport_ipc_tx_init+0x176>
   29236:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2923a:	6a04      	ldr	r4, [r0, #32]
   2923c:	b085      	sub	sp, #20
   2923e:	2c00      	cmp	r4, #0
   29240:	f000 80a6 	beq.w	29390 <rpc_transport_ipc_tx_init+0x16c>
   29244:	6a40      	ldr	r0, [r0, #36]	; 0x24
   29246:	2800      	cmp	r0, #0
   29248:	f000 80a2 	beq.w	29390 <rpc_transport_ipc_tx_init+0x16c>
   2924c:	f642 4587 	movw	r5, #11399	; 0x2c87
   29250:	f04f 0a00 	mov.w	sl, #0
   29254:	4e55      	ldr	r6, [pc, #340]	; (293ac <rpc_transport_ipc_tx_init+0x188>)
   29256:	42a8      	cmp	r0, r5
   29258:	f886 a000 	strb.w	sl, [r6]
   2925c:	f240 80a0 	bls.w	293a0 <rpc_transport_ipc_tx_init+0x17c>
   29260:	2708      	movs	r7, #8
   29262:	f8df 9180 	ldr.w	r9, [pc, #384]	; 293e4 <rpc_transport_ipc_tx_init+0x1c0>
   29266:	4620      	mov	r0, r4
   29268:	4616      	mov	r6, r2
   2926a:	460d      	mov	r5, r1
   2926c:	2244      	movs	r2, #68	; 0x44
   2926e:	4651      	mov	r1, sl
   29270:	f8c9 4000 	str.w	r4, [r9]
   29274:	f00c fc68 	bl	35b48 <memset>
   29278:	f8d9 2000 	ldr.w	r2, [r9]
   2927c:	f104 0344 	add.w	r3, r4, #68	; 0x44
   29280:	f8df 8164 	ldr.w	r8, [pc, #356]	; 293e8 <rpc_transport_ipc_tx_init+0x1c4>
   29284:	f882 a001 	strb.w	sl, [r2, #1]
   29288:	f882 a002 	strb.w	sl, [r2, #2]
   2928c:	f882 a003 	strb.w	sl, [r2, #3]
   29290:	7017      	strb	r7, [r2, #0]
   29292:	4618      	mov	r0, r3
   29294:	2244      	movs	r2, #68	; 0x44
   29296:	4651      	mov	r1, sl
   29298:	f8c8 3000 	str.w	r3, [r8]
   2929c:	f00c fc54 	bl	35b48 <memset>
   292a0:	f8d8 2000 	ldr.w	r2, [r8]
   292a4:	f104 0388 	add.w	r3, r4, #136	; 0x88
   292a8:	f8df b140 	ldr.w	fp, [pc, #320]	; 293ec <rpc_transport_ipc_tx_init+0x1c8>
   292ac:	7017      	strb	r7, [r2, #0]
   292ae:	f882 a001 	strb.w	sl, [r2, #1]
   292b2:	f882 a002 	strb.w	sl, [r2, #2]
   292b6:	f882 a003 	strb.w	sl, [r2, #3]
   292ba:	4618      	mov	r0, r3
   292bc:	f44f 7200 	mov.w	r2, #512	; 0x200
   292c0:	4651      	mov	r1, sl
   292c2:	f8cb 3000 	str.w	r3, [fp]
   292c6:	f00c fc3f 	bl	35b48 <memset>
   292ca:	4b39      	ldr	r3, [pc, #228]	; (293b0 <rpc_transport_ipc_tx_init+0x18c>)
   292cc:	f504 7c22 	add.w	ip, r4, #648	; 0x288
   292d0:	f8c3 c000 	str.w	ip, [r3]
   292d4:	4651      	mov	r1, sl
   292d6:	4660      	mov	r0, ip
   292d8:	f44f 7200 	mov.w	r2, #512	; 0x200
   292dc:	f00c fc34 	bl	35b48 <memset>
   292e0:	f44f 5c20 	mov.w	ip, #10240	; 0x2800
   292e4:	2106      	movs	r1, #6
   292e6:	f04f 0e01 	mov.w	lr, #1
   292ea:	f44f 3001 	mov.w	r0, #132096	; 0x20400
   292ee:	f44f 3288 	mov.w	r2, #69632	; 0x11000
   292f2:	4b30      	ldr	r3, [pc, #192]	; (293b4 <rpc_transport_ipc_tx_init+0x190>)
   292f4:	f504 6491 	add.w	r4, r4, #1160	; 0x488
   292f8:	605c      	str	r4, [r3, #4]
   292fa:	4c2f      	ldr	r4, [pc, #188]	; (293b8 <rpc_transport_ipc_tx_init+0x194>)
   292fc:	f8c3 c008 	str.w	ip, [r3, #8]
   29300:	8199      	strh	r1, [r3, #12]
   29302:	f8a3 e000 	strh.w	lr, [r3]
   29306:	4619      	mov	r1, r3
   29308:	611c      	str	r4, [r3, #16]
   2930a:	4b2c      	ldr	r3, [pc, #176]	; (293bc <rpc_transport_ipc_tx_init+0x198>)
   2930c:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 293f0 <rpc_transport_ipc_tx_init+0x1cc>
   29310:	6120      	str	r0, [r4, #16]
   29312:	482b      	ldr	r0, [pc, #172]	; (293c0 <rpc_transport_ipc_tx_init+0x19c>)
   29314:	6063      	str	r3, [r4, #4]
   29316:	f503 73c0 	add.w	r3, r3, #384	; 0x180
   2931a:	60a0      	str	r0, [r4, #8]
   2931c:	f8c4 c000 	str.w	ip, [r4]
   29320:	4828      	ldr	r0, [pc, #160]	; (293c4 <rpc_transport_ipc_tx_init+0x1a0>)
   29322:	60e3      	str	r3, [r4, #12]
   29324:	6162      	str	r2, [r4, #20]
   29326:	f7fd fe5b 	bl	26fe0 <nrf_mem_register>
   2932a:	2800      	cmp	r0, #0
   2932c:	d132      	bne.n	29394 <rpc_transport_ipc_tx_init+0x170>
   2932e:	f04f 0c02 	mov.w	ip, #2
   29332:	2420      	movs	r4, #32
   29334:	f8d9 1000 	ldr.w	r1, [r9]
   29338:	f8db 2000 	ldr.w	r2, [fp]
   2933c:	6029      	str	r1, [r5, #0]
   2933e:	4b1c      	ldr	r3, [pc, #112]	; (293b0 <rpc_transport_ipc_tx_init+0x18c>)
   29340:	f8d8 1000 	ldr.w	r1, [r8]
   29344:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 293f4 <rpc_transport_ipc_tx_init+0x1d0>
   29348:	4d1f      	ldr	r5, [pc, #124]	; (293c8 <rpc_transport_ipc_tx_init+0x1a4>)
   2934a:	6031      	str	r1, [r6, #0]
   2934c:	f8ce 2000 	str.w	r2, [lr]
   29350:	681b      	ldr	r3, [r3, #0]
   29352:	491e      	ldr	r1, [pc, #120]	; (293cc <rpc_transport_ipc_tx_init+0x1a8>)
   29354:	f502 7200 	add.w	r2, r2, #512	; 0x200
   29358:	602a      	str	r2, [r5, #0]
   2935a:	4e1d      	ldr	r6, [pc, #116]	; (293d0 <rpc_transport_ipc_tx_init+0x1ac>)
   2935c:	4a1d      	ldr	r2, [pc, #116]	; (293d4 <rpc_transport_ipc_tx_init+0x1b0>)
   2935e:	4d1e      	ldr	r5, [pc, #120]	; (293d8 <rpc_transport_ipc_tx_init+0x1b4>)
   29360:	600b      	str	r3, [r1, #0]
   29362:	f503 7300 	add.w	r3, r3, #512	; 0x200
   29366:	491d      	ldr	r1, [pc, #116]	; (293dc <rpc_transport_ipc_tx_init+0x1b8>)
   29368:	6033      	str	r3, [r6, #0]
   2936a:	8028      	strh	r0, [r5, #0]
   2936c:	f8c2 c514 	str.w	ip, [r2, #1300]	; 0x514
   29370:	6809      	ldr	r1, [r1, #0]
   29372:	4b1b      	ldr	r3, [pc, #108]	; (293e0 <rpc_transport_ipc_tx_init+0x1bc>)
   29374:	9103      	str	r1, [sp, #12]
   29376:	9903      	ldr	r1, [sp, #12]
   29378:	f8c2 751c 	str.w	r7, [r2, #1308]	; 0x51c
   2937c:	6819      	ldr	r1, [r3, #0]
   2937e:	443b      	add	r3, r7
   29380:	9102      	str	r1, [sp, #8]
   29382:	9902      	ldr	r1, [sp, #8]
   29384:	f8c2 4524 	str.w	r4, [r2, #1316]	; 0x524
   29388:	681b      	ldr	r3, [r3, #0]
   2938a:	9301      	str	r3, [sp, #4]
   2938c:	9b01      	ldr	r3, [sp, #4]
   2938e:	e001      	b.n	29394 <rpc_transport_ipc_tx_init+0x170>
   29390:	f24c 0007 	movw	r0, #49159	; 0xc007
   29394:	b005      	add	sp, #20
   29396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2939a:	f24c 000e 	movw	r0, #49166	; 0xc00e
   2939e:	4770      	bx	lr
   293a0:	f24c 0004 	movw	r0, #49156	; 0xc004
   293a4:	b005      	add	sp, #20
   293a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   293aa:	bf00      	nop
   293ac:	20025b63 	.word	0x20025b63
   293b0:	200229d4 	.word	0x200229d4
   293b4:	200229c0 	.word	0x200229c0
   293b8:	200229e4 	.word	0x200229e4
   293bc:	00040080 	.word	0x00040080
   293c0:	00040100 	.word	0x00040100
   293c4:	200229ac 	.word	0x200229ac
   293c8:	200229b8 	.word	0x200229b8
   293cc:	200229b4 	.word	0x200229b4
   293d0:	200229b0 	.word	0x200229b0
   293d4:	4002a000 	.word	0x4002a000
   293d8:	20024014 	.word	0x20024014
   293dc:	4002a514 	.word	0x4002a514
   293e0:	4002a51c 	.word	0x4002a51c
   293e4:	200229e0 	.word	0x200229e0
   293e8:	200229d8 	.word	0x200229d8
   293ec:	200229dc 	.word	0x200229dc
   293f0:	00080040 	.word	0x00080040
   293f4:	200229bc 	.word	0x200229bc

000293f8 <rpc_transport_ipc_tx_send>:
   293f8:	2800      	cmp	r0, #0
   293fa:	d05f      	beq.n	294bc <rpc_transport_ipc_tx_send+0xc4>
   293fc:	b470      	push	{r4, r5, r6}
   293fe:	4b33      	ldr	r3, [pc, #204]	; (294cc <rpc_transport_ipc_tx_send+0xd4>)
   29400:	b083      	sub	sp, #12
   29402:	681a      	ldr	r2, [r3, #0]
   29404:	4b32      	ldr	r3, [pc, #200]	; (294d0 <rpc_transport_ipc_tx_send+0xd8>)
   29406:	4282      	cmp	r2, r0
   29408:	d81e      	bhi.n	29448 <rpc_transport_ipc_tx_send+0x50>
   2940a:	681b      	ldr	r3, [r3, #0]
   2940c:	4931      	ldr	r1, [pc, #196]	; (294d4 <rpc_transport_ipc_tx_send+0xdc>)
   2940e:	4283      	cmp	r3, r0
   29410:	6809      	ldr	r1, [r1, #0]
   29412:	d803      	bhi.n	2941c <rpc_transport_ipc_tx_send+0x24>
   29414:	4c30      	ldr	r4, [pc, #192]	; (294d8 <rpc_transport_ipc_tx_send+0xe0>)
   29416:	6824      	ldr	r4, [r4, #0]
   29418:	4284      	cmp	r4, r0
   2941a:	d847      	bhi.n	294ac <rpc_transport_ipc_tx_send+0xb4>
   2941c:	4281      	cmp	r1, r0
   2941e:	d90e      	bls.n	2943e <rpc_transport_ipc_tx_send+0x46>
   29420:	4b2e      	ldr	r3, [pc, #184]	; (294dc <rpc_transport_ipc_tx_send+0xe4>)
   29422:	781b      	ldrb	r3, [r3, #0]
   29424:	2b00      	cmp	r3, #0
   29426:	d14c      	bne.n	294c2 <rpc_transport_ipc_tx_send+0xca>
   29428:	1a83      	subs	r3, r0, r2
   2942a:	492d      	ldr	r1, [pc, #180]	; (294e0 <rpc_transport_ipc_tx_send+0xe8>)
   2942c:	099e      	lsrs	r6, r3, #6
   2942e:	069b      	lsls	r3, r3, #26
   29430:	680a      	ldr	r2, [r1, #0]
   29432:	4c2c      	ldr	r4, [pc, #176]	; (294e4 <rpc_transport_ipc_tx_send+0xec>)
   29434:	f04f 0103 	mov.w	r1, #3
   29438:	f04f 0502 	mov.w	r5, #2
   2943c:	d014      	beq.n	29468 <rpc_transport_ipc_tx_send+0x70>
   2943e:	f24c 0010 	movw	r0, #49168	; 0xc010
   29442:	b003      	add	sp, #12
   29444:	bc70      	pop	{r4, r5, r6}
   29446:	4770      	bx	lr
   29448:	681b      	ldr	r3, [r3, #0]
   2944a:	4298      	cmp	r0, r3
   2944c:	d3f7      	bcc.n	2943e <rpc_transport_ipc_tx_send+0x46>
   2944e:	4a22      	ldr	r2, [pc, #136]	; (294d8 <rpc_transport_ipc_tx_send+0xe0>)
   29450:	6812      	ldr	r2, [r2, #0]
   29452:	4290      	cmp	r0, r2
   29454:	d2f3      	bcs.n	2943e <rpc_transport_ipc_tx_send+0x46>
   29456:	2101      	movs	r1, #1
   29458:	1ac3      	subs	r3, r0, r3
   2945a:	4a23      	ldr	r2, [pc, #140]	; (294e8 <rpc_transport_ipc_tx_send+0xf0>)
   2945c:	099e      	lsrs	r6, r3, #6
   2945e:	069b      	lsls	r3, r3, #26
   29460:	460d      	mov	r5, r1
   29462:	6812      	ldr	r2, [r2, #0]
   29464:	4c21      	ldr	r4, [pc, #132]	; (294ec <rpc_transport_ipc_tx_send+0xf4>)
   29466:	d1ea      	bne.n	2943e <rpc_transport_ipc_tx_send+0x46>
   29468:	6843      	ldr	r3, [r0, #4]
   2946a:	b2db      	uxtb	r3, r3
   2946c:	429d      	cmp	r5, r3
   2946e:	d120      	bne.n	294b2 <rpc_transport_ipc_tx_send+0xba>
   29470:	2020      	movs	r0, #32
   29472:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
   29476:	4d1e      	ldr	r5, [pc, #120]	; (294f0 <rpc_transport_ipc_tx_send+0xf8>)
   29478:	6853      	ldr	r3, [r2, #4]
   2947a:	882e      	ldrh	r6, [r5, #0]
   2947c:	b29b      	uxth	r3, r3
   2947e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   29482:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   29486:	f043 0301 	orr.w	r3, r3, #1
   2948a:	6053      	str	r3, [r2, #4]
   2948c:	bf00      	nop
   2948e:	3801      	subs	r0, #1
   29490:	d1fc      	bne.n	2948c <rpc_transport_ipc_tx_send+0x94>
   29492:	2201      	movs	r2, #1
   29494:	4b17      	ldr	r3, [pc, #92]	; (294f4 <rpc_transport_ipc_tx_send+0xfc>)
   29496:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
   2949a:	6822      	ldr	r2, [r4, #0]
   2949c:	882b      	ldrh	r3, [r5, #0]
   2949e:	9201      	str	r2, [sp, #4]
   294a0:	9a01      	ldr	r2, [sp, #4]
   294a2:	3301      	adds	r3, #1
   294a4:	802b      	strh	r3, [r5, #0]
   294a6:	b003      	add	sp, #12
   294a8:	bc70      	pop	{r4, r5, r6}
   294aa:	4770      	bx	lr
   294ac:	4281      	cmp	r1, r0
   294ae:	d9d2      	bls.n	29456 <rpc_transport_ipc_tx_send+0x5e>
   294b0:	e7b6      	b.n	29420 <rpc_transport_ipc_tx_send+0x28>
   294b2:	f24c 0007 	movw	r0, #49159	; 0xc007
   294b6:	b003      	add	sp, #12
   294b8:	bc70      	pop	{r4, r5, r6}
   294ba:	4770      	bx	lr
   294bc:	f24c 000e 	movw	r0, #49166	; 0xc00e
   294c0:	4770      	bx	lr
   294c2:	f24c 000f 	movw	r0, #49167	; 0xc00f
   294c6:	b003      	add	sp, #12
   294c8:	bc70      	pop	{r4, r5, r6}
   294ca:	4770      	bx	lr
   294cc:	200229bc 	.word	0x200229bc
   294d0:	200229b4 	.word	0x200229b4
   294d4:	200229b8 	.word	0x200229b8
   294d8:	200229b0 	.word	0x200229b0
   294dc:	20025b63 	.word	0x20025b63
   294e0:	200229e0 	.word	0x200229e0
   294e4:	4002a00c 	.word	0x4002a00c
   294e8:	200229d8 	.word	0x200229d8
   294ec:	4002a004 	.word	0x4002a004
   294f0:	20024014 	.word	0x20024014
   294f4:	4002a000 	.word	0x4002a000

000294f8 <rpc_transport_ipc_tx_rpc_data_alloc>:
   294f8:	4b18      	ldr	r3, [pc, #96]	; (2955c <rpc_transport_ipc_tx_rpc_data_alloc+0x64>)
   294fa:	781b      	ldrb	r3, [r3, #0]
   294fc:	bb63      	cbnz	r3, 29558 <rpc_transport_ipc_tx_rpc_data_alloc+0x60>
   294fe:	b4f0      	push	{r4, r5, r6, r7}
   29500:	4a17      	ldr	r2, [pc, #92]	; (29560 <rpc_transport_ipc_tx_rpc_data_alloc+0x68>)
   29502:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   29506:	6814      	ldr	r4, [r2, #0]
   29508:	4b16      	ldr	r3, [pc, #88]	; (29564 <rpc_transport_ipc_tx_rpc_data_alloc+0x6c>)
   2950a:	6825      	ldr	r5, [r4, #0]
   2950c:	681e      	ldr	r6, [r3, #0]
   2950e:	b1a5      	cbz	r5, 2953a <rpc_transport_ipc_tx_rpc_data_alloc+0x42>
   29510:	4607      	mov	r7, r0
   29512:	00c1      	lsls	r1, r0, #3
   29514:	1863      	adds	r3, r4, r1
   29516:	685a      	ldr	r2, [r3, #4]
   29518:	b2d2      	uxtb	r2, r2
   2951a:	2a03      	cmp	r2, #3
   2951c:	d104      	bne.n	29528 <rpc_transport_ipc_tx_rpc_data_alloc+0x30>
   2951e:	609f      	str	r7, [r3, #8]
   29520:	685a      	ldr	r2, [r3, #4]
   29522:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   29526:	605a      	str	r2, [r3, #4]
   29528:	685a      	ldr	r2, [r3, #4]
   2952a:	f012 0fff 	tst.w	r2, #255	; 0xff
   2952e:	d101      	bne.n	29534 <rpc_transport_ipc_tx_rpc_data_alloc+0x3c>
   29530:	689b      	ldr	r3, [r3, #8]
   29532:	b12b      	cbz	r3, 29540 <rpc_transport_ipc_tx_rpc_data_alloc+0x48>
   29534:	3001      	adds	r0, #1
   29536:	42a8      	cmp	r0, r5
   29538:	d1eb      	bne.n	29512 <rpc_transport_ipc_tx_rpc_data_alloc+0x1a>
   2953a:	2000      	movs	r0, #0
   2953c:	bcf0      	pop	{r4, r5, r6, r7}
   2953e:	4770      	bx	lr
   29540:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   29544:	4421      	add	r1, r4
   29546:	6088      	str	r0, [r1, #8]
   29548:	6843      	ldr	r3, [r0, #4]
   2954a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   2954e:	f043 0302 	orr.w	r3, r3, #2
   29552:	6043      	str	r3, [r0, #4]
   29554:	bcf0      	pop	{r4, r5, r6, r7}
   29556:	4770      	bx	lr
   29558:	2000      	movs	r0, #0
   2955a:	4770      	bx	lr
   2955c:	20025b63 	.word	0x20025b63
   29560:	200229e0 	.word	0x200229e0
   29564:	200229dc 	.word	0x200229dc

00029568 <rpc_transport_ipc_tx_rpc_ctrl_alloc>:
   29568:	b4f0      	push	{r4, r5, r6, r7}
   2956a:	4a15      	ldr	r2, [pc, #84]	; (295c0 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x58>)
   2956c:	4b15      	ldr	r3, [pc, #84]	; (295c4 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x5c>)
   2956e:	6814      	ldr	r4, [r2, #0]
   29570:	681e      	ldr	r6, [r3, #0]
   29572:	6825      	ldr	r5, [r4, #0]
   29574:	b1ad      	cbz	r5, 295a2 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x3a>
   29576:	2000      	movs	r0, #0
   29578:	4607      	mov	r7, r0
   2957a:	00c1      	lsls	r1, r0, #3
   2957c:	1863      	adds	r3, r4, r1
   2957e:	685a      	ldr	r2, [r3, #4]
   29580:	b2d2      	uxtb	r2, r2
   29582:	2a03      	cmp	r2, #3
   29584:	d104      	bne.n	29590 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x28>
   29586:	609f      	str	r7, [r3, #8]
   29588:	685a      	ldr	r2, [r3, #4]
   2958a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   2958e:	605a      	str	r2, [r3, #4]
   29590:	685a      	ldr	r2, [r3, #4]
   29592:	f012 0fff 	tst.w	r2, #255	; 0xff
   29596:	d101      	bne.n	2959c <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x34>
   29598:	689b      	ldr	r3, [r3, #8]
   2959a:	b12b      	cbz	r3, 295a8 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x40>
   2959c:	3001      	adds	r0, #1
   2959e:	4285      	cmp	r5, r0
   295a0:	d1eb      	bne.n	2957a <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x12>
   295a2:	2000      	movs	r0, #0
   295a4:	bcf0      	pop	{r4, r5, r6, r7}
   295a6:	4770      	bx	lr
   295a8:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   295ac:	4421      	add	r1, r4
   295ae:	6088      	str	r0, [r1, #8]
   295b0:	6843      	ldr	r3, [r0, #4]
   295b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   295b6:	f043 0301 	orr.w	r3, r3, #1
   295ba:	6043      	str	r3, [r0, #4]
   295bc:	bcf0      	pop	{r4, r5, r6, r7}
   295be:	4770      	bx	lr
   295c0:	200229d8 	.word	0x200229d8
   295c4:	200229d4 	.word	0x200229d4

000295c8 <rpc_transport_ipc_tx_data_alloc>:
   295c8:	4b03      	ldr	r3, [pc, #12]	; (295d8 <rpc_transport_ipc_tx_data_alloc+0x10>)
   295ca:	781b      	ldrb	r3, [r3, #0]
   295cc:	b90b      	cbnz	r3, 295d2 <rpc_transport_ipc_tx_data_alloc+0xa>
   295ce:	f7fd be37 	b.w	27240 <nrf_shared_malloc>
   295d2:	2000      	movs	r0, #0
   295d4:	4770      	bx	lr
   295d6:	bf00      	nop
   295d8:	20025b63 	.word	0x20025b63

000295dc <ok_rsp_parser>:
   295dc:	2000      	movs	r0, #0
   295de:	4770      	bx	lr

000295e0 <pdn_state_get_parser>:
   295e0:	2200      	movs	r2, #0
   295e2:	b570      	push	{r4, r5, r6, lr}
   295e4:	780b      	ldrb	r3, [r1, #0]
   295e6:	b084      	sub	sp, #16
   295e8:	460e      	mov	r6, r1
   295ea:	e9cd 2200 	strd	r2, r2, [sp]
   295ee:	e9cd 2202 	strd	r2, r2, [sp, #8]
   295f2:	b323      	cbz	r3, 2963e <pdn_state_get_parser+0x5e>
   295f4:	460c      	mov	r4, r1
   295f6:	2b20      	cmp	r3, #32
   295f8:	460d      	mov	r5, r1
   295fa:	d01b      	beq.n	29634 <pdn_state_get_parser+0x54>
   295fc:	700b      	strb	r3, [r1, #0]
   295fe:	3201      	adds	r2, #1
   29600:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   29604:	18b1      	adds	r1, r6, r2
   29606:	460d      	mov	r5, r1
   29608:	2b00      	cmp	r3, #0
   2960a:	d1f4      	bne.n	295f6 <pdn_state_get_parser+0x16>
   2960c:	2200      	movs	r2, #0
   2960e:	4b0d      	ldr	r3, [pc, #52]	; (29644 <pdn_state_get_parser+0x64>)
   29610:	702a      	strb	r2, [r5, #0]
   29612:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   29616:	4a0c      	ldr	r2, [pc, #48]	; (29648 <pdn_state_get_parser+0x68>)
   29618:	681b      	ldr	r3, [r3, #0]
   2961a:	2110      	movs	r1, #16
   2961c:	4668      	mov	r0, sp
   2961e:	f008 fda1 	bl	32164 <sniprintf>
   29622:	4669      	mov	r1, sp
   29624:	4630      	mov	r0, r6
   29626:	f00c fbbd 	bl	35da4 <strstr>
   2962a:	3000      	adds	r0, #0
   2962c:	bf18      	it	ne
   2962e:	2001      	movne	r0, #1
   29630:	b004      	add	sp, #16
   29632:	bd70      	pop	{r4, r5, r6, pc}
   29634:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   29638:	2b00      	cmp	r3, #0
   2963a:	d1dc      	bne.n	295f6 <pdn_state_get_parser+0x16>
   2963c:	e7e6      	b.n	2960c <pdn_state_get_parser+0x2c>
   2963e:	460d      	mov	r5, r1
   29640:	e7e4      	b.n	2960c <pdn_state_get_parser+0x2c>
   29642:	bf00      	nop
   29644:	20022b00 	.word	0x20022b00
   29648:	00037424 	.word	0x00037424

0002964c <pdn_id_get_parser>:
   2964c:	b570      	push	{r4, r5, r6, lr}
   2964e:	780b      	ldrb	r3, [r1, #0]
   29650:	4606      	mov	r6, r0
   29652:	b313      	cbz	r3, 2969a <pdn_id_get_parser+0x4e>
   29654:	4608      	mov	r0, r1
   29656:	2400      	movs	r4, #0
   29658:	460a      	mov	r2, r1
   2965a:	2b20      	cmp	r3, #32
   2965c:	4615      	mov	r5, r2
   2965e:	d017      	beq.n	29690 <pdn_id_get_parser+0x44>
   29660:	7013      	strb	r3, [r2, #0]
   29662:	3401      	adds	r4, #1
   29664:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   29668:	190a      	adds	r2, r1, r4
   2966a:	4615      	mov	r5, r2
   2966c:	2b00      	cmp	r3, #0
   2966e:	d1f4      	bne.n	2965a <pdn_id_get_parser+0xe>
   29670:	2300      	movs	r3, #0
   29672:	4608      	mov	r0, r1
   29674:	702b      	strb	r3, [r5, #0]
   29676:	213a      	movs	r1, #58	; 0x3a
   29678:	f00c fb6d 	bl	35d56 <strchr>
   2967c:	b130      	cbz	r0, 2968c <pdn_id_get_parser+0x40>
   2967e:	3001      	adds	r0, #1
   29680:	f00c fa22 	bl	35ac8 <atoi>
   29684:	4b06      	ldr	r3, [pc, #24]	; (296a0 <pdn_id_get_parser+0x54>)
   29686:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
   2968a:	6058      	str	r0, [r3, #4]
   2968c:	2000      	movs	r0, #0
   2968e:	bd70      	pop	{r4, r5, r6, pc}
   29690:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   29694:	2b00      	cmp	r3, #0
   29696:	d1e0      	bne.n	2965a <pdn_id_get_parser+0xe>
   29698:	e7ea      	b.n	29670 <pdn_id_get_parser+0x24>
   2969a:	460d      	mov	r5, r1
   2969c:	e7e8      	b.n	29670 <pdn_id_get_parser+0x24>
   2969e:	bf00      	nop
   296a0:	20022b00 	.word	0x20022b00

000296a4 <context_create_parser>:
   296a4:	b570      	push	{r4, r5, r6, lr}
   296a6:	780b      	ldrb	r3, [r1, #0]
   296a8:	4606      	mov	r6, r0
   296aa:	b313      	cbz	r3, 296f2 <context_create_parser+0x4e>
   296ac:	4608      	mov	r0, r1
   296ae:	2400      	movs	r4, #0
   296b0:	460a      	mov	r2, r1
   296b2:	2b20      	cmp	r3, #32
   296b4:	4615      	mov	r5, r2
   296b6:	d017      	beq.n	296e8 <context_create_parser+0x44>
   296b8:	7013      	strb	r3, [r2, #0]
   296ba:	3401      	adds	r4, #1
   296bc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   296c0:	190a      	adds	r2, r1, r4
   296c2:	4615      	mov	r5, r2
   296c4:	2b00      	cmp	r3, #0
   296c6:	d1f4      	bne.n	296b2 <context_create_parser+0xe>
   296c8:	2300      	movs	r3, #0
   296ca:	4608      	mov	r0, r1
   296cc:	702b      	strb	r3, [r5, #0]
   296ce:	213a      	movs	r1, #58	; 0x3a
   296d0:	f00c fb41 	bl	35d56 <strchr>
   296d4:	b130      	cbz	r0, 296e4 <context_create_parser+0x40>
   296d6:	4b08      	ldr	r3, [pc, #32]	; (296f8 <context_create_parser+0x54>)
   296d8:	3001      	adds	r0, #1
   296da:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
   296de:	f00c f9f3 	bl	35ac8 <atoi>
   296e2:	6020      	str	r0, [r4, #0]
   296e4:	2000      	movs	r0, #0
   296e6:	bd70      	pop	{r4, r5, r6, pc}
   296e8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   296ec:	2b00      	cmp	r3, #0
   296ee:	d1e0      	bne.n	296b2 <context_create_parser+0xe>
   296f0:	e7ea      	b.n	296c8 <context_create_parser+0x24>
   296f2:	460d      	mov	r5, r1
   296f4:	e7e8      	b.n	296c8 <context_create_parser+0x24>
   296f6:	bf00      	nop
   296f8:	20022b00 	.word	0x20022b00

000296fc <pdn_interface_init>:
   296fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29700:	b510      	push	{r4, lr}
   29702:	4c09      	ldr	r4, [pc, #36]	; (29728 <pdn_interface_init+0x2c>)
   29704:	2228      	movs	r2, #40	; 0x28
   29706:	2100      	movs	r1, #0
   29708:	4808      	ldr	r0, [pc, #32]	; (2972c <pdn_interface_init+0x30>)
   2970a:	6023      	str	r3, [r4, #0]
   2970c:	f00c fa1c 	bl	35b48 <memset>
   29710:	f240 2201 	movw	r2, #513	; 0x201
   29714:	2102      	movs	r1, #2
   29716:	2066      	movs	r0, #102	; 0x66
   29718:	f7fd f83a 	bl	26790 <at_interface_open>
   2971c:	2800      	cmp	r0, #0
   2971e:	6020      	str	r0, [r4, #0]
   29720:	bfb4      	ite	lt
   29722:	2003      	movlt	r0, #3
   29724:	2000      	movge	r0, #0
   29726:	bd10      	pop	{r4, pc}
   29728:	200229fc 	.word	0x200229fc
   2972c:	20022b00 	.word	0x20022b00

00029730 <pdn_interface_open>:
   29730:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   29734:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   29738:	b083      	sub	sp, #12
   2973a:	f040 80ad 	bne.w	29898 <pdn_interface_open+0x168>
   2973e:	4c5f      	ldr	r4, [pc, #380]	; (298bc <pdn_interface_open+0x18c>)
   29740:	6825      	ldr	r5, [r4, #0]
   29742:	b34d      	cbz	r5, 29798 <pdn_interface_open+0x68>
   29744:	6863      	ldr	r3, [r4, #4]
   29746:	2b00      	cmp	r3, #0
   29748:	f000 8098 	beq.w	2987c <pdn_interface_open+0x14c>
   2974c:	68a3      	ldr	r3, [r4, #8]
   2974e:	2b00      	cmp	r3, #0
   29750:	f000 8096 	beq.w	29880 <pdn_interface_open+0x150>
   29754:	68e3      	ldr	r3, [r4, #12]
   29756:	2b00      	cmp	r3, #0
   29758:	f000 8094 	beq.w	29884 <pdn_interface_open+0x154>
   2975c:	6923      	ldr	r3, [r4, #16]
   2975e:	2b00      	cmp	r3, #0
   29760:	f000 8092 	beq.w	29888 <pdn_interface_open+0x158>
   29764:	6963      	ldr	r3, [r4, #20]
   29766:	2b00      	cmp	r3, #0
   29768:	f000 8090 	beq.w	2988c <pdn_interface_open+0x15c>
   2976c:	69a3      	ldr	r3, [r4, #24]
   2976e:	2b00      	cmp	r3, #0
   29770:	f000 808e 	beq.w	29890 <pdn_interface_open+0x160>
   29774:	69e3      	ldr	r3, [r4, #28]
   29776:	2b00      	cmp	r3, #0
   29778:	f000 808c 	beq.w	29894 <pdn_interface_open+0x164>
   2977c:	6a23      	ldr	r3, [r4, #32]
   2977e:	b153      	cbz	r3, 29796 <pdn_interface_open+0x66>
   29780:	6a63      	ldr	r3, [r4, #36]	; 0x24
   29782:	2509      	movs	r5, #9
   29784:	b143      	cbz	r3, 29798 <pdn_interface_open+0x68>
   29786:	200c      	movs	r0, #12
   29788:	f7f9 f9b8 	bl	22afc <bsd_os_errno_set>
   2978c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   29790:	b003      	add	sp, #12
   29792:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   29796:	2508      	movs	r5, #8
   29798:	2074      	movs	r0, #116	; 0x74
   2979a:	f7fd fd3b 	bl	27214 <nrf_malloc>
   2979e:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
   297a2:	2800      	cmp	r0, #0
   297a4:	d0ef      	beq.n	29786 <pdn_interface_open+0x56>
   297a6:	2274      	movs	r2, #116	; 0x74
   297a8:	2100      	movs	r1, #0
   297aa:	f00c f9cd 	bl	35b48 <memset>
   297ae:	2101      	movs	r1, #1
   297b0:	2003      	movs	r0, #3
   297b2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   297b6:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   297ba:	4a41      	ldr	r2, [pc, #260]	; (298c0 <pdn_interface_open+0x190>)
   297bc:	6099      	str	r1, [r3, #8]
   297be:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   297c2:	f44f 7180 	mov.w	r1, #256	; 0x100
   297c6:	6718      	str	r0, [r3, #112]	; 0x70
   297c8:	605f      	str	r7, [r3, #4]
   297ca:	483e      	ldr	r0, [pc, #248]	; (298c4 <pdn_interface_open+0x194>)
   297cc:	f8df 8100 	ldr.w	r8, [pc, #256]	; 298d0 <pdn_interface_open+0x1a0>
   297d0:	f008 fcc8 	bl	32164 <sniprintf>
   297d4:	483b      	ldr	r0, [pc, #236]	; (298c4 <pdn_interface_open+0x194>)
   297d6:	f8d8 9000 	ldr.w	r9, [r8]
   297da:	2600      	movs	r6, #0
   297dc:	f7f3 fc88 	bl	1d0f0 <strlen>
   297e0:	4633      	mov	r3, r6
   297e2:	4602      	mov	r2, r0
   297e4:	4937      	ldr	r1, [pc, #220]	; (298c4 <pdn_interface_open+0x194>)
   297e6:	4648      	mov	r0, r9
   297e8:	9601      	str	r6, [sp, #4]
   297ea:	9600      	str	r6, [sp, #0]
   297ec:	f7fc ff62 	bl	266b4 <at_interface_write>
   297f0:	4681      	mov	r9, r0
   297f2:	4834      	ldr	r0, [pc, #208]	; (298c4 <pdn_interface_open+0x194>)
   297f4:	f7f3 fc7c 	bl	1d0f0 <strlen>
   297f8:	4548      	cmp	r0, r9
   297fa:	d153      	bne.n	298a4 <pdn_interface_open+0x174>
   297fc:	4633      	mov	r3, r6
   297fe:	e9cd 6600 	strd	r6, r6, [sp]
   29802:	f44f 7280 	mov.w	r2, #256	; 0x100
   29806:	492f      	ldr	r1, [pc, #188]	; (298c4 <pdn_interface_open+0x194>)
   29808:	f8d8 0000 	ldr.w	r0, [r8]
   2980c:	f7fd f856 	bl	268bc <at_interface_read>
   29810:	4606      	mov	r6, r0
   29812:	482d      	ldr	r0, [pc, #180]	; (298c8 <pdn_interface_open+0x198>)
   29814:	f7f3 fc6c 	bl	1d0f0 <strlen>
   29818:	4286      	cmp	r6, r0
   2981a:	db15      	blt.n	29848 <pdn_interface_open+0x118>
   2981c:	4602      	mov	r2, r0
   2981e:	4929      	ldr	r1, [pc, #164]	; (298c4 <pdn_interface_open+0x194>)
   29820:	4829      	ldr	r0, [pc, #164]	; (298c8 <pdn_interface_open+0x198>)
   29822:	f00c faad 	bl	35d80 <strncmp>
   29826:	b978      	cbnz	r0, 29848 <pdn_interface_open+0x118>
   29828:	4926      	ldr	r1, [pc, #152]	; (298c4 <pdn_interface_open+0x194>)
   2982a:	4628      	mov	r0, r5
   2982c:	f7ff ff3a 	bl	296a4 <context_create_parser>
   29830:	b9b0      	cbnz	r0, 29860 <pdn_interface_open+0x130>
   29832:	2202      	movs	r2, #2
   29834:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   29838:	f045 40f1 	orr.w	r0, r5, #2021654528	; 0x78800000
   2983c:	f440 10d0 	orr.w	r0, r0, #1703936	; 0x1a0000
   29840:	609a      	str	r2, [r3, #8]
   29842:	b003      	add	sp, #12
   29844:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   29848:	4820      	ldr	r0, [pc, #128]	; (298cc <pdn_interface_open+0x19c>)
   2984a:	f7f3 fc51 	bl	1d0f0 <strlen>
   2984e:	491d      	ldr	r1, [pc, #116]	; (298c4 <pdn_interface_open+0x194>)
   29850:	4602      	mov	r2, r0
   29852:	481e      	ldr	r0, [pc, #120]	; (298cc <pdn_interface_open+0x19c>)
   29854:	f00c fa94 	bl	35d80 <strncmp>
   29858:	b960      	cbnz	r0, 29874 <pdn_interface_open+0x144>
   2985a:	2008      	movs	r0, #8
   2985c:	f7f9 f94e 	bl	22afc <bsd_os_errno_set>
   29860:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   29864:	f7fd fce0 	bl	27228 <nrf_free>
   29868:	2300      	movs	r3, #0
   2986a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2986e:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
   29872:	e78d      	b.n	29790 <pdn_interface_open+0x60>
   29874:	2005      	movs	r0, #5
   29876:	f7f9 f941 	bl	22afc <bsd_os_errno_set>
   2987a:	e7f1      	b.n	29860 <pdn_interface_open+0x130>
   2987c:	2501      	movs	r5, #1
   2987e:	e78b      	b.n	29798 <pdn_interface_open+0x68>
   29880:	2502      	movs	r5, #2
   29882:	e789      	b.n	29798 <pdn_interface_open+0x68>
   29884:	2503      	movs	r5, #3
   29886:	e787      	b.n	29798 <pdn_interface_open+0x68>
   29888:	2504      	movs	r5, #4
   2988a:	e785      	b.n	29798 <pdn_interface_open+0x68>
   2988c:	2505      	movs	r5, #5
   2988e:	e783      	b.n	29798 <pdn_interface_open+0x68>
   29890:	2506      	movs	r5, #6
   29892:	e781      	b.n	29798 <pdn_interface_open+0x68>
   29894:	2507      	movs	r5, #7
   29896:	e77f      	b.n	29798 <pdn_interface_open+0x68>
   29898:	2029      	movs	r0, #41	; 0x29
   2989a:	f7f9 f92f 	bl	22afc <bsd_os_errno_set>
   2989e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   298a2:	e775      	b.n	29790 <pdn_interface_open+0x60>
   298a4:	2005      	movs	r0, #5
   298a6:	f7f9 f929 	bl	22afc <bsd_os_errno_set>
   298aa:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   298ae:	f7fd fcbb 	bl	27228 <nrf_free>
   298b2:	f844 6025 	str.w	r6, [r4, r5, lsl #2]
   298b6:	4638      	mov	r0, r7
   298b8:	e76a      	b.n	29790 <pdn_interface_open+0x60>
   298ba:	bf00      	nop
   298bc:	20022b00 	.word	0x20022b00
   298c0:	00037400 	.word	0x00037400
   298c4:	20022a00 	.word	0x20022a00
   298c8:	00037410 	.word	0x00037410
   298cc:	0003741c 	.word	0x0003741c
   298d0:	200229fc 	.word	0x200229fc

000298d4 <pdn_interface_connect>:
   298d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   298d8:	b083      	sub	sp, #12
   298da:	2900      	cmp	r1, #0
   298dc:	f000 813d 	beq.w	29b5a <pdn_interface_connect+0x286>
   298e0:	2a64      	cmp	r2, #100	; 0x64
   298e2:	4691      	mov	r9, r2
   298e4:	f200 8139 	bhi.w	29b5a <pdn_interface_connect+0x286>
   298e8:	4605      	mov	r5, r0
   298ea:	4608      	mov	r0, r1
   298ec:	4688      	mov	r8, r1
   298ee:	f7f3 fbff 	bl	1d0f0 <strlen>
   298f2:	2864      	cmp	r0, #100	; 0x64
   298f4:	f200 8131 	bhi.w	29b5a <pdn_interface_connect+0x286>
   298f8:	0c2b      	lsrs	r3, r5, #16
   298fa:	4aa5      	ldr	r2, [pc, #660]	; (29b90 <pdn_interface_connect+0x2bc>)
   298fc:	041b      	lsls	r3, r3, #16
   298fe:	4293      	cmp	r3, r2
   29900:	f040 8122 	bne.w	29b48 <pdn_interface_connect+0x274>
   29904:	f025 45f1 	bic.w	r5, r5, #2021654528	; 0x78800000
   29908:	f425 15d0 	bic.w	r5, r5, #1703936	; 0x1a0000
   2990c:	2d09      	cmp	r5, #9
   2990e:	f300 811b 	bgt.w	29b48 <pdn_interface_connect+0x274>
   29912:	4fa0      	ldr	r7, [pc, #640]	; (29b94 <pdn_interface_connect+0x2c0>)
   29914:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   29918:	2b00      	cmp	r3, #0
   2991a:	f000 8115 	beq.w	29b48 <pdn_interface_connect+0x274>
   2991e:	689a      	ldr	r2, [r3, #8]
   29920:	2a00      	cmp	r2, #0
   29922:	f000 8111 	beq.w	29b48 <pdn_interface_connect+0x274>
   29926:	689b      	ldr	r3, [r3, #8]
   29928:	2b02      	cmp	r3, #2
   2992a:	f040 810d 	bne.w	29b48 <pdn_interface_connect+0x274>
   2992e:	4e9a      	ldr	r6, [pc, #616]	; (29b98 <pdn_interface_connect+0x2c4>)
   29930:	4a9a      	ldr	r2, [pc, #616]	; (29b9c <pdn_interface_connect+0x2c8>)
   29932:	f44f 7180 	mov.w	r1, #256	; 0x100
   29936:	4630      	mov	r0, r6
   29938:	f008 fc14 	bl	32164 <sniprintf>
   2993c:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   29940:	4604      	mov	r4, r0
   29942:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   29946:	681b      	ldr	r3, [r3, #0]
   29948:	4a95      	ldr	r2, [pc, #596]	; (29ba0 <pdn_interface_connect+0x2cc>)
   2994a:	1830      	adds	r0, r6, r0
   2994c:	f008 fc0a 	bl	32164 <sniprintf>
   29950:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   29954:	4404      	add	r4, r0
   29956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   29958:	f003 0203 	and.w	r2, r3, #3
   2995c:	2a03      	cmp	r2, #3
   2995e:	f000 80ea 	beq.w	29b36 <pdn_interface_connect+0x262>
   29962:	079b      	lsls	r3, r3, #30
   29964:	eb06 0004 	add.w	r0, r6, r4
   29968:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   2996c:	bf4c      	ite	mi
   2996e:	4b8d      	ldrmi	r3, [pc, #564]	; (29ba4 <pdn_interface_connect+0x2d0>)
   29970:	4b8d      	ldrpl	r3, [pc, #564]	; (29ba8 <pdn_interface_connect+0x2d4>)
   29972:	4a8e      	ldr	r2, [pc, #568]	; (29bac <pdn_interface_connect+0x2d8>)
   29974:	f008 fbf6 	bl	32164 <sniprintf>
   29978:	4404      	add	r4, r0
   2997a:	4643      	mov	r3, r8
   2997c:	4a8c      	ldr	r2, [pc, #560]	; (29bb0 <pdn_interface_connect+0x2dc>)
   2997e:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   29982:	1930      	adds	r0, r6, r4
   29984:	f008 fbee 	bl	32164 <sniprintf>
   29988:	4420      	add	r0, r4
   2998a:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   2998e:	f300 80f7 	bgt.w	29b80 <pdn_interface_connect+0x2ac>
   29992:	f8df a23c 	ldr.w	sl, [pc, #572]	; 29bd0 <pdn_interface_connect+0x2fc>
   29996:	4880      	ldr	r0, [pc, #512]	; (29b98 <pdn_interface_connect+0x2c4>)
   29998:	f8da b000 	ldr.w	fp, [sl]
   2999c:	2400      	movs	r4, #0
   2999e:	f7f3 fba7 	bl	1d0f0 <strlen>
   299a2:	4623      	mov	r3, r4
   299a4:	4602      	mov	r2, r0
   299a6:	497c      	ldr	r1, [pc, #496]	; (29b98 <pdn_interface_connect+0x2c4>)
   299a8:	4658      	mov	r0, fp
   299aa:	9401      	str	r4, [sp, #4]
   299ac:	9400      	str	r4, [sp, #0]
   299ae:	f7fc fe81 	bl	266b4 <at_interface_write>
   299b2:	4683      	mov	fp, r0
   299b4:	4878      	ldr	r0, [pc, #480]	; (29b98 <pdn_interface_connect+0x2c4>)
   299b6:	f7f3 fb9b 	bl	1d0f0 <strlen>
   299ba:	4558      	cmp	r0, fp
   299bc:	d008      	beq.n	299d0 <pdn_interface_connect+0xfc>
   299be:	2005      	movs	r0, #5
   299c0:	f7f9 f89c 	bl	22afc <bsd_os_errno_set>
   299c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   299c8:	4620      	mov	r0, r4
   299ca:	b003      	add	sp, #12
   299cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   299d0:	4623      	mov	r3, r4
   299d2:	e9cd 4400 	strd	r4, r4, [sp]
   299d6:	f44f 7280 	mov.w	r2, #256	; 0x100
   299da:	496f      	ldr	r1, [pc, #444]	; (29b98 <pdn_interface_connect+0x2c4>)
   299dc:	f8da 0000 	ldr.w	r0, [sl]
   299e0:	f7fc ff6c 	bl	268bc <at_interface_read>
   299e4:	4604      	mov	r4, r0
   299e6:	4873      	ldr	r0, [pc, #460]	; (29bb4 <pdn_interface_connect+0x2e0>)
   299e8:	f7f3 fb82 	bl	1d0f0 <strlen>
   299ec:	4284      	cmp	r4, r0
   299ee:	f2c0 8091 	blt.w	29b14 <pdn_interface_connect+0x240>
   299f2:	4602      	mov	r2, r0
   299f4:	4968      	ldr	r1, [pc, #416]	; (29b98 <pdn_interface_connect+0x2c4>)
   299f6:	486f      	ldr	r0, [pc, #444]	; (29bb4 <pdn_interface_connect+0x2e0>)
   299f8:	f00c f9c2 	bl	35d80 <strncmp>
   299fc:	2800      	cmp	r0, #0
   299fe:	f040 8089 	bne.w	29b14 <pdn_interface_connect+0x240>
   29a02:	4965      	ldr	r1, [pc, #404]	; (29b98 <pdn_interface_connect+0x2c4>)
   29a04:	4628      	mov	r0, r5
   29a06:	f7ff fde9 	bl	295dc <ok_rsp_parser>
   29a0a:	4604      	mov	r4, r0
   29a0c:	2800      	cmp	r0, #0
   29a0e:	d1db      	bne.n	299c8 <pdn_interface_connect+0xf4>
   29a10:	4a69      	ldr	r2, [pc, #420]	; (29bb8 <pdn_interface_connect+0x2e4>)
   29a12:	f44f 7180 	mov.w	r1, #256	; 0x100
   29a16:	4860      	ldr	r0, [pc, #384]	; (29b98 <pdn_interface_connect+0x2c4>)
   29a18:	f008 fba4 	bl	32164 <sniprintf>
   29a1c:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   29a20:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   29a24:	681b      	ldr	r3, [r3, #0]
   29a26:	4a65      	ldr	r2, [pc, #404]	; (29bbc <pdn_interface_connect+0x2e8>)
   29a28:	4430      	add	r0, r6
   29a2a:	f008 fb9b 	bl	32164 <sniprintf>
   29a2e:	485a      	ldr	r0, [pc, #360]	; (29b98 <pdn_interface_connect+0x2c4>)
   29a30:	f8da b000 	ldr.w	fp, [sl]
   29a34:	f7f3 fb5c 	bl	1d0f0 <strlen>
   29a38:	4623      	mov	r3, r4
   29a3a:	4602      	mov	r2, r0
   29a3c:	4956      	ldr	r1, [pc, #344]	; (29b98 <pdn_interface_connect+0x2c4>)
   29a3e:	4658      	mov	r0, fp
   29a40:	9401      	str	r4, [sp, #4]
   29a42:	9400      	str	r4, [sp, #0]
   29a44:	f7fc fe36 	bl	266b4 <at_interface_write>
   29a48:	4683      	mov	fp, r0
   29a4a:	4853      	ldr	r0, [pc, #332]	; (29b98 <pdn_interface_connect+0x2c4>)
   29a4c:	f7f3 fb50 	bl	1d0f0 <strlen>
   29a50:	4558      	cmp	r0, fp
   29a52:	d1b4      	bne.n	299be <pdn_interface_connect+0xea>
   29a54:	4623      	mov	r3, r4
   29a56:	f44f 7280 	mov.w	r2, #256	; 0x100
   29a5a:	494f      	ldr	r1, [pc, #316]	; (29b98 <pdn_interface_connect+0x2c4>)
   29a5c:	f8da 0000 	ldr.w	r0, [sl]
   29a60:	e9cd 4400 	strd	r4, r4, [sp]
   29a64:	f7fc ff2a 	bl	268bc <at_interface_read>
   29a68:	4683      	mov	fp, r0
   29a6a:	4852      	ldr	r0, [pc, #328]	; (29bb4 <pdn_interface_connect+0x2e0>)
   29a6c:	f7f3 fb40 	bl	1d0f0 <strlen>
   29a70:	4583      	cmp	fp, r0
   29a72:	db4f      	blt.n	29b14 <pdn_interface_connect+0x240>
   29a74:	4602      	mov	r2, r0
   29a76:	4948      	ldr	r1, [pc, #288]	; (29b98 <pdn_interface_connect+0x2c4>)
   29a78:	484e      	ldr	r0, [pc, #312]	; (29bb4 <pdn_interface_connect+0x2e0>)
   29a7a:	f00c f981 	bl	35d80 <strncmp>
   29a7e:	2800      	cmp	r0, #0
   29a80:	d148      	bne.n	29b14 <pdn_interface_connect+0x240>
   29a82:	2103      	movs	r1, #3
   29a84:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   29a88:	464a      	mov	r2, r9
   29a8a:	6099      	str	r1, [r3, #8]
   29a8c:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
   29a90:	4641      	mov	r1, r8
   29a92:	300c      	adds	r0, #12
   29a94:	f00c f838 	bl	35b08 <memcpy>
   29a98:	4a49      	ldr	r2, [pc, #292]	; (29bc0 <pdn_interface_connect+0x2ec>)
   29a9a:	f44f 7180 	mov.w	r1, #256	; 0x100
   29a9e:	483e      	ldr	r0, [pc, #248]	; (29b98 <pdn_interface_connect+0x2c4>)
   29aa0:	f008 fb60 	bl	32164 <sniprintf>
   29aa4:	4601      	mov	r1, r0
   29aa6:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   29aaa:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   29aae:	681b      	ldr	r3, [r3, #0]
   29ab0:	4a42      	ldr	r2, [pc, #264]	; (29bbc <pdn_interface_connect+0x2e8>)
   29ab2:	1830      	adds	r0, r6, r0
   29ab4:	f008 fb56 	bl	32164 <sniprintf>
   29ab8:	4837      	ldr	r0, [pc, #220]	; (29b98 <pdn_interface_connect+0x2c4>)
   29aba:	f8da 6000 	ldr.w	r6, [sl]
   29abe:	f7f3 fb17 	bl	1d0f0 <strlen>
   29ac2:	4623      	mov	r3, r4
   29ac4:	4602      	mov	r2, r0
   29ac6:	4934      	ldr	r1, [pc, #208]	; (29b98 <pdn_interface_connect+0x2c4>)
   29ac8:	4630      	mov	r0, r6
   29aca:	9401      	str	r4, [sp, #4]
   29acc:	9400      	str	r4, [sp, #0]
   29ace:	f7fc fdf1 	bl	266b4 <at_interface_write>
   29ad2:	4606      	mov	r6, r0
   29ad4:	4830      	ldr	r0, [pc, #192]	; (29b98 <pdn_interface_connect+0x2c4>)
   29ad6:	f7f3 fb0b 	bl	1d0f0 <strlen>
   29ada:	42b0      	cmp	r0, r6
   29adc:	d153      	bne.n	29b86 <pdn_interface_connect+0x2b2>
   29ade:	4623      	mov	r3, r4
   29ae0:	f44f 7280 	mov.w	r2, #256	; 0x100
   29ae4:	492c      	ldr	r1, [pc, #176]	; (29b98 <pdn_interface_connect+0x2c4>)
   29ae6:	f8da 0000 	ldr.w	r0, [sl]
   29aea:	e9cd 4400 	strd	r4, r4, [sp]
   29aee:	f7fc fee5 	bl	268bc <at_interface_read>
   29af2:	4606      	mov	r6, r0
   29af4:	4833      	ldr	r0, [pc, #204]	; (29bc4 <pdn_interface_connect+0x2f0>)
   29af6:	f7f3 fafb 	bl	1d0f0 <strlen>
   29afa:	4286      	cmp	r6, r0
   29afc:	db33      	blt.n	29b66 <pdn_interface_connect+0x292>
   29afe:	4602      	mov	r2, r0
   29b00:	4925      	ldr	r1, [pc, #148]	; (29b98 <pdn_interface_connect+0x2c4>)
   29b02:	4830      	ldr	r0, [pc, #192]	; (29bc4 <pdn_interface_connect+0x2f0>)
   29b04:	f00c f93c 	bl	35d80 <strncmp>
   29b08:	bb68      	cbnz	r0, 29b66 <pdn_interface_connect+0x292>
   29b0a:	4628      	mov	r0, r5
   29b0c:	4922      	ldr	r1, [pc, #136]	; (29b98 <pdn_interface_connect+0x2c4>)
   29b0e:	f7ff fd9d 	bl	2964c <pdn_id_get_parser>
   29b12:	e759      	b.n	299c8 <pdn_interface_connect+0xf4>
   29b14:	482c      	ldr	r0, [pc, #176]	; (29bc8 <pdn_interface_connect+0x2f4>)
   29b16:	f7f3 faeb 	bl	1d0f0 <strlen>
   29b1a:	491f      	ldr	r1, [pc, #124]	; (29b98 <pdn_interface_connect+0x2c4>)
   29b1c:	4602      	mov	r2, r0
   29b1e:	482a      	ldr	r0, [pc, #168]	; (29bc8 <pdn_interface_connect+0x2f4>)
   29b20:	f00c f92e 	bl	35d80 <strncmp>
   29b24:	2800      	cmp	r0, #0
   29b26:	f47f af4a 	bne.w	299be <pdn_interface_connect+0xea>
   29b2a:	2008      	movs	r0, #8
   29b2c:	f7f8 ffe6 	bl	22afc <bsd_os_errno_set>
   29b30:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   29b34:	e748      	b.n	299c8 <pdn_interface_connect+0xf4>
   29b36:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   29b3a:	1930      	adds	r0, r6, r4
   29b3c:	4b23      	ldr	r3, [pc, #140]	; (29bcc <pdn_interface_connect+0x2f8>)
   29b3e:	4a1b      	ldr	r2, [pc, #108]	; (29bac <pdn_interface_connect+0x2d8>)
   29b40:	f008 fb10 	bl	32164 <sniprintf>
   29b44:	4404      	add	r4, r0
   29b46:	e718      	b.n	2997a <pdn_interface_connect+0xa6>
   29b48:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   29b4c:	2009      	movs	r0, #9
   29b4e:	f7f8 ffd5 	bl	22afc <bsd_os_errno_set>
   29b52:	4620      	mov	r0, r4
   29b54:	b003      	add	sp, #12
   29b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29b5a:	2016      	movs	r0, #22
   29b5c:	f7f8 ffce 	bl	22afc <bsd_os_errno_set>
   29b60:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   29b64:	e730      	b.n	299c8 <pdn_interface_connect+0xf4>
   29b66:	4818      	ldr	r0, [pc, #96]	; (29bc8 <pdn_interface_connect+0x2f4>)
   29b68:	f7f3 fac2 	bl	1d0f0 <strlen>
   29b6c:	490a      	ldr	r1, [pc, #40]	; (29b98 <pdn_interface_connect+0x2c4>)
   29b6e:	4602      	mov	r2, r0
   29b70:	4815      	ldr	r0, [pc, #84]	; (29bc8 <pdn_interface_connect+0x2f4>)
   29b72:	f00c f905 	bl	35d80 <strncmp>
   29b76:	b930      	cbnz	r0, 29b86 <pdn_interface_connect+0x2b2>
   29b78:	2008      	movs	r0, #8
   29b7a:	f7f8 ffbf 	bl	22afc <bsd_os_errno_set>
   29b7e:	e723      	b.n	299c8 <pdn_interface_connect+0xf4>
   29b80:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   29b84:	e720      	b.n	299c8 <pdn_interface_connect+0xf4>
   29b86:	2005      	movs	r0, #5
   29b88:	f7f8 ffb8 	bl	22afc <bsd_os_errno_set>
   29b8c:	e71c      	b.n	299c8 <pdn_interface_connect+0xf4>
   29b8e:	bf00      	nop
   29b90:	789a0000 	.word	0x789a0000
   29b94:	20022b00 	.word	0x20022b00
   29b98:	20022a00 	.word	0x20022a00
   29b9c:	00037388 	.word	0x00037388
   29ba0:	00037394 	.word	0x00037394
   29ba4:	000373a8 	.word	0x000373a8
   29ba8:	000373b0 	.word	0x000373b0
   29bac:	000373a0 	.word	0x000373a0
   29bb0:	000373e4 	.word	0x000373e4
   29bb4:	000373b4 	.word	0x000373b4
   29bb8:	000373b8 	.word	0x000373b8
   29bbc:	000373c4 	.word	0x000373c4
   29bc0:	000373c8 	.word	0x000373c8
   29bc4:	000373d8 	.word	0x000373d8
   29bc8:	0003741c 	.word	0x0003741c
   29bcc:	00037398 	.word	0x00037398
   29bd0:	200229fc 	.word	0x200229fc

00029bd4 <pdn_interface_close>:
   29bd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   29bd8:	4a64      	ldr	r2, [pc, #400]	; (29d6c <pdn_interface_close+0x198>)
   29bda:	0c03      	lsrs	r3, r0, #16
   29bdc:	041b      	lsls	r3, r3, #16
   29bde:	4293      	cmp	r3, r2
   29be0:	b083      	sub	sp, #12
   29be2:	f040 809d 	bne.w	29d20 <pdn_interface_close+0x14c>
   29be6:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   29bea:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   29bee:	2c09      	cmp	r4, #9
   29bf0:	f300 8096 	bgt.w	29d20 <pdn_interface_close+0x14c>
   29bf4:	4d5e      	ldr	r5, [pc, #376]	; (29d70 <pdn_interface_close+0x19c>)
   29bf6:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   29bfa:	2800      	cmp	r0, #0
   29bfc:	f000 8090 	beq.w	29d20 <pdn_interface_close+0x14c>
   29c00:	6883      	ldr	r3, [r0, #8]
   29c02:	2b00      	cmp	r3, #0
   29c04:	f000 808c 	beq.w	29d20 <pdn_interface_close+0x14c>
   29c08:	6883      	ldr	r3, [r0, #8]
   29c0a:	2b03      	cmp	r3, #3
   29c0c:	d008      	beq.n	29c20 <pdn_interface_close+0x4c>
   29c0e:	f7fd fb0b 	bl	27228 <nrf_free>
   29c12:	2300      	movs	r3, #0
   29c14:	4618      	mov	r0, r3
   29c16:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
   29c1a:	b003      	add	sp, #12
   29c1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   29c20:	4e54      	ldr	r6, [pc, #336]	; (29d74 <pdn_interface_close+0x1a0>)
   29c22:	4a55      	ldr	r2, [pc, #340]	; (29d78 <pdn_interface_close+0x1a4>)
   29c24:	f44f 7180 	mov.w	r1, #256	; 0x100
   29c28:	4630      	mov	r0, r6
   29c2a:	f008 fa9b 	bl	32164 <sniprintf>
   29c2e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   29c32:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   29c36:	681b      	ldr	r3, [r3, #0]
   29c38:	4a50      	ldr	r2, [pc, #320]	; (29d7c <pdn_interface_close+0x1a8>)
   29c3a:	4430      	add	r0, r6
   29c3c:	f8df 814c 	ldr.w	r8, [pc, #332]	; 29d8c <pdn_interface_close+0x1b8>
   29c40:	f008 fa90 	bl	32164 <sniprintf>
   29c44:	4630      	mov	r0, r6
   29c46:	f8d8 9000 	ldr.w	r9, [r8]
   29c4a:	2700      	movs	r7, #0
   29c4c:	f7f3 fa50 	bl	1d0f0 <strlen>
   29c50:	4631      	mov	r1, r6
   29c52:	4602      	mov	r2, r0
   29c54:	463b      	mov	r3, r7
   29c56:	4648      	mov	r0, r9
   29c58:	9701      	str	r7, [sp, #4]
   29c5a:	9700      	str	r7, [sp, #0]
   29c5c:	f7fc fd2a 	bl	266b4 <at_interface_write>
   29c60:	4681      	mov	r9, r0
   29c62:	4630      	mov	r0, r6
   29c64:	f7f3 fa44 	bl	1d0f0 <strlen>
   29c68:	4548      	cmp	r0, r9
   29c6a:	d176      	bne.n	29d5a <pdn_interface_close+0x186>
   29c6c:	463b      	mov	r3, r7
   29c6e:	e9cd 7700 	strd	r7, r7, [sp]
   29c72:	f44f 7280 	mov.w	r2, #256	; 0x100
   29c76:	4631      	mov	r1, r6
   29c78:	f8d8 0000 	ldr.w	r0, [r8]
   29c7c:	f7fc fe1e 	bl	268bc <at_interface_read>
   29c80:	4607      	mov	r7, r0
   29c82:	483f      	ldr	r0, [pc, #252]	; (29d80 <pdn_interface_close+0x1ac>)
   29c84:	f7f3 fa34 	bl	1d0f0 <strlen>
   29c88:	4287      	cmp	r7, r0
   29c8a:	da4f      	bge.n	29d2c <pdn_interface_close+0x158>
   29c8c:	483d      	ldr	r0, [pc, #244]	; (29d84 <pdn_interface_close+0x1b0>)
   29c8e:	f7f3 fa2f 	bl	1d0f0 <strlen>
   29c92:	4938      	ldr	r1, [pc, #224]	; (29d74 <pdn_interface_close+0x1a0>)
   29c94:	4602      	mov	r2, r0
   29c96:	483b      	ldr	r0, [pc, #236]	; (29d84 <pdn_interface_close+0x1b0>)
   29c98:	f00c f872 	bl	35d80 <strncmp>
   29c9c:	2800      	cmp	r0, #0
   29c9e:	d15c      	bne.n	29d5a <pdn_interface_close+0x186>
   29ca0:	2008      	movs	r0, #8
   29ca2:	f7f8 ff2b 	bl	22afc <bsd_os_errno_set>
   29ca6:	4a38      	ldr	r2, [pc, #224]	; (29d88 <pdn_interface_close+0x1b4>)
   29ca8:	f44f 7180 	mov.w	r1, #256	; 0x100
   29cac:	4831      	ldr	r0, [pc, #196]	; (29d74 <pdn_interface_close+0x1a0>)
   29cae:	f008 fa59 	bl	32164 <sniprintf>
   29cb2:	4601      	mov	r1, r0
   29cb4:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   29cb8:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   29cbc:	681b      	ldr	r3, [r3, #0]
   29cbe:	4a2f      	ldr	r2, [pc, #188]	; (29d7c <pdn_interface_close+0x1a8>)
   29cc0:	1830      	adds	r0, r6, r0
   29cc2:	f008 fa4f 	bl	32164 <sniprintf>
   29cc6:	482b      	ldr	r0, [pc, #172]	; (29d74 <pdn_interface_close+0x1a0>)
   29cc8:	f8d8 7000 	ldr.w	r7, [r8]
   29ccc:	2600      	movs	r6, #0
   29cce:	f7f3 fa0f 	bl	1d0f0 <strlen>
   29cd2:	4633      	mov	r3, r6
   29cd4:	4602      	mov	r2, r0
   29cd6:	4927      	ldr	r1, [pc, #156]	; (29d74 <pdn_interface_close+0x1a0>)
   29cd8:	4638      	mov	r0, r7
   29cda:	9601      	str	r6, [sp, #4]
   29cdc:	9600      	str	r6, [sp, #0]
   29cde:	f7fc fce9 	bl	266b4 <at_interface_write>
   29ce2:	4607      	mov	r7, r0
   29ce4:	4823      	ldr	r0, [pc, #140]	; (29d74 <pdn_interface_close+0x1a0>)
   29ce6:	f7f3 fa03 	bl	1d0f0 <strlen>
   29cea:	42b8      	cmp	r0, r7
   29cec:	d139      	bne.n	29d62 <pdn_interface_close+0x18e>
   29cee:	4633      	mov	r3, r6
   29cf0:	e9cd 6600 	strd	r6, r6, [sp]
   29cf4:	f44f 7280 	mov.w	r2, #256	; 0x100
   29cf8:	491e      	ldr	r1, [pc, #120]	; (29d74 <pdn_interface_close+0x1a0>)
   29cfa:	f8d8 0000 	ldr.w	r0, [r8]
   29cfe:	f7fc fddd 	bl	268bc <at_interface_read>
   29d02:	4606      	mov	r6, r0
   29d04:	481e      	ldr	r0, [pc, #120]	; (29d80 <pdn_interface_close+0x1ac>)
   29d06:	f7f3 f9f3 	bl	1d0f0 <strlen>
   29d0a:	4286      	cmp	r6, r0
   29d0c:	db16      	blt.n	29d3c <pdn_interface_close+0x168>
   29d0e:	4602      	mov	r2, r0
   29d10:	4918      	ldr	r1, [pc, #96]	; (29d74 <pdn_interface_close+0x1a0>)
   29d12:	481b      	ldr	r0, [pc, #108]	; (29d80 <pdn_interface_close+0x1ac>)
   29d14:	f00c f834 	bl	35d80 <strncmp>
   29d18:	b980      	cbnz	r0, 29d3c <pdn_interface_close+0x168>
   29d1a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   29d1e:	e776      	b.n	29c0e <pdn_interface_close+0x3a>
   29d20:	2009      	movs	r0, #9
   29d22:	f7f8 feeb 	bl	22afc <bsd_os_errno_set>
   29d26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   29d2a:	e776      	b.n	29c1a <pdn_interface_close+0x46>
   29d2c:	4602      	mov	r2, r0
   29d2e:	4631      	mov	r1, r6
   29d30:	4813      	ldr	r0, [pc, #76]	; (29d80 <pdn_interface_close+0x1ac>)
   29d32:	f00c f825 	bl	35d80 <strncmp>
   29d36:	2800      	cmp	r0, #0
   29d38:	d0b5      	beq.n	29ca6 <pdn_interface_close+0xd2>
   29d3a:	e7a7      	b.n	29c8c <pdn_interface_close+0xb8>
   29d3c:	4811      	ldr	r0, [pc, #68]	; (29d84 <pdn_interface_close+0x1b0>)
   29d3e:	f7f3 f9d7 	bl	1d0f0 <strlen>
   29d42:	490c      	ldr	r1, [pc, #48]	; (29d74 <pdn_interface_close+0x1a0>)
   29d44:	4602      	mov	r2, r0
   29d46:	480f      	ldr	r0, [pc, #60]	; (29d84 <pdn_interface_close+0x1b0>)
   29d48:	f00c f81a 	bl	35d80 <strncmp>
   29d4c:	b948      	cbnz	r0, 29d62 <pdn_interface_close+0x18e>
   29d4e:	2008      	movs	r0, #8
   29d50:	f7f8 fed4 	bl	22afc <bsd_os_errno_set>
   29d54:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   29d58:	e759      	b.n	29c0e <pdn_interface_close+0x3a>
   29d5a:	2005      	movs	r0, #5
   29d5c:	f7f8 fece 	bl	22afc <bsd_os_errno_set>
   29d60:	e7a1      	b.n	29ca6 <pdn_interface_close+0xd2>
   29d62:	2005      	movs	r0, #5
   29d64:	f7f8 feca 	bl	22afc <bsd_os_errno_set>
   29d68:	e7d7      	b.n	29d1a <pdn_interface_close+0x146>
   29d6a:	bf00      	nop
   29d6c:	789a0000 	.word	0x789a0000
   29d70:	20022b00 	.word	0x20022b00
   29d74:	20022a00 	.word	0x20022a00
   29d78:	0003737c 	.word	0x0003737c
   29d7c:	000373c4 	.word	0x000373c4
   29d80:	000373b4 	.word	0x000373b4
   29d84:	0003741c 	.word	0x0003741c
   29d88:	00037388 	.word	0x00037388
   29d8c:	200229fc 	.word	0x200229fc

00029d90 <pdn_interface_setopt>:
   29d90:	b510      	push	{r4, lr}
   29d92:	f240 2402 	movw	r4, #514	; 0x202
   29d96:	42a1      	cmp	r1, r4
   29d98:	d10d      	bne.n	29db6 <pdn_interface_setopt+0x26>
   29d9a:	b163      	cbz	r3, 29db6 <pdn_interface_setopt+0x26>
   29d9c:	9902      	ldr	r1, [sp, #8]
   29d9e:	b151      	cbz	r1, 29db6 <pdn_interface_setopt+0x26>
   29da0:	0c01      	lsrs	r1, r0, #16
   29da2:	4c25      	ldr	r4, [pc, #148]	; (29e38 <pdn_interface_setopt+0xa8>)
   29da4:	0409      	lsls	r1, r1, #16
   29da6:	42a1      	cmp	r1, r4
   29da8:	d00b      	beq.n	29dc2 <pdn_interface_setopt+0x32>
   29daa:	2009      	movs	r0, #9
   29dac:	f7f8 fea6 	bl	22afc <bsd_os_errno_set>
   29db0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   29db4:	bd10      	pop	{r4, pc}
   29db6:	2016      	movs	r0, #22
   29db8:	f7f8 fea0 	bl	22afc <bsd_os_errno_set>
   29dbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   29dc0:	bd10      	pop	{r4, pc}
   29dc2:	f020 40f1 	bic.w	r0, r0, #2021654528	; 0x78800000
   29dc6:	f420 10d0 	bic.w	r0, r0, #1703936	; 0x1a0000
   29dca:	2809      	cmp	r0, #9
   29dcc:	dced      	bgt.n	29daa <pdn_interface_setopt+0x1a>
   29dce:	491b      	ldr	r1, [pc, #108]	; (29e3c <pdn_interface_setopt+0xac>)
   29dd0:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   29dd4:	2900      	cmp	r1, #0
   29dd6:	d0e8      	beq.n	29daa <pdn_interface_setopt+0x1a>
   29dd8:	6888      	ldr	r0, [r1, #8]
   29dda:	2800      	cmp	r0, #0
   29ddc:	d0e5      	beq.n	29daa <pdn_interface_setopt+0x1a>
   29dde:	2a01      	cmp	r2, #1
   29de0:	d001      	beq.n	29de6 <pdn_interface_setopt+0x56>
   29de2:	202d      	movs	r0, #45	; 0x2d
   29de4:	e7e8      	b.n	29db8 <pdn_interface_setopt+0x28>
   29de6:	688a      	ldr	r2, [r1, #8]
   29de8:	b1fa      	cbz	r2, 29e2a <pdn_interface_setopt+0x9a>
   29dea:	688a      	ldr	r2, [r1, #8]
   29dec:	2a03      	cmp	r2, #3
   29dee:	d01c      	beq.n	29e2a <pdn_interface_setopt+0x9a>
   29df0:	688a      	ldr	r2, [r1, #8]
   29df2:	2a04      	cmp	r2, #4
   29df4:	d019      	beq.n	29e2a <pdn_interface_setopt+0x9a>
   29df6:	9a02      	ldr	r2, [sp, #8]
   29df8:	0890      	lsrs	r0, r2, #2
   29dfa:	1e42      	subs	r2, r0, #1
   29dfc:	2a01      	cmp	r2, #1
   29dfe:	d8da      	bhi.n	29db6 <pdn_interface_setopt+0x26>
   29e00:	9a02      	ldr	r2, [sp, #8]
   29e02:	0792      	lsls	r2, r2, #30
   29e04:	d1d7      	bne.n	29db6 <pdn_interface_setopt+0x26>
   29e06:	681a      	ldr	r2, [r3, #0]
   29e08:	2a02      	cmp	r2, #2
   29e0a:	d010      	beq.n	29e2e <pdn_interface_setopt+0x9e>
   29e0c:	2a0a      	cmp	r2, #10
   29e0e:	d1d2      	bne.n	29db6 <pdn_interface_setopt+0x26>
   29e10:	2202      	movs	r2, #2
   29e12:	2802      	cmp	r0, #2
   29e14:	d106      	bne.n	29e24 <pdn_interface_setopt+0x94>
   29e16:	685b      	ldr	r3, [r3, #4]
   29e18:	2b02      	cmp	r3, #2
   29e1a:	d00a      	beq.n	29e32 <pdn_interface_setopt+0xa2>
   29e1c:	2b0a      	cmp	r3, #10
   29e1e:	d1ca      	bne.n	29db6 <pdn_interface_setopt+0x26>
   29e20:	f042 0202 	orr.w	r2, r2, #2
   29e24:	670a      	str	r2, [r1, #112]	; 0x70
   29e26:	2000      	movs	r0, #0
   29e28:	e7c6      	b.n	29db8 <pdn_interface_setopt+0x28>
   29e2a:	200e      	movs	r0, #14
   29e2c:	e7c4      	b.n	29db8 <pdn_interface_setopt+0x28>
   29e2e:	2201      	movs	r2, #1
   29e30:	e7ef      	b.n	29e12 <pdn_interface_setopt+0x82>
   29e32:	f042 0201 	orr.w	r2, r2, #1
   29e36:	e7f5      	b.n	29e24 <pdn_interface_setopt+0x94>
   29e38:	789a0000 	.word	0x789a0000
   29e3c:	20022b00 	.word	0x20022b00

00029e40 <pdn_interface_getopt>:
   29e40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   29e44:	f240 2402 	movw	r4, #514	; 0x202
   29e48:	b083      	sub	sp, #12
   29e4a:	42a1      	cmp	r1, r4
   29e4c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   29e4e:	f040 80a9 	bne.w	29fa4 <pdn_interface_getopt+0x164>
   29e52:	461e      	mov	r6, r3
   29e54:	2b00      	cmp	r3, #0
   29e56:	f000 80a5 	beq.w	29fa4 <pdn_interface_getopt+0x164>
   29e5a:	2d00      	cmp	r5, #0
   29e5c:	f000 80a2 	beq.w	29fa4 <pdn_interface_getopt+0x164>
   29e60:	0c03      	lsrs	r3, r0, #16
   29e62:	4956      	ldr	r1, [pc, #344]	; (29fbc <pdn_interface_getopt+0x17c>)
   29e64:	041b      	lsls	r3, r3, #16
   29e66:	428b      	cmp	r3, r1
   29e68:	f040 8082 	bne.w	29f70 <pdn_interface_getopt+0x130>
   29e6c:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   29e70:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   29e74:	2c09      	cmp	r4, #9
   29e76:	dc7b      	bgt.n	29f70 <pdn_interface_getopt+0x130>
   29e78:	4b51      	ldr	r3, [pc, #324]	; (29fc0 <pdn_interface_getopt+0x180>)
   29e7a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   29e7e:	2b00      	cmp	r3, #0
   29e80:	d076      	beq.n	29f70 <pdn_interface_getopt+0x130>
   29e82:	6899      	ldr	r1, [r3, #8]
   29e84:	2900      	cmp	r1, #0
   29e86:	d073      	beq.n	29f70 <pdn_interface_getopt+0x130>
   29e88:	2a02      	cmp	r2, #2
   29e8a:	d00e      	beq.n	29eaa <pdn_interface_getopt+0x6a>
   29e8c:	2a03      	cmp	r2, #3
   29e8e:	d008      	beq.n	29ea2 <pdn_interface_getopt+0x62>
   29e90:	2a01      	cmp	r2, #1
   29e92:	d015      	beq.n	29ec0 <pdn_interface_getopt+0x80>
   29e94:	202d      	movs	r0, #45	; 0x2d
   29e96:	f7f8 fe31 	bl	22afc <bsd_os_errno_set>
   29e9a:	2000      	movs	r0, #0
   29e9c:	b003      	add	sp, #12
   29e9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   29ea2:	682b      	ldr	r3, [r5, #0]
   29ea4:	bb23      	cbnz	r3, 29ef0 <pdn_interface_getopt+0xb0>
   29ea6:	2016      	movs	r0, #22
   29ea8:	e7f5      	b.n	29e96 <pdn_interface_getopt+0x56>
   29eaa:	682a      	ldr	r2, [r5, #0]
   29eac:	2a00      	cmp	r2, #0
   29eae:	d0fa      	beq.n	29ea6 <pdn_interface_getopt+0x66>
   29eb0:	2201      	movs	r2, #1
   29eb2:	2000      	movs	r0, #0
   29eb4:	681b      	ldr	r3, [r3, #0]
   29eb6:	7033      	strb	r3, [r6, #0]
   29eb8:	602a      	str	r2, [r5, #0]
   29eba:	b003      	add	sp, #12
   29ebc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   29ec0:	689a      	ldr	r2, [r3, #8]
   29ec2:	2a00      	cmp	r2, #0
   29ec4:	d052      	beq.n	29f6c <pdn_interface_getopt+0x12c>
   29ec6:	689a      	ldr	r2, [r3, #8]
   29ec8:	2a04      	cmp	r2, #4
   29eca:	d04f      	beq.n	29f6c <pdn_interface_getopt+0x12c>
   29ecc:	682a      	ldr	r2, [r5, #0]
   29ece:	2a07      	cmp	r2, #7
   29ed0:	d9e9      	bls.n	29ea6 <pdn_interface_getopt+0x66>
   29ed2:	f012 0203 	ands.w	r2, r2, #3
   29ed6:	d1e6      	bne.n	29ea6 <pdn_interface_getopt+0x66>
   29ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   29eda:	0799      	lsls	r1, r3, #30
   29edc:	d45d      	bmi.n	29f9a <pdn_interface_getopt+0x15a>
   29ede:	2104      	movs	r1, #4
   29ee0:	07db      	lsls	r3, r3, #31
   29ee2:	d502      	bpl.n	29eea <pdn_interface_getopt+0xaa>
   29ee4:	2302      	movs	r3, #2
   29ee6:	50b3      	str	r3, [r6, r2]
   29ee8:	460a      	mov	r2, r1
   29eea:	602a      	str	r2, [r5, #0]
   29eec:	2000      	movs	r0, #0
   29eee:	e7d5      	b.n	29e9c <pdn_interface_getopt+0x5c>
   29ef0:	4a34      	ldr	r2, [pc, #208]	; (29fc4 <pdn_interface_getopt+0x184>)
   29ef2:	f44f 7180 	mov.w	r1, #256	; 0x100
   29ef6:	4834      	ldr	r0, [pc, #208]	; (29fc8 <pdn_interface_getopt+0x188>)
   29ef8:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 29fd4 <pdn_interface_getopt+0x194>
   29efc:	f008 f932 	bl	32164 <sniprintf>
   29f00:	4831      	ldr	r0, [pc, #196]	; (29fc8 <pdn_interface_getopt+0x188>)
   29f02:	f8d8 9000 	ldr.w	r9, [r8]
   29f06:	2700      	movs	r7, #0
   29f08:	f7f3 f8f2 	bl	1d0f0 <strlen>
   29f0c:	463b      	mov	r3, r7
   29f0e:	4602      	mov	r2, r0
   29f10:	492d      	ldr	r1, [pc, #180]	; (29fc8 <pdn_interface_getopt+0x188>)
   29f12:	4648      	mov	r0, r9
   29f14:	9701      	str	r7, [sp, #4]
   29f16:	9700      	str	r7, [sp, #0]
   29f18:	f7fc fbcc 	bl	266b4 <at_interface_write>
   29f1c:	4681      	mov	r9, r0
   29f1e:	482a      	ldr	r0, [pc, #168]	; (29fc8 <pdn_interface_getopt+0x188>)
   29f20:	f7f3 f8e6 	bl	1d0f0 <strlen>
   29f24:	4548      	cmp	r0, r9
   29f26:	d143      	bne.n	29fb0 <pdn_interface_getopt+0x170>
   29f28:	463b      	mov	r3, r7
   29f2a:	e9cd 7700 	strd	r7, r7, [sp]
   29f2e:	f44f 7280 	mov.w	r2, #256	; 0x100
   29f32:	4925      	ldr	r1, [pc, #148]	; (29fc8 <pdn_interface_getopt+0x188>)
   29f34:	f8d8 0000 	ldr.w	r0, [r8]
   29f38:	f7fc fcc0 	bl	268bc <at_interface_read>
   29f3c:	4607      	mov	r7, r0
   29f3e:	4823      	ldr	r0, [pc, #140]	; (29fcc <pdn_interface_getopt+0x18c>)
   29f40:	f7f3 f8d6 	bl	1d0f0 <strlen>
   29f44:	4287      	cmp	r7, r0
   29f46:	db19      	blt.n	29f7c <pdn_interface_getopt+0x13c>
   29f48:	4602      	mov	r2, r0
   29f4a:	491f      	ldr	r1, [pc, #124]	; (29fc8 <pdn_interface_getopt+0x188>)
   29f4c:	481f      	ldr	r0, [pc, #124]	; (29fcc <pdn_interface_getopt+0x18c>)
   29f4e:	f00b ff17 	bl	35d80 <strncmp>
   29f52:	4607      	mov	r7, r0
   29f54:	b990      	cbnz	r0, 29f7c <pdn_interface_getopt+0x13c>
   29f56:	4620      	mov	r0, r4
   29f58:	491b      	ldr	r1, [pc, #108]	; (29fc8 <pdn_interface_getopt+0x188>)
   29f5a:	f7ff fb41 	bl	295e0 <pdn_state_get_parser>
   29f5e:	2800      	cmp	r0, #0
   29f60:	db99      	blt.n	29e96 <pdn_interface_getopt+0x56>
   29f62:	2301      	movs	r3, #1
   29f64:	7030      	strb	r0, [r6, #0]
   29f66:	4638      	mov	r0, r7
   29f68:	602b      	str	r3, [r5, #0]
   29f6a:	e797      	b.n	29e9c <pdn_interface_getopt+0x5c>
   29f6c:	200e      	movs	r0, #14
   29f6e:	e792      	b.n	29e96 <pdn_interface_getopt+0x56>
   29f70:	2009      	movs	r0, #9
   29f72:	f7f8 fdc3 	bl	22afc <bsd_os_errno_set>
   29f76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   29f7a:	e78f      	b.n	29e9c <pdn_interface_getopt+0x5c>
   29f7c:	4814      	ldr	r0, [pc, #80]	; (29fd0 <pdn_interface_getopt+0x190>)
   29f7e:	f7f3 f8b7 	bl	1d0f0 <strlen>
   29f82:	4911      	ldr	r1, [pc, #68]	; (29fc8 <pdn_interface_getopt+0x188>)
   29f84:	4602      	mov	r2, r0
   29f86:	4812      	ldr	r0, [pc, #72]	; (29fd0 <pdn_interface_getopt+0x190>)
   29f88:	f00b fefa 	bl	35d80 <strncmp>
   29f8c:	b980      	cbnz	r0, 29fb0 <pdn_interface_getopt+0x170>
   29f8e:	2008      	movs	r0, #8
   29f90:	f7f8 fdb4 	bl	22afc <bsd_os_errno_set>
   29f94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   29f98:	e77d      	b.n	29e96 <pdn_interface_getopt+0x56>
   29f9a:	220a      	movs	r2, #10
   29f9c:	2108      	movs	r1, #8
   29f9e:	6032      	str	r2, [r6, #0]
   29fa0:	2204      	movs	r2, #4
   29fa2:	e79d      	b.n	29ee0 <pdn_interface_getopt+0xa0>
   29fa4:	2016      	movs	r0, #22
   29fa6:	f7f8 fda9 	bl	22afc <bsd_os_errno_set>
   29faa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   29fae:	e775      	b.n	29e9c <pdn_interface_getopt+0x5c>
   29fb0:	2005      	movs	r0, #5
   29fb2:	f7f8 fda3 	bl	22afc <bsd_os_errno_set>
   29fb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   29fba:	e76c      	b.n	29e96 <pdn_interface_getopt+0x56>
   29fbc:	789a0000 	.word	0x789a0000
   29fc0:	20022b00 	.word	0x20022b00
   29fc4:	000373ec 	.word	0x000373ec
   29fc8:	20022a00 	.word	0x20022a00
   29fcc:	000373f8 	.word	0x000373f8
   29fd0:	0003741c 	.word	0x0003741c
   29fd4:	200229fc 	.word	0x200229fc

00029fd8 <pdn_interface_pdn_id_get>:
   29fd8:	2900      	cmp	r1, #0
   29fda:	f000 83b9 	beq.w	2a750 <pdn_interface_pdn_id_get+0x778>
   29fde:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   29fe2:	4ca3      	ldr	r4, [pc, #652]	; (2a270 <pdn_interface_pdn_id_get+0x298>)
   29fe4:	2802      	cmp	r0, #2
   29fe6:	b083      	sub	sp, #12
   29fe8:	460d      	mov	r5, r1
   29fea:	6823      	ldr	r3, [r4, #0]
   29fec:	f000 8094 	beq.w	2a118 <pdn_interface_pdn_id_get+0x140>
   29ff0:	280a      	cmp	r0, #10
   29ff2:	d03f      	beq.n	2a074 <pdn_interface_pdn_id_get+0x9c>
   29ff4:	b11b      	cbz	r3, 29ffe <pdn_interface_pdn_id_get+0x26>
   29ff6:	689b      	ldr	r3, [r3, #8]
   29ff8:	2b03      	cmp	r3, #3
   29ffa:	f000 8127 	beq.w	2a24c <pdn_interface_pdn_id_get+0x274>
   29ffe:	6863      	ldr	r3, [r4, #4]
   2a000:	b11b      	cbz	r3, 2a00a <pdn_interface_pdn_id_get+0x32>
   2a002:	689b      	ldr	r3, [r3, #8]
   2a004:	2b03      	cmp	r3, #3
   2a006:	f000 8110 	beq.w	2a22a <pdn_interface_pdn_id_get+0x252>
   2a00a:	68a3      	ldr	r3, [r4, #8]
   2a00c:	b11b      	cbz	r3, 2a016 <pdn_interface_pdn_id_get+0x3e>
   2a00e:	689b      	ldr	r3, [r3, #8]
   2a010:	2b03      	cmp	r3, #3
   2a012:	f000 80f9 	beq.w	2a208 <pdn_interface_pdn_id_get+0x230>
   2a016:	68e3      	ldr	r3, [r4, #12]
   2a018:	b11b      	cbz	r3, 2a022 <pdn_interface_pdn_id_get+0x4a>
   2a01a:	689b      	ldr	r3, [r3, #8]
   2a01c:	2b03      	cmp	r3, #3
   2a01e:	f000 80e2 	beq.w	2a1e6 <pdn_interface_pdn_id_get+0x20e>
   2a022:	6923      	ldr	r3, [r4, #16]
   2a024:	b11b      	cbz	r3, 2a02e <pdn_interface_pdn_id_get+0x56>
   2a026:	689b      	ldr	r3, [r3, #8]
   2a028:	2b03      	cmp	r3, #3
   2a02a:	f000 8123 	beq.w	2a274 <pdn_interface_pdn_id_get+0x29c>
   2a02e:	6963      	ldr	r3, [r4, #20]
   2a030:	b11b      	cbz	r3, 2a03a <pdn_interface_pdn_id_get+0x62>
   2a032:	689b      	ldr	r3, [r3, #8]
   2a034:	2b03      	cmp	r3, #3
   2a036:	f000 8161 	beq.w	2a2fc <pdn_interface_pdn_id_get+0x324>
   2a03a:	69a3      	ldr	r3, [r4, #24]
   2a03c:	b11b      	cbz	r3, 2a046 <pdn_interface_pdn_id_get+0x6e>
   2a03e:	689b      	ldr	r3, [r3, #8]
   2a040:	2b03      	cmp	r3, #3
   2a042:	f000 814a 	beq.w	2a2da <pdn_interface_pdn_id_get+0x302>
   2a046:	69e3      	ldr	r3, [r4, #28]
   2a048:	b11b      	cbz	r3, 2a052 <pdn_interface_pdn_id_get+0x7a>
   2a04a:	689b      	ldr	r3, [r3, #8]
   2a04c:	2b03      	cmp	r3, #3
   2a04e:	f000 8133 	beq.w	2a2b8 <pdn_interface_pdn_id_get+0x2e0>
   2a052:	6a23      	ldr	r3, [r4, #32]
   2a054:	b11b      	cbz	r3, 2a05e <pdn_interface_pdn_id_get+0x86>
   2a056:	689b      	ldr	r3, [r3, #8]
   2a058:	2b03      	cmp	r3, #3
   2a05a:	f000 811c 	beq.w	2a296 <pdn_interface_pdn_id_get+0x2be>
   2a05e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2a060:	b11b      	cbz	r3, 2a06a <pdn_interface_pdn_id_get+0x92>
   2a062:	689b      	ldr	r3, [r3, #8]
   2a064:	2b03      	cmp	r3, #3
   2a066:	f000 80ad 	beq.w	2a1c4 <pdn_interface_pdn_id_get+0x1ec>
   2a06a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a06e:	b003      	add	sp, #12
   2a070:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2a074:	b11b      	cbz	r3, 2a07e <pdn_interface_pdn_id_get+0xa6>
   2a076:	689b      	ldr	r3, [r3, #8]
   2a078:	2b03      	cmp	r3, #3
   2a07a:	f000 8335 	beq.w	2a6e8 <pdn_interface_pdn_id_get+0x710>
   2a07e:	6863      	ldr	r3, [r4, #4]
   2a080:	b11b      	cbz	r3, 2a08a <pdn_interface_pdn_id_get+0xb2>
   2a082:	689b      	ldr	r3, [r3, #8]
   2a084:	2b03      	cmp	r3, #3
   2a086:	f000 82fd 	beq.w	2a684 <pdn_interface_pdn_id_get+0x6ac>
   2a08a:	68a3      	ldr	r3, [r4, #8]
   2a08c:	b11b      	cbz	r3, 2a096 <pdn_interface_pdn_id_get+0xbe>
   2a08e:	689b      	ldr	r3, [r3, #8]
   2a090:	2b03      	cmp	r3, #3
   2a092:	f000 82d5 	beq.w	2a640 <pdn_interface_pdn_id_get+0x668>
   2a096:	68e3      	ldr	r3, [r4, #12]
   2a098:	b11b      	cbz	r3, 2a0a2 <pdn_interface_pdn_id_get+0xca>
   2a09a:	689e      	ldr	r6, [r3, #8]
   2a09c:	2e03      	cmp	r6, #3
   2a09e:	f000 81f0 	beq.w	2a482 <pdn_interface_pdn_id_get+0x4aa>
   2a0a2:	6923      	ldr	r3, [r4, #16]
   2a0a4:	b11b      	cbz	r3, 2a0ae <pdn_interface_pdn_id_get+0xd6>
   2a0a6:	689b      	ldr	r3, [r3, #8]
   2a0a8:	2b03      	cmp	r3, #3
   2a0aa:	f000 8203 	beq.w	2a4b4 <pdn_interface_pdn_id_get+0x4dc>
   2a0ae:	6963      	ldr	r3, [r4, #20]
   2a0b0:	b11b      	cbz	r3, 2a0ba <pdn_interface_pdn_id_get+0xe2>
   2a0b2:	689b      	ldr	r3, [r3, #8]
   2a0b4:	2b03      	cmp	r3, #3
   2a0b6:	f000 8215 	beq.w	2a4e4 <pdn_interface_pdn_id_get+0x50c>
   2a0ba:	69a3      	ldr	r3, [r4, #24]
   2a0bc:	b11b      	cbz	r3, 2a0c6 <pdn_interface_pdn_id_get+0xee>
   2a0be:	689b      	ldr	r3, [r3, #8]
   2a0c0:	2b03      	cmp	r3, #3
   2a0c2:	f000 8227 	beq.w	2a514 <pdn_interface_pdn_id_get+0x53c>
   2a0c6:	69e3      	ldr	r3, [r4, #28]
   2a0c8:	b11b      	cbz	r3, 2a0d2 <pdn_interface_pdn_id_get+0xfa>
   2a0ca:	689b      	ldr	r3, [r3, #8]
   2a0cc:	2b03      	cmp	r3, #3
   2a0ce:	f000 8239 	beq.w	2a544 <pdn_interface_pdn_id_get+0x56c>
   2a0d2:	6a23      	ldr	r3, [r4, #32]
   2a0d4:	b11b      	cbz	r3, 2a0de <pdn_interface_pdn_id_get+0x106>
   2a0d6:	689b      	ldr	r3, [r3, #8]
   2a0d8:	2b03      	cmp	r3, #3
   2a0da:	f000 824d 	beq.w	2a578 <pdn_interface_pdn_id_get+0x5a0>
   2a0de:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2a0e0:	2b00      	cmp	r3, #0
   2a0e2:	d0c2      	beq.n	2a06a <pdn_interface_pdn_id_get+0x92>
   2a0e4:	689b      	ldr	r3, [r3, #8]
   2a0e6:	2b03      	cmp	r3, #3
   2a0e8:	d1bf      	bne.n	2a06a <pdn_interface_pdn_id_get+0x92>
   2a0ea:	4628      	mov	r0, r5
   2a0ec:	f7f3 f800 	bl	1d0f0 <strlen>
   2a0f0:	4606      	mov	r6, r0
   2a0f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
   2a0f4:	300c      	adds	r0, #12
   2a0f6:	f7f2 fffb 	bl	1d0f0 <strlen>
   2a0fa:	42b0      	cmp	r0, r6
   2a0fc:	d1b5      	bne.n	2a06a <pdn_interface_pdn_id_get+0x92>
   2a0fe:	6a61      	ldr	r1, [r4, #36]	; 0x24
   2a100:	4628      	mov	r0, r5
   2a102:	310c      	adds	r1, #12
   2a104:	f7f2 ffea 	bl	1d0dc <strcmp>
   2a108:	2800      	cmp	r0, #0
   2a10a:	d1ae      	bne.n	2a06a <pdn_interface_pdn_id_get+0x92>
   2a10c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2a10e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   2a110:	0792      	lsls	r2, r2, #30
   2a112:	d5aa      	bpl.n	2a06a <pdn_interface_pdn_id_get+0x92>
   2a114:	2609      	movs	r6, #9
   2a116:	e11a      	b.n	2a34e <pdn_interface_pdn_id_get+0x376>
   2a118:	b11b      	cbz	r3, 2a122 <pdn_interface_pdn_id_get+0x14a>
   2a11a:	689b      	ldr	r3, [r3, #8]
   2a11c:	2b03      	cmp	r3, #3
   2a11e:	f000 82fd 	beq.w	2a71c <pdn_interface_pdn_id_get+0x744>
   2a122:	6863      	ldr	r3, [r4, #4]
   2a124:	b11b      	cbz	r3, 2a12e <pdn_interface_pdn_id_get+0x156>
   2a126:	689b      	ldr	r3, [r3, #8]
   2a128:	2b03      	cmp	r3, #3
   2a12a:	f000 82c5 	beq.w	2a6b8 <pdn_interface_pdn_id_get+0x6e0>
   2a12e:	68a3      	ldr	r3, [r4, #8]
   2a130:	b11b      	cbz	r3, 2a13a <pdn_interface_pdn_id_get+0x162>
   2a132:	689b      	ldr	r3, [r3, #8]
   2a134:	2b03      	cmp	r3, #3
   2a136:	f000 8269 	beq.w	2a60c <pdn_interface_pdn_id_get+0x634>
   2a13a:	68e3      	ldr	r3, [r4, #12]
   2a13c:	b11b      	cbz	r3, 2a146 <pdn_interface_pdn_id_get+0x16e>
   2a13e:	689e      	ldr	r6, [r3, #8]
   2a140:	2e03      	cmp	r6, #3
   2a142:	f000 80ec 	beq.w	2a31e <pdn_interface_pdn_id_get+0x346>
   2a146:	6923      	ldr	r3, [r4, #16]
   2a148:	b11b      	cbz	r3, 2a152 <pdn_interface_pdn_id_get+0x17a>
   2a14a:	689b      	ldr	r3, [r3, #8]
   2a14c:	2b03      	cmp	r3, #3
   2a14e:	f000 814a 	beq.w	2a3e6 <pdn_interface_pdn_id_get+0x40e>
   2a152:	6963      	ldr	r3, [r4, #20]
   2a154:	b11b      	cbz	r3, 2a15e <pdn_interface_pdn_id_get+0x186>
   2a156:	689b      	ldr	r3, [r3, #8]
   2a158:	2b03      	cmp	r3, #3
   2a15a:	f000 815e 	beq.w	2a41a <pdn_interface_pdn_id_get+0x442>
   2a15e:	69a3      	ldr	r3, [r4, #24]
   2a160:	b11b      	cbz	r3, 2a16a <pdn_interface_pdn_id_get+0x192>
   2a162:	689b      	ldr	r3, [r3, #8]
   2a164:	2b03      	cmp	r3, #3
   2a166:	f000 8172 	beq.w	2a44e <pdn_interface_pdn_id_get+0x476>
   2a16a:	69e3      	ldr	r3, [r4, #28]
   2a16c:	b11b      	cbz	r3, 2a176 <pdn_interface_pdn_id_get+0x19e>
   2a16e:	689b      	ldr	r3, [r3, #8]
   2a170:	2b03      	cmp	r3, #3
   2a172:	f000 821b 	beq.w	2a5ac <pdn_interface_pdn_id_get+0x5d4>
   2a176:	6a23      	ldr	r3, [r4, #32]
   2a178:	b11b      	cbz	r3, 2a182 <pdn_interface_pdn_id_get+0x1aa>
   2a17a:	689b      	ldr	r3, [r3, #8]
   2a17c:	2b03      	cmp	r3, #3
   2a17e:	f000 822d 	beq.w	2a5dc <pdn_interface_pdn_id_get+0x604>
   2a182:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2a184:	2b00      	cmp	r3, #0
   2a186:	f43f af70 	beq.w	2a06a <pdn_interface_pdn_id_get+0x92>
   2a18a:	689b      	ldr	r3, [r3, #8]
   2a18c:	2b03      	cmp	r3, #3
   2a18e:	f47f af6c 	bne.w	2a06a <pdn_interface_pdn_id_get+0x92>
   2a192:	4628      	mov	r0, r5
   2a194:	f7f2 ffac 	bl	1d0f0 <strlen>
   2a198:	4606      	mov	r6, r0
   2a19a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   2a19c:	300c      	adds	r0, #12
   2a19e:	f7f2 ffa7 	bl	1d0f0 <strlen>
   2a1a2:	4286      	cmp	r6, r0
   2a1a4:	f47f af61 	bne.w	2a06a <pdn_interface_pdn_id_get+0x92>
   2a1a8:	6a61      	ldr	r1, [r4, #36]	; 0x24
   2a1aa:	4628      	mov	r0, r5
   2a1ac:	310c      	adds	r1, #12
   2a1ae:	f7f2 ff95 	bl	1d0dc <strcmp>
   2a1b2:	2800      	cmp	r0, #0
   2a1b4:	f47f af59 	bne.w	2a06a <pdn_interface_pdn_id_get+0x92>
   2a1b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2a1ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   2a1bc:	07d2      	lsls	r2, r2, #31
   2a1be:	f57f af54 	bpl.w	2a06a <pdn_interface_pdn_id_get+0x92>
   2a1c2:	e7a7      	b.n	2a114 <pdn_interface_pdn_id_get+0x13c>
   2a1c4:	4628      	mov	r0, r5
   2a1c6:	f7f2 ff93 	bl	1d0f0 <strlen>
   2a1ca:	4606      	mov	r6, r0
   2a1cc:	6a60      	ldr	r0, [r4, #36]	; 0x24
   2a1ce:	300c      	adds	r0, #12
   2a1d0:	f7f2 ff8e 	bl	1d0f0 <strlen>
   2a1d4:	42b0      	cmp	r0, r6
   2a1d6:	f47f af48 	bne.w	2a06a <pdn_interface_pdn_id_get+0x92>
   2a1da:	6a61      	ldr	r1, [r4, #36]	; 0x24
   2a1dc:	4628      	mov	r0, r5
   2a1de:	310c      	adds	r1, #12
   2a1e0:	f7f2 ff7c 	bl	1d0dc <strcmp>
   2a1e4:	e741      	b.n	2a06a <pdn_interface_pdn_id_get+0x92>
   2a1e6:	4628      	mov	r0, r5
   2a1e8:	f7f2 ff82 	bl	1d0f0 <strlen>
   2a1ec:	4606      	mov	r6, r0
   2a1ee:	68e0      	ldr	r0, [r4, #12]
   2a1f0:	300c      	adds	r0, #12
   2a1f2:	f7f2 ff7d 	bl	1d0f0 <strlen>
   2a1f6:	4286      	cmp	r6, r0
   2a1f8:	f47f af13 	bne.w	2a022 <pdn_interface_pdn_id_get+0x4a>
   2a1fc:	68e1      	ldr	r1, [r4, #12]
   2a1fe:	4628      	mov	r0, r5
   2a200:	310c      	adds	r1, #12
   2a202:	f7f2 ff6b 	bl	1d0dc <strcmp>
   2a206:	e70c      	b.n	2a022 <pdn_interface_pdn_id_get+0x4a>
   2a208:	4628      	mov	r0, r5
   2a20a:	f7f2 ff71 	bl	1d0f0 <strlen>
   2a20e:	4606      	mov	r6, r0
   2a210:	68a0      	ldr	r0, [r4, #8]
   2a212:	300c      	adds	r0, #12
   2a214:	f7f2 ff6c 	bl	1d0f0 <strlen>
   2a218:	4286      	cmp	r6, r0
   2a21a:	f47f aefc 	bne.w	2a016 <pdn_interface_pdn_id_get+0x3e>
   2a21e:	68a1      	ldr	r1, [r4, #8]
   2a220:	4628      	mov	r0, r5
   2a222:	310c      	adds	r1, #12
   2a224:	f7f2 ff5a 	bl	1d0dc <strcmp>
   2a228:	e6f5      	b.n	2a016 <pdn_interface_pdn_id_get+0x3e>
   2a22a:	4628      	mov	r0, r5
   2a22c:	f7f2 ff60 	bl	1d0f0 <strlen>
   2a230:	4606      	mov	r6, r0
   2a232:	6860      	ldr	r0, [r4, #4]
   2a234:	300c      	adds	r0, #12
   2a236:	f7f2 ff5b 	bl	1d0f0 <strlen>
   2a23a:	4286      	cmp	r6, r0
   2a23c:	f47f aee5 	bne.w	2a00a <pdn_interface_pdn_id_get+0x32>
   2a240:	6861      	ldr	r1, [r4, #4]
   2a242:	4628      	mov	r0, r5
   2a244:	310c      	adds	r1, #12
   2a246:	f7f2 ff49 	bl	1d0dc <strcmp>
   2a24a:	e6de      	b.n	2a00a <pdn_interface_pdn_id_get+0x32>
   2a24c:	4608      	mov	r0, r1
   2a24e:	f7f2 ff4f 	bl	1d0f0 <strlen>
   2a252:	4606      	mov	r6, r0
   2a254:	6820      	ldr	r0, [r4, #0]
   2a256:	300c      	adds	r0, #12
   2a258:	f7f2 ff4a 	bl	1d0f0 <strlen>
   2a25c:	4286      	cmp	r6, r0
   2a25e:	f47f aece 	bne.w	29ffe <pdn_interface_pdn_id_get+0x26>
   2a262:	6821      	ldr	r1, [r4, #0]
   2a264:	4628      	mov	r0, r5
   2a266:	310c      	adds	r1, #12
   2a268:	f7f2 ff38 	bl	1d0dc <strcmp>
   2a26c:	e6c7      	b.n	29ffe <pdn_interface_pdn_id_get+0x26>
   2a26e:	bf00      	nop
   2a270:	20022b00 	.word	0x20022b00
   2a274:	4628      	mov	r0, r5
   2a276:	f7f2 ff3b 	bl	1d0f0 <strlen>
   2a27a:	4606      	mov	r6, r0
   2a27c:	6920      	ldr	r0, [r4, #16]
   2a27e:	300c      	adds	r0, #12
   2a280:	f7f2 ff36 	bl	1d0f0 <strlen>
   2a284:	4286      	cmp	r6, r0
   2a286:	f47f aed2 	bne.w	2a02e <pdn_interface_pdn_id_get+0x56>
   2a28a:	6921      	ldr	r1, [r4, #16]
   2a28c:	4628      	mov	r0, r5
   2a28e:	310c      	adds	r1, #12
   2a290:	f7f2 ff24 	bl	1d0dc <strcmp>
   2a294:	e6cb      	b.n	2a02e <pdn_interface_pdn_id_get+0x56>
   2a296:	4628      	mov	r0, r5
   2a298:	f7f2 ff2a 	bl	1d0f0 <strlen>
   2a29c:	4606      	mov	r6, r0
   2a29e:	6a20      	ldr	r0, [r4, #32]
   2a2a0:	300c      	adds	r0, #12
   2a2a2:	f7f2 ff25 	bl	1d0f0 <strlen>
   2a2a6:	4286      	cmp	r6, r0
   2a2a8:	f47f aed9 	bne.w	2a05e <pdn_interface_pdn_id_get+0x86>
   2a2ac:	6a21      	ldr	r1, [r4, #32]
   2a2ae:	4628      	mov	r0, r5
   2a2b0:	310c      	adds	r1, #12
   2a2b2:	f7f2 ff13 	bl	1d0dc <strcmp>
   2a2b6:	e6d2      	b.n	2a05e <pdn_interface_pdn_id_get+0x86>
   2a2b8:	4628      	mov	r0, r5
   2a2ba:	f7f2 ff19 	bl	1d0f0 <strlen>
   2a2be:	4606      	mov	r6, r0
   2a2c0:	69e0      	ldr	r0, [r4, #28]
   2a2c2:	300c      	adds	r0, #12
   2a2c4:	f7f2 ff14 	bl	1d0f0 <strlen>
   2a2c8:	4286      	cmp	r6, r0
   2a2ca:	f47f aec2 	bne.w	2a052 <pdn_interface_pdn_id_get+0x7a>
   2a2ce:	69e1      	ldr	r1, [r4, #28]
   2a2d0:	4628      	mov	r0, r5
   2a2d2:	310c      	adds	r1, #12
   2a2d4:	f7f2 ff02 	bl	1d0dc <strcmp>
   2a2d8:	e6bb      	b.n	2a052 <pdn_interface_pdn_id_get+0x7a>
   2a2da:	4628      	mov	r0, r5
   2a2dc:	f7f2 ff08 	bl	1d0f0 <strlen>
   2a2e0:	4606      	mov	r6, r0
   2a2e2:	69a0      	ldr	r0, [r4, #24]
   2a2e4:	300c      	adds	r0, #12
   2a2e6:	f7f2 ff03 	bl	1d0f0 <strlen>
   2a2ea:	4286      	cmp	r6, r0
   2a2ec:	f47f aeab 	bne.w	2a046 <pdn_interface_pdn_id_get+0x6e>
   2a2f0:	69a1      	ldr	r1, [r4, #24]
   2a2f2:	4628      	mov	r0, r5
   2a2f4:	310c      	adds	r1, #12
   2a2f6:	f7f2 fef1 	bl	1d0dc <strcmp>
   2a2fa:	e6a4      	b.n	2a046 <pdn_interface_pdn_id_get+0x6e>
   2a2fc:	4628      	mov	r0, r5
   2a2fe:	f7f2 fef7 	bl	1d0f0 <strlen>
   2a302:	4606      	mov	r6, r0
   2a304:	6960      	ldr	r0, [r4, #20]
   2a306:	300c      	adds	r0, #12
   2a308:	f7f2 fef2 	bl	1d0f0 <strlen>
   2a30c:	4286      	cmp	r6, r0
   2a30e:	f47f ae94 	bne.w	2a03a <pdn_interface_pdn_id_get+0x62>
   2a312:	6961      	ldr	r1, [r4, #20]
   2a314:	4628      	mov	r0, r5
   2a316:	310c      	adds	r1, #12
   2a318:	f7f2 fee0 	bl	1d0dc <strcmp>
   2a31c:	e68d      	b.n	2a03a <pdn_interface_pdn_id_get+0x62>
   2a31e:	4628      	mov	r0, r5
   2a320:	f7f2 fee6 	bl	1d0f0 <strlen>
   2a324:	4607      	mov	r7, r0
   2a326:	68e0      	ldr	r0, [r4, #12]
   2a328:	300c      	adds	r0, #12
   2a32a:	f7f2 fee1 	bl	1d0f0 <strlen>
   2a32e:	4287      	cmp	r7, r0
   2a330:	f47f af09 	bne.w	2a146 <pdn_interface_pdn_id_get+0x16e>
   2a334:	68e1      	ldr	r1, [r4, #12]
   2a336:	4628      	mov	r0, r5
   2a338:	310c      	adds	r1, #12
   2a33a:	f7f2 fecf 	bl	1d0dc <strcmp>
   2a33e:	2800      	cmp	r0, #0
   2a340:	f47f af01 	bne.w	2a146 <pdn_interface_pdn_id_get+0x16e>
   2a344:	68e3      	ldr	r3, [r4, #12]
   2a346:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   2a348:	07d1      	lsls	r1, r2, #31
   2a34a:	f57f aefc 	bpl.w	2a146 <pdn_interface_pdn_id_get+0x16e>
   2a34e:	6858      	ldr	r0, [r3, #4]
   2a350:	1c43      	adds	r3, r0, #1
   2a352:	f47f ae8c 	bne.w	2a06e <pdn_interface_pdn_id_get+0x96>
   2a356:	4dc6      	ldr	r5, [pc, #792]	; (2a670 <pdn_interface_pdn_id_get+0x698>)
   2a358:	4ac6      	ldr	r2, [pc, #792]	; (2a674 <pdn_interface_pdn_id_get+0x69c>)
   2a35a:	f44f 7180 	mov.w	r1, #256	; 0x100
   2a35e:	4628      	mov	r0, r5
   2a360:	f007 ff00 	bl	32164 <sniprintf>
   2a364:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   2a368:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   2a36c:	681b      	ldr	r3, [r3, #0]
   2a36e:	4ac2      	ldr	r2, [pc, #776]	; (2a678 <pdn_interface_pdn_id_get+0x6a0>)
   2a370:	4428      	add	r0, r5
   2a372:	f8df 830c 	ldr.w	r8, [pc, #780]	; 2a680 <pdn_interface_pdn_id_get+0x6a8>
   2a376:	f007 fef5 	bl	32164 <sniprintf>
   2a37a:	4628      	mov	r0, r5
   2a37c:	f8d8 9000 	ldr.w	r9, [r8]
   2a380:	2700      	movs	r7, #0
   2a382:	f7f2 feb5 	bl	1d0f0 <strlen>
   2a386:	4629      	mov	r1, r5
   2a388:	4602      	mov	r2, r0
   2a38a:	463b      	mov	r3, r7
   2a38c:	4648      	mov	r0, r9
   2a38e:	9701      	str	r7, [sp, #4]
   2a390:	9700      	str	r7, [sp, #0]
   2a392:	f7fc f98f 	bl	266b4 <at_interface_write>
   2a396:	4681      	mov	r9, r0
   2a398:	4628      	mov	r0, r5
   2a39a:	f7f2 fea9 	bl	1d0f0 <strlen>
   2a39e:	4548      	cmp	r0, r9
   2a3a0:	f040 81e9 	bne.w	2a776 <pdn_interface_pdn_id_get+0x79e>
   2a3a4:	463b      	mov	r3, r7
   2a3a6:	f44f 7280 	mov.w	r2, #256	; 0x100
   2a3aa:	e9cd 7700 	strd	r7, r7, [sp]
   2a3ae:	4629      	mov	r1, r5
   2a3b0:	f8d8 0000 	ldr.w	r0, [r8]
   2a3b4:	f7fc fa82 	bl	268bc <at_interface_read>
   2a3b8:	4607      	mov	r7, r0
   2a3ba:	48b0      	ldr	r0, [pc, #704]	; (2a67c <pdn_interface_pdn_id_get+0x6a4>)
   2a3bc:	f7f2 fe98 	bl	1d0f0 <strlen>
   2a3c0:	4287      	cmp	r7, r0
   2a3c2:	4602      	mov	r2, r0
   2a3c4:	f2c0 81c7 	blt.w	2a756 <pdn_interface_pdn_id_get+0x77e>
   2a3c8:	4629      	mov	r1, r5
   2a3ca:	48ac      	ldr	r0, [pc, #688]	; (2a67c <pdn_interface_pdn_id_get+0x6a4>)
   2a3cc:	f00b fcd8 	bl	35d80 <strncmp>
   2a3d0:	2800      	cmp	r0, #0
   2a3d2:	f040 81c0 	bne.w	2a756 <pdn_interface_pdn_id_get+0x77e>
   2a3d6:	4629      	mov	r1, r5
   2a3d8:	4630      	mov	r0, r6
   2a3da:	f7ff f937 	bl	2964c <pdn_id_get_parser>
   2a3de:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   2a3e2:	6858      	ldr	r0, [r3, #4]
   2a3e4:	e643      	b.n	2a06e <pdn_interface_pdn_id_get+0x96>
   2a3e6:	4628      	mov	r0, r5
   2a3e8:	f7f2 fe82 	bl	1d0f0 <strlen>
   2a3ec:	4606      	mov	r6, r0
   2a3ee:	6920      	ldr	r0, [r4, #16]
   2a3f0:	300c      	adds	r0, #12
   2a3f2:	f7f2 fe7d 	bl	1d0f0 <strlen>
   2a3f6:	4286      	cmp	r6, r0
   2a3f8:	f47f aeab 	bne.w	2a152 <pdn_interface_pdn_id_get+0x17a>
   2a3fc:	6921      	ldr	r1, [r4, #16]
   2a3fe:	4628      	mov	r0, r5
   2a400:	310c      	adds	r1, #12
   2a402:	f7f2 fe6b 	bl	1d0dc <strcmp>
   2a406:	2800      	cmp	r0, #0
   2a408:	f47f aea3 	bne.w	2a152 <pdn_interface_pdn_id_get+0x17a>
   2a40c:	6923      	ldr	r3, [r4, #16]
   2a40e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   2a410:	07d2      	lsls	r2, r2, #31
   2a412:	f57f ae9e 	bpl.w	2a152 <pdn_interface_pdn_id_get+0x17a>
   2a416:	2604      	movs	r6, #4
   2a418:	e799      	b.n	2a34e <pdn_interface_pdn_id_get+0x376>
   2a41a:	4628      	mov	r0, r5
   2a41c:	f7f2 fe68 	bl	1d0f0 <strlen>
   2a420:	4606      	mov	r6, r0
   2a422:	6960      	ldr	r0, [r4, #20]
   2a424:	300c      	adds	r0, #12
   2a426:	f7f2 fe63 	bl	1d0f0 <strlen>
   2a42a:	4286      	cmp	r6, r0
   2a42c:	f47f ae97 	bne.w	2a15e <pdn_interface_pdn_id_get+0x186>
   2a430:	6961      	ldr	r1, [r4, #20]
   2a432:	4628      	mov	r0, r5
   2a434:	310c      	adds	r1, #12
   2a436:	f7f2 fe51 	bl	1d0dc <strcmp>
   2a43a:	2800      	cmp	r0, #0
   2a43c:	f47f ae8f 	bne.w	2a15e <pdn_interface_pdn_id_get+0x186>
   2a440:	6963      	ldr	r3, [r4, #20]
   2a442:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   2a444:	07d7      	lsls	r7, r2, #31
   2a446:	f57f ae8a 	bpl.w	2a15e <pdn_interface_pdn_id_get+0x186>
   2a44a:	2605      	movs	r6, #5
   2a44c:	e77f      	b.n	2a34e <pdn_interface_pdn_id_get+0x376>
   2a44e:	4628      	mov	r0, r5
   2a450:	f7f2 fe4e 	bl	1d0f0 <strlen>
   2a454:	4606      	mov	r6, r0
   2a456:	69a0      	ldr	r0, [r4, #24]
   2a458:	300c      	adds	r0, #12
   2a45a:	f7f2 fe49 	bl	1d0f0 <strlen>
   2a45e:	4286      	cmp	r6, r0
   2a460:	f47f ae83 	bne.w	2a16a <pdn_interface_pdn_id_get+0x192>
   2a464:	69a1      	ldr	r1, [r4, #24]
   2a466:	4628      	mov	r0, r5
   2a468:	310c      	adds	r1, #12
   2a46a:	f7f2 fe37 	bl	1d0dc <strcmp>
   2a46e:	2800      	cmp	r0, #0
   2a470:	f47f ae7b 	bne.w	2a16a <pdn_interface_pdn_id_get+0x192>
   2a474:	69a3      	ldr	r3, [r4, #24]
   2a476:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   2a478:	07d6      	lsls	r6, r2, #31
   2a47a:	f57f ae76 	bpl.w	2a16a <pdn_interface_pdn_id_get+0x192>
   2a47e:	2606      	movs	r6, #6
   2a480:	e765      	b.n	2a34e <pdn_interface_pdn_id_get+0x376>
   2a482:	4628      	mov	r0, r5
   2a484:	f7f2 fe34 	bl	1d0f0 <strlen>
   2a488:	4607      	mov	r7, r0
   2a48a:	68e0      	ldr	r0, [r4, #12]
   2a48c:	300c      	adds	r0, #12
   2a48e:	f7f2 fe2f 	bl	1d0f0 <strlen>
   2a492:	4287      	cmp	r7, r0
   2a494:	f47f ae05 	bne.w	2a0a2 <pdn_interface_pdn_id_get+0xca>
   2a498:	68e1      	ldr	r1, [r4, #12]
   2a49a:	4628      	mov	r0, r5
   2a49c:	310c      	adds	r1, #12
   2a49e:	f7f2 fe1d 	bl	1d0dc <strcmp>
   2a4a2:	2800      	cmp	r0, #0
   2a4a4:	f47f adfd 	bne.w	2a0a2 <pdn_interface_pdn_id_get+0xca>
   2a4a8:	68e3      	ldr	r3, [r4, #12]
   2a4aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   2a4ac:	0791      	lsls	r1, r2, #30
   2a4ae:	f53f af4e 	bmi.w	2a34e <pdn_interface_pdn_id_get+0x376>
   2a4b2:	e5f6      	b.n	2a0a2 <pdn_interface_pdn_id_get+0xca>
   2a4b4:	4628      	mov	r0, r5
   2a4b6:	f7f2 fe1b 	bl	1d0f0 <strlen>
   2a4ba:	4606      	mov	r6, r0
   2a4bc:	6920      	ldr	r0, [r4, #16]
   2a4be:	300c      	adds	r0, #12
   2a4c0:	f7f2 fe16 	bl	1d0f0 <strlen>
   2a4c4:	4286      	cmp	r6, r0
   2a4c6:	f47f adf2 	bne.w	2a0ae <pdn_interface_pdn_id_get+0xd6>
   2a4ca:	6921      	ldr	r1, [r4, #16]
   2a4cc:	4628      	mov	r0, r5
   2a4ce:	310c      	adds	r1, #12
   2a4d0:	f7f2 fe04 	bl	1d0dc <strcmp>
   2a4d4:	2800      	cmp	r0, #0
   2a4d6:	f47f adea 	bne.w	2a0ae <pdn_interface_pdn_id_get+0xd6>
   2a4da:	6923      	ldr	r3, [r4, #16]
   2a4dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   2a4de:	0792      	lsls	r2, r2, #30
   2a4e0:	d499      	bmi.n	2a416 <pdn_interface_pdn_id_get+0x43e>
   2a4e2:	e5e4      	b.n	2a0ae <pdn_interface_pdn_id_get+0xd6>
   2a4e4:	4628      	mov	r0, r5
   2a4e6:	f7f2 fe03 	bl	1d0f0 <strlen>
   2a4ea:	4606      	mov	r6, r0
   2a4ec:	6960      	ldr	r0, [r4, #20]
   2a4ee:	300c      	adds	r0, #12
   2a4f0:	f7f2 fdfe 	bl	1d0f0 <strlen>
   2a4f4:	4286      	cmp	r6, r0
   2a4f6:	f47f ade0 	bne.w	2a0ba <pdn_interface_pdn_id_get+0xe2>
   2a4fa:	6961      	ldr	r1, [r4, #20]
   2a4fc:	4628      	mov	r0, r5
   2a4fe:	310c      	adds	r1, #12
   2a500:	f7f2 fdec 	bl	1d0dc <strcmp>
   2a504:	2800      	cmp	r0, #0
   2a506:	f47f add8 	bne.w	2a0ba <pdn_interface_pdn_id_get+0xe2>
   2a50a:	6963      	ldr	r3, [r4, #20]
   2a50c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   2a50e:	0797      	lsls	r7, r2, #30
   2a510:	d49b      	bmi.n	2a44a <pdn_interface_pdn_id_get+0x472>
   2a512:	e5d2      	b.n	2a0ba <pdn_interface_pdn_id_get+0xe2>
   2a514:	4628      	mov	r0, r5
   2a516:	f7f2 fdeb 	bl	1d0f0 <strlen>
   2a51a:	4606      	mov	r6, r0
   2a51c:	69a0      	ldr	r0, [r4, #24]
   2a51e:	300c      	adds	r0, #12
   2a520:	f7f2 fde6 	bl	1d0f0 <strlen>
   2a524:	4286      	cmp	r6, r0
   2a526:	f47f adce 	bne.w	2a0c6 <pdn_interface_pdn_id_get+0xee>
   2a52a:	69a1      	ldr	r1, [r4, #24]
   2a52c:	4628      	mov	r0, r5
   2a52e:	310c      	adds	r1, #12
   2a530:	f7f2 fdd4 	bl	1d0dc <strcmp>
   2a534:	2800      	cmp	r0, #0
   2a536:	f47f adc6 	bne.w	2a0c6 <pdn_interface_pdn_id_get+0xee>
   2a53a:	69a3      	ldr	r3, [r4, #24]
   2a53c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   2a53e:	0796      	lsls	r6, r2, #30
   2a540:	d49d      	bmi.n	2a47e <pdn_interface_pdn_id_get+0x4a6>
   2a542:	e5c0      	b.n	2a0c6 <pdn_interface_pdn_id_get+0xee>
   2a544:	4628      	mov	r0, r5
   2a546:	f7f2 fdd3 	bl	1d0f0 <strlen>
   2a54a:	4606      	mov	r6, r0
   2a54c:	69e0      	ldr	r0, [r4, #28]
   2a54e:	300c      	adds	r0, #12
   2a550:	f7f2 fdce 	bl	1d0f0 <strlen>
   2a554:	4286      	cmp	r6, r0
   2a556:	f47f adbc 	bne.w	2a0d2 <pdn_interface_pdn_id_get+0xfa>
   2a55a:	69e1      	ldr	r1, [r4, #28]
   2a55c:	4628      	mov	r0, r5
   2a55e:	310c      	adds	r1, #12
   2a560:	f7f2 fdbc 	bl	1d0dc <strcmp>
   2a564:	2800      	cmp	r0, #0
   2a566:	f47f adb4 	bne.w	2a0d2 <pdn_interface_pdn_id_get+0xfa>
   2a56a:	69e3      	ldr	r3, [r4, #28]
   2a56c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   2a56e:	0790      	lsls	r0, r2, #30
   2a570:	f57f adaf 	bpl.w	2a0d2 <pdn_interface_pdn_id_get+0xfa>
   2a574:	2607      	movs	r6, #7
   2a576:	e6ea      	b.n	2a34e <pdn_interface_pdn_id_get+0x376>
   2a578:	4628      	mov	r0, r5
   2a57a:	f7f2 fdb9 	bl	1d0f0 <strlen>
   2a57e:	4606      	mov	r6, r0
   2a580:	6a20      	ldr	r0, [r4, #32]
   2a582:	300c      	adds	r0, #12
   2a584:	f7f2 fdb4 	bl	1d0f0 <strlen>
   2a588:	4286      	cmp	r6, r0
   2a58a:	f47f ada8 	bne.w	2a0de <pdn_interface_pdn_id_get+0x106>
   2a58e:	6a21      	ldr	r1, [r4, #32]
   2a590:	4628      	mov	r0, r5
   2a592:	310c      	adds	r1, #12
   2a594:	f7f2 fda2 	bl	1d0dc <strcmp>
   2a598:	2800      	cmp	r0, #0
   2a59a:	f47f ada0 	bne.w	2a0de <pdn_interface_pdn_id_get+0x106>
   2a59e:	6a23      	ldr	r3, [r4, #32]
   2a5a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   2a5a2:	0791      	lsls	r1, r2, #30
   2a5a4:	f57f ad9b 	bpl.w	2a0de <pdn_interface_pdn_id_get+0x106>
   2a5a8:	2608      	movs	r6, #8
   2a5aa:	e6d0      	b.n	2a34e <pdn_interface_pdn_id_get+0x376>
   2a5ac:	4628      	mov	r0, r5
   2a5ae:	f7f2 fd9f 	bl	1d0f0 <strlen>
   2a5b2:	4606      	mov	r6, r0
   2a5b4:	69e0      	ldr	r0, [r4, #28]
   2a5b6:	300c      	adds	r0, #12
   2a5b8:	f7f2 fd9a 	bl	1d0f0 <strlen>
   2a5bc:	4286      	cmp	r6, r0
   2a5be:	f47f adda 	bne.w	2a176 <pdn_interface_pdn_id_get+0x19e>
   2a5c2:	69e1      	ldr	r1, [r4, #28]
   2a5c4:	4628      	mov	r0, r5
   2a5c6:	310c      	adds	r1, #12
   2a5c8:	f7f2 fd88 	bl	1d0dc <strcmp>
   2a5cc:	2800      	cmp	r0, #0
   2a5ce:	f47f add2 	bne.w	2a176 <pdn_interface_pdn_id_get+0x19e>
   2a5d2:	69e3      	ldr	r3, [r4, #28]
   2a5d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   2a5d6:	07d0      	lsls	r0, r2, #31
   2a5d8:	d4cc      	bmi.n	2a574 <pdn_interface_pdn_id_get+0x59c>
   2a5da:	e5cc      	b.n	2a176 <pdn_interface_pdn_id_get+0x19e>
   2a5dc:	4628      	mov	r0, r5
   2a5de:	f7f2 fd87 	bl	1d0f0 <strlen>
   2a5e2:	4606      	mov	r6, r0
   2a5e4:	6a20      	ldr	r0, [r4, #32]
   2a5e6:	300c      	adds	r0, #12
   2a5e8:	f7f2 fd82 	bl	1d0f0 <strlen>
   2a5ec:	4286      	cmp	r6, r0
   2a5ee:	f47f adc8 	bne.w	2a182 <pdn_interface_pdn_id_get+0x1aa>
   2a5f2:	6a21      	ldr	r1, [r4, #32]
   2a5f4:	4628      	mov	r0, r5
   2a5f6:	310c      	adds	r1, #12
   2a5f8:	f7f2 fd70 	bl	1d0dc <strcmp>
   2a5fc:	2800      	cmp	r0, #0
   2a5fe:	f47f adc0 	bne.w	2a182 <pdn_interface_pdn_id_get+0x1aa>
   2a602:	6a23      	ldr	r3, [r4, #32]
   2a604:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   2a606:	07d1      	lsls	r1, r2, #31
   2a608:	d4ce      	bmi.n	2a5a8 <pdn_interface_pdn_id_get+0x5d0>
   2a60a:	e5ba      	b.n	2a182 <pdn_interface_pdn_id_get+0x1aa>
   2a60c:	4628      	mov	r0, r5
   2a60e:	f7f2 fd6f 	bl	1d0f0 <strlen>
   2a612:	4606      	mov	r6, r0
   2a614:	68a0      	ldr	r0, [r4, #8]
   2a616:	300c      	adds	r0, #12
   2a618:	f7f2 fd6a 	bl	1d0f0 <strlen>
   2a61c:	4286      	cmp	r6, r0
   2a61e:	f47f ad8c 	bne.w	2a13a <pdn_interface_pdn_id_get+0x162>
   2a622:	68a1      	ldr	r1, [r4, #8]
   2a624:	4628      	mov	r0, r5
   2a626:	310c      	adds	r1, #12
   2a628:	f7f2 fd58 	bl	1d0dc <strcmp>
   2a62c:	2800      	cmp	r0, #0
   2a62e:	f47f ad84 	bne.w	2a13a <pdn_interface_pdn_id_get+0x162>
   2a632:	68a3      	ldr	r3, [r4, #8]
   2a634:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   2a636:	07d0      	lsls	r0, r2, #31
   2a638:	f57f ad7f 	bpl.w	2a13a <pdn_interface_pdn_id_get+0x162>
   2a63c:	2602      	movs	r6, #2
   2a63e:	e686      	b.n	2a34e <pdn_interface_pdn_id_get+0x376>
   2a640:	4628      	mov	r0, r5
   2a642:	f7f2 fd55 	bl	1d0f0 <strlen>
   2a646:	4606      	mov	r6, r0
   2a648:	68a0      	ldr	r0, [r4, #8]
   2a64a:	300c      	adds	r0, #12
   2a64c:	f7f2 fd50 	bl	1d0f0 <strlen>
   2a650:	4286      	cmp	r6, r0
   2a652:	f47f ad20 	bne.w	2a096 <pdn_interface_pdn_id_get+0xbe>
   2a656:	68a1      	ldr	r1, [r4, #8]
   2a658:	4628      	mov	r0, r5
   2a65a:	310c      	adds	r1, #12
   2a65c:	f7f2 fd3e 	bl	1d0dc <strcmp>
   2a660:	2800      	cmp	r0, #0
   2a662:	f47f ad18 	bne.w	2a096 <pdn_interface_pdn_id_get+0xbe>
   2a666:	68a3      	ldr	r3, [r4, #8]
   2a668:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   2a66a:	0790      	lsls	r0, r2, #30
   2a66c:	d4e6      	bmi.n	2a63c <pdn_interface_pdn_id_get+0x664>
   2a66e:	e512      	b.n	2a096 <pdn_interface_pdn_id_get+0xbe>
   2a670:	20022a00 	.word	0x20022a00
   2a674:	000373c8 	.word	0x000373c8
   2a678:	000373c4 	.word	0x000373c4
   2a67c:	000373d8 	.word	0x000373d8
   2a680:	200229fc 	.word	0x200229fc
   2a684:	4628      	mov	r0, r5
   2a686:	f7f2 fd33 	bl	1d0f0 <strlen>
   2a68a:	4606      	mov	r6, r0
   2a68c:	6860      	ldr	r0, [r4, #4]
   2a68e:	300c      	adds	r0, #12
   2a690:	f7f2 fd2e 	bl	1d0f0 <strlen>
   2a694:	4286      	cmp	r6, r0
   2a696:	f47f acf8 	bne.w	2a08a <pdn_interface_pdn_id_get+0xb2>
   2a69a:	6861      	ldr	r1, [r4, #4]
   2a69c:	4628      	mov	r0, r5
   2a69e:	310c      	adds	r1, #12
   2a6a0:	f7f2 fd1c 	bl	1d0dc <strcmp>
   2a6a4:	2800      	cmp	r0, #0
   2a6a6:	f47f acf0 	bne.w	2a08a <pdn_interface_pdn_id_get+0xb2>
   2a6aa:	6863      	ldr	r3, [r4, #4]
   2a6ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   2a6ae:	0796      	lsls	r6, r2, #30
   2a6b0:	f57f aceb 	bpl.w	2a08a <pdn_interface_pdn_id_get+0xb2>
   2a6b4:	2601      	movs	r6, #1
   2a6b6:	e64a      	b.n	2a34e <pdn_interface_pdn_id_get+0x376>
   2a6b8:	4628      	mov	r0, r5
   2a6ba:	f7f2 fd19 	bl	1d0f0 <strlen>
   2a6be:	4606      	mov	r6, r0
   2a6c0:	6860      	ldr	r0, [r4, #4]
   2a6c2:	300c      	adds	r0, #12
   2a6c4:	f7f2 fd14 	bl	1d0f0 <strlen>
   2a6c8:	4286      	cmp	r6, r0
   2a6ca:	f47f ad30 	bne.w	2a12e <pdn_interface_pdn_id_get+0x156>
   2a6ce:	6861      	ldr	r1, [r4, #4]
   2a6d0:	4628      	mov	r0, r5
   2a6d2:	310c      	adds	r1, #12
   2a6d4:	f7f2 fd02 	bl	1d0dc <strcmp>
   2a6d8:	2800      	cmp	r0, #0
   2a6da:	f47f ad28 	bne.w	2a12e <pdn_interface_pdn_id_get+0x156>
   2a6de:	6863      	ldr	r3, [r4, #4]
   2a6e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   2a6e2:	07d6      	lsls	r6, r2, #31
   2a6e4:	d4e6      	bmi.n	2a6b4 <pdn_interface_pdn_id_get+0x6dc>
   2a6e6:	e522      	b.n	2a12e <pdn_interface_pdn_id_get+0x156>
   2a6e8:	4608      	mov	r0, r1
   2a6ea:	f7f2 fd01 	bl	1d0f0 <strlen>
   2a6ee:	4606      	mov	r6, r0
   2a6f0:	6820      	ldr	r0, [r4, #0]
   2a6f2:	300c      	adds	r0, #12
   2a6f4:	f7f2 fcfc 	bl	1d0f0 <strlen>
   2a6f8:	4286      	cmp	r6, r0
   2a6fa:	f47f acc0 	bne.w	2a07e <pdn_interface_pdn_id_get+0xa6>
   2a6fe:	6821      	ldr	r1, [r4, #0]
   2a700:	4628      	mov	r0, r5
   2a702:	310c      	adds	r1, #12
   2a704:	f7f2 fcea 	bl	1d0dc <strcmp>
   2a708:	4606      	mov	r6, r0
   2a70a:	2800      	cmp	r0, #0
   2a70c:	f47f acb7 	bne.w	2a07e <pdn_interface_pdn_id_get+0xa6>
   2a710:	6823      	ldr	r3, [r4, #0]
   2a712:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   2a714:	0797      	lsls	r7, r2, #30
   2a716:	f53f ae1a 	bmi.w	2a34e <pdn_interface_pdn_id_get+0x376>
   2a71a:	e4b0      	b.n	2a07e <pdn_interface_pdn_id_get+0xa6>
   2a71c:	4608      	mov	r0, r1
   2a71e:	f7f2 fce7 	bl	1d0f0 <strlen>
   2a722:	4606      	mov	r6, r0
   2a724:	6820      	ldr	r0, [r4, #0]
   2a726:	300c      	adds	r0, #12
   2a728:	f7f2 fce2 	bl	1d0f0 <strlen>
   2a72c:	4286      	cmp	r6, r0
   2a72e:	f47f acf8 	bne.w	2a122 <pdn_interface_pdn_id_get+0x14a>
   2a732:	6821      	ldr	r1, [r4, #0]
   2a734:	4628      	mov	r0, r5
   2a736:	310c      	adds	r1, #12
   2a738:	f7f2 fcd0 	bl	1d0dc <strcmp>
   2a73c:	4606      	mov	r6, r0
   2a73e:	2800      	cmp	r0, #0
   2a740:	f47f acef 	bne.w	2a122 <pdn_interface_pdn_id_get+0x14a>
   2a744:	6823      	ldr	r3, [r4, #0]
   2a746:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   2a748:	07d7      	lsls	r7, r2, #31
   2a74a:	f53f ae00 	bmi.w	2a34e <pdn_interface_pdn_id_get+0x376>
   2a74e:	e4e8      	b.n	2a122 <pdn_interface_pdn_id_get+0x14a>
   2a750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a754:	4770      	bx	lr
   2a756:	480b      	ldr	r0, [pc, #44]	; (2a784 <pdn_interface_pdn_id_get+0x7ac>)
   2a758:	f7f2 fcca 	bl	1d0f0 <strlen>
   2a75c:	490a      	ldr	r1, [pc, #40]	; (2a788 <pdn_interface_pdn_id_get+0x7b0>)
   2a75e:	4602      	mov	r2, r0
   2a760:	4808      	ldr	r0, [pc, #32]	; (2a784 <pdn_interface_pdn_id_get+0x7ac>)
   2a762:	f00b fb0d 	bl	35d80 <strncmp>
   2a766:	b930      	cbnz	r0, 2a776 <pdn_interface_pdn_id_get+0x79e>
   2a768:	2008      	movs	r0, #8
   2a76a:	f7f8 f9c7 	bl	22afc <bsd_os_errno_set>
   2a76e:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   2a772:	6858      	ldr	r0, [r3, #4]
   2a774:	e47b      	b.n	2a06e <pdn_interface_pdn_id_get+0x96>
   2a776:	2005      	movs	r0, #5
   2a778:	f7f8 f9c0 	bl	22afc <bsd_os_errno_set>
   2a77c:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   2a780:	6858      	ldr	r0, [r3, #4]
   2a782:	e474      	b.n	2a06e <pdn_interface_pdn_id_get+0x96>
   2a784:	0003741c 	.word	0x0003741c
   2a788:	20022a00 	.word	0x20022a00

0002a78c <linked_list_init>:
   2a78c:	b128      	cbz	r0, 2a79a <linked_list_init+0xe>
   2a78e:	2300      	movs	r3, #0
   2a790:	6003      	str	r3, [r0, #0]
   2a792:	e9c0 3301 	strd	r3, r3, [r0, #4]
   2a796:	4618      	mov	r0, r3
   2a798:	4770      	bx	lr
   2a79a:	2007      	movs	r0, #7
   2a79c:	4770      	bx	lr
   2a79e:	bf00      	nop

0002a7a0 <linked_list_push>:
   2a7a0:	6802      	ldr	r2, [r0, #0]
   2a7a2:	4603      	mov	r3, r0
   2a7a4:	3201      	adds	r2, #1
   2a7a6:	d00e      	beq.n	2a7c6 <linked_list_push+0x26>
   2a7a8:	2200      	movs	r2, #0
   2a7aa:	600a      	str	r2, [r1, #0]
   2a7ac:	6802      	ldr	r2, [r0, #0]
   2a7ae:	b13a      	cbz	r2, 2a7c0 <linked_list_push+0x20>
   2a7b0:	6882      	ldr	r2, [r0, #8]
   2a7b2:	6011      	str	r1, [r2, #0]
   2a7b4:	6081      	str	r1, [r0, #8]
   2a7b6:	681a      	ldr	r2, [r3, #0]
   2a7b8:	2000      	movs	r0, #0
   2a7ba:	3201      	adds	r2, #1
   2a7bc:	601a      	str	r2, [r3, #0]
   2a7be:	4770      	bx	lr
   2a7c0:	e9c0 1101 	strd	r1, r1, [r0, #4]
   2a7c4:	e7f7      	b.n	2a7b6 <linked_list_push+0x16>
   2a7c6:	2004      	movs	r0, #4
   2a7c8:	4770      	bx	lr
   2a7ca:	bf00      	nop

0002a7cc <linked_list_pop>:
   2a7cc:	4603      	mov	r3, r0
   2a7ce:	6800      	ldr	r0, [r0, #0]
   2a7d0:	b128      	cbz	r0, 2a7de <linked_list_pop+0x12>
   2a7d2:	6858      	ldr	r0, [r3, #4]
   2a7d4:	681a      	ldr	r2, [r3, #0]
   2a7d6:	6801      	ldr	r1, [r0, #0]
   2a7d8:	3a01      	subs	r2, #1
   2a7da:	6059      	str	r1, [r3, #4]
   2a7dc:	601a      	str	r2, [r3, #0]
   2a7de:	4770      	bx	lr

0002a7e0 <linked_list_peek>:
   2a7e0:	6803      	ldr	r3, [r0, #0]
   2a7e2:	b10b      	cbz	r3, 2a7e8 <linked_list_peek+0x8>
   2a7e4:	6840      	ldr	r0, [r0, #4]
   2a7e6:	4770      	bx	lr
   2a7e8:	4618      	mov	r0, r3
   2a7ea:	4770      	bx	lr

0002a7ec <linked_list_size_get>:
   2a7ec:	6800      	ldr	r0, [r0, #0]
   2a7ee:	4770      	bx	lr

0002a7f0 <linked_list_get_next>:
   2a7f0:	6800      	ldr	r0, [r0, #0]
   2a7f2:	4770      	bx	lr

0002a7f4 <nrf_socket>:
   2a7f4:	b570      	push	{r4, r5, r6, lr}
   2a7f6:	4604      	mov	r4, r0
   2a7f8:	460d      	mov	r5, r1
   2a7fa:	4616      	mov	r6, r2
   2a7fc:	f7fd fdb4 	bl	28368 <bsd_platform_af_method_table_get>
   2a800:	b130      	cbz	r0, 2a810 <nrf_socket+0x1c>
   2a802:	6803      	ldr	r3, [r0, #0]
   2a804:	4632      	mov	r2, r6
   2a806:	4629      	mov	r1, r5
   2a808:	4620      	mov	r0, r4
   2a80a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2a80e:	4718      	bx	r3
   2a810:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a814:	bd70      	pop	{r4, r5, r6, pc}
   2a816:	bf00      	nop

0002a818 <nrf_close>:
   2a818:	b510      	push	{r4, lr}
   2a81a:	4604      	mov	r4, r0
   2a81c:	f7fd fdfc 	bl	28418 <bsd_platform_fd_method_table_get>
   2a820:	b120      	cbz	r0, 2a82c <nrf_close+0x14>
   2a822:	6843      	ldr	r3, [r0, #4]
   2a824:	4620      	mov	r0, r4
   2a826:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2a82a:	4718      	bx	r3
   2a82c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a830:	bd10      	pop	{r4, pc}
   2a832:	bf00      	nop

0002a834 <nrf_sendto>:
   2a834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2a838:	460d      	mov	r5, r1
   2a83a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   2a83e:	4616      	mov	r6, r2
   2a840:	461f      	mov	r7, r3
   2a842:	4604      	mov	r4, r0
   2a844:	f7fd fde8 	bl	28418 <bsd_platform_fd_method_table_get>
   2a848:	b158      	cbz	r0, 2a862 <nrf_sendto+0x2e>
   2a84a:	e9cd 8908 	strd	r8, r9, [sp, #32]
   2a84e:	f8d0 e008 	ldr.w	lr, [r0, #8]
   2a852:	463b      	mov	r3, r7
   2a854:	4632      	mov	r2, r6
   2a856:	4629      	mov	r1, r5
   2a858:	4620      	mov	r0, r4
   2a85a:	46f4      	mov	ip, lr
   2a85c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2a860:	4760      	bx	ip
   2a862:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2a86a:	bf00      	nop

0002a86c <nrf_send>:
   2a86c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a870:	b082      	sub	sp, #8
   2a872:	460e      	mov	r6, r1
   2a874:	4617      	mov	r7, r2
   2a876:	4698      	mov	r8, r3
   2a878:	4605      	mov	r5, r0
   2a87a:	f7fd fdcd 	bl	28418 <bsd_platform_fd_method_table_get>
   2a87e:	b160      	cbz	r0, 2a89a <nrf_send+0x2e>
   2a880:	4604      	mov	r4, r0
   2a882:	2000      	movs	r0, #0
   2a884:	e9cd 0000 	strd	r0, r0, [sp]
   2a888:	4643      	mov	r3, r8
   2a88a:	463a      	mov	r2, r7
   2a88c:	4631      	mov	r1, r6
   2a88e:	4628      	mov	r0, r5
   2a890:	68a4      	ldr	r4, [r4, #8]
   2a892:	47a0      	blx	r4
   2a894:	b002      	add	sp, #8
   2a896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a89a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a89e:	e7f9      	b.n	2a894 <nrf_send+0x28>

0002a8a0 <nrf_recvfrom>:
   2a8a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2a8a4:	460d      	mov	r5, r1
   2a8a6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   2a8aa:	4616      	mov	r6, r2
   2a8ac:	461f      	mov	r7, r3
   2a8ae:	4604      	mov	r4, r0
   2a8b0:	f7fd fdb2 	bl	28418 <bsd_platform_fd_method_table_get>
   2a8b4:	b158      	cbz	r0, 2a8ce <nrf_recvfrom+0x2e>
   2a8b6:	e9cd 8908 	strd	r8, r9, [sp, #32]
   2a8ba:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   2a8be:	463b      	mov	r3, r7
   2a8c0:	4632      	mov	r2, r6
   2a8c2:	4629      	mov	r1, r5
   2a8c4:	4620      	mov	r0, r4
   2a8c6:	46f4      	mov	ip, lr
   2a8c8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2a8cc:	4760      	bx	ip
   2a8ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a8d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2a8d6:	bf00      	nop

0002a8d8 <nrf_recv>:
   2a8d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a8dc:	b082      	sub	sp, #8
   2a8de:	460e      	mov	r6, r1
   2a8e0:	4617      	mov	r7, r2
   2a8e2:	4698      	mov	r8, r3
   2a8e4:	4605      	mov	r5, r0
   2a8e6:	f7fd fd97 	bl	28418 <bsd_platform_fd_method_table_get>
   2a8ea:	b160      	cbz	r0, 2a906 <nrf_recv+0x2e>
   2a8ec:	4604      	mov	r4, r0
   2a8ee:	2000      	movs	r0, #0
   2a8f0:	e9cd 0000 	strd	r0, r0, [sp]
   2a8f4:	4643      	mov	r3, r8
   2a8f6:	463a      	mov	r2, r7
   2a8f8:	4631      	mov	r1, r6
   2a8fa:	4628      	mov	r0, r5
   2a8fc:	68e4      	ldr	r4, [r4, #12]
   2a8fe:	47a0      	blx	r4
   2a900:	b002      	add	sp, #8
   2a902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a906:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a90a:	e7f9      	b.n	2a900 <nrf_recv+0x28>

0002a90c <nrf_connect>:
   2a90c:	b570      	push	{r4, r5, r6, lr}
   2a90e:	460d      	mov	r5, r1
   2a910:	4616      	mov	r6, r2
   2a912:	4604      	mov	r4, r0
   2a914:	f7fd fd80 	bl	28418 <bsd_platform_fd_method_table_get>
   2a918:	b130      	cbz	r0, 2a928 <nrf_connect+0x1c>
   2a91a:	6943      	ldr	r3, [r0, #20]
   2a91c:	4632      	mov	r2, r6
   2a91e:	4629      	mov	r1, r5
   2a920:	4620      	mov	r0, r4
   2a922:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2a926:	4718      	bx	r3
   2a928:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a92c:	bd70      	pop	{r4, r5, r6, pc}
   2a92e:	bf00      	nop

0002a930 <nrf_listen>:
   2a930:	b570      	push	{r4, r5, r6, lr}
   2a932:	460d      	mov	r5, r1
   2a934:	4604      	mov	r4, r0
   2a936:	f7fd fd6f 	bl	28418 <bsd_platform_fd_method_table_get>
   2a93a:	b128      	cbz	r0, 2a948 <nrf_listen+0x18>
   2a93c:	6983      	ldr	r3, [r0, #24]
   2a93e:	4629      	mov	r1, r5
   2a940:	4620      	mov	r0, r4
   2a942:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2a946:	4718      	bx	r3
   2a948:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a94c:	bd70      	pop	{r4, r5, r6, pc}
   2a94e:	bf00      	nop

0002a950 <nrf_accept>:
   2a950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a954:	460d      	mov	r5, r1
   2a956:	4616      	mov	r6, r2
   2a958:	4604      	mov	r4, r0
   2a95a:	f7fd fd5d 	bl	28418 <bsd_platform_fd_method_table_get>
   2a95e:	b140      	cbz	r0, 2a972 <nrf_accept+0x22>
   2a960:	69c7      	ldr	r7, [r0, #28]
   2a962:	4632      	mov	r2, r6
   2a964:	4629      	mov	r1, r5
   2a966:	4620      	mov	r0, r4
   2a968:	46bc      	mov	ip, r7
   2a96a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2a96e:	2300      	movs	r3, #0
   2a970:	4760      	bx	ip
   2a972:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a97a:	bf00      	nop

0002a97c <nrf_bind>:
   2a97c:	b570      	push	{r4, r5, r6, lr}
   2a97e:	460d      	mov	r5, r1
   2a980:	4616      	mov	r6, r2
   2a982:	4604      	mov	r4, r0
   2a984:	f7fd fd48 	bl	28418 <bsd_platform_fd_method_table_get>
   2a988:	b130      	cbz	r0, 2a998 <nrf_bind+0x1c>
   2a98a:	6903      	ldr	r3, [r0, #16]
   2a98c:	4632      	mov	r2, r6
   2a98e:	4629      	mov	r1, r5
   2a990:	4620      	mov	r0, r4
   2a992:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2a996:	4718      	bx	r3
   2a998:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a99c:	bd70      	pop	{r4, r5, r6, pc}
   2a99e:	bf00      	nop

0002a9a0 <nrf_setsockopt>:
   2a9a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a9a4:	f8dd 8018 	ldr.w	r8, [sp, #24]
   2a9a8:	460d      	mov	r5, r1
   2a9aa:	4616      	mov	r6, r2
   2a9ac:	461f      	mov	r7, r3
   2a9ae:	4604      	mov	r4, r0
   2a9b0:	f7fd fd32 	bl	28418 <bsd_platform_fd_method_table_get>
   2a9b4:	b158      	cbz	r0, 2a9ce <nrf_setsockopt+0x2e>
   2a9b6:	f8cd 8018 	str.w	r8, [sp, #24]
   2a9ba:	f8d0 e020 	ldr.w	lr, [r0, #32]
   2a9be:	463b      	mov	r3, r7
   2a9c0:	4632      	mov	r2, r6
   2a9c2:	4629      	mov	r1, r5
   2a9c4:	4620      	mov	r0, r4
   2a9c6:	46f4      	mov	ip, lr
   2a9c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2a9cc:	4760      	bx	ip
   2a9ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a9d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a9d6:	bf00      	nop

0002a9d8 <nrf_getsockopt>:
   2a9d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a9dc:	f8dd 8018 	ldr.w	r8, [sp, #24]
   2a9e0:	460d      	mov	r5, r1
   2a9e2:	4616      	mov	r6, r2
   2a9e4:	461f      	mov	r7, r3
   2a9e6:	4604      	mov	r4, r0
   2a9e8:	f7fd fd16 	bl	28418 <bsd_platform_fd_method_table_get>
   2a9ec:	b158      	cbz	r0, 2aa06 <nrf_getsockopt+0x2e>
   2a9ee:	f8cd 8018 	str.w	r8, [sp, #24]
   2a9f2:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
   2a9f6:	463b      	mov	r3, r7
   2a9f8:	4632      	mov	r2, r6
   2a9fa:	4629      	mov	r1, r5
   2a9fc:	4620      	mov	r0, r4
   2a9fe:	46f4      	mov	ip, lr
   2aa00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2aa04:	4760      	bx	ip
   2aa06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2aa0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2aa0e:	bf00      	nop

0002aa10 <nrf_getaddrinfo>:
   2aa10:	f7fd bd78 	b.w	28504 <bsd_platform_getaddrinfo>

0002aa14 <nrf_freeaddrinfo>:
   2aa14:	f7fd bd78 	b.w	28508 <bsd_platform_freeaddrinfo>

0002aa18 <nrf_poll>:
   2aa18:	f7fd bd78 	b.w	2850c <bsd_platform_poll>

0002aa1c <nrf_fcntl>:
   2aa1c:	f7fd bdd0 	b.w	285c0 <bsd_platform_fcntl>

0002aa20 <at_client_evt_handler>:
   2aa20:	b120      	cbz	r0, 2aa2c <at_client_evt_handler+0xc>
   2aa22:	f850 1b08 	ldr.w	r1, [r0], #8
   2aa26:	0c09      	lsrs	r1, r1, #16
   2aa28:	f7fb bfa0 	b.w	2696c <rpc_at_event_handler>
   2aa2c:	4770      	bx	lr
   2aa2e:	bf00      	nop

0002aa30 <rpc_at_client_init>:
   2aa30:	4801      	ldr	r0, [pc, #4]	; (2aa38 <rpc_at_client_init+0x8>)
   2aa32:	f001 be47 	b.w	2c6c4 <rpc_client_register>
   2aa36:	bf00      	nop
   2aa38:	00037430 	.word	0x00037430

0002aa3c <rpc_at_client_request_alloc>:
   2aa3c:	b180      	cbz	r0, 2aa60 <rpc_at_client_request_alloc+0x24>
   2aa3e:	2300      	movs	r3, #0
   2aa40:	b510      	push	{r4, lr}
   2aa42:	b082      	sub	sp, #8
   2aa44:	aa02      	add	r2, sp, #8
   2aa46:	4604      	mov	r4, r0
   2aa48:	f842 3d04 	str.w	r3, [r2, #-4]!
   2aa4c:	2003      	movs	r0, #3
   2aa4e:	f002 f871 	bl	2cb34 <rpc_message_alloc>
   2aa52:	b918      	cbnz	r0, 2aa5c <rpc_at_client_request_alloc+0x20>
   2aa54:	9b01      	ldr	r3, [sp, #4]
   2aa56:	b10b      	cbz	r3, 2aa5c <rpc_at_client_request_alloc+0x20>
   2aa58:	3308      	adds	r3, #8
   2aa5a:	6023      	str	r3, [r4, #0]
   2aa5c:	b002      	add	sp, #8
   2aa5e:	bd10      	pop	{r4, pc}
   2aa60:	200e      	movs	r0, #14
   2aa62:	4770      	bx	lr

0002aa64 <rpc_at_client_request_send>:
   2aa64:	b150      	cbz	r0, 2aa7c <rpc_at_client_request_send+0x18>
   2aa66:	4603      	mov	r3, r0
   2aa68:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   2aa6c:	2003      	movs	r0, #3
   2aa6e:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   2aa72:	f843 1d08 	str.w	r1, [r3, #-8]!
   2aa76:	4619      	mov	r1, r3
   2aa78:	f002 b844 	b.w	2cb04 <rpc_message_send>
   2aa7c:	200e      	movs	r0, #14
   2aa7e:	4770      	bx	lr

0002aa80 <rpc_at_client_message_free>:
   2aa80:	b120      	cbz	r0, 2aa8c <rpc_at_client_message_free+0xc>
   2aa82:	f1a0 0108 	sub.w	r1, r0, #8
   2aa86:	2003      	movs	r0, #3
   2aa88:	f002 b886 	b.w	2cb98 <rpc_message_free>
   2aa8c:	200e      	movs	r0, #14
   2aa8e:	4770      	bx	lr

0002aa90 <rpc_at_client_data_free>:
   2aa90:	b118      	cbz	r0, 2aa9a <rpc_at_client_data_free+0xa>
   2aa92:	4601      	mov	r1, r0
   2aa94:	2003      	movs	r0, #3
   2aa96:	f002 b991 	b.w	2cdbc <rpc_message_data_free>
   2aa9a:	200e      	movs	r0, #14
   2aa9c:	4770      	bx	lr
   2aa9e:	bf00      	nop

0002aaa0 <ip_recvd_packet_free_cb>:
   2aaa0:	b510      	push	{r4, lr}
   2aaa2:	4604      	mov	r4, r0
   2aaa4:	6800      	ldr	r0, [r0, #0]
   2aaa6:	f7fc fc1f 	bl	272e8 <rpc_ip_client_data_free>
   2aaaa:	68a0      	ldr	r0, [r4, #8]
   2aaac:	b118      	cbz	r0, 2aab6 <ip_recvd_packet_free_cb+0x16>
   2aaae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2aab2:	f7fc bbb9 	b.w	27228 <nrf_free>
   2aab6:	bd10      	pop	{r4, pc}

0002aab8 <rpc_error_to_nrf_bsd_error>:
   2aab8:	2810      	cmp	r0, #16
   2aaba:	bf9a      	itte	ls
   2aabc:	4b02      	ldrls	r3, [pc, #8]	; (2aac8 <rpc_error_to_nrf_bsd_error+0x10>)
   2aabe:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   2aac2:	202d      	movhi	r0, #45	; 0x2d
   2aac4:	4770      	bx	lr
   2aac6:	bf00      	nop
   2aac8:	00037440 	.word	0x00037440

0002aacc <ip_interface_request_create>:
   2aacc:	b570      	push	{r4, r5, r6, lr}
   2aace:	2500      	movs	r5, #0
   2aad0:	b082      	sub	sp, #8
   2aad2:	ac02      	add	r4, sp, #8
   2aad4:	f844 5d04 	str.w	r5, [r4, #-4]!
   2aad8:	4606      	mov	r6, r0
   2aada:	460d      	mov	r5, r1
   2aadc:	4620      	mov	r0, r4
   2aade:	4619      	mov	r1, r3
   2aae0:	4614      	mov	r4, r2
   2aae2:	f7fc fbcf 	bl	27284 <rpc_ip_client_request_alloc>
   2aae6:	b960      	cbnz	r0, 2ab02 <ip_interface_request_create+0x36>
   2aae8:	9b01      	ldr	r3, [sp, #4]
   2aaea:	2208      	movs	r2, #8
   2aaec:	7258      	strb	r0, [r3, #9]
   2aaee:	7298      	strb	r0, [r3, #10]
   2aaf0:	72d8      	strb	r0, [r3, #11]
   2aaf2:	4618      	mov	r0, r3
   2aaf4:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   2aaf8:	60dc      	str	r4, [r3, #12]
   2aafa:	611d      	str	r5, [r3, #16]
   2aafc:	721a      	strb	r2, [r3, #8]
   2aafe:	b002      	add	sp, #8
   2ab00:	bd70      	pop	{r4, r5, r6, pc}
   2ab02:	9b01      	ldr	r3, [sp, #4]
   2ab04:	4618      	mov	r0, r3
   2ab06:	b002      	add	sp, #8
   2ab08:	bd70      	pop	{r4, r5, r6, pc}
   2ab0a:	bf00      	nop

0002ab0c <ip_interface_request_send>:
   2ab0c:	b570      	push	{r4, r5, r6, lr}
   2ab0e:	460c      	mov	r4, r1
   2ab10:	4605      	mov	r5, r0
   2ab12:	4611      	mov	r1, r2
   2ab14:	4620      	mov	r0, r4
   2ab16:	461e      	mov	r6, r3
   2ab18:	f7fc fbc8 	bl	272ac <rpc_ip_client_request_send>
   2ab1c:	b900      	cbnz	r0, 2ab20 <ip_interface_request_send+0x14>
   2ab1e:	bd70      	pop	{r4, r5, r6, pc}
   2ab20:	6820      	ldr	r0, [r4, #0]
   2ab22:	b108      	cbz	r0, 2ab28 <ip_interface_request_send+0x1c>
   2ab24:	f7fc fbe0 	bl	272e8 <rpc_ip_client_data_free>
   2ab28:	4620      	mov	r0, r4
   2ab2a:	f7fc fbd5 	bl	272d8 <rpc_ip_client_message_free>
   2ab2e:	602e      	str	r6, [r5, #0]
   2ab30:	2023      	movs	r0, #35	; 0x23
   2ab32:	bd70      	pop	{r4, r5, r6, pc}

0002ab34 <ip_interface_wait>:
   2ab34:	b538      	push	{r3, r4, r5, lr}
   2ab36:	4605      	mov	r5, r0
   2ab38:	f001 fc14 	bl	2c364 <interface_socket_wait>
   2ab3c:	4604      	mov	r4, r0
   2ab3e:	b108      	cbz	r0, 2ab44 <ip_interface_wait+0x10>
   2ab40:	4620      	mov	r0, r4
   2ab42:	bd38      	pop	{r3, r4, r5, pc}
   2ab44:	4628      	mov	r0, r5
   2ab46:	f001 fc81 	bl	2c44c <interface_socket_from_handle_get>
   2ab4a:	2800      	cmp	r0, #0
   2ab4c:	d0f8      	beq.n	2ab40 <ip_interface_wait+0xc>
   2ab4e:	6844      	ldr	r4, [r0, #4]
   2ab50:	2c00      	cmp	r4, #0
   2ab52:	d0f5      	beq.n	2ab40 <ip_interface_wait+0xc>
   2ab54:	2300      	movs	r3, #0
   2ab56:	6043      	str	r3, [r0, #4]
   2ab58:	4620      	mov	r0, r4
   2ab5a:	bd38      	pop	{r3, r4, r5, pc}

0002ab5c <ip_interface_init>:
   2ab5c:	b538      	push	{r3, r4, r5, lr}
   2ab5e:	2300      	movs	r3, #0
   2ab60:	4d07      	ldr	r5, [pc, #28]	; (2ab80 <ip_interface_init+0x24>)
   2ab62:	4c08      	ldr	r4, [pc, #32]	; (2ab84 <ip_interface_init+0x28>)
   2ab64:	4619      	mov	r1, r3
   2ab66:	2224      	movs	r2, #36	; 0x24
   2ab68:	4807      	ldr	r0, [pc, #28]	; (2ab88 <ip_interface_init+0x2c>)
   2ab6a:	602b      	str	r3, [r5, #0]
   2ab6c:	6023      	str	r3, [r4, #0]
   2ab6e:	f00a ffeb 	bl	35b48 <memset>
   2ab72:	f7fc fb81 	bl	27278 <rpc_ip_client_init>
   2ab76:	3000      	adds	r0, #0
   2ab78:	bf18      	it	ne
   2ab7a:	2001      	movne	r0, #1
   2ab7c:	4240      	negs	r0, r0
   2ab7e:	bd38      	pop	{r3, r4, r5, pc}
   2ab80:	20022b38 	.word	0x20022b38
   2ab84:	20022b34 	.word	0x20022b34
   2ab88:	20022b40 	.word	0x20022b40

0002ab8c <ip_interface_open>:
   2ab8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ab90:	4606      	mov	r6, r0
   2ab92:	2000      	movs	r0, #0
   2ab94:	f026 0308 	bic.w	r3, r6, #8
   2ab98:	b082      	sub	sp, #8
   2ab9a:	2b02      	cmp	r3, #2
   2ab9c:	460c      	mov	r4, r1
   2ab9e:	4617      	mov	r7, r2
   2aba0:	9000      	str	r0, [sp, #0]
   2aba2:	d002      	beq.n	2abaa <ip_interface_open+0x1e>
   2aba4:	2e05      	cmp	r6, #5
   2aba6:	f040 8085 	bne.w	2acb4 <ip_interface_open+0x128>
   2abaa:	1e63      	subs	r3, r4, #1
   2abac:	2b02      	cmp	r3, #2
   2abae:	f200 8097 	bhi.w	2ace0 <ip_interface_open+0x154>
   2abb2:	2f00      	cmp	r7, #0
   2abb4:	d154      	bne.n	2ac60 <ip_interface_open+0xd4>
   2abb6:	2c01      	cmp	r4, #1
   2abb8:	d067      	beq.n	2ac8a <ip_interface_open+0xfe>
   2abba:	2c03      	cmp	r4, #3
   2abbc:	bf18      	it	ne
   2abbe:	2702      	movne	r7, #2
   2abc0:	4a4a      	ldr	r2, [pc, #296]	; (2acec <ip_interface_open+0x160>)
   2abc2:	4621      	mov	r1, r4
   2abc4:	4668      	mov	r0, sp
   2abc6:	f001 fb1b 	bl	2c200 <interface_socket_allocate>
   2abca:	9b00      	ldr	r3, [sp, #0]
   2abcc:	4680      	mov	r8, r0
   2abce:	2b00      	cmp	r3, #0
   2abd0:	d059      	beq.n	2ac86 <ip_interface_open+0xfa>
   2abd2:	2100      	movs	r1, #0
   2abd4:	a802      	add	r0, sp, #8
   2abd6:	f840 1d04 	str.w	r1, [r0, #-4]!
   2abda:	e9c3 6403 	strd	r6, r4, [r3, #12]
   2abde:	615f      	str	r7, [r3, #20]
   2abe0:	f7fc fb50 	bl	27284 <rpc_ip_client_request_alloc>
   2abe4:	2800      	cmp	r0, #0
   2abe6:	d14b      	bne.n	2ac80 <ip_interface_open+0xf4>
   2abe8:	f247 0201 	movw	r2, #28673	; 0x7001
   2abec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2abf0:	2108      	movs	r1, #8
   2abf2:	9d01      	ldr	r5, [sp, #4]
   2abf4:	ea42 4208 	orr.w	r2, r2, r8, lsl #16
   2abf8:	60ea      	str	r2, [r5, #12]
   2abfa:	7268      	strb	r0, [r5, #9]
   2abfc:	72a8      	strb	r0, [r5, #10]
   2abfe:	72e8      	strb	r0, [r5, #11]
   2ac00:	7229      	strb	r1, [r5, #8]
   2ac02:	742b      	strb	r3, [r5, #16]
   2ac04:	746b      	strb	r3, [r5, #17]
   2ac06:	74ab      	strb	r3, [r5, #18]
   2ac08:	74eb      	strb	r3, [r5, #19]
   2ac0a:	68ab      	ldr	r3, [r5, #8]
   2ac0c:	2e05      	cmp	r6, #5
   2ac0e:	f103 030c 	add.w	r3, r3, #12
   2ac12:	60ab      	str	r3, [r5, #8]
   2ac14:	d003      	beq.n	2ac1e <ip_interface_open+0x92>
   2ac16:	2e0a      	cmp	r6, #10
   2ac18:	bf14      	ite	ne
   2ac1a:	2601      	movne	r6, #1
   2ac1c:	2602      	moveq	r6, #2
   2ac1e:	616e      	str	r6, [r5, #20]
   2ac20:	61ef      	str	r7, [r5, #28]
   2ac22:	61ac      	str	r4, [r5, #24]
   2ac24:	f247 0101 	movw	r1, #28673	; 0x7001
   2ac28:	4628      	mov	r0, r5
   2ac2a:	9f00      	ldr	r7, [sp, #0]
   2ac2c:	f7fc fb3e 	bl	272ac <rpc_ip_client_request_send>
   2ac30:	4606      	mov	r6, r0
   2ac32:	b360      	cbz	r0, 2ac8e <ip_interface_open+0x102>
   2ac34:	6828      	ldr	r0, [r5, #0]
   2ac36:	b108      	cbz	r0, 2ac3c <ip_interface_open+0xb0>
   2ac38:	f7fc fb56 	bl	272e8 <rpc_ip_client_data_free>
   2ac3c:	4628      	mov	r0, r5
   2ac3e:	f7fc fb4b 	bl	272d8 <rpc_ip_client_message_free>
   2ac42:	2301      	movs	r3, #1
   2ac44:	2523      	movs	r5, #35	; 0x23
   2ac46:	603b      	str	r3, [r7, #0]
   2ac48:	4640      	mov	r0, r8
   2ac4a:	f001 fb3d 	bl	2c2c8 <interface_socket_free>
   2ac4e:	4628      	mov	r0, r5
   2ac50:	f7f7 ff54 	bl	22afc <bsd_os_errno_set>
   2ac54:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   2ac58:	4640      	mov	r0, r8
   2ac5a:	b002      	add	sp, #8
   2ac5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2ac60:	2c01      	cmp	r4, #1
   2ac62:	d009      	beq.n	2ac78 <ip_interface_open+0xec>
   2ac64:	2c02      	cmp	r4, #2
   2ac66:	d109      	bne.n	2ac7c <ip_interface_open+0xf0>
   2ac68:	2f02      	cmp	r7, #2
   2ac6a:	d0a9      	beq.n	2abc0 <ip_interface_open+0x34>
   2ac6c:	2029      	movs	r0, #41	; 0x29
   2ac6e:	f7f7 ff45 	bl	22afc <bsd_os_errno_set>
   2ac72:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   2ac76:	e7ef      	b.n	2ac58 <ip_interface_open+0xcc>
   2ac78:	2f01      	cmp	r7, #1
   2ac7a:	d1f7      	bne.n	2ac6c <ip_interface_open+0xe0>
   2ac7c:	2702      	movs	r7, #2
   2ac7e:	e79f      	b.n	2abc0 <ip_interface_open+0x34>
   2ac80:	9d01      	ldr	r5, [sp, #4]
   2ac82:	2d00      	cmp	r5, #0
   2ac84:	d1c1      	bne.n	2ac0a <ip_interface_open+0x7e>
   2ac86:	250c      	movs	r5, #12
   2ac88:	e7de      	b.n	2ac48 <ip_interface_open+0xbc>
   2ac8a:	4627      	mov	r7, r4
   2ac8c:	e798      	b.n	2abc0 <ip_interface_open+0x34>
   2ac8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2ac92:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2ac96:	2102      	movs	r1, #2
   2ac98:	4640      	mov	r0, r8
   2ac9a:	f001 fb63 	bl	2c364 <interface_socket_wait>
   2ac9e:	4605      	mov	r5, r0
   2aca0:	2800      	cmp	r0, #0
   2aca2:	d1d1      	bne.n	2ac48 <ip_interface_open+0xbc>
   2aca4:	4640      	mov	r0, r8
   2aca6:	f001 fbd1 	bl	2c44c <interface_socket_from_handle_get>
   2acaa:	b148      	cbz	r0, 2acc0 <ip_interface_open+0x134>
   2acac:	6845      	ldr	r5, [r0, #4]
   2acae:	b13d      	cbz	r5, 2acc0 <ip_interface_open+0x134>
   2acb0:	6046      	str	r6, [r0, #4]
   2acb2:	e7c9      	b.n	2ac48 <ip_interface_open+0xbc>
   2acb4:	202f      	movs	r0, #47	; 0x2f
   2acb6:	f7f7 ff21 	bl	22afc <bsd_os_errno_set>
   2acba:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   2acbe:	e7cb      	b.n	2ac58 <ip_interface_open+0xcc>
   2acc0:	3c02      	subs	r4, #2
   2acc2:	2c01      	cmp	r4, #1
   2acc4:	d8c8      	bhi.n	2ac58 <ip_interface_open+0xcc>
   2acc6:	4640      	mov	r0, r8
   2acc8:	9b00      	ldr	r3, [sp, #0]
   2acca:	681a      	ldr	r2, [r3, #0]
   2accc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   2acd0:	601a      	str	r2, [r3, #0]
   2acd2:	681a      	ldr	r2, [r3, #0]
   2acd4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   2acd8:	601a      	str	r2, [r3, #0]
   2acda:	b002      	add	sp, #8
   2acdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2ace0:	2016      	movs	r0, #22
   2ace2:	f7f7 ff0b 	bl	22afc <bsd_os_errno_set>
   2ace6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   2acea:	e7b5      	b.n	2ac58 <ip_interface_open+0xcc>
   2acec:	0002aaa1 	.word	0x0002aaa1

0002acf0 <ip_interface_close>:
   2acf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2acf4:	b082      	sub	sp, #8
   2acf6:	4606      	mov	r6, r0
   2acf8:	f001 fba8 	bl	2c44c <interface_socket_from_handle_get>
   2acfc:	2800      	cmp	r0, #0
   2acfe:	d063      	beq.n	2adc8 <ip_interface_close+0xd8>
   2ad00:	4604      	mov	r4, r0
   2ad02:	2100      	movs	r1, #0
   2ad04:	a802      	add	r0, sp, #8
   2ad06:	6827      	ldr	r7, [r4, #0]
   2ad08:	f840 1d04 	str.w	r1, [r0, #-4]!
   2ad0c:	f8d4 8018 	ldr.w	r8, [r4, #24]
   2ad10:	f7fc fab8 	bl	27284 <rpc_ip_client_request_alloc>
   2ad14:	2800      	cmp	r0, #0
   2ad16:	d13a      	bne.n	2ad8e <ip_interface_close+0x9e>
   2ad18:	f247 0309 	movw	r3, #28681	; 0x7009
   2ad1c:	2208      	movs	r2, #8
   2ad1e:	9d01      	ldr	r5, [sp, #4]
   2ad20:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   2ad24:	60eb      	str	r3, [r5, #12]
   2ad26:	f8c5 8010 	str.w	r8, [r5, #16]
   2ad2a:	7268      	strb	r0, [r5, #9]
   2ad2c:	72a8      	strb	r0, [r5, #10]
   2ad2e:	72e8      	strb	r0, [r5, #11]
   2ad30:	722a      	strb	r2, [r5, #8]
   2ad32:	6823      	ldr	r3, [r4, #0]
   2ad34:	f247 0109 	movw	r1, #28681	; 0x7009
   2ad38:	0c1b      	lsrs	r3, r3, #16
   2ad3a:	041b      	lsls	r3, r3, #16
   2ad3c:	f043 030d 	orr.w	r3, r3, #13
   2ad40:	6023      	str	r3, [r4, #0]
   2ad42:	6823      	ldr	r3, [r4, #0]
   2ad44:	4628      	mov	r0, r5
   2ad46:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   2ad4a:	6023      	str	r3, [r4, #0]
   2ad4c:	6823      	ldr	r3, [r4, #0]
   2ad4e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   2ad52:	6023      	str	r3, [r4, #0]
   2ad54:	f7fc faaa 	bl	272ac <rpc_ip_client_request_send>
   2ad58:	bb40      	cbnz	r0, 2adac <ip_interface_close+0xbc>
   2ad5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2ad5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2ad62:	210e      	movs	r1, #14
   2ad64:	4630      	mov	r0, r6
   2ad66:	f001 fafd 	bl	2c364 <interface_socket_wait>
   2ad6a:	4604      	mov	r4, r0
   2ad6c:	b1a0      	cbz	r0, 2ad98 <ip_interface_close+0xa8>
   2ad6e:	4c17      	ldr	r4, [pc, #92]	; (2adcc <ip_interface_close+0xdc>)
   2ad70:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
   2ad74:	b120      	cbz	r0, 2ad80 <ip_interface_close+0x90>
   2ad76:	f7fc faaf 	bl	272d8 <rpc_ip_client_message_free>
   2ad7a:	2300      	movs	r3, #0
   2ad7c:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
   2ad80:	4630      	mov	r0, r6
   2ad82:	f001 faa1 	bl	2c2c8 <interface_socket_free>
   2ad86:	2000      	movs	r0, #0
   2ad88:	b002      	add	sp, #8
   2ad8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2ad8e:	9d01      	ldr	r5, [sp, #4]
   2ad90:	200c      	movs	r0, #12
   2ad92:	2d00      	cmp	r5, #0
   2ad94:	d1cd      	bne.n	2ad32 <ip_interface_close+0x42>
   2ad96:	e012      	b.n	2adbe <ip_interface_close+0xce>
   2ad98:	4630      	mov	r0, r6
   2ad9a:	f001 fb57 	bl	2c44c <interface_socket_from_handle_get>
   2ad9e:	2800      	cmp	r0, #0
   2ada0:	d0e5      	beq.n	2ad6e <ip_interface_close+0x7e>
   2ada2:	6843      	ldr	r3, [r0, #4]
   2ada4:	2b00      	cmp	r3, #0
   2ada6:	d0e2      	beq.n	2ad6e <ip_interface_close+0x7e>
   2ada8:	6044      	str	r4, [r0, #4]
   2adaa:	e7e0      	b.n	2ad6e <ip_interface_close+0x7e>
   2adac:	6828      	ldr	r0, [r5, #0]
   2adae:	b108      	cbz	r0, 2adb4 <ip_interface_close+0xc4>
   2adb0:	f7fc fa9a 	bl	272e8 <rpc_ip_client_data_free>
   2adb4:	4628      	mov	r0, r5
   2adb6:	f7fc fa8f 	bl	272d8 <rpc_ip_client_message_free>
   2adba:	2023      	movs	r0, #35	; 0x23
   2adbc:	6027      	str	r7, [r4, #0]
   2adbe:	f7f7 fe9d 	bl	22afc <bsd_os_errno_set>
   2adc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2adc6:	e7df      	b.n	2ad88 <ip_interface_close+0x98>
   2adc8:	2009      	movs	r0, #9
   2adca:	e7f8      	b.n	2adbe <ip_interface_close+0xce>
   2adcc:	20022b40 	.word	0x20022b40

0002add0 <ip_interface_sendto>:
   2add0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2add4:	2400      	movs	r4, #0
   2add6:	b089      	sub	sp, #36	; 0x24
   2add8:	9102      	str	r1, [sp, #8]
   2adda:	4615      	mov	r5, r2
   2addc:	4699      	mov	r9, r3
   2adde:	9407      	str	r4, [sp, #28]
   2ade0:	4607      	mov	r7, r0
   2ade2:	9e12      	ldr	r6, [sp, #72]	; 0x48
   2ade4:	f001 fb32 	bl	2c44c <interface_socket_from_handle_get>
   2ade8:	2800      	cmp	r0, #0
   2adea:	f000 815f 	beq.w	2b0ac <ip_interface_sendto+0x2dc>
   2adee:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   2adf2:	f300 814c 	bgt.w	2b08e <ip_interface_sendto+0x2be>
   2adf6:	6903      	ldr	r3, [r0, #16]
   2adf8:	4604      	mov	r4, r0
   2adfa:	2b01      	cmp	r3, #1
   2adfc:	f000 80fb 	beq.w	2aff6 <ip_interface_sendto+0x226>
   2ae00:	6822      	ldr	r2, [r4, #0]
   2ae02:	0390      	lsls	r0, r2, #14
   2ae04:	d562      	bpl.n	2aecc <ip_interface_sendto+0xfc>
   2ae06:	f1b9 0f00 	cmp.w	r9, #0
   2ae0a:	f000 80fc 	beq.w	2b006 <ip_interface_sendto+0x236>
   2ae0e:	f019 0f02 	tst.w	r9, #2
   2ae12:	f000 8146 	beq.w	2b0a2 <ip_interface_sendto+0x2d2>
   2ae16:	2300      	movs	r3, #0
   2ae18:	9303      	str	r3, [sp, #12]
   2ae1a:	f247 0806 	movw	r8, #28678	; 0x7006
   2ae1e:	f04f 0b0c 	mov.w	fp, #12
   2ae22:	4ba6      	ldr	r3, [pc, #664]	; (2b0bc <ip_interface_sendto+0x2ec>)
   2ae24:	9300      	str	r3, [sp, #0]
   2ae26:	043b      	lsls	r3, r7, #16
   2ae28:	9304      	str	r3, [sp, #16]
   2ae2a:	4629      	mov	r1, r5
   2ae2c:	a807      	add	r0, sp, #28
   2ae2e:	f7fc fa29 	bl	27284 <rpc_ip_client_request_alloc>
   2ae32:	2804      	cmp	r0, #4
   2ae34:	d063      	beq.n	2aefe <ip_interface_sendto+0x12e>
   2ae36:	2800      	cmp	r0, #0
   2ae38:	f040 813d 	bne.w	2b0b6 <ip_interface_sendto+0x2e6>
   2ae3c:	9b07      	ldr	r3, [sp, #28]
   2ae3e:	f883 b008 	strb.w	fp, [r3, #8]
   2ae42:	7258      	strb	r0, [r3, #9]
   2ae44:	7298      	strb	r0, [r3, #10]
   2ae46:	72d8      	strb	r0, [r3, #11]
   2ae48:	2e00      	cmp	r6, #0
   2ae4a:	d074      	beq.n	2af36 <ip_interface_sendto+0x166>
   2ae4c:	68e2      	ldr	r2, [r4, #12]
   2ae4e:	6871      	ldr	r1, [r6, #4]
   2ae50:	428a      	cmp	r2, r1
   2ae52:	f040 80a2 	bne.w	2af9a <ip_interface_sendto+0x1ca>
   2ae56:	7831      	ldrb	r1, [r6, #0]
   2ae58:	9813      	ldr	r0, [sp, #76]	; 0x4c
   2ae5a:	4288      	cmp	r0, r1
   2ae5c:	d10a      	bne.n	2ae74 <ip_interface_sendto+0xa4>
   2ae5e:	2a02      	cmp	r2, #2
   2ae60:	f103 001c 	add.w	r0, r3, #28
   2ae64:	f000 8101 	beq.w	2b06a <ip_interface_sendto+0x29a>
   2ae68:	2a0a      	cmp	r2, #10
   2ae6a:	d103      	bne.n	2ae74 <ip_interface_sendto+0xa4>
   2ae6c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2ae6e:	2a24      	cmp	r2, #36	; 0x24
   2ae70:	f000 80e8 	beq.w	2b044 <ip_interface_sendto+0x274>
   2ae74:	f04f 0a16 	mov.w	sl, #22
   2ae78:	6818      	ldr	r0, [r3, #0]
   2ae7a:	b110      	cbz	r0, 2ae82 <ip_interface_sendto+0xb2>
   2ae7c:	f7fc fa34 	bl	272e8 <rpc_ip_client_data_free>
   2ae80:	9b07      	ldr	r3, [sp, #28]
   2ae82:	4618      	mov	r0, r3
   2ae84:	f7fc fa28 	bl	272d8 <rpc_ip_client_message_free>
   2ae88:	6823      	ldr	r3, [r4, #0]
   2ae8a:	031a      	lsls	r2, r3, #12
   2ae8c:	d43f      	bmi.n	2af0e <ip_interface_sendto+0x13e>
   2ae8e:	6823      	ldr	r3, [r4, #0]
   2ae90:	b29b      	uxth	r3, r3
   2ae92:	2b0d      	cmp	r3, #13
   2ae94:	d007      	beq.n	2aea6 <ip_interface_sendto+0xd6>
   2ae96:	6823      	ldr	r3, [r4, #0]
   2ae98:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   2ae9c:	6023      	str	r3, [r4, #0]
   2ae9e:	6823      	ldr	r3, [r4, #0]
   2aea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2aea4:	6023      	str	r3, [r4, #0]
   2aea6:	f1ba 0f00 	cmp.w	sl, #0
   2aeaa:	d130      	bne.n	2af0e <ip_interface_sendto+0x13e>
   2aeac:	6823      	ldr	r3, [r4, #0]
   2aeae:	0118      	lsls	r0, r3, #4
   2aeb0:	d576      	bpl.n	2afa0 <ip_interface_sendto+0x1d0>
   2aeb2:	6823      	ldr	r3, [r4, #0]
   2aeb4:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
   2aeb8:	6023      	str	r3, [r4, #0]
   2aeba:	9b00      	ldr	r3, [sp, #0]
   2aebc:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   2aec0:	2800      	cmp	r0, #0
   2aec2:	d12e      	bne.n	2af22 <ip_interface_sendto+0x152>
   2aec4:	4628      	mov	r0, r5
   2aec6:	b009      	add	sp, #36	; 0x24
   2aec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2aecc:	6822      	ldr	r2, [r4, #0]
   2aece:	0091      	lsls	r1, r2, #2
   2aed0:	d406      	bmi.n	2aee0 <ip_interface_sendto+0x110>
   2aed2:	2b01      	cmp	r3, #1
   2aed4:	f000 80b0 	beq.w	2b038 <ip_interface_sendto+0x268>
   2aed8:	6823      	ldr	r3, [r4, #0]
   2aeda:	031a      	lsls	r2, r3, #12
   2aedc:	f140 80d2 	bpl.w	2b084 <ip_interface_sendto+0x2b4>
   2aee0:	6823      	ldr	r3, [r4, #0]
   2aee2:	031b      	lsls	r3, r3, #12
   2aee4:	f140 80d8 	bpl.w	2b098 <ip_interface_sendto+0x2c8>
   2aee8:	4b74      	ldr	r3, [pc, #464]	; (2b0bc <ip_interface_sendto+0x2ec>)
   2aeea:	f8d4 a008 	ldr.w	sl, [r4, #8]
   2aeee:	9300      	str	r3, [sp, #0]
   2aef0:	e7d9      	b.n	2aea6 <ip_interface_sendto+0xd6>
   2aef2:	9b00      	ldr	r3, [sp, #0]
   2aef4:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   2aef8:	b108      	cbz	r0, 2aefe <ip_interface_sendto+0x12e>
   2aefa:	f7fc f9ed 	bl	272d8 <rpc_ip_client_message_free>
   2aefe:	9b03      	ldr	r3, [sp, #12]
   2af00:	2b00      	cmp	r3, #0
   2af02:	d192      	bne.n	2ae2a <ip_interface_sendto+0x5a>
   2af04:	6823      	ldr	r3, [r4, #0]
   2af06:	f04f 0a23 	mov.w	sl, #35	; 0x23
   2af0a:	031a      	lsls	r2, r3, #12
   2af0c:	d5bf      	bpl.n	2ae8e <ip_interface_sendto+0xbe>
   2af0e:	4650      	mov	r0, sl
   2af10:	f7f7 fdf4 	bl	22afc <bsd_os_errno_set>
   2af14:	9b00      	ldr	r3, [sp, #0]
   2af16:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2af1a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   2af1e:	2800      	cmp	r0, #0
   2af20:	d0d0      	beq.n	2aec4 <ip_interface_sendto+0xf4>
   2af22:	f7fc f9d9 	bl	272d8 <rpc_ip_client_message_free>
   2af26:	2300      	movs	r3, #0
   2af28:	9a00      	ldr	r2, [sp, #0]
   2af2a:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
   2af2e:	4628      	mov	r0, r5
   2af30:	b009      	add	sp, #36	; 0x24
   2af32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2af36:	4642      	mov	r2, r8
   2af38:	f8c3 9014 	str.w	r9, [r3, #20]
   2af3c:	69a1      	ldr	r1, [r4, #24]
   2af3e:	9804      	ldr	r0, [sp, #16]
   2af40:	6119      	str	r1, [r3, #16]
   2af42:	9902      	ldr	r1, [sp, #8]
   2af44:	4302      	orrs	r2, r0
   2af46:	60da      	str	r2, [r3, #12]
   2af48:	605d      	str	r5, [r3, #4]
   2af4a:	b119      	cbz	r1, 2af54 <ip_interface_sendto+0x184>
   2af4c:	6818      	ldr	r0, [r3, #0]
   2af4e:	462a      	mov	r2, r5
   2af50:	f00a fdda 	bl	35b08 <memcpy>
   2af54:	6823      	ldr	r3, [r4, #0]
   2af56:	4641      	mov	r1, r8
   2af58:	9305      	str	r3, [sp, #20]
   2af5a:	6823      	ldr	r3, [r4, #0]
   2af5c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   2af60:	6023      	str	r3, [r4, #0]
   2af62:	6823      	ldr	r3, [r4, #0]
   2af64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   2af68:	6023      	str	r3, [r4, #0]
   2af6a:	9b07      	ldr	r3, [sp, #28]
   2af6c:	4618      	mov	r0, r3
   2af6e:	9301      	str	r3, [sp, #4]
   2af70:	f7fc f99c 	bl	272ac <rpc_ip_client_request_send>
   2af74:	9b01      	ldr	r3, [sp, #4]
   2af76:	4682      	mov	sl, r0
   2af78:	b9e8      	cbnz	r0, 2afb6 <ip_interface_sendto+0x1e6>
   2af7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   2af7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2af82:	4611      	mov	r1, r2
   2af84:	4638      	mov	r0, r7
   2af86:	f001 f9ed 	bl	2c364 <interface_socket_wait>
   2af8a:	b308      	cbz	r0, 2afd0 <ip_interface_sendto+0x200>
   2af8c:	6823      	ldr	r3, [r4, #0]
   2af8e:	0319      	lsls	r1, r3, #12
   2af90:	d42a      	bmi.n	2afe8 <ip_interface_sendto+0x218>
   2af92:	280c      	cmp	r0, #12
   2af94:	d0ad      	beq.n	2aef2 <ip_interface_sendto+0x122>
   2af96:	4682      	mov	sl, r0
   2af98:	e776      	b.n	2ae88 <ip_interface_sendto+0xb8>
   2af9a:	f04f 0a2f 	mov.w	sl, #47	; 0x2f
   2af9e:	e76b      	b.n	2ae78 <ip_interface_sendto+0xa8>
   2afa0:	9b00      	ldr	r3, [sp, #0]
   2afa2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   2afa6:	6985      	ldr	r5, [r0, #24]
   2afa8:	f7fc f996 	bl	272d8 <rpc_ip_client_message_free>
   2afac:	2300      	movs	r3, #0
   2afae:	9a00      	ldr	r2, [sp, #0]
   2afb0:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
   2afb4:	e7bb      	b.n	2af2e <ip_interface_sendto+0x15e>
   2afb6:	6818      	ldr	r0, [r3, #0]
   2afb8:	469a      	mov	sl, r3
   2afba:	b108      	cbz	r0, 2afc0 <ip_interface_sendto+0x1f0>
   2afbc:	f7fc f994 	bl	272e8 <rpc_ip_client_data_free>
   2afc0:	4650      	mov	r0, sl
   2afc2:	f7fc f989 	bl	272d8 <rpc_ip_client_message_free>
   2afc6:	9b05      	ldr	r3, [sp, #20]
   2afc8:	f04f 0a23 	mov.w	sl, #35	; 0x23
   2afcc:	6023      	str	r3, [r4, #0]
   2afce:	e75b      	b.n	2ae88 <ip_interface_sendto+0xb8>
   2afd0:	4638      	mov	r0, r7
   2afd2:	f001 fa3b 	bl	2c44c <interface_socket_from_handle_get>
   2afd6:	4603      	mov	r3, r0
   2afd8:	b1e0      	cbz	r0, 2b014 <ip_interface_sendto+0x244>
   2afda:	6840      	ldr	r0, [r0, #4]
   2afdc:	b1d0      	cbz	r0, 2b014 <ip_interface_sendto+0x244>
   2afde:	f8c3 a004 	str.w	sl, [r3, #4]
   2afe2:	6823      	ldr	r3, [r4, #0]
   2afe4:	0319      	lsls	r1, r3, #12
   2afe6:	d5d4      	bpl.n	2af92 <ip_interface_sendto+0x1c2>
   2afe8:	f8d4 a008 	ldr.w	sl, [r4, #8]
   2afec:	6823      	ldr	r3, [r4, #0]
   2afee:	031e      	lsls	r6, r3, #12
   2aff0:	f57f af4d 	bpl.w	2ae8e <ip_interface_sendto+0xbe>
   2aff4:	e757      	b.n	2aea6 <ip_interface_sendto+0xd6>
   2aff6:	2e00      	cmp	r6, #0
   2aff8:	f43f af02 	beq.w	2ae00 <ip_interface_sendto+0x30>
   2affc:	4b2f      	ldr	r3, [pc, #188]	; (2b0bc <ip_interface_sendto+0x2ec>)
   2affe:	f04f 0a38 	mov.w	sl, #56	; 0x38
   2b002:	9300      	str	r3, [sp, #0]
   2b004:	e783      	b.n	2af0e <ip_interface_sendto+0x13e>
   2b006:	6823      	ldr	r3, [r4, #0]
   2b008:	f083 5380 	eor.w	r3, r3, #268435456	; 0x10000000
   2b00c:	f3c3 7300 	ubfx	r3, r3, #28, #1
   2b010:	9303      	str	r3, [sp, #12]
   2b012:	e702      	b.n	2ae1a <ip_interface_sendto+0x4a>
   2b014:	6823      	ldr	r3, [r4, #0]
   2b016:	031b      	lsls	r3, r3, #12
   2b018:	f53f af48 	bmi.w	2aeac <ip_interface_sendto+0xdc>
   2b01c:	6823      	ldr	r3, [r4, #0]
   2b01e:	b29b      	uxth	r3, r3
   2b020:	2b0d      	cmp	r3, #13
   2b022:	f43f af43 	beq.w	2aeac <ip_interface_sendto+0xdc>
   2b026:	6823      	ldr	r3, [r4, #0]
   2b028:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   2b02c:	6023      	str	r3, [r4, #0]
   2b02e:	6823      	ldr	r3, [r4, #0]
   2b030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2b034:	6023      	str	r3, [r4, #0]
   2b036:	e739      	b.n	2aeac <ip_interface_sendto+0xdc>
   2b038:	6823      	ldr	r3, [r4, #0]
   2b03a:	b29b      	uxth	r3, r3
   2b03c:	2b05      	cmp	r3, #5
   2b03e:	f47f af4f 	bne.w	2aee0 <ip_interface_sendto+0x110>
   2b042:	e749      	b.n	2aed8 <ip_interface_sendto+0x108>
   2b044:	2210      	movs	r2, #16
   2b046:	8931      	ldrh	r1, [r6, #8]
   2b048:	835a      	strh	r2, [r3, #26]
   2b04a:	8319      	strh	r1, [r3, #24]
   2b04c:	18b1      	adds	r1, r6, r2
   2b04e:	f00a fd5b 	bl	35b08 <memcpy>
   2b052:	f247 0207 	movw	r2, #28679	; 0x7007
   2b056:	9b07      	ldr	r3, [sp, #28]
   2b058:	4690      	mov	r8, r2
   2b05a:	6899      	ldr	r1, [r3, #8]
   2b05c:	8b58      	ldrh	r0, [r3, #26]
   2b05e:	3104      	adds	r1, #4
   2b060:	4401      	add	r1, r0
   2b062:	f8c3 9014 	str.w	r9, [r3, #20]
   2b066:	6099      	str	r1, [r3, #8]
   2b068:	e768      	b.n	2af3c <ip_interface_sendto+0x16c>
   2b06a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2b06c:	2a10      	cmp	r2, #16
   2b06e:	f47f af01 	bne.w	2ae74 <ip_interface_sendto+0xa4>
   2b072:	2204      	movs	r2, #4
   2b074:	8931      	ldrh	r1, [r6, #8]
   2b076:	835a      	strh	r2, [r3, #26]
   2b078:	8319      	strh	r1, [r3, #24]
   2b07a:	f106 010c 	add.w	r1, r6, #12
   2b07e:	f00a fd43 	bl	35b08 <memcpy>
   2b082:	e7e6      	b.n	2b052 <ip_interface_sendto+0x282>
   2b084:	4b0d      	ldr	r3, [pc, #52]	; (2b0bc <ip_interface_sendto+0x2ec>)
   2b086:	f04f 0a23 	mov.w	sl, #35	; 0x23
   2b08a:	9300      	str	r3, [sp, #0]
   2b08c:	e73f      	b.n	2af0e <ip_interface_sendto+0x13e>
   2b08e:	4b0b      	ldr	r3, [pc, #44]	; (2b0bc <ip_interface_sendto+0x2ec>)
   2b090:	f04f 0a28 	mov.w	sl, #40	; 0x28
   2b094:	9300      	str	r3, [sp, #0]
   2b096:	e73a      	b.n	2af0e <ip_interface_sendto+0x13e>
   2b098:	4b08      	ldr	r3, [pc, #32]	; (2b0bc <ip_interface_sendto+0x2ec>)
   2b09a:	f04f 0a39 	mov.w	sl, #57	; 0x39
   2b09e:	9300      	str	r3, [sp, #0]
   2b0a0:	e735      	b.n	2af0e <ip_interface_sendto+0x13e>
   2b0a2:	4b06      	ldr	r3, [pc, #24]	; (2b0bc <ip_interface_sendto+0x2ec>)
   2b0a4:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
   2b0a8:	9300      	str	r3, [sp, #0]
   2b0aa:	e730      	b.n	2af0e <ip_interface_sendto+0x13e>
   2b0ac:	4b03      	ldr	r3, [pc, #12]	; (2b0bc <ip_interface_sendto+0x2ec>)
   2b0ae:	f04f 0a09 	mov.w	sl, #9
   2b0b2:	9300      	str	r3, [sp, #0]
   2b0b4:	e72b      	b.n	2af0e <ip_interface_sendto+0x13e>
   2b0b6:	f04f 0a0c 	mov.w	sl, #12
   2b0ba:	e6e5      	b.n	2ae88 <ip_interface_sendto+0xb8>
   2b0bc:	20022b40 	.word	0x20022b40

0002b0c0 <ip_interface_recvfrom>:
   2b0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b0c4:	b085      	sub	sp, #20
   2b0c6:	2a00      	cmp	r2, #0
   2b0c8:	f000 811b 	beq.w	2b302 <ip_interface_recvfrom+0x242>
   2b0cc:	4605      	mov	r5, r0
   2b0ce:	468a      	mov	sl, r1
   2b0d0:	4698      	mov	r8, r3
   2b0d2:	4617      	mov	r7, r2
   2b0d4:	b11b      	cbz	r3, 2b0de <ip_interface_recvfrom+0x1e>
   2b0d6:	f013 0f1a 	tst.w	r3, #26
   2b0da:	f000 810f 	beq.w	2b2fc <ip_interface_recvfrom+0x23c>
   2b0de:	4628      	mov	r0, r5
   2b0e0:	f001 f9b4 	bl	2c44c <interface_socket_from_handle_get>
   2b0e4:	4604      	mov	r4, r0
   2b0e6:	2800      	cmp	r0, #0
   2b0e8:	f000 810e 	beq.w	2b308 <ip_interface_recvfrom+0x248>
   2b0ec:	6803      	ldr	r3, [r0, #0]
   2b0ee:	02d9      	lsls	r1, r3, #11
   2b0f0:	d564      	bpl.n	2b1bc <ip_interface_recvfrom+0xfc>
   2b0f2:	f018 0f02 	tst.w	r8, #2
   2b0f6:	bf18      	it	ne
   2b0f8:	f04f 0900 	movne.w	r9, #0
   2b0fc:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   2b100:	bf08      	it	eq
   2b102:	6803      	ldreq	r3, [r0, #0]
   2b104:	f008 0610 	and.w	r6, r8, #16
   2b108:	bf04      	itt	eq
   2b10a:	f083 5980 	eoreq.w	r9, r3, #268435456	; 0x10000000
   2b10e:	f3c9 7900 	ubfxeq	r9, r9, #28, #1
   2b112:	6823      	ldr	r3, [r4, #0]
   2b114:	03da      	lsls	r2, r3, #15
   2b116:	d56c      	bpl.n	2b1f2 <ip_interface_recvfrom+0x132>
   2b118:	6823      	ldr	r3, [r4, #0]
   2b11a:	69e0      	ldr	r0, [r4, #28]
   2b11c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   2b120:	6023      	str	r3, [r4, #0]
   2b122:	6803      	ldr	r3, [r0, #0]
   2b124:	68db      	ldr	r3, [r3, #12]
   2b126:	4798      	blx	r3
   2b128:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2b12c:	4683      	mov	fp, r0
   2b12e:	d07f      	beq.n	2b230 <ip_interface_recvfrom+0x170>
   2b130:	4287      	cmp	r7, r0
   2b132:	dd03      	ble.n	2b13c <ip_interface_recvfrom+0x7c>
   2b134:	6923      	ldr	r3, [r4, #16]
   2b136:	2b01      	cmp	r3, #1
   2b138:	f000 80a6 	beq.w	2b288 <ip_interface_recvfrom+0x1c8>
   2b13c:	2600      	movs	r6, #0
   2b13e:	69e0      	ldr	r0, [r4, #28]
   2b140:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2b142:	b103      	cbz	r3, 2b146 <ip_interface_recvfrom+0x86>
   2b144:	681b      	ldr	r3, [r3, #0]
   2b146:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2b148:	e9cd a700 	strd	sl, r7, [sp]
   2b14c:	e9cd 2302 	strd	r2, r3, [sp, #8]
   2b150:	6803      	ldr	r3, [r0, #0]
   2b152:	4642      	mov	r2, r8
   2b154:	689b      	ldr	r3, [r3, #8]
   2b156:	4669      	mov	r1, sp
   2b158:	4798      	blx	r3
   2b15a:	4683      	mov	fp, r0
   2b15c:	69e0      	ldr	r0, [r4, #28]
   2b15e:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   2b162:	6803      	ldr	r3, [r0, #0]
   2b164:	bf18      	it	ne
   2b166:	2501      	movne	r5, #1
   2b168:	68db      	ldr	r3, [r3, #12]
   2b16a:	bf0a      	itet	eq
   2b16c:	2500      	moveq	r5, #0
   2b16e:	f04f 0900 	movne.w	r9, #0
   2b172:	f04f 0923 	moveq.w	r9, #35	; 0x23
   2b176:	4798      	blx	r3
   2b178:	3001      	adds	r0, #1
   2b17a:	d135      	bne.n	2b1e8 <ip_interface_recvfrom+0x128>
   2b17c:	2e00      	cmp	r6, #0
   2b17e:	f000 80b5 	beq.w	2b2ec <ip_interface_recvfrom+0x22c>
   2b182:	2d00      	cmp	r5, #0
   2b184:	f000 80a5 	beq.w	2b2d2 <ip_interface_recvfrom+0x212>
   2b188:	6823      	ldr	r3, [r4, #0]
   2b18a:	0319      	lsls	r1, r3, #12
   2b18c:	d506      	bpl.n	2b19c <ip_interface_recvfrom+0xdc>
   2b18e:	6823      	ldr	r3, [r4, #0]
   2b190:	b29b      	uxth	r3, r3
   2b192:	2b0d      	cmp	r3, #13
   2b194:	d002      	beq.n	2b19c <ip_interface_recvfrom+0xdc>
   2b196:	6923      	ldr	r3, [r4, #16]
   2b198:	2b01      	cmp	r3, #1
   2b19a:	d025      	beq.n	2b1e8 <ip_interface_recvfrom+0x128>
   2b19c:	6823      	ldr	r3, [r4, #0]
   2b19e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   2b1a2:	6823      	ldr	r3, [r4, #0]
   2b1a4:	f040 80b3 	bne.w	2b30e <ip_interface_recvfrom+0x24e>
   2b1a8:	031a      	lsls	r2, r3, #12
   2b1aa:	d474      	bmi.n	2b296 <ip_interface_recvfrom+0x1d6>
   2b1ac:	f1b9 0f00 	cmp.w	r9, #0
   2b1b0:	f040 8089 	bne.w	2b2c6 <ip_interface_recvfrom+0x206>
   2b1b4:	4658      	mov	r0, fp
   2b1b6:	b005      	add	sp, #20
   2b1b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b1bc:	6803      	ldr	r3, [r0, #0]
   2b1be:	b29b      	uxth	r3, r3
   2b1c0:	2b06      	cmp	r3, #6
   2b1c2:	d072      	beq.n	2b2aa <ip_interface_recvfrom+0x1ea>
   2b1c4:	6803      	ldr	r3, [r0, #0]
   2b1c6:	b29b      	uxth	r3, r3
   2b1c8:	2b07      	cmp	r3, #7
   2b1ca:	bf0c      	ite	eq
   2b1cc:	f04f 0909 	moveq.w	r9, #9
   2b1d0:	f04f 0939 	movne.w	r9, #57	; 0x39
   2b1d4:	69e0      	ldr	r0, [r4, #28]
   2b1d6:	6803      	ldr	r3, [r0, #0]
   2b1d8:	68db      	ldr	r3, [r3, #12]
   2b1da:	4798      	blx	r3
   2b1dc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2b1e0:	4683      	mov	fp, r0
   2b1e2:	d0db      	beq.n	2b19c <ip_interface_recvfrom+0xdc>
   2b1e4:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   2b1e8:	6823      	ldr	r3, [r4, #0]
   2b1ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   2b1ee:	6023      	str	r3, [r4, #0]
   2b1f0:	e7dc      	b.n	2b1ac <ip_interface_recvfrom+0xec>
   2b1f2:	f1b9 0f00 	cmp.w	r9, #0
   2b1f6:	d07d      	beq.n	2b2f4 <ip_interface_recvfrom+0x234>
   2b1f8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2b1fc:	6a23      	ldr	r3, [r4, #32]
   2b1fe:	4611      	mov	r1, r2
   2b200:	2b00      	cmp	r3, #0
   2b202:	bf08      	it	eq
   2b204:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   2b208:	4628      	mov	r0, r5
   2b20a:	f001 f8ab 	bl	2c364 <interface_socket_wait>
   2b20e:	4681      	mov	r9, r0
   2b210:	b358      	cbz	r0, 2b26a <ip_interface_recvfrom+0x1aa>
   2b212:	6823      	ldr	r3, [r4, #0]
   2b214:	69e0      	ldr	r0, [r4, #28]
   2b216:	031b      	lsls	r3, r3, #12
   2b218:	d521      	bpl.n	2b25e <ip_interface_recvfrom+0x19e>
   2b21a:	6823      	ldr	r3, [r4, #0]
   2b21c:	b29b      	uxth	r3, r3
   2b21e:	2b0d      	cmp	r3, #13
   2b220:	d01d      	beq.n	2b25e <ip_interface_recvfrom+0x19e>
   2b222:	6926      	ldr	r6, [r4, #16]
   2b224:	f1a6 0601 	sub.w	r6, r6, #1
   2b228:	fab6 f686 	clz	r6, r6
   2b22c:	0976      	lsrs	r6, r6, #5
   2b22e:	e787      	b.n	2b140 <ip_interface_recvfrom+0x80>
   2b230:	6823      	ldr	r3, [r4, #0]
   2b232:	0318      	lsls	r0, r3, #12
   2b234:	d5dd      	bpl.n	2b1f2 <ip_interface_recvfrom+0x132>
   2b236:	6823      	ldr	r3, [r4, #0]
   2b238:	b29b      	uxth	r3, r3
   2b23a:	2b0d      	cmp	r3, #13
   2b23c:	d0d9      	beq.n	2b1f2 <ip_interface_recvfrom+0x132>
   2b23e:	6923      	ldr	r3, [r4, #16]
   2b240:	69e0      	ldr	r0, [r4, #28]
   2b242:	2b01      	cmp	r3, #1
   2b244:	d034      	beq.n	2b2b0 <ip_interface_recvfrom+0x1f0>
   2b246:	f04f 0939 	mov.w	r9, #57	; 0x39
   2b24a:	6823      	ldr	r3, [r4, #0]
   2b24c:	0c1b      	lsrs	r3, r3, #16
   2b24e:	041b      	lsls	r3, r3, #16
   2b250:	f043 030d 	orr.w	r3, r3, #13
   2b254:	6023      	str	r3, [r4, #0]
   2b256:	6823      	ldr	r3, [r4, #0]
   2b258:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   2b25c:	6023      	str	r3, [r4, #0]
   2b25e:	6803      	ldr	r3, [r0, #0]
   2b260:	68db      	ldr	r3, [r3, #12]
   2b262:	4798      	blx	r3
   2b264:	3001      	adds	r0, #1
   2b266:	d1bf      	bne.n	2b1e8 <ip_interface_recvfrom+0x128>
   2b268:	e798      	b.n	2b19c <ip_interface_recvfrom+0xdc>
   2b26a:	4628      	mov	r0, r5
   2b26c:	f001 f8ee 	bl	2c44c <interface_socket_from_handle_get>
   2b270:	b138      	cbz	r0, 2b282 <ip_interface_recvfrom+0x1c2>
   2b272:	f8d0 9004 	ldr.w	r9, [r0, #4]
   2b276:	f1b9 0f00 	cmp.w	r9, #0
   2b27a:	d002      	beq.n	2b282 <ip_interface_recvfrom+0x1c2>
   2b27c:	2300      	movs	r3, #0
   2b27e:	6043      	str	r3, [r0, #4]
   2b280:	e7c7      	b.n	2b212 <ip_interface_recvfrom+0x152>
   2b282:	f04f 0901 	mov.w	r9, #1
   2b286:	e744      	b.n	2b112 <ip_interface_recvfrom+0x52>
   2b288:	b11e      	cbz	r6, 2b292 <ip_interface_recvfrom+0x1d2>
   2b28a:	6823      	ldr	r3, [r4, #0]
   2b28c:	00db      	lsls	r3, r3, #3
   2b28e:	d5b3      	bpl.n	2b1f8 <ip_interface_recvfrom+0x138>
   2b290:	e754      	b.n	2b13c <ip_interface_recvfrom+0x7c>
   2b292:	69e0      	ldr	r0, [r4, #28]
   2b294:	e754      	b.n	2b140 <ip_interface_recvfrom+0x80>
   2b296:	6823      	ldr	r3, [r4, #0]
   2b298:	b29b      	uxth	r3, r3
   2b29a:	2b0d      	cmp	r3, #13
   2b29c:	d186      	bne.n	2b1ac <ip_interface_recvfrom+0xec>
   2b29e:	68a3      	ldr	r3, [r4, #8]
   2b2a0:	2b00      	cmp	r3, #0
   2b2a2:	d083      	beq.n	2b1ac <ip_interface_recvfrom+0xec>
   2b2a4:	f8d4 9008 	ldr.w	r9, [r4, #8]
   2b2a8:	e780      	b.n	2b1ac <ip_interface_recvfrom+0xec>
   2b2aa:	f04f 0909 	mov.w	r9, #9
   2b2ae:	e791      	b.n	2b1d4 <ip_interface_recvfrom+0x114>
   2b2b0:	6803      	ldr	r3, [r0, #0]
   2b2b2:	68db      	ldr	r3, [r3, #12]
   2b2b4:	4798      	blx	r3
   2b2b6:	3001      	adds	r0, #1
   2b2b8:	d00b      	beq.n	2b2d2 <ip_interface_recvfrom+0x212>
   2b2ba:	f04f 0923 	mov.w	r9, #35	; 0x23
   2b2be:	6823      	ldr	r3, [r4, #0]
   2b2c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   2b2c4:	6023      	str	r3, [r4, #0]
   2b2c6:	4648      	mov	r0, r9
   2b2c8:	f7f7 fc18 	bl	22afc <bsd_os_errno_set>
   2b2cc:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   2b2d0:	e770      	b.n	2b1b4 <ip_interface_recvfrom+0xf4>
   2b2d2:	6823      	ldr	r3, [r4, #0]
   2b2d4:	f04f 0b00 	mov.w	fp, #0
   2b2d8:	0c1b      	lsrs	r3, r3, #16
   2b2da:	041b      	lsls	r3, r3, #16
   2b2dc:	f043 030d 	orr.w	r3, r3, #13
   2b2e0:	6023      	str	r3, [r4, #0]
   2b2e2:	6823      	ldr	r3, [r4, #0]
   2b2e4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   2b2e8:	6023      	str	r3, [r4, #0]
   2b2ea:	e763      	b.n	2b1b4 <ip_interface_recvfrom+0xf4>
   2b2ec:	2d00      	cmp	r5, #0
   2b2ee:	f47f af4b 	bne.w	2b188 <ip_interface_recvfrom+0xc8>
   2b2f2:	e753      	b.n	2b19c <ip_interface_recvfrom+0xdc>
   2b2f4:	f04f 0923 	mov.w	r9, #35	; 0x23
   2b2f8:	69e0      	ldr	r0, [r4, #28]
   2b2fa:	e7b0      	b.n	2b25e <ip_interface_recvfrom+0x19e>
   2b2fc:	f04f 092d 	mov.w	r9, #45	; 0x2d
   2b300:	e7e1      	b.n	2b2c6 <ip_interface_recvfrom+0x206>
   2b302:	f04f 0916 	mov.w	r9, #22
   2b306:	e7de      	b.n	2b2c6 <ip_interface_recvfrom+0x206>
   2b308:	f04f 0909 	mov.w	r9, #9
   2b30c:	e7db      	b.n	2b2c6 <ip_interface_recvfrom+0x206>
   2b30e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
   2b312:	6023      	str	r3, [r4, #0]
   2b314:	6823      	ldr	r3, [r4, #0]
   2b316:	f04f 0969 	mov.w	r9, #105	; 0x69
   2b31a:	0c1b      	lsrs	r3, r3, #16
   2b31c:	041b      	lsls	r3, r3, #16
   2b31e:	f043 030d 	orr.w	r3, r3, #13
   2b322:	6023      	str	r3, [r4, #0]
   2b324:	e7cf      	b.n	2b2c6 <ip_interface_recvfrom+0x206>
   2b326:	bf00      	nop

0002b328 <ip_interface_connect>:
   2b328:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2b32c:	b083      	sub	sp, #12
   2b32e:	2900      	cmp	r1, #0
   2b330:	d049      	beq.n	2b3c6 <ip_interface_connect+0x9e>
   2b332:	4616      	mov	r6, r2
   2b334:	2a00      	cmp	r2, #0
   2b336:	d046      	beq.n	2b3c6 <ip_interface_connect+0x9e>
   2b338:	4607      	mov	r7, r0
   2b33a:	4688      	mov	r8, r1
   2b33c:	f001 f886 	bl	2c44c <interface_socket_from_handle_get>
   2b340:	4605      	mov	r5, r0
   2b342:	2800      	cmp	r0, #0
   2b344:	f000 80a8 	beq.w	2b498 <ip_interface_connect+0x170>
   2b348:	6803      	ldr	r3, [r0, #0]
   2b34a:	b29b      	uxth	r3, r3
   2b34c:	2b02      	cmp	r3, #2
   2b34e:	d004      	beq.n	2b35a <ip_interface_connect+0x32>
   2b350:	6803      	ldr	r3, [r0, #0]
   2b352:	b29b      	uxth	r3, r3
   2b354:	2b04      	cmp	r3, #4
   2b356:	f040 808b 	bne.w	2b470 <ip_interface_connect+0x148>
   2b35a:	6829      	ldr	r1, [r5, #0]
   2b35c:	f011 5100 	ands.w	r1, r1, #536870912	; 0x20000000
   2b360:	f040 8082 	bne.w	2b468 <ip_interface_connect+0x140>
   2b364:	a802      	add	r0, sp, #8
   2b366:	f840 1d04 	str.w	r1, [r0, #-4]!
   2b36a:	f8d5 9018 	ldr.w	r9, [r5, #24]
   2b36e:	f7fb ff89 	bl	27284 <rpc_ip_client_request_alloc>
   2b372:	bb90      	cbnz	r0, 2b3da <ip_interface_connect+0xb2>
   2b374:	2108      	movs	r1, #8
   2b376:	043b      	lsls	r3, r7, #16
   2b378:	9c01      	ldr	r4, [sp, #4]
   2b37a:	f443 42e0 	orr.w	r2, r3, #28672	; 0x7000
   2b37e:	f042 0202 	orr.w	r2, r2, #2
   2b382:	60e2      	str	r2, [r4, #12]
   2b384:	f8c4 9010 	str.w	r9, [r4, #16]
   2b388:	7260      	strb	r0, [r4, #9]
   2b38a:	72a0      	strb	r0, [r4, #10]
   2b38c:	72e0      	strb	r0, [r4, #11]
   2b38e:	7221      	strb	r1, [r4, #8]
   2b390:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
   2b394:	f043 0302 	orr.w	r3, r3, #2
   2b398:	60e3      	str	r3, [r4, #12]
   2b39a:	68a3      	ldr	r3, [r4, #8]
   2b39c:	69aa      	ldr	r2, [r5, #24]
   2b39e:	3304      	adds	r3, #4
   2b3a0:	6122      	str	r2, [r4, #16]
   2b3a2:	60a3      	str	r3, [r4, #8]
   2b3a4:	68eb      	ldr	r3, [r5, #12]
   2b3a6:	f8d8 2004 	ldr.w	r2, [r8, #4]
   2b3aa:	4293      	cmp	r3, r2
   2b3ac:	d11a      	bne.n	2b3e4 <ip_interface_connect+0xbc>
   2b3ae:	f898 2000 	ldrb.w	r2, [r8]
   2b3b2:	4296      	cmp	r6, r2
   2b3b4:	d107      	bne.n	2b3c6 <ip_interface_connect+0x9e>
   2b3b6:	2b02      	cmp	r3, #2
   2b3b8:	f104 0018 	add.w	r0, r4, #24
   2b3bc:	d014      	beq.n	2b3e8 <ip_interface_connect+0xc0>
   2b3be:	2b0a      	cmp	r3, #10
   2b3c0:	d101      	bne.n	2b3c6 <ip_interface_connect+0x9e>
   2b3c2:	2e24      	cmp	r6, #36	; 0x24
   2b3c4:	d01c      	beq.n	2b400 <ip_interface_connect+0xd8>
   2b3c6:	2416      	movs	r4, #22
   2b3c8:	4620      	mov	r0, r4
   2b3ca:	f7f7 fb97 	bl	22afc <bsd_os_errno_set>
   2b3ce:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2b3d2:	4620      	mov	r0, r4
   2b3d4:	b003      	add	sp, #12
   2b3d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2b3da:	9c01      	ldr	r4, [sp, #4]
   2b3dc:	2c00      	cmp	r4, #0
   2b3de:	d059      	beq.n	2b494 <ip_interface_connect+0x16c>
   2b3e0:	043b      	lsls	r3, r7, #16
   2b3e2:	e7d5      	b.n	2b390 <ip_interface_connect+0x68>
   2b3e4:	242f      	movs	r4, #47	; 0x2f
   2b3e6:	e7ef      	b.n	2b3c8 <ip_interface_connect+0xa0>
   2b3e8:	2e10      	cmp	r6, #16
   2b3ea:	d1ec      	bne.n	2b3c6 <ip_interface_connect+0x9e>
   2b3ec:	2204      	movs	r2, #4
   2b3ee:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   2b3f2:	f108 010c 	add.w	r1, r8, #12
   2b3f6:	82e2      	strh	r2, [r4, #22]
   2b3f8:	82a3      	strh	r3, [r4, #20]
   2b3fa:	f00a fb85 	bl	35b08 <memcpy>
   2b3fe:	e008      	b.n	2b412 <ip_interface_connect+0xea>
   2b400:	2210      	movs	r2, #16
   2b402:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   2b406:	eb08 0102 	add.w	r1, r8, r2
   2b40a:	82e2      	strh	r2, [r4, #22]
   2b40c:	82a3      	strh	r3, [r4, #20]
   2b40e:	f00a fb7b 	bl	35b08 <memcpy>
   2b412:	68a3      	ldr	r3, [r4, #8]
   2b414:	8ae2      	ldrh	r2, [r4, #22]
   2b416:	f247 0102 	movw	r1, #28674	; 0x7002
   2b41a:	4413      	add	r3, r2
   2b41c:	60a3      	str	r3, [r4, #8]
   2b41e:	682e      	ldr	r6, [r5, #0]
   2b420:	682b      	ldr	r3, [r5, #0]
   2b422:	4620      	mov	r0, r4
   2b424:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   2b428:	602b      	str	r3, [r5, #0]
   2b42a:	f7fb ff3f 	bl	272ac <rpc_ip_client_request_send>
   2b42e:	b988      	cbnz	r0, 2b454 <ip_interface_connect+0x12c>
   2b430:	682b      	ldr	r3, [r5, #0]
   2b432:	f013 5880 	ands.w	r8, r3, #268435456	; 0x10000000
   2b436:	d119      	bne.n	2b46c <ip_interface_connect+0x144>
   2b438:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b43c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2b440:	2105      	movs	r1, #5
   2b442:	4638      	mov	r0, r7
   2b444:	f000 ff8e 	bl	2c364 <interface_socket_wait>
   2b448:	4604      	mov	r4, r0
   2b44a:	b1c0      	cbz	r0, 2b47e <ip_interface_connect+0x156>
   2b44c:	2c73      	cmp	r4, #115	; 0x73
   2b44e:	d0bb      	beq.n	2b3c8 <ip_interface_connect+0xa0>
   2b450:	602e      	str	r6, [r5, #0]
   2b452:	e7b9      	b.n	2b3c8 <ip_interface_connect+0xa0>
   2b454:	6820      	ldr	r0, [r4, #0]
   2b456:	b108      	cbz	r0, 2b45c <ip_interface_connect+0x134>
   2b458:	f7fb ff46 	bl	272e8 <rpc_ip_client_data_free>
   2b45c:	4620      	mov	r0, r4
   2b45e:	f7fb ff3b 	bl	272d8 <rpc_ip_client_message_free>
   2b462:	2423      	movs	r4, #35	; 0x23
   2b464:	602e      	str	r6, [r5, #0]
   2b466:	e7af      	b.n	2b3c8 <ip_interface_connect+0xa0>
   2b468:	2472      	movs	r4, #114	; 0x72
   2b46a:	e7ad      	b.n	2b3c8 <ip_interface_connect+0xa0>
   2b46c:	2473      	movs	r4, #115	; 0x73
   2b46e:	e7ab      	b.n	2b3c8 <ip_interface_connect+0xa0>
   2b470:	6803      	ldr	r3, [r0, #0]
   2b472:	b29b      	uxth	r3, r3
   2b474:	2b05      	cmp	r3, #5
   2b476:	bf14      	ite	ne
   2b478:	2409      	movne	r4, #9
   2b47a:	2438      	moveq	r4, #56	; 0x38
   2b47c:	e7a4      	b.n	2b3c8 <ip_interface_connect+0xa0>
   2b47e:	4638      	mov	r0, r7
   2b480:	f000 ffe4 	bl	2c44c <interface_socket_from_handle_get>
   2b484:	2800      	cmp	r0, #0
   2b486:	d0a4      	beq.n	2b3d2 <ip_interface_connect+0xaa>
   2b488:	6844      	ldr	r4, [r0, #4]
   2b48a:	2c00      	cmp	r4, #0
   2b48c:	d0a1      	beq.n	2b3d2 <ip_interface_connect+0xaa>
   2b48e:	f8c0 8004 	str.w	r8, [r0, #4]
   2b492:	e7db      	b.n	2b44c <ip_interface_connect+0x124>
   2b494:	240c      	movs	r4, #12
   2b496:	e797      	b.n	2b3c8 <ip_interface_connect+0xa0>
   2b498:	2409      	movs	r4, #9
   2b49a:	e795      	b.n	2b3c8 <ip_interface_connect+0xa0>

0002b49c <ip_interface_bind>:
   2b49c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2b4a0:	b083      	sub	sp, #12
   2b4a2:	b3b1      	cbz	r1, 2b512 <ip_interface_bind+0x76>
   2b4a4:	4616      	mov	r6, r2
   2b4a6:	b3a2      	cbz	r2, 2b512 <ip_interface_bind+0x76>
   2b4a8:	4607      	mov	r7, r0
   2b4aa:	4688      	mov	r8, r1
   2b4ac:	f000 ffce 	bl	2c44c <interface_socket_from_handle_get>
   2b4b0:	4605      	mov	r5, r0
   2b4b2:	2800      	cmp	r0, #0
   2b4b4:	d04a      	beq.n	2b54c <ip_interface_bind+0xb0>
   2b4b6:	6803      	ldr	r3, [r0, #0]
   2b4b8:	b29b      	uxth	r3, r3
   2b4ba:	2b02      	cmp	r3, #2
   2b4bc:	d146      	bne.n	2b54c <ip_interface_bind+0xb0>
   2b4be:	2100      	movs	r1, #0
   2b4c0:	a802      	add	r0, sp, #8
   2b4c2:	f840 1d04 	str.w	r1, [r0, #-4]!
   2b4c6:	f8d5 9018 	ldr.w	r9, [r5, #24]
   2b4ca:	f7fb fedb 	bl	27284 <rpc_ip_client_request_alloc>
   2b4ce:	bb50      	cbnz	r0, 2b526 <ip_interface_bind+0x8a>
   2b4d0:	f247 0305 	movw	r3, #28677	; 0x7005
   2b4d4:	2208      	movs	r2, #8
   2b4d6:	9c01      	ldr	r4, [sp, #4]
   2b4d8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   2b4dc:	60e3      	str	r3, [r4, #12]
   2b4de:	f8c4 9010 	str.w	r9, [r4, #16]
   2b4e2:	7260      	strb	r0, [r4, #9]
   2b4e4:	72a0      	strb	r0, [r4, #10]
   2b4e6:	72e0      	strb	r0, [r4, #11]
   2b4e8:	7222      	strb	r2, [r4, #8]
   2b4ea:	68a3      	ldr	r3, [r4, #8]
   2b4ec:	3304      	adds	r3, #4
   2b4ee:	60a3      	str	r3, [r4, #8]
   2b4f0:	68eb      	ldr	r3, [r5, #12]
   2b4f2:	f8d8 2004 	ldr.w	r2, [r8, #4]
   2b4f6:	4293      	cmp	r3, r2
   2b4f8:	d11a      	bne.n	2b530 <ip_interface_bind+0x94>
   2b4fa:	f898 2000 	ldrb.w	r2, [r8]
   2b4fe:	4296      	cmp	r6, r2
   2b500:	d107      	bne.n	2b512 <ip_interface_bind+0x76>
   2b502:	2b02      	cmp	r3, #2
   2b504:	f104 0018 	add.w	r0, r4, #24
   2b508:	d014      	beq.n	2b534 <ip_interface_bind+0x98>
   2b50a:	2b0a      	cmp	r3, #10
   2b50c:	d101      	bne.n	2b512 <ip_interface_bind+0x76>
   2b50e:	2e24      	cmp	r6, #36	; 0x24
   2b510:	d01e      	beq.n	2b550 <ip_interface_bind+0xb4>
   2b512:	2416      	movs	r4, #22
   2b514:	4620      	mov	r0, r4
   2b516:	f7f7 faf1 	bl	22afc <bsd_os_errno_set>
   2b51a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2b51e:	4620      	mov	r0, r4
   2b520:	b003      	add	sp, #12
   2b522:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2b526:	9c01      	ldr	r4, [sp, #4]
   2b528:	2c00      	cmp	r4, #0
   2b52a:	d1de      	bne.n	2b4ea <ip_interface_bind+0x4e>
   2b52c:	240c      	movs	r4, #12
   2b52e:	e7f1      	b.n	2b514 <ip_interface_bind+0x78>
   2b530:	242f      	movs	r4, #47	; 0x2f
   2b532:	e7ef      	b.n	2b514 <ip_interface_bind+0x78>
   2b534:	2e10      	cmp	r6, #16
   2b536:	d1ec      	bne.n	2b512 <ip_interface_bind+0x76>
   2b538:	2204      	movs	r2, #4
   2b53a:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   2b53e:	f108 010c 	add.w	r1, r8, #12
   2b542:	82e2      	strh	r2, [r4, #22]
   2b544:	82a3      	strh	r3, [r4, #20]
   2b546:	f00a fadf 	bl	35b08 <memcpy>
   2b54a:	e00a      	b.n	2b562 <ip_interface_bind+0xc6>
   2b54c:	2409      	movs	r4, #9
   2b54e:	e7e1      	b.n	2b514 <ip_interface_bind+0x78>
   2b550:	2210      	movs	r2, #16
   2b552:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   2b556:	eb08 0102 	add.w	r1, r8, r2
   2b55a:	82e2      	strh	r2, [r4, #22]
   2b55c:	82a3      	strh	r3, [r4, #20]
   2b55e:	f00a fad3 	bl	35b08 <memcpy>
   2b562:	68a3      	ldr	r3, [r4, #8]
   2b564:	8ae2      	ldrh	r2, [r4, #22]
   2b566:	f247 0105 	movw	r1, #28677	; 0x7005
   2b56a:	4413      	add	r3, r2
   2b56c:	60a3      	str	r3, [r4, #8]
   2b56e:	682b      	ldr	r3, [r5, #0]
   2b570:	4620      	mov	r0, r4
   2b572:	0c1b      	lsrs	r3, r3, #16
   2b574:	041b      	lsls	r3, r3, #16
   2b576:	f043 0303 	orr.w	r3, r3, #3
   2b57a:	602b      	str	r3, [r5, #0]
   2b57c:	682e      	ldr	r6, [r5, #0]
   2b57e:	f7fb fe95 	bl	272ac <rpc_ip_client_request_send>
   2b582:	4680      	mov	r8, r0
   2b584:	b980      	cbnz	r0, 2b5a8 <ip_interface_bind+0x10c>
   2b586:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b58a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2b58e:	2104      	movs	r1, #4
   2b590:	4638      	mov	r0, r7
   2b592:	f000 fee7 	bl	2c364 <interface_socket_wait>
   2b596:	4604      	mov	r4, r0
   2b598:	b1a0      	cbz	r0, 2b5c4 <ip_interface_bind+0x128>
   2b59a:	682b      	ldr	r3, [r5, #0]
   2b59c:	0c1b      	lsrs	r3, r3, #16
   2b59e:	041b      	lsls	r3, r3, #16
   2b5a0:	f043 0302 	orr.w	r3, r3, #2
   2b5a4:	602b      	str	r3, [r5, #0]
   2b5a6:	e7b5      	b.n	2b514 <ip_interface_bind+0x78>
   2b5a8:	6820      	ldr	r0, [r4, #0]
   2b5aa:	b108      	cbz	r0, 2b5b0 <ip_interface_bind+0x114>
   2b5ac:	f7fb fe9c 	bl	272e8 <rpc_ip_client_data_free>
   2b5b0:	0c36      	lsrs	r6, r6, #16
   2b5b2:	0436      	lsls	r6, r6, #16
   2b5b4:	4620      	mov	r0, r4
   2b5b6:	f046 0602 	orr.w	r6, r6, #2
   2b5ba:	f7fb fe8d 	bl	272d8 <rpc_ip_client_message_free>
   2b5be:	2423      	movs	r4, #35	; 0x23
   2b5c0:	602e      	str	r6, [r5, #0]
   2b5c2:	e7a7      	b.n	2b514 <ip_interface_bind+0x78>
   2b5c4:	4638      	mov	r0, r7
   2b5c6:	f000 ff41 	bl	2c44c <interface_socket_from_handle_get>
   2b5ca:	2800      	cmp	r0, #0
   2b5cc:	d0a7      	beq.n	2b51e <ip_interface_bind+0x82>
   2b5ce:	6844      	ldr	r4, [r0, #4]
   2b5d0:	2c00      	cmp	r4, #0
   2b5d2:	d0a4      	beq.n	2b51e <ip_interface_bind+0x82>
   2b5d4:	f8c0 8004 	str.w	r8, [r0, #4]
   2b5d8:	e7df      	b.n	2b59a <ip_interface_bind+0xfe>
   2b5da:	bf00      	nop

0002b5dc <ip_interface_listen>:
   2b5dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b5e0:	b082      	sub	sp, #8
   2b5e2:	4606      	mov	r6, r0
   2b5e4:	f000 ff32 	bl	2c44c <interface_socket_from_handle_get>
   2b5e8:	2800      	cmp	r0, #0
   2b5ea:	d067      	beq.n	2b6bc <ip_interface_listen+0xe0>
   2b5ec:	6803      	ldr	r3, [r0, #0]
   2b5ee:	4605      	mov	r5, r0
   2b5f0:	b29b      	uxth	r3, r3
   2b5f2:	2b04      	cmp	r3, #4
   2b5f4:	d162      	bne.n	2b6bc <ip_interface_listen+0xe0>
   2b5f6:	2100      	movs	r1, #0
   2b5f8:	4a32      	ldr	r2, [pc, #200]	; (2b6c4 <ip_interface_listen+0xe8>)
   2b5fa:	4630      	mov	r0, r6
   2b5fc:	f000 fe7a 	bl	2c2f4 <interface_socket_packet_handler_update>
   2b600:	4601      	mov	r1, r0
   2b602:	2800      	cmp	r0, #0
   2b604:	d15c      	bne.n	2b6c0 <ip_interface_listen+0xe4>
   2b606:	a802      	add	r0, sp, #8
   2b608:	f840 1d04 	str.w	r1, [r0, #-4]!
   2b60c:	69af      	ldr	r7, [r5, #24]
   2b60e:	f7fb fe39 	bl	27284 <rpc_ip_client_request_alloc>
   2b612:	bba8      	cbnz	r0, 2b680 <ip_interface_listen+0xa4>
   2b614:	f247 0308 	movw	r3, #28680	; 0x7008
   2b618:	2208      	movs	r2, #8
   2b61a:	9c01      	ldr	r4, [sp, #4]
   2b61c:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   2b620:	60e3      	str	r3, [r4, #12]
   2b622:	6127      	str	r7, [r4, #16]
   2b624:	7260      	strb	r0, [r4, #9]
   2b626:	72a0      	strb	r0, [r4, #10]
   2b628:	72e0      	strb	r0, [r4, #11]
   2b62a:	7222      	strb	r2, [r4, #8]
   2b62c:	68a3      	ldr	r3, [r4, #8]
   2b62e:	f247 0108 	movw	r1, #28680	; 0x7008
   2b632:	3304      	adds	r3, #4
   2b634:	60a3      	str	r3, [r4, #8]
   2b636:	682b      	ldr	r3, [r5, #0]
   2b638:	4620      	mov	r0, r4
   2b63a:	0c1b      	lsrs	r3, r3, #16
   2b63c:	041b      	lsls	r3, r3, #16
   2b63e:	f043 0306 	orr.w	r3, r3, #6
   2b642:	602b      	str	r3, [r5, #0]
   2b644:	682f      	ldr	r7, [r5, #0]
   2b646:	f7fb fe31 	bl	272ac <rpc_ip_client_request_send>
   2b64a:	4680      	mov	r8, r0
   2b64c:	b9e8      	cbnz	r0, 2b68a <ip_interface_listen+0xae>
   2b64e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b652:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2b656:	2107      	movs	r1, #7
   2b658:	4630      	mov	r0, r6
   2b65a:	f000 fe83 	bl	2c364 <interface_socket_wait>
   2b65e:	4604      	mov	r4, r0
   2b660:	b308      	cbz	r0, 2b6a6 <ip_interface_listen+0xca>
   2b662:	682b      	ldr	r3, [r5, #0]
   2b664:	0c1b      	lsrs	r3, r3, #16
   2b666:	041b      	lsls	r3, r3, #16
   2b668:	f043 0304 	orr.w	r3, r3, #4
   2b66c:	602b      	str	r3, [r5, #0]
   2b66e:	4620      	mov	r0, r4
   2b670:	f7f7 fa44 	bl	22afc <bsd_os_errno_set>
   2b674:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2b678:	4620      	mov	r0, r4
   2b67a:	b002      	add	sp, #8
   2b67c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2b680:	9c01      	ldr	r4, [sp, #4]
   2b682:	2c00      	cmp	r4, #0
   2b684:	d1d2      	bne.n	2b62c <ip_interface_listen+0x50>
   2b686:	240c      	movs	r4, #12
   2b688:	e7f1      	b.n	2b66e <ip_interface_listen+0x92>
   2b68a:	6820      	ldr	r0, [r4, #0]
   2b68c:	b108      	cbz	r0, 2b692 <ip_interface_listen+0xb6>
   2b68e:	f7fb fe2b 	bl	272e8 <rpc_ip_client_data_free>
   2b692:	0c3f      	lsrs	r7, r7, #16
   2b694:	043f      	lsls	r7, r7, #16
   2b696:	4620      	mov	r0, r4
   2b698:	f047 0704 	orr.w	r7, r7, #4
   2b69c:	f7fb fe1c 	bl	272d8 <rpc_ip_client_message_free>
   2b6a0:	2423      	movs	r4, #35	; 0x23
   2b6a2:	602f      	str	r7, [r5, #0]
   2b6a4:	e7e3      	b.n	2b66e <ip_interface_listen+0x92>
   2b6a6:	4630      	mov	r0, r6
   2b6a8:	f000 fed0 	bl	2c44c <interface_socket_from_handle_get>
   2b6ac:	2800      	cmp	r0, #0
   2b6ae:	d0e3      	beq.n	2b678 <ip_interface_listen+0x9c>
   2b6b0:	6844      	ldr	r4, [r0, #4]
   2b6b2:	2c00      	cmp	r4, #0
   2b6b4:	d0e0      	beq.n	2b678 <ip_interface_listen+0x9c>
   2b6b6:	f8c0 8004 	str.w	r8, [r0, #4]
   2b6ba:	e7d2      	b.n	2b662 <ip_interface_listen+0x86>
   2b6bc:	2409      	movs	r4, #9
   2b6be:	e7d6      	b.n	2b66e <ip_interface_listen+0x92>
   2b6c0:	2423      	movs	r4, #35	; 0x23
   2b6c2:	e7d4      	b.n	2b66e <ip_interface_listen+0x92>
   2b6c4:	0002aaa1 	.word	0x0002aaa1

0002b6c8 <ip_interface_accept>:
   2b6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b6cc:	2500      	movs	r5, #0
   2b6ce:	b085      	sub	sp, #20
   2b6d0:	460f      	mov	r7, r1
   2b6d2:	4690      	mov	r8, r2
   2b6d4:	9502      	str	r5, [sp, #8]
   2b6d6:	4606      	mov	r6, r0
   2b6d8:	f000 feb8 	bl	2c44c <interface_socket_from_handle_get>
   2b6dc:	4604      	mov	r4, r0
   2b6de:	2800      	cmp	r0, #0
   2b6e0:	f000 811c 	beq.w	2b91c <ip_interface_accept+0x254>
   2b6e4:	6803      	ldr	r3, [r0, #0]
   2b6e6:	b29b      	uxth	r3, r3
   2b6e8:	2b07      	cmp	r3, #7
   2b6ea:	d10a      	bne.n	2b702 <ip_interface_accept+0x3a>
   2b6ec:	6803      	ldr	r3, [r0, #0]
   2b6ee:	6805      	ldr	r5, [r0, #0]
   2b6f0:	00db      	lsls	r3, r3, #3
   2b6f2:	d416      	bmi.n	2b722 <ip_interface_accept+0x5a>
   2b6f4:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   2b6f8:	d019      	beq.n	2b72e <ip_interface_accept+0x66>
   2b6fa:	6805      	ldr	r5, [r0, #0]
   2b6fc:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   2b700:	d124      	bne.n	2b74c <ip_interface_accept+0x84>
   2b702:	f04f 0909 	mov.w	r9, #9
   2b706:	9b02      	ldr	r3, [sp, #8]
   2b708:	b113      	cbz	r3, 2b710 <ip_interface_accept+0x48>
   2b70a:	4628      	mov	r0, r5
   2b70c:	f000 fddc 	bl	2c2c8 <interface_socket_free>
   2b710:	4648      	mov	r0, r9
   2b712:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   2b716:	f7f7 f9f1 	bl	22afc <bsd_os_errno_set>
   2b71a:	4648      	mov	r0, r9
   2b71c:	b005      	add	sp, #20
   2b71e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b722:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   2b726:	d16d      	bne.n	2b804 <ip_interface_accept+0x13c>
   2b728:	f04f 0923 	mov.w	r9, #35	; 0x23
   2b72c:	e7eb      	b.n	2b706 <ip_interface_accept+0x3e>
   2b72e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2b732:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b736:	4611      	mov	r1, r2
   2b738:	4630      	mov	r0, r6
   2b73a:	f000 fe13 	bl	2c364 <interface_socket_wait>
   2b73e:	4681      	mov	r9, r0
   2b740:	2800      	cmp	r0, #0
   2b742:	d07e      	beq.n	2b842 <ip_interface_accept+0x17a>
   2b744:	6825      	ldr	r5, [r4, #0]
   2b746:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   2b74a:	d0dc      	beq.n	2b706 <ip_interface_accept+0x3e>
   2b74c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2b750:	2300      	movs	r3, #0
   2b752:	e9cd 0300 	strd	r0, r3, [sp]
   2b756:	4a75      	ldr	r2, [pc, #468]	; (2b92c <ip_interface_accept+0x264>)
   2b758:	6921      	ldr	r1, [r4, #16]
   2b75a:	a802      	add	r0, sp, #8
   2b75c:	f000 fd50 	bl	2c200 <interface_socket_allocate>
   2b760:	9b02      	ldr	r3, [sp, #8]
   2b762:	4605      	mov	r5, r0
   2b764:	2b00      	cmp	r3, #0
   2b766:	f000 80dd 	beq.w	2b924 <ip_interface_accept+0x25c>
   2b76a:	2100      	movs	r1, #0
   2b76c:	6962      	ldr	r2, [r4, #20]
   2b76e:	a804      	add	r0, sp, #16
   2b770:	615a      	str	r2, [r3, #20]
   2b772:	68e2      	ldr	r2, [r4, #12]
   2b774:	f840 1d04 	str.w	r1, [r0, #-4]!
   2b778:	60da      	str	r2, [r3, #12]
   2b77a:	6922      	ldr	r2, [r4, #16]
   2b77c:	611a      	str	r2, [r3, #16]
   2b77e:	f8d4 9018 	ldr.w	r9, [r4, #24]
   2b782:	f7fb fd7f 	bl	27284 <rpc_ip_client_request_alloc>
   2b786:	2800      	cmp	r0, #0
   2b788:	d143      	bne.n	2b812 <ip_interface_accept+0x14a>
   2b78a:	f247 030c 	movw	r3, #28684	; 0x700c
   2b78e:	2108      	movs	r1, #8
   2b790:	f8dd b00c 	ldr.w	fp, [sp, #12]
   2b794:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   2b798:	f8cb 300c 	str.w	r3, [fp, #12]
   2b79c:	f8cb 9010 	str.w	r9, [fp, #16]
   2b7a0:	f88b 0009 	strb.w	r0, [fp, #9]
   2b7a4:	f88b 000a 	strb.w	r0, [fp, #10]
   2b7a8:	f88b 000b 	strb.w	r0, [fp, #11]
   2b7ac:	f88b 1008 	strb.w	r1, [fp, #8]
   2b7b0:	6823      	ldr	r3, [r4, #0]
   2b7b2:	f247 010c 	movw	r1, #28684	; 0x700c
   2b7b6:	0c1b      	lsrs	r3, r3, #16
   2b7b8:	041b      	lsls	r3, r3, #16
   2b7ba:	f043 0308 	orr.w	r3, r3, #8
   2b7be:	6023      	str	r3, [r4, #0]
   2b7c0:	4658      	mov	r0, fp
   2b7c2:	f8d4 9000 	ldr.w	r9, [r4]
   2b7c6:	f7fb fd71 	bl	272ac <rpc_ip_client_request_send>
   2b7ca:	4682      	mov	sl, r0
   2b7cc:	bb48      	cbnz	r0, 2b822 <ip_interface_accept+0x15a>
   2b7ce:	6822      	ldr	r2, [r4, #0]
   2b7d0:	9900      	ldr	r1, [sp, #0]
   2b7d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b7d6:	400a      	ands	r2, r1
   2b7d8:	6022      	str	r2, [r4, #0]
   2b7da:	2109      	movs	r1, #9
   2b7dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2b7e0:	4630      	mov	r0, r6
   2b7e2:	f000 fdbf 	bl	2c364 <interface_socket_wait>
   2b7e6:	4681      	mov	r9, r0
   2b7e8:	2800      	cmp	r0, #0
   2b7ea:	f000 8085 	beq.w	2b8f8 <ip_interface_accept+0x230>
   2b7ee:	6823      	ldr	r3, [r4, #0]
   2b7f0:	9a01      	ldr	r2, [sp, #4]
   2b7f2:	431a      	orrs	r2, r3
   2b7f4:	6022      	str	r2, [r4, #0]
   2b7f6:	6823      	ldr	r3, [r4, #0]
   2b7f8:	0c1b      	lsrs	r3, r3, #16
   2b7fa:	041b      	lsls	r3, r3, #16
   2b7fc:	f043 0307 	orr.w	r3, r3, #7
   2b800:	6023      	str	r3, [r4, #0]
   2b802:	e780      	b.n	2b706 <ip_interface_accept+0x3e>
   2b804:	f06f 5280 	mvn.w	r2, #268435456	; 0x10000000
   2b808:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2b80c:	e9cd 2300 	strd	r2, r3, [sp]
   2b810:	e7a1      	b.n	2b756 <ip_interface_accept+0x8e>
   2b812:	f8dd b00c 	ldr.w	fp, [sp, #12]
   2b816:	f04f 090c 	mov.w	r9, #12
   2b81a:	f1bb 0f00 	cmp.w	fp, #0
   2b81e:	d1c7      	bne.n	2b7b0 <ip_interface_accept+0xe8>
   2b820:	e771      	b.n	2b706 <ip_interface_accept+0x3e>
   2b822:	f8db 0000 	ldr.w	r0, [fp]
   2b826:	b108      	cbz	r0, 2b82c <ip_interface_accept+0x164>
   2b828:	f7fb fd5e 	bl	272e8 <rpc_ip_client_data_free>
   2b82c:	ea4f 4919 	mov.w	r9, r9, lsr #16
   2b830:	4658      	mov	r0, fp
   2b832:	ea4f 4909 	mov.w	r9, r9, lsl #16
   2b836:	f7fb fd4f 	bl	272d8 <rpc_ip_client_message_free>
   2b83a:	f049 0307 	orr.w	r3, r9, #7
   2b83e:	6023      	str	r3, [r4, #0]
   2b840:	e772      	b.n	2b728 <ip_interface_accept+0x60>
   2b842:	4630      	mov	r0, r6
   2b844:	f000 fe02 	bl	2c44c <interface_socket_from_handle_get>
   2b848:	b130      	cbz	r0, 2b858 <ip_interface_accept+0x190>
   2b84a:	f8d0 9004 	ldr.w	r9, [r0, #4]
   2b84e:	f1b9 0f00 	cmp.w	r9, #0
   2b852:	d001      	beq.n	2b858 <ip_interface_accept+0x190>
   2b854:	6045      	str	r5, [r0, #4]
   2b856:	e775      	b.n	2b744 <ip_interface_accept+0x7c>
   2b858:	6823      	ldr	r3, [r4, #0]
   2b85a:	03d9      	lsls	r1, r3, #15
   2b85c:	f53f af76 	bmi.w	2b74c <ip_interface_accept+0x84>
   2b860:	4d33      	ldr	r5, [pc, #204]	; (2b930 <ip_interface_accept+0x268>)
   2b862:	9902      	ldr	r1, [sp, #8]
   2b864:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   2b868:	699b      	ldr	r3, [r3, #24]
   2b86a:	618b      	str	r3, [r1, #24]
   2b86c:	b147      	cbz	r7, 2b880 <ip_interface_accept+0x1b8>
   2b86e:	68cb      	ldr	r3, [r1, #12]
   2b870:	2b0a      	cmp	r3, #10
   2b872:	d024      	beq.n	2b8be <ip_interface_accept+0x1f6>
   2b874:	2b02      	cmp	r3, #2
   2b876:	d103      	bne.n	2b880 <ip_interface_accept+0x1b8>
   2b878:	f8d8 2000 	ldr.w	r2, [r8]
   2b87c:	2a10      	cmp	r2, #16
   2b87e:	d032      	beq.n	2b8e6 <ip_interface_accept+0x21e>
   2b880:	680a      	ldr	r2, [r1, #0]
   2b882:	482c      	ldr	r0, [pc, #176]	; (2b934 <ip_interface_accept+0x26c>)
   2b884:	4002      	ands	r2, r0
   2b886:	f042 0205 	orr.w	r2, r2, #5
   2b88a:	600a      	str	r2, [r1, #0]
   2b88c:	9a02      	ldr	r2, [sp, #8]
   2b88e:	6811      	ldr	r1, [r2, #0]
   2b890:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
   2b894:	6011      	str	r1, [r2, #0]
   2b896:	6811      	ldr	r1, [r2, #0]
   2b898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   2b89c:	6011      	str	r1, [r2, #0]
   2b89e:	6823      	ldr	r3, [r4, #0]
   2b8a0:	4003      	ands	r3, r0
   2b8a2:	f043 0307 	orr.w	r3, r3, #7
   2b8a6:	6023      	str	r3, [r4, #0]
   2b8a8:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
   2b8ac:	f7fb fd14 	bl	272d8 <rpc_ip_client_message_free>
   2b8b0:	2300      	movs	r3, #0
   2b8b2:	4648      	mov	r0, r9
   2b8b4:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
   2b8b8:	b005      	add	sp, #20
   2b8ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b8be:	f8d8 2000 	ldr.w	r2, [r8]
   2b8c2:	2a24      	cmp	r2, #36	; 0x24
   2b8c4:	d1dc      	bne.n	2b880 <ip_interface_accept+0x1b8>
   2b8c6:	703a      	strb	r2, [r7, #0]
   2b8c8:	2210      	movs	r2, #16
   2b8ca:	607b      	str	r3, [r7, #4]
   2b8cc:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   2b8d0:	f107 0010 	add.w	r0, r7, #16
   2b8d4:	8b9b      	ldrh	r3, [r3, #28]
   2b8d6:	813b      	strh	r3, [r7, #8]
   2b8d8:	f855 1026 	ldr.w	r1, [r5, r6, lsl #2]
   2b8dc:	3120      	adds	r1, #32
   2b8de:	f00a f913 	bl	35b08 <memcpy>
   2b8e2:	9902      	ldr	r1, [sp, #8]
   2b8e4:	e7cc      	b.n	2b880 <ip_interface_accept+0x1b8>
   2b8e6:	703a      	strb	r2, [r7, #0]
   2b8e8:	607b      	str	r3, [r7, #4]
   2b8ea:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   2b8ee:	f107 000c 	add.w	r0, r7, #12
   2b8f2:	8b9b      	ldrh	r3, [r3, #28]
   2b8f4:	2204      	movs	r2, #4
   2b8f6:	e7ee      	b.n	2b8d6 <ip_interface_accept+0x20e>
   2b8f8:	4630      	mov	r0, r6
   2b8fa:	f000 fda7 	bl	2c44c <interface_socket_from_handle_get>
   2b8fe:	b138      	cbz	r0, 2b910 <ip_interface_accept+0x248>
   2b900:	f8d0 9004 	ldr.w	r9, [r0, #4]
   2b904:	f1b9 0f00 	cmp.w	r9, #0
   2b908:	d002      	beq.n	2b910 <ip_interface_accept+0x248>
   2b90a:	f8c0 a004 	str.w	sl, [r0, #4]
   2b90e:	e76e      	b.n	2b7ee <ip_interface_accept+0x126>
   2b910:	6823      	ldr	r3, [r4, #0]
   2b912:	9a01      	ldr	r2, [sp, #4]
   2b914:	46a9      	mov	r9, r5
   2b916:	4313      	orrs	r3, r2
   2b918:	6023      	str	r3, [r4, #0]
   2b91a:	e7a1      	b.n	2b860 <ip_interface_accept+0x198>
   2b91c:	4605      	mov	r5, r0
   2b91e:	f04f 0909 	mov.w	r9, #9
   2b922:	e6f0      	b.n	2b706 <ip_interface_accept+0x3e>
   2b924:	f04f 090c 	mov.w	r9, #12
   2b928:	e6f2      	b.n	2b710 <ip_interface_accept+0x48>
   2b92a:	bf00      	nop
   2b92c:	0002aaa1 	.word	0x0002aaa1
   2b930:	20022b40 	.word	0x20022b40
   2b934:	ffff0000 	.word	0xffff0000

0002b938 <ip_interface_setopt>:
   2b938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b93c:	2901      	cmp	r1, #1
   2b93e:	b084      	sub	sp, #16
   2b940:	f040 809c 	bne.w	2ba7c <ip_interface_setopt+0x144>
   2b944:	460e      	mov	r6, r1
   2b946:	4690      	mov	r8, r2
   2b948:	461d      	mov	r5, r3
   2b94a:	4607      	mov	r7, r0
   2b94c:	f000 fd7e 	bl	2c44c <interface_socket_from_handle_get>
   2b950:	4604      	mov	r4, r0
   2b952:	2800      	cmp	r0, #0
   2b954:	f000 80a5 	beq.w	2baa2 <ip_interface_setopt+0x16a>
   2b958:	f1b8 0f19 	cmp.w	r8, #25
   2b95c:	d16e      	bne.n	2ba3c <ip_interface_setopt+0x104>
   2b95e:	2d00      	cmp	r5, #0
   2b960:	f000 8092 	beq.w	2ba88 <ip_interface_setopt+0x150>
   2b964:	4628      	mov	r0, r5
   2b966:	f7f1 fbc3 	bl	1d0f0 <strlen>
   2b96a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2b96c:	4298      	cmp	r0, r3
   2b96e:	f040 808b 	bne.w	2ba88 <ip_interface_setopt+0x150>
   2b972:	6823      	ldr	r3, [r4, #0]
   2b974:	b29b      	uxth	r3, r3
   2b976:	2b02      	cmp	r3, #2
   2b978:	d173      	bne.n	2ba62 <ip_interface_setopt+0x12a>
   2b97a:	4629      	mov	r1, r5
   2b97c:	68e0      	ldr	r0, [r4, #12]
   2b97e:	f7fe fb2b 	bl	29fd8 <pdn_interface_pdn_id_get>
   2b982:	9002      	str	r0, [sp, #8]
   2b984:	3001      	adds	r0, #1
   2b986:	bf08      	it	eq
   2b988:	2516      	moveq	r5, #22
   2b98a:	d04e      	beq.n	2ba2a <ip_interface_setopt+0xf2>
   2b98c:	6823      	ldr	r3, [r4, #0]
   2b98e:	025b      	lsls	r3, r3, #9
   2b990:	d44a      	bmi.n	2ba28 <ip_interface_setopt+0xf0>
   2b992:	6823      	ldr	r3, [r4, #0]
   2b994:	f413 0300 	ands.w	r3, r3, #8388608	; 0x800000
   2b998:	d146      	bne.n	2ba28 <ip_interface_setopt+0xf0>
   2b99a:	6826      	ldr	r6, [r4, #0]
   2b99c:	6822      	ldr	r2, [r4, #0]
   2b99e:	a804      	add	r0, sp, #16
   2b9a0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   2b9a4:	6022      	str	r2, [r4, #0]
   2b9a6:	2104      	movs	r1, #4
   2b9a8:	f840 3d04 	str.w	r3, [r0, #-4]!
   2b9ac:	f8d4 8018 	ldr.w	r8, [r4, #24]
   2b9b0:	f7fb fc68 	bl	27284 <rpc_ip_client_request_alloc>
   2b9b4:	2800      	cmp	r0, #0
   2b9b6:	d14e      	bne.n	2ba56 <ip_interface_setopt+0x11e>
   2b9b8:	f247 0203 	movw	r2, #28675	; 0x7003
   2b9bc:	2300      	movs	r3, #0
   2b9be:	2108      	movs	r1, #8
   2b9c0:	9d03      	ldr	r5, [sp, #12]
   2b9c2:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
   2b9c6:	60ea      	str	r2, [r5, #12]
   2b9c8:	f8c5 8010 	str.w	r8, [r5, #16]
   2b9cc:	7229      	strb	r1, [r5, #8]
   2b9ce:	726b      	strb	r3, [r5, #9]
   2b9d0:	72ab      	strb	r3, [r5, #10]
   2b9d2:	72eb      	strb	r3, [r5, #11]
   2b9d4:	f04f 0c08 	mov.w	ip, #8
   2b9d8:	2300      	movs	r3, #0
   2b9da:	2010      	movs	r0, #16
   2b9dc:	2130      	movs	r1, #48	; 0x30
   2b9de:	68aa      	ldr	r2, [r5, #8]
   2b9e0:	756b      	strb	r3, [r5, #21]
   2b9e2:	4462      	add	r2, ip
   2b9e4:	60aa      	str	r2, [r5, #8]
   2b9e6:	75ab      	strb	r3, [r5, #22]
   2b9e8:	75eb      	strb	r3, [r5, #23]
   2b9ea:	76ab      	strb	r3, [r5, #26]
   2b9ec:	76eb      	strb	r3, [r5, #27]
   2b9ee:	f885 c014 	strb.w	ip, [r5, #20]
   2b9f2:	7628      	strb	r0, [r5, #24]
   2b9f4:	7669      	strb	r1, [r5, #25]
   2b9f6:	2204      	movs	r2, #4
   2b9f8:	eb0d 010c 	add.w	r1, sp, ip
   2b9fc:	6828      	ldr	r0, [r5, #0]
   2b9fe:	f00a f883 	bl	35b08 <memcpy>
   2ba02:	f247 0103 	movw	r1, #28675	; 0x7003
   2ba06:	4628      	mov	r0, r5
   2ba08:	f7fb fc50 	bl	272ac <rpc_ip_client_request_send>
   2ba0c:	4680      	mov	r8, r0
   2ba0e:	bb50      	cbnz	r0, 2ba66 <ip_interface_setopt+0x12e>
   2ba10:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   2ba14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2ba18:	4611      	mov	r1, r2
   2ba1a:	4638      	mov	r0, r7
   2ba1c:	f000 fca2 	bl	2c364 <interface_socket_wait>
   2ba20:	4605      	mov	r5, r0
   2ba22:	b398      	cbz	r0, 2ba8c <ip_interface_setopt+0x154>
   2ba24:	6026      	str	r6, [r4, #0]
   2ba26:	e000      	b.n	2ba2a <ip_interface_setopt+0xf2>
   2ba28:	2523      	movs	r5, #35	; 0x23
   2ba2a:	4628      	mov	r0, r5
   2ba2c:	f7f7 f866 	bl	22afc <bsd_os_errno_set>
   2ba30:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2ba34:	4628      	mov	r0, r5
   2ba36:	b004      	add	sp, #16
   2ba38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2ba3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2ba3e:	4642      	mov	r2, r8
   2ba40:	9300      	str	r3, [sp, #0]
   2ba42:	4631      	mov	r1, r6
   2ba44:	462b      	mov	r3, r5
   2ba46:	4638      	mov	r0, r7
   2ba48:	f000 fd28 	bl	2c49c <interface_socket_setopt>
   2ba4c:	4605      	mov	r5, r0
   2ba4e:	4628      	mov	r0, r5
   2ba50:	b004      	add	sp, #16
   2ba52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2ba56:	9d03      	ldr	r5, [sp, #12]
   2ba58:	2d00      	cmp	r5, #0
   2ba5a:	d1bb      	bne.n	2b9d4 <ip_interface_setopt+0x9c>
   2ba5c:	6026      	str	r6, [r4, #0]
   2ba5e:	250c      	movs	r5, #12
   2ba60:	e7e3      	b.n	2ba2a <ip_interface_setopt+0xf2>
   2ba62:	2509      	movs	r5, #9
   2ba64:	e7e1      	b.n	2ba2a <ip_interface_setopt+0xf2>
   2ba66:	6828      	ldr	r0, [r5, #0]
   2ba68:	b108      	cbz	r0, 2ba6e <ip_interface_setopt+0x136>
   2ba6a:	f7fb fc3d 	bl	272e8 <rpc_ip_client_data_free>
   2ba6e:	4628      	mov	r0, r5
   2ba70:	f7fb fc32 	bl	272d8 <rpc_ip_client_message_free>
   2ba74:	2523      	movs	r5, #35	; 0x23
   2ba76:	6026      	str	r6, [r4, #0]
   2ba78:	6026      	str	r6, [r4, #0]
   2ba7a:	e7d6      	b.n	2ba2a <ip_interface_setopt+0xf2>
   2ba7c:	202a      	movs	r0, #42	; 0x2a
   2ba7e:	f7f7 f83d 	bl	22afc <bsd_os_errno_set>
   2ba82:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2ba86:	e7d5      	b.n	2ba34 <ip_interface_setopt+0xfc>
   2ba88:	250e      	movs	r5, #14
   2ba8a:	e7ce      	b.n	2ba2a <ip_interface_setopt+0xf2>
   2ba8c:	4638      	mov	r0, r7
   2ba8e:	f000 fcdd 	bl	2c44c <interface_socket_from_handle_get>
   2ba92:	b120      	cbz	r0, 2ba9e <ip_interface_setopt+0x166>
   2ba94:	6845      	ldr	r5, [r0, #4]
   2ba96:	b115      	cbz	r5, 2ba9e <ip_interface_setopt+0x166>
   2ba98:	f8c0 8004 	str.w	r8, [r0, #4]
   2ba9c:	e7c2      	b.n	2ba24 <ip_interface_setopt+0xec>
   2ba9e:	6026      	str	r6, [r4, #0]
   2baa0:	e7c8      	b.n	2ba34 <ip_interface_setopt+0xfc>
   2baa2:	2009      	movs	r0, #9
   2baa4:	f7f7 f82a 	bl	22afc <bsd_os_errno_set>
   2baa8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2baac:	e7c2      	b.n	2ba34 <ip_interface_setopt+0xfc>
   2baae:	bf00      	nop

0002bab0 <ip_interface_getopt>:
   2bab0:	f000 bd36 	b.w	2c520 <interface_socket_getopt>

0002bab4 <ip_interface_getaddrinfo>:
   2bab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bab8:	f04f 0c00 	mov.w	ip, #0
   2babc:	2401      	movs	r4, #1
   2babe:	4e72      	ldr	r6, [pc, #456]	; (2bc88 <ip_interface_getaddrinfo+0x1d4>)
   2bac0:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 2bc94 <ip_interface_getaddrinfo+0x1e0>
   2bac4:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 2bc98 <ip_interface_getaddrinfo+0x1e4>
   2bac8:	b085      	sub	sp, #20
   2baca:	4607      	mov	r7, r0
   2bacc:	4615      	mov	r5, r2
   2bace:	9301      	str	r3, [sp, #4]
   2bad0:	f8a6 c000 	strh.w	ip, [r6]
   2bad4:	f8ca 4000 	str.w	r4, [sl]
   2bad8:	f8c9 4000 	str.w	r4, [r9]
   2badc:	b171      	cbz	r1, 2bafc <ip_interface_getaddrinfo+0x48>
   2bade:	4608      	mov	r0, r1
   2bae0:	220a      	movs	r2, #10
   2bae2:	4661      	mov	r1, ip
   2bae4:	f006 fbf6 	bl	322d4 <strtol>
   2bae8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   2baec:	1e42      	subs	r2, r0, #1
   2baee:	429a      	cmp	r2, r3
   2baf0:	f200 8083 	bhi.w	2bbfa <ip_interface_getaddrinfo+0x146>
   2baf4:	0203      	lsls	r3, r0, #8
   2baf6:	ea43 2020 	orr.w	r0, r3, r0, asr #8
   2bafa:	8030      	strh	r0, [r6, #0]
   2bafc:	f8df 819c 	ldr.w	r8, [pc, #412]	; 2bc9c <ip_interface_getaddrinfo+0x1e8>
   2bb00:	f8d8 3000 	ldr.w	r3, [r8]
   2bb04:	2b00      	cmp	r3, #0
   2bb06:	d174      	bne.n	2bbf2 <ip_interface_getaddrinfo+0x13e>
   2bb08:	4a60      	ldr	r2, [pc, #384]	; (2bc8c <ip_interface_getaddrinfo+0x1d8>)
   2bb0a:	6013      	str	r3, [r2, #0]
   2bb0c:	4a60      	ldr	r2, [pc, #384]	; (2bc90 <ip_interface_getaddrinfo+0x1dc>)
   2bb0e:	6013      	str	r3, [r2, #0]
   2bb10:	2f00      	cmp	r7, #0
   2bb12:	d062      	beq.n	2bbda <ip_interface_getaddrinfo+0x126>
   2bb14:	4638      	mov	r0, r7
   2bb16:	f7f1 faeb 	bl	1d0f0 <strlen>
   2bb1a:	4683      	mov	fp, r0
   2bb1c:	b125      	cbz	r5, 2bb28 <ip_interface_getaddrinfo+0x74>
   2bb1e:	69ea      	ldr	r2, [r5, #28]
   2bb20:	b112      	cbz	r2, 2bb28 <ip_interface_getaddrinfo+0x74>
   2bb22:	6851      	ldr	r1, [r2, #4]
   2bb24:	2966      	cmp	r1, #102	; 0x66
   2bb26:	d06c      	beq.n	2bc02 <ip_interface_getaddrinfo+0x14e>
   2bb28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2bb2c:	2100      	movs	r1, #0
   2bb2e:	ae04      	add	r6, sp, #16
   2bb30:	f846 1d04 	str.w	r1, [r6, #-4]!
   2bb34:	4630      	mov	r0, r6
   2bb36:	4659      	mov	r1, fp
   2bb38:	9200      	str	r2, [sp, #0]
   2bb3a:	f7fb fba3 	bl	27284 <rpc_ip_client_request_alloc>
   2bb3e:	9a00      	ldr	r2, [sp, #0]
   2bb40:	2800      	cmp	r0, #0
   2bb42:	d14c      	bne.n	2bbde <ip_interface_getaddrinfo+0x12a>
   2bb44:	f247 010d 	movw	r1, #28685	; 0x700d
   2bb48:	f04f 0c08 	mov.w	ip, #8
   2bb4c:	9c03      	ldr	r4, [sp, #12]
   2bb4e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   2bb52:	60e1      	str	r1, [r4, #12]
   2bb54:	6122      	str	r2, [r4, #16]
   2bb56:	7260      	strb	r0, [r4, #9]
   2bb58:	72a0      	strb	r0, [r4, #10]
   2bb5a:	72e0      	strb	r0, [r4, #11]
   2bb5c:	f884 c008 	strb.w	ip, [r4, #8]
   2bb60:	2d00      	cmp	r5, #0
   2bb62:	d076      	beq.n	2bc52 <ip_interface_getaddrinfo+0x19e>
   2bb64:	686a      	ldr	r2, [r5, #4]
   2bb66:	f022 0108 	bic.w	r1, r2, #8
   2bb6a:	2902      	cmp	r1, #2
   2bb6c:	d05c      	beq.n	2bc28 <ip_interface_getaddrinfo+0x174>
   2bb6e:	2a05      	cmp	r2, #5
   2bb70:	d178      	bne.n	2bc64 <ip_interface_getaddrinfo+0x1b0>
   2bb72:	68a9      	ldr	r1, [r5, #8]
   2bb74:	2902      	cmp	r1, #2
   2bb76:	f8c9 1000 	str.w	r1, [r9]
   2bb7a:	d061      	beq.n	2bc40 <ip_interface_getaddrinfo+0x18c>
   2bb7c:	61a2      	str	r2, [r4, #24]
   2bb7e:	68ea      	ldr	r2, [r5, #12]
   2bb80:	6222      	str	r2, [r4, #32]
   2bb82:	68aa      	ldr	r2, [r5, #8]
   2bb84:	61e2      	str	r2, [r4, #28]
   2bb86:	682a      	ldr	r2, [r5, #0]
   2bb88:	6162      	str	r2, [r4, #20]
   2bb8a:	68a2      	ldr	r2, [r4, #8]
   2bb8c:	3210      	adds	r2, #16
   2bb8e:	60a2      	str	r2, [r4, #8]
   2bb90:	b12f      	cbz	r7, 2bb9e <ip_interface_getaddrinfo+0xea>
   2bb92:	6820      	ldr	r0, [r4, #0]
   2bb94:	b118      	cbz	r0, 2bb9e <ip_interface_getaddrinfo+0xea>
   2bb96:	465a      	mov	r2, fp
   2bb98:	4639      	mov	r1, r7
   2bb9a:	f009 ffb5 	bl	35b08 <memcpy>
   2bb9e:	2301      	movs	r3, #1
   2bba0:	f247 010d 	movw	r1, #28685	; 0x700d
   2bba4:	4620      	mov	r0, r4
   2bba6:	f8c8 3000 	str.w	r3, [r8]
   2bbaa:	f7fb fb7f 	bl	272ac <rpc_ip_client_request_send>
   2bbae:	2800      	cmp	r0, #0
   2bbb0:	d156      	bne.n	2bc60 <ip_interface_getaddrinfo+0x1ac>
   2bbb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2bbb6:	9303      	str	r3, [sp, #12]
   2bbb8:	4631      	mov	r1, r6
   2bbba:	4620      	mov	r0, r4
   2bbbc:	f7f6 ff0a 	bl	229d4 <bsd_os_timedwait>
   2bbc0:	f8d8 3000 	ldr.w	r3, [r8]
   2bbc4:	2b01      	cmp	r3, #1
   2bbc6:	d0f7      	beq.n	2bbb8 <ip_interface_getaddrinfo+0x104>
   2bbc8:	4b31      	ldr	r3, [pc, #196]	; (2bc90 <ip_interface_getaddrinfo+0x1dc>)
   2bbca:	6818      	ldr	r0, [r3, #0]
   2bbcc:	2800      	cmp	r0, #0
   2bbce:	d13b      	bne.n	2bc48 <ip_interface_getaddrinfo+0x194>
   2bbd0:	4b2e      	ldr	r3, [pc, #184]	; (2bc8c <ip_interface_getaddrinfo+0x1d8>)
   2bbd2:	9a01      	ldr	r2, [sp, #4]
   2bbd4:	681b      	ldr	r3, [r3, #0]
   2bbd6:	6013      	str	r3, [r2, #0]
   2bbd8:	e00c      	b.n	2bbf4 <ip_interface_getaddrinfo+0x140>
   2bbda:	46bb      	mov	fp, r7
   2bbdc:	e79e      	b.n	2bb1c <ip_interface_getaddrinfo+0x68>
   2bbde:	9c03      	ldr	r4, [sp, #12]
   2bbe0:	2c00      	cmp	r4, #0
   2bbe2:	d1bd      	bne.n	2bb60 <ip_interface_getaddrinfo+0xac>
   2bbe4:	200c      	movs	r0, #12
   2bbe6:	2300      	movs	r3, #0
   2bbe8:	f8c8 3000 	str.w	r3, [r8]
   2bbec:	b005      	add	sp, #20
   2bbee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bbf2:	2073      	movs	r0, #115	; 0x73
   2bbf4:	b005      	add	sp, #20
   2bbf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bbfa:	2016      	movs	r0, #22
   2bbfc:	b005      	add	sp, #20
   2bbfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bc02:	6891      	ldr	r1, [r2, #8]
   2bc04:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   2bc08:	d18e      	bne.n	2bb28 <ip_interface_getaddrinfo+0x74>
   2bc0a:	f240 2102 	movw	r1, #514	; 0x202
   2bc0e:	68d0      	ldr	r0, [r2, #12]
   2bc10:	4288      	cmp	r0, r1
   2bc12:	d189      	bne.n	2bb28 <ip_interface_getaddrinfo+0x74>
   2bc14:	6991      	ldr	r1, [r2, #24]
   2bc16:	2900      	cmp	r1, #0
   2bc18:	d086      	beq.n	2bb28 <ip_interface_getaddrinfo+0x74>
   2bc1a:	6868      	ldr	r0, [r5, #4]
   2bc1c:	f7fe f9dc 	bl	29fd8 <pdn_interface_pdn_id_get>
   2bc20:	1c43      	adds	r3, r0, #1
   2bc22:	d081      	beq.n	2bb28 <ip_interface_getaddrinfo+0x74>
   2bc24:	4602      	mov	r2, r0
   2bc26:	e781      	b.n	2bb2c <ip_interface_getaddrinfo+0x78>
   2bc28:	68a9      	ldr	r1, [r5, #8]
   2bc2a:	2902      	cmp	r1, #2
   2bc2c:	f8c9 1000 	str.w	r1, [r9]
   2bc30:	d006      	beq.n	2bc40 <ip_interface_getaddrinfo+0x18c>
   2bc32:	2a05      	cmp	r2, #5
   2bc34:	d0a2      	beq.n	2bb7c <ip_interface_getaddrinfo+0xc8>
   2bc36:	2a0a      	cmp	r2, #10
   2bc38:	bf14      	ite	ne
   2bc3a:	2201      	movne	r2, #1
   2bc3c:	2202      	moveq	r2, #2
   2bc3e:	e79d      	b.n	2bb7c <ip_interface_getaddrinfo+0xc8>
   2bc40:	2102      	movs	r1, #2
   2bc42:	f8ca 1000 	str.w	r1, [sl]
   2bc46:	e7f4      	b.n	2bc32 <ip_interface_getaddrinfo+0x17e>
   2bc48:	4b11      	ldr	r3, [pc, #68]	; (2bc90 <ip_interface_getaddrinfo+0x1dc>)
   2bc4a:	6818      	ldr	r0, [r3, #0]
   2bc4c:	2800      	cmp	r0, #0
   2bc4e:	d0d1      	beq.n	2bbf4 <ip_interface_getaddrinfo+0x140>
   2bc50:	e7c9      	b.n	2bbe6 <ip_interface_getaddrinfo+0x132>
   2bc52:	4629      	mov	r1, r5
   2bc54:	2210      	movs	r2, #16
   2bc56:	f104 0014 	add.w	r0, r4, #20
   2bc5a:	f009 ff75 	bl	35b48 <memset>
   2bc5e:	e794      	b.n	2bb8a <ip_interface_getaddrinfo+0xd6>
   2bc60:	2023      	movs	r0, #35	; 0x23
   2bc62:	e7c0      	b.n	2bbe6 <ip_interface_getaddrinfo+0x132>
   2bc64:	202f      	movs	r0, #47	; 0x2f
   2bc66:	f7f6 ff49 	bl	22afc <bsd_os_errno_set>
   2bc6a:	68a2      	ldr	r2, [r4, #8]
   2bc6c:	3210      	adds	r2, #16
   2bc6e:	60a2      	str	r2, [r4, #8]
   2bc70:	b917      	cbnz	r7, 2bc78 <ip_interface_getaddrinfo+0x1c4>
   2bc72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2bc76:	e7b6      	b.n	2bbe6 <ip_interface_getaddrinfo+0x132>
   2bc78:	6820      	ldr	r0, [r4, #0]
   2bc7a:	2800      	cmp	r0, #0
   2bc7c:	d0f9      	beq.n	2bc72 <ip_interface_getaddrinfo+0x1be>
   2bc7e:	465a      	mov	r2, fp
   2bc80:	4639      	mov	r1, r7
   2bc82:	f009 ff41 	bl	35b08 <memcpy>
   2bc86:	e7f4      	b.n	2bc72 <ip_interface_getaddrinfo+0x1be>
   2bc88:	20024016 	.word	0x20024016
   2bc8c:	20022b38 	.word	0x20022b38
   2bc90:	20022b30 	.word	0x20022b30
   2bc94:	20022b28 	.word	0x20022b28
   2bc98:	20022b2c 	.word	0x20022b2c
   2bc9c:	20022b34 	.word	0x20022b34

0002bca0 <ip_interface_freeaddrinfo>:
   2bca0:	b538      	push	{r3, r4, r5, lr}
   2bca2:	4c0b      	ldr	r4, [pc, #44]	; (2bcd0 <ip_interface_freeaddrinfo+0x30>)
   2bca4:	6823      	ldr	r3, [r4, #0]
   2bca6:	2b02      	cmp	r3, #2
   2bca8:	d000      	beq.n	2bcac <ip_interface_freeaddrinfo+0xc>
   2bcaa:	bd38      	pop	{r3, r4, r5, pc}
   2bcac:	b130      	cbz	r0, 2bcbc <ip_interface_freeaddrinfo+0x1c>
   2bcae:	4605      	mov	r5, r0
   2bcb0:	6940      	ldr	r0, [r0, #20]
   2bcb2:	f7fb fab9 	bl	27228 <nrf_free>
   2bcb6:	4628      	mov	r0, r5
   2bcb8:	f7fb fab6 	bl	27228 <nrf_free>
   2bcbc:	2300      	movs	r3, #0
   2bcbe:	4a05      	ldr	r2, [pc, #20]	; (2bcd4 <ip_interface_freeaddrinfo+0x34>)
   2bcc0:	4905      	ldr	r1, [pc, #20]	; (2bcd8 <ip_interface_freeaddrinfo+0x38>)
   2bcc2:	6023      	str	r3, [r4, #0]
   2bcc4:	6013      	str	r3, [r2, #0]
   2bcc6:	6808      	ldr	r0, [r1, #0]
   2bcc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2bccc:	f7fb bb0c 	b.w	272e8 <rpc_ip_client_data_free>
   2bcd0:	20022b34 	.word	0x20022b34
   2bcd4:	20022b30 	.word	0x20022b30
   2bcd8:	20022b3c 	.word	0x20022b3c

0002bcdc <rpc_ip_event_handler>:
   2bcdc:	f248 030d 	movw	r3, #32781	; 0x800d
   2bce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bce4:	4299      	cmp	r1, r3
   2bce6:	b089      	sub	sp, #36	; 0x24
   2bce8:	4605      	mov	r5, r0
   2bcea:	d062      	beq.n	2bdb2 <rpc_ip_event_handler+0xd6>
   2bcec:	f248 030f 	movw	r3, #32783	; 0x800f
   2bcf0:	4299      	cmp	r1, r3
   2bcf2:	460c      	mov	r4, r1
   2bcf4:	d04b      	beq.n	2bd8e <rpc_ip_event_handler+0xb2>
   2bcf6:	f401 4310 	and.w	r3, r1, #36864	; 0x9000
   2bcfa:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
   2bcfe:	68c0      	ldr	r0, [r0, #12]
   2bd00:	d07b      	beq.n	2bdfa <rpc_ip_event_handler+0x11e>
   2bd02:	0c07      	lsrs	r7, r0, #16
   2bd04:	4638      	mov	r0, r7
   2bd06:	f000 fba1 	bl	2c44c <interface_socket_from_handle_get>
   2bd0a:	4606      	mov	r6, r0
   2bd0c:	2800      	cmp	r0, #0
   2bd0e:	d05f      	beq.n	2bdd0 <rpc_ip_event_handler+0xf4>
   2bd10:	4601      	mov	r1, r0
   2bd12:	4623      	mov	r3, r4
   2bd14:	462a      	mov	r2, r5
   2bd16:	4638      	mov	r0, r7
   2bd18:	f7fb ff1e 	bl	27b58 <tls_rpc_ip_event_handler>
   2bd1c:	2800      	cmp	r0, #0
   2bd1e:	d053      	beq.n	2bdc8 <rpc_ip_event_handler+0xec>
   2bd20:	f248 0307 	movw	r3, #32775	; 0x8007
   2bd24:	429c      	cmp	r4, r3
   2bd26:	d97d      	bls.n	2be24 <rpc_ip_event_handler+0x148>
   2bd28:	f248 030c 	movw	r3, #32780	; 0x800c
   2bd2c:	429c      	cmp	r4, r3
   2bd2e:	d068      	beq.n	2be02 <rpc_ip_event_handler+0x126>
   2bd30:	f240 8119 	bls.w	2bf66 <rpc_ip_event_handler+0x28a>
   2bd34:	f249 0302 	movw	r3, #36866	; 0x9002
   2bd38:	429c      	cmp	r4, r3
   2bd3a:	f000 8195 	beq.w	2c068 <rpc_ip_event_handler+0x38c>
   2bd3e:	f249 0303 	movw	r3, #36867	; 0x9003
   2bd42:	429c      	cmp	r4, r3
   2bd44:	f000 81aa 	beq.w	2c09c <rpc_ip_event_handler+0x3c0>
   2bd48:	f249 0301 	movw	r3, #36865	; 0x9001
   2bd4c:	429c      	cmp	r4, r3
   2bd4e:	d13f      	bne.n	2bdd0 <rpc_ip_event_handler+0xf4>
   2bd50:	6834      	ldr	r4, [r6, #0]
   2bd52:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
   2bd56:	f000 81c2 	beq.w	2c0de <rpc_ip_event_handler+0x402>
   2bd5a:	68ab      	ldr	r3, [r5, #8]
   2bd5c:	2b04      	cmp	r3, #4
   2bd5e:	f200 81ff 	bhi.w	2c160 <rpc_ip_event_handler+0x484>
   2bd62:	2400      	movs	r4, #0
   2bd64:	4627      	mov	r7, r4
   2bd66:	6829      	ldr	r1, [r5, #0]
   2bd68:	686a      	ldr	r2, [r5, #4]
   2bd6a:	e9cd 7406 	strd	r7, r4, [sp, #24]
   2bd6e:	e9cd 1204 	strd	r1, r2, [sp, #16]
   2bd72:	69f0      	ldr	r0, [r6, #28]
   2bd74:	a904      	add	r1, sp, #16
   2bd76:	6803      	ldr	r3, [r0, #0]
   2bd78:	685b      	ldr	r3, [r3, #4]
   2bd7a:	4798      	blx	r3
   2bd7c:	3001      	adds	r0, #1
   2bd7e:	f000 81db 	beq.w	2c138 <rpc_ip_event_handler+0x45c>
   2bd82:	6833      	ldr	r3, [r6, #0]
   2bd84:	2000      	movs	r0, #0
   2bd86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   2bd8a:	6033      	str	r3, [r6, #0]
   2bd8c:	e00e      	b.n	2bdac <rpc_ip_event_handler+0xd0>
   2bd8e:	6943      	ldr	r3, [r0, #20]
   2bd90:	2001      	movs	r0, #1
   2bd92:	2b10      	cmp	r3, #16
   2bd94:	49b7      	ldr	r1, [pc, #732]	; (2c074 <rpc_ip_event_handler+0x398>)
   2bd96:	bf88      	it	hi
   2bd98:	222d      	movhi	r2, #45	; 0x2d
   2bd9a:	7008      	strb	r0, [r1, #0]
   2bd9c:	f04f 0000 	mov.w	r0, #0
   2bda0:	bf9c      	itt	ls
   2bda2:	4ab5      	ldrls	r2, [pc, #724]	; (2c078 <rpc_ip_event_handler+0x39c>)
   2bda4:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   2bda8:	4bb4      	ldr	r3, [pc, #720]	; (2c07c <rpc_ip_event_handler+0x3a0>)
   2bdaa:	601a      	str	r2, [r3, #0]
   2bdac:	b009      	add	sp, #36	; 0x24
   2bdae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bdb2:	f8df 92dc 	ldr.w	r9, [pc, #732]	; 2c090 <rpc_ip_event_handler+0x3b4>
   2bdb6:	6807      	ldr	r7, [r0, #0]
   2bdb8:	f8d9 3000 	ldr.w	r3, [r9]
   2bdbc:	2b01      	cmp	r3, #1
   2bdbe:	d00b      	beq.n	2bdd8 <rpc_ip_event_handler+0xfc>
   2bdc0:	b117      	cbz	r7, 2bdc8 <rpc_ip_event_handler+0xec>
   2bdc2:	4638      	mov	r0, r7
   2bdc4:	f7fb fa90 	bl	272e8 <rpc_ip_client_data_free>
   2bdc8:	2000      	movs	r0, #0
   2bdca:	b009      	add	sp, #36	; 0x24
   2bdcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bdd0:	6828      	ldr	r0, [r5, #0]
   2bdd2:	2800      	cmp	r0, #0
   2bdd4:	d1f6      	bne.n	2bdc4 <rpc_ip_event_handler+0xe8>
   2bdd6:	e7f7      	b.n	2bdc8 <rpc_ip_event_handler+0xec>
   2bdd8:	6943      	ldr	r3, [r0, #20]
   2bdda:	2b00      	cmp	r3, #0
   2bddc:	d046      	beq.n	2be6c <rpc_ip_event_handler+0x190>
   2bdde:	2b10      	cmp	r3, #16
   2bde0:	bf96      	itet	ls
   2bde2:	4aa5      	ldrls	r2, [pc, #660]	; (2c078 <rpc_ip_event_handler+0x39c>)
   2bde4:	232d      	movhi	r3, #45	; 0x2d
   2bde6:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   2bdea:	2202      	movs	r2, #2
   2bdec:	49a4      	ldr	r1, [pc, #656]	; (2c080 <rpc_ip_event_handler+0x3a4>)
   2bdee:	600b      	str	r3, [r1, #0]
   2bdf0:	f8c9 2000 	str.w	r2, [r9]
   2bdf4:	2f00      	cmp	r7, #0
   2bdf6:	d1e4      	bne.n	2bdc2 <rpc_ip_event_handler+0xe6>
   2bdf8:	e7e6      	b.n	2bdc8 <rpc_ip_event_handler+0xec>
   2bdfa:	f000 fad5 	bl	2c3a8 <interface_from_internal_id_search>
   2bdfe:	4607      	mov	r7, r0
   2be00:	e780      	b.n	2bd04 <rpc_ip_event_handler+0x28>
   2be02:	6833      	ldr	r3, [r6, #0]
   2be04:	b29b      	uxth	r3, r3
   2be06:	2b08      	cmp	r3, #8
   2be08:	d1de      	bne.n	2bdc8 <rpc_ip_event_handler+0xec>
   2be0a:	696b      	ldr	r3, [r5, #20]
   2be0c:	2b00      	cmp	r3, #0
   2be0e:	f000 819c 	beq.w	2c14a <rpc_ip_event_handler+0x46e>
   2be12:	2b10      	cmp	r3, #16
   2be14:	f200 8161 	bhi.w	2c0da <rpc_ip_event_handler+0x3fe>
   2be18:	4a97      	ldr	r2, [pc, #604]	; (2c078 <rpc_ip_event_handler+0x39c>)
   2be1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   2be1e:	6073      	str	r3, [r6, #4]
   2be20:	2000      	movs	r0, #0
   2be22:	e7c3      	b.n	2bdac <rpc_ip_event_handler+0xd0>
   2be24:	f248 0306 	movw	r3, #32774	; 0x8006
   2be28:	429c      	cmp	r4, r3
   2be2a:	f080 810d 	bcs.w	2c048 <rpc_ip_event_handler+0x36c>
   2be2e:	f248 0302 	movw	r3, #32770	; 0x8002
   2be32:	429c      	cmp	r4, r3
   2be34:	f000 80f0 	beq.w	2c018 <rpc_ip_event_handler+0x33c>
   2be38:	f240 80be 	bls.w	2bfb8 <rpc_ip_event_handler+0x2dc>
   2be3c:	f248 0303 	movw	r3, #32771	; 0x8003
   2be40:	429c      	cmp	r4, r3
   2be42:	f000 80ca 	beq.w	2bfda <rpc_ip_event_handler+0x2fe>
   2be46:	f248 0305 	movw	r3, #32773	; 0x8005
   2be4a:	429c      	cmp	r4, r3
   2be4c:	d1c0      	bne.n	2bdd0 <rpc_ip_event_handler+0xf4>
   2be4e:	6833      	ldr	r3, [r6, #0]
   2be50:	b29b      	uxth	r3, r3
   2be52:	2b03      	cmp	r3, #3
   2be54:	d1b8      	bne.n	2bdc8 <rpc_ip_event_handler+0xec>
   2be56:	696b      	ldr	r3, [r5, #20]
   2be58:	2b00      	cmp	r3, #0
   2be5a:	d1da      	bne.n	2be12 <rpc_ip_event_handler+0x136>
   2be5c:	6833      	ldr	r3, [r6, #0]
   2be5e:	2000      	movs	r0, #0
   2be60:	0c1b      	lsrs	r3, r3, #16
   2be62:	041b      	lsls	r3, r3, #16
   2be64:	f043 0304 	orr.w	r3, r3, #4
   2be68:	6033      	str	r3, [r6, #0]
   2be6a:	e79f      	b.n	2bdac <rpc_ip_event_handler+0xd0>
   2be6c:	4b85      	ldr	r3, [pc, #532]	; (2c084 <rpc_ip_event_handler+0x3a8>)
   2be6e:	601f      	str	r7, [r3, #0]
   2be70:	6984      	ldr	r4, [r0, #24]
   2be72:	0163      	lsls	r3, r4, #5
   2be74:	4618      	mov	r0, r3
   2be76:	9303      	str	r3, [sp, #12]
   2be78:	f7fb f9cc 	bl	27214 <nrf_malloc>
   2be7c:	9002      	str	r0, [sp, #8]
   2be7e:	2800      	cmp	r0, #0
   2be80:	f000 808a 	beq.w	2bf98 <rpc_ip_event_handler+0x2bc>
   2be84:	00e5      	lsls	r5, r4, #3
   2be86:	1928      	adds	r0, r5, r4
   2be88:	0080      	lsls	r0, r0, #2
   2be8a:	f7fb f9c3 	bl	27214 <nrf_malloc>
   2be8e:	2800      	cmp	r0, #0
   2be90:	f000 811f 	beq.w	2c0d2 <rpc_ip_event_handler+0x3f6>
   2be94:	2c00      	cmp	r4, #0
   2be96:	d05e      	beq.n	2bf56 <rpc_ip_event_handler+0x27a>
   2be98:	3510      	adds	r5, #16
   2be9a:	1943      	adds	r3, r0, r5
   2be9c:	9301      	str	r3, [sp, #4]
   2be9e:	9b02      	ldr	r3, [sp, #8]
   2bea0:	2404      	movs	r4, #4
   2bea2:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 2c094 <rpc_ip_event_handler+0x3b8>
   2bea6:	f8df b1f0 	ldr.w	fp, [pc, #496]	; 2c098 <rpc_ip_event_handler+0x3bc>
   2beaa:	f100 0810 	add.w	r8, r0, #16
   2beae:	f103 0620 	add.w	r6, r3, #32
   2beb2:	e01d      	b.n	2bef0 <rpc_ip_event_handler+0x214>
   2beb4:	220a      	movs	r2, #10
   2beb6:	f848 2c0c 	str.w	r2, [r8, #-12]
   2beba:	f04f 0224 	mov.w	r2, #36	; 0x24
   2bebe:	4640      	mov	r0, r8
   2bec0:	f808 2c10 	strb.w	r2, [r8, #-16]
   2bec4:	f828 3c08 	strh.w	r3, [r8, #-8]
   2bec8:	f856 2c10 	ldr.w	r2, [r6, #-16]
   2becc:	f009 fe1c 	bl	35b08 <memcpy>
   2bed0:	f856 3c10 	ldr.w	r3, [r6, #-16]
   2bed4:	f108 0808 	add.w	r8, r8, #8
   2bed8:	441c      	add	r4, r3
   2beda:	193b      	adds	r3, r7, r4
   2bedc:	f846 3c08 	str.w	r3, [r6, #-8]
   2bee0:	9b01      	ldr	r3, [sp, #4]
   2bee2:	f846 6c04 	str.w	r6, [r6, #-4]
   2bee6:	4598      	cmp	r8, r3
   2bee8:	442c      	add	r4, r5
   2beea:	f106 0620 	add.w	r6, r6, #32
   2beee:	d02c      	beq.n	2bf4a <rpc_ip_event_handler+0x26e>
   2bef0:	593b      	ldr	r3, [r7, r4]
   2bef2:	193a      	adds	r2, r7, r4
   2bef4:	f846 3c20 	str.w	r3, [r6, #-32]
   2bef8:	6853      	ldr	r3, [r2, #4]
   2befa:	f8da 1000 	ldr.w	r1, [sl]
   2befe:	2b02      	cmp	r3, #2
   2bf00:	bf14      	ite	ne
   2bf02:	2002      	movne	r0, #2
   2bf04:	200a      	moveq	r0, #10
   2bf06:	f8db 3000 	ldr.w	r3, [fp]
   2bf0a:	e946 0107 	strd	r0, r1, [r6, #-28]
   2bf0e:	f846 3c14 	str.w	r3, [r6, #-20]
   2bf12:	8a10      	ldrh	r0, [r2, #16]
   2bf14:	f1a8 0310 	sub.w	r3, r8, #16
   2bf18:	f846 0c10 	str.w	r0, [r6, #-16]
   2bf1c:	8a55      	ldrh	r5, [r2, #18]
   2bf1e:	f846 3c0c 	str.w	r3, [r6, #-12]
   2bf22:	4b59      	ldr	r3, [pc, #356]	; (2c088 <rpc_ip_event_handler+0x3ac>)
   2bf24:	3414      	adds	r4, #20
   2bf26:	2804      	cmp	r0, #4
   2bf28:	eb07 0104 	add.w	r1, r7, r4
   2bf2c:	881b      	ldrh	r3, [r3, #0]
   2bf2e:	d1c1      	bne.n	2beb4 <rpc_ip_event_handler+0x1d8>
   2bf30:	2210      	movs	r2, #16
   2bf32:	2002      	movs	r0, #2
   2bf34:	f828 3c08 	strh.w	r3, [r8, #-8]
   2bf38:	f848 0c0c 	str.w	r0, [r8, #-12]
   2bf3c:	f808 2c10 	strb.w	r2, [r8, #-16]
   2bf40:	f856 2c10 	ldr.w	r2, [r6, #-16]
   2bf44:	f1a8 0004 	sub.w	r0, r8, #4
   2bf48:	e7c0      	b.n	2becc <rpc_ip_event_handler+0x1f0>
   2bf4a:	2200      	movs	r2, #0
   2bf4c:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
   2bf50:	440b      	add	r3, r1
   2bf52:	f843 2c04 	str.w	r2, [r3, #-4]
   2bf56:	2202      	movs	r2, #2
   2bf58:	4b4c      	ldr	r3, [pc, #304]	; (2c08c <rpc_ip_event_handler+0x3b0>)
   2bf5a:	f8c9 2000 	str.w	r2, [r9]
   2bf5e:	9a02      	ldr	r2, [sp, #8]
   2bf60:	2000      	movs	r0, #0
   2bf62:	601a      	str	r2, [r3, #0]
   2bf64:	e722      	b.n	2bdac <rpc_ip_event_handler+0xd0>
   2bf66:	f248 0308 	movw	r3, #32776	; 0x8008
   2bf6a:	429c      	cmp	r4, r3
   2bf6c:	d045      	beq.n	2bffa <rpc_ip_event_handler+0x31e>
   2bf6e:	f248 0309 	movw	r3, #32777	; 0x8009
   2bf72:	429c      	cmp	r4, r3
   2bf74:	f47f af2c 	bne.w	2bdd0 <rpc_ip_event_handler+0xf4>
   2bf78:	6833      	ldr	r3, [r6, #0]
   2bf7a:	b29b      	uxth	r3, r3
   2bf7c:	2b0d      	cmp	r3, #13
   2bf7e:	f47f af23 	bne.w	2bdc8 <rpc_ip_event_handler+0xec>
   2bf82:	6968      	ldr	r0, [r5, #20]
   2bf84:	2800      	cmp	r0, #0
   2bf86:	f000 80d9 	beq.w	2c13c <rpc_ip_event_handler+0x460>
   2bf8a:	2810      	cmp	r0, #16
   2bf8c:	f200 80a5 	bhi.w	2c0da <rpc_ip_event_handler+0x3fe>
   2bf90:	4b39      	ldr	r3, [pc, #228]	; (2c078 <rpc_ip_event_handler+0x39c>)
   2bf92:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   2bf96:	e742      	b.n	2be1e <rpc_ip_event_handler+0x142>
   2bf98:	f7fb f946 	bl	27228 <nrf_free>
   2bf9c:	200c      	movs	r0, #12
   2bf9e:	2302      	movs	r3, #2
   2bfa0:	4937      	ldr	r1, [pc, #220]	; (2c080 <rpc_ip_event_handler+0x3a4>)
   2bfa2:	4a3a      	ldr	r2, [pc, #232]	; (2c08c <rpc_ip_event_handler+0x3b0>)
   2bfa4:	6008      	str	r0, [r1, #0]
   2bfa6:	682f      	ldr	r7, [r5, #0]
   2bfa8:	9902      	ldr	r1, [sp, #8]
   2bfaa:	f8c9 3000 	str.w	r3, [r9]
   2bfae:	6011      	str	r1, [r2, #0]
   2bfb0:	2f00      	cmp	r7, #0
   2bfb2:	f47f af06 	bne.w	2bdc2 <rpc_ip_event_handler+0xe6>
   2bfb6:	e707      	b.n	2bdc8 <rpc_ip_event_handler+0xec>
   2bfb8:	f248 0301 	movw	r3, #32769	; 0x8001
   2bfbc:	429c      	cmp	r4, r3
   2bfbe:	f47f af07 	bne.w	2bdd0 <rpc_ip_event_handler+0xf4>
   2bfc2:	6833      	ldr	r3, [r6, #0]
   2bfc4:	2b01      	cmp	r3, #1
   2bfc6:	f47f aeff 	bne.w	2bdc8 <rpc_ip_event_handler+0xec>
   2bfca:	6968      	ldr	r0, [r5, #20]
   2bfcc:	2800      	cmp	r0, #0
   2bfce:	d1dc      	bne.n	2bf8a <rpc_ip_event_handler+0x2ae>
   2bfd0:	2302      	movs	r3, #2
   2bfd2:	6033      	str	r3, [r6, #0]
   2bfd4:	69ab      	ldr	r3, [r5, #24]
   2bfd6:	61b3      	str	r3, [r6, #24]
   2bfd8:	e6e8      	b.n	2bdac <rpc_ip_event_handler+0xd0>
   2bfda:	6833      	ldr	r3, [r6, #0]
   2bfdc:	025b      	lsls	r3, r3, #9
   2bfde:	f57f aef3 	bpl.w	2bdc8 <rpc_ip_event_handler+0xec>
   2bfe2:	6968      	ldr	r0, [r5, #20]
   2bfe4:	2800      	cmp	r0, #0
   2bfe6:	f000 80a0 	beq.w	2c12a <rpc_ip_event_handler+0x44e>
   2bfea:	2810      	cmp	r0, #16
   2bfec:	bf8e      	itee	hi
   2bfee:	232d      	movhi	r3, #45	; 0x2d
   2bff0:	4b21      	ldrls	r3, [pc, #132]	; (2c078 <rpc_ip_event_handler+0x39c>)
   2bff2:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
   2bff6:	6073      	str	r3, [r6, #4]
   2bff8:	e6e6      	b.n	2bdc8 <rpc_ip_event_handler+0xec>
   2bffa:	6833      	ldr	r3, [r6, #0]
   2bffc:	b29b      	uxth	r3, r3
   2bffe:	2b06      	cmp	r3, #6
   2c000:	f47f aee2 	bne.w	2bdc8 <rpc_ip_event_handler+0xec>
   2c004:	6968      	ldr	r0, [r5, #20]
   2c006:	2800      	cmp	r0, #0
   2c008:	d1bf      	bne.n	2bf8a <rpc_ip_event_handler+0x2ae>
   2c00a:	6833      	ldr	r3, [r6, #0]
   2c00c:	0c1b      	lsrs	r3, r3, #16
   2c00e:	041b      	lsls	r3, r3, #16
   2c010:	f043 0307 	orr.w	r3, r3, #7
   2c014:	6033      	str	r3, [r6, #0]
   2c016:	e6c9      	b.n	2bdac <rpc_ip_event_handler+0xd0>
   2c018:	6833      	ldr	r3, [r6, #0]
   2c01a:	0099      	lsls	r1, r3, #2
   2c01c:	f57f aed4 	bpl.w	2bdc8 <rpc_ip_event_handler+0xec>
   2c020:	6833      	ldr	r3, [r6, #0]
   2c022:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   2c026:	6033      	str	r3, [r6, #0]
   2c028:	6968      	ldr	r0, [r5, #20]
   2c02a:	2800      	cmp	r0, #0
   2c02c:	d06e      	beq.n	2c10c <rpc_ip_event_handler+0x430>
   2c02e:	2810      	cmp	r0, #16
   2c030:	f200 8080 	bhi.w	2c134 <rpc_ip_event_handler+0x458>
   2c034:	4b10      	ldr	r3, [pc, #64]	; (2c078 <rpc_ip_event_handler+0x39c>)
   2c036:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   2c03a:	6073      	str	r3, [r6, #4]
   2c03c:	6833      	ldr	r3, [r6, #0]
   2c03e:	2000      	movs	r0, #0
   2c040:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   2c044:	6033      	str	r3, [r6, #0]
   2c046:	e6b1      	b.n	2bdac <rpc_ip_event_handler+0xd0>
   2c048:	6833      	ldr	r3, [r6, #0]
   2c04a:	029a      	lsls	r2, r3, #10
   2c04c:	f57f aebc 	bpl.w	2bdc8 <rpc_ip_event_handler+0xec>
   2c050:	696b      	ldr	r3, [r5, #20]
   2c052:	2b00      	cmp	r3, #0
   2c054:	d051      	beq.n	2c0fa <rpc_ip_event_handler+0x41e>
   2c056:	2b6b      	cmp	r3, #107	; 0x6b
   2c058:	f000 8086 	beq.w	2c168 <rpc_ip_event_handler+0x48c>
   2c05c:	2b10      	cmp	r3, #16
   2c05e:	d869      	bhi.n	2c134 <rpc_ip_event_handler+0x458>
   2c060:	4a05      	ldr	r2, [pc, #20]	; (2c078 <rpc_ip_event_handler+0x39c>)
   2c062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   2c066:	e7e8      	b.n	2c03a <rpc_ip_event_handler+0x35e>
   2c068:	6833      	ldr	r3, [r6, #0]
   2c06a:	b29b      	uxth	r3, r3
   2c06c:	2b07      	cmp	r3, #7
   2c06e:	f47f aeab 	bne.w	2bdc8 <rpc_ip_event_handler+0xec>
   2c072:	e686      	b.n	2bd82 <rpc_ip_event_handler+0xa6>
   2c074:	20025b64 	.word	0x20025b64
   2c078:	00037440 	.word	0x00037440
   2c07c:	20022b64 	.word	0x20022b64
   2c080:	20022b30 	.word	0x20022b30
   2c084:	20022b3c 	.word	0x20022b3c
   2c088:	20024016 	.word	0x20024016
   2c08c:	20022b38 	.word	0x20022b38
   2c090:	20022b34 	.word	0x20022b34
   2c094:	20022b2c 	.word	0x20022b2c
   2c098:	20022b28 	.word	0x20022b28
   2c09c:	6833      	ldr	r3, [r6, #0]
   2c09e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   2c0a2:	6033      	str	r3, [r6, #0]
   2c0a4:	6833      	ldr	r3, [r6, #0]
   2c0a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   2c0aa:	6033      	str	r3, [r6, #0]
   2c0ac:	6833      	ldr	r3, [r6, #0]
   2c0ae:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   2c0b2:	6033      	str	r3, [r6, #0]
   2c0b4:	692b      	ldr	r3, [r5, #16]
   2c0b6:	2b6c      	cmp	r3, #108	; 0x6c
   2c0b8:	d016      	beq.n	2c0e8 <rpc_ip_event_handler+0x40c>
   2c0ba:	2b10      	cmp	r3, #16
   2c0bc:	bf8c      	ite	hi
   2c0be:	232d      	movhi	r3, #45	; 0x2d
   2c0c0:	4a46      	ldrls	r2, [pc, #280]	; (2c1dc <rpc_ip_event_handler+0x500>)
   2c0c2:	f04f 0000 	mov.w	r0, #0
   2c0c6:	bf98      	it	ls
   2c0c8:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   2c0cc:	6073      	str	r3, [r6, #4]
   2c0ce:	60b3      	str	r3, [r6, #8]
   2c0d0:	e66c      	b.n	2bdac <rpc_ip_event_handler+0xd0>
   2c0d2:	220c      	movs	r2, #12
   2c0d4:	4b42      	ldr	r3, [pc, #264]	; (2c1e0 <rpc_ip_event_handler+0x504>)
   2c0d6:	601a      	str	r2, [r3, #0]
   2c0d8:	e73d      	b.n	2bf56 <rpc_ip_event_handler+0x27a>
   2c0da:	232d      	movs	r3, #45	; 0x2d
   2c0dc:	e69f      	b.n	2be1e <rpc_ip_event_handler+0x142>
   2c0de:	6828      	ldr	r0, [r5, #0]
   2c0e0:	f7fb f902 	bl	272e8 <rpc_ip_client_data_free>
   2c0e4:	4620      	mov	r0, r4
   2c0e6:	e661      	b.n	2bdac <rpc_ip_event_handler+0xd0>
   2c0e8:	2239      	movs	r2, #57	; 0x39
   2c0ea:	6833      	ldr	r3, [r6, #0]
   2c0ec:	2000      	movs	r0, #0
   2c0ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   2c0f2:	6033      	str	r3, [r6, #0]
   2c0f4:	6072      	str	r2, [r6, #4]
   2c0f6:	60b2      	str	r2, [r6, #8]
   2c0f8:	e658      	b.n	2bdac <rpc_ip_event_handler+0xd0>
   2c0fa:	6833      	ldr	r3, [r6, #0]
   2c0fc:	4a39      	ldr	r2, [pc, #228]	; (2c1e4 <rpc_ip_event_handler+0x508>)
   2c0fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2c102:	6033      	str	r3, [r6, #0]
   2c104:	2001      	movs	r0, #1
   2c106:	f842 5027 	str.w	r5, [r2, r7, lsl #2]
   2c10a:	e64f      	b.n	2bdac <rpc_ip_event_handler+0xd0>
   2c10c:	6833      	ldr	r3, [r6, #0]
   2c10e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2c112:	6033      	str	r3, [r6, #0]
   2c114:	6833      	ldr	r3, [r6, #0]
   2c116:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   2c11a:	6033      	str	r3, [r6, #0]
   2c11c:	6833      	ldr	r3, [r6, #0]
   2c11e:	0c1b      	lsrs	r3, r3, #16
   2c120:	041b      	lsls	r3, r3, #16
   2c122:	f043 0305 	orr.w	r3, r3, #5
   2c126:	6033      	str	r3, [r6, #0]
   2c128:	e640      	b.n	2bdac <rpc_ip_event_handler+0xd0>
   2c12a:	6833      	ldr	r3, [r6, #0]
   2c12c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   2c130:	6033      	str	r3, [r6, #0]
   2c132:	e63b      	b.n	2bdac <rpc_ip_event_handler+0xd0>
   2c134:	232d      	movs	r3, #45	; 0x2d
   2c136:	e780      	b.n	2c03a <rpc_ip_event_handler+0x35e>
   2c138:	2002      	movs	r0, #2
   2c13a:	e637      	b.n	2bdac <rpc_ip_event_handler+0xd0>
   2c13c:	6833      	ldr	r3, [r6, #0]
   2c13e:	0c1b      	lsrs	r3, r3, #16
   2c140:	041b      	lsls	r3, r3, #16
   2c142:	f043 030e 	orr.w	r3, r3, #14
   2c146:	6033      	str	r3, [r6, #0]
   2c148:	e630      	b.n	2bdac <rpc_ip_event_handler+0xd0>
   2c14a:	4b26      	ldr	r3, [pc, #152]	; (2c1e4 <rpc_ip_event_handler+0x508>)
   2c14c:	2001      	movs	r0, #1
   2c14e:	f843 5027 	str.w	r5, [r3, r7, lsl #2]
   2c152:	6833      	ldr	r3, [r6, #0]
   2c154:	0c1b      	lsrs	r3, r3, #16
   2c156:	041b      	lsls	r3, r3, #16
   2c158:	f043 0309 	orr.w	r3, r3, #9
   2c15c:	6033      	str	r3, [r6, #0]
   2c15e:	e625      	b.n	2bdac <rpc_ip_event_handler+0xd0>
   2c160:	8a6c      	ldrh	r4, [r5, #18]
   2c162:	b934      	cbnz	r4, 2c172 <rpc_ip_event_handler+0x496>
   2c164:	4627      	mov	r7, r4
   2c166:	e5fe      	b.n	2bd66 <rpc_ip_event_handler+0x8a>
   2c168:	6933      	ldr	r3, [r6, #16]
   2c16a:	2b01      	cmp	r3, #1
   2c16c:	d012      	beq.n	2c194 <rpc_ip_event_handler+0x4b8>
   2c16e:	230c      	movs	r3, #12
   2c170:	e763      	b.n	2c03a <rpc_ip_event_handler+0x35e>
   2c172:	2024      	movs	r0, #36	; 0x24
   2c174:	f7fb f84e 	bl	27214 <nrf_malloc>
   2c178:	4607      	mov	r7, r0
   2c17a:	b358      	cbz	r0, 2c1d4 <rpc_ip_event_handler+0x4f8>
   2c17c:	8a6a      	ldrh	r2, [r5, #18]
   2c17e:	2a10      	cmp	r2, #16
   2c180:	d01c      	beq.n	2c1bc <rpc_ip_event_handler+0x4e0>
   2c182:	2a04      	cmp	r2, #4
   2c184:	d00e      	beq.n	2c1a4 <rpc_ip_event_handler+0x4c8>
   2c186:	6828      	ldr	r0, [r5, #0]
   2c188:	f7fb f8ae 	bl	272e8 <rpc_ip_client_data_free>
   2c18c:	4638      	mov	r0, r7
   2c18e:	f7fb f84b 	bl	27228 <nrf_free>
   2c192:	e619      	b.n	2bdc8 <rpc_ip_event_handler+0xec>
   2c194:	220c      	movs	r2, #12
   2c196:	6833      	ldr	r3, [r6, #0]
   2c198:	2000      	movs	r0, #0
   2c19a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   2c19e:	6033      	str	r3, [r6, #0]
   2c1a0:	6072      	str	r2, [r6, #4]
   2c1a2:	e603      	b.n	2bdac <rpc_ip_event_handler+0xd0>
   2c1a4:	2302      	movs	r3, #2
   2c1a6:	2410      	movs	r4, #16
   2c1a8:	6043      	str	r3, [r0, #4]
   2c1aa:	7004      	strb	r4, [r0, #0]
   2c1ac:	8a2b      	ldrh	r3, [r5, #16]
   2c1ae:	f105 0114 	add.w	r1, r5, #20
   2c1b2:	8103      	strh	r3, [r0, #8]
   2c1b4:	300c      	adds	r0, #12
   2c1b6:	f009 fca7 	bl	35b08 <memcpy>
   2c1ba:	e5d4      	b.n	2bd66 <rpc_ip_event_handler+0x8a>
   2c1bc:	230a      	movs	r3, #10
   2c1be:	2424      	movs	r4, #36	; 0x24
   2c1c0:	6043      	str	r3, [r0, #4]
   2c1c2:	7004      	strb	r4, [r0, #0]
   2c1c4:	8a2b      	ldrh	r3, [r5, #16]
   2c1c6:	f105 0114 	add.w	r1, r5, #20
   2c1ca:	8103      	strh	r3, [r0, #8]
   2c1cc:	3010      	adds	r0, #16
   2c1ce:	f009 fc9b 	bl	35b08 <memcpy>
   2c1d2:	e5c8      	b.n	2bd66 <rpc_ip_event_handler+0x8a>
   2c1d4:	6828      	ldr	r0, [r5, #0]
   2c1d6:	f7fb f887 	bl	272e8 <rpc_ip_client_data_free>
   2c1da:	e5f5      	b.n	2bdc8 <rpc_ip_event_handler+0xec>
   2c1dc:	00037440 	.word	0x00037440
   2c1e0:	20022b30 	.word	0x20022b30
   2c1e4:	20022b40 	.word	0x20022b40

0002c1e8 <interface_init>:
   2c1e8:	b508      	push	{r3, lr}
   2c1ea:	f44f 72a2 	mov.w	r2, #324	; 0x144
   2c1ee:	2100      	movs	r1, #0
   2c1f0:	4802      	ldr	r0, [pc, #8]	; (2c1fc <interface_init+0x14>)
   2c1f2:	f009 fca9 	bl	35b48 <memset>
   2c1f6:	2000      	movs	r0, #0
   2c1f8:	bd08      	pop	{r3, pc}
   2c1fa:	bf00      	nop
   2c1fc:	20025b68 	.word	0x20025b68

0002c200 <interface_socket_allocate>:
   2c200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c202:	4b30      	ldr	r3, [pc, #192]	; (2c2c4 <interface_socket_allocate+0xc4>)
   2c204:	4606      	mov	r6, r0
   2c206:	681d      	ldr	r5, [r3, #0]
   2c208:	4608      	mov	r0, r1
   2c20a:	b31d      	cbz	r5, 2c254 <interface_socket_allocate+0x54>
   2c20c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   2c20e:	2c00      	cmp	r4, #0
   2c210:	d04a      	beq.n	2c2a8 <interface_socket_allocate+0xa8>
   2c212:	6c9c      	ldr	r4, [r3, #72]	; 0x48
   2c214:	2c00      	cmp	r4, #0
   2c216:	d049      	beq.n	2c2ac <interface_socket_allocate+0xac>
   2c218:	6edc      	ldr	r4, [r3, #108]	; 0x6c
   2c21a:	2c00      	cmp	r4, #0
   2c21c:	d048      	beq.n	2c2b0 <interface_socket_allocate+0xb0>
   2c21e:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
   2c222:	2900      	cmp	r1, #0
   2c224:	d046      	beq.n	2c2b4 <interface_socket_allocate+0xb4>
   2c226:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
   2c22a:	b191      	cbz	r1, 2c252 <interface_socket_allocate+0x52>
   2c22c:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
   2c230:	2900      	cmp	r1, #0
   2c232:	d043      	beq.n	2c2bc <interface_socket_allocate+0xbc>
   2c234:	f8d3 10fc 	ldr.w	r1, [r3, #252]	; 0xfc
   2c238:	2900      	cmp	r1, #0
   2c23a:	d041      	beq.n	2c2c0 <interface_socket_allocate+0xc0>
   2c23c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   2c240:	2900      	cmp	r1, #0
   2c242:	d039      	beq.n	2c2b8 <interface_socket_allocate+0xb8>
   2c244:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2c248:	2069      	movs	r0, #105	; 0x69
   2c24a:	f7f6 fc57 	bl	22afc <bsd_os_errno_set>
   2c24e:	4628      	mov	r0, r5
   2c250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2c252:	2505      	movs	r5, #5
   2c254:	f04f 0c01 	mov.w	ip, #1
   2c258:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2c25c:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   2c260:	00a4      	lsls	r4, r4, #2
   2c262:	f843 c004 	str.w	ip, [r3, r4]
   2c266:	441c      	add	r4, r3
   2c268:	4611      	mov	r1, r2
   2c26a:	61a7      	str	r7, [r4, #24]
   2c26c:	4622      	mov	r2, r4
   2c26e:	f001 ffd1 	bl	2e214 <packet_handler_create>
   2c272:	4603      	mov	r3, r0
   2c274:	61e0      	str	r0, [r4, #28]
   2c276:	b158      	cbz	r0, 2c290 <interface_socket_allocate+0x90>
   2c278:	681b      	ldr	r3, [r3, #0]
   2c27a:	681b      	ldr	r3, [r3, #0]
   2c27c:	4798      	blx	r3
   2c27e:	b910      	cbnz	r0, 2c286 <interface_socket_allocate+0x86>
   2c280:	6034      	str	r4, [r6, #0]
   2c282:	4628      	mov	r0, r5
   2c284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2c286:	69e0      	ldr	r0, [r4, #28]
   2c288:	f001 ffe4 	bl	2e254 <packet_handler_delete>
   2c28c:	2300      	movs	r3, #0
   2c28e:	61e3      	str	r3, [r4, #28]
   2c290:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2c294:	2224      	movs	r2, #36	; 0x24
   2c296:	2100      	movs	r1, #0
   2c298:	4620      	mov	r0, r4
   2c29a:	f009 fc55 	bl	35b48 <memset>
   2c29e:	200c      	movs	r0, #12
   2c2a0:	f7f6 fc2c 	bl	22afc <bsd_os_errno_set>
   2c2a4:	4628      	mov	r0, r5
   2c2a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2c2a8:	2501      	movs	r5, #1
   2c2aa:	e7d3      	b.n	2c254 <interface_socket_allocate+0x54>
   2c2ac:	2502      	movs	r5, #2
   2c2ae:	e7d1      	b.n	2c254 <interface_socket_allocate+0x54>
   2c2b0:	2503      	movs	r5, #3
   2c2b2:	e7cf      	b.n	2c254 <interface_socket_allocate+0x54>
   2c2b4:	2504      	movs	r5, #4
   2c2b6:	e7cd      	b.n	2c254 <interface_socket_allocate+0x54>
   2c2b8:	2508      	movs	r5, #8
   2c2ba:	e7cb      	b.n	2c254 <interface_socket_allocate+0x54>
   2c2bc:	2506      	movs	r5, #6
   2c2be:	e7c9      	b.n	2c254 <interface_socket_allocate+0x54>
   2c2c0:	2507      	movs	r5, #7
   2c2c2:	e7c7      	b.n	2c254 <interface_socket_allocate+0x54>
   2c2c4:	20025b68 	.word	0x20025b68

0002c2c8 <interface_socket_free>:
   2c2c8:	2808      	cmp	r0, #8
   2c2ca:	d900      	bls.n	2c2ce <interface_socket_free+0x6>
   2c2cc:	4770      	bx	lr
   2c2ce:	b510      	push	{r4, lr}
   2c2d0:	4c07      	ldr	r4, [pc, #28]	; (2c2f0 <interface_socket_free+0x28>)
   2c2d2:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   2c2d6:	eb04 0480 	add.w	r4, r4, r0, lsl #2
   2c2da:	69e0      	ldr	r0, [r4, #28]
   2c2dc:	b108      	cbz	r0, 2c2e2 <interface_socket_free+0x1a>
   2c2de:	f001 ffb9 	bl	2e254 <packet_handler_delete>
   2c2e2:	4620      	mov	r0, r4
   2c2e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2c2e8:	2224      	movs	r2, #36	; 0x24
   2c2ea:	2100      	movs	r1, #0
   2c2ec:	f009 bc2c 	b.w	35b48 <memset>
   2c2f0:	20025b68 	.word	0x20025b68

0002c2f4 <interface_socket_packet_handler_update>:
   2c2f4:	2808      	cmp	r0, #8
   2c2f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2c2fa:	d81e      	bhi.n	2c33a <interface_socket_packet_handler_update+0x46>
   2c2fc:	ea4f 08c0 	mov.w	r8, r0, lsl #3
   2c300:	4e17      	ldr	r6, [pc, #92]	; (2c360 <interface_socket_packet_handler_update+0x6c>)
   2c302:	eb08 0300 	add.w	r3, r8, r0
   2c306:	009b      	lsls	r3, r3, #2
   2c308:	58f4      	ldr	r4, [r6, r3]
   2c30a:	18f5      	adds	r5, r6, r3
   2c30c:	b1ac      	cbz	r4, 2c33a <interface_socket_packet_handler_update+0x46>
   2c30e:	460b      	mov	r3, r1
   2c310:	4604      	mov	r4, r0
   2c312:	4611      	mov	r1, r2
   2c314:	4618      	mov	r0, r3
   2c316:	462a      	mov	r2, r5
   2c318:	f8d5 901c 	ldr.w	r9, [r5, #28]
   2c31c:	f001 ff7a 	bl	2e214 <packet_handler_create>
   2c320:	61e8      	str	r0, [r5, #28]
   2c322:	b1d0      	cbz	r0, 2c35a <interface_socket_packet_handler_update+0x66>
   2c324:	6803      	ldr	r3, [r0, #0]
   2c326:	681b      	ldr	r3, [r3, #0]
   2c328:	4798      	blx	r3
   2c32a:	4607      	mov	r7, r0
   2c32c:	b948      	cbnz	r0, 2c342 <interface_socket_packet_handler_update+0x4e>
   2c32e:	4648      	mov	r0, r9
   2c330:	f001 ff90 	bl	2e254 <packet_handler_delete>
   2c334:	4638      	mov	r0, r7
   2c336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2c33a:	2705      	movs	r7, #5
   2c33c:	4638      	mov	r0, r7
   2c33e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2c342:	69e8      	ldr	r0, [r5, #28]
   2c344:	f001 ff86 	bl	2e254 <packet_handler_delete>
   2c348:	eb08 0004 	add.w	r0, r8, r4
   2c34c:	eb06 0680 	add.w	r6, r6, r0, lsl #2
   2c350:	f8c6 901c 	str.w	r9, [r6, #28]
   2c354:	4638      	mov	r0, r7
   2c356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2c35a:	2704      	movs	r7, #4
   2c35c:	e7f4      	b.n	2c348 <interface_socket_packet_handler_update+0x54>
   2c35e:	bf00      	nop
   2c360:	20025b68 	.word	0x20025b68

0002c364 <interface_socket_wait>:
   2c364:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c366:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   2c36a:	4c0e      	ldr	r4, [pc, #56]	; (2c3a4 <interface_socket_wait+0x40>)
   2c36c:	0080      	lsls	r0, r0, #2
   2c36e:	5825      	ldr	r5, [r4, r0]
   2c370:	b083      	sub	sp, #12
   2c372:	4015      	ands	r5, r2
   2c374:	428d      	cmp	r5, r1
   2c376:	9301      	str	r3, [sp, #4]
   2c378:	4404      	add	r4, r0
   2c37a:	d010      	beq.n	2c39e <interface_socket_wait+0x3a>
   2c37c:	6863      	ldr	r3, [r4, #4]
   2c37e:	b973      	cbnz	r3, 2c39e <interface_socket_wait+0x3a>
   2c380:	460f      	mov	r7, r1
   2c382:	4616      	mov	r6, r2
   2c384:	4625      	mov	r5, r4
   2c386:	e006      	b.n	2c396 <interface_socket_wait+0x32>
   2c388:	686b      	ldr	r3, [r5, #4]
   2c38a:	b943      	cbnz	r3, 2c39e <interface_socket_wait+0x3a>
   2c38c:	a901      	add	r1, sp, #4
   2c38e:	4620      	mov	r0, r4
   2c390:	f7f6 fb20 	bl	229d4 <bsd_os_timedwait>
   2c394:	b920      	cbnz	r0, 2c3a0 <interface_socket_wait+0x3c>
   2c396:	682b      	ldr	r3, [r5, #0]
   2c398:	4033      	ands	r3, r6
   2c39a:	42bb      	cmp	r3, r7
   2c39c:	d1f4      	bne.n	2c388 <interface_socket_wait+0x24>
   2c39e:	2000      	movs	r0, #0
   2c3a0:	b003      	add	sp, #12
   2c3a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2c3a4:	20025b68 	.word	0x20025b68

0002c3a8 <interface_from_internal_id_search>:
   2c3a8:	4b27      	ldr	r3, [pc, #156]	; (2c448 <interface_from_internal_id_search+0xa0>)
   2c3aa:	681a      	ldr	r2, [r3, #0]
   2c3ac:	b112      	cbz	r2, 2c3b4 <interface_from_internal_id_search+0xc>
   2c3ae:	699a      	ldr	r2, [r3, #24]
   2c3b0:	4282      	cmp	r2, r0
   2c3b2:	d039      	beq.n	2c428 <interface_from_internal_id_search+0x80>
   2c3b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   2c3b6:	b112      	cbz	r2, 2c3be <interface_from_internal_id_search+0x16>
   2c3b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   2c3ba:	4282      	cmp	r2, r0
   2c3bc:	d036      	beq.n	2c42c <interface_from_internal_id_search+0x84>
   2c3be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   2c3c0:	b112      	cbz	r2, 2c3c8 <interface_from_internal_id_search+0x20>
   2c3c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   2c3c4:	4282      	cmp	r2, r0
   2c3c6:	d033      	beq.n	2c430 <interface_from_internal_id_search+0x88>
   2c3c8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   2c3ca:	b11a      	cbz	r2, 2c3d4 <interface_from_internal_id_search+0x2c>
   2c3cc:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
   2c3d0:	4282      	cmp	r2, r0
   2c3d2:	d02f      	beq.n	2c434 <interface_from_internal_id_search+0x8c>
   2c3d4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   2c3d8:	b11a      	cbz	r2, 2c3e2 <interface_from_internal_id_search+0x3a>
   2c3da:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
   2c3de:	4282      	cmp	r2, r0
   2c3e0:	d02a      	beq.n	2c438 <interface_from_internal_id_search+0x90>
   2c3e2:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
   2c3e6:	b11a      	cbz	r2, 2c3f0 <interface_from_internal_id_search+0x48>
   2c3e8:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
   2c3ec:	4282      	cmp	r2, r0
   2c3ee:	d025      	beq.n	2c43c <interface_from_internal_id_search+0x94>
   2c3f0:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
   2c3f4:	b11a      	cbz	r2, 2c3fe <interface_from_internal_id_search+0x56>
   2c3f6:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   2c3fa:	4282      	cmp	r2, r0
   2c3fc:	d020      	beq.n	2c440 <interface_from_internal_id_search+0x98>
   2c3fe:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
   2c402:	b11a      	cbz	r2, 2c40c <interface_from_internal_id_search+0x64>
   2c404:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
   2c408:	4282      	cmp	r2, r0
   2c40a:	d01b      	beq.n	2c444 <interface_from_internal_id_search+0x9c>
   2c40c:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   2c410:	b13a      	cbz	r2, 2c422 <interface_from_internal_id_search+0x7a>
   2c412:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
   2c416:	4283      	cmp	r3, r0
   2c418:	bf14      	ite	ne
   2c41a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   2c41e:	2008      	moveq	r0, #8
   2c420:	4770      	bx	lr
   2c422:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c426:	4770      	bx	lr
   2c428:	2000      	movs	r0, #0
   2c42a:	4770      	bx	lr
   2c42c:	2001      	movs	r0, #1
   2c42e:	4770      	bx	lr
   2c430:	2002      	movs	r0, #2
   2c432:	4770      	bx	lr
   2c434:	2003      	movs	r0, #3
   2c436:	4770      	bx	lr
   2c438:	2004      	movs	r0, #4
   2c43a:	4770      	bx	lr
   2c43c:	2005      	movs	r0, #5
   2c43e:	4770      	bx	lr
   2c440:	2006      	movs	r0, #6
   2c442:	4770      	bx	lr
   2c444:	2007      	movs	r0, #7
   2c446:	4770      	bx	lr
   2c448:	20025b68 	.word	0x20025b68

0002c44c <interface_socket_from_handle_get>:
   2c44c:	2808      	cmp	r0, #8
   2c44e:	d807      	bhi.n	2c460 <interface_socket_from_handle_get+0x14>
   2c450:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   2c454:	4b03      	ldr	r3, [pc, #12]	; (2c464 <interface_socket_from_handle_get+0x18>)
   2c456:	0080      	lsls	r0, r0, #2
   2c458:	581a      	ldr	r2, [r3, r0]
   2c45a:	b10a      	cbz	r2, 2c460 <interface_socket_from_handle_get+0x14>
   2c45c:	4418      	add	r0, r3
   2c45e:	4770      	bx	lr
   2c460:	2000      	movs	r0, #0
   2c462:	4770      	bx	lr
   2c464:	20025b68 	.word	0x20025b68

0002c468 <interface_socket_event_get>:
   2c468:	b119      	cbz	r1, 2c472 <interface_socket_event_get+0xa>
   2c46a:	2808      	cmp	r0, #8
   2c46c:	d902      	bls.n	2c474 <interface_socket_event_get+0xc>
   2c46e:	2310      	movs	r3, #16
   2c470:	600b      	str	r3, [r1, #0]
   2c472:	4770      	bx	lr
   2c474:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   2c478:	4b07      	ldr	r3, [pc, #28]	; (2c498 <interface_socket_event_get+0x30>)
   2c47a:	0080      	lsls	r0, r0, #2
   2c47c:	581a      	ldr	r2, [r3, r0]
   2c47e:	2a00      	cmp	r2, #0
   2c480:	d0f5      	beq.n	2c46e <interface_socket_event_get+0x6>
   2c482:	581b      	ldr	r3, [r3, r0]
   2c484:	0c1b      	lsrs	r3, r3, #16
   2c486:	f003 020a 	and.w	r2, r3, #10
   2c48a:	2a0a      	cmp	r2, #10
   2c48c:	bf14      	ite	ne
   2c48e:	f003 030f 	andne.w	r3, r3, #15
   2c492:	f003 030d 	andeq.w	r3, r3, #13
   2c496:	e7eb      	b.n	2c470 <interface_socket_event_get+0x8>
   2c498:	20025b68 	.word	0x20025b68

0002c49c <interface_socket_setopt>:
   2c49c:	2808      	cmp	r0, #8
   2c49e:	b538      	push	{r3, r4, r5, lr}
   2c4a0:	d82d      	bhi.n	2c4fe <interface_socket_setopt+0x62>
   2c4a2:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   2c4a6:	4c1c      	ldr	r4, [pc, #112]	; (2c518 <interface_socket_setopt+0x7c>)
   2c4a8:	0080      	lsls	r0, r0, #2
   2c4aa:	461d      	mov	r5, r3
   2c4ac:	5823      	ldr	r3, [r4, r0]
   2c4ae:	b333      	cbz	r3, 2c4fe <interface_socket_setopt+0x62>
   2c4b0:	2901      	cmp	r1, #1
   2c4b2:	d11e      	bne.n	2c4f2 <interface_socket_setopt+0x56>
   2c4b4:	2a14      	cmp	r2, #20
   2c4b6:	d11c      	bne.n	2c4f2 <interface_socket_setopt+0x56>
   2c4b8:	b1ad      	cbz	r5, 2c4e6 <interface_socket_setopt+0x4a>
   2c4ba:	9b04      	ldr	r3, [sp, #16]
   2c4bc:	2b08      	cmp	r3, #8
   2c4be:	d112      	bne.n	2c4e6 <interface_socket_setopt+0x4a>
   2c4c0:	686a      	ldr	r2, [r5, #4]
   2c4c2:	4b16      	ldr	r3, [pc, #88]	; (2c51c <interface_socket_setopt+0x80>)
   2c4c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   2c4c8:	fba3 3202 	umull	r3, r2, r3, r2
   2c4cc:	2300      	movs	r3, #0
   2c4ce:	682d      	ldr	r5, [r5, #0]
   2c4d0:	0992      	lsrs	r2, r2, #6
   2c4d2:	fbe1 2305 	umlal	r2, r3, r1, r5
   2c4d6:	2b01      	cmp	r3, #1
   2c4d8:	bf08      	it	eq
   2c4da:	2a00      	cmpeq	r2, #0
   2c4dc:	d215      	bcs.n	2c50a <interface_socket_setopt+0x6e>
   2c4de:	4420      	add	r0, r4
   2c4e0:	6202      	str	r2, [r0, #32]
   2c4e2:	2000      	movs	r0, #0
   2c4e4:	bd38      	pop	{r3, r4, r5, pc}
   2c4e6:	2016      	movs	r0, #22
   2c4e8:	f7f6 fb08 	bl	22afc <bsd_os_errno_set>
   2c4ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c4f0:	bd38      	pop	{r3, r4, r5, pc}
   2c4f2:	202a      	movs	r0, #42	; 0x2a
   2c4f4:	f7f6 fb02 	bl	22afc <bsd_os_errno_set>
   2c4f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c4fc:	bd38      	pop	{r3, r4, r5, pc}
   2c4fe:	2009      	movs	r0, #9
   2c500:	f7f6 fafc 	bl	22afc <bsd_os_errno_set>
   2c504:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c508:	bd38      	pop	{r3, r4, r5, pc}
   2c50a:	2025      	movs	r0, #37	; 0x25
   2c50c:	f7f6 faf6 	bl	22afc <bsd_os_errno_set>
   2c510:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c514:	bd38      	pop	{r3, r4, r5, pc}
   2c516:	bf00      	nop
   2c518:	20025b68 	.word	0x20025b68
   2c51c:	10624dd3 	.word	0x10624dd3

0002c520 <interface_socket_getopt>:
   2c520:	b570      	push	{r4, r5, r6, lr}
   2c522:	2808      	cmp	r0, #8
   2c524:	9d04      	ldr	r5, [sp, #16]
   2c526:	d821      	bhi.n	2c56c <interface_socket_getopt+0x4c>
   2c528:	4c13      	ldr	r4, [pc, #76]	; (2c578 <interface_socket_getopt+0x58>)
   2c52a:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   2c52e:	0080      	lsls	r0, r0, #2
   2c530:	5826      	ldr	r6, [r4, r0]
   2c532:	4404      	add	r4, r0
   2c534:	b1d6      	cbz	r6, 2c56c <interface_socket_getopt+0x4c>
   2c536:	2901      	cmp	r1, #1
   2c538:	d112      	bne.n	2c560 <interface_socket_getopt+0x40>
   2c53a:	2a04      	cmp	r2, #4
   2c53c:	d110      	bne.n	2c560 <interface_socket_getopt+0x40>
   2c53e:	b14b      	cbz	r3, 2c554 <interface_socket_getopt+0x34>
   2c540:	b145      	cbz	r5, 2c554 <interface_socket_getopt+0x34>
   2c542:	682a      	ldr	r2, [r5, #0]
   2c544:	2a04      	cmp	r2, #4
   2c546:	d105      	bne.n	2c554 <interface_socket_getopt+0x34>
   2c548:	2200      	movs	r2, #0
   2c54a:	6861      	ldr	r1, [r4, #4]
   2c54c:	4610      	mov	r0, r2
   2c54e:	6019      	str	r1, [r3, #0]
   2c550:	6062      	str	r2, [r4, #4]
   2c552:	bd70      	pop	{r4, r5, r6, pc}
   2c554:	2016      	movs	r0, #22
   2c556:	f7f6 fad1 	bl	22afc <bsd_os_errno_set>
   2c55a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c55e:	bd70      	pop	{r4, r5, r6, pc}
   2c560:	202a      	movs	r0, #42	; 0x2a
   2c562:	f7f6 facb 	bl	22afc <bsd_os_errno_set>
   2c566:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c56a:	bd70      	pop	{r4, r5, r6, pc}
   2c56c:	2009      	movs	r0, #9
   2c56e:	f7f6 fac5 	bl	22afc <bsd_os_errno_set>
   2c572:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c576:	bd70      	pop	{r4, r5, r6, pc}
   2c578:	20025b68 	.word	0x20025b68

0002c57c <interface_socket_fcntl>:
   2c57c:	2808      	cmp	r0, #8
   2c57e:	b510      	push	{r4, lr}
   2c580:	d818      	bhi.n	2c5b4 <interface_socket_fcntl+0x38>
   2c582:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   2c586:	4c11      	ldr	r4, [pc, #68]	; (2c5cc <interface_socket_fcntl+0x50>)
   2c588:	0083      	lsls	r3, r0, #2
   2c58a:	58e0      	ldr	r0, [r4, r3]
   2c58c:	b190      	cbz	r0, 2c5b4 <interface_socket_fcntl+0x38>
   2c58e:	2901      	cmp	r1, #1
   2c590:	d005      	beq.n	2c59e <interface_socket_fcntl+0x22>
   2c592:	2902      	cmp	r1, #2
   2c594:	d114      	bne.n	2c5c0 <interface_socket_fcntl+0x44>
   2c596:	58e0      	ldr	r0, [r4, r3]
   2c598:	f3c0 7000 	ubfx	r0, r0, #28, #1
   2c59c:	bd10      	pop	{r4, pc}
   2c59e:	f012 0001 	ands.w	r0, r2, #1
   2c5a2:	58e2      	ldr	r2, [r4, r3]
   2c5a4:	bf1a      	itte	ne
   2c5a6:	2000      	movne	r0, #0
   2c5a8:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
   2c5ac:	f022 5280 	biceq.w	r2, r2, #268435456	; 0x10000000
   2c5b0:	50e2      	str	r2, [r4, r3]
   2c5b2:	bd10      	pop	{r4, pc}
   2c5b4:	2009      	movs	r0, #9
   2c5b6:	f7f6 faa1 	bl	22afc <bsd_os_errno_set>
   2c5ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c5be:	bd10      	pop	{r4, pc}
   2c5c0:	2016      	movs	r0, #22
   2c5c2:	f7f6 fa9b 	bl	22afc <bsd_os_errno_set>
   2c5c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c5ca:	bd10      	pop	{r4, pc}
   2c5cc:	20025b68 	.word	0x20025b68

0002c5d0 <bsd_os_application_irq_handler>:
   2c5d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c5d4:	4c33      	ldr	r4, [pc, #204]	; (2c6a4 <bsd_os_application_irq_handler+0xd4>)
   2c5d6:	f7f6 fc17 	bl	22e08 <bsd_os_application_irq_clear>
   2c5da:	f04f 0803 	mov.w	r8, #3
   2c5de:	4d32      	ldr	r5, [pc, #200]	; (2c6a8 <bsd_os_application_irq_handler+0xd8>)
   2c5e0:	4f32      	ldr	r7, [pc, #200]	; (2c6ac <bsd_os_application_irq_handler+0xdc>)
   2c5e2:	f104 0680 	add.w	r6, r4, #128	; 0x80
   2c5e6:	e004      	b.n	2c5f2 <bsd_os_application_irq_handler+0x22>
   2c5e8:	2b04      	cmp	r3, #4
   2c5ea:	d006      	beq.n	2c5fa <bsd_os_application_irq_handler+0x2a>
   2c5ec:	3408      	adds	r4, #8
   2c5ee:	42b4      	cmp	r4, r6
   2c5f0:	d03b      	beq.n	2c66a <bsd_os_application_irq_handler+0x9a>
   2c5f2:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   2c5f6:	2b02      	cmp	r3, #2
   2c5f8:	d1f6      	bne.n	2c5e8 <bsd_os_application_irq_handler+0x18>
   2c5fa:	6820      	ldr	r0, [r4, #0]
   2c5fc:	882a      	ldrh	r2, [r5, #0]
   2c5fe:	6803      	ldr	r3, [r0, #0]
   2c600:	b29b      	uxth	r3, r3
   2c602:	429a      	cmp	r2, r3
   2c604:	d033      	beq.n	2c66e <bsd_os_application_irq_handler+0x9e>
   2c606:	8a2a      	ldrh	r2, [r5, #16]
   2c608:	429a      	cmp	r2, r3
   2c60a:	d032      	beq.n	2c672 <bsd_os_application_irq_handler+0xa2>
   2c60c:	8c2a      	ldrh	r2, [r5, #32]
   2c60e:	429a      	cmp	r2, r3
   2c610:	d031      	beq.n	2c676 <bsd_os_application_irq_handler+0xa6>
   2c612:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
   2c614:	429a      	cmp	r2, r3
   2c616:	d030      	beq.n	2c67a <bsd_os_application_irq_handler+0xaa>
   2c618:	f8b5 2040 	ldrh.w	r2, [r5, #64]	; 0x40
   2c61c:	429a      	cmp	r2, r3
   2c61e:	d036      	beq.n	2c68e <bsd_os_application_irq_handler+0xbe>
   2c620:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
   2c624:	429a      	cmp	r2, r3
   2c626:	d034      	beq.n	2c692 <bsd_os_application_irq_handler+0xc2>
   2c628:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
   2c62c:	429a      	cmp	r2, r3
   2c62e:	d032      	beq.n	2c696 <bsd_os_application_irq_handler+0xc6>
   2c630:	f8b5 2070 	ldrh.w	r2, [r5, #112]	; 0x70
   2c634:	429a      	cmp	r2, r3
   2c636:	d030      	beq.n	2c69a <bsd_os_application_irq_handler+0xca>
   2c638:	f8b5 2080 	ldrh.w	r2, [r5, #128]	; 0x80
   2c63c:	429a      	cmp	r2, r3
   2c63e:	d02e      	beq.n	2c69e <bsd_os_application_irq_handler+0xce>
   2c640:	f8b5 2090 	ldrh.w	r2, [r5, #144]	; 0x90
   2c644:	429a      	cmp	r2, r3
   2c646:	bf08      	it	eq
   2c648:	2309      	moveq	r3, #9
   2c64a:	d1cf      	bne.n	2c5ec <bsd_os_application_irq_handler+0x1c>
   2c64c:	eb05 1303 	add.w	r3, r5, r3, lsl #4
   2c650:	685a      	ldr	r2, [r3, #4]
   2c652:	68d9      	ldr	r1, [r3, #12]
   2c654:	4790      	blx	r2
   2c656:	b990      	cbnz	r0, 2c67e <bsd_os_application_irq_handler+0xae>
   2c658:	2201      	movs	r2, #1
   2c65a:	6820      	ldr	r0, [r4, #0]
   2c65c:	f804 2c04 	strb.w	r2, [r4, #-4]
   2c660:	68fb      	ldr	r3, [r7, #12]
   2c662:	3408      	adds	r4, #8
   2c664:	4798      	blx	r3
   2c666:	42b4      	cmp	r4, r6
   2c668:	d1c3      	bne.n	2c5f2 <bsd_os_application_irq_handler+0x22>
   2c66a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2c66e:	2300      	movs	r3, #0
   2c670:	e7ec      	b.n	2c64c <bsd_os_application_irq_handler+0x7c>
   2c672:	2301      	movs	r3, #1
   2c674:	e7ea      	b.n	2c64c <bsd_os_application_irq_handler+0x7c>
   2c676:	2302      	movs	r3, #2
   2c678:	e7e8      	b.n	2c64c <bsd_os_application_irq_handler+0x7c>
   2c67a:	2303      	movs	r3, #3
   2c67c:	e7e6      	b.n	2c64c <bsd_os_application_irq_handler+0x7c>
   2c67e:	2802      	cmp	r0, #2
   2c680:	bf0a      	itet	eq
   2c682:	2304      	moveq	r3, #4
   2c684:	f804 8c04 	strbne.w	r8, [r4, #-4]
   2c688:	f804 3c04 	strbeq.w	r3, [r4, #-4]
   2c68c:	e7ae      	b.n	2c5ec <bsd_os_application_irq_handler+0x1c>
   2c68e:	2304      	movs	r3, #4
   2c690:	e7dc      	b.n	2c64c <bsd_os_application_irq_handler+0x7c>
   2c692:	2305      	movs	r3, #5
   2c694:	e7da      	b.n	2c64c <bsd_os_application_irq_handler+0x7c>
   2c696:	2306      	movs	r3, #6
   2c698:	e7d8      	b.n	2c64c <bsd_os_application_irq_handler+0x7c>
   2c69a:	2307      	movs	r3, #7
   2c69c:	e7d6      	b.n	2c64c <bsd_os_application_irq_handler+0x7c>
   2c69e:	2308      	movs	r3, #8
   2c6a0:	e7d4      	b.n	2c64c <bsd_os_application_irq_handler+0x7c>
   2c6a2:	bf00      	nop
   2c6a4:	20022ca4 	.word	0x20022ca4
   2c6a8:	20022b68 	.word	0x20022b68
   2c6ac:	20022c08 	.word	0x20022c08

0002c6b0 <rpc_framework_init>:
   2c6b0:	b508      	push	{r3, lr}
   2c6b2:	22a0      	movs	r2, #160	; 0xa0
   2c6b4:	2100      	movs	r1, #0
   2c6b6:	4802      	ldr	r0, [pc, #8]	; (2c6c0 <rpc_framework_init+0x10>)
   2c6b8:	f009 fa46 	bl	35b48 <memset>
   2c6bc:	2000      	movs	r0, #0
   2c6be:	bd08      	pop	{r3, pc}
   2c6c0:	20022b68 	.word	0x20022b68

0002c6c4 <rpc_client_register>:
   2c6c4:	8803      	ldrh	r3, [r0, #0]
   2c6c6:	2b00      	cmp	r3, #0
   2c6c8:	d045      	beq.n	2c756 <rpc_client_register+0x92>
   2c6ca:	6842      	ldr	r2, [r0, #4]
   2c6cc:	4601      	mov	r1, r0
   2c6ce:	2a00      	cmp	r2, #0
   2c6d0:	d050      	beq.n	2c774 <rpc_client_register+0xb0>
   2c6d2:	4a30      	ldr	r2, [pc, #192]	; (2c794 <rpc_client_register+0xd0>)
   2c6d4:	8810      	ldrh	r0, [r2, #0]
   2c6d6:	4283      	cmp	r3, r0
   2c6d8:	d03d      	beq.n	2c756 <rpc_client_register+0x92>
   2c6da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2c6de:	8a14      	ldrh	r4, [r2, #16]
   2c6e0:	42a3      	cmp	r3, r4
   2c6e2:	d035      	beq.n	2c750 <rpc_client_register+0x8c>
   2c6e4:	8c15      	ldrh	r5, [r2, #32]
   2c6e6:	42ab      	cmp	r3, r5
   2c6e8:	d032      	beq.n	2c750 <rpc_client_register+0x8c>
   2c6ea:	8e16      	ldrh	r6, [r2, #48]	; 0x30
   2c6ec:	42b3      	cmp	r3, r6
   2c6ee:	d02f      	beq.n	2c750 <rpc_client_register+0x8c>
   2c6f0:	f8b2 7040 	ldrh.w	r7, [r2, #64]	; 0x40
   2c6f4:	42bb      	cmp	r3, r7
   2c6f6:	d02b      	beq.n	2c750 <rpc_client_register+0x8c>
   2c6f8:	f8b2 c050 	ldrh.w	ip, [r2, #80]	; 0x50
   2c6fc:	4563      	cmp	r3, ip
   2c6fe:	d027      	beq.n	2c750 <rpc_client_register+0x8c>
   2c700:	f8b2 e060 	ldrh.w	lr, [r2, #96]	; 0x60
   2c704:	4573      	cmp	r3, lr
   2c706:	d023      	beq.n	2c750 <rpc_client_register+0x8c>
   2c708:	f8b2 8070 	ldrh.w	r8, [r2, #112]	; 0x70
   2c70c:	4543      	cmp	r3, r8
   2c70e:	d01f      	beq.n	2c750 <rpc_client_register+0x8c>
   2c710:	f8b2 9080 	ldrh.w	r9, [r2, #128]	; 0x80
   2c714:	454b      	cmp	r3, r9
   2c716:	d01b      	beq.n	2c750 <rpc_client_register+0x8c>
   2c718:	f8b2 a090 	ldrh.w	sl, [r2, #144]	; 0x90
   2c71c:	4553      	cmp	r3, sl
   2c71e:	d017      	beq.n	2c750 <rpc_client_register+0x8c>
   2c720:	b1e0      	cbz	r0, 2c75c <rpc_client_register+0x98>
   2c722:	b35c      	cbz	r4, 2c77c <rpc_client_register+0xb8>
   2c724:	b365      	cbz	r5, 2c780 <rpc_client_register+0xbc>
   2c726:	b36e      	cbz	r6, 2c784 <rpc_client_register+0xc0>
   2c728:	b377      	cbz	r7, 2c788 <rpc_client_register+0xc4>
   2c72a:	f1bc 0f00 	cmp.w	ip, #0
   2c72e:	d02d      	beq.n	2c78c <rpc_client_register+0xc8>
   2c730:	f1be 0f00 	cmp.w	lr, #0
   2c734:	d020      	beq.n	2c778 <rpc_client_register+0xb4>
   2c736:	f1b8 0f00 	cmp.w	r8, #0
   2c73a:	d029      	beq.n	2c790 <rpc_client_register+0xcc>
   2c73c:	f1b9 0f00 	cmp.w	r9, #0
   2c740:	d00b      	beq.n	2c75a <rpc_client_register+0x96>
   2c742:	2009      	movs	r0, #9
   2c744:	f1ba 0f00 	cmp.w	sl, #0
   2c748:	d008      	beq.n	2c75c <rpc_client_register+0x98>
   2c74a:	2004      	movs	r0, #4
   2c74c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2c750:	2007      	movs	r0, #7
   2c752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2c756:	2007      	movs	r0, #7
   2c758:	4770      	bx	lr
   2c75a:	2008      	movs	r0, #8
   2c75c:	0100      	lsls	r0, r0, #4
   2c75e:	5213      	strh	r3, [r2, r0]
   2c760:	684b      	ldr	r3, [r1, #4]
   2c762:	4402      	add	r2, r0
   2c764:	6053      	str	r3, [r2, #4]
   2c766:	688b      	ldr	r3, [r1, #8]
   2c768:	2000      	movs	r0, #0
   2c76a:	6093      	str	r3, [r2, #8]
   2c76c:	68cb      	ldr	r3, [r1, #12]
   2c76e:	60d3      	str	r3, [r2, #12]
   2c770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2c774:	200e      	movs	r0, #14
   2c776:	4770      	bx	lr
   2c778:	2006      	movs	r0, #6
   2c77a:	e7ef      	b.n	2c75c <rpc_client_register+0x98>
   2c77c:	2001      	movs	r0, #1
   2c77e:	e7ed      	b.n	2c75c <rpc_client_register+0x98>
   2c780:	2002      	movs	r0, #2
   2c782:	e7eb      	b.n	2c75c <rpc_client_register+0x98>
   2c784:	2003      	movs	r0, #3
   2c786:	e7e9      	b.n	2c75c <rpc_client_register+0x98>
   2c788:	2004      	movs	r0, #4
   2c78a:	e7e7      	b.n	2c75c <rpc_client_register+0x98>
   2c78c:	2005      	movs	r0, #5
   2c78e:	e7e5      	b.n	2c75c <rpc_client_register+0x98>
   2c790:	2007      	movs	r0, #7
   2c792:	e7e3      	b.n	2c75c <rpc_client_register+0x98>
   2c794:	20022b68 	.word	0x20022b68

0002c798 <rpc_transport_input>:
   2c798:	b538      	push	{r3, r4, r5, lr}
   2c79a:	4a82      	ldr	r2, [pc, #520]	; (2c9a4 <rpc_transport_input+0x20c>)
   2c79c:	680b      	ldr	r3, [r1, #0]
   2c79e:	8810      	ldrh	r0, [r2, #0]
   2c7a0:	b29b      	uxth	r3, r3
   2c7a2:	4298      	cmp	r0, r3
   2c7a4:	d027      	beq.n	2c7f6 <rpc_transport_input+0x5e>
   2c7a6:	8a10      	ldrh	r0, [r2, #16]
   2c7a8:	4298      	cmp	r0, r3
   2c7aa:	d024      	beq.n	2c7f6 <rpc_transport_input+0x5e>
   2c7ac:	8c10      	ldrh	r0, [r2, #32]
   2c7ae:	4298      	cmp	r0, r3
   2c7b0:	d021      	beq.n	2c7f6 <rpc_transport_input+0x5e>
   2c7b2:	8e10      	ldrh	r0, [r2, #48]	; 0x30
   2c7b4:	4298      	cmp	r0, r3
   2c7b6:	d01e      	beq.n	2c7f6 <rpc_transport_input+0x5e>
   2c7b8:	f8b2 0040 	ldrh.w	r0, [r2, #64]	; 0x40
   2c7bc:	4298      	cmp	r0, r3
   2c7be:	d01a      	beq.n	2c7f6 <rpc_transport_input+0x5e>
   2c7c0:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
   2c7c4:	4298      	cmp	r0, r3
   2c7c6:	d016      	beq.n	2c7f6 <rpc_transport_input+0x5e>
   2c7c8:	f8b2 0060 	ldrh.w	r0, [r2, #96]	; 0x60
   2c7cc:	4298      	cmp	r0, r3
   2c7ce:	d012      	beq.n	2c7f6 <rpc_transport_input+0x5e>
   2c7d0:	f8b2 0070 	ldrh.w	r0, [r2, #112]	; 0x70
   2c7d4:	4298      	cmp	r0, r3
   2c7d6:	d00e      	beq.n	2c7f6 <rpc_transport_input+0x5e>
   2c7d8:	f8b2 0080 	ldrh.w	r0, [r2, #128]	; 0x80
   2c7dc:	4298      	cmp	r0, r3
   2c7de:	d00a      	beq.n	2c7f6 <rpc_transport_input+0x5e>
   2c7e0:	f8b2 2090 	ldrh.w	r2, [r2, #144]	; 0x90
   2c7e4:	429a      	cmp	r2, r3
   2c7e6:	d006      	beq.n	2c7f6 <rpc_transport_input+0x5e>
   2c7e8:	6888      	ldr	r0, [r1, #8]
   2c7ea:	b118      	cbz	r0, 2c7f4 <rpc_transport_input+0x5c>
   2c7ec:	4b6e      	ldr	r3, [pc, #440]	; (2c9a8 <rpc_transport_input+0x210>)
   2c7ee:	691b      	ldr	r3, [r3, #16]
   2c7f0:	4798      	blx	r3
   2c7f2:	2000      	movs	r0, #0
   2c7f4:	bd38      	pop	{r3, r4, r5, pc}
   2c7f6:	6888      	ldr	r0, [r1, #8]
   2c7f8:	2800      	cmp	r0, #0
   2c7fa:	f000 8098 	beq.w	2c92e <rpc_transport_input+0x196>
   2c7fe:	4a6b      	ldr	r2, [pc, #428]	; (2c9ac <rpc_transport_input+0x214>)
   2c800:	6814      	ldr	r4, [r2, #0]
   2c802:	2c00      	cmp	r4, #0
   2c804:	d03c      	beq.n	2c880 <rpc_transport_input+0xe8>
   2c806:	6894      	ldr	r4, [r2, #8]
   2c808:	2c00      	cmp	r4, #0
   2c80a:	f000 809a 	beq.w	2c942 <rpc_transport_input+0x1aa>
   2c80e:	6914      	ldr	r4, [r2, #16]
   2c810:	2c00      	cmp	r4, #0
   2c812:	f000 809a 	beq.w	2c94a <rpc_transport_input+0x1b2>
   2c816:	6994      	ldr	r4, [r2, #24]
   2c818:	2c00      	cmp	r4, #0
   2c81a:	f000 809a 	beq.w	2c952 <rpc_transport_input+0x1ba>
   2c81e:	6a14      	ldr	r4, [r2, #32]
   2c820:	2c00      	cmp	r4, #0
   2c822:	f000 809a 	beq.w	2c95a <rpc_transport_input+0x1c2>
   2c826:	6a94      	ldr	r4, [r2, #40]	; 0x28
   2c828:	2c00      	cmp	r4, #0
   2c82a:	f000 8084 	beq.w	2c936 <rpc_transport_input+0x19e>
   2c82e:	6b14      	ldr	r4, [r2, #48]	; 0x30
   2c830:	2c00      	cmp	r4, #0
   2c832:	f000 8098 	beq.w	2c966 <rpc_transport_input+0x1ce>
   2c836:	6b94      	ldr	r4, [r2, #56]	; 0x38
   2c838:	2c00      	cmp	r4, #0
   2c83a:	f000 8096 	beq.w	2c96a <rpc_transport_input+0x1d2>
   2c83e:	6c14      	ldr	r4, [r2, #64]	; 0x40
   2c840:	2c00      	cmp	r4, #0
   2c842:	f000 8096 	beq.w	2c972 <rpc_transport_input+0x1da>
   2c846:	6c94      	ldr	r4, [r2, #72]	; 0x48
   2c848:	2c00      	cmp	r4, #0
   2c84a:	f000 8096 	beq.w	2c97a <rpc_transport_input+0x1e2>
   2c84e:	6d14      	ldr	r4, [r2, #80]	; 0x50
   2c850:	2c00      	cmp	r4, #0
   2c852:	f000 8096 	beq.w	2c982 <rpc_transport_input+0x1ea>
   2c856:	6d94      	ldr	r4, [r2, #88]	; 0x58
   2c858:	2c00      	cmp	r4, #0
   2c85a:	f000 8098 	beq.w	2c98e <rpc_transport_input+0x1f6>
   2c85e:	6e14      	ldr	r4, [r2, #96]	; 0x60
   2c860:	2c00      	cmp	r4, #0
   2c862:	f000 8098 	beq.w	2c996 <rpc_transport_input+0x1fe>
   2c866:	6e94      	ldr	r4, [r2, #104]	; 0x68
   2c868:	2c00      	cmp	r4, #0
   2c86a:	f000 8096 	beq.w	2c99a <rpc_transport_input+0x202>
   2c86e:	6f14      	ldr	r4, [r2, #112]	; 0x70
   2c870:	2c00      	cmp	r4, #0
   2c872:	f000 8094 	beq.w	2c99e <rpc_transport_input+0x206>
   2c876:	6f94      	ldr	r4, [r2, #120]	; 0x78
   2c878:	b10c      	cbz	r4, 2c87e <rpc_transport_input+0xe6>
   2c87a:	2001      	movs	r0, #1
   2c87c:	bd38      	pop	{r3, r4, r5, pc}
   2c87e:	240f      	movs	r4, #15
   2c880:	eb02 05c4 	add.w	r5, r2, r4, lsl #3
   2c884:	f842 0034 	str.w	r0, [r2, r4, lsl #3]
   2c888:	80ab      	strh	r3, [r5, #4]
   2c88a:	4b49      	ldr	r3, [pc, #292]	; (2c9b0 <rpc_transport_input+0x218>)
   2c88c:	781a      	ldrb	r2, [r3, #0]
   2c88e:	2a01      	cmp	r2, #1
   2c890:	d053      	beq.n	2c93a <rpc_transport_input+0x1a2>
   2c892:	7a1a      	ldrb	r2, [r3, #8]
   2c894:	2a01      	cmp	r2, #1
   2c896:	d041      	beq.n	2c91c <rpc_transport_input+0x184>
   2c898:	7c1a      	ldrb	r2, [r3, #16]
   2c89a:	2a01      	cmp	r2, #1
   2c89c:	d04f      	beq.n	2c93e <rpc_transport_input+0x1a6>
   2c89e:	7e1a      	ldrb	r2, [r3, #24]
   2c8a0:	2a01      	cmp	r2, #1
   2c8a2:	d050      	beq.n	2c946 <rpc_transport_input+0x1ae>
   2c8a4:	f893 2020 	ldrb.w	r2, [r3, #32]
   2c8a8:	2a01      	cmp	r2, #1
   2c8aa:	d050      	beq.n	2c94e <rpc_transport_input+0x1b6>
   2c8ac:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   2c8b0:	2a01      	cmp	r2, #1
   2c8b2:	d050      	beq.n	2c956 <rpc_transport_input+0x1be>
   2c8b4:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   2c8b8:	2a01      	cmp	r2, #1
   2c8ba:	d03a      	beq.n	2c932 <rpc_transport_input+0x19a>
   2c8bc:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   2c8c0:	2a01      	cmp	r2, #1
   2c8c2:	d04c      	beq.n	2c95e <rpc_transport_input+0x1c6>
   2c8c4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   2c8c8:	2a01      	cmp	r2, #1
   2c8ca:	d04a      	beq.n	2c962 <rpc_transport_input+0x1ca>
   2c8cc:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
   2c8d0:	2a01      	cmp	r2, #1
   2c8d2:	d04c      	beq.n	2c96e <rpc_transport_input+0x1d6>
   2c8d4:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   2c8d8:	2a01      	cmp	r2, #1
   2c8da:	d04c      	beq.n	2c976 <rpc_transport_input+0x1de>
   2c8dc:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
   2c8e0:	2a01      	cmp	r2, #1
   2c8e2:	d04c      	beq.n	2c97e <rpc_transport_input+0x1e6>
   2c8e4:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   2c8e8:	2a01      	cmp	r2, #1
   2c8ea:	d04c      	beq.n	2c986 <rpc_transport_input+0x1ee>
   2c8ec:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
   2c8f0:	2a01      	cmp	r2, #1
   2c8f2:	d04a      	beq.n	2c98a <rpc_transport_input+0x1f2>
   2c8f4:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
   2c8f8:	2a01      	cmp	r2, #1
   2c8fa:	d04a      	beq.n	2c992 <rpc_transport_input+0x1fa>
   2c8fc:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   2c900:	2a01      	cmp	r2, #1
   2c902:	d00a      	beq.n	2c91a <rpc_transport_input+0x182>
   2c904:	2c10      	cmp	r4, #16
   2c906:	d0b8      	beq.n	2c87a <rpc_transport_input+0xe2>
   2c908:	2200      	movs	r2, #0
   2c90a:	4b28      	ldr	r3, [pc, #160]	; (2c9ac <rpc_transport_input+0x214>)
   2c90c:	2001      	movs	r0, #1
   2c90e:	eb03 01c4 	add.w	r1, r3, r4, lsl #3
   2c912:	808a      	strh	r2, [r1, #4]
   2c914:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
   2c918:	bd38      	pop	{r3, r4, r5, pc}
   2c91a:	220f      	movs	r2, #15
   2c91c:	2402      	movs	r4, #2
   2c91e:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
   2c922:	f803 4032 	strb.w	r4, [r3, r2, lsl #3]
   2c926:	6041      	str	r1, [r0, #4]
   2c928:	f7f6 fa66 	bl	22df8 <bsd_os_application_irq_set>
   2c92c:	e7a5      	b.n	2c87a <rpc_transport_input+0xe2>
   2c92e:	2410      	movs	r4, #16
   2c930:	e7ab      	b.n	2c88a <rpc_transport_input+0xf2>
   2c932:	2206      	movs	r2, #6
   2c934:	e7f2      	b.n	2c91c <rpc_transport_input+0x184>
   2c936:	2405      	movs	r4, #5
   2c938:	e7a2      	b.n	2c880 <rpc_transport_input+0xe8>
   2c93a:	2200      	movs	r2, #0
   2c93c:	e7ee      	b.n	2c91c <rpc_transport_input+0x184>
   2c93e:	2202      	movs	r2, #2
   2c940:	e7ec      	b.n	2c91c <rpc_transport_input+0x184>
   2c942:	2401      	movs	r4, #1
   2c944:	e79c      	b.n	2c880 <rpc_transport_input+0xe8>
   2c946:	2203      	movs	r2, #3
   2c948:	e7e8      	b.n	2c91c <rpc_transport_input+0x184>
   2c94a:	2402      	movs	r4, #2
   2c94c:	e798      	b.n	2c880 <rpc_transport_input+0xe8>
   2c94e:	2204      	movs	r2, #4
   2c950:	e7e4      	b.n	2c91c <rpc_transport_input+0x184>
   2c952:	2403      	movs	r4, #3
   2c954:	e794      	b.n	2c880 <rpc_transport_input+0xe8>
   2c956:	2205      	movs	r2, #5
   2c958:	e7e0      	b.n	2c91c <rpc_transport_input+0x184>
   2c95a:	2404      	movs	r4, #4
   2c95c:	e790      	b.n	2c880 <rpc_transport_input+0xe8>
   2c95e:	2207      	movs	r2, #7
   2c960:	e7dc      	b.n	2c91c <rpc_transport_input+0x184>
   2c962:	2208      	movs	r2, #8
   2c964:	e7da      	b.n	2c91c <rpc_transport_input+0x184>
   2c966:	2406      	movs	r4, #6
   2c968:	e78a      	b.n	2c880 <rpc_transport_input+0xe8>
   2c96a:	2407      	movs	r4, #7
   2c96c:	e788      	b.n	2c880 <rpc_transport_input+0xe8>
   2c96e:	2209      	movs	r2, #9
   2c970:	e7d4      	b.n	2c91c <rpc_transport_input+0x184>
   2c972:	2408      	movs	r4, #8
   2c974:	e784      	b.n	2c880 <rpc_transport_input+0xe8>
   2c976:	220a      	movs	r2, #10
   2c978:	e7d0      	b.n	2c91c <rpc_transport_input+0x184>
   2c97a:	2409      	movs	r4, #9
   2c97c:	e780      	b.n	2c880 <rpc_transport_input+0xe8>
   2c97e:	220b      	movs	r2, #11
   2c980:	e7cc      	b.n	2c91c <rpc_transport_input+0x184>
   2c982:	240a      	movs	r4, #10
   2c984:	e77c      	b.n	2c880 <rpc_transport_input+0xe8>
   2c986:	220c      	movs	r2, #12
   2c988:	e7c8      	b.n	2c91c <rpc_transport_input+0x184>
   2c98a:	220d      	movs	r2, #13
   2c98c:	e7c6      	b.n	2c91c <rpc_transport_input+0x184>
   2c98e:	240b      	movs	r4, #11
   2c990:	e776      	b.n	2c880 <rpc_transport_input+0xe8>
   2c992:	220e      	movs	r2, #14
   2c994:	e7c2      	b.n	2c91c <rpc_transport_input+0x184>
   2c996:	240c      	movs	r4, #12
   2c998:	e772      	b.n	2c880 <rpc_transport_input+0xe8>
   2c99a:	240d      	movs	r4, #13
   2c99c:	e770      	b.n	2c880 <rpc_transport_input+0xe8>
   2c99e:	240e      	movs	r4, #14
   2c9a0:	e76e      	b.n	2c880 <rpc_transport_input+0xe8>
   2c9a2:	bf00      	nop
   2c9a4:	20022b68 	.word	0x20022b68
   2c9a8:	20022c08 	.word	0x20022c08
   2c9ac:	20022c20 	.word	0x20022c20
   2c9b0:	20022ca0 	.word	0x20022ca0

0002c9b4 <rpc_transport_register>:
   2c9b4:	b4f0      	push	{r4, r5, r6, r7}
   2c9b6:	2900      	cmp	r1, #0
   2c9b8:	d052      	beq.n	2ca60 <rpc_transport_register+0xac>
   2c9ba:	2800      	cmp	r0, #0
   2c9bc:	d050      	beq.n	2ca60 <rpc_transport_register+0xac>
   2c9be:	6883      	ldr	r3, [r0, #8]
   2c9c0:	2b00      	cmp	r3, #0
   2c9c2:	d04d      	beq.n	2ca60 <rpc_transport_register+0xac>
   2c9c4:	6903      	ldr	r3, [r0, #16]
   2c9c6:	2b00      	cmp	r3, #0
   2c9c8:	d04a      	beq.n	2ca60 <rpc_transport_register+0xac>
   2c9ca:	6843      	ldr	r3, [r0, #4]
   2c9cc:	2b00      	cmp	r3, #0
   2c9ce:	d047      	beq.n	2ca60 <rpc_transport_register+0xac>
   2c9d0:	68c3      	ldr	r3, [r0, #12]
   2c9d2:	2b00      	cmp	r3, #0
   2c9d4:	d044      	beq.n	2ca60 <rpc_transport_register+0xac>
   2c9d6:	6803      	ldr	r3, [r0, #0]
   2c9d8:	2b00      	cmp	r3, #0
   2c9da:	d041      	beq.n	2ca60 <rpc_transport_register+0xac>
   2c9dc:	6943      	ldr	r3, [r0, #20]
   2c9de:	2b00      	cmp	r3, #0
   2c9e0:	d03e      	beq.n	2ca60 <rpc_transport_register+0xac>
   2c9e2:	2601      	movs	r6, #1
   2c9e4:	2500      	movs	r5, #0
   2c9e6:	4604      	mov	r4, r0
   2c9e8:	460f      	mov	r7, r1
   2c9ea:	4a1f      	ldr	r2, [pc, #124]	; (2ca68 <rpc_transport_register+0xb4>)
   2c9ec:	4b1f      	ldr	r3, [pc, #124]	; (2ca6c <rpc_transport_register+0xb8>)
   2c9ee:	f8df c080 	ldr.w	ip, [pc, #128]	; 2ca70 <rpc_transport_register+0xbc>
   2c9f2:	7416      	strb	r6, [r2, #16]
   2c9f4:	7616      	strb	r6, [r2, #24]
   2c9f6:	f882 6020 	strb.w	r6, [r2, #32]
   2c9fa:	f882 6028 	strb.w	r6, [r2, #40]	; 0x28
   2c9fe:	f882 6030 	strb.w	r6, [r2, #48]	; 0x30
   2ca02:	f882 6038 	strb.w	r6, [r2, #56]	; 0x38
   2ca06:	f882 6040 	strb.w	r6, [r2, #64]	; 0x40
   2ca0a:	f882 6048 	strb.w	r6, [r2, #72]	; 0x48
   2ca0e:	f882 6050 	strb.w	r6, [r2, #80]	; 0x50
   2ca12:	f882 6058 	strb.w	r6, [r2, #88]	; 0x58
   2ca16:	f882 6060 	strb.w	r6, [r2, #96]	; 0x60
   2ca1a:	f882 6068 	strb.w	r6, [r2, #104]	; 0x68
   2ca1e:	f882 6070 	strb.w	r6, [r2, #112]	; 0x70
   2ca22:	f882 6078 	strb.w	r6, [r2, #120]	; 0x78
   2ca26:	611d      	str	r5, [r3, #16]
   2ca28:	619d      	str	r5, [r3, #24]
   2ca2a:	621d      	str	r5, [r3, #32]
   2ca2c:	629d      	str	r5, [r3, #40]	; 0x28
   2ca2e:	631d      	str	r5, [r3, #48]	; 0x30
   2ca30:	639d      	str	r5, [r3, #56]	; 0x38
   2ca32:	641d      	str	r5, [r3, #64]	; 0x40
   2ca34:	649d      	str	r5, [r3, #72]	; 0x48
   2ca36:	651d      	str	r5, [r3, #80]	; 0x50
   2ca38:	659d      	str	r5, [r3, #88]	; 0x58
   2ca3a:	661d      	str	r5, [r3, #96]	; 0x60
   2ca3c:	669d      	str	r5, [r3, #104]	; 0x68
   2ca3e:	671d      	str	r5, [r3, #112]	; 0x70
   2ca40:	679d      	str	r5, [r3, #120]	; 0x78
   2ca42:	7016      	strb	r6, [r2, #0]
   2ca44:	7216      	strb	r6, [r2, #8]
   2ca46:	601d      	str	r5, [r3, #0]
   2ca48:	609d      	str	r5, [r3, #8]
   2ca4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   2ca4c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   2ca50:	e894 0003 	ldmia.w	r4, {r0, r1}
   2ca54:	e88c 0003 	stmia.w	ip, {r0, r1}
   2ca58:	603e      	str	r6, [r7, #0]
   2ca5a:	4628      	mov	r0, r5
   2ca5c:	bcf0      	pop	{r4, r5, r6, r7}
   2ca5e:	4770      	bx	lr
   2ca60:	250e      	movs	r5, #14
   2ca62:	4628      	mov	r0, r5
   2ca64:	bcf0      	pop	{r4, r5, r6, r7}
   2ca66:	4770      	bx	lr
   2ca68:	20022ca0 	.word	0x20022ca0
   2ca6c:	20022c20 	.word	0x20022c20
   2ca70:	20022c08 	.word	0x20022c08

0002ca74 <rpc_transport_unregister>:
   2ca74:	2800      	cmp	r0, #0
   2ca76:	d03a      	beq.n	2caee <rpc_transport_unregister+0x7a>
   2ca78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2ca7c:	4680      	mov	r8, r0
   2ca7e:	4c1d      	ldr	r4, [pc, #116]	; (2caf4 <rpc_transport_unregister+0x80>)
   2ca80:	f104 05a0 	add.w	r5, r4, #160	; 0xa0
   2ca84:	68a3      	ldr	r3, [r4, #8]
   2ca86:	3410      	adds	r4, #16
   2ca88:	b103      	cbz	r3, 2ca8c <rpc_transport_unregister+0x18>
   2ca8a:	4798      	blx	r3
   2ca8c:	42ac      	cmp	r4, r5
   2ca8e:	d1f9      	bne.n	2ca84 <rpc_transport_unregister+0x10>
   2ca90:	f04f 0901 	mov.w	r9, #1
   2ca94:	2600      	movs	r6, #0
   2ca96:	4c18      	ldr	r4, [pc, #96]	; (2caf8 <rpc_transport_unregister+0x84>)
   2ca98:	4d18      	ldr	r5, [pc, #96]	; (2cafc <rpc_transport_unregister+0x88>)
   2ca9a:	f8df a064 	ldr.w	sl, [pc, #100]	; 2cb00 <rpc_transport_unregister+0x8c>
   2ca9e:	f104 0780 	add.w	r7, r4, #128	; 0x80
   2caa2:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   2caa6:	2b01      	cmp	r3, #1
   2caa8:	d005      	beq.n	2cab6 <rpc_transport_unregister+0x42>
   2caaa:	f8da 300c 	ldr.w	r3, [sl, #12]
   2caae:	6820      	ldr	r0, [r4, #0]
   2cab0:	4798      	blx	r3
   2cab2:	f804 9c04 	strb.w	r9, [r4, #-4]
   2cab6:	f855 0c04 	ldr.w	r0, [r5, #-4]
   2caba:	3408      	adds	r4, #8
   2cabc:	b128      	cbz	r0, 2caca <rpc_transport_unregister+0x56>
   2cabe:	f8da 3010 	ldr.w	r3, [sl, #16]
   2cac2:	4798      	blx	r3
   2cac4:	802e      	strh	r6, [r5, #0]
   2cac6:	f845 6c04 	str.w	r6, [r5, #-4]
   2caca:	42bc      	cmp	r4, r7
   2cacc:	f105 0508 	add.w	r5, r5, #8
   2cad0:	d1e7      	bne.n	2caa2 <rpc_transport_unregister+0x2e>
   2cad2:	f8d8 0000 	ldr.w	r0, [r8]
   2cad6:	2218      	movs	r2, #24
   2cad8:	3801      	subs	r0, #1
   2cada:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   2cade:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
   2cae2:	2100      	movs	r1, #0
   2cae4:	f009 f830 	bl	35b48 <memset>
   2cae8:	2000      	movs	r0, #0
   2caea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2caee:	200e      	movs	r0, #14
   2caf0:	4770      	bx	lr
   2caf2:	bf00      	nop
   2caf4:	20022b68 	.word	0x20022b68
   2caf8:	20022ca4 	.word	0x20022ca4
   2cafc:	20022c24 	.word	0x20022c24
   2cb00:	20022c08 	.word	0x20022c08

0002cb04 <rpc_message_send>:
   2cb04:	b168      	cbz	r0, 2cb22 <rpc_message_send+0x1e>
   2cb06:	b171      	cbz	r1, 2cb26 <rpc_message_send+0x22>
   2cb08:	4a09      	ldr	r2, [pc, #36]	; (2cb30 <rpc_message_send+0x2c>)
   2cb0a:	6853      	ldr	r3, [r2, #4]
   2cb0c:	b16b      	cbz	r3, 2cb2a <rpc_message_send+0x26>
   2cb0e:	684b      	ldr	r3, [r1, #4]
   2cb10:	8008      	strh	r0, [r1, #0]
   2cb12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   2cb16:	f043 0302 	orr.w	r3, r3, #2
   2cb1a:	6812      	ldr	r2, [r2, #0]
   2cb1c:	604b      	str	r3, [r1, #4]
   2cb1e:	4608      	mov	r0, r1
   2cb20:	4710      	bx	r2
   2cb22:	2007      	movs	r0, #7
   2cb24:	4770      	bx	lr
   2cb26:	200e      	movs	r0, #14
   2cb28:	4770      	bx	lr
   2cb2a:	2008      	movs	r0, #8
   2cb2c:	4770      	bx	lr
   2cb2e:	bf00      	nop
   2cb30:	20022c08 	.word	0x20022c08

0002cb34 <rpc_message_alloc>:
   2cb34:	b35a      	cbz	r2, 2cb8e <rpc_message_alloc+0x5a>
   2cb36:	b330      	cbz	r0, 2cb86 <rpc_message_alloc+0x52>
   2cb38:	2300      	movs	r3, #0
   2cb3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2cb3e:	4f15      	ldr	r7, [pc, #84]	; (2cb94 <rpc_message_alloc+0x60>)
   2cb40:	6013      	str	r3, [r2, #0]
   2cb42:	687b      	ldr	r3, [r7, #4]
   2cb44:	b30b      	cbz	r3, 2cb8a <rpc_message_alloc+0x56>
   2cb46:	4615      	mov	r5, r2
   2cb48:	460c      	mov	r4, r1
   2cb4a:	4606      	mov	r6, r0
   2cb4c:	b959      	cbnz	r1, 2cb66 <rpc_message_alloc+0x32>
   2cb4e:	4798      	blx	r3
   2cb50:	4603      	mov	r3, r0
   2cb52:	b1a8      	cbz	r0, 2cb80 <rpc_message_alloc+0x4c>
   2cb54:	46a0      	mov	r8, r4
   2cb56:	60dc      	str	r4, [r3, #12]
   2cb58:	f8c3 8008 	str.w	r8, [r3, #8]
   2cb5c:	801e      	strh	r6, [r3, #0]
   2cb5e:	602b      	str	r3, [r5, #0]
   2cb60:	2000      	movs	r0, #0
   2cb62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2cb66:	68bb      	ldr	r3, [r7, #8]
   2cb68:	4608      	mov	r0, r1
   2cb6a:	4798      	blx	r3
   2cb6c:	4680      	mov	r8, r0
   2cb6e:	b138      	cbz	r0, 2cb80 <rpc_message_alloc+0x4c>
   2cb70:	687b      	ldr	r3, [r7, #4]
   2cb72:	4798      	blx	r3
   2cb74:	4603      	mov	r3, r0
   2cb76:	2800      	cmp	r0, #0
   2cb78:	d1ed      	bne.n	2cb56 <rpc_message_alloc+0x22>
   2cb7a:	693b      	ldr	r3, [r7, #16]
   2cb7c:	4640      	mov	r0, r8
   2cb7e:	4798      	blx	r3
   2cb80:	2004      	movs	r0, #4
   2cb82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2cb86:	2007      	movs	r0, #7
   2cb88:	4770      	bx	lr
   2cb8a:	2008      	movs	r0, #8
   2cb8c:	e7f9      	b.n	2cb82 <rpc_message_alloc+0x4e>
   2cb8e:	200e      	movs	r0, #14
   2cb90:	4770      	bx	lr
   2cb92:	bf00      	nop
   2cb94:	20022c08 	.word	0x20022c08

0002cb98 <rpc_message_free>:
   2cb98:	2800      	cmp	r0, #0
   2cb9a:	f000 808c 	beq.w	2ccb6 <rpc_message_free+0x11e>
   2cb9e:	2900      	cmp	r1, #0
   2cba0:	f000 80e9 	beq.w	2cd76 <rpc_message_free+0x1de>
   2cba4:	b538      	push	{r3, r4, r5, lr}
   2cba6:	4a83      	ldr	r2, [pc, #524]	; (2cdb4 <rpc_message_free+0x21c>)
   2cba8:	6853      	ldr	r3, [r2, #4]
   2cbaa:	2b00      	cmp	r3, #0
   2cbac:	f000 8085 	beq.w	2ccba <rpc_message_free+0x122>
   2cbb0:	4c81      	ldr	r4, [pc, #516]	; (2cdb8 <rpc_message_free+0x220>)
   2cbb2:	4608      	mov	r0, r1
   2cbb4:	6863      	ldr	r3, [r4, #4]
   2cbb6:	4299      	cmp	r1, r3
   2cbb8:	f000 8085 	beq.w	2ccc6 <rpc_message_free+0x12e>
   2cbbc:	68e3      	ldr	r3, [r4, #12]
   2cbbe:	4298      	cmp	r0, r3
   2cbc0:	f000 808e 	beq.w	2cce0 <rpc_message_free+0x148>
   2cbc4:	6963      	ldr	r3, [r4, #20]
   2cbc6:	4298      	cmp	r0, r3
   2cbc8:	f000 8090 	beq.w	2ccec <rpc_message_free+0x154>
   2cbcc:	69e3      	ldr	r3, [r4, #28]
   2cbce:	4298      	cmp	r0, r3
   2cbd0:	f000 8092 	beq.w	2ccf8 <rpc_message_free+0x160>
   2cbd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2cbd6:	4298      	cmp	r0, r3
   2cbd8:	f000 8095 	beq.w	2cd06 <rpc_message_free+0x16e>
   2cbdc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2cbde:	4298      	cmp	r0, r3
   2cbe0:	f000 8098 	beq.w	2cd14 <rpc_message_free+0x17c>
   2cbe4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2cbe6:	4298      	cmp	r0, r3
   2cbe8:	f000 809b 	beq.w	2cd22 <rpc_message_free+0x18a>
   2cbec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   2cbee:	4298      	cmp	r0, r3
   2cbf0:	f000 809e 	beq.w	2cd30 <rpc_message_free+0x198>
   2cbf4:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2cbf6:	4298      	cmp	r0, r3
   2cbf8:	f000 80a1 	beq.w	2cd3e <rpc_message_free+0x1a6>
   2cbfc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   2cbfe:	4298      	cmp	r0, r3
   2cc00:	f000 80a4 	beq.w	2cd4c <rpc_message_free+0x1b4>
   2cc04:	6d63      	ldr	r3, [r4, #84]	; 0x54
   2cc06:	4298      	cmp	r0, r3
   2cc08:	f000 80a7 	beq.w	2cd5a <rpc_message_free+0x1c2>
   2cc0c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   2cc0e:	4298      	cmp	r0, r3
   2cc10:	f000 80aa 	beq.w	2cd68 <rpc_message_free+0x1d0>
   2cc14:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2cc16:	4298      	cmp	r0, r3
   2cc18:	f000 80af 	beq.w	2cd7a <rpc_message_free+0x1e2>
   2cc1c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   2cc1e:	4298      	cmp	r0, r3
   2cc20:	f000 80b2 	beq.w	2cd88 <rpc_message_free+0x1f0>
   2cc24:	6f63      	ldr	r3, [r4, #116]	; 0x74
   2cc26:	4298      	cmp	r0, r3
   2cc28:	f000 80b5 	beq.w	2cd96 <rpc_message_free+0x1fe>
   2cc2c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   2cc2e:	4283      	cmp	r3, r0
   2cc30:	f000 80b8 	beq.w	2cda4 <rpc_message_free+0x20c>
   2cc34:	68d3      	ldr	r3, [r2, #12]
   2cc36:	4798      	blx	r3
   2cc38:	7823      	ldrb	r3, [r4, #0]
   2cc3a:	2b04      	cmp	r3, #4
   2cc3c:	d03f      	beq.n	2ccbe <rpc_message_free+0x126>
   2cc3e:	7a23      	ldrb	r3, [r4, #8]
   2cc40:	2b04      	cmp	r3, #4
   2cc42:	d03c      	beq.n	2ccbe <rpc_message_free+0x126>
   2cc44:	7c23      	ldrb	r3, [r4, #16]
   2cc46:	2b04      	cmp	r3, #4
   2cc48:	d039      	beq.n	2ccbe <rpc_message_free+0x126>
   2cc4a:	7e23      	ldrb	r3, [r4, #24]
   2cc4c:	2b04      	cmp	r3, #4
   2cc4e:	d036      	beq.n	2ccbe <rpc_message_free+0x126>
   2cc50:	f894 3020 	ldrb.w	r3, [r4, #32]
   2cc54:	2b04      	cmp	r3, #4
   2cc56:	d032      	beq.n	2ccbe <rpc_message_free+0x126>
   2cc58:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   2cc5c:	2b04      	cmp	r3, #4
   2cc5e:	d02e      	beq.n	2ccbe <rpc_message_free+0x126>
   2cc60:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   2cc64:	2b04      	cmp	r3, #4
   2cc66:	d02a      	beq.n	2ccbe <rpc_message_free+0x126>
   2cc68:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   2cc6c:	2b04      	cmp	r3, #4
   2cc6e:	d026      	beq.n	2ccbe <rpc_message_free+0x126>
   2cc70:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   2cc74:	2b04      	cmp	r3, #4
   2cc76:	d022      	beq.n	2ccbe <rpc_message_free+0x126>
   2cc78:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   2cc7c:	2b04      	cmp	r3, #4
   2cc7e:	d01e      	beq.n	2ccbe <rpc_message_free+0x126>
   2cc80:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   2cc84:	2b04      	cmp	r3, #4
   2cc86:	d01a      	beq.n	2ccbe <rpc_message_free+0x126>
   2cc88:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
   2cc8c:	2b04      	cmp	r3, #4
   2cc8e:	d016      	beq.n	2ccbe <rpc_message_free+0x126>
   2cc90:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   2cc94:	2b04      	cmp	r3, #4
   2cc96:	d012      	beq.n	2ccbe <rpc_message_free+0x126>
   2cc98:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
   2cc9c:	2b04      	cmp	r3, #4
   2cc9e:	d00e      	beq.n	2ccbe <rpc_message_free+0x126>
   2cca0:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   2cca4:	2b04      	cmp	r3, #4
   2cca6:	d00a      	beq.n	2ccbe <rpc_message_free+0x126>
   2cca8:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   2ccac:	2b04      	cmp	r3, #4
   2ccae:	bf18      	it	ne
   2ccb0:	2000      	movne	r0, #0
   2ccb2:	d004      	beq.n	2ccbe <rpc_message_free+0x126>
   2ccb4:	bd38      	pop	{r3, r4, r5, pc}
   2ccb6:	2007      	movs	r0, #7
   2ccb8:	4770      	bx	lr
   2ccba:	2008      	movs	r0, #8
   2ccbc:	bd38      	pop	{r3, r4, r5, pc}
   2ccbe:	f7f6 f89b 	bl	22df8 <bsd_os_application_irq_set>
   2ccc2:	2000      	movs	r0, #0
   2ccc4:	bd38      	pop	{r3, r4, r5, pc}
   2ccc6:	7821      	ldrb	r1, [r4, #0]
   2ccc8:	2903      	cmp	r1, #3
   2ccca:	f47f af77 	bne.w	2cbbc <rpc_message_free+0x24>
   2ccce:	2100      	movs	r1, #0
   2ccd0:	2501      	movs	r5, #1
   2ccd2:	4618      	mov	r0, r3
   2ccd4:	68d2      	ldr	r2, [r2, #12]
   2ccd6:	f804 5031 	strb.w	r5, [r4, r1, lsl #3]
   2ccda:	4790      	blx	r2
   2ccdc:	2000      	movs	r0, #0
   2ccde:	bd38      	pop	{r3, r4, r5, pc}
   2cce0:	7a21      	ldrb	r1, [r4, #8]
   2cce2:	2903      	cmp	r1, #3
   2cce4:	f47f af6e 	bne.w	2cbc4 <rpc_message_free+0x2c>
   2cce8:	2101      	movs	r1, #1
   2ccea:	e7f1      	b.n	2ccd0 <rpc_message_free+0x138>
   2ccec:	7c21      	ldrb	r1, [r4, #16]
   2ccee:	2903      	cmp	r1, #3
   2ccf0:	f47f af6c 	bne.w	2cbcc <rpc_message_free+0x34>
   2ccf4:	2102      	movs	r1, #2
   2ccf6:	e7eb      	b.n	2ccd0 <rpc_message_free+0x138>
   2ccf8:	7e21      	ldrb	r1, [r4, #24]
   2ccfa:	2903      	cmp	r1, #3
   2ccfc:	d0e8      	beq.n	2ccd0 <rpc_message_free+0x138>
   2ccfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2cd00:	4298      	cmp	r0, r3
   2cd02:	f47f af6b 	bne.w	2cbdc <rpc_message_free+0x44>
   2cd06:	f894 1020 	ldrb.w	r1, [r4, #32]
   2cd0a:	2903      	cmp	r1, #3
   2cd0c:	f47f af66 	bne.w	2cbdc <rpc_message_free+0x44>
   2cd10:	2104      	movs	r1, #4
   2cd12:	e7dd      	b.n	2ccd0 <rpc_message_free+0x138>
   2cd14:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   2cd18:	2903      	cmp	r1, #3
   2cd1a:	f47f af63 	bne.w	2cbe4 <rpc_message_free+0x4c>
   2cd1e:	2105      	movs	r1, #5
   2cd20:	e7d6      	b.n	2ccd0 <rpc_message_free+0x138>
   2cd22:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
   2cd26:	2903      	cmp	r1, #3
   2cd28:	f47f af60 	bne.w	2cbec <rpc_message_free+0x54>
   2cd2c:	2106      	movs	r1, #6
   2cd2e:	e7cf      	b.n	2ccd0 <rpc_message_free+0x138>
   2cd30:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
   2cd34:	2903      	cmp	r1, #3
   2cd36:	f47f af5d 	bne.w	2cbf4 <rpc_message_free+0x5c>
   2cd3a:	2107      	movs	r1, #7
   2cd3c:	e7c8      	b.n	2ccd0 <rpc_message_free+0x138>
   2cd3e:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
   2cd42:	2903      	cmp	r1, #3
   2cd44:	f47f af5a 	bne.w	2cbfc <rpc_message_free+0x64>
   2cd48:	2108      	movs	r1, #8
   2cd4a:	e7c1      	b.n	2ccd0 <rpc_message_free+0x138>
   2cd4c:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
   2cd50:	2903      	cmp	r1, #3
   2cd52:	f47f af57 	bne.w	2cc04 <rpc_message_free+0x6c>
   2cd56:	2109      	movs	r1, #9
   2cd58:	e7ba      	b.n	2ccd0 <rpc_message_free+0x138>
   2cd5a:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
   2cd5e:	2903      	cmp	r1, #3
   2cd60:	f47f af54 	bne.w	2cc0c <rpc_message_free+0x74>
   2cd64:	210a      	movs	r1, #10
   2cd66:	e7b3      	b.n	2ccd0 <rpc_message_free+0x138>
   2cd68:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
   2cd6c:	2903      	cmp	r1, #3
   2cd6e:	f47f af51 	bne.w	2cc14 <rpc_message_free+0x7c>
   2cd72:	210b      	movs	r1, #11
   2cd74:	e7ac      	b.n	2ccd0 <rpc_message_free+0x138>
   2cd76:	200e      	movs	r0, #14
   2cd78:	4770      	bx	lr
   2cd7a:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
   2cd7e:	2903      	cmp	r1, #3
   2cd80:	f47f af4c 	bne.w	2cc1c <rpc_message_free+0x84>
   2cd84:	210c      	movs	r1, #12
   2cd86:	e7a3      	b.n	2ccd0 <rpc_message_free+0x138>
   2cd88:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
   2cd8c:	2903      	cmp	r1, #3
   2cd8e:	f47f af49 	bne.w	2cc24 <rpc_message_free+0x8c>
   2cd92:	210d      	movs	r1, #13
   2cd94:	e79c      	b.n	2ccd0 <rpc_message_free+0x138>
   2cd96:	f894 1070 	ldrb.w	r1, [r4, #112]	; 0x70
   2cd9a:	2903      	cmp	r1, #3
   2cd9c:	f47f af46 	bne.w	2cc2c <rpc_message_free+0x94>
   2cda0:	210e      	movs	r1, #14
   2cda2:	e795      	b.n	2ccd0 <rpc_message_free+0x138>
   2cda4:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   2cda8:	2b03      	cmp	r3, #3
   2cdaa:	f47f af43 	bne.w	2cc34 <rpc_message_free+0x9c>
   2cdae:	4603      	mov	r3, r0
   2cdb0:	210f      	movs	r1, #15
   2cdb2:	e78d      	b.n	2ccd0 <rpc_message_free+0x138>
   2cdb4:	20022c08 	.word	0x20022c08
   2cdb8:	20022ca0 	.word	0x20022ca0

0002cdbc <rpc_message_data_free>:
   2cdbc:	2800      	cmp	r0, #0
   2cdbe:	f000 8091 	beq.w	2cee4 <rpc_message_data_free+0x128>
   2cdc2:	2900      	cmp	r1, #0
   2cdc4:	f000 80e4 	beq.w	2cf90 <rpc_message_data_free+0x1d4>
   2cdc8:	b538      	push	{r3, r4, r5, lr}
   2cdca:	4a81      	ldr	r2, [pc, #516]	; (2cfd0 <rpc_message_data_free+0x214>)
   2cdcc:	6853      	ldr	r3, [r2, #4]
   2cdce:	2b00      	cmp	r3, #0
   2cdd0:	f000 808a 	beq.w	2cee8 <rpc_message_data_free+0x12c>
   2cdd4:	4b7f      	ldr	r3, [pc, #508]	; (2cfd4 <rpc_message_data_free+0x218>)
   2cdd6:	681c      	ldr	r4, [r3, #0]
   2cdd8:	42a1      	cmp	r1, r4
   2cdda:	f000 8087 	beq.w	2ceec <rpc_message_data_free+0x130>
   2cdde:	689c      	ldr	r4, [r3, #8]
   2cde0:	42a1      	cmp	r1, r4
   2cde2:	f000 808f 	beq.w	2cf04 <rpc_message_data_free+0x148>
   2cde6:	691c      	ldr	r4, [r3, #16]
   2cde8:	42a1      	cmp	r1, r4
   2cdea:	f000 8091 	beq.w	2cf10 <rpc_message_data_free+0x154>
   2cdee:	699c      	ldr	r4, [r3, #24]
   2cdf0:	42a1      	cmp	r1, r4
   2cdf2:	f000 8093 	beq.w	2cf1c <rpc_message_data_free+0x160>
   2cdf6:	6a1c      	ldr	r4, [r3, #32]
   2cdf8:	42a1      	cmp	r1, r4
   2cdfa:	f000 8095 	beq.w	2cf28 <rpc_message_data_free+0x16c>
   2cdfe:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   2ce00:	42a1      	cmp	r1, r4
   2ce02:	f000 8097 	beq.w	2cf34 <rpc_message_data_free+0x178>
   2ce06:	6b1c      	ldr	r4, [r3, #48]	; 0x30
   2ce08:	42a1      	cmp	r1, r4
   2ce0a:	f000 8099 	beq.w	2cf40 <rpc_message_data_free+0x184>
   2ce0e:	6b9c      	ldr	r4, [r3, #56]	; 0x38
   2ce10:	42a1      	cmp	r1, r4
   2ce12:	f000 809b 	beq.w	2cf4c <rpc_message_data_free+0x190>
   2ce16:	6c1c      	ldr	r4, [r3, #64]	; 0x40
   2ce18:	42a1      	cmp	r1, r4
   2ce1a:	f000 809d 	beq.w	2cf58 <rpc_message_data_free+0x19c>
   2ce1e:	6c9c      	ldr	r4, [r3, #72]	; 0x48
   2ce20:	42a1      	cmp	r1, r4
   2ce22:	f000 80a0 	beq.w	2cf66 <rpc_message_data_free+0x1aa>
   2ce26:	6d1c      	ldr	r4, [r3, #80]	; 0x50
   2ce28:	42a1      	cmp	r1, r4
   2ce2a:	f000 80a3 	beq.w	2cf74 <rpc_message_data_free+0x1b8>
   2ce2e:	6d9c      	ldr	r4, [r3, #88]	; 0x58
   2ce30:	42a1      	cmp	r1, r4
   2ce32:	f000 80a6 	beq.w	2cf82 <rpc_message_data_free+0x1c6>
   2ce36:	6e1c      	ldr	r4, [r3, #96]	; 0x60
   2ce38:	42a1      	cmp	r1, r4
   2ce3a:	f000 80ab 	beq.w	2cf94 <rpc_message_data_free+0x1d8>
   2ce3e:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   2ce40:	42a1      	cmp	r1, r4
   2ce42:	f000 80ae 	beq.w	2cfa2 <rpc_message_data_free+0x1e6>
   2ce46:	6f1c      	ldr	r4, [r3, #112]	; 0x70
   2ce48:	42a1      	cmp	r1, r4
   2ce4a:	f000 80b1 	beq.w	2cfb0 <rpc_message_data_free+0x1f4>
   2ce4e:	6f9c      	ldr	r4, [r3, #120]	; 0x78
   2ce50:	428c      	cmp	r4, r1
   2ce52:	f000 80b4 	beq.w	2cfbe <rpc_message_data_free+0x202>
   2ce56:	6913      	ldr	r3, [r2, #16]
   2ce58:	4608      	mov	r0, r1
   2ce5a:	4798      	blx	r3
   2ce5c:	4b5e      	ldr	r3, [pc, #376]	; (2cfd8 <rpc_message_data_free+0x21c>)
   2ce5e:	781a      	ldrb	r2, [r3, #0]
   2ce60:	2a04      	cmp	r2, #4
   2ce62:	d03b      	beq.n	2cedc <rpc_message_data_free+0x120>
   2ce64:	7a1a      	ldrb	r2, [r3, #8]
   2ce66:	2a04      	cmp	r2, #4
   2ce68:	d038      	beq.n	2cedc <rpc_message_data_free+0x120>
   2ce6a:	7c1a      	ldrb	r2, [r3, #16]
   2ce6c:	2a04      	cmp	r2, #4
   2ce6e:	d035      	beq.n	2cedc <rpc_message_data_free+0x120>
   2ce70:	7e1a      	ldrb	r2, [r3, #24]
   2ce72:	2a04      	cmp	r2, #4
   2ce74:	d032      	beq.n	2cedc <rpc_message_data_free+0x120>
   2ce76:	f893 2020 	ldrb.w	r2, [r3, #32]
   2ce7a:	2a04      	cmp	r2, #4
   2ce7c:	d02e      	beq.n	2cedc <rpc_message_data_free+0x120>
   2ce7e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   2ce82:	2a04      	cmp	r2, #4
   2ce84:	d02a      	beq.n	2cedc <rpc_message_data_free+0x120>
   2ce86:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   2ce8a:	2a04      	cmp	r2, #4
   2ce8c:	d026      	beq.n	2cedc <rpc_message_data_free+0x120>
   2ce8e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   2ce92:	2a04      	cmp	r2, #4
   2ce94:	d022      	beq.n	2cedc <rpc_message_data_free+0x120>
   2ce96:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   2ce9a:	2a04      	cmp	r2, #4
   2ce9c:	d01e      	beq.n	2cedc <rpc_message_data_free+0x120>
   2ce9e:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
   2cea2:	2a04      	cmp	r2, #4
   2cea4:	d01a      	beq.n	2cedc <rpc_message_data_free+0x120>
   2cea6:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   2ceaa:	2a04      	cmp	r2, #4
   2ceac:	d016      	beq.n	2cedc <rpc_message_data_free+0x120>
   2ceae:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
   2ceb2:	2a04      	cmp	r2, #4
   2ceb4:	d012      	beq.n	2cedc <rpc_message_data_free+0x120>
   2ceb6:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   2ceba:	2a04      	cmp	r2, #4
   2cebc:	d00e      	beq.n	2cedc <rpc_message_data_free+0x120>
   2cebe:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
   2cec2:	2a04      	cmp	r2, #4
   2cec4:	d00a      	beq.n	2cedc <rpc_message_data_free+0x120>
   2cec6:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
   2ceca:	2a04      	cmp	r2, #4
   2cecc:	d006      	beq.n	2cedc <rpc_message_data_free+0x120>
   2cece:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   2ced2:	2b04      	cmp	r3, #4
   2ced4:	bf18      	it	ne
   2ced6:	2000      	movne	r0, #0
   2ced8:	d000      	beq.n	2cedc <rpc_message_data_free+0x120>
   2ceda:	bd38      	pop	{r3, r4, r5, pc}
   2cedc:	f7f5 ff8c 	bl	22df8 <bsd_os_application_irq_set>
   2cee0:	2000      	movs	r0, #0
   2cee2:	bd38      	pop	{r3, r4, r5, pc}
   2cee4:	2007      	movs	r0, #7
   2cee6:	4770      	bx	lr
   2cee8:	2008      	movs	r0, #8
   2ceea:	bd38      	pop	{r3, r4, r5, pc}
   2ceec:	889c      	ldrh	r4, [r3, #4]
   2ceee:	4284      	cmp	r4, r0
   2cef0:	f47f af75 	bne.w	2cdde <rpc_message_data_free+0x22>
   2cef4:	2400      	movs	r4, #0
   2cef6:	2000      	movs	r0, #0
   2cef8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
   2cefc:	f843 0034 	str.w	r0, [r3, r4, lsl #3]
   2cf00:	80a8      	strh	r0, [r5, #4]
   2cf02:	e7a8      	b.n	2ce56 <rpc_message_data_free+0x9a>
   2cf04:	899c      	ldrh	r4, [r3, #12]
   2cf06:	4284      	cmp	r4, r0
   2cf08:	f47f af6d 	bne.w	2cde6 <rpc_message_data_free+0x2a>
   2cf0c:	2401      	movs	r4, #1
   2cf0e:	e7f2      	b.n	2cef6 <rpc_message_data_free+0x13a>
   2cf10:	8a9c      	ldrh	r4, [r3, #20]
   2cf12:	4284      	cmp	r4, r0
   2cf14:	f47f af6b 	bne.w	2cdee <rpc_message_data_free+0x32>
   2cf18:	2402      	movs	r4, #2
   2cf1a:	e7ec      	b.n	2cef6 <rpc_message_data_free+0x13a>
   2cf1c:	8b9c      	ldrh	r4, [r3, #28]
   2cf1e:	4284      	cmp	r4, r0
   2cf20:	f47f af69 	bne.w	2cdf6 <rpc_message_data_free+0x3a>
   2cf24:	2403      	movs	r4, #3
   2cf26:	e7e6      	b.n	2cef6 <rpc_message_data_free+0x13a>
   2cf28:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
   2cf2a:	4284      	cmp	r4, r0
   2cf2c:	f47f af67 	bne.w	2cdfe <rpc_message_data_free+0x42>
   2cf30:	2404      	movs	r4, #4
   2cf32:	e7e0      	b.n	2cef6 <rpc_message_data_free+0x13a>
   2cf34:	8d9c      	ldrh	r4, [r3, #44]	; 0x2c
   2cf36:	4284      	cmp	r4, r0
   2cf38:	f47f af65 	bne.w	2ce06 <rpc_message_data_free+0x4a>
   2cf3c:	2405      	movs	r4, #5
   2cf3e:	e7da      	b.n	2cef6 <rpc_message_data_free+0x13a>
   2cf40:	8e9c      	ldrh	r4, [r3, #52]	; 0x34
   2cf42:	4284      	cmp	r4, r0
   2cf44:	f47f af63 	bne.w	2ce0e <rpc_message_data_free+0x52>
   2cf48:	2406      	movs	r4, #6
   2cf4a:	e7d4      	b.n	2cef6 <rpc_message_data_free+0x13a>
   2cf4c:	8f9c      	ldrh	r4, [r3, #60]	; 0x3c
   2cf4e:	4284      	cmp	r4, r0
   2cf50:	f47f af61 	bne.w	2ce16 <rpc_message_data_free+0x5a>
   2cf54:	2407      	movs	r4, #7
   2cf56:	e7ce      	b.n	2cef6 <rpc_message_data_free+0x13a>
   2cf58:	f8b3 4044 	ldrh.w	r4, [r3, #68]	; 0x44
   2cf5c:	4284      	cmp	r4, r0
   2cf5e:	f47f af5e 	bne.w	2ce1e <rpc_message_data_free+0x62>
   2cf62:	2408      	movs	r4, #8
   2cf64:	e7c7      	b.n	2cef6 <rpc_message_data_free+0x13a>
   2cf66:	f8b3 404c 	ldrh.w	r4, [r3, #76]	; 0x4c
   2cf6a:	4284      	cmp	r4, r0
   2cf6c:	f47f af5b 	bne.w	2ce26 <rpc_message_data_free+0x6a>
   2cf70:	2409      	movs	r4, #9
   2cf72:	e7c0      	b.n	2cef6 <rpc_message_data_free+0x13a>
   2cf74:	f8b3 4054 	ldrh.w	r4, [r3, #84]	; 0x54
   2cf78:	4284      	cmp	r4, r0
   2cf7a:	f47f af58 	bne.w	2ce2e <rpc_message_data_free+0x72>
   2cf7e:	240a      	movs	r4, #10
   2cf80:	e7b9      	b.n	2cef6 <rpc_message_data_free+0x13a>
   2cf82:	f8b3 405c 	ldrh.w	r4, [r3, #92]	; 0x5c
   2cf86:	4284      	cmp	r4, r0
   2cf88:	f47f af55 	bne.w	2ce36 <rpc_message_data_free+0x7a>
   2cf8c:	240b      	movs	r4, #11
   2cf8e:	e7b2      	b.n	2cef6 <rpc_message_data_free+0x13a>
   2cf90:	200e      	movs	r0, #14
   2cf92:	4770      	bx	lr
   2cf94:	f8b3 4064 	ldrh.w	r4, [r3, #100]	; 0x64
   2cf98:	4284      	cmp	r4, r0
   2cf9a:	f47f af50 	bne.w	2ce3e <rpc_message_data_free+0x82>
   2cf9e:	240c      	movs	r4, #12
   2cfa0:	e7a9      	b.n	2cef6 <rpc_message_data_free+0x13a>
   2cfa2:	f8b3 406c 	ldrh.w	r4, [r3, #108]	; 0x6c
   2cfa6:	4284      	cmp	r4, r0
   2cfa8:	f47f af4d 	bne.w	2ce46 <rpc_message_data_free+0x8a>
   2cfac:	240d      	movs	r4, #13
   2cfae:	e7a2      	b.n	2cef6 <rpc_message_data_free+0x13a>
   2cfb0:	f8b3 4074 	ldrh.w	r4, [r3, #116]	; 0x74
   2cfb4:	4284      	cmp	r4, r0
   2cfb6:	f47f af4a 	bne.w	2ce4e <rpc_message_data_free+0x92>
   2cfba:	240e      	movs	r4, #14
   2cfbc:	e79b      	b.n	2cef6 <rpc_message_data_free+0x13a>
   2cfbe:	f8b3 407c 	ldrh.w	r4, [r3, #124]	; 0x7c
   2cfc2:	4284      	cmp	r4, r0
   2cfc4:	bf08      	it	eq
   2cfc6:	240f      	moveq	r4, #15
   2cfc8:	f47f af45 	bne.w	2ce56 <rpc_message_data_free+0x9a>
   2cfcc:	e793      	b.n	2cef6 <rpc_message_data_free+0x13a>
   2cfce:	bf00      	nop
   2cfd0:	20022c08 	.word	0x20022c08
   2cfd4:	20022c20 	.word	0x20022c20
   2cfd8:	20022ca0 	.word	0x20022ca0

0002cfdc <packet_free_cb>:
   2cfdc:	b510      	push	{r4, lr}
   2cfde:	4604      	mov	r4, r0
   2cfe0:	b118      	cbz	r0, 2cfea <packet_free_cb+0xe>
   2cfe2:	6800      	ldr	r0, [r0, #0]
   2cfe4:	b108      	cbz	r0, 2cfea <packet_free_cb+0xe>
   2cfe6:	f001 f82f 	bl	2e048 <rpc_gnss_client_data_free>
   2cfea:	68a0      	ldr	r0, [r4, #8]
   2cfec:	b118      	cbz	r0, 2cff6 <packet_free_cb+0x1a>
   2cfee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2cff2:	f7fa b919 	b.w	27228 <nrf_free>
   2cff6:	bd10      	pop	{r4, pc}

0002cff8 <rpc_gnss_event_handler>:
   2cff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2cffc:	4b64      	ldr	r3, [pc, #400]	; (2d190 <rpc_gnss_event_handler+0x198>)
   2cffe:	4606      	mov	r6, r0
   2d000:	6800      	ldr	r0, [r0, #0]
   2d002:	881b      	ldrh	r3, [r3, #0]
   2d004:	6802      	ldr	r2, [r0, #0]
   2d006:	4f63      	ldr	r7, [pc, #396]	; (2d194 <rpc_gnss_event_handler+0x19c>)
   2d008:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   2d00c:	b084      	sub	sp, #16
   2d00e:	460d      	mov	r5, r1
   2d010:	6038      	str	r0, [r7, #0]
   2d012:	d038      	beq.n	2d086 <rpc_gnss_event_handler+0x8e>
   2d014:	f505 433f 	add.w	r3, r5, #48896	; 0xbf00
   2d018:	33ff      	adds	r3, #255	; 0xff
   2d01a:	b29b      	uxth	r3, r3
   2d01c:	2b02      	cmp	r3, #2
   2d01e:	d810      	bhi.n	2d042 <rpc_gnss_event_handler+0x4a>
   2d020:	4c5d      	ldr	r4, [pc, #372]	; (2d198 <rpc_gnss_event_handler+0x1a0>)
   2d022:	6823      	ldr	r3, [r4, #0]
   2d024:	075a      	lsls	r2, r3, #29
   2d026:	d410      	bmi.n	2d04a <rpc_gnss_event_handler+0x52>
   2d028:	6823      	ldr	r3, [r4, #0]
   2d02a:	079b      	lsls	r3, r3, #30
   2d02c:	d503      	bpl.n	2d036 <rpc_gnss_event_handler+0x3e>
   2d02e:	f244 0303 	movw	r3, #16387	; 0x4003
   2d032:	429d      	cmp	r5, r3
   2d034:	d009      	beq.n	2d04a <rpc_gnss_event_handler+0x52>
   2d036:	6830      	ldr	r0, [r6, #0]
   2d038:	b118      	cbz	r0, 2d042 <rpc_gnss_event_handler+0x4a>
   2d03a:	f001 f805 	bl	2e048 <rpc_gnss_client_data_free>
   2d03e:	2300      	movs	r3, #0
   2d040:	603b      	str	r3, [r7, #0]
   2d042:	2000      	movs	r0, #0
   2d044:	b004      	add	sp, #16
   2d046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2d04a:	2002      	movs	r0, #2
   2d04c:	f7fa f8e2 	bl	27214 <nrf_malloc>
   2d050:	4680      	mov	r8, r0
   2d052:	2800      	cmp	r0, #0
   2d054:	f000 8093 	beq.w	2d17e <rpc_gnss_event_handler+0x186>
   2d058:	2302      	movs	r3, #2
   2d05a:	8005      	strh	r5, [r0, #0]
   2d05c:	6831      	ldr	r1, [r6, #0]
   2d05e:	6872      	ldr	r2, [r6, #4]
   2d060:	484e      	ldr	r0, [pc, #312]	; (2d19c <rpc_gnss_event_handler+0x1a4>)
   2d062:	e88d 0106 	stmia.w	sp, {r1, r2, r8}
   2d066:	6800      	ldr	r0, [r0, #0]
   2d068:	9303      	str	r3, [sp, #12]
   2d06a:	6803      	ldr	r3, [r0, #0]
   2d06c:	4669      	mov	r1, sp
   2d06e:	685b      	ldr	r3, [r3, #4]
   2d070:	4798      	blx	r3
   2d072:	3001      	adds	r0, #1
   2d074:	d070      	beq.n	2d158 <rpc_gnss_event_handler+0x160>
   2d076:	2000      	movs	r0, #0
   2d078:	6823      	ldr	r3, [r4, #0]
   2d07a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   2d07e:	6023      	str	r3, [r4, #0]
   2d080:	b004      	add	sp, #16
   2d082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2d086:	4c44      	ldr	r4, [pc, #272]	; (2d198 <rpc_gnss_event_handler+0x1a0>)
   2d088:	6823      	ldr	r3, [r4, #0]
   2d08a:	01d9      	lsls	r1, r3, #7
   2d08c:	d523      	bpl.n	2d0d6 <rpc_gnss_event_handler+0xde>
   2d08e:	f242 1302 	movw	r3, #8450	; 0x2102
   2d092:	429d      	cmp	r5, r3
   2d094:	d11f      	bne.n	2d0d6 <rpc_gnss_event_handler+0xde>
   2d096:	6843      	ldr	r3, [r0, #4]
   2d098:	b91b      	cbnz	r3, 2d0a2 <rpc_gnss_event_handler+0xaa>
   2d09a:	6823      	ldr	r3, [r4, #0]
   2d09c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   2d0a0:	6023      	str	r3, [r4, #0]
   2d0a2:	6823      	ldr	r3, [r4, #0]
   2d0a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   2d0a8:	6023      	str	r3, [r4, #0]
   2d0aa:	6823      	ldr	r3, [r4, #0]
   2d0ac:	025a      	lsls	r2, r3, #9
   2d0ae:	d430      	bmi.n	2d112 <rpc_gnss_event_handler+0x11a>
   2d0b0:	f242 0305 	movw	r3, #8197	; 0x2005
   2d0b4:	429d      	cmp	r5, r3
   2d0b6:	d12c      	bne.n	2d112 <rpc_gnss_event_handler+0x11a>
   2d0b8:	6823      	ldr	r3, [r4, #0]
   2d0ba:	0299      	lsls	r1, r3, #10
   2d0bc:	d529      	bpl.n	2d112 <rpc_gnss_event_handler+0x11a>
   2d0be:	6843      	ldr	r3, [r0, #4]
   2d0c0:	2b00      	cmp	r3, #0
   2d0c2:	d157      	bne.n	2d174 <rpc_gnss_event_handler+0x17c>
   2d0c4:	6823      	ldr	r3, [r4, #0]
   2d0c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   2d0ca:	6023      	str	r3, [r4, #0]
   2d0cc:	6823      	ldr	r3, [r4, #0]
   2d0ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2d0d2:	6023      	str	r3, [r4, #0]
   2d0d4:	e01d      	b.n	2d112 <rpc_gnss_event_handler+0x11a>
   2d0d6:	6823      	ldr	r3, [r4, #0]
   2d0d8:	025b      	lsls	r3, r3, #9
   2d0da:	d50e      	bpl.n	2d0fa <rpc_gnss_event_handler+0x102>
   2d0dc:	f242 1303 	movw	r3, #8451	; 0x2103
   2d0e0:	429d      	cmp	r5, r3
   2d0e2:	d10a      	bne.n	2d0fa <rpc_gnss_event_handler+0x102>
   2d0e4:	6843      	ldr	r3, [r0, #4]
   2d0e6:	b91b      	cbnz	r3, 2d0f0 <rpc_gnss_event_handler+0xf8>
   2d0e8:	6823      	ldr	r3, [r4, #0]
   2d0ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   2d0ee:	6023      	str	r3, [r4, #0]
   2d0f0:	6823      	ldr	r3, [r4, #0]
   2d0f2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   2d0f6:	6023      	str	r3, [r4, #0]
   2d0f8:	e00b      	b.n	2d112 <rpc_gnss_event_handler+0x11a>
   2d0fa:	f242 0301 	movw	r3, #8193	; 0x2001
   2d0fe:	429d      	cmp	r5, r3
   2d100:	d10c      	bne.n	2d11c <rpc_gnss_event_handler+0x124>
   2d102:	6843      	ldr	r3, [r0, #4]
   2d104:	b92b      	cbnz	r3, 2d112 <rpc_gnss_event_handler+0x11a>
   2d106:	6823      	ldr	r3, [r4, #0]
   2d108:	0c1b      	lsrs	r3, r3, #16
   2d10a:	041b      	lsls	r3, r3, #16
   2d10c:	f043 0302 	orr.w	r3, r3, #2
   2d110:	6023      	str	r3, [r4, #0]
   2d112:	f000 ff99 	bl	2e048 <rpc_gnss_client_data_free>
   2d116:	2300      	movs	r3, #0
   2d118:	603b      	str	r3, [r7, #0]
   2d11a:	e77b      	b.n	2d014 <rpc_gnss_event_handler+0x1c>
   2d11c:	f242 0304 	movw	r3, #8196	; 0x2004
   2d120:	429d      	cmp	r5, r3
   2d122:	d1c5      	bne.n	2d0b0 <rpc_gnss_event_handler+0xb8>
   2d124:	6843      	ldr	r3, [r0, #4]
   2d126:	b993      	cbnz	r3, 2d14e <rpc_gnss_event_handler+0x156>
   2d128:	6823      	ldr	r3, [r4, #0]
   2d12a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   2d12e:	6023      	str	r3, [r4, #0]
   2d130:	6823      	ldr	r3, [r4, #0]
   2d132:	b29b      	uxth	r3, r3
   2d134:	2b03      	cmp	r3, #3
   2d136:	6823      	ldr	r3, [r4, #0]
   2d138:	d016      	beq.n	2d168 <rpc_gnss_event_handler+0x170>
   2d13a:	b29b      	uxth	r3, r3
   2d13c:	2b04      	cmp	r3, #4
   2d13e:	d1d7      	bne.n	2d0f0 <rpc_gnss_event_handler+0xf8>
   2d140:	6823      	ldr	r3, [r4, #0]
   2d142:	0c1b      	lsrs	r3, r3, #16
   2d144:	041b      	lsls	r3, r3, #16
   2d146:	f043 0302 	orr.w	r3, r3, #2
   2d14a:	6023      	str	r3, [r4, #0]
   2d14c:	e7d0      	b.n	2d0f0 <rpc_gnss_event_handler+0xf8>
   2d14e:	6823      	ldr	r3, [r4, #0]
   2d150:	b29b      	uxth	r3, r3
   2d152:	2b03      	cmp	r3, #3
   2d154:	d1cc      	bne.n	2d0f0 <rpc_gnss_event_handler+0xf8>
   2d156:	e7f3      	b.n	2d140 <rpc_gnss_event_handler+0x148>
   2d158:	4640      	mov	r0, r8
   2d15a:	f7fa f865 	bl	27228 <nrf_free>
   2d15e:	6830      	ldr	r0, [r6, #0]
   2d160:	2800      	cmp	r0, #0
   2d162:	f47f af6a 	bne.w	2d03a <rpc_gnss_event_handler+0x42>
   2d166:	e76c      	b.n	2d042 <rpc_gnss_event_handler+0x4a>
   2d168:	0c1b      	lsrs	r3, r3, #16
   2d16a:	041b      	lsls	r3, r3, #16
   2d16c:	f043 0304 	orr.w	r3, r3, #4
   2d170:	6023      	str	r3, [r4, #0]
   2d172:	e7bd      	b.n	2d0f0 <rpc_gnss_event_handler+0xf8>
   2d174:	6823      	ldr	r3, [r4, #0]
   2d176:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   2d17a:	6023      	str	r3, [r4, #0]
   2d17c:	e7c9      	b.n	2d112 <rpc_gnss_event_handler+0x11a>
   2d17e:	6830      	ldr	r0, [r6, #0]
   2d180:	2800      	cmp	r0, #0
   2d182:	f43f af5e 	beq.w	2d042 <rpc_gnss_event_handler+0x4a>
   2d186:	f000 ff5f 	bl	2e048 <rpc_gnss_client_data_free>
   2d18a:	f8c7 8000 	str.w	r8, [r7]
   2d18e:	e758      	b.n	2d042 <rpc_gnss_event_handler+0x4a>
   2d190:	20024018 	.word	0x20024018
   2d194:	20022d24 	.word	0x20022d24
   2d198:	20022d20 	.word	0x20022d20
   2d19c:	20022d28 	.word	0x20022d28

0002d1a0 <gnss_interface_write>:
   2d1a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2d1a4:	4a74      	ldr	r2, [pc, #464]	; (2d378 <gnss_interface_write+0x1d8>)
   2d1a6:	b09f      	sub	sp, #124	; 0x7c
   2d1a8:	4290      	cmp	r0, r2
   2d1aa:	9d26      	ldr	r5, [sp, #152]	; 0x98
   2d1ac:	f040 80d7 	bne.w	2d35e <gnss_interface_write+0x1be>
   2d1b0:	2900      	cmp	r1, #0
   2d1b2:	f000 80c6 	beq.w	2d342 <gnss_interface_write+0x1a2>
   2d1b6:	2d00      	cmp	r5, #0
   2d1b8:	f000 80c3 	beq.w	2d342 <gnss_interface_write+0x1a2>
   2d1bc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2d1be:	2a02      	cmp	r2, #2
   2d1c0:	f040 80bf 	bne.w	2d342 <gnss_interface_write+0x1a2>
   2d1c4:	4c6d      	ldr	r4, [pc, #436]	; (2d37c <gnss_interface_write+0x1dc>)
   2d1c6:	6822      	ldr	r2, [r4, #0]
   2d1c8:	b292      	uxth	r2, r2
   2d1ca:	2a02      	cmp	r2, #2
   2d1cc:	d004      	beq.n	2d1d8 <gnss_interface_write+0x38>
   2d1ce:	6822      	ldr	r2, [r4, #0]
   2d1d0:	b292      	uxth	r2, r2
   2d1d2:	2a04      	cmp	r2, #4
   2d1d4:	f040 80bd 	bne.w	2d352 <gnss_interface_write+0x1b2>
   2d1d8:	2b00      	cmp	r3, #0
   2d1da:	f040 80c6 	bne.w	2d36a <gnss_interface_write+0x1ca>
   2d1de:	6822      	ldr	r2, [r4, #0]
   2d1e0:	0390      	lsls	r0, r2, #14
   2d1e2:	d512      	bpl.n	2d20a <gnss_interface_write+0x6a>
   2d1e4:	6822      	ldr	r2, [r4, #0]
   2d1e6:	882b      	ldrh	r3, [r5, #0]
   2d1e8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
   2d1ec:	6022      	str	r2, [r4, #0]
   2d1ee:	6822      	ldr	r2, [r4, #0]
   2d1f0:	3b01      	subs	r3, #1
   2d1f2:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   2d1f6:	6022      	str	r2, [r4, #0]
   2d1f8:	2b07      	cmp	r3, #7
   2d1fa:	f200 80a2 	bhi.w	2d342 <gnss_interface_write+0x1a2>
   2d1fe:	e8df f003 	tbb	[pc, r3]
   2d202:	7d82      	.short	0x7d82
   2d204:	646e7378 	.word	0x646e7378
   2d208:	0869      	.short	0x0869
   2d20a:	2000      	movs	r0, #0
   2d20c:	b01f      	add	sp, #124	; 0x7c
   2d20e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2d212:	4608      	mov	r0, r1
   2d214:	a902      	add	r1, sp, #8
   2d216:	f000 fecb 	bl	2dfb0 <rpc_gnss_serialize_integrity>
   2d21a:	2172      	movs	r1, #114	; 0x72
   2d21c:	4668      	mov	r0, sp
   2d21e:	f000 fee1 	bl	2dfe4 <rpc_gnss_client_request_alloc>
   2d222:	4605      	mov	r5, r0
   2d224:	9800      	ldr	r0, [sp, #0]
   2d226:	2d00      	cmp	r5, #0
   2d228:	d172      	bne.n	2d310 <gnss_interface_write+0x170>
   2d22a:	2800      	cmp	r0, #0
   2d22c:	d077      	beq.n	2d31e <gnss_interface_write+0x17e>
   2d22e:	f241 0605 	movw	r6, #4101	; 0x1005
   2d232:	f04f 0c49 	mov.w	ip, #73	; 0x49
   2d236:	2272      	movs	r2, #114	; 0x72
   2d238:	f04f 0e76 	mov.w	lr, #118	; 0x76
   2d23c:	f04f 0943 	mov.w	r9, #67	; 0x43
   2d240:	f04f 0854 	mov.w	r8, #84	; 0x54
   2d244:	4f4e      	ldr	r7, [pc, #312]	; (2d380 <gnss_interface_write+0x1e0>)
   2d246:	a91e      	add	r1, sp, #120	; 0x78
   2d248:	883b      	ldrh	r3, [r7, #0]
   2d24a:	f880 c00f 	strb.w	ip, [r0, #15]
   2d24e:	3301      	adds	r3, #1
   2d250:	b29b      	uxth	r3, r3
   2d252:	ea46 4c03 	orr.w	ip, r6, r3, lsl #16
   2d256:	f841 cd74 	str.w	ip, [r1, #-116]!
   2d25a:	7145      	strb	r5, [r0, #5]
   2d25c:	7185      	strb	r5, [r0, #6]
   2d25e:	71c5      	strb	r5, [r0, #7]
   2d260:	7205      	strb	r5, [r0, #8]
   2d262:	7245      	strb	r5, [r0, #9]
   2d264:	7285      	strb	r5, [r0, #10]
   2d266:	72c5      	strb	r5, [r0, #11]
   2d268:	7102      	strb	r2, [r0, #4]
   2d26a:	f880 900c 	strb.w	r9, [r0, #12]
   2d26e:	f880 800d 	strb.w	r8, [r0, #13]
   2d272:	f880 e00e 	strb.w	lr, [r0, #14]
   2d276:	6800      	ldr	r0, [r0, #0]
   2d278:	803b      	strh	r3, [r7, #0]
   2d27a:	f008 fc45 	bl	35b08 <memcpy>
   2d27e:	4b41      	ldr	r3, [pc, #260]	; (2d384 <gnss_interface_write+0x1e4>)
   2d280:	4631      	mov	r1, r6
   2d282:	9800      	ldr	r0, [sp, #0]
   2d284:	601d      	str	r5, [r3, #0]
   2d286:	f000 fec1 	bl	2e00c <rpc_gnss_client_request_send>
   2d28a:	2800      	cmp	r0, #0
   2d28c:	d14e      	bne.n	2d32c <gnss_interface_write+0x18c>
   2d28e:	6823      	ldr	r3, [r4, #0]
   2d290:	0299      	lsls	r1, r3, #10
   2d292:	d50b      	bpl.n	2d2ac <gnss_interface_write+0x10c>
   2d294:	4e3c      	ldr	r6, [pc, #240]	; (2d388 <gnss_interface_write+0x1e8>)
   2d296:	4d38      	ldr	r5, [pc, #224]	; (2d378 <gnss_interface_write+0x1d8>)
   2d298:	e000      	b.n	2d29c <gnss_interface_write+0xfc>
   2d29a:	b978      	cbnz	r0, 2d2bc <gnss_interface_write+0x11c>
   2d29c:	4631      	mov	r1, r6
   2d29e:	4628      	mov	r0, r5
   2d2a0:	f7f5 fb98 	bl	229d4 <bsd_os_timedwait>
   2d2a4:	6823      	ldr	r3, [r4, #0]
   2d2a6:	029a      	lsls	r2, r3, #10
   2d2a8:	d4f7      	bmi.n	2d29a <gnss_interface_write+0xfa>
   2d2aa:	b938      	cbnz	r0, 2d2bc <gnss_interface_write+0x11c>
   2d2ac:	6823      	ldr	r3, [r4, #0]
   2d2ae:	039b      	lsls	r3, r3, #14
   2d2b0:	d4ab      	bmi.n	2d20a <gnss_interface_write+0x6a>
   2d2b2:	2005      	movs	r0, #5
   2d2b4:	6823      	ldr	r3, [r4, #0]
   2d2b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2d2ba:	6023      	str	r3, [r4, #0]
   2d2bc:	f7f5 fc1e 	bl	22afc <bsd_os_errno_set>
   2d2c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d2c4:	b01f      	add	sp, #124	; 0x7c
   2d2c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2d2ca:	4608      	mov	r0, r1
   2d2cc:	a902      	add	r1, sp, #8
   2d2ce:	f000 fe27 	bl	2df20 <rpc_gnss_serialize_time_and_sv_tow>
   2d2d2:	e7a2      	b.n	2d21a <gnss_interface_write+0x7a>
   2d2d4:	4608      	mov	r0, r1
   2d2d6:	a902      	add	r1, sp, #8
   2d2d8:	f000 fe4a 	bl	2df70 <rpc_gnss_serialize_location>
   2d2dc:	e79d      	b.n	2d21a <gnss_interface_write+0x7a>
   2d2de:	4608      	mov	r0, r1
   2d2e0:	a902      	add	r1, sp, #8
   2d2e2:	f000 fe03 	bl	2deec <rpc_gnss_serialize_nequick>
   2d2e6:	e798      	b.n	2d21a <gnss_interface_write+0x7a>
   2d2e8:	4608      	mov	r0, r1
   2d2ea:	a902      	add	r1, sp, #8
   2d2ec:	f000 fdda 	bl	2dea4 <rpc_gnss_serialize_klob>
   2d2f0:	e793      	b.n	2d21a <gnss_interface_write+0x7a>
   2d2f2:	4608      	mov	r0, r1
   2d2f4:	a902      	add	r1, sp, #8
   2d2f6:	f000 fda3 	bl	2de40 <rpc_gnss_serialize_alm>
   2d2fa:	e78e      	b.n	2d21a <gnss_interface_write+0x7a>
   2d2fc:	4608      	mov	r0, r1
   2d2fe:	a902      	add	r1, sp, #8
   2d300:	f000 fd4c 	bl	2dd9c <rpc_gnss_serialize_ephe>
   2d304:	e789      	b.n	2d21a <gnss_interface_write+0x7a>
   2d306:	4608      	mov	r0, r1
   2d308:	a902      	add	r1, sp, #8
   2d30a:	f000 fd25 	bl	2dd58 <rpc_gnss_serialize_utc>
   2d30e:	e784      	b.n	2d21a <gnss_interface_write+0x7a>
   2d310:	b128      	cbz	r0, 2d31e <gnss_interface_write+0x17e>
   2d312:	6803      	ldr	r3, [r0, #0]
   2d314:	b11b      	cbz	r3, 2d31e <gnss_interface_write+0x17e>
   2d316:	4618      	mov	r0, r3
   2d318:	f000 fe96 	bl	2e048 <rpc_gnss_client_data_free>
   2d31c:	9800      	ldr	r0, [sp, #0]
   2d31e:	f000 fe8b 	bl	2e038 <rpc_gnss_client_message_free>
   2d322:	2023      	movs	r0, #35	; 0x23
   2d324:	f7f5 fbea 	bl	22afc <bsd_os_errno_set>
   2d328:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d32c:	6823      	ldr	r3, [r4, #0]
   2d32e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   2d332:	6023      	str	r3, [r4, #0]
   2d334:	6823      	ldr	r3, [r4, #0]
   2d336:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2d33a:	6023      	str	r3, [r4, #0]
   2d33c:	b01f      	add	sp, #124	; 0x7c
   2d33e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2d342:	2016      	movs	r0, #22
   2d344:	f7f5 fbda 	bl	22afc <bsd_os_errno_set>
   2d348:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d34c:	b01f      	add	sp, #124	; 0x7c
   2d34e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2d352:	2039      	movs	r0, #57	; 0x39
   2d354:	f7f5 fbd2 	bl	22afc <bsd_os_errno_set>
   2d358:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d35c:	e756      	b.n	2d20c <gnss_interface_write+0x6c>
   2d35e:	2009      	movs	r0, #9
   2d360:	f7f5 fbcc 	bl	22afc <bsd_os_errno_set>
   2d364:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d368:	e750      	b.n	2d20c <gnss_interface_write+0x6c>
   2d36a:	202d      	movs	r0, #45	; 0x2d
   2d36c:	f7f5 fbc6 	bl	22afc <bsd_os_errno_set>
   2d370:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d374:	e74a      	b.n	2d20c <gnss_interface_write+0x6c>
   2d376:	bf00      	nop
   2d378:	49765443 	.word	0x49765443
   2d37c:	20022d20 	.word	0x20022d20
   2d380:	20024018 	.word	0x20024018
   2d384:	20022d24 	.word	0x20022d24
   2d388:	200295ac 	.word	0x200295ac

0002d38c <gnss_interface_read>:
   2d38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d390:	4c50      	ldr	r4, [pc, #320]	; (2d4d4 <gnss_interface_read+0x148>)
   2d392:	b0b7      	sub	sp, #220	; 0xdc
   2d394:	42a0      	cmp	r0, r4
   2d396:	f040 81fe 	bne.w	2d796 <gnss_interface_read+0x40a>
   2d39a:	4688      	mov	r8, r1
   2d39c:	2900      	cmp	r1, #0
   2d39e:	f000 81f4 	beq.w	2d78a <gnss_interface_read+0x3fe>
   2d3a2:	2ad7      	cmp	r2, #215	; 0xd7
   2d3a4:	f240 81f1 	bls.w	2d78a <gnss_interface_read+0x3fe>
   2d3a8:	4d4b      	ldr	r5, [pc, #300]	; (2d4d8 <gnss_interface_read+0x14c>)
   2d3aa:	4699      	mov	r9, r3
   2d3ac:	682b      	ldr	r3, [r5, #0]
   2d3ae:	b29b      	uxth	r3, r3
   2d3b0:	2b04      	cmp	r3, #4
   2d3b2:	d004      	beq.n	2d3be <gnss_interface_read+0x32>
   2d3b4:	682b      	ldr	r3, [r5, #0]
   2d3b6:	b29b      	uxth	r3, r3
   2d3b8:	2b02      	cmp	r3, #2
   2d3ba:	f040 81e0 	bne.w	2d77e <gnss_interface_read+0x3f2>
   2d3be:	f1b9 0f00 	cmp.w	r9, #0
   2d3c2:	d158      	bne.n	2d476 <gnss_interface_read+0xea>
   2d3c4:	2102      	movs	r1, #2
   2d3c6:	20b6      	movs	r0, #182	; 0xb6
   2d3c8:	2400      	movs	r4, #0
   2d3ca:	682b      	ldr	r3, [r5, #0]
   2d3cc:	f10d 020e 	add.w	r2, sp, #14
   2d3d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   2d3d4:	602b      	str	r3, [r5, #0]
   2d3d6:	f8df a108 	ldr.w	sl, [pc, #264]	; 2d4e0 <gnss_interface_read+0x154>
   2d3da:	ab08      	add	r3, sp, #32
   2d3dc:	4f3f      	ldr	r7, [pc, #252]	; (2d4dc <gnss_interface_read+0x150>)
   2d3de:	4e3d      	ldr	r6, [pc, #244]	; (2d4d4 <gnss_interface_read+0x148>)
   2d3e0:	9005      	str	r0, [sp, #20]
   2d3e2:	9107      	str	r1, [sp, #28]
   2d3e4:	9304      	str	r3, [sp, #16]
   2d3e6:	9206      	str	r2, [sp, #24]
   2d3e8:	ea09 0b01 	and.w	fp, r9, r1
   2d3ec:	f8da 0000 	ldr.w	r0, [sl]
   2d3f0:	464a      	mov	r2, r9
   2d3f2:	6803      	ldr	r3, [r0, #0]
   2d3f4:	a904      	add	r1, sp, #16
   2d3f6:	689b      	ldr	r3, [r3, #8]
   2d3f8:	4798      	blx	r3
   2d3fa:	2800      	cmp	r0, #0
   2d3fc:	da11      	bge.n	2d422 <gnss_interface_read+0x96>
   2d3fe:	f1bb 0f00 	cmp.w	fp, #0
   2d402:	d141      	bne.n	2d488 <gnss_interface_read+0xfc>
   2d404:	682b      	ldr	r3, [r5, #0]
   2d406:	03d8      	lsls	r0, r3, #15
   2d408:	d4f0      	bmi.n	2d3ec <gnss_interface_read+0x60>
   2d40a:	b10c      	cbz	r4, 2d410 <gnss_interface_read+0x84>
   2d40c:	e7ee      	b.n	2d3ec <gnss_interface_read+0x60>
   2d40e:	b930      	cbnz	r0, 2d41e <gnss_interface_read+0x92>
   2d410:	4639      	mov	r1, r7
   2d412:	4630      	mov	r0, r6
   2d414:	f7f5 fade 	bl	229d4 <bsd_os_timedwait>
   2d418:	682b      	ldr	r3, [r5, #0]
   2d41a:	03d9      	lsls	r1, r3, #15
   2d41c:	d5f7      	bpl.n	2d40e <gnss_interface_read+0x82>
   2d41e:	4604      	mov	r4, r0
   2d420:	e7e4      	b.n	2d3ec <gnss_interface_read+0x60>
   2d422:	f244 0202 	movw	r2, #16386	; 0x4002
   2d426:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   2d42a:	4293      	cmp	r3, r2
   2d42c:	d042      	beq.n	2d4b4 <gnss_interface_read+0x128>
   2d42e:	f244 0201 	movw	r2, #16385	; 0x4001
   2d432:	4293      	cmp	r3, r2
   2d434:	d056      	beq.n	2d4e4 <gnss_interface_read+0x158>
   2d436:	f244 0203 	movw	r2, #16387	; 0x4003
   2d43a:	4293      	cmp	r3, r2
   2d43c:	f040 81a5 	bne.w	2d78a <gnss_interface_read+0x3fe>
   2d440:	2203      	movs	r2, #3
   2d442:	2414      	movs	r4, #20
   2d444:	9b08      	ldr	r3, [sp, #32]
   2d446:	f888 2000 	strb.w	r2, [r8]
   2d44a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2d44c:	f8c8 3008 	str.w	r3, [r8, #8]
   2d450:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   2d454:	e9c8 2303 	strd	r2, r3, [r8, #12]
   2d458:	f8da 0000 	ldr.w	r0, [sl]
   2d45c:	6803      	ldr	r3, [r0, #0]
   2d45e:	68db      	ldr	r3, [r3, #12]
   2d460:	4798      	blx	r3
   2d462:	2800      	cmp	r0, #0
   2d464:	dd03      	ble.n	2d46e <gnss_interface_read+0xe2>
   2d466:	682b      	ldr	r3, [r5, #0]
   2d468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   2d46c:	602b      	str	r3, [r5, #0]
   2d46e:	4620      	mov	r0, r4
   2d470:	b037      	add	sp, #220	; 0xdc
   2d472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d476:	f019 0f0a 	tst.w	r9, #10
   2d47a:	d1a3      	bne.n	2d3c4 <gnss_interface_read+0x38>
   2d47c:	202d      	movs	r0, #45	; 0x2d
   2d47e:	f7f5 fb3d 	bl	22afc <bsd_os_errno_set>
   2d482:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2d486:	e7f2      	b.n	2d46e <gnss_interface_read+0xe2>
   2d488:	1c42      	adds	r2, r0, #1
   2d48a:	4603      	mov	r3, r0
   2d48c:	d1c9      	bne.n	2d422 <gnss_interface_read+0x96>
   2d48e:	b93c      	cbnz	r4, 2d4a0 <gnss_interface_read+0x114>
   2d490:	461c      	mov	r4, r3
   2d492:	2023      	movs	r0, #35	; 0x23
   2d494:	f7f5 fb32 	bl	22afc <bsd_os_errno_set>
   2d498:	4620      	mov	r0, r4
   2d49a:	b037      	add	sp, #220	; 0xdc
   2d49c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d4a0:	9001      	str	r0, [sp, #4]
   2d4a2:	4620      	mov	r0, r4
   2d4a4:	f7f5 fb2a 	bl	22afc <bsd_os_errno_set>
   2d4a8:	9b01      	ldr	r3, [sp, #4]
   2d4aa:	461c      	mov	r4, r3
   2d4ac:	4620      	mov	r0, r4
   2d4ae:	b037      	add	sp, #220	; 0xdc
   2d4b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d4b4:	a808      	add	r0, sp, #32
   2d4b6:	f7ef fe1b 	bl	1d0f0 <strlen>
   2d4ba:	2302      	movs	r3, #2
   2d4bc:	1c44      	adds	r4, r0, #1
   2d4be:	b2a4      	uxth	r4, r4
   2d4c0:	f808 3b08 	strb.w	r3, [r8], #8
   2d4c4:	4622      	mov	r2, r4
   2d4c6:	a908      	add	r1, sp, #32
   2d4c8:	4640      	mov	r0, r8
   2d4ca:	f008 fb1d 	bl	35b08 <memcpy>
   2d4ce:	3408      	adds	r4, #8
   2d4d0:	e7c2      	b.n	2d458 <gnss_interface_read+0xcc>
   2d4d2:	bf00      	nop
   2d4d4:	49765443 	.word	0x49765443
   2d4d8:	20022d20 	.word	0x20022d20
   2d4dc:	200295ac 	.word	0x200295ac
   2d4e0:	20022d28 	.word	0x20022d28
   2d4e4:	2401      	movs	r4, #1
   2d4e6:	a809      	add	r0, sp, #36	; 0x24
   2d4e8:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   2d4ea:	e9c8 0102 	strd	r0, r1, [r8, #8]
   2d4ee:	e9c8 2304 	strd	r2, r3, [r8, #16]
   2d4f2:	990d      	ldr	r1, [sp, #52]	; 0x34
   2d4f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2d4f6:	f888 4000 	strb.w	r4, [r8]
   2d4fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2d4fc:	f8c8 1018 	str.w	r1, [r8, #24]
   2d500:	9910      	ldr	r1, [sp, #64]	; 0x40
   2d502:	f8c8 201c 	str.w	r2, [r8, #28]
   2d506:	f8c8 3020 	str.w	r3, [r8, #32]
   2d50a:	f89d 205d 	ldrb.w	r2, [sp, #93]	; 0x5d
   2d50e:	f8dd 304d 	ldr.w	r3, [sp, #77]	; 0x4d
   2d512:	f8c8 1024 	str.w	r1, [r8, #36]	; 0x24
   2d516:	f8dd 1051 	ldr.w	r1, [sp, #81]	; 0x51
   2d51a:	f888 2044 	strb.w	r2, [r8, #68]	; 0x44
   2d51e:	f8dd 2055 	ldr.w	r2, [sp, #85]	; 0x55
   2d522:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
   2d526:	f8dd 3059 	ldr.w	r3, [sp, #89]	; 0x59
   2d52a:	f8c8 1038 	str.w	r1, [r8, #56]	; 0x38
   2d52e:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   2d532:	f8c8 203c 	str.w	r2, [r8, #60]	; 0x3c
   2d536:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
   2d53a:	f8dd 2046 	ldr.w	r2, [sp, #70]	; 0x46
   2d53e:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   2d542:	f8a8 1028 	strh.w	r1, [r8, #40]	; 0x28
   2d546:	f888 302e 	strb.w	r3, [r8, #46]	; 0x2e
   2d54a:	f8c8 202a 	str.w	r2, [r8, #42]	; 0x2a
   2d54e:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   2d552:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
   2d556:	9b18      	ldr	r3, [sp, #96]	; 0x60
   2d558:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
   2d55c:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   2d560:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
   2d564:	f3c3 210f 	ubfx	r1, r3, #8, #16
   2d568:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   2d56a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   2d56e:	f8a8 0030 	strh.w	r0, [r8, #48]	; 0x30
   2d572:	f8a8 104a 	strh.w	r1, [r8, #74]	; 0x4a
   2d576:	f8bd 105e 	ldrh.w	r1, [sp, #94]	; 0x5e
   2d57a:	f3c3 230f 	ubfx	r3, r3, #8, #16
   2d57e:	f8a8 2056 	strh.w	r2, [r8, #86]	; 0x56
   2d582:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
   2d586:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
   2d58a:	f8dd 3063 	ldr.w	r3, [sp, #99]	; 0x63
   2d58e:	f8a8 1046 	strh.w	r1, [r8, #70]	; 0x46
   2d592:	f888 2048 	strb.w	r2, [r8, #72]	; 0x48
   2d596:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
   2d59a:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   2d59e:	f8c8 304c 	str.w	r3, [r8, #76]	; 0x4c
   2d5a2:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
   2d5a6:	f888 1050 	strb.w	r1, [r8, #80]	; 0x50
   2d5aa:	f8a8 2052 	strh.w	r2, [r8, #82]	; 0x52
   2d5ae:	f888 3054 	strb.w	r3, [r8, #84]	; 0x54
   2d5b2:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
   2d5b6:	f8dd 106d 	ldr.w	r1, [sp, #109]	; 0x6d
   2d5ba:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
   2d5be:	f8c8 1058 	str.w	r1, [r8, #88]	; 0x58
   2d5c2:	f888 205c 	strb.w	r2, [r8, #92]	; 0x5c
   2d5c6:	f89d 1074 	ldrb.w	r1, [sp, #116]	; 0x74
   2d5ca:	f8dd 2077 	ldr.w	r2, [sp, #119]	; 0x77
   2d5ce:	f8a8 305e 	strh.w	r3, [r8, #94]	; 0x5e
   2d5d2:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
   2d5d6:	f888 1060 	strb.w	r1, [r8, #96]	; 0x60
   2d5da:	f8c8 2064 	str.w	r2, [r8, #100]	; 0x64
   2d5de:	f888 3068 	strb.w	r3, [r8, #104]	; 0x68
   2d5e2:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
   2d5e6:	f89d 107f 	ldrb.w	r1, [sp, #127]	; 0x7f
   2d5ea:	9a22      	ldr	r2, [sp, #136]	; 0x88
   2d5ec:	f89d 0094 	ldrb.w	r0, [sp, #148]	; 0x94
   2d5f0:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   2d5f4:	f89d 3093 	ldrb.w	r3, [sp, #147]	; 0x93
   2d5f8:	f3c2 220f 	ubfx	r2, r2, #8, #16
   2d5fc:	f8a8 106e 	strh.w	r1, [r8, #110]	; 0x6e
   2d600:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
   2d604:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   2d608:	f8a8 207a 	strh.w	r2, [r8, #122]	; 0x7a
   2d60c:	f89d 207e 	ldrb.w	r2, [sp, #126]	; 0x7e
   2d610:	f8a8 3086 	strh.w	r3, [r8, #134]	; 0x86
   2d614:	f8dd 3081 	ldr.w	r3, [sp, #129]	; 0x81
   2d618:	f8a8 106a 	strh.w	r1, [r8, #106]	; 0x6a
   2d61c:	f888 206c 	strb.w	r2, [r8, #108]	; 0x6c
   2d620:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
   2d624:	f89d 1085 	ldrb.w	r1, [sp, #133]	; 0x85
   2d628:	f8c8 3070 	str.w	r3, [r8, #112]	; 0x70
   2d62c:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
   2d630:	f888 1074 	strb.w	r1, [r8, #116]	; 0x74
   2d634:	f8a8 2076 	strh.w	r2, [r8, #118]	; 0x76
   2d638:	f888 3078 	strb.w	r3, [r8, #120]	; 0x78
   2d63c:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
   2d640:	f8dd 108b 	ldr.w	r1, [sp, #139]	; 0x8b
   2d644:	f89d 208f 	ldrb.w	r2, [sp, #143]	; 0x8f
   2d648:	f8c8 107c 	str.w	r1, [r8, #124]	; 0x7c
   2d64c:	f888 2080 	strb.w	r2, [r8, #128]	; 0x80
   2d650:	f89d 1092 	ldrb.w	r1, [sp, #146]	; 0x92
   2d654:	f8dd 2095 	ldr.w	r2, [sp, #149]	; 0x95
   2d658:	f8a8 3082 	strh.w	r3, [r8, #130]	; 0x82
   2d65c:	f89d 3099 	ldrb.w	r3, [sp, #153]	; 0x99
   2d660:	f888 1084 	strb.w	r1, [r8, #132]	; 0x84
   2d664:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
   2d668:	f888 308c 	strb.w	r3, [r8, #140]	; 0x8c
   2d66c:	f8bd 009a 	ldrh.w	r0, [sp, #154]	; 0x9a
   2d670:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   2d672:	f89d 40a8 	ldrb.w	r4, [sp, #168]	; 0xa8
   2d676:	f89d 20a7 	ldrb.w	r2, [sp, #167]	; 0xa7
   2d67a:	f3c3 210f 	ubfx	r1, r3, #8, #16
   2d67e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   2d680:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   2d684:	f8a8 1092 	strh.w	r1, [r8, #146]	; 0x92
   2d688:	f89d 109c 	ldrb.w	r1, [sp, #156]	; 0x9c
   2d68c:	f8a8 209e 	strh.w	r2, [r8, #158]	; 0x9e
   2d690:	f3c3 230f 	ubfx	r3, r3, #8, #16
   2d694:	f8dd 209f 	ldr.w	r2, [sp, #159]	; 0x9f
   2d698:	f8a8 008e 	strh.w	r0, [r8, #142]	; 0x8e
   2d69c:	f8a8 30aa 	strh.w	r3, [r8, #170]	; 0xaa
   2d6a0:	f888 1090 	strb.w	r1, [r8, #144]	; 0x90
   2d6a4:	f89d 30a3 	ldrb.w	r3, [sp, #163]	; 0xa3
   2d6a8:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	; 0xa4
   2d6ac:	f8c8 2094 	str.w	r2, [r8, #148]	; 0x94
   2d6b0:	f89d 20a6 	ldrb.w	r2, [sp, #166]	; 0xa6
   2d6b4:	f888 3098 	strb.w	r3, [r8, #152]	; 0x98
   2d6b8:	f8dd 30a9 	ldr.w	r3, [sp, #169]	; 0xa9
   2d6bc:	f8a8 109a 	strh.w	r1, [r8, #154]	; 0x9a
   2d6c0:	f888 209c 	strb.w	r2, [r8, #156]	; 0x9c
   2d6c4:	f8bd 20ae 	ldrh.w	r2, [sp, #174]	; 0xae
   2d6c8:	f89d 10ad 	ldrb.w	r1, [sp, #173]	; 0xad
   2d6cc:	f8c8 30a0 	str.w	r3, [r8, #160]	; 0xa0
   2d6d0:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
   2d6d4:	f888 10a4 	strb.w	r1, [r8, #164]	; 0xa4
   2d6d8:	f8a8 20a6 	strh.w	r2, [r8, #166]	; 0xa6
   2d6dc:	f888 30a8 	strb.w	r3, [r8, #168]	; 0xa8
   2d6e0:	f8bd 30b8 	ldrh.w	r3, [sp, #184]	; 0xb8
   2d6e4:	f8dd 10b3 	ldr.w	r1, [sp, #179]	; 0xb3
   2d6e8:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
   2d6ec:	f8c8 10ac 	str.w	r1, [r8, #172]	; 0xac
   2d6f0:	f888 20b0 	strb.w	r2, [r8, #176]	; 0xb0
   2d6f4:	f8a8 30b2 	strh.w	r3, [r8, #178]	; 0xb2
   2d6f8:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
   2d6fc:	f89d 10bb 	ldrb.w	r1, [sp, #187]	; 0xbb
   2d700:	f89d 00d0 	ldrb.w	r0, [sp, #208]	; 0xd0
   2d704:	9a31      	ldr	r2, [sp, #196]	; 0xc4
   2d706:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   2d70a:	f89d 30cf 	ldrb.w	r3, [sp, #207]	; 0xcf
   2d70e:	f89d 40ba 	ldrb.w	r4, [sp, #186]	; 0xba
   2d712:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   2d716:	f3c2 220f 	ubfx	r2, r2, #8, #16
   2d71a:	f8a8 10b6 	strh.w	r1, [r8, #182]	; 0xb6
   2d71e:	f8a8 30ce 	strh.w	r3, [r8, #206]	; 0xce
   2d722:	f888 40b4 	strb.w	r4, [r8, #180]	; 0xb4
   2d726:	f8a8 20c2 	strh.w	r2, [r8, #194]	; 0xc2
   2d72a:	f8bd 20c2 	ldrh.w	r2, [sp, #194]	; 0xc2
   2d72e:	f89d 10c1 	ldrb.w	r1, [sp, #193]	; 0xc1
   2d732:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
   2d736:	f8dd 00bd 	ldr.w	r0, [sp, #189]	; 0xbd
   2d73a:	f888 10bc 	strb.w	r1, [r8, #188]	; 0xbc
   2d73e:	f8a8 20be 	strh.w	r2, [r8, #190]	; 0xbe
   2d742:	f8c8 00b8 	str.w	r0, [r8, #184]	; 0xb8
   2d746:	f888 30c0 	strb.w	r3, [r8, #192]	; 0xc0
   2d74a:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
   2d74e:	f8dd 10c7 	ldr.w	r1, [sp, #199]	; 0xc7
   2d752:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
   2d756:	f8c8 10c4 	str.w	r1, [r8, #196]	; 0xc4
   2d75a:	f888 20c8 	strb.w	r2, [r8, #200]	; 0xc8
   2d75e:	f89d 10ce 	ldrb.w	r1, [sp, #206]	; 0xce
   2d762:	f8dd 20d1 	ldr.w	r2, [sp, #209]	; 0xd1
   2d766:	f8a8 30ca 	strh.w	r3, [r8, #202]	; 0xca
   2d76a:	f89d 30d5 	ldrb.w	r3, [sp, #213]	; 0xd5
   2d76e:	f888 10cc 	strb.w	r1, [r8, #204]	; 0xcc
   2d772:	f8c8 20d0 	str.w	r2, [r8, #208]	; 0xd0
   2d776:	f888 30d4 	strb.w	r3, [r8, #212]	; 0xd4
   2d77a:	24d8      	movs	r4, #216	; 0xd8
   2d77c:	e66c      	b.n	2d458 <gnss_interface_read+0xcc>
   2d77e:	2039      	movs	r0, #57	; 0x39
   2d780:	f7f5 f9bc 	bl	22afc <bsd_os_errno_set>
   2d784:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2d788:	e671      	b.n	2d46e <gnss_interface_read+0xe2>
   2d78a:	2016      	movs	r0, #22
   2d78c:	f7f5 f9b6 	bl	22afc <bsd_os_errno_set>
   2d790:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2d794:	e66b      	b.n	2d46e <gnss_interface_read+0xe2>
   2d796:	2009      	movs	r0, #9
   2d798:	f7f5 f9b0 	bl	22afc <bsd_os_errno_set>
   2d79c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2d7a0:	e665      	b.n	2d46e <gnss_interface_read+0xe2>
   2d7a2:	bf00      	nop

0002d7a4 <gnss_interface_setopt>:
   2d7a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2d7a8:	f241 1402 	movw	r4, #4354	; 0x1102
   2d7ac:	4222      	tst	r2, r4
   2d7ae:	b086      	sub	sp, #24
   2d7b0:	4d9c      	ldr	r5, [pc, #624]	; (2da24 <gnss_interface_setopt+0x280>)
   2d7b2:	d004      	beq.n	2d7be <gnss_interface_setopt+0x1a>
   2d7b4:	682c      	ldr	r4, [r5, #0]
   2d7b6:	b2a4      	uxth	r4, r4
   2d7b8:	2c02      	cmp	r4, #2
   2d7ba:	f040 8104 	bne.w	2d9c6 <gnss_interface_setopt+0x222>
   2d7be:	682c      	ldr	r4, [r5, #0]
   2d7c0:	0264      	lsls	r4, r4, #9
   2d7c2:	f100 8128 	bmi.w	2da16 <gnss_interface_setopt+0x272>
   2d7c6:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   2d7ca:	f040 811e 	bne.w	2da0a <gnss_interface_setopt+0x266>
   2d7ce:	4996      	ldr	r1, [pc, #600]	; (2da28 <gnss_interface_setopt+0x284>)
   2d7d0:	4288      	cmp	r0, r1
   2d7d2:	f040 8114 	bne.w	2d9fe <gnss_interface_setopt+0x25a>
   2d7d6:	3a01      	subs	r2, #1
   2d7d8:	2a08      	cmp	r2, #8
   2d7da:	f200 80ec 	bhi.w	2d9b6 <gnss_interface_setopt+0x212>
   2d7de:	e8df f012 	tbh	[pc, r2, lsl #1]
   2d7e2:	0075      	.short	0x0075
   2d7e4:	00c200d8 	.word	0x00c200d8
   2d7e8:	008100cc 	.word	0x008100cc
   2d7ec:	0098008c 	.word	0x0098008c
   2d7f0:	000900af 	.word	0x000900af
   2d7f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2d7f6:	2a01      	cmp	r2, #1
   2d7f8:	f040 80dd 	bne.w	2d9b6 <gnss_interface_setopt+0x212>
   2d7fc:	f241 1603 	movw	r6, #4355	; 0x1103
   2d800:	2240      	movs	r2, #64	; 0x40
   2d802:	4637      	mov	r7, r6
   2d804:	781b      	ldrb	r3, [r3, #0]
   2d806:	9202      	str	r2, [sp, #8]
   2d808:	f88d 3015 	strb.w	r3, [sp, #21]
   2d80c:	682b      	ldr	r3, [r5, #0]
   2d80e:	2112      	movs	r1, #18
   2d810:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   2d814:	4668      	mov	r0, sp
   2d816:	602b      	str	r3, [r5, #0]
   2d818:	f000 fbe4 	bl	2dfe4 <rpc_gnss_client_request_alloc>
   2d81c:	4604      	mov	r4, r0
   2d81e:	9800      	ldr	r0, [sp, #0]
   2d820:	2c00      	cmp	r4, #0
   2d822:	f040 80d6 	bne.w	2d9d2 <gnss_interface_setopt+0x22e>
   2d826:	2800      	cmp	r0, #0
   2d828:	f000 80da 	beq.w	2d9e0 <gnss_interface_setopt+0x23c>
   2d82c:	2212      	movs	r2, #18
   2d82e:	f04f 0876 	mov.w	r8, #118	; 0x76
   2d832:	f04f 0e49 	mov.w	lr, #73	; 0x49
   2d836:	f04f 0a43 	mov.w	sl, #67	; 0x43
   2d83a:	f04f 0954 	mov.w	r9, #84	; 0x54
   2d83e:	f8df c1f0 	ldr.w	ip, [pc, #496]	; 2da30 <gnss_interface_setopt+0x28c>
   2d842:	a906      	add	r1, sp, #24
   2d844:	f8bc 3000 	ldrh.w	r3, [ip]
   2d848:	f880 800e 	strb.w	r8, [r0, #14]
   2d84c:	3301      	adds	r3, #1
   2d84e:	b29b      	uxth	r3, r3
   2d850:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
   2d854:	f841 6d14 	str.w	r6, [r1, #-20]!
   2d858:	7144      	strb	r4, [r0, #5]
   2d85a:	7184      	strb	r4, [r0, #6]
   2d85c:	71c4      	strb	r4, [r0, #7]
   2d85e:	7204      	strb	r4, [r0, #8]
   2d860:	7244      	strb	r4, [r0, #9]
   2d862:	7284      	strb	r4, [r0, #10]
   2d864:	72c4      	strb	r4, [r0, #11]
   2d866:	7102      	strb	r2, [r0, #4]
   2d868:	f880 a00c 	strb.w	sl, [r0, #12]
   2d86c:	f880 900d 	strb.w	r9, [r0, #13]
   2d870:	f880 e00f 	strb.w	lr, [r0, #15]
   2d874:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 2da34 <gnss_interface_setopt+0x290>
   2d878:	6800      	ldr	r0, [r0, #0]
   2d87a:	f8ac 3000 	strh.w	r3, [ip]
   2d87e:	f008 f943 	bl	35b08 <memcpy>
   2d882:	4639      	mov	r1, r7
   2d884:	9800      	ldr	r0, [sp, #0]
   2d886:	f8c8 4000 	str.w	r4, [r8]
   2d88a:	f000 fbbf 	bl	2e00c <rpc_gnss_client_request_send>
   2d88e:	2800      	cmp	r0, #0
   2d890:	f040 80ab 	bne.w	2d9ea <gnss_interface_setopt+0x246>
   2d894:	4f65      	ldr	r7, [pc, #404]	; (2da2c <gnss_interface_setopt+0x288>)
   2d896:	4e64      	ldr	r6, [pc, #400]	; (2da28 <gnss_interface_setopt+0x284>)
   2d898:	4639      	mov	r1, r7
   2d89a:	4630      	mov	r0, r6
   2d89c:	f7f5 f89a 	bl	229d4 <bsd_os_timedwait>
   2d8a0:	682c      	ldr	r4, [r5, #0]
   2d8a2:	f414 0480 	ands.w	r4, r4, #4194304	; 0x400000
   2d8a6:	d1f7      	bne.n	2d898 <gnss_interface_setopt+0xf4>
   2d8a8:	f8d8 0000 	ldr.w	r0, [r8]
   2d8ac:	b118      	cbz	r0, 2d8b6 <gnss_interface_setopt+0x112>
   2d8ae:	f000 fbcb 	bl	2e048 <rpc_gnss_client_data_free>
   2d8b2:	f8c8 4000 	str.w	r4, [r8]
   2d8b6:	682b      	ldr	r3, [r5, #0]
   2d8b8:	021b      	lsls	r3, r3, #8
   2d8ba:	d576      	bpl.n	2d9aa <gnss_interface_setopt+0x206>
   2d8bc:	2000      	movs	r0, #0
   2d8be:	682b      	ldr	r3, [r5, #0]
   2d8c0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   2d8c4:	602b      	str	r3, [r5, #0]
   2d8c6:	b006      	add	sp, #24
   2d8c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2d8cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2d8ce:	2a02      	cmp	r2, #2
   2d8d0:	d171      	bne.n	2d9b6 <gnss_interface_setopt+0x212>
   2d8d2:	2208      	movs	r2, #8
   2d8d4:	f241 1603 	movw	r6, #4355	; 0x1103
   2d8d8:	881b      	ldrh	r3, [r3, #0]
   2d8da:	9202      	str	r2, [sp, #8]
   2d8dc:	f8ad 300f 	strh.w	r3, [sp, #15]
   2d8e0:	4637      	mov	r7, r6
   2d8e2:	e793      	b.n	2d80c <gnss_interface_setopt+0x68>
   2d8e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2d8e6:	2a01      	cmp	r2, #1
   2d8e8:	d165      	bne.n	2d9b6 <gnss_interface_setopt+0x212>
   2d8ea:	f241 1603 	movw	r6, #4355	; 0x1103
   2d8ee:	781b      	ldrb	r3, [r3, #0]
   2d8f0:	9202      	str	r2, [sp, #8]
   2d8f2:	f88d 300c 	strb.w	r3, [sp, #12]
   2d8f6:	4637      	mov	r7, r6
   2d8f8:	e788      	b.n	2d80c <gnss_interface_setopt+0x68>
   2d8fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2d8fc:	2a01      	cmp	r2, #1
   2d8fe:	d15a      	bne.n	2d9b6 <gnss_interface_setopt+0x212>
   2d900:	2202      	movs	r2, #2
   2d902:	f241 1603 	movw	r6, #4355	; 0x1103
   2d906:	781b      	ldrb	r3, [r3, #0]
   2d908:	9202      	str	r2, [sp, #8]
   2d90a:	f88d 300d 	strb.w	r3, [sp, #13]
   2d90e:	4637      	mov	r7, r6
   2d910:	e77c      	b.n	2d80c <gnss_interface_setopt+0x68>
   2d912:	682a      	ldr	r2, [r5, #0]
   2d914:	b292      	uxth	r2, r2
   2d916:	2a02      	cmp	r2, #2
   2d918:	d155      	bne.n	2d9c6 <gnss_interface_setopt+0x222>
   2d91a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2d91c:	2a04      	cmp	r2, #4
   2d91e:	d14a      	bne.n	2d9b6 <gnss_interface_setopt+0x212>
   2d920:	2101      	movs	r1, #1
   2d922:	f241 0604 	movw	r6, #4100	; 0x1004
   2d926:	682a      	ldr	r2, [r5, #0]
   2d928:	6818      	ldr	r0, [r3, #0]
   2d92a:	0c13      	lsrs	r3, r2, #16
   2d92c:	041b      	lsls	r3, r3, #16
   2d92e:	f043 0303 	orr.w	r3, r3, #3
   2d932:	f8cd 0009 	str.w	r0, [sp, #9]
   2d936:	602b      	str	r3, [r5, #0]
   2d938:	f88d 1008 	strb.w	r1, [sp, #8]
   2d93c:	4637      	mov	r7, r6
   2d93e:	e765      	b.n	2d80c <gnss_interface_setopt+0x68>
   2d940:	682b      	ldr	r3, [r5, #0]
   2d942:	b29b      	uxth	r3, r3
   2d944:	2b04      	cmp	r3, #4
   2d946:	d13e      	bne.n	2d9c6 <gnss_interface_setopt+0x222>
   2d948:	2300      	movs	r3, #0
   2d94a:	f241 0604 	movw	r6, #4100	; 0x1004
   2d94e:	f88d 3008 	strb.w	r3, [sp, #8]
   2d952:	f88d 3009 	strb.w	r3, [sp, #9]
   2d956:	f88d 300a 	strb.w	r3, [sp, #10]
   2d95a:	f88d 300b 	strb.w	r3, [sp, #11]
   2d95e:	f88d 300c 	strb.w	r3, [sp, #12]
   2d962:	4637      	mov	r7, r6
   2d964:	e752      	b.n	2d80c <gnss_interface_setopt+0x68>
   2d966:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2d968:	2a01      	cmp	r2, #1
   2d96a:	d124      	bne.n	2d9b6 <gnss_interface_setopt+0x212>
   2d96c:	781b      	ldrb	r3, [r3, #0]
   2d96e:	2b01      	cmp	r3, #1
   2d970:	d121      	bne.n	2d9b6 <gnss_interface_setopt+0x212>
   2d972:	f241 1603 	movw	r6, #4355	; 0x1103
   2d976:	4637      	mov	r7, r6
   2d978:	e748      	b.n	2d80c <gnss_interface_setopt+0x68>
   2d97a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2d97c:	2a02      	cmp	r2, #2
   2d97e:	d11a      	bne.n	2d9b6 <gnss_interface_setopt+0x212>
   2d980:	2220      	movs	r2, #32
   2d982:	f241 1603 	movw	r6, #4355	; 0x1103
   2d986:	881b      	ldrh	r3, [r3, #0]
   2d988:	9202      	str	r2, [sp, #8]
   2d98a:	f8ad 3013 	strh.w	r3, [sp, #19]
   2d98e:	4637      	mov	r7, r6
   2d990:	e73c      	b.n	2d80c <gnss_interface_setopt+0x68>
   2d992:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2d994:	2a02      	cmp	r2, #2
   2d996:	d10e      	bne.n	2d9b6 <gnss_interface_setopt+0x212>
   2d998:	2210      	movs	r2, #16
   2d99a:	f241 1603 	movw	r6, #4355	; 0x1103
   2d99e:	881b      	ldrh	r3, [r3, #0]
   2d9a0:	9202      	str	r2, [sp, #8]
   2d9a2:	f8ad 3011 	strh.w	r3, [sp, #17]
   2d9a6:	4637      	mov	r7, r6
   2d9a8:	e730      	b.n	2d80c <gnss_interface_setopt+0x68>
   2d9aa:	200e      	movs	r0, #14
   2d9ac:	f7f5 f8a6 	bl	22afc <bsd_os_errno_set>
   2d9b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d9b4:	e783      	b.n	2d8be <gnss_interface_setopt+0x11a>
   2d9b6:	2016      	movs	r0, #22
   2d9b8:	f7f5 f8a0 	bl	22afc <bsd_os_errno_set>
   2d9bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d9c0:	b006      	add	sp, #24
   2d9c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2d9c6:	200e      	movs	r0, #14
   2d9c8:	f7f5 f898 	bl	22afc <bsd_os_errno_set>
   2d9cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d9d0:	e779      	b.n	2d8c6 <gnss_interface_setopt+0x122>
   2d9d2:	b128      	cbz	r0, 2d9e0 <gnss_interface_setopt+0x23c>
   2d9d4:	6803      	ldr	r3, [r0, #0]
   2d9d6:	b11b      	cbz	r3, 2d9e0 <gnss_interface_setopt+0x23c>
   2d9d8:	4618      	mov	r0, r3
   2d9da:	f000 fb35 	bl	2e048 <rpc_gnss_client_data_free>
   2d9de:	9800      	ldr	r0, [sp, #0]
   2d9e0:	f000 fb2a 	bl	2e038 <rpc_gnss_client_message_free>
   2d9e4:	2023      	movs	r0, #35	; 0x23
   2d9e6:	f7f5 f889 	bl	22afc <bsd_os_errno_set>
   2d9ea:	682b      	ldr	r3, [r5, #0]
   2d9ec:	200e      	movs	r0, #14
   2d9ee:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   2d9f2:	602b      	str	r3, [r5, #0]
   2d9f4:	f7f5 f882 	bl	22afc <bsd_os_errno_set>
   2d9f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d9fc:	e763      	b.n	2d8c6 <gnss_interface_setopt+0x122>
   2d9fe:	2009      	movs	r0, #9
   2da00:	f7f5 f87c 	bl	22afc <bsd_os_errno_set>
   2da04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2da08:	e75d      	b.n	2d8c6 <gnss_interface_setopt+0x122>
   2da0a:	202a      	movs	r0, #42	; 0x2a
   2da0c:	f7f5 f876 	bl	22afc <bsd_os_errno_set>
   2da10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2da14:	e757      	b.n	2d8c6 <gnss_interface_setopt+0x122>
   2da16:	2073      	movs	r0, #115	; 0x73
   2da18:	f7f5 f870 	bl	22afc <bsd_os_errno_set>
   2da1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2da20:	e751      	b.n	2d8c6 <gnss_interface_setopt+0x122>
   2da22:	bf00      	nop
   2da24:	20022d20 	.word	0x20022d20
   2da28:	49765443 	.word	0x49765443
   2da2c:	200295ac 	.word	0x200295ac
   2da30:	20024018 	.word	0x20024018
   2da34:	20022d24 	.word	0x20022d24

0002da38 <gnss_interface_getopt>:
   2da38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2da3c:	4c81      	ldr	r4, [pc, #516]	; (2dc44 <gnss_interface_getopt+0x20c>)
   2da3e:	b087      	sub	sp, #28
   2da40:	6825      	ldr	r5, [r4, #0]
   2da42:	4698      	mov	r8, r3
   2da44:	b2ad      	uxth	r5, r5
   2da46:	2d02      	cmp	r5, #2
   2da48:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2da4a:	f040 80dd 	bne.w	2dc08 <gnss_interface_getopt+0x1d0>
   2da4e:	6825      	ldr	r5, [r4, #0]
   2da50:	03ee      	lsls	r6, r5, #15
   2da52:	f100 80eb 	bmi.w	2dc2c <gnss_interface_getopt+0x1f4>
   2da56:	6825      	ldr	r5, [r4, #0]
   2da58:	01ed      	lsls	r5, r5, #7
   2da5a:	f100 80ed 	bmi.w	2dc38 <gnss_interface_getopt+0x200>
   2da5e:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   2da62:	f040 80d7 	bne.w	2dc14 <gnss_interface_getopt+0x1dc>
   2da66:	4978      	ldr	r1, [pc, #480]	; (2dc48 <gnss_interface_getopt+0x210>)
   2da68:	4288      	cmp	r0, r1
   2da6a:	f040 80d9 	bne.w	2dc20 <gnss_interface_getopt+0x1e8>
   2da6e:	f1b8 0f00 	cmp.w	r8, #0
   2da72:	d00b      	beq.n	2da8c <gnss_interface_getopt+0x54>
   2da74:	b153      	cbz	r3, 2da8c <gnss_interface_getopt+0x54>
   2da76:	1e57      	subs	r7, r2, #1
   2da78:	2f05      	cmp	r7, #5
   2da7a:	d807      	bhi.n	2da8c <gnss_interface_getopt+0x54>
   2da7c:	e8df f007 	tbb	[pc, r7]
   2da80:	0f030f0f 	.word	0x0f030f0f
   2da84:	0303      	.short	0x0303
   2da86:	681b      	ldr	r3, [r3, #0]
   2da88:	2b01      	cmp	r3, #1
   2da8a:	d00b      	beq.n	2daa4 <gnss_interface_getopt+0x6c>
   2da8c:	2016      	movs	r0, #22
   2da8e:	f7f5 f835 	bl	22afc <bsd_os_errno_set>
   2da92:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2da96:	4628      	mov	r0, r5
   2da98:	b007      	add	sp, #28
   2da9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2da9e:	681b      	ldr	r3, [r3, #0]
   2daa0:	2b02      	cmp	r3, #2
   2daa2:	d1f3      	bne.n	2da8c <gnss_interface_getopt+0x54>
   2daa4:	6823      	ldr	r3, [r4, #0]
   2daa6:	2212      	movs	r2, #18
   2daa8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   2daac:	2100      	movs	r1, #0
   2daae:	a801      	add	r0, sp, #4
   2dab0:	6023      	str	r3, [r4, #0]
   2dab2:	f008 f849 	bl	35b48 <memset>
   2dab6:	2112      	movs	r1, #18
   2dab8:	4668      	mov	r0, sp
   2daba:	f000 fa93 	bl	2dfe4 <rpc_gnss_client_request_alloc>
   2dabe:	4605      	mov	r5, r0
   2dac0:	9800      	ldr	r0, [sp, #0]
   2dac2:	2d00      	cmp	r5, #0
   2dac4:	f040 808a 	bne.w	2dbdc <gnss_interface_getopt+0x1a4>
   2dac8:	2800      	cmp	r0, #0
   2daca:	f000 808e 	beq.w	2dbea <gnss_interface_getopt+0x1b2>
   2dace:	f241 1602 	movw	r6, #4354	; 0x1102
   2dad2:	f04f 0e49 	mov.w	lr, #73	; 0x49
   2dad6:	2212      	movs	r2, #18
   2dad8:	f04f 0976 	mov.w	r9, #118	; 0x76
   2dadc:	f04f 0b43 	mov.w	fp, #67	; 0x43
   2dae0:	f04f 0a54 	mov.w	sl, #84	; 0x54
   2dae4:	f8df c168 	ldr.w	ip, [pc, #360]	; 2dc50 <gnss_interface_getopt+0x218>
   2dae8:	f880 e00f 	strb.w	lr, [r0, #15]
   2daec:	f8bc 3000 	ldrh.w	r3, [ip]
   2daf0:	f880 900e 	strb.w	r9, [r0, #14]
   2daf4:	3301      	adds	r3, #1
   2daf6:	b29b      	uxth	r3, r3
   2daf8:	ea46 4e03 	orr.w	lr, r6, r3, lsl #16
   2dafc:	f8cd e004 	str.w	lr, [sp, #4]
   2db00:	7145      	strb	r5, [r0, #5]
   2db02:	7185      	strb	r5, [r0, #6]
   2db04:	71c5      	strb	r5, [r0, #7]
   2db06:	7205      	strb	r5, [r0, #8]
   2db08:	7245      	strb	r5, [r0, #9]
   2db0a:	7285      	strb	r5, [r0, #10]
   2db0c:	72c5      	strb	r5, [r0, #11]
   2db0e:	a901      	add	r1, sp, #4
   2db10:	7102      	strb	r2, [r0, #4]
   2db12:	f880 b00c 	strb.w	fp, [r0, #12]
   2db16:	f880 a00d 	strb.w	sl, [r0, #13]
   2db1a:	f8df 9138 	ldr.w	r9, [pc, #312]	; 2dc54 <gnss_interface_getopt+0x21c>
   2db1e:	6800      	ldr	r0, [r0, #0]
   2db20:	f8ac 3000 	strh.w	r3, [ip]
   2db24:	f007 fff0 	bl	35b08 <memcpy>
   2db28:	4631      	mov	r1, r6
   2db2a:	9800      	ldr	r0, [sp, #0]
   2db2c:	f8c9 5000 	str.w	r5, [r9]
   2db30:	f000 fa6c 	bl	2e00c <rpc_gnss_client_request_send>
   2db34:	2800      	cmp	r0, #0
   2db36:	d15d      	bne.n	2dbf4 <gnss_interface_getopt+0x1bc>
   2db38:	4e44      	ldr	r6, [pc, #272]	; (2dc4c <gnss_interface_getopt+0x214>)
   2db3a:	4d43      	ldr	r5, [pc, #268]	; (2dc48 <gnss_interface_getopt+0x210>)
   2db3c:	4631      	mov	r1, r6
   2db3e:	4628      	mov	r0, r5
   2db40:	f7f4 ff48 	bl	229d4 <bsd_os_timedwait>
   2db44:	6823      	ldr	r3, [r4, #0]
   2db46:	01db      	lsls	r3, r3, #7
   2db48:	d4f8      	bmi.n	2db3c <gnss_interface_getopt+0x104>
   2db4a:	f8d9 0000 	ldr.w	r0, [r9]
   2db4e:	b1d8      	cbz	r0, 2db88 <gnss_interface_getopt+0x150>
   2db50:	6825      	ldr	r5, [r4, #0]
   2db52:	f015 7500 	ands.w	r5, r5, #33554432	; 0x2000000
   2db56:	d00f      	beq.n	2db78 <gnss_interface_getopt+0x140>
   2db58:	2f05      	cmp	r7, #5
   2db5a:	d837      	bhi.n	2dbcc <gnss_interface_getopt+0x194>
   2db5c:	e8df f007 	tbb	[pc, r7]
   2db60:	2b26201a 	.word	0x2b26201a
   2db64:	0331      	.short	0x0331
   2db66:	2500      	movs	r5, #0
   2db68:	7b43      	ldrb	r3, [r0, #13]
   2db6a:	f888 3000 	strb.w	r3, [r8]
   2db6e:	f000 fa6b 	bl	2e048 <rpc_gnss_client_data_free>
   2db72:	2300      	movs	r3, #0
   2db74:	f8c9 3000 	str.w	r3, [r9]
   2db78:	6823      	ldr	r3, [r4, #0]
   2db7a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   2db7e:	6023      	str	r3, [r4, #0]
   2db80:	4628      	mov	r0, r5
   2db82:	b007      	add	sp, #28
   2db84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2db88:	6823      	ldr	r3, [r4, #0]
   2db8a:	4605      	mov	r5, r0
   2db8c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   2db90:	6023      	str	r3, [r4, #0]
   2db92:	e7f5      	b.n	2db80 <gnss_interface_getopt+0x148>
   2db94:	f8b0 300f 	ldrh.w	r3, [r0, #15]
   2db98:	2500      	movs	r5, #0
   2db9a:	f8a8 3000 	strh.w	r3, [r8]
   2db9e:	e7e6      	b.n	2db6e <gnss_interface_getopt+0x136>
   2dba0:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   2dba4:	2500      	movs	r5, #0
   2dba6:	f8a8 3000 	strh.w	r3, [r8]
   2dbaa:	e7e0      	b.n	2db6e <gnss_interface_getopt+0x136>
   2dbac:	7b83      	ldrb	r3, [r0, #14]
   2dbae:	2500      	movs	r5, #0
   2dbb0:	f888 3000 	strb.w	r3, [r8]
   2dbb4:	e7db      	b.n	2db6e <gnss_interface_getopt+0x136>
   2dbb6:	f8b0 3013 	ldrh.w	r3, [r0, #19]
   2dbba:	2500      	movs	r5, #0
   2dbbc:	f8a8 3000 	strh.w	r3, [r8]
   2dbc0:	e7d5      	b.n	2db6e <gnss_interface_getopt+0x136>
   2dbc2:	7b03      	ldrb	r3, [r0, #12]
   2dbc4:	2500      	movs	r5, #0
   2dbc6:	f888 3000 	strb.w	r3, [r8]
   2dbca:	e7d0      	b.n	2db6e <gnss_interface_getopt+0x136>
   2dbcc:	2016      	movs	r0, #22
   2dbce:	f7f4 ff95 	bl	22afc <bsd_os_errno_set>
   2dbd2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2dbd6:	f8d9 0000 	ldr.w	r0, [r9]
   2dbda:	e7c8      	b.n	2db6e <gnss_interface_getopt+0x136>
   2dbdc:	b128      	cbz	r0, 2dbea <gnss_interface_getopt+0x1b2>
   2dbde:	6803      	ldr	r3, [r0, #0]
   2dbe0:	b11b      	cbz	r3, 2dbea <gnss_interface_getopt+0x1b2>
   2dbe2:	4618      	mov	r0, r3
   2dbe4:	f000 fa30 	bl	2e048 <rpc_gnss_client_data_free>
   2dbe8:	9800      	ldr	r0, [sp, #0]
   2dbea:	f000 fa25 	bl	2e038 <rpc_gnss_client_message_free>
   2dbee:	2023      	movs	r0, #35	; 0x23
   2dbf0:	f7f4 ff84 	bl	22afc <bsd_os_errno_set>
   2dbf4:	6823      	ldr	r3, [r4, #0]
   2dbf6:	200e      	movs	r0, #14
   2dbf8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   2dbfc:	6023      	str	r3, [r4, #0]
   2dbfe:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2dc02:	f7f4 ff7b 	bl	22afc <bsd_os_errno_set>
   2dc06:	e746      	b.n	2da96 <gnss_interface_getopt+0x5e>
   2dc08:	200e      	movs	r0, #14
   2dc0a:	f7f4 ff77 	bl	22afc <bsd_os_errno_set>
   2dc0e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2dc12:	e740      	b.n	2da96 <gnss_interface_getopt+0x5e>
   2dc14:	202a      	movs	r0, #42	; 0x2a
   2dc16:	f7f4 ff71 	bl	22afc <bsd_os_errno_set>
   2dc1a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2dc1e:	e73a      	b.n	2da96 <gnss_interface_getopt+0x5e>
   2dc20:	2009      	movs	r0, #9
   2dc22:	f7f4 ff6b 	bl	22afc <bsd_os_errno_set>
   2dc26:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2dc2a:	e734      	b.n	2da96 <gnss_interface_getopt+0x5e>
   2dc2c:	2005      	movs	r0, #5
   2dc2e:	f7f4 ff65 	bl	22afc <bsd_os_errno_set>
   2dc32:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2dc36:	e72e      	b.n	2da96 <gnss_interface_getopt+0x5e>
   2dc38:	2073      	movs	r0, #115	; 0x73
   2dc3a:	f7f4 ff5f 	bl	22afc <bsd_os_errno_set>
   2dc3e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2dc42:	e728      	b.n	2da96 <gnss_interface_getopt+0x5e>
   2dc44:	20022d20 	.word	0x20022d20
   2dc48:	49765443 	.word	0x49765443
   2dc4c:	200295ac 	.word	0x200295ac
   2dc50:	20024018 	.word	0x20024018
   2dc54:	20022d24 	.word	0x20022d24

0002dc58 <gnss_interface_init>:
   2dc58:	2100      	movs	r1, #0
   2dc5a:	b538      	push	{r3, r4, r5, lr}
   2dc5c:	4c09      	ldr	r4, [pc, #36]	; (2dc84 <gnss_interface_init+0x2c>)
   2dc5e:	4d0a      	ldr	r5, [pc, #40]	; (2dc88 <gnss_interface_init+0x30>)
   2dc60:	6822      	ldr	r2, [r4, #0]
   2dc62:	480a      	ldr	r0, [pc, #40]	; (2dc8c <gnss_interface_init+0x34>)
   2dc64:	4b0a      	ldr	r3, [pc, #40]	; (2dc90 <gnss_interface_init+0x38>)
   2dc66:	402a      	ands	r2, r5
   2dc68:	6022      	str	r2, [r4, #0]
   2dc6a:	8001      	strh	r1, [r0, #0]
   2dc6c:	6019      	str	r1, [r3, #0]
   2dc6e:	f000 f9b3 	bl	2dfd8 <rpc_gnss_client_init>
   2dc72:	b928      	cbnz	r0, 2dc80 <gnss_interface_init+0x28>
   2dc74:	6823      	ldr	r3, [r4, #0]
   2dc76:	402b      	ands	r3, r5
   2dc78:	f043 0301 	orr.w	r3, r3, #1
   2dc7c:	6023      	str	r3, [r4, #0]
   2dc7e:	bd38      	pop	{r3, r4, r5, pc}
   2dc80:	2003      	movs	r0, #3
   2dc82:	bd38      	pop	{r3, r4, r5, pc}
   2dc84:	20022d20 	.word	0x20022d20
   2dc88:	ffff0000 	.word	0xffff0000
   2dc8c:	20024018 	.word	0x20024018
   2dc90:	20022d24 	.word	0x20022d24

0002dc94 <gnss_interface_open>:
   2dc94:	2902      	cmp	r1, #2
   2dc96:	b510      	push	{r4, lr}
   2dc98:	d121      	bne.n	2dcde <gnss_interface_open+0x4a>
   2dc9a:	4c14      	ldr	r4, [pc, #80]	; (2dcec <gnss_interface_open+0x58>)
   2dc9c:	6823      	ldr	r3, [r4, #0]
   2dc9e:	b29b      	uxth	r3, r3
   2dca0:	2b01      	cmp	r3, #1
   2dca2:	d116      	bne.n	2dcd2 <gnss_interface_open+0x3e>
   2dca4:	6823      	ldr	r3, [r4, #0]
   2dca6:	4608      	mov	r0, r1
   2dca8:	0c1b      	lsrs	r3, r3, #16
   2dcaa:	041b      	lsls	r3, r3, #16
   2dcac:	f043 0302 	orr.w	r3, r3, #2
   2dcb0:	2200      	movs	r2, #0
   2dcb2:	490f      	ldr	r1, [pc, #60]	; (2dcf0 <gnss_interface_open+0x5c>)
   2dcb4:	6023      	str	r3, [r4, #0]
   2dcb6:	f000 faad 	bl	2e214 <packet_handler_create>
   2dcba:	4a0e      	ldr	r2, [pc, #56]	; (2dcf4 <gnss_interface_open+0x60>)
   2dcbc:	6010      	str	r0, [r2, #0]
   2dcbe:	b140      	cbz	r0, 2dcd2 <gnss_interface_open+0x3e>
   2dcc0:	6823      	ldr	r3, [r4, #0]
   2dcc2:	6802      	ldr	r2, [r0, #0]
   2dcc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2dcc8:	6812      	ldr	r2, [r2, #0]
   2dcca:	6023      	str	r3, [r4, #0]
   2dccc:	4790      	blx	r2
   2dcce:	480a      	ldr	r0, [pc, #40]	; (2dcf8 <gnss_interface_open+0x64>)
   2dcd0:	bd10      	pop	{r4, pc}
   2dcd2:	200e      	movs	r0, #14
   2dcd4:	f7f4 ff12 	bl	22afc <bsd_os_errno_set>
   2dcd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2dcdc:	bd10      	pop	{r4, pc}
   2dcde:	2029      	movs	r0, #41	; 0x29
   2dce0:	f7f4 ff0c 	bl	22afc <bsd_os_errno_set>
   2dce4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2dce8:	bd10      	pop	{r4, pc}
   2dcea:	bf00      	nop
   2dcec:	20022d20 	.word	0x20022d20
   2dcf0:	0002cfdd 	.word	0x0002cfdd
   2dcf4:	20022d28 	.word	0x20022d28
   2dcf8:	49765443 	.word	0x49765443

0002dcfc <gnss_interface_close>:
   2dcfc:	b530      	push	{r4, r5, lr}
   2dcfe:	4b13      	ldr	r3, [pc, #76]	; (2dd4c <gnss_interface_close+0x50>)
   2dd00:	b083      	sub	sp, #12
   2dd02:	4298      	cmp	r0, r3
   2dd04:	d11c      	bne.n	2dd40 <gnss_interface_close+0x44>
   2dd06:	4c12      	ldr	r4, [pc, #72]	; (2dd50 <gnss_interface_close+0x54>)
   2dd08:	6823      	ldr	r3, [r4, #0]
   2dd0a:	b29b      	uxth	r3, r3
   2dd0c:	2b04      	cmp	r3, #4
   2dd0e:	d00f      	beq.n	2dd30 <gnss_interface_close+0x34>
   2dd10:	4d10      	ldr	r5, [pc, #64]	; (2dd54 <gnss_interface_close+0x58>)
   2dd12:	6828      	ldr	r0, [r5, #0]
   2dd14:	b118      	cbz	r0, 2dd1e <gnss_interface_close+0x22>
   2dd16:	f000 fa9d 	bl	2e254 <packet_handler_delete>
   2dd1a:	2300      	movs	r3, #0
   2dd1c:	602b      	str	r3, [r5, #0]
   2dd1e:	2000      	movs	r0, #0
   2dd20:	6823      	ldr	r3, [r4, #0]
   2dd22:	0c1b      	lsrs	r3, r3, #16
   2dd24:	041b      	lsls	r3, r3, #16
   2dd26:	f043 0301 	orr.w	r3, r3, #1
   2dd2a:	6023      	str	r3, [r4, #0]
   2dd2c:	b003      	add	sp, #12
   2dd2e:	bd30      	pop	{r4, r5, pc}
   2dd30:	2300      	movs	r3, #0
   2dd32:	2208      	movs	r2, #8
   2dd34:	9300      	str	r3, [sp, #0]
   2dd36:	f44f 7101 	mov.w	r1, #516	; 0x204
   2dd3a:	f7fc fe31 	bl	2a9a0 <nrf_setsockopt>
   2dd3e:	e7e7      	b.n	2dd10 <gnss_interface_close+0x14>
   2dd40:	2009      	movs	r0, #9
   2dd42:	f7f4 fedb 	bl	22afc <bsd_os_errno_set>
   2dd46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2dd4a:	e7ef      	b.n	2dd2c <gnss_interface_close+0x30>
   2dd4c:	49765443 	.word	0x49765443
   2dd50:	20022d20 	.word	0x20022d20
   2dd54:	20022d28 	.word	0x20022d28

0002dd58 <rpc_gnss_serialize_utc>:
   2dd58:	4603      	mov	r3, r0
   2dd5a:	b1d8      	cbz	r0, 2dd94 <rpc_gnss_serialize_utc+0x3c>
   2dd5c:	b1d1      	cbz	r1, 2dd94 <rpc_gnss_serialize_utc+0x3c>
   2dd5e:	2000      	movs	r0, #0
   2dd60:	2201      	movs	r2, #1
   2dd62:	7048      	strb	r0, [r1, #1]
   2dd64:	700a      	strb	r2, [r1, #0]
   2dd66:	685a      	ldr	r2, [r3, #4]
   2dd68:	2010      	movs	r0, #16
   2dd6a:	f8c1 2006 	str.w	r2, [r1, #6]
   2dd6e:	681a      	ldr	r2, [r3, #0]
   2dd70:	f8c1 2002 	str.w	r2, [r1, #2]
   2dd74:	f993 200a 	ldrsb.w	r2, [r3, #10]
   2dd78:	730a      	strb	r2, [r1, #12]
   2dd7a:	f993 200d 	ldrsb.w	r2, [r3, #13]
   2dd7e:	73ca      	strb	r2, [r1, #15]
   2dd80:	f993 200c 	ldrsb.w	r2, [r3, #12]
   2dd84:	738a      	strb	r2, [r1, #14]
   2dd86:	7a1a      	ldrb	r2, [r3, #8]
   2dd88:	728a      	strb	r2, [r1, #10]
   2dd8a:	7ada      	ldrb	r2, [r3, #11]
   2dd8c:	734a      	strb	r2, [r1, #13]
   2dd8e:	7a5b      	ldrb	r3, [r3, #9]
   2dd90:	72cb      	strb	r3, [r1, #11]
   2dd92:	4770      	bx	lr
   2dd94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2dd98:	4770      	bx	lr
   2dd9a:	bf00      	nop

0002dd9c <rpc_gnss_serialize_ephe>:
   2dd9c:	4603      	mov	r3, r0
   2dd9e:	2800      	cmp	r0, #0
   2dda0:	d04b      	beq.n	2de3a <rpc_gnss_serialize_ephe+0x9e>
   2dda2:	2900      	cmp	r1, #0
   2dda4:	d049      	beq.n	2de3a <rpc_gnss_serialize_ephe+0x9e>
   2dda6:	2000      	movs	r0, #0
   2dda8:	2202      	movs	r2, #2
   2ddaa:	7048      	strb	r0, [r1, #1]
   2ddac:	700a      	strb	r2, [r1, #0]
   2ddae:	68da      	ldr	r2, [r3, #12]
   2ddb0:	2040      	movs	r0, #64	; 0x40
   2ddb2:	f8c1 200b 	str.w	r2, [r1, #11]
   2ddb6:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   2ddba:	f8a1 2009 	strh.w	r2, [r1, #9]
   2ddbe:	f993 2006 	ldrsb.w	r2, [r3, #6]
   2ddc2:	720a      	strb	r2, [r1, #8]
   2ddc4:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
   2ddc8:	878a      	strh	r2, [r1, #60]	; 0x3c
   2ddca:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	; 0x3e
   2ddce:	86ca      	strh	r2, [r1, #54]	; 0x36
   2ddd0:	f9b3 2042 	ldrsh.w	r2, [r3, #66]	; 0x42
   2ddd4:	874a      	strh	r2, [r1, #58]	; 0x3a
   2ddd6:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
   2ddda:	868a      	strh	r2, [r1, #52]	; 0x34
   2dddc:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
   2dde0:	87ca      	strh	r2, [r1, #62]	; 0x3e
   2dde2:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
   2dde6:	870a      	strh	r2, [r1, #56]	; 0x38
   2dde8:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   2ddec:	830a      	strh	r2, [r1, #24]
   2ddee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2ddf0:	f8c1 2022 	str.w	r2, [r1, #34]	; 0x22
   2ddf4:	7c9a      	ldrb	r2, [r3, #18]
   2ddf6:	744a      	strb	r2, [r1, #17]
   2ddf8:	785a      	ldrb	r2, [r3, #1]
   2ddfa:	70ca      	strb	r2, [r1, #3]
   2ddfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2ddfe:	62ca      	str	r2, [r1, #44]	; 0x2c
   2de00:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
   2de04:	84ca      	strh	r2, [r1, #38]	; 0x26
   2de06:	885a      	ldrh	r2, [r3, #2]
   2de08:	808a      	strh	r2, [r1, #4]
   2de0a:	6a1a      	ldr	r2, [r3, #32]
   2de0c:	f8c1 201a 	str.w	r2, [r1, #26]
   2de10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2de12:	630a      	str	r2, [r1, #48]	; 0x30
   2de14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   2de16:	f8c1 201e 	str.w	r2, [r1, #30]
   2de1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   2de1c:	628a      	str	r2, [r1, #40]	; 0x28
   2de1e:	781a      	ldrb	r2, [r3, #0]
   2de20:	708a      	strb	r2, [r1, #2]
   2de22:	f993 2010 	ldrsb.w	r2, [r3, #16]
   2de26:	73ca      	strb	r2, [r1, #15]
   2de28:	889a      	ldrh	r2, [r3, #4]
   2de2a:	80ca      	strh	r2, [r1, #6]
   2de2c:	8a9a      	ldrh	r2, [r3, #20]
   2de2e:	824a      	strh	r2, [r1, #18]
   2de30:	7c5a      	ldrb	r2, [r3, #17]
   2de32:	740a      	strb	r2, [r1, #16]
   2de34:	699b      	ldr	r3, [r3, #24]
   2de36:	614b      	str	r3, [r1, #20]
   2de38:	4770      	bx	lr
   2de3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2de3e:	4770      	bx	lr

0002de40 <rpc_gnss_serialize_alm>:
   2de40:	4603      	mov	r3, r0
   2de42:	b360      	cbz	r0, 2de9e <rpc_gnss_serialize_alm+0x5e>
   2de44:	b359      	cbz	r1, 2de9e <rpc_gnss_serialize_alm+0x5e>
   2de46:	2000      	movs	r0, #0
   2de48:	2203      	movs	r2, #3
   2de4a:	7048      	strb	r0, [r1, #1]
   2de4c:	700a      	strb	r2, [r1, #0]
   2de4e:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   2de52:	2021      	movs	r0, #33	; 0x21
   2de54:	f8a1 201d 	strh.w	r2, [r1, #29]
   2de58:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
   2de5c:	f8a1 201f 	strh.w	r2, [r1, #31]
   2de60:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
   2de64:	810a      	strh	r2, [r1, #8]
   2de66:	889a      	ldrh	r2, [r3, #4]
   2de68:	80ca      	strh	r2, [r1, #6]
   2de6a:	78da      	ldrb	r2, [r3, #3]
   2de6c:	714a      	strb	r2, [r1, #5]
   2de6e:	699a      	ldr	r2, [r3, #24]
   2de70:	f8c1 2019 	str.w	r2, [r1, #25]
   2de74:	691a      	ldr	r2, [r3, #16]
   2de76:	f8c1 2011 	str.w	r2, [r1, #17]
   2de7a:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   2de7e:	814a      	strh	r2, [r1, #10]
   2de80:	68da      	ldr	r2, [r3, #12]
   2de82:	f8c1 200d 	str.w	r2, [r1, #13]
   2de86:	7a9a      	ldrb	r2, [r3, #10]
   2de88:	730a      	strb	r2, [r1, #12]
   2de8a:	781a      	ldrb	r2, [r3, #0]
   2de8c:	708a      	strb	r2, [r1, #2]
   2de8e:	789a      	ldrb	r2, [r3, #2]
   2de90:	710a      	strb	r2, [r1, #4]
   2de92:	695a      	ldr	r2, [r3, #20]
   2de94:	f8c1 2015 	str.w	r2, [r1, #21]
   2de98:	785b      	ldrb	r3, [r3, #1]
   2de9a:	70cb      	strb	r3, [r1, #3]
   2de9c:	4770      	bx	lr
   2de9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2dea2:	4770      	bx	lr

0002dea4 <rpc_gnss_serialize_klob>:
   2dea4:	4603      	mov	r3, r0
   2dea6:	b1f0      	cbz	r0, 2dee6 <rpc_gnss_serialize_klob+0x42>
   2dea8:	b1e9      	cbz	r1, 2dee6 <rpc_gnss_serialize_klob+0x42>
   2deaa:	2000      	movs	r0, #0
   2deac:	2204      	movs	r2, #4
   2deae:	7048      	strb	r0, [r1, #1]
   2deb0:	700a      	strb	r2, [r1, #0]
   2deb2:	f993 2000 	ldrsb.w	r2, [r3]
   2deb6:	200a      	movs	r0, #10
   2deb8:	708a      	strb	r2, [r1, #2]
   2deba:	f993 2001 	ldrsb.w	r2, [r3, #1]
   2debe:	70ca      	strb	r2, [r1, #3]
   2dec0:	f993 2002 	ldrsb.w	r2, [r3, #2]
   2dec4:	710a      	strb	r2, [r1, #4]
   2dec6:	f993 2003 	ldrsb.w	r2, [r3, #3]
   2deca:	714a      	strb	r2, [r1, #5]
   2decc:	f993 2004 	ldrsb.w	r2, [r3, #4]
   2ded0:	718a      	strb	r2, [r1, #6]
   2ded2:	f993 2005 	ldrsb.w	r2, [r3, #5]
   2ded6:	71ca      	strb	r2, [r1, #7]
   2ded8:	f993 2006 	ldrsb.w	r2, [r3, #6]
   2dedc:	720a      	strb	r2, [r1, #8]
   2dede:	f993 3007 	ldrsb.w	r3, [r3, #7]
   2dee2:	724b      	strb	r3, [r1, #9]
   2dee4:	4770      	bx	lr
   2dee6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2deea:	4770      	bx	lr

0002deec <rpc_gnss_serialize_nequick>:
   2deec:	4603      	mov	r3, r0
   2deee:	b198      	cbz	r0, 2df18 <rpc_gnss_serialize_nequick+0x2c>
   2def0:	b191      	cbz	r1, 2df18 <rpc_gnss_serialize_nequick+0x2c>
   2def2:	2000      	movs	r0, #0
   2def4:	2205      	movs	r2, #5
   2def6:	7048      	strb	r0, [r1, #1]
   2def8:	700a      	strb	r2, [r1, #0]
   2defa:	f9b3 2000 	ldrsh.w	r2, [r3]
   2defe:	200a      	movs	r0, #10
   2df00:	804a      	strh	r2, [r1, #2]
   2df02:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
   2df06:	808a      	strh	r2, [r1, #4]
   2df08:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
   2df0c:	80ca      	strh	r2, [r1, #6]
   2df0e:	799a      	ldrb	r2, [r3, #6]
   2df10:	720a      	strb	r2, [r1, #8]
   2df12:	79db      	ldrb	r3, [r3, #7]
   2df14:	724b      	strb	r3, [r1, #9]
   2df16:	4770      	bx	lr
   2df18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2df1c:	4770      	bx	lr
   2df1e:	bf00      	nop

0002df20 <rpc_gnss_serialize_time_and_sv_tow>:
   2df20:	b310      	cbz	r0, 2df68 <rpc_gnss_serialize_time_and_sv_tow+0x48>
   2df22:	b309      	cbz	r1, 2df68 <rpc_gnss_serialize_time_and_sv_tow+0x48>
   2df24:	b470      	push	{r4, r5, r6}
   2df26:	2500      	movs	r5, #0
   2df28:	2606      	movs	r6, #6
   2df2a:	460c      	mov	r4, r1
   2df2c:	704d      	strb	r5, [r1, #1]
   2df2e:	700e      	strb	r6, [r1, #0]
   2df30:	462b      	mov	r3, r5
   2df32:	8805      	ldrh	r5, [r0, #0]
   2df34:	4602      	mov	r2, r0
   2df36:	804d      	strh	r5, [r1, #2]
   2df38:	68c5      	ldr	r5, [r0, #12]
   2df3a:	f8c1 500a 	str.w	r5, [r1, #10]
   2df3e:	8905      	ldrh	r5, [r0, #8]
   2df40:	810d      	strh	r5, [r1, #8]
   2df42:	6840      	ldr	r0, [r0, #4]
   2df44:	6048      	str	r0, [r1, #4]
   2df46:	8a15      	ldrh	r5, [r2, #16]
   2df48:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   2df4c:	4408      	add	r0, r1
   2df4e:	81c5      	strh	r5, [r0, #14]
   2df50:	7c90      	ldrb	r0, [r2, #18]
   2df52:	3301      	adds	r3, #1
   2df54:	2b20      	cmp	r3, #32
   2df56:	7420      	strb	r0, [r4, #16]
   2df58:	f102 0204 	add.w	r2, r2, #4
   2df5c:	f104 0403 	add.w	r4, r4, #3
   2df60:	d1f1      	bne.n	2df46 <rpc_gnss_serialize_time_and_sv_tow+0x26>
   2df62:	206e      	movs	r0, #110	; 0x6e
   2df64:	bc70      	pop	{r4, r5, r6}
   2df66:	4770      	bx	lr
   2df68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2df6c:	4770      	bx	lr
   2df6e:	bf00      	nop

0002df70 <rpc_gnss_serialize_location>:
   2df70:	4603      	mov	r3, r0
   2df72:	b1c8      	cbz	r0, 2dfa8 <rpc_gnss_serialize_location+0x38>
   2df74:	b1c1      	cbz	r1, 2dfa8 <rpc_gnss_serialize_location+0x38>
   2df76:	2000      	movs	r0, #0
   2df78:	2207      	movs	r2, #7
   2df7a:	7048      	strb	r0, [r1, #1]
   2df7c:	700a      	strb	r2, [r1, #0]
   2df7e:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   2df82:	2011      	movs	r0, #17
   2df84:	814a      	strh	r2, [r1, #10]
   2df86:	7b9a      	ldrb	r2, [r3, #14]
   2df88:	740a      	strb	r2, [r1, #16]
   2df8a:	681a      	ldr	r2, [r3, #0]
   2df8c:	f8c1 2002 	str.w	r2, [r1, #2]
   2df90:	685a      	ldr	r2, [r3, #4]
   2df92:	f8c1 2006 	str.w	r2, [r1, #6]
   2df96:	7b1a      	ldrb	r2, [r3, #12]
   2df98:	738a      	strb	r2, [r1, #14]
   2df9a:	7b5a      	ldrb	r2, [r3, #13]
   2df9c:	73ca      	strb	r2, [r1, #15]
   2df9e:	7a9a      	ldrb	r2, [r3, #10]
   2dfa0:	730a      	strb	r2, [r1, #12]
   2dfa2:	7adb      	ldrb	r3, [r3, #11]
   2dfa4:	734b      	strb	r3, [r1, #13]
   2dfa6:	4770      	bx	lr
   2dfa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2dfac:	4770      	bx	lr
   2dfae:	bf00      	nop

0002dfb0 <rpc_gnss_serialize_integrity>:
   2dfb0:	b148      	cbz	r0, 2dfc6 <rpc_gnss_serialize_integrity+0x16>
   2dfb2:	b141      	cbz	r1, 2dfc6 <rpc_gnss_serialize_integrity+0x16>
   2dfb4:	2200      	movs	r2, #0
   2dfb6:	2308      	movs	r3, #8
   2dfb8:	704a      	strb	r2, [r1, #1]
   2dfba:	700b      	strb	r3, [r1, #0]
   2dfbc:	6803      	ldr	r3, [r0, #0]
   2dfbe:	2006      	movs	r0, #6
   2dfc0:	f8c1 3002 	str.w	r3, [r1, #2]
   2dfc4:	4770      	bx	lr
   2dfc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2dfca:	4770      	bx	lr

0002dfcc <gnss_client_event_handler>:
   2dfcc:	f850 1b08 	ldr.w	r1, [r0], #8
   2dfd0:	0c09      	lsrs	r1, r1, #16
   2dfd2:	f7ff b811 	b.w	2cff8 <rpc_gnss_event_handler>
   2dfd6:	bf00      	nop

0002dfd8 <rpc_gnss_client_init>:
   2dfd8:	4801      	ldr	r0, [pc, #4]	; (2dfe0 <rpc_gnss_client_init+0x8>)
   2dfda:	f7fe bb73 	b.w	2c6c4 <rpc_client_register>
   2dfde:	bf00      	nop
   2dfe0:	00037484 	.word	0x00037484

0002dfe4 <rpc_gnss_client_request_alloc>:
   2dfe4:	2300      	movs	r3, #0
   2dfe6:	b510      	push	{r4, lr}
   2dfe8:	b082      	sub	sp, #8
   2dfea:	9301      	str	r3, [sp, #4]
   2dfec:	b158      	cbz	r0, 2e006 <rpc_gnss_client_request_alloc+0x22>
   2dfee:	4604      	mov	r4, r0
   2dff0:	aa01      	add	r2, sp, #4
   2dff2:	2007      	movs	r0, #7
   2dff4:	f7fe fd9e 	bl	2cb34 <rpc_message_alloc>
   2dff8:	b918      	cbnz	r0, 2e002 <rpc_gnss_client_request_alloc+0x1e>
   2dffa:	9b01      	ldr	r3, [sp, #4]
   2dffc:	b10b      	cbz	r3, 2e002 <rpc_gnss_client_request_alloc+0x1e>
   2dffe:	3308      	adds	r3, #8
   2e000:	6023      	str	r3, [r4, #0]
   2e002:	b002      	add	sp, #8
   2e004:	bd10      	pop	{r4, pc}
   2e006:	2007      	movs	r0, #7
   2e008:	b002      	add	sp, #8
   2e00a:	bd10      	pop	{r4, pc}

0002e00c <rpc_gnss_client_request_send>:
   2e00c:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   2e010:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   2e014:	d10b      	bne.n	2e02e <rpc_gnss_client_request_send+0x22>
   2e016:	b160      	cbz	r0, 2e032 <rpc_gnss_client_request_send+0x26>
   2e018:	4603      	mov	r3, r0
   2e01a:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   2e01e:	2007      	movs	r0, #7
   2e020:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   2e024:	f843 1d08 	str.w	r1, [r3, #-8]!
   2e028:	4619      	mov	r1, r3
   2e02a:	f7fe bd6b 	b.w	2cb04 <rpc_message_send>
   2e02e:	200f      	movs	r0, #15
   2e030:	4770      	bx	lr
   2e032:	2007      	movs	r0, #7
   2e034:	4770      	bx	lr
   2e036:	bf00      	nop

0002e038 <rpc_gnss_client_message_free>:
   2e038:	b120      	cbz	r0, 2e044 <rpc_gnss_client_message_free+0xc>
   2e03a:	f1a0 0108 	sub.w	r1, r0, #8
   2e03e:	2007      	movs	r0, #7
   2e040:	f7fe bdaa 	b.w	2cb98 <rpc_message_free>
   2e044:	2007      	movs	r0, #7
   2e046:	4770      	bx	lr

0002e048 <rpc_gnss_client_data_free>:
   2e048:	b118      	cbz	r0, 2e052 <rpc_gnss_client_data_free+0xa>
   2e04a:	4601      	mov	r1, r0
   2e04c:	2007      	movs	r0, #7
   2e04e:	f7fe beb5 	b.w	2cdbc <rpc_message_data_free>
   2e052:	2007      	movs	r0, #7
   2e054:	4770      	bx	lr
   2e056:	bf00      	nop

0002e058 <datagram_handler_init>:
   2e058:	b510      	push	{r4, lr}
   2e05a:	4604      	mov	r4, r0
   2e05c:	200c      	movs	r0, #12
   2e05e:	f7f9 f8d9 	bl	27214 <nrf_malloc>
   2e062:	60e0      	str	r0, [r4, #12]
   2e064:	b118      	cbz	r0, 2e06e <datagram_handler_init+0x16>
   2e066:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2e06a:	f7fc bb8f 	b.w	2a78c <linked_list_init>
   2e06e:	2004      	movs	r0, #4
   2e070:	bd10      	pop	{r4, pc}
   2e072:	bf00      	nop

0002e074 <datagram_handler_put>:
   2e074:	b570      	push	{r4, r5, r6, lr}
   2e076:	4606      	mov	r6, r0
   2e078:	2014      	movs	r0, #20
   2e07a:	460d      	mov	r5, r1
   2e07c:	f7f9 f8ca 	bl	27214 <nrf_malloc>
   2e080:	b178      	cbz	r0, 2e0a2 <datagram_handler_put+0x2e>
   2e082:	682b      	ldr	r3, [r5, #0]
   2e084:	4604      	mov	r4, r0
   2e086:	6043      	str	r3, [r0, #4]
   2e088:	686b      	ldr	r3, [r5, #4]
   2e08a:	4601      	mov	r1, r0
   2e08c:	6083      	str	r3, [r0, #8]
   2e08e:	68eb      	ldr	r3, [r5, #12]
   2e090:	60c3      	str	r3, [r0, #12]
   2e092:	68ab      	ldr	r3, [r5, #8]
   2e094:	6103      	str	r3, [r0, #16]
   2e096:	68f0      	ldr	r0, [r6, #12]
   2e098:	f7fc fb82 	bl	2a7a0 <linked_list_push>
   2e09c:	b920      	cbnz	r0, 2e0a8 <datagram_handler_put+0x34>
   2e09e:	6868      	ldr	r0, [r5, #4]
   2e0a0:	bd70      	pop	{r4, r5, r6, pc}
   2e0a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e0a6:	bd70      	pop	{r4, r5, r6, pc}
   2e0a8:	4620      	mov	r0, r4
   2e0aa:	f7f9 f8bd 	bl	27228 <nrf_free>
   2e0ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e0b2:	bd70      	pop	{r4, r5, r6, pc}

0002e0b4 <datagram_handler_get>:
   2e0b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e0b6:	4606      	mov	r6, r0
   2e0b8:	b085      	sub	sp, #20
   2e0ba:	68c0      	ldr	r0, [r0, #12]
   2e0bc:	460c      	mov	r4, r1
   2e0be:	4617      	mov	r7, r2
   2e0c0:	f7fc fb8e 	bl	2a7e0 <linked_list_peek>
   2e0c4:	2800      	cmp	r0, #0
   2e0c6:	d037      	beq.n	2e138 <datagram_handler_get+0x84>
   2e0c8:	6882      	ldr	r2, [r0, #8]
   2e0ca:	4605      	mov	r5, r0
   2e0cc:	e9d4 0300 	ldrd	r0, r3, [r4]
   2e0d0:	429a      	cmp	r2, r3
   2e0d2:	bf28      	it	cs
   2e0d4:	461a      	movcs	r2, r3
   2e0d6:	6062      	str	r2, [r4, #4]
   2e0d8:	b110      	cbz	r0, 2e0e0 <datagram_handler_get+0x2c>
   2e0da:	6869      	ldr	r1, [r5, #4]
   2e0dc:	f007 fd14 	bl	35b08 <memcpy>
   2e0e0:	68a0      	ldr	r0, [r4, #8]
   2e0e2:	b118      	cbz	r0, 2e0ec <datagram_handler_get+0x38>
   2e0e4:	692b      	ldr	r3, [r5, #16]
   2e0e6:	b10b      	cbz	r3, 2e0ec <datagram_handler_get+0x38>
   2e0e8:	68ea      	ldr	r2, [r5, #12]
   2e0ea:	b9e2      	cbnz	r2, 2e126 <datagram_handler_get+0x72>
   2e0ec:	2300      	movs	r3, #0
   2e0ee:	60e3      	str	r3, [r4, #12]
   2e0f0:	073b      	lsls	r3, r7, #28
   2e0f2:	d502      	bpl.n	2e0fa <datagram_handler_get+0x46>
   2e0f4:	6860      	ldr	r0, [r4, #4]
   2e0f6:	b005      	add	sp, #20
   2e0f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e0fa:	68f0      	ldr	r0, [r6, #12]
   2e0fc:	f7fc fb66 	bl	2a7cc <linked_list_pop>
   2e100:	4605      	mov	r5, r0
   2e102:	2800      	cmp	r0, #0
   2e104:	d0f6      	beq.n	2e0f4 <datagram_handler_get+0x40>
   2e106:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   2e10a:	6902      	ldr	r2, [r0, #16]
   2e10c:	9300      	str	r3, [sp, #0]
   2e10e:	68c3      	ldr	r3, [r0, #12]
   2e110:	e9cd 1201 	strd	r1, r2, [sp, #4]
   2e114:	9303      	str	r3, [sp, #12]
   2e116:	4668      	mov	r0, sp
   2e118:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
   2e11c:	4798      	blx	r3
   2e11e:	4628      	mov	r0, r5
   2e120:	f7f9 f882 	bl	27228 <nrf_free>
   2e124:	e7e6      	b.n	2e0f4 <datagram_handler_get+0x40>
   2e126:	68e3      	ldr	r3, [r4, #12]
   2e128:	429a      	cmp	r2, r3
   2e12a:	bf28      	it	cs
   2e12c:	461a      	movcs	r2, r3
   2e12e:	60e2      	str	r2, [r4, #12]
   2e130:	6929      	ldr	r1, [r5, #16]
   2e132:	f007 fce9 	bl	35b08 <memcpy>
   2e136:	e7db      	b.n	2e0f0 <datagram_handler_get+0x3c>
   2e138:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e13c:	e7db      	b.n	2e0f6 <datagram_handler_get+0x42>
   2e13e:	bf00      	nop

0002e140 <datagram_handler_available>:
   2e140:	b508      	push	{r3, lr}
   2e142:	68c0      	ldr	r0, [r0, #12]
   2e144:	f7fc fb4c 	bl	2a7e0 <linked_list_peek>
   2e148:	b108      	cbz	r0, 2e14e <datagram_handler_available+0xe>
   2e14a:	6880      	ldr	r0, [r0, #8]
   2e14c:	bd08      	pop	{r3, pc}
   2e14e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e152:	bd08      	pop	{r3, pc}

0002e154 <datagram_handler_flush>:
   2e154:	b530      	push	{r4, r5, lr}
   2e156:	4605      	mov	r5, r0
   2e158:	68c0      	ldr	r0, [r0, #12]
   2e15a:	b085      	sub	sp, #20
   2e15c:	b9a8      	cbnz	r0, 2e18a <datagram_handler_flush+0x36>
   2e15e:	e01a      	b.n	2e196 <datagram_handler_flush+0x42>
   2e160:	68e8      	ldr	r0, [r5, #12]
   2e162:	f7fc fb33 	bl	2a7cc <linked_list_pop>
   2e166:	4604      	mov	r4, r0
   2e168:	b170      	cbz	r0, 2e188 <datagram_handler_flush+0x34>
   2e16a:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   2e16e:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   2e172:	e9cd 0100 	strd	r0, r1, [sp]
   2e176:	e9cd 2302 	strd	r2, r3, [sp, #8]
   2e17a:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   2e17e:	4668      	mov	r0, sp
   2e180:	4798      	blx	r3
   2e182:	4620      	mov	r0, r4
   2e184:	f7f9 f850 	bl	27228 <nrf_free>
   2e188:	68e8      	ldr	r0, [r5, #12]
   2e18a:	f7fc fb2f 	bl	2a7ec <linked_list_size_get>
   2e18e:	2800      	cmp	r0, #0
   2e190:	d1e6      	bne.n	2e160 <datagram_handler_flush+0xc>
   2e192:	b005      	add	sp, #20
   2e194:	bd30      	pop	{r4, r5, pc}
   2e196:	2008      	movs	r0, #8
   2e198:	b005      	add	sp, #20
   2e19a:	bd30      	pop	{r4, r5, pc}

0002e19c <datagram_handler_free>:
   2e19c:	b530      	push	{r4, r5, lr}
   2e19e:	4605      	mov	r5, r0
   2e1a0:	68c0      	ldr	r0, [r0, #12]
   2e1a2:	b085      	sub	sp, #20
   2e1a4:	b9a0      	cbnz	r0, 2e1d0 <datagram_handler_free+0x34>
   2e1a6:	e01c      	b.n	2e1e2 <datagram_handler_free+0x46>
   2e1a8:	f7fc fb10 	bl	2a7cc <linked_list_pop>
   2e1ac:	4604      	mov	r4, r0
   2e1ae:	b170      	cbz	r0, 2e1ce <datagram_handler_free+0x32>
   2e1b0:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   2e1b4:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   2e1b8:	e9cd 0100 	strd	r0, r1, [sp]
   2e1bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
   2e1c0:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   2e1c4:	4668      	mov	r0, sp
   2e1c6:	4798      	blx	r3
   2e1c8:	4620      	mov	r0, r4
   2e1ca:	f7f9 f82d 	bl	27228 <nrf_free>
   2e1ce:	68e8      	ldr	r0, [r5, #12]
   2e1d0:	f7fc fb0c 	bl	2a7ec <linked_list_size_get>
   2e1d4:	4604      	mov	r4, r0
   2e1d6:	68e8      	ldr	r0, [r5, #12]
   2e1d8:	2c00      	cmp	r4, #0
   2e1da:	d1e5      	bne.n	2e1a8 <datagram_handler_free+0xc>
   2e1dc:	f7f9 f824 	bl	27228 <nrf_free>
   2e1e0:	60ec      	str	r4, [r5, #12]
   2e1e2:	b005      	add	sp, #20
   2e1e4:	bd30      	pop	{r4, r5, pc}
   2e1e6:	bf00      	nop

0002e1e8 <null_handler_init>:
   2e1e8:	2000      	movs	r0, #0
   2e1ea:	4770      	bx	lr

0002e1ec <null_handler_put>:
   2e1ec:	b510      	push	{r4, lr}
   2e1ee:	460c      	mov	r4, r1
   2e1f0:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   2e1f4:	4620      	mov	r0, r4
   2e1f6:	4798      	blx	r3
   2e1f8:	6860      	ldr	r0, [r4, #4]
   2e1fa:	bd10      	pop	{r4, pc}

0002e1fc <null_handler_get>:
   2e1fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e200:	4770      	bx	lr
   2e202:	bf00      	nop

0002e204 <null_handler_available>:
   2e204:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e208:	4770      	bx	lr
   2e20a:	bf00      	nop

0002e20c <null_handler_flush>:
   2e20c:	2000      	movs	r0, #0
   2e20e:	4770      	bx	lr

0002e210 <null_handler_free>:
   2e210:	4770      	bx	lr
   2e212:	bf00      	nop

0002e214 <packet_handler_create>:
   2e214:	2801      	cmp	r0, #1
   2e216:	b538      	push	{r3, r4, r5, lr}
   2e218:	460d      	mov	r5, r1
   2e21a:	4614      	mov	r4, r2
   2e21c:	d00d      	beq.n	2e23a <packet_handler_create+0x26>
   2e21e:	db11      	blt.n	2e244 <packet_handler_create+0x30>
   2e220:	2803      	cmp	r0, #3
   2e222:	dc0f      	bgt.n	2e244 <packet_handler_create+0x30>
   2e224:	2010      	movs	r0, #16
   2e226:	f7f8 fff5 	bl	27214 <nrf_malloc>
   2e22a:	2218      	movs	r2, #24
   2e22c:	b120      	cbz	r0, 2e238 <packet_handler_create+0x24>
   2e22e:	4b08      	ldr	r3, [pc, #32]	; (2e250 <packet_handler_create+0x3c>)
   2e230:	6045      	str	r5, [r0, #4]
   2e232:	4413      	add	r3, r2
   2e234:	6084      	str	r4, [r0, #8]
   2e236:	6003      	str	r3, [r0, #0]
   2e238:	bd38      	pop	{r3, r4, r5, pc}
   2e23a:	2014      	movs	r0, #20
   2e23c:	f7f8 ffea 	bl	27214 <nrf_malloc>
   2e240:	2230      	movs	r2, #48	; 0x30
   2e242:	e7f3      	b.n	2e22c <packet_handler_create+0x18>
   2e244:	200c      	movs	r0, #12
   2e246:	f7f8 ffe5 	bl	27214 <nrf_malloc>
   2e24a:	2200      	movs	r2, #0
   2e24c:	e7ee      	b.n	2e22c <packet_handler_create+0x18>
   2e24e:	bf00      	nop
   2e250:	00037494 	.word	0x00037494

0002e254 <packet_handler_delete>:
   2e254:	b510      	push	{r4, lr}
   2e256:	4604      	mov	r4, r0
   2e258:	6803      	ldr	r3, [r0, #0]
   2e25a:	691b      	ldr	r3, [r3, #16]
   2e25c:	4798      	blx	r3
   2e25e:	6823      	ldr	r3, [r4, #0]
   2e260:	4620      	mov	r0, r4
   2e262:	695b      	ldr	r3, [r3, #20]
   2e264:	4798      	blx	r3
   2e266:	4620      	mov	r0, r4
   2e268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2e26c:	f7f8 bfdc 	b.w	27228 <nrf_free>

0002e270 <stream_handler_init>:
   2e270:	b510      	push	{r4, lr}
   2e272:	4604      	mov	r4, r0
   2e274:	200c      	movs	r0, #12
   2e276:	f7f8 ffcd 	bl	27214 <nrf_malloc>
   2e27a:	60e0      	str	r0, [r4, #12]
   2e27c:	b128      	cbz	r0, 2e28a <stream_handler_init+0x1a>
   2e27e:	2300      	movs	r3, #0
   2e280:	6123      	str	r3, [r4, #16]
   2e282:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2e286:	f7fc ba81 	b.w	2a78c <linked_list_init>
   2e28a:	2004      	movs	r0, #4
   2e28c:	bd10      	pop	{r4, pc}
   2e28e:	bf00      	nop

0002e290 <stream_handler_put>:
   2e290:	b570      	push	{r4, r5, r6, lr}
   2e292:	4606      	mov	r6, r0
   2e294:	2014      	movs	r0, #20
   2e296:	460d      	mov	r5, r1
   2e298:	f7f8 ffbc 	bl	27214 <nrf_malloc>
   2e29c:	b178      	cbz	r0, 2e2be <stream_handler_put+0x2e>
   2e29e:	682b      	ldr	r3, [r5, #0]
   2e2a0:	4604      	mov	r4, r0
   2e2a2:	6043      	str	r3, [r0, #4]
   2e2a4:	686b      	ldr	r3, [r5, #4]
   2e2a6:	4601      	mov	r1, r0
   2e2a8:	6083      	str	r3, [r0, #8]
   2e2aa:	68eb      	ldr	r3, [r5, #12]
   2e2ac:	60c3      	str	r3, [r0, #12]
   2e2ae:	68ab      	ldr	r3, [r5, #8]
   2e2b0:	6103      	str	r3, [r0, #16]
   2e2b2:	68f0      	ldr	r0, [r6, #12]
   2e2b4:	f7fc fa74 	bl	2a7a0 <linked_list_push>
   2e2b8:	b920      	cbnz	r0, 2e2c4 <stream_handler_put+0x34>
   2e2ba:	6868      	ldr	r0, [r5, #4]
   2e2bc:	bd70      	pop	{r4, r5, r6, pc}
   2e2be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e2c2:	bd70      	pop	{r4, r5, r6, pc}
   2e2c4:	4620      	mov	r0, r4
   2e2c6:	f7f8 ffaf 	bl	27228 <nrf_free>
   2e2ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e2ce:	bd70      	pop	{r4, r5, r6, pc}

0002e2d0 <stream_handler_get>:
   2e2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e2d4:	4682      	mov	sl, r0
   2e2d6:	b087      	sub	sp, #28
   2e2d8:	68c0      	ldr	r0, [r0, #12]
   2e2da:	4689      	mov	r9, r1
   2e2dc:	4693      	mov	fp, r2
   2e2de:	f7fc fa7f 	bl	2a7e0 <linked_list_peek>
   2e2e2:	2800      	cmp	r0, #0
   2e2e4:	d072      	beq.n	2e3cc <stream_handler_get+0xfc>
   2e2e6:	4605      	mov	r5, r0
   2e2e8:	f8d9 0008 	ldr.w	r0, [r9, #8]
   2e2ec:	b120      	cbz	r0, 2e2f8 <stream_handler_get+0x28>
   2e2ee:	692b      	ldr	r3, [r5, #16]
   2e2f0:	b113      	cbz	r3, 2e2f8 <stream_handler_get+0x28>
   2e2f2:	68ea      	ldr	r2, [r5, #12]
   2e2f4:	2a00      	cmp	r2, #0
   2e2f6:	d15c      	bne.n	2e3b2 <stream_handler_get+0xe2>
   2e2f8:	2300      	movs	r3, #0
   2e2fa:	f8c9 300c 	str.w	r3, [r9, #12]
   2e2fe:	f8d9 2000 	ldr.w	r2, [r9]
   2e302:	f8d9 8004 	ldr.w	r8, [r9, #4]
   2e306:	f8da 1010 	ldr.w	r1, [sl, #16]
   2e30a:	9201      	str	r2, [sp, #4]
   2e30c:	f1b8 0f00 	cmp.w	r8, #0
   2e310:	d05a      	beq.n	2e3c8 <stream_handler_get+0xf8>
   2e312:	f00b 0308 	and.w	r3, fp, #8
   2e316:	2400      	movs	r4, #0
   2e318:	9300      	str	r3, [sp, #0]
   2e31a:	e010      	b.n	2e33e <stream_handler_get+0x6e>
   2e31c:	f8da 3010 	ldr.w	r3, [sl, #16]
   2e320:	443b      	add	r3, r7
   2e322:	f8ca 3010 	str.w	r3, [sl, #16]
   2e326:	4628      	mov	r0, r5
   2e328:	f7fc fa62 	bl	2a7f0 <linked_list_get_next>
   2e32c:	443c      	add	r4, r7
   2e32e:	4605      	mov	r5, r0
   2e330:	2800      	cmp	r0, #0
   2e332:	d038      	beq.n	2e3a6 <stream_handler_get+0xd6>
   2e334:	45a0      	cmp	r8, r4
   2e336:	d936      	bls.n	2e3a6 <stream_handler_get+0xd6>
   2e338:	2100      	movs	r1, #0
   2e33a:	f8d9 2000 	ldr.w	r2, [r9]
   2e33e:	68ae      	ldr	r6, [r5, #8]
   2e340:	eba8 0b04 	sub.w	fp, r8, r4
   2e344:	1a76      	subs	r6, r6, r1
   2e346:	455e      	cmp	r6, fp
   2e348:	4637      	mov	r7, r6
   2e34a:	bf28      	it	cs
   2e34c:	465f      	movcs	r7, fp
   2e34e:	b132      	cbz	r2, 2e35e <stream_handler_get+0x8e>
   2e350:	6868      	ldr	r0, [r5, #4]
   2e352:	9b01      	ldr	r3, [sp, #4]
   2e354:	4401      	add	r1, r0
   2e356:	463a      	mov	r2, r7
   2e358:	1918      	adds	r0, r3, r4
   2e35a:	f007 fbd5 	bl	35b08 <memcpy>
   2e35e:	9b00      	ldr	r3, [sp, #0]
   2e360:	2b00      	cmp	r3, #0
   2e362:	d1e0      	bne.n	2e326 <stream_handler_get+0x56>
   2e364:	455e      	cmp	r6, fp
   2e366:	d8d9      	bhi.n	2e31c <stream_handler_get+0x4c>
   2e368:	f8da 000c 	ldr.w	r0, [sl, #12]
   2e36c:	f7fc fa2e 	bl	2a7cc <linked_list_pop>
   2e370:	4606      	mov	r6, r0
   2e372:	b170      	cbz	r0, 2e392 <stream_handler_get+0xc2>
   2e374:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   2e378:	e9d0 0103 	ldrd	r0, r1, [r0, #12]
   2e37c:	e9cd 2302 	strd	r2, r3, [sp, #8]
   2e380:	e9cd 1004 	strd	r1, r0, [sp, #16]
   2e384:	e9da 3101 	ldrd	r3, r1, [sl, #4]
   2e388:	a802      	add	r0, sp, #8
   2e38a:	4798      	blx	r3
   2e38c:	4630      	mov	r0, r6
   2e38e:	f7f8 ff4b 	bl	27228 <nrf_free>
   2e392:	2300      	movs	r3, #0
   2e394:	4628      	mov	r0, r5
   2e396:	f8ca 3010 	str.w	r3, [sl, #16]
   2e39a:	f7fc fa29 	bl	2a7f0 <linked_list_get_next>
   2e39e:	443c      	add	r4, r7
   2e3a0:	4605      	mov	r5, r0
   2e3a2:	2800      	cmp	r0, #0
   2e3a4:	d1c6      	bne.n	2e334 <stream_handler_get+0x64>
   2e3a6:	4620      	mov	r0, r4
   2e3a8:	f8c9 4004 	str.w	r4, [r9, #4]
   2e3ac:	b007      	add	sp, #28
   2e3ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e3b2:	f8d9 300c 	ldr.w	r3, [r9, #12]
   2e3b6:	429a      	cmp	r2, r3
   2e3b8:	bf28      	it	cs
   2e3ba:	461a      	movcs	r2, r3
   2e3bc:	f8c9 200c 	str.w	r2, [r9, #12]
   2e3c0:	6929      	ldr	r1, [r5, #16]
   2e3c2:	f007 fba1 	bl	35b08 <memcpy>
   2e3c6:	e79a      	b.n	2e2fe <stream_handler_get+0x2e>
   2e3c8:	4644      	mov	r4, r8
   2e3ca:	e7ec      	b.n	2e3a6 <stream_handler_get+0xd6>
   2e3cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e3d0:	e7ec      	b.n	2e3ac <stream_handler_get+0xdc>
   2e3d2:	bf00      	nop

0002e3d4 <stream_handler_available>:
   2e3d4:	b510      	push	{r4, lr}
   2e3d6:	4604      	mov	r4, r0
   2e3d8:	68c0      	ldr	r0, [r0, #12]
   2e3da:	f7fc fa01 	bl	2a7e0 <linked_list_peek>
   2e3de:	b150      	cbz	r0, 2e3f6 <stream_handler_available+0x22>
   2e3e0:	6924      	ldr	r4, [r4, #16]
   2e3e2:	4264      	negs	r4, r4
   2e3e4:	6883      	ldr	r3, [r0, #8]
   2e3e6:	441c      	add	r4, r3
   2e3e8:	f7fc fa02 	bl	2a7f0 <linked_list_get_next>
   2e3ec:	2800      	cmp	r0, #0
   2e3ee:	d1f9      	bne.n	2e3e4 <stream_handler_available+0x10>
   2e3f0:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   2e3f4:	bd10      	pop	{r4, pc}
   2e3f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e3fa:	bd10      	pop	{r4, pc}

0002e3fc <stream_handler_flush>:
   2e3fc:	b530      	push	{r4, r5, lr}
   2e3fe:	4605      	mov	r5, r0
   2e400:	68c0      	ldr	r0, [r0, #12]
   2e402:	b085      	sub	sp, #20
   2e404:	b9a8      	cbnz	r0, 2e432 <stream_handler_flush+0x36>
   2e406:	e01a      	b.n	2e43e <stream_handler_flush+0x42>
   2e408:	68e8      	ldr	r0, [r5, #12]
   2e40a:	f7fc f9df 	bl	2a7cc <linked_list_pop>
   2e40e:	4604      	mov	r4, r0
   2e410:	b170      	cbz	r0, 2e430 <stream_handler_flush+0x34>
   2e412:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   2e416:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   2e41a:	e9cd 0100 	strd	r0, r1, [sp]
   2e41e:	e9cd 2302 	strd	r2, r3, [sp, #8]
   2e422:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   2e426:	4668      	mov	r0, sp
   2e428:	4798      	blx	r3
   2e42a:	4620      	mov	r0, r4
   2e42c:	f7f8 fefc 	bl	27228 <nrf_free>
   2e430:	68e8      	ldr	r0, [r5, #12]
   2e432:	f7fc f9db 	bl	2a7ec <linked_list_size_get>
   2e436:	2800      	cmp	r0, #0
   2e438:	d1e6      	bne.n	2e408 <stream_handler_flush+0xc>
   2e43a:	b005      	add	sp, #20
   2e43c:	bd30      	pop	{r4, r5, pc}
   2e43e:	2008      	movs	r0, #8
   2e440:	b005      	add	sp, #20
   2e442:	bd30      	pop	{r4, r5, pc}

0002e444 <stream_handler_free>:
   2e444:	b530      	push	{r4, r5, lr}
   2e446:	4605      	mov	r5, r0
   2e448:	68c0      	ldr	r0, [r0, #12]
   2e44a:	b085      	sub	sp, #20
   2e44c:	b9a0      	cbnz	r0, 2e478 <stream_handler_free+0x34>
   2e44e:	e01c      	b.n	2e48a <stream_handler_free+0x46>
   2e450:	f7fc f9bc 	bl	2a7cc <linked_list_pop>
   2e454:	4604      	mov	r4, r0
   2e456:	b170      	cbz	r0, 2e476 <stream_handler_free+0x32>
   2e458:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   2e45c:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   2e460:	e9cd 0100 	strd	r0, r1, [sp]
   2e464:	e9cd 2302 	strd	r2, r3, [sp, #8]
   2e468:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   2e46c:	4668      	mov	r0, sp
   2e46e:	4798      	blx	r3
   2e470:	4620      	mov	r0, r4
   2e472:	f7f8 fed9 	bl	27228 <nrf_free>
   2e476:	68e8      	ldr	r0, [r5, #12]
   2e478:	f7fc f9b8 	bl	2a7ec <linked_list_size_get>
   2e47c:	4604      	mov	r4, r0
   2e47e:	68e8      	ldr	r0, [r5, #12]
   2e480:	2c00      	cmp	r4, #0
   2e482:	d1e5      	bne.n	2e450 <stream_handler_free+0xc>
   2e484:	f7f8 fed0 	bl	27228 <nrf_free>
   2e488:	60ec      	str	r4, [r5, #12]
   2e48a:	b005      	add	sp, #20
   2e48c:	bd30      	pop	{r4, r5, pc}
   2e48e:	bf00      	nop

0002e490 <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   2e490:	4a07      	ldr	r2, [pc, #28]	; (2e4b0 <SystemInit+0x20>)
   2e492:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   2e496:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   2e49a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   2e49e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2e4a2:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   2e4a6:	4b03      	ldr	r3, [pc, #12]	; (2e4b4 <SystemInit+0x24>)
   2e4a8:	4a03      	ldr	r2, [pc, #12]	; (2e4b8 <SystemInit+0x28>)
   2e4aa:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   2e4ac:	4770      	bx	lr
   2e4ae:	bf00      	nop
   2e4b0:	e000ed00 	.word	0xe000ed00
   2e4b4:	200295b0 	.word	0x200295b0
   2e4b8:	03d09000 	.word	0x03d09000

0002e4bc <nrfx_nvmc_page_erase>:
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get());
   2e4bc:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
{
   2e4c0:	b508      	push	{r3, lr}
    NRFX_ASSERT((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get());
   2e4c2:	d305      	bcc.n	2e4d0 <nrfx_nvmc_page_erase+0x14>
   2e4c4:	21dd      	movs	r1, #221	; 0xdd
   2e4c6:	4b0d      	ldr	r3, [pc, #52]	; (2e4fc <nrfx_nvmc_page_erase+0x40>)
   2e4c8:	4a0d      	ldr	r2, [pc, #52]	; (2e500 <nrfx_nvmc_page_erase+0x44>)
   2e4ca:	480e      	ldr	r0, [pc, #56]	; (2e504 <nrfx_nvmc_page_erase+0x48>)
   2e4cc:	f003 faf2 	bl	31ab4 <__assert_func>
    return !(addr % flash_page_size_get());
   2e4d0:	f3c0 030b 	ubfx	r3, r0, #0, #12

    if (!is_page_aligned_check(addr))
   2e4d4:	b97b      	cbnz	r3, 2e4f6 <nrfx_nvmc_page_erase+0x3a>

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
   2e4d6:	2202      	movs	r2, #2
   2e4d8:	4b0b      	ldr	r3, [pc, #44]	; (2e508 <nrfx_nvmc_page_erase+0x4c>)
   2e4da:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
   2e4de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2e4e2:	6002      	str	r2, [r0, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   2e4e4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   2e4e8:	07d2      	lsls	r2, r2, #31
   2e4ea:	d5fb      	bpl.n	2e4e4 <nrfx_nvmc_page_erase+0x28>
    p_reg->CONFIGNS = (uint32_t)mode;
   2e4ec:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   2e4ee:	4807      	ldr	r0, [pc, #28]	; (2e50c <nrfx_nvmc_page_erase+0x50>)
   2e4f0:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
}
   2e4f4:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_ADDR;
   2e4f6:	4806      	ldr	r0, [pc, #24]	; (2e510 <nrfx_nvmc_page_erase+0x54>)
   2e4f8:	e7fc      	b.n	2e4f4 <nrfx_nvmc_page_erase+0x38>
   2e4fa:	bf00      	nop
   2e4fc:	0003aba5 	.word	0x0003aba5
   2e500:	0003abf2 	.word	0x0003abf2
   2e504:	0003ab69 	.word	0x0003ab69
   2e508:	40039000 	.word	0x40039000
   2e50c:	0bad0000 	.word	0x0bad0000
   2e510:	0bad000a 	.word	0x0bad000a

0002e514 <nrfx_nvmc_word_write>:
    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, &value, 1));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
    NRFX_ASSERT((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get());
   2e514:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
{
   2e518:	b508      	push	{r3, lr}
    NRFX_ASSERT((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get());
   2e51a:	d306      	bcc.n	2e52a <nrfx_nvmc_word_write+0x16>
   2e51c:	f240 114d 	movw	r1, #333	; 0x14d
   2e520:	4b0d      	ldr	r3, [pc, #52]	; (2e558 <nrfx_nvmc_word_write+0x44>)
   2e522:	4a0e      	ldr	r2, [pc, #56]	; (2e55c <nrfx_nvmc_word_write+0x48>)
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   2e524:	480e      	ldr	r0, [pc, #56]	; (2e560 <nrfx_nvmc_word_write+0x4c>)
   2e526:	f003 fac5 	bl	31ab4 <__assert_func>
   2e52a:	0783      	lsls	r3, r0, #30
   2e52c:	d004      	beq.n	2e538 <nrfx_nvmc_word_write+0x24>
   2e52e:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   2e532:	4b0c      	ldr	r3, [pc, #48]	; (2e564 <nrfx_nvmc_word_write+0x50>)
   2e534:	4a09      	ldr	r2, [pc, #36]	; (2e55c <nrfx_nvmc_word_write+0x48>)
   2e536:	e7f5      	b.n	2e524 <nrfx_nvmc_word_write+0x10>
   2e538:	2201      	movs	r2, #1
   2e53a:	4b0b      	ldr	r3, [pc, #44]	; (2e568 <nrfx_nvmc_word_write+0x54>)
   2e53c:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    return (bool)(p_reg->READYNEXT & NVMC_READYNEXT_READYNEXT_Msk);
   2e540:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
   2e544:	07d2      	lsls	r2, r2, #31
   2e546:	d5fb      	bpl.n	2e540 <nrfx_nvmc_word_write+0x2c>
    *(volatile uint32_t *)addr = value;
   2e548:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   2e54a:	f3bf 8f5f 	dmb	sy
    p_reg->CONFIGNS = (uint32_t)mode;
   2e54e:	2200      	movs	r2, #0
   2e550:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    nvmc_write_mode_set();

    nvmc_word_write(addr, value);

    nvmc_readonly_mode_set();
}
   2e554:	bd08      	pop	{r3, pc}
   2e556:	bf00      	nop
   2e558:	0003aba5 	.word	0x0003aba5
   2e55c:	0003ac07 	.word	0x0003ac07
   2e560:	0003ab69 	.word	0x0003ab69
   2e564:	0003abc9 	.word	0x0003abc9
   2e568:	40039000 	.word	0x40039000

0002e56c <z_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_device_do_config_level(s32_t level)
{
   2e56c:	b570      	push	{r4, r5, r6, lr}
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
   2e56e:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
   2e570:	4b08      	ldr	r3, [pc, #32]	; (2e594 <z_sys_device_do_config_level+0x28>)
   2e572:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   2e576:	3001      	adds	r0, #1
   2e578:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   2e57c:	42a5      	cmp	r5, r4
   2e57e:	d800      	bhi.n	2e582 <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
   2e580:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
   2e582:	6823      	ldr	r3, [r4, #0]
   2e584:	4620      	mov	r0, r4
   2e586:	685b      	ldr	r3, [r3, #4]
   2e588:	4798      	blx	r3
		if (retval != 0) {
   2e58a:	b100      	cbz	r0, 2e58e <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
   2e58c:	6066      	str	r6, [r4, #4]
								info++) {
   2e58e:	340c      	adds	r4, #12
   2e590:	e7f4      	b.n	2e57c <z_sys_device_do_config_level+0x10>
   2e592:	bf00      	nop
   2e594:	000374dc 	.word	0x000374dc

0002e598 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   2e598:	4b10      	ldr	r3, [pc, #64]	; (2e5dc <z_impl_device_get_binding+0x44>)
{
   2e59a:	b570      	push	{r4, r5, r6, lr}
   2e59c:	4605      	mov	r5, r0
   2e59e:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   2e5a0:	4c0f      	ldr	r4, [pc, #60]	; (2e5e0 <z_impl_device_get_binding+0x48>)
   2e5a2:	429c      	cmp	r4, r3
   2e5a4:	d104      	bne.n	2e5b0 <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   2e5a6:	4c0e      	ldr	r4, [pc, #56]	; (2e5e0 <z_impl_device_get_binding+0x48>)
   2e5a8:	42b4      	cmp	r4, r6
   2e5aa:	d109      	bne.n	2e5c0 <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
   2e5ac:	2400      	movs	r4, #0
   2e5ae:	e012      	b.n	2e5d6 <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
   2e5b0:	6862      	ldr	r2, [r4, #4]
   2e5b2:	b11a      	cbz	r2, 2e5bc <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
   2e5b4:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
   2e5b6:	6812      	ldr	r2, [r2, #0]
   2e5b8:	42aa      	cmp	r2, r5
   2e5ba:	d00c      	beq.n	2e5d6 <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   2e5bc:	340c      	adds	r4, #12
   2e5be:	e7f0      	b.n	2e5a2 <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
   2e5c0:	6863      	ldr	r3, [r4, #4]
   2e5c2:	b90b      	cbnz	r3, 2e5c8 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   2e5c4:	340c      	adds	r4, #12
   2e5c6:	e7ef      	b.n	2e5a8 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
   2e5c8:	6823      	ldr	r3, [r4, #0]
   2e5ca:	4628      	mov	r0, r5
   2e5cc:	6819      	ldr	r1, [r3, #0]
   2e5ce:	f7ee fd85 	bl	1d0dc <strcmp>
   2e5d2:	2800      	cmp	r0, #0
   2e5d4:	d1f6      	bne.n	2e5c4 <z_impl_device_get_binding+0x2c>
}
   2e5d6:	4620      	mov	r0, r4
   2e5d8:	bd70      	pop	{r4, r5, r6, pc}
   2e5da:	bf00      	nop
   2e5dc:	20029850 	.word	0x20029850
   2e5e0:	20029790 	.word	0x20029790

0002e5e4 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   2e5e4:	4b01      	ldr	r3, [pc, #4]	; (2e5ec <z_impl_z_errno+0x8>)
   2e5e6:	6898      	ldr	r0, [r3, #8]
}
   2e5e8:	3054      	adds	r0, #84	; 0x54
   2e5ea:	4770      	bx	lr
   2e5ec:	20023ed0 	.word	0x20023ed0

0002e5f0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   2e5f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2e5f2:	4604      	mov	r4, r0
   2e5f4:	460e      	mov	r6, r1
	return z_impl_k_current_get();
   2e5f6:	f002 f8c1 	bl	3077c <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   2e5fa:	2200      	movs	r2, #0
   2e5fc:	2c04      	cmp	r4, #4
   2e5fe:	bf96      	itet	ls
   2e600:	4b1e      	ldrls	r3, [pc, #120]	; (2e67c <z_fatal_error+0x8c>)
   2e602:	4b1f      	ldrhi	r3, [pc, #124]	; (2e680 <z_fatal_error+0x90>)
   2e604:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
   2e608:	9200      	str	r2, [sp, #0]
   2e60a:	4605      	mov	r5, r0
   2e60c:	4622      	mov	r2, r4
   2e60e:	2145      	movs	r1, #69	; 0x45
   2e610:	481c      	ldr	r0, [pc, #112]	; (2e684 <z_fatal_error+0x94>)
   2e612:	f004 ff80 	bl	33516 <printk>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   2e616:	69f3      	ldr	r3, [r6, #28]
   2e618:	f3c3 0308 	ubfx	r3, r3, #0, #9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if (arch_is_in_nested_exception(esf)) {
   2e61c:	b11b      	cbz	r3, 2e626 <z_fatal_error+0x36>
		LOG_ERR("Fault during interrupt handling\n");
   2e61e:	2145      	movs	r1, #69	; 0x45
   2e620:	4819      	ldr	r0, [pc, #100]	; (2e688 <z_fatal_error+0x98>)
   2e622:	f004 ff78 	bl	33516 <printk>
	const char *thread_name = k_thread_name_get(thread);
   2e626:	4628      	mov	r0, r5
   2e628:	f007 f962 	bl	358f0 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   2e62c:	4603      	mov	r3, r0
   2e62e:	b310      	cbz	r0, 2e676 <z_fatal_error+0x86>
   2e630:	7801      	ldrb	r1, [r0, #0]
		thread_name = "unknown";
   2e632:	4a16      	ldr	r2, [pc, #88]	; (2e68c <z_fatal_error+0x9c>)
   2e634:	2900      	cmp	r1, #0
   2e636:	bf08      	it	eq
   2e638:	4613      	moveq	r3, r2
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   2e63a:	462a      	mov	r2, r5
   2e63c:	2145      	movs	r1, #69	; 0x45
   2e63e:	4814      	ldr	r0, [pc, #80]	; (2e690 <z_fatal_error+0xa0>)
   2e640:	f004 ff69 	bl	33516 <printk>
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
   2e644:	4631      	mov	r1, r6
   2e646:	4620      	mov	r0, r4
   2e648:	f7f5 fd2e 	bl	240a8 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   2e64c:	2c04      	cmp	r4, #4
   2e64e:	d10c      	bne.n	2e66a <z_fatal_error+0x7a>
   2e650:	4910      	ldr	r1, [pc, #64]	; (2e694 <z_fatal_error+0xa4>)
   2e652:	2386      	movs	r3, #134	; 0x86
   2e654:	4a10      	ldr	r2, [pc, #64]	; (2e698 <z_fatal_error+0xa8>)
   2e656:	4811      	ldr	r0, [pc, #68]	; (2e69c <z_fatal_error+0xac>)
   2e658:	f004 ff5d 	bl	33516 <printk>
   2e65c:	4810      	ldr	r0, [pc, #64]	; (2e6a0 <z_fatal_error+0xb0>)
   2e65e:	f004 ff5a 	bl	33516 <printk>
   2e662:	2186      	movs	r1, #134	; 0x86
   2e664:	480c      	ldr	r0, [pc, #48]	; (2e698 <z_fatal_error+0xa8>)
   2e666:	f004 ff9c 	bl	335a2 <assert_post_action>
	z_impl_k_thread_abort(thread);
   2e66a:	4628      	mov	r0, r5
			}
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	k_thread_abort(thread);
}
   2e66c:	b002      	add	sp, #8
   2e66e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2e672:	f7f2 bac9 	b.w	20c08 <z_impl_k_thread_abort>
		thread_name = "unknown";
   2e676:	4b05      	ldr	r3, [pc, #20]	; (2e68c <z_fatal_error+0x9c>)
   2e678:	e7df      	b.n	2e63a <z_fatal_error+0x4a>
   2e67a:	bf00      	nop
   2e67c:	000374f4 	.word	0x000374f4
   2e680:	0003ac1c 	.word	0x0003ac1c
   2e684:	0003ac32 	.word	0x0003ac32
   2e688:	0003ac5f 	.word	0x0003ac5f
   2e68c:	0003ac2a 	.word	0x0003ac2a
   2e690:	0003ac85 	.word	0x0003ac85
   2e694:	0003acc4 	.word	0x0003acc4
   2e698:	0003aca2 	.word	0x0003aca2
   2e69c:	00037a66 	.word	0x00037a66
   2e6a0:	0003ace1 	.word	0x0003ace1

0002e6a4 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   2e6a4:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   2e6a6:	4d0b      	ldr	r5, [pc, #44]	; (2e6d4 <idle+0x30>)
	__asm__ volatile(
   2e6a8:	f04f 0220 	mov.w	r2, #32
   2e6ac:	f3ef 8311 	mrs	r3, BASEPRI
   2e6b0:	f382 8811 	msr	BASEPRI, r2
   2e6b4:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
   2e6b8:	f002 fd22 	bl	31100 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   2e6bc:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
   2e6be:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   2e6c0:	2802      	cmp	r0, #2
   2e6c2:	bfd8      	it	le
   2e6c4:	4608      	movle	r0, r1
   2e6c6:	f002 fd63 	bl	31190 <z_set_timeout_expiry>
	_kernel.idle = ticks;
   2e6ca:	622c      	str	r4, [r5, #32]
	arch_cpu_idle();
   2e6cc:	f7f1 ffaa 	bl	20624 <arch_cpu_idle>
}
   2e6d0:	e7ea      	b.n	2e6a8 <idle+0x4>
   2e6d2:	bf00      	nop
   2e6d4:	20023ed0 	.word	0x20023ed0

0002e6d8 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   2e6d8:	4802      	ldr	r0, [pc, #8]	; (2e6e4 <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
   2e6da:	4a03      	ldr	r2, [pc, #12]	; (2e6e8 <z_bss_zero+0x10>)
   2e6dc:	2100      	movs	r1, #0
   2e6de:	1a12      	subs	r2, r2, r0
   2e6e0:	f007 ba32 	b.w	35b48 <memset>
   2e6e4:	20020000 	.word	0x20020000
   2e6e8:	20025cbc 	.word	0x20025cbc

0002e6ec <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   2e6ec:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2e6ee:	4806      	ldr	r0, [pc, #24]	; (2e708 <z_data_copy+0x1c>)
   2e6f0:	4a06      	ldr	r2, [pc, #24]	; (2e70c <z_data_copy+0x20>)
   2e6f2:	4907      	ldr	r1, [pc, #28]	; (2e710 <z_data_copy+0x24>)
   2e6f4:	1a12      	subs	r2, r2, r0
   2e6f6:	f007 fa07 	bl	35b08 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   2e6fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2e6fe:	4a05      	ldr	r2, [pc, #20]	; (2e714 <z_data_copy+0x28>)
   2e700:	4905      	ldr	r1, [pc, #20]	; (2e718 <z_data_copy+0x2c>)
   2e702:	4806      	ldr	r0, [pc, #24]	; (2e71c <z_data_copy+0x30>)
   2e704:	f007 ba00 	b.w	35b08 <memcpy>
   2e708:	20029540 	.word	0x20029540
   2e70c:	2002995c 	.word	0x2002995c
   2e710:	0003b528 	.word	0x0003b528
   2e714:	00000000 	.word	0x00000000
   2e718:	0003b528 	.word	0x0003b528
   2e71c:	20020000 	.word	0x20020000

0002e720 <bg_thread_main>:
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
   2e720:	2201      	movs	r2, #1
{
   2e722:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   2e724:	4b0b      	ldr	r3, [pc, #44]	; (2e754 <bg_thread_main+0x34>)

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   2e726:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   2e728:	701a      	strb	r2, [r3, #0]
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   2e72a:	f7ff ff1f 	bl	2e56c <z_sys_device_do_config_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   2e72e:	4a0a      	ldr	r2, [pc, #40]	; (2e758 <bg_thread_main+0x38>)
   2e730:	490a      	ldr	r1, [pc, #40]	; (2e75c <bg_thread_main+0x3c>)
   2e732:	480b      	ldr	r0, [pc, #44]	; (2e760 <bg_thread_main+0x40>)
   2e734:	f004 feef 	bl	33516 <printk>
			KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   2e738:	2003      	movs	r0, #3
   2e73a:	f7ff ff17 	bl	2e56c <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
   2e73e:	f002 f9f3 	bl	30b28 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   2e742:	f7ef fde9 	bl	1e318 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   2e746:	4a07      	ldr	r2, [pc, #28]	; (2e764 <bg_thread_main+0x44>)
   2e748:	7b13      	ldrb	r3, [r2, #12]
   2e74a:	f023 0301 	bic.w	r3, r3, #1
   2e74e:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   2e750:	bd08      	pop	{r3, pc}
   2e752:	bf00      	nop
   2e754:	20025b65 	.word	0x20025b65
   2e758:	00038d12 	.word	0x00038d12
   2e75c:	0003ad60 	.word	0x0003ad60
   2e760:	0003ad7e 	.word	0x0003ad7e
   2e764:	20022ddc 	.word	0x20022ddc

0002e768 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   2e768:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
   2e76a:	4b36      	ldr	r3, [pc, #216]	; (2e844 <z_cstart+0xdc>)
   2e76c:	b0b2      	sub	sp, #200	; 0xc8
   2e76e:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   2e772:	f382 8808 	msr	MSP, r2
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   2e776:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2e77a:	2400      	movs	r4, #0
   2e77c:	23e0      	movs	r3, #224	; 0xe0
   2e77e:	4d32      	ldr	r5, [pc, #200]	; (2e848 <z_cstart+0xe0>)

	/* perform any architecture-specific initialization */
	arch_kernel_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
   2e780:	2701      	movs	r7, #1
   2e782:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   2e786:	77ec      	strb	r4, [r5, #31]
   2e788:	762c      	strb	r4, [r5, #24]
   2e78a:	766c      	strb	r4, [r5, #25]
   2e78c:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   2e78e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
   2e790:	4e2e      	ldr	r6, [pc, #184]	; (2e84c <z_cstart+0xe4>)
   2e792:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   2e796:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   2e798:	f7f2 fa0c 	bl	20bb4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   2e79c:	f7f1 ff3c 	bl	20618 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   2e7a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2e7a4:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   2e7a6:	62eb      	str	r3, [r5, #44]	; 0x2c
	struct k_thread dummy_thread = {
   2e7a8:	ab06      	add	r3, sp, #24
   2e7aa:	22b0      	movs	r2, #176	; 0xb0
   2e7ac:	4621      	mov	r1, r4
   2e7ae:	4618      	mov	r0, r3
   2e7b0:	f007 f9ca 	bl	35b48 <memset>
	_current = &dummy_thread;
   2e7b4:	60b0      	str	r0, [r6, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   2e7b6:	4620      	mov	r0, r4
	struct k_thread dummy_thread = {
   2e7b8:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   2e7bc:	f7ff fed6 	bl	2e56c <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   2e7c0:	4638      	mov	r0, r7
   2e7c2:	f7ff fed3 	bl	2e56c <z_sys_device_do_config_level>
	_kernel.ready_q.cache = &z_main_thread;
   2e7c6:	4d22      	ldr	r5, [pc, #136]	; (2e850 <z_cstart+0xe8>)
	z_sched_init();
   2e7c8:	f001 fe4c 	bl	30464 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
   2e7cc:	4b21      	ldr	r3, [pc, #132]	; (2e854 <z_cstart+0xec>)
   2e7ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   2e7d2:	e9cd 7304 	strd	r7, r3, [sp, #16]
   2e7d6:	4628      	mov	r0, r5
   2e7d8:	4b1f      	ldr	r3, [pc, #124]	; (2e858 <z_cstart+0xf0>)
   2e7da:	e9cd 4402 	strd	r4, r4, [sp, #8]
   2e7de:	e9cd 4400 	strd	r4, r4, [sp]
   2e7e2:	491e      	ldr	r1, [pc, #120]	; (2e85c <z_cstart+0xf4>)
	_kernel.ready_q.cache = &z_main_thread;
   2e7e4:	6275      	str	r5, [r6, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
   2e7e6:	f002 f8b5 	bl	30954 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2e7ea:	7b6b      	ldrb	r3, [r5, #13]
   2e7ec:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   2e7f0:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2e7f4:	736a      	strb	r2, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   2e7f6:	d104      	bne.n	2e802 <z_cstart+0x9a>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
   2e7f8:	69ab      	ldr	r3, [r5, #24]
   2e7fa:	b913      	cbnz	r3, 2e802 <z_cstart+0x9a>
		z_add_thread_to_ready_q(thread);
   2e7fc:	4628      	mov	r0, r5
   2e7fe:	f001 f91b 	bl	2fa38 <z_add_thread_to_ready_q>
	z_setup_new_thread(thread, stack,
   2e802:	4b17      	ldr	r3, [pc, #92]	; (2e860 <z_cstart+0xf8>)
   2e804:	2201      	movs	r2, #1
   2e806:	9305      	str	r3, [sp, #20]
   2e808:	230f      	movs	r3, #15
   2e80a:	e9cd 3203 	strd	r3, r2, [sp, #12]
   2e80e:	2300      	movs	r3, #0
   2e810:	4d14      	ldr	r5, [pc, #80]	; (2e864 <z_cstart+0xfc>)
   2e812:	f44f 72a0 	mov.w	r2, #320	; 0x140
   2e816:	4628      	mov	r0, r5
   2e818:	e9cd 3301 	strd	r3, r3, [sp, #4]
   2e81c:	4912      	ldr	r1, [pc, #72]	; (2e868 <z_cstart+0x100>)
   2e81e:	9300      	str	r3, [sp, #0]
   2e820:	4b12      	ldr	r3, [pc, #72]	; (2e86c <z_cstart+0x104>)
   2e822:	f002 f897 	bl	30954 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2e826:	7b6b      	ldrb	r3, [r5, #13]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   2e828:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   2e82c:	f023 0304 	bic.w	r3, r3, #4
   2e830:	736b      	strb	r3, [r5, #13]
	list->head = (sys_dnode_t *)list;
   2e832:	4b0f      	ldr	r3, [pc, #60]	; (2e870 <z_cstart+0x108>)
   2e834:	4909      	ldr	r1, [pc, #36]	; (2e85c <z_cstart+0xf4>)
	list->tail = (sys_dnode_t *)list;
   2e836:	e9c6 3306 	strd	r3, r3, [r6, #24]
   2e83a:	4805      	ldr	r0, [pc, #20]	; (2e850 <z_cstart+0xe8>)
   2e83c:	4b06      	ldr	r3, [pc, #24]	; (2e858 <z_cstart+0xf0>)
	_kernel.cpus[0].idle_thread = &z_idle_thread;
   2e83e:	60f5      	str	r5, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   2e840:	f7f1 febe 	bl	205c0 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   2e844:	20027400 	.word	0x20027400
   2e848:	e000ed00 	.word	0xe000ed00
   2e84c:	20023ed0 	.word	0x20023ed0
   2e850:	20022ddc 	.word	0x20022ddc
   2e854:	0003ada5 	.word	0x0003ada5
   2e858:	0002e721 	.word	0x0002e721
   2e85c:	200262c0 	.word	0x200262c0
   2e860:	0003adaa 	.word	0x0003adaa
   2e864:	20022d2c 	.word	0x20022d2c
   2e868:	200272c0 	.word	0x200272c0
   2e86c:	0002e6a5 	.word	0x0002e6a5
   2e870:	20023ee8 	.word	0x20023ee8

0002e874 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
   2e874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   2e878:	4d16      	ldr	r5, [pc, #88]	; (2e8d4 <init_mem_slab_module+0x60>)
   2e87a:	4c17      	ldr	r4, [pc, #92]	; (2e8d8 <init_mem_slab_module+0x64>)
   2e87c:	46a8      	mov	r8, r5
   2e87e:	4e17      	ldr	r6, [pc, #92]	; (2e8dc <init_mem_slab_module+0x68>)
   2e880:	42ac      	cmp	r4, r5
   2e882:	d90c      	bls.n	2e89e <init_mem_slab_module+0x2a>
   2e884:	4916      	ldr	r1, [pc, #88]	; (2e8e0 <init_mem_slab_module+0x6c>)
   2e886:	2342      	movs	r3, #66	; 0x42
   2e888:	4632      	mov	r2, r6
   2e88a:	4816      	ldr	r0, [pc, #88]	; (2e8e4 <init_mem_slab_module+0x70>)
   2e88c:	f004 fe43 	bl	33516 <printk>
   2e890:	4815      	ldr	r0, [pc, #84]	; (2e8e8 <init_mem_slab_module+0x74>)
   2e892:	f004 fe40 	bl	33516 <printk>
   2e896:	2142      	movs	r1, #66	; 0x42
   2e898:	4630      	mov	r0, r6
   2e89a:	f004 fe82 	bl	335a2 <assert_post_action>
   2e89e:	4544      	cmp	r4, r8
   2e8a0:	d302      	bcc.n	2e8a8 <init_mem_slab_module+0x34>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   2e8a2:	2000      	movs	r0, #0
	return rc;
}
   2e8a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2e8a8:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
   2e8ac:	ea41 0302 	orr.w	r3, r1, r2
   2e8b0:	f013 0303 	ands.w	r3, r3, #3
   2e8b4:	d10b      	bne.n	2e8ce <init_mem_slab_module+0x5a>
	for (j = 0U; j < slab->num_blocks; j++) {
   2e8b6:	68a0      	ldr	r0, [r4, #8]
	slab->free_list = NULL;
   2e8b8:	6163      	str	r3, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   2e8ba:	4283      	cmp	r3, r0
   2e8bc:	d101      	bne.n	2e8c2 <init_mem_slab_module+0x4e>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   2e8be:	341c      	adds	r4, #28
   2e8c0:	e7de      	b.n	2e880 <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
   2e8c2:	6967      	ldr	r7, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   2e8c4:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   2e8c6:	600f      	str	r7, [r1, #0]
		slab->free_list = p;
   2e8c8:	6161      	str	r1, [r4, #20]
		p += slab->block_size;
   2e8ca:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   2e8cc:	e7f5      	b.n	2e8ba <init_mem_slab_module+0x46>
		return -EINVAL;
   2e8ce:	f06f 0015 	mvn.w	r0, #21
	return rc;
   2e8d2:	e7e7      	b.n	2e8a4 <init_mem_slab_module+0x30>
   2e8d4:	2002986c 	.word	0x2002986c
   2e8d8:	20029850 	.word	0x20029850
   2e8dc:	0003adb2 	.word	0x0003adb2
   2e8e0:	0003add7 	.word	0x0003add7
   2e8e4:	00037a66 	.word	0x00037a66
   2e8e8:	00038117 	.word	0x00038117

0002e8ec <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
   2e8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e8ee:	4604      	mov	r4, r0
   2e8f0:	460d      	mov	r5, r1
   2e8f2:	4616      	mov	r6, r2
   2e8f4:	f04f 0320 	mov.w	r3, #32
   2e8f8:	f3ef 8711 	mrs	r7, BASEPRI
   2e8fc:	f383 8811 	msr	BASEPRI, r3
   2e900:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2e904:	4823      	ldr	r0, [pc, #140]	; (2e994 <k_mem_slab_alloc+0xa8>)
   2e906:	f002 f83d 	bl	30984 <z_spin_lock_valid>
   2e90a:	b968      	cbnz	r0, 2e928 <k_mem_slab_alloc+0x3c>
   2e90c:	234a      	movs	r3, #74	; 0x4a
   2e90e:	4a22      	ldr	r2, [pc, #136]	; (2e998 <k_mem_slab_alloc+0xac>)
   2e910:	4922      	ldr	r1, [pc, #136]	; (2e99c <k_mem_slab_alloc+0xb0>)
   2e912:	4823      	ldr	r0, [pc, #140]	; (2e9a0 <k_mem_slab_alloc+0xb4>)
   2e914:	f004 fdff 	bl	33516 <printk>
   2e918:	491e      	ldr	r1, [pc, #120]	; (2e994 <k_mem_slab_alloc+0xa8>)
   2e91a:	4822      	ldr	r0, [pc, #136]	; (2e9a4 <k_mem_slab_alloc+0xb8>)
   2e91c:	f004 fdfb 	bl	33516 <printk>
   2e920:	214a      	movs	r1, #74	; 0x4a
   2e922:	481d      	ldr	r0, [pc, #116]	; (2e998 <k_mem_slab_alloc+0xac>)
   2e924:	f004 fe3d 	bl	335a2 <assert_post_action>
	z_spin_lock_set_owner(l);
   2e928:	481a      	ldr	r0, [pc, #104]	; (2e994 <k_mem_slab_alloc+0xa8>)
   2e92a:	f002 f849 	bl	309c0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   2e92e:	6963      	ldr	r3, [r4, #20]
   2e930:	b1eb      	cbz	r3, 2e96e <k_mem_slab_alloc+0x82>
		/* take a free block */
		*mem = slab->free_list;
   2e932:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   2e934:	681b      	ldr	r3, [r3, #0]
   2e936:	6163      	str	r3, [r4, #20]
		slab->num_used++;
   2e938:	69a3      	ldr	r3, [r4, #24]
   2e93a:	3301      	adds	r3, #1
   2e93c:	61a3      	str	r3, [r4, #24]
		result = 0;
   2e93e:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2e940:	4814      	ldr	r0, [pc, #80]	; (2e994 <k_mem_slab_alloc+0xa8>)
   2e942:	f002 f82d 	bl	309a0 <z_spin_unlock_valid>
   2e946:	b968      	cbnz	r0, 2e964 <k_mem_slab_alloc+0x78>
   2e948:	235d      	movs	r3, #93	; 0x5d
   2e94a:	4a13      	ldr	r2, [pc, #76]	; (2e998 <k_mem_slab_alloc+0xac>)
   2e94c:	4916      	ldr	r1, [pc, #88]	; (2e9a8 <k_mem_slab_alloc+0xbc>)
   2e94e:	4814      	ldr	r0, [pc, #80]	; (2e9a0 <k_mem_slab_alloc+0xb4>)
   2e950:	f004 fde1 	bl	33516 <printk>
   2e954:	490f      	ldr	r1, [pc, #60]	; (2e994 <k_mem_slab_alloc+0xa8>)
   2e956:	4815      	ldr	r0, [pc, #84]	; (2e9ac <k_mem_slab_alloc+0xc0>)
   2e958:	f004 fddd 	bl	33516 <printk>
   2e95c:	215d      	movs	r1, #93	; 0x5d
   2e95e:	480e      	ldr	r0, [pc, #56]	; (2e998 <k_mem_slab_alloc+0xac>)
   2e960:	f004 fe1f 	bl	335a2 <assert_post_action>
	__asm__ volatile(
   2e964:	f387 8811 	msr	BASEPRI, r7
   2e968:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   2e96c:	e010      	b.n	2e990 <k_mem_slab_alloc+0xa4>
	} else if (timeout == K_NO_WAIT) {
   2e96e:	b91e      	cbnz	r6, 2e978 <k_mem_slab_alloc+0x8c>
		result = -ENOMEM;
   2e970:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
   2e974:	602e      	str	r6, [r5, #0]
		result = -ENOMEM;
   2e976:	e7e3      	b.n	2e940 <k_mem_slab_alloc+0x54>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   2e978:	4622      	mov	r2, r4
   2e97a:	4633      	mov	r3, r6
   2e97c:	4639      	mov	r1, r7
   2e97e:	4805      	ldr	r0, [pc, #20]	; (2e994 <k_mem_slab_alloc+0xa8>)
   2e980:	f001 fc20 	bl	301c4 <z_pend_curr>
		if (result == 0) {
   2e984:	4604      	mov	r4, r0
   2e986:	b918      	cbnz	r0, 2e990 <k_mem_slab_alloc+0xa4>
			*mem = _current->base.swap_data;
   2e988:	4b09      	ldr	r3, [pc, #36]	; (2e9b0 <k_mem_slab_alloc+0xc4>)
   2e98a:	689b      	ldr	r3, [r3, #8]
   2e98c:	695b      	ldr	r3, [r3, #20]
   2e98e:	602b      	str	r3, [r5, #0]
}
   2e990:	4620      	mov	r0, r4
   2e992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2e994:	20022e8c 	.word	0x20022e8c
   2e998:	000382ba 	.word	0x000382ba
   2e99c:	000382e0 	.word	0x000382e0
   2e9a0:	00037a66 	.word	0x00037a66
   2e9a4:	000382f5 	.word	0x000382f5
   2e9a8:	0003830d 	.word	0x0003830d
   2e9ac:	00038324 	.word	0x00038324
   2e9b0:	20023ed0 	.word	0x20023ed0

0002e9b4 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   2e9b4:	b570      	push	{r4, r5, r6, lr}
   2e9b6:	4604      	mov	r4, r0
   2e9b8:	460d      	mov	r5, r1
	__asm__ volatile(
   2e9ba:	f04f 0320 	mov.w	r3, #32
   2e9be:	f3ef 8611 	mrs	r6, BASEPRI
   2e9c2:	f383 8811 	msr	BASEPRI, r3
   2e9c6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2e9ca:	4824      	ldr	r0, [pc, #144]	; (2ea5c <k_mem_slab_free+0xa8>)
   2e9cc:	f001 ffda 	bl	30984 <z_spin_lock_valid>
   2e9d0:	b968      	cbnz	r0, 2e9ee <k_mem_slab_free+0x3a>
   2e9d2:	234a      	movs	r3, #74	; 0x4a
   2e9d4:	4a22      	ldr	r2, [pc, #136]	; (2ea60 <k_mem_slab_free+0xac>)
   2e9d6:	4923      	ldr	r1, [pc, #140]	; (2ea64 <k_mem_slab_free+0xb0>)
   2e9d8:	4823      	ldr	r0, [pc, #140]	; (2ea68 <k_mem_slab_free+0xb4>)
   2e9da:	f004 fd9c 	bl	33516 <printk>
   2e9de:	491f      	ldr	r1, [pc, #124]	; (2ea5c <k_mem_slab_free+0xa8>)
   2e9e0:	4822      	ldr	r0, [pc, #136]	; (2ea6c <k_mem_slab_free+0xb8>)
   2e9e2:	f004 fd98 	bl	33516 <printk>
   2e9e6:	214a      	movs	r1, #74	; 0x4a
   2e9e8:	481d      	ldr	r0, [pc, #116]	; (2ea60 <k_mem_slab_free+0xac>)
   2e9ea:	f004 fdda 	bl	335a2 <assert_post_action>
	z_spin_lock_set_owner(l);
   2e9ee:	481b      	ldr	r0, [pc, #108]	; (2ea5c <k_mem_slab_free+0xa8>)
   2e9f0:	f001 ffe6 	bl	309c0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   2e9f4:	4620      	mov	r0, r4
   2e9f6:	f001 fca5 	bl	30344 <z_unpend_first_thread>

	if (pending_thread != NULL) {
   2e9fa:	b180      	cbz	r0, 2ea1e <k_mem_slab_free+0x6a>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   2e9fc:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   2e9fe:	682a      	ldr	r2, [r5, #0]
   2ea00:	6681      	str	r1, [r0, #104]	; 0x68
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   2ea02:	6142      	str	r2, [r0, #20]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   2ea04:	7b42      	ldrb	r2, [r0, #13]
   2ea06:	06d2      	lsls	r2, r2, #27
   2ea08:	d103      	bne.n	2ea12 <k_mem_slab_free+0x5e>
	if (z_is_thread_ready(thread)) {
   2ea0a:	6983      	ldr	r3, [r0, #24]
   2ea0c:	b90b      	cbnz	r3, 2ea12 <k_mem_slab_free+0x5e>
		z_add_thread_to_ready_q(thread);
   2ea0e:	f001 f813 	bl	2fa38 <z_add_thread_to_ready_q>
		z_ready_thread(pending_thread);
		z_reschedule(&lock, key);
   2ea12:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   2ea14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   2ea18:	4810      	ldr	r0, [pc, #64]	; (2ea5c <k_mem_slab_free+0xa8>)
   2ea1a:	f000 be23 	b.w	2f664 <z_reschedule>
		**(char ***)mem = slab->free_list;
   2ea1e:	682b      	ldr	r3, [r5, #0]
   2ea20:	6962      	ldr	r2, [r4, #20]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2ea22:	480e      	ldr	r0, [pc, #56]	; (2ea5c <k_mem_slab_free+0xa8>)
   2ea24:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   2ea26:	682b      	ldr	r3, [r5, #0]
   2ea28:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   2ea2a:	69a3      	ldr	r3, [r4, #24]
   2ea2c:	3b01      	subs	r3, #1
   2ea2e:	61a3      	str	r3, [r4, #24]
   2ea30:	f001 ffb6 	bl	309a0 <z_spin_unlock_valid>
   2ea34:	b968      	cbnz	r0, 2ea52 <k_mem_slab_free+0x9e>
   2ea36:	235d      	movs	r3, #93	; 0x5d
   2ea38:	4a09      	ldr	r2, [pc, #36]	; (2ea60 <k_mem_slab_free+0xac>)
   2ea3a:	490d      	ldr	r1, [pc, #52]	; (2ea70 <k_mem_slab_free+0xbc>)
   2ea3c:	480a      	ldr	r0, [pc, #40]	; (2ea68 <k_mem_slab_free+0xb4>)
   2ea3e:	f004 fd6a 	bl	33516 <printk>
   2ea42:	4906      	ldr	r1, [pc, #24]	; (2ea5c <k_mem_slab_free+0xa8>)
   2ea44:	480b      	ldr	r0, [pc, #44]	; (2ea74 <k_mem_slab_free+0xc0>)
   2ea46:	f004 fd66 	bl	33516 <printk>
   2ea4a:	215d      	movs	r1, #93	; 0x5d
   2ea4c:	4804      	ldr	r0, [pc, #16]	; (2ea60 <k_mem_slab_free+0xac>)
   2ea4e:	f004 fda8 	bl	335a2 <assert_post_action>
	__asm__ volatile(
   2ea52:	f386 8811 	msr	BASEPRI, r6
   2ea56:	f3bf 8f6f 	isb	sy
}
   2ea5a:	bd70      	pop	{r4, r5, r6, pc}
   2ea5c:	20022e8c 	.word	0x20022e8c
   2ea60:	000382ba 	.word	0x000382ba
   2ea64:	000382e0 	.word	0x000382e0
   2ea68:	00037a66 	.word	0x00037a66
   2ea6c:	000382f5 	.word	0x000382f5
   2ea70:	0003830d 	.word	0x0003830d
   2ea74:	00038324 	.word	0x00038324

0002ea78 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
   2ea78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   2ea7a:	4d10      	ldr	r5, [pc, #64]	; (2eabc <init_static_pools+0x44>)
   2ea7c:	4c10      	ldr	r4, [pc, #64]	; (2eac0 <init_static_pools+0x48>)
   2ea7e:	462f      	mov	r7, r5
   2ea80:	4e10      	ldr	r6, [pc, #64]	; (2eac4 <init_static_pools+0x4c>)
   2ea82:	42ac      	cmp	r4, r5
   2ea84:	d90c      	bls.n	2eaa0 <init_static_pools+0x28>
   2ea86:	4910      	ldr	r1, [pc, #64]	; (2eac8 <init_static_pools+0x50>)
   2ea88:	2328      	movs	r3, #40	; 0x28
   2ea8a:	4632      	mov	r2, r6
   2ea8c:	480f      	ldr	r0, [pc, #60]	; (2eacc <init_static_pools+0x54>)
   2ea8e:	f004 fd42 	bl	33516 <printk>
   2ea92:	480f      	ldr	r0, [pc, #60]	; (2ead0 <init_static_pools+0x58>)
   2ea94:	f004 fd3f 	bl	33516 <printk>
   2ea98:	2128      	movs	r1, #40	; 0x28
   2ea9a:	4630      	mov	r0, r6
   2ea9c:	f004 fd81 	bl	335a2 <assert_post_action>
   2eaa0:	42bc      	cmp	r4, r7
   2eaa2:	d301      	bcc.n	2eaa8 <init_static_pools+0x30>
		k_mem_pool_init(p);
	}

	return 0;
}
   2eaa4:	2000      	movs	r0, #0
   2eaa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   2eaa8:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
   2eaac:	4620      	mov	r0, r4
   2eaae:	e9c4 3305 	strd	r3, r3, [r4, #20]
   2eab2:	f004 fc20 	bl	332f6 <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
   2eab6:	341c      	adds	r4, #28
   2eab8:	e7e3      	b.n	2ea82 <init_static_pools+0xa>
   2eaba:	bf00      	nop
   2eabc:	20029888 	.word	0x20029888
   2eac0:	2002986c 	.word	0x2002986c
   2eac4:	0003adf4 	.word	0x0003adf4
   2eac8:	0003ae18 	.word	0x0003ae18
   2eacc:	00037a66 	.word	0x00037a66
   2ead0:	00038117 	.word	0x00038117

0002ead4 <k_mem_pool_alloc>:

SYS_INIT(init_static_pools, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, s32_t timeout)
{
   2ead4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ead8:	4607      	mov	r7, r0
   2eada:	460d      	mov	r5, r1
   2eadc:	4692      	mov	sl, r2
   2eade:	461c      	mov	r4, r3
   2eae0:	b085      	sub	sp, #20
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2eae2:	f3ef 8305 	mrs	r3, IPSR
	int ret;
	s64_t end = 0;

	__ASSERT(!(arch_is_in_isr() && timeout != K_NO_WAIT), "");
   2eae6:	2b00      	cmp	r3, #0
   2eae8:	d047      	beq.n	2eb7a <k_mem_pool_alloc+0xa6>
   2eaea:	2c00      	cmp	r4, #0
   2eaec:	d138      	bne.n	2eb60 <k_mem_pool_alloc+0x8c>
	s64_t end = 0;
   2eaee:	f04f 0800 	mov.w	r8, #0
	return pool - &_k_mem_pool_list_start[0];
   2eaf2:	4b25      	ldr	r3, [pc, #148]	; (2eb88 <k_mem_pool_alloc+0xb4>)
   2eaf4:	4e25      	ldr	r6, [pc, #148]	; (2eb8c <k_mem_pool_alloc+0xb8>)
   2eaf6:	1afb      	subs	r3, r7, r3
   2eaf8:	109b      	asrs	r3, r3, #2
   2eafa:	435e      	muls	r6, r3
		if (ret == 0 || timeout == K_NO_WAIT ||
		    ret != -ENOMEM) {
			return ret;
		}

		z_pend_curr_unlocked(&p->wait_q, timeout);
   2eafc:	f107 0b14 	add.w	fp, r7, #20
		block->id.pool = pool_id(p);
   2eb00:	b2f6      	uxtb	r6, r6
		ret = z_sys_mem_pool_block_alloc(&p->base, size,
   2eb02:	ab03      	add	r3, sp, #12
   2eb04:	aa02      	add	r2, sp, #8
   2eb06:	4651      	mov	r1, sl
   2eb08:	4638      	mov	r0, r7
   2eb0a:	9500      	str	r5, [sp, #0]
   2eb0c:	f004 fc39 	bl	33382 <z_sys_mem_pool_block_alloc>
		block->id.level = level_num;
   2eb10:	9b02      	ldr	r3, [sp, #8]
   2eb12:	9a03      	ldr	r2, [sp, #12]
   2eb14:	021b      	lsls	r3, r3, #8
   2eb16:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
   2eb1a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
   2eb1e:	b2f2      	uxtb	r2, r6
   2eb20:	4313      	orrs	r3, r2
   2eb22:	606b      	str	r3, [r5, #4]
		if (ret == 0 || timeout == K_NO_WAIT ||
   2eb24:	b1c8      	cbz	r0, 2eb5a <k_mem_pool_alloc+0x86>
   2eb26:	b1c4      	cbz	r4, 2eb5a <k_mem_pool_alloc+0x86>
   2eb28:	f110 0f0c 	cmn.w	r0, #12
   2eb2c:	d115      	bne.n	2eb5a <k_mem_pool_alloc+0x86>
	__asm__ volatile(
   2eb2e:	f04f 0320 	mov.w	r3, #32
   2eb32:	f3ef 8011 	mrs	r0, BASEPRI
   2eb36:	f383 8811 	msr	BASEPRI, r3
   2eb3a:	f3bf 8f6f 	isb	sy
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
   2eb3e:	4622      	mov	r2, r4
   2eb40:	4659      	mov	r1, fp
   2eb42:	f001 fae5 	bl	30110 <z_pend_curr_irqlock>

		if (timeout != K_FOREVER) {
   2eb46:	1c63      	adds	r3, r4, #1
   2eb48:	d0db      	beq.n	2eb02 <k_mem_pool_alloc+0x2e>
	return z_impl_k_uptime_get();
   2eb4a:	f006 ff54 	bl	359f6 <z_impl_k_uptime_get>
			timeout = end - k_uptime_get();
   2eb4e:	eba8 0400 	sub.w	r4, r8, r0
			if (timeout <= 0) {
   2eb52:	2c00      	cmp	r4, #0
   2eb54:	dcd5      	bgt.n	2eb02 <k_mem_pool_alloc+0x2e>
				break;
			}
		}
	}

	return -EAGAIN;
   2eb56:	f06f 000a 	mvn.w	r0, #10
}
   2eb5a:	b005      	add	sp, #20
   2eb5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__ASSERT(!(arch_is_in_isr() && timeout != K_NO_WAIT), "");
   2eb60:	490b      	ldr	r1, [pc, #44]	; (2eb90 <k_mem_pool_alloc+0xbc>)
   2eb62:	2337      	movs	r3, #55	; 0x37
   2eb64:	4a0b      	ldr	r2, [pc, #44]	; (2eb94 <k_mem_pool_alloc+0xc0>)
   2eb66:	480c      	ldr	r0, [pc, #48]	; (2eb98 <k_mem_pool_alloc+0xc4>)
   2eb68:	f004 fcd5 	bl	33516 <printk>
   2eb6c:	480b      	ldr	r0, [pc, #44]	; (2eb9c <k_mem_pool_alloc+0xc8>)
   2eb6e:	f004 fcd2 	bl	33516 <printk>
   2eb72:	2137      	movs	r1, #55	; 0x37
   2eb74:	4807      	ldr	r0, [pc, #28]	; (2eb94 <k_mem_pool_alloc+0xc0>)
   2eb76:	f004 fd14 	bl	335a2 <assert_post_action>
	if (timeout > 0) {
   2eb7a:	2c00      	cmp	r4, #0
   2eb7c:	ddb7      	ble.n	2eaee <k_mem_pool_alloc+0x1a>
   2eb7e:	f006 ff3a 	bl	359f6 <z_impl_k_uptime_get>
		end = k_uptime_get() + timeout;
   2eb82:	eb10 0804 	adds.w	r8, r0, r4
   2eb86:	e7b4      	b.n	2eaf2 <k_mem_pool_alloc+0x1e>
   2eb88:	2002986c 	.word	0x2002986c
   2eb8c:	b6db6db7 	.word	0xb6db6db7
   2eb90:	0003ae32 	.word	0x0003ae32
   2eb94:	0003adf4 	.word	0x0003adf4
   2eb98:	00037a66 	.word	0x00037a66
   2eb9c:	00038d10 	.word	0x00038d10

0002eba0 <k_mem_pool_free_id>:
void k_mem_pool_free_id(struct k_mem_block_id *id)
{
	int need_sched = 0;
	struct k_mem_pool *p = get_pool(id->pool);

	z_sys_mem_pool_block_free(&p->base, id->level, id->block);
   2eba0:	7803      	ldrb	r3, [r0, #0]
{
   2eba2:	b570      	push	{r4, r5, r6, lr}
	z_sys_mem_pool_block_free(&p->base, id->level, id->block);
   2eba4:	6802      	ldr	r2, [r0, #0]
   2eba6:	7841      	ldrb	r1, [r0, #1]
   2eba8:	4c25      	ldr	r4, [pc, #148]	; (2ec40 <k_mem_pool_free_id+0xa0>)
   2ebaa:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   2ebae:	0b12      	lsrs	r2, r2, #12
   2ebb0:	f001 010f 	and.w	r1, r1, #15
   2ebb4:	eb04 0083 	add.w	r0, r4, r3, lsl #2
   2ebb8:	009d      	lsls	r5, r3, #2
   2ebba:	f7ef fde5 	bl	1e788 <z_sys_mem_pool_block_free>
   2ebbe:	f04f 0320 	mov.w	r3, #32
   2ebc2:	f3ef 8611 	mrs	r6, BASEPRI
   2ebc6:	f383 8811 	msr	BASEPRI, r3
   2ebca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2ebce:	481d      	ldr	r0, [pc, #116]	; (2ec44 <k_mem_pool_free_id+0xa4>)
   2ebd0:	f001 fed8 	bl	30984 <z_spin_lock_valid>
   2ebd4:	b968      	cbnz	r0, 2ebf2 <k_mem_pool_free_id+0x52>
   2ebd6:	234a      	movs	r3, #74	; 0x4a
   2ebd8:	4a1b      	ldr	r2, [pc, #108]	; (2ec48 <k_mem_pool_free_id+0xa8>)
   2ebda:	491c      	ldr	r1, [pc, #112]	; (2ec4c <k_mem_pool_free_id+0xac>)
   2ebdc:	481c      	ldr	r0, [pc, #112]	; (2ec50 <k_mem_pool_free_id+0xb0>)
   2ebde:	f004 fc9a 	bl	33516 <printk>
   2ebe2:	4918      	ldr	r1, [pc, #96]	; (2ec44 <k_mem_pool_free_id+0xa4>)
   2ebe4:	481b      	ldr	r0, [pc, #108]	; (2ec54 <k_mem_pool_free_id+0xb4>)
   2ebe6:	f004 fc96 	bl	33516 <printk>
   2ebea:	214a      	movs	r1, #74	; 0x4a
   2ebec:	4816      	ldr	r0, [pc, #88]	; (2ec48 <k_mem_pool_free_id+0xa8>)
   2ebee:	f004 fcd8 	bl	335a2 <assert_post_action>
	z_spin_lock_set_owner(l);
   2ebf2:	4814      	ldr	r0, [pc, #80]	; (2ec44 <k_mem_pool_free_id+0xa4>)
   2ebf4:	f001 fee4 	bl	309c0 <z_spin_lock_set_owner>
	 * is unsynchronized.  Maybe we want to put the lock into the
	 * wait_q instead and make the API safe?)
	 */
	k_spinlock_key_t key = k_spin_lock(&lock);

	need_sched = z_unpend_all(&p->wait_q);
   2ebf8:	f105 0014 	add.w	r0, r5, #20
   2ebfc:	4420      	add	r0, r4
   2ebfe:	f006 fe48 	bl	35892 <z_unpend_all>

	if (need_sched != 0) {
   2ec02:	b128      	cbz	r0, 2ec10 <k_mem_pool_free_id+0x70>
		z_reschedule(&lock, key);
   2ec04:	4631      	mov	r1, r6
	} else {
		k_spin_unlock(&lock, key);
	}
}
   2ec06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   2ec0a:	480e      	ldr	r0, [pc, #56]	; (2ec44 <k_mem_pool_free_id+0xa4>)
   2ec0c:	f000 bd2a 	b.w	2f664 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2ec10:	480c      	ldr	r0, [pc, #48]	; (2ec44 <k_mem_pool_free_id+0xa4>)
   2ec12:	f001 fec5 	bl	309a0 <z_spin_unlock_valid>
   2ec16:	b968      	cbnz	r0, 2ec34 <k_mem_pool_free_id+0x94>
   2ec18:	235d      	movs	r3, #93	; 0x5d
   2ec1a:	4a0b      	ldr	r2, [pc, #44]	; (2ec48 <k_mem_pool_free_id+0xa8>)
   2ec1c:	490e      	ldr	r1, [pc, #56]	; (2ec58 <k_mem_pool_free_id+0xb8>)
   2ec1e:	480c      	ldr	r0, [pc, #48]	; (2ec50 <k_mem_pool_free_id+0xb0>)
   2ec20:	f004 fc79 	bl	33516 <printk>
   2ec24:	4907      	ldr	r1, [pc, #28]	; (2ec44 <k_mem_pool_free_id+0xa4>)
   2ec26:	480d      	ldr	r0, [pc, #52]	; (2ec5c <k_mem_pool_free_id+0xbc>)
   2ec28:	f004 fc75 	bl	33516 <printk>
   2ec2c:	215d      	movs	r1, #93	; 0x5d
   2ec2e:	4806      	ldr	r0, [pc, #24]	; (2ec48 <k_mem_pool_free_id+0xa8>)
   2ec30:	f004 fcb7 	bl	335a2 <assert_post_action>
	__asm__ volatile(
   2ec34:	f386 8811 	msr	BASEPRI, r6
   2ec38:	f3bf 8f6f 	isb	sy
}
   2ec3c:	bd70      	pop	{r4, r5, r6, pc}
   2ec3e:	bf00      	nop
   2ec40:	2002986c 	.word	0x2002986c
   2ec44:	20023ec8 	.word	0x20023ec8
   2ec48:	000382ba 	.word	0x000382ba
   2ec4c:	000382e0 	.word	0x000382e0
   2ec50:	00037a66 	.word	0x00037a66
   2ec54:	000382f5 	.word	0x000382f5
   2ec58:	0003830d 	.word	0x0003830d
   2ec5c:	00038324 	.word	0x00038324

0002ec60 <k_malloc>:
K_MEM_POOL_DEFINE(_heap_mem_pool, CONFIG_HEAP_MEM_POOL_MIN_SIZE,
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
   2ec60:	4601      	mov	r1, r0
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
   2ec62:	4801      	ldr	r0, [pc, #4]	; (2ec68 <k_malloc+0x8>)
   2ec64:	f006 bd93 	b.w	3578e <k_mem_pool_malloc>
   2ec68:	2002986c 	.word	0x2002986c

0002ec6c <z_thread_malloc>:
#else
#define _HEAP_MEM_POOL	NULL
#endif

void *z_thread_malloc(size_t size)
{
   2ec6c:	b507      	push	{r0, r1, r2, lr}
   2ec6e:	9001      	str	r0, [sp, #4]
	void *ret;
	struct k_mem_pool *pool;

	if (k_is_in_isr()) {
   2ec70:	f006 fe35 	bl	358de <k_is_in_isr>
   2ec74:	9901      	ldr	r1, [sp, #4]
   2ec76:	b948      	cbnz	r0, 2ec8c <z_thread_malloc+0x20>
		pool = _HEAP_MEM_POOL;
	} else {
		pool = _current->resource_pool;
   2ec78:	4b07      	ldr	r3, [pc, #28]	; (2ec98 <z_thread_malloc+0x2c>)
   2ec7a:	689b      	ldr	r3, [r3, #8]
   2ec7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	}

	if (pool) {
   2ec7e:	b13b      	cbz	r3, 2ec90 <z_thread_malloc+0x24>
		ret = k_mem_pool_malloc(pool, size);
   2ec80:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   2ec82:	b003      	add	sp, #12
   2ec84:	f85d eb04 	ldr.w	lr, [sp], #4
		ret = k_mem_pool_malloc(pool, size);
   2ec88:	f006 bd81 	b.w	3578e <k_mem_pool_malloc>
		pool = _HEAP_MEM_POOL;
   2ec8c:	4b03      	ldr	r3, [pc, #12]	; (2ec9c <z_thread_malloc+0x30>)
   2ec8e:	e7f7      	b.n	2ec80 <z_thread_malloc+0x14>
}
   2ec90:	b003      	add	sp, #12
   2ec92:	f85d fb04 	ldr.w	pc, [sp], #4
   2ec96:	bf00      	nop
   2ec98:	20023ed0 	.word	0x20023ed0
   2ec9c:	2002986c 	.word	0x2002986c

0002eca0 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, void *data, s32_t timeout)
{
   2eca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2eca4:	4604      	mov	r4, r0
   2eca6:	460f      	mov	r7, r1
   2eca8:	4615      	mov	r5, r2
   2ecaa:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || timeout == K_NO_WAIT, "");
   2ecae:	b16b      	cbz	r3, 2eccc <z_impl_k_msgq_put+0x2c>
   2ecb0:	b162      	cbz	r2, 2eccc <z_impl_k_msgq_put+0x2c>
   2ecb2:	4941      	ldr	r1, [pc, #260]	; (2edb8 <z_impl_k_msgq_put+0x118>)
   2ecb4:	2376      	movs	r3, #118	; 0x76
   2ecb6:	4a41      	ldr	r2, [pc, #260]	; (2edbc <z_impl_k_msgq_put+0x11c>)
   2ecb8:	4841      	ldr	r0, [pc, #260]	; (2edc0 <z_impl_k_msgq_put+0x120>)
   2ecba:	f004 fc2c 	bl	33516 <printk>
   2ecbe:	4841      	ldr	r0, [pc, #260]	; (2edc4 <z_impl_k_msgq_put+0x124>)
   2ecc0:	f004 fc29 	bl	33516 <printk>
   2ecc4:	2176      	movs	r1, #118	; 0x76
   2ecc6:	483d      	ldr	r0, [pc, #244]	; (2edbc <z_impl_k_msgq_put+0x11c>)
   2ecc8:	f004 fc6b 	bl	335a2 <assert_post_action>

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   2eccc:	f104 0608 	add.w	r6, r4, #8
	__asm__ volatile(
   2ecd0:	f04f 0320 	mov.w	r3, #32
   2ecd4:	f3ef 8811 	mrs	r8, BASEPRI
   2ecd8:	f383 8811 	msr	BASEPRI, r3
   2ecdc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2ece0:	4630      	mov	r0, r6
   2ece2:	f001 fe4f 	bl	30984 <z_spin_lock_valid>
   2ece6:	b968      	cbnz	r0, 2ed04 <z_impl_k_msgq_put+0x64>
   2ece8:	234a      	movs	r3, #74	; 0x4a
   2ecea:	4a37      	ldr	r2, [pc, #220]	; (2edc8 <z_impl_k_msgq_put+0x128>)
   2ecec:	4937      	ldr	r1, [pc, #220]	; (2edcc <z_impl_k_msgq_put+0x12c>)
   2ecee:	4834      	ldr	r0, [pc, #208]	; (2edc0 <z_impl_k_msgq_put+0x120>)
   2ecf0:	f004 fc11 	bl	33516 <printk>
   2ecf4:	4631      	mov	r1, r6
   2ecf6:	4836      	ldr	r0, [pc, #216]	; (2edd0 <z_impl_k_msgq_put+0x130>)
   2ecf8:	f004 fc0d 	bl	33516 <printk>
   2ecfc:	214a      	movs	r1, #74	; 0x4a
   2ecfe:	4832      	ldr	r0, [pc, #200]	; (2edc8 <z_impl_k_msgq_put+0x128>)
   2ed00:	f004 fc4f 	bl	335a2 <assert_post_action>
	z_spin_lock_set_owner(l);
   2ed04:	4630      	mov	r0, r6
   2ed06:	f001 fe5b 	bl	309c0 <z_spin_lock_set_owner>

	if (msgq->used_msgs < msgq->max_msgs) {
   2ed0a:	6a62      	ldr	r2, [r4, #36]	; 0x24
   2ed0c:	6923      	ldr	r3, [r4, #16]
   2ed0e:	429a      	cmp	r2, r3
   2ed10:	d242      	bcs.n	2ed98 <z_impl_k_msgq_put+0xf8>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   2ed12:	4620      	mov	r0, r4
   2ed14:	f001 fb16 	bl	30344 <z_unpend_first_thread>
   2ed18:	4639      	mov	r1, r7
		if (pending_thread != NULL) {
   2ed1a:	4605      	mov	r5, r0
   2ed1c:	68e2      	ldr	r2, [r4, #12]
   2ed1e:	b1a0      	cbz	r0, 2ed4a <z_impl_k_msgq_put+0xaa>
   2ed20:	6940      	ldr	r0, [r0, #20]
   2ed22:	f006 fef1 	bl	35b08 <memcpy>
   2ed26:	2300      	movs	r3, #0
   2ed28:	66ab      	str	r3, [r5, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   2ed2a:	7b6b      	ldrb	r3, [r5, #13]
   2ed2c:	06db      	lsls	r3, r3, #27
   2ed2e:	d104      	bne.n	2ed3a <z_impl_k_msgq_put+0x9a>
	if (z_is_thread_ready(thread)) {
   2ed30:	69ab      	ldr	r3, [r5, #24]
   2ed32:	b913      	cbnz	r3, 2ed3a <z_impl_k_msgq_put+0x9a>
		z_add_thread_to_ready_q(thread);
   2ed34:	4628      	mov	r0, r5
   2ed36:	f000 fe7f 	bl	2fa38 <z_add_thread_to_ready_q>
			(void)memcpy(pending_thread->base.swap_data, data,
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
   2ed3a:	4641      	mov	r1, r8
   2ed3c:	4630      	mov	r0, r6
   2ed3e:	f000 fc91 	bl	2f664 <z_reschedule>
			return 0;
   2ed42:	2400      	movs	r4, #0
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   2ed44:	4620      	mov	r0, r4
   2ed46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2ed4a:	6a20      	ldr	r0, [r4, #32]
   2ed4c:	f006 fedc 	bl	35b08 <memcpy>
			msgq->write_ptr += msgq->msg_size;
   2ed50:	6a23      	ldr	r3, [r4, #32]
   2ed52:	68e2      	ldr	r2, [r4, #12]
   2ed54:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   2ed56:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   2ed58:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   2ed5a:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   2ed5c:	bf04      	itt	eq
   2ed5e:	6963      	ldreq	r3, [r4, #20]
   2ed60:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
   2ed62:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2ed64:	3301      	adds	r3, #1
   2ed66:	6263      	str	r3, [r4, #36]	; 0x24
		result = 0;
   2ed68:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2ed6a:	4630      	mov	r0, r6
   2ed6c:	f001 fe18 	bl	309a0 <z_spin_unlock_valid>
   2ed70:	b968      	cbnz	r0, 2ed8e <z_impl_k_msgq_put+0xee>
   2ed72:	235d      	movs	r3, #93	; 0x5d
   2ed74:	4a14      	ldr	r2, [pc, #80]	; (2edc8 <z_impl_k_msgq_put+0x128>)
   2ed76:	4917      	ldr	r1, [pc, #92]	; (2edd4 <z_impl_k_msgq_put+0x134>)
   2ed78:	4811      	ldr	r0, [pc, #68]	; (2edc0 <z_impl_k_msgq_put+0x120>)
   2ed7a:	f004 fbcc 	bl	33516 <printk>
   2ed7e:	4631      	mov	r1, r6
   2ed80:	4815      	ldr	r0, [pc, #84]	; (2edd8 <z_impl_k_msgq_put+0x138>)
   2ed82:	f004 fbc8 	bl	33516 <printk>
   2ed86:	215d      	movs	r1, #93	; 0x5d
   2ed88:	480f      	ldr	r0, [pc, #60]	; (2edc8 <z_impl_k_msgq_put+0x128>)
   2ed8a:	f004 fc0a 	bl	335a2 <assert_post_action>
	__asm__ volatile(
   2ed8e:	f388 8811 	msr	BASEPRI, r8
   2ed92:	f3bf 8f6f 	isb	sy
	return result;
   2ed96:	e7d5      	b.n	2ed44 <z_impl_k_msgq_put+0xa4>
	} else if (timeout == K_NO_WAIT) {
   2ed98:	b155      	cbz	r5, 2edb0 <z_impl_k_msgq_put+0x110>
		_current->base.swap_data = data;
   2ed9a:	4b10      	ldr	r3, [pc, #64]	; (2eddc <z_impl_k_msgq_put+0x13c>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   2ed9c:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   2ed9e:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   2eda0:	4641      	mov	r1, r8
		_current->base.swap_data = data;
   2eda2:	615f      	str	r7, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   2eda4:	4630      	mov	r0, r6
   2eda6:	462b      	mov	r3, r5
}
   2eda8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   2edac:	f001 ba0a 	b.w	301c4 <z_pend_curr>
		result = -ENOMSG;
   2edb0:	f06f 0422 	mvn.w	r4, #34	; 0x22
   2edb4:	e7d9      	b.n	2ed6a <z_impl_k_msgq_put+0xca>
   2edb6:	bf00      	nop
   2edb8:	0003ae78 	.word	0x0003ae78
   2edbc:	0003ae56 	.word	0x0003ae56
   2edc0:	00037a66 	.word	0x00037a66
   2edc4:	00038d10 	.word	0x00038d10
   2edc8:	000382ba 	.word	0x000382ba
   2edcc:	000382e0 	.word	0x000382e0
   2edd0:	000382f5 	.word	0x000382f5
   2edd4:	0003830d 	.word	0x0003830d
   2edd8:	00038324 	.word	0x00038324
   2eddc:	20023ed0 	.word	0x20023ed0

0002ede0 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, s32_t timeout)
{
   2ede0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ede4:	4604      	mov	r4, r0
   2ede6:	460f      	mov	r7, r1
   2ede8:	4615      	mov	r5, r2
   2edea:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || timeout == K_NO_WAIT, "");
   2edee:	b16b      	cbz	r3, 2ee0c <z_impl_k_msgq_get+0x2c>
   2edf0:	b162      	cbz	r2, 2ee0c <z_impl_k_msgq_get+0x2c>
   2edf2:	4947      	ldr	r1, [pc, #284]	; (2ef10 <z_impl_k_msgq_get+0x130>)
   2edf4:	23c1      	movs	r3, #193	; 0xc1
   2edf6:	4a47      	ldr	r2, [pc, #284]	; (2ef14 <z_impl_k_msgq_get+0x134>)
   2edf8:	4847      	ldr	r0, [pc, #284]	; (2ef18 <z_impl_k_msgq_get+0x138>)
   2edfa:	f004 fb8c 	bl	33516 <printk>
   2edfe:	4847      	ldr	r0, [pc, #284]	; (2ef1c <z_impl_k_msgq_get+0x13c>)
   2ee00:	f004 fb89 	bl	33516 <printk>
   2ee04:	21c1      	movs	r1, #193	; 0xc1
   2ee06:	4843      	ldr	r0, [pc, #268]	; (2ef14 <z_impl_k_msgq_get+0x134>)
   2ee08:	f004 fbcb 	bl	335a2 <assert_post_action>

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   2ee0c:	f104 0608 	add.w	r6, r4, #8
	__asm__ volatile(
   2ee10:	f04f 0320 	mov.w	r3, #32
   2ee14:	f3ef 8811 	mrs	r8, BASEPRI
   2ee18:	f383 8811 	msr	BASEPRI, r3
   2ee1c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2ee20:	4630      	mov	r0, r6
   2ee22:	f001 fdaf 	bl	30984 <z_spin_lock_valid>
   2ee26:	b968      	cbnz	r0, 2ee44 <z_impl_k_msgq_get+0x64>
   2ee28:	234a      	movs	r3, #74	; 0x4a
   2ee2a:	4a3d      	ldr	r2, [pc, #244]	; (2ef20 <z_impl_k_msgq_get+0x140>)
   2ee2c:	493d      	ldr	r1, [pc, #244]	; (2ef24 <z_impl_k_msgq_get+0x144>)
   2ee2e:	483a      	ldr	r0, [pc, #232]	; (2ef18 <z_impl_k_msgq_get+0x138>)
   2ee30:	f004 fb71 	bl	33516 <printk>
   2ee34:	4631      	mov	r1, r6
   2ee36:	483c      	ldr	r0, [pc, #240]	; (2ef28 <z_impl_k_msgq_get+0x148>)
   2ee38:	f004 fb6d 	bl	33516 <printk>
   2ee3c:	214a      	movs	r1, #74	; 0x4a
   2ee3e:	4838      	ldr	r0, [pc, #224]	; (2ef20 <z_impl_k_msgq_get+0x140>)
   2ee40:	f004 fbaf 	bl	335a2 <assert_post_action>
	z_spin_lock_set_owner(l);
   2ee44:	4630      	mov	r0, r6
   2ee46:	f001 fdbb 	bl	309c0 <z_spin_lock_set_owner>

	if (msgq->used_msgs > 0) {
   2ee4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2ee4c:	2b00      	cmp	r3, #0
   2ee4e:	d039      	beq.n	2eec4 <z_impl_k_msgq_get+0xe4>
   2ee50:	68e2      	ldr	r2, [r4, #12]
   2ee52:	69e1      	ldr	r1, [r4, #28]
   2ee54:	4638      	mov	r0, r7
   2ee56:	f006 fe57 	bl	35b08 <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
   2ee5a:	69e3      	ldr	r3, [r4, #28]
   2ee5c:	68e2      	ldr	r2, [r4, #12]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   2ee5e:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   2ee60:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   2ee62:	69a2      	ldr	r2, [r4, #24]
		msgq->read_ptr += msgq->msg_size;
   2ee64:	61e3      	str	r3, [r4, #28]
		if (msgq->read_ptr == msgq->buffer_end) {
   2ee66:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   2ee68:	bf04      	itt	eq
   2ee6a:	6963      	ldreq	r3, [r4, #20]
   2ee6c:	61e3      	streq	r3, [r4, #28]
		msgq->used_msgs--;
   2ee6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2ee70:	3b01      	subs	r3, #1
   2ee72:	6263      	str	r3, [r4, #36]	; 0x24
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   2ee74:	f001 fa66 	bl	30344 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   2ee78:	4605      	mov	r5, r0
   2ee7a:	2800      	cmp	r0, #0
   2ee7c:	d030      	beq.n	2eee0 <z_impl_k_msgq_get+0x100>
   2ee7e:	68e2      	ldr	r2, [r4, #12]
   2ee80:	6941      	ldr	r1, [r0, #20]
   2ee82:	6a20      	ldr	r0, [r4, #32]
   2ee84:	f006 fe40 	bl	35b08 <memcpy>
			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   2ee88:	6a23      	ldr	r3, [r4, #32]
   2ee8a:	68e2      	ldr	r2, [r4, #12]
   2ee8c:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   2ee8e:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   2ee90:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   2ee92:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   2ee94:	bf04      	itt	eq
   2ee96:	6963      	ldreq	r3, [r4, #20]
   2ee98:	6223      	streq	r3, [r4, #32]
			}
			msgq->used_msgs++;
   2ee9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2ee9c:	3301      	adds	r3, #1
   2ee9e:	6263      	str	r3, [r4, #36]	; 0x24
   2eea0:	2300      	movs	r3, #0
   2eea2:	66ab      	str	r3, [r5, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   2eea4:	7b6b      	ldrb	r3, [r5, #13]
   2eea6:	06db      	lsls	r3, r3, #27
   2eea8:	d104      	bne.n	2eeb4 <z_impl_k_msgq_get+0xd4>
	if (z_is_thread_ready(thread)) {
   2eeaa:	69ab      	ldr	r3, [r5, #24]
   2eeac:	b913      	cbnz	r3, 2eeb4 <z_impl_k_msgq_get+0xd4>
		z_add_thread_to_ready_q(thread);
   2eeae:	4628      	mov	r0, r5
   2eeb0:	f000 fdc2 	bl	2fa38 <z_add_thread_to_ready_q>

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
   2eeb4:	4641      	mov	r1, r8
   2eeb6:	4630      	mov	r0, r6
   2eeb8:	f000 fbd4 	bl	2f664 <z_reschedule>
			return 0;
   2eebc:	2500      	movs	r5, #0
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   2eebe:	4628      	mov	r0, r5
   2eec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (timeout == K_NO_WAIT) {
   2eec4:	b155      	cbz	r5, 2eedc <z_impl_k_msgq_get+0xfc>
		_current->base.swap_data = data;
   2eec6:	4b19      	ldr	r3, [pc, #100]	; (2ef2c <z_impl_k_msgq_get+0x14c>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   2eec8:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   2eeca:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   2eecc:	4641      	mov	r1, r8
		_current->base.swap_data = data;
   2eece:	615f      	str	r7, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   2eed0:	4630      	mov	r0, r6
   2eed2:	462b      	mov	r3, r5
}
   2eed4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   2eed8:	f001 b974 	b.w	301c4 <z_pend_curr>
		result = -ENOMSG;
   2eedc:	f06f 0522 	mvn.w	r5, #34	; 0x22
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2eee0:	4630      	mov	r0, r6
   2eee2:	f001 fd5d 	bl	309a0 <z_spin_unlock_valid>
   2eee6:	b968      	cbnz	r0, 2ef04 <z_impl_k_msgq_get+0x124>
   2eee8:	235d      	movs	r3, #93	; 0x5d
   2eeea:	4a0d      	ldr	r2, [pc, #52]	; (2ef20 <z_impl_k_msgq_get+0x140>)
   2eeec:	4910      	ldr	r1, [pc, #64]	; (2ef30 <z_impl_k_msgq_get+0x150>)
   2eeee:	480a      	ldr	r0, [pc, #40]	; (2ef18 <z_impl_k_msgq_get+0x138>)
   2eef0:	f004 fb11 	bl	33516 <printk>
   2eef4:	4631      	mov	r1, r6
   2eef6:	480f      	ldr	r0, [pc, #60]	; (2ef34 <z_impl_k_msgq_get+0x154>)
   2eef8:	f004 fb0d 	bl	33516 <printk>
   2eefc:	215d      	movs	r1, #93	; 0x5d
   2eefe:	4808      	ldr	r0, [pc, #32]	; (2ef20 <z_impl_k_msgq_get+0x140>)
   2ef00:	f004 fb4f 	bl	335a2 <assert_post_action>
	__asm__ volatile(
   2ef04:	f388 8811 	msr	BASEPRI, r8
   2ef08:	f3bf 8f6f 	isb	sy
	return result;
   2ef0c:	e7d7      	b.n	2eebe <z_impl_k_msgq_get+0xde>
   2ef0e:	bf00      	nop
   2ef10:	0003ae78 	.word	0x0003ae78
   2ef14:	0003ae56 	.word	0x0003ae56
   2ef18:	00037a66 	.word	0x00037a66
   2ef1c:	00038d10 	.word	0x00038d10
   2ef20:	000382ba 	.word	0x000382ba
   2ef24:	000382e0 	.word	0x000382e0
   2ef28:	000382f5 	.word	0x000382f5
   2ef2c:	20023ed0 	.word	0x20023ed0
   2ef30:	0003830d 	.word	0x0003830d
   2ef34:	00038324 	.word	0x00038324

0002ef38 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
   2ef38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ef3a:	4604      	mov	r4, r0
   2ef3c:	460e      	mov	r6, r1
	__asm__ volatile(
   2ef3e:	f04f 0320 	mov.w	r3, #32
   2ef42:	f3ef 8711 	mrs	r7, BASEPRI
   2ef46:	f383 8811 	msr	BASEPRI, r3
   2ef4a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2ef4e:	4861      	ldr	r0, [pc, #388]	; (2f0d4 <z_impl_k_mutex_lock+0x19c>)
   2ef50:	f001 fd18 	bl	30984 <z_spin_lock_valid>
   2ef54:	b968      	cbnz	r0, 2ef72 <z_impl_k_mutex_lock+0x3a>
   2ef56:	234a      	movs	r3, #74	; 0x4a
   2ef58:	4a5f      	ldr	r2, [pc, #380]	; (2f0d8 <z_impl_k_mutex_lock+0x1a0>)
   2ef5a:	4960      	ldr	r1, [pc, #384]	; (2f0dc <z_impl_k_mutex_lock+0x1a4>)
   2ef5c:	4860      	ldr	r0, [pc, #384]	; (2f0e0 <z_impl_k_mutex_lock+0x1a8>)
   2ef5e:	f004 fada 	bl	33516 <printk>
   2ef62:	495c      	ldr	r1, [pc, #368]	; (2f0d4 <z_impl_k_mutex_lock+0x19c>)
   2ef64:	485f      	ldr	r0, [pc, #380]	; (2f0e4 <z_impl_k_mutex_lock+0x1ac>)
   2ef66:	f004 fad6 	bl	33516 <printk>
   2ef6a:	214a      	movs	r1, #74	; 0x4a
   2ef6c:	485a      	ldr	r0, [pc, #360]	; (2f0d8 <z_impl_k_mutex_lock+0x1a0>)
   2ef6e:	f004 fb18 	bl	335a2 <assert_post_action>
	z_spin_lock_set_owner(l);
   2ef72:	4858      	ldr	r0, [pc, #352]	; (2f0d4 <z_impl_k_mutex_lock+0x19c>)
   2ef74:	f001 fd24 	bl	309c0 <z_spin_lock_set_owner>
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   2ef78:	68e3      	ldr	r3, [r4, #12]
   2ef7a:	4a5b      	ldr	r2, [pc, #364]	; (2f0e8 <z_impl_k_mutex_lock+0x1b0>)
   2ef7c:	b1f3      	cbz	r3, 2efbc <z_impl_k_mutex_lock+0x84>
   2ef7e:	68a0      	ldr	r0, [r4, #8]
   2ef80:	6891      	ldr	r1, [r2, #8]
   2ef82:	4288      	cmp	r0, r1
   2ef84:	d03a      	beq.n	2effc <z_impl_k_mutex_lock+0xc4>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(timeout == (s32_t)K_NO_WAIT)) {
   2ef86:	2e00      	cmp	r6, #0
   2ef88:	d13a      	bne.n	2f000 <z_impl_k_mutex_lock+0xc8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2ef8a:	4852      	ldr	r0, [pc, #328]	; (2f0d4 <z_impl_k_mutex_lock+0x19c>)
   2ef8c:	f001 fd08 	bl	309a0 <z_spin_unlock_valid>
   2ef90:	b968      	cbnz	r0, 2efae <z_impl_k_mutex_lock+0x76>
   2ef92:	235d      	movs	r3, #93	; 0x5d
   2ef94:	4a50      	ldr	r2, [pc, #320]	; (2f0d8 <z_impl_k_mutex_lock+0x1a0>)
   2ef96:	4955      	ldr	r1, [pc, #340]	; (2f0ec <z_impl_k_mutex_lock+0x1b4>)
   2ef98:	4851      	ldr	r0, [pc, #324]	; (2f0e0 <z_impl_k_mutex_lock+0x1a8>)
   2ef9a:	f004 fabc 	bl	33516 <printk>
   2ef9e:	494d      	ldr	r1, [pc, #308]	; (2f0d4 <z_impl_k_mutex_lock+0x19c>)
   2efa0:	4853      	ldr	r0, [pc, #332]	; (2f0f0 <z_impl_k_mutex_lock+0x1b8>)
   2efa2:	f004 fab8 	bl	33516 <printk>
   2efa6:	215d      	movs	r1, #93	; 0x5d
   2efa8:	484b      	ldr	r0, [pc, #300]	; (2f0d8 <z_impl_k_mutex_lock+0x1a0>)
   2efaa:	f004 fafa 	bl	335a2 <assert_post_action>
	__asm__ volatile(
   2efae:	f387 8811 	msr	BASEPRI, r7
   2efb2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   2efb6:	f06f 000f 	mvn.w	r0, #15
   2efba:	e01e      	b.n	2effa <z_impl_k_mutex_lock+0xc2>
					_current->base.prio :
   2efbc:	6891      	ldr	r1, [r2, #8]
   2efbe:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   2efc2:	3301      	adds	r3, #1
   2efc4:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   2efc6:	6893      	ldr	r3, [r2, #8]
   2efc8:	4842      	ldr	r0, [pc, #264]	; (2f0d4 <z_impl_k_mutex_lock+0x19c>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   2efca:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   2efcc:	60a3      	str	r3, [r4, #8]
   2efce:	f001 fce7 	bl	309a0 <z_spin_unlock_valid>
   2efd2:	b968      	cbnz	r0, 2eff0 <z_impl_k_mutex_lock+0xb8>
   2efd4:	235d      	movs	r3, #93	; 0x5d
   2efd6:	4a40      	ldr	r2, [pc, #256]	; (2f0d8 <z_impl_k_mutex_lock+0x1a0>)
   2efd8:	4944      	ldr	r1, [pc, #272]	; (2f0ec <z_impl_k_mutex_lock+0x1b4>)
   2efda:	4841      	ldr	r0, [pc, #260]	; (2f0e0 <z_impl_k_mutex_lock+0x1a8>)
   2efdc:	f004 fa9b 	bl	33516 <printk>
   2efe0:	493c      	ldr	r1, [pc, #240]	; (2f0d4 <z_impl_k_mutex_lock+0x19c>)
   2efe2:	4843      	ldr	r0, [pc, #268]	; (2f0f0 <z_impl_k_mutex_lock+0x1b8>)
   2efe4:	f004 fa97 	bl	33516 <printk>
   2efe8:	215d      	movs	r1, #93	; 0x5d
   2efea:	483b      	ldr	r0, [pc, #236]	; (2f0d8 <z_impl_k_mutex_lock+0x1a0>)
   2efec:	f004 fad9 	bl	335a2 <assert_post_action>
   2eff0:	f387 8811 	msr	BASEPRI, r7
   2eff4:	f3bf 8f6f 	isb	sy
		return 0;
   2eff8:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   2effa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					_current->base.prio :
   2effc:	6921      	ldr	r1, [r4, #16]
   2effe:	e7e0      	b.n	2efc2 <z_impl_k_mutex_lock+0x8a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   2f000:	f990 200e 	ldrsb.w	r2, [r0, #14]
   2f004:	f991 300e 	ldrsb.w	r3, [r1, #14]
   2f008:	4293      	cmp	r3, r2
   2f00a:	bfa8      	it	ge
   2f00c:	4613      	movge	r3, r2
   2f00e:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   2f012:	428a      	cmp	r2, r1
   2f014:	dd40      	ble.n	2f098 <z_impl_k_mutex_lock+0x160>
		return z_set_prio(mutex->owner, new_prio);
   2f016:	f001 f903 	bl	30220 <z_set_prio>
   2f01a:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   2f01c:	4633      	mov	r3, r6
   2f01e:	4622      	mov	r2, r4
   2f020:	4639      	mov	r1, r7
   2f022:	482c      	ldr	r0, [pc, #176]	; (2f0d4 <z_impl_k_mutex_lock+0x19c>)
   2f024:	f001 f8ce 	bl	301c4 <z_pend_curr>
	if (got_mutex == 0) {
   2f028:	2800      	cmp	r0, #0
   2f02a:	d0e6      	beq.n	2effa <z_impl_k_mutex_lock+0xc2>
	__asm__ volatile(
   2f02c:	f04f 0320 	mov.w	r3, #32
   2f030:	f3ef 8611 	mrs	r6, BASEPRI
   2f034:	f383 8811 	msr	BASEPRI, r3
   2f038:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2f03c:	4825      	ldr	r0, [pc, #148]	; (2f0d4 <z_impl_k_mutex_lock+0x19c>)
   2f03e:	f001 fca1 	bl	30984 <z_spin_lock_valid>
   2f042:	b968      	cbnz	r0, 2f060 <z_impl_k_mutex_lock+0x128>
   2f044:	234a      	movs	r3, #74	; 0x4a
   2f046:	4a24      	ldr	r2, [pc, #144]	; (2f0d8 <z_impl_k_mutex_lock+0x1a0>)
   2f048:	4924      	ldr	r1, [pc, #144]	; (2f0dc <z_impl_k_mutex_lock+0x1a4>)
   2f04a:	4825      	ldr	r0, [pc, #148]	; (2f0e0 <z_impl_k_mutex_lock+0x1a8>)
   2f04c:	f004 fa63 	bl	33516 <printk>
   2f050:	4920      	ldr	r1, [pc, #128]	; (2f0d4 <z_impl_k_mutex_lock+0x19c>)
   2f052:	4824      	ldr	r0, [pc, #144]	; (2f0e4 <z_impl_k_mutex_lock+0x1ac>)
   2f054:	f004 fa5f 	bl	33516 <printk>
   2f058:	214a      	movs	r1, #74	; 0x4a
   2f05a:	481f      	ldr	r0, [pc, #124]	; (2f0d8 <z_impl_k_mutex_lock+0x1a0>)
   2f05c:	f004 faa1 	bl	335a2 <assert_post_action>
	z_spin_lock_set_owner(l);
   2f060:	481c      	ldr	r0, [pc, #112]	; (2f0d4 <z_impl_k_mutex_lock+0x19c>)
   2f062:	f001 fcad 	bl	309c0 <z_spin_lock_set_owner>
	return list->head == list;
   2f066:	6823      	ldr	r3, [r4, #0]
   2f068:	6921      	ldr	r1, [r4, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2f06a:	429c      	cmp	r4, r3
   2f06c:	d007      	beq.n	2f07e <z_impl_k_mutex_lock+0x146>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   2f06e:	b133      	cbz	r3, 2f07e <z_impl_k_mutex_lock+0x146>
   2f070:	f993 300e 	ldrsb.w	r3, [r3, #14]
   2f074:	4299      	cmp	r1, r3
   2f076:	bfa8      	it	ge
   2f078:	4619      	movge	r1, r3
   2f07a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   2f07e:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   2f080:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2f084:	4299      	cmp	r1, r3
   2f086:	d109      	bne.n	2f09c <z_impl_k_mutex_lock+0x164>
	if (resched) {
   2f088:	b16d      	cbz	r5, 2f0a6 <z_impl_k_mutex_lock+0x16e>
		z_reschedule(&lock, key);
   2f08a:	4631      	mov	r1, r6
   2f08c:	4811      	ldr	r0, [pc, #68]	; (2f0d4 <z_impl_k_mutex_lock+0x19c>)
   2f08e:	f000 fae9 	bl	2f664 <z_reschedule>
	return -EAGAIN;
   2f092:	f06f 000a 	mvn.w	r0, #10
   2f096:	e7b0      	b.n	2effa <z_impl_k_mutex_lock+0xc2>
	bool resched = false;
   2f098:	2500      	movs	r5, #0
   2f09a:	e7bf      	b.n	2f01c <z_impl_k_mutex_lock+0xe4>
		return z_set_prio(mutex->owner, new_prio);
   2f09c:	f001 f8c0 	bl	30220 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   2f0a0:	2800      	cmp	r0, #0
   2f0a2:	d1f2      	bne.n	2f08a <z_impl_k_mutex_lock+0x152>
   2f0a4:	e7f0      	b.n	2f088 <z_impl_k_mutex_lock+0x150>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2f0a6:	480b      	ldr	r0, [pc, #44]	; (2f0d4 <z_impl_k_mutex_lock+0x19c>)
   2f0a8:	f001 fc7a 	bl	309a0 <z_spin_unlock_valid>
   2f0ac:	b968      	cbnz	r0, 2f0ca <z_impl_k_mutex_lock+0x192>
   2f0ae:	235d      	movs	r3, #93	; 0x5d
   2f0b0:	4a09      	ldr	r2, [pc, #36]	; (2f0d8 <z_impl_k_mutex_lock+0x1a0>)
   2f0b2:	490e      	ldr	r1, [pc, #56]	; (2f0ec <z_impl_k_mutex_lock+0x1b4>)
   2f0b4:	480a      	ldr	r0, [pc, #40]	; (2f0e0 <z_impl_k_mutex_lock+0x1a8>)
   2f0b6:	f004 fa2e 	bl	33516 <printk>
   2f0ba:	4906      	ldr	r1, [pc, #24]	; (2f0d4 <z_impl_k_mutex_lock+0x19c>)
   2f0bc:	480c      	ldr	r0, [pc, #48]	; (2f0f0 <z_impl_k_mutex_lock+0x1b8>)
   2f0be:	f004 fa2a 	bl	33516 <printk>
   2f0c2:	215d      	movs	r1, #93	; 0x5d
   2f0c4:	4804      	ldr	r0, [pc, #16]	; (2f0d8 <z_impl_k_mutex_lock+0x1a0>)
   2f0c6:	f004 fa6c 	bl	335a2 <assert_post_action>
	__asm__ volatile(
   2f0ca:	f386 8811 	msr	BASEPRI, r6
   2f0ce:	f3bf 8f6f 	isb	sy
   2f0d2:	e7de      	b.n	2f092 <z_impl_k_mutex_lock+0x15a>
   2f0d4:	20023ecc 	.word	0x20023ecc
   2f0d8:	000382ba 	.word	0x000382ba
   2f0dc:	000382e0 	.word	0x000382e0
   2f0e0:	00037a66 	.word	0x00037a66
   2f0e4:	000382f5 	.word	0x000382f5
   2f0e8:	20023ed0 	.word	0x20023ed0
   2f0ec:	0003830d 	.word	0x0003830d
   2f0f0:	00038324 	.word	0x00038324

0002f0f4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   2f0f4:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	CHECKIF(mutex->owner == NULL) {
   2f0f6:	6883      	ldr	r3, [r0, #8]
{
   2f0f8:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   2f0fa:	2b00      	cmp	r3, #0
   2f0fc:	f000 8096 	beq.w	2f22c <z_impl_k_mutex_unlock+0x138>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   2f100:	4d4d      	ldr	r5, [pc, #308]	; (2f238 <z_impl_k_mutex_unlock+0x144>)
   2f102:	68aa      	ldr	r2, [r5, #8]
   2f104:	4293      	cmp	r3, r2
   2f106:	f040 8094 	bne.w	2f232 <z_impl_k_mutex_unlock+0x13e>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   2f10a:	68c3      	ldr	r3, [r0, #12]
   2f10c:	b94b      	cbnz	r3, 2f122 <z_impl_k_mutex_unlock+0x2e>
   2f10e:	494b      	ldr	r1, [pc, #300]	; (2f23c <z_impl_k_mutex_unlock+0x148>)
   2f110:	484b      	ldr	r0, [pc, #300]	; (2f240 <z_impl_k_mutex_unlock+0x14c>)
   2f112:	23e5      	movs	r3, #229	; 0xe5
   2f114:	4a4b      	ldr	r2, [pc, #300]	; (2f244 <z_impl_k_mutex_unlock+0x150>)
   2f116:	f004 f9fe 	bl	33516 <printk>
   2f11a:	21e5      	movs	r1, #229	; 0xe5
   2f11c:	4849      	ldr	r0, [pc, #292]	; (2f244 <z_impl_k_mutex_unlock+0x150>)
   2f11e:	f004 fa40 	bl	335a2 <assert_post_action>
   2f122:	f3ef 8305 	mrs	r3, IPSR
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
   2f126:	b173      	cbz	r3, 2f146 <z_impl_k_mutex_unlock+0x52>
   2f128:	4947      	ldr	r1, [pc, #284]	; (2f248 <z_impl_k_mutex_unlock+0x154>)
   2f12a:	f240 130d 	movw	r3, #269	; 0x10d
   2f12e:	4a47      	ldr	r2, [pc, #284]	; (2f24c <z_impl_k_mutex_unlock+0x158>)
   2f130:	4843      	ldr	r0, [pc, #268]	; (2f240 <z_impl_k_mutex_unlock+0x14c>)
   2f132:	f004 f9f0 	bl	33516 <printk>
   2f136:	4846      	ldr	r0, [pc, #280]	; (2f250 <z_impl_k_mutex_unlock+0x15c>)
   2f138:	f004 f9ed 	bl	33516 <printk>
   2f13c:	f240 110d 	movw	r1, #269	; 0x10d
   2f140:	4842      	ldr	r0, [pc, #264]	; (2f24c <z_impl_k_mutex_unlock+0x158>)
   2f142:	f004 fa2e 	bl	335a2 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   2f146:	68ab      	ldr	r3, [r5, #8]
   2f148:	7bdb      	ldrb	r3, [r3, #15]
   2f14a:	2b01      	cmp	r3, #1
   2f14c:	d10e      	bne.n	2f16c <z_impl_k_mutex_unlock+0x78>
   2f14e:	4941      	ldr	r1, [pc, #260]	; (2f254 <z_impl_k_mutex_unlock+0x160>)
   2f150:	f44f 7387 	mov.w	r3, #270	; 0x10e
   2f154:	4a3d      	ldr	r2, [pc, #244]	; (2f24c <z_impl_k_mutex_unlock+0x158>)
   2f156:	483a      	ldr	r0, [pc, #232]	; (2f240 <z_impl_k_mutex_unlock+0x14c>)
   2f158:	f004 f9dd 	bl	33516 <printk>
   2f15c:	483c      	ldr	r0, [pc, #240]	; (2f250 <z_impl_k_mutex_unlock+0x15c>)
   2f15e:	f004 f9da 	bl	33516 <printk>
   2f162:	f44f 7187 	mov.w	r1, #270	; 0x10e
   2f166:	4839      	ldr	r0, [pc, #228]	; (2f24c <z_impl_k_mutex_unlock+0x158>)
   2f168:	f004 fa1b 	bl	335a2 <assert_post_action>

	--_current->base.sched_locked;
   2f16c:	68aa      	ldr	r2, [r5, #8]
   2f16e:	7bd3      	ldrb	r3, [r2, #15]
   2f170:	3b01      	subs	r3, #1
   2f172:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   2f174:	68e3      	ldr	r3, [r4, #12]
   2f176:	2b01      	cmp	r3, #1
   2f178:	d005      	beq.n	2f186 <z_impl_k_mutex_unlock+0x92>
		mutex->lock_count--;
   2f17a:	3b01      	subs	r3, #1
   2f17c:	60e3      	str	r3, [r4, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   2f17e:	f000 fbdf 	bl	2f940 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   2f182:	2000      	movs	r0, #0
}
   2f184:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   2f186:	f04f 0320 	mov.w	r3, #32
   2f18a:	f3ef 8511 	mrs	r5, BASEPRI
   2f18e:	f383 8811 	msr	BASEPRI, r3
   2f192:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2f196:	4830      	ldr	r0, [pc, #192]	; (2f258 <z_impl_k_mutex_unlock+0x164>)
   2f198:	f001 fbf4 	bl	30984 <z_spin_lock_valid>
   2f19c:	b968      	cbnz	r0, 2f1ba <z_impl_k_mutex_unlock+0xc6>
   2f19e:	234a      	movs	r3, #74	; 0x4a
   2f1a0:	4a2e      	ldr	r2, [pc, #184]	; (2f25c <z_impl_k_mutex_unlock+0x168>)
   2f1a2:	492f      	ldr	r1, [pc, #188]	; (2f260 <z_impl_k_mutex_unlock+0x16c>)
   2f1a4:	4826      	ldr	r0, [pc, #152]	; (2f240 <z_impl_k_mutex_unlock+0x14c>)
   2f1a6:	f004 f9b6 	bl	33516 <printk>
   2f1aa:	492b      	ldr	r1, [pc, #172]	; (2f258 <z_impl_k_mutex_unlock+0x164>)
   2f1ac:	482d      	ldr	r0, [pc, #180]	; (2f264 <z_impl_k_mutex_unlock+0x170>)
   2f1ae:	f004 f9b2 	bl	33516 <printk>
   2f1b2:	214a      	movs	r1, #74	; 0x4a
   2f1b4:	4829      	ldr	r0, [pc, #164]	; (2f25c <z_impl_k_mutex_unlock+0x168>)
   2f1b6:	f004 f9f4 	bl	335a2 <assert_post_action>
	z_spin_lock_set_owner(l);
   2f1ba:	4827      	ldr	r0, [pc, #156]	; (2f258 <z_impl_k_mutex_unlock+0x164>)
   2f1bc:	f001 fc00 	bl	309c0 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   2f1c0:	68a0      	ldr	r0, [r4, #8]
   2f1c2:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
   2f1c4:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2f1c8:	4299      	cmp	r1, r3
   2f1ca:	d001      	beq.n	2f1d0 <z_impl_k_mutex_unlock+0xdc>
		return z_set_prio(mutex->owner, new_prio);
   2f1cc:	f001 f828 	bl	30220 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   2f1d0:	4620      	mov	r0, r4
   2f1d2:	f001 f8b7 	bl	30344 <z_unpend_first_thread>
	mutex->owner = new_owner;
   2f1d6:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   2f1d8:	b180      	cbz	r0, 2f1fc <z_impl_k_mutex_unlock+0x108>
		mutex->owner_orig_prio = new_owner->base.prio;
   2f1da:	f990 200e 	ldrsb.w	r2, [r0, #14]
   2f1de:	6122      	str	r2, [r4, #16]
   2f1e0:	2200      	movs	r2, #0
   2f1e2:	6682      	str	r2, [r0, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   2f1e4:	7b42      	ldrb	r2, [r0, #13]
   2f1e6:	06d2      	lsls	r2, r2, #27
   2f1e8:	d103      	bne.n	2f1f2 <z_impl_k_mutex_unlock+0xfe>
	if (z_is_thread_ready(thread)) {
   2f1ea:	6983      	ldr	r3, [r0, #24]
   2f1ec:	b90b      	cbnz	r3, 2f1f2 <z_impl_k_mutex_unlock+0xfe>
		z_add_thread_to_ready_q(thread);
   2f1ee:	f000 fc23 	bl	2fa38 <z_add_thread_to_ready_q>
		z_reschedule(&lock, key);
   2f1f2:	4629      	mov	r1, r5
   2f1f4:	4818      	ldr	r0, [pc, #96]	; (2f258 <z_impl_k_mutex_unlock+0x164>)
   2f1f6:	f000 fa35 	bl	2f664 <z_reschedule>
   2f1fa:	e7c0      	b.n	2f17e <z_impl_k_mutex_unlock+0x8a>
		mutex->lock_count = 0U;
   2f1fc:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2f1fe:	4816      	ldr	r0, [pc, #88]	; (2f258 <z_impl_k_mutex_unlock+0x164>)
   2f200:	f001 fbce 	bl	309a0 <z_spin_unlock_valid>
   2f204:	b968      	cbnz	r0, 2f222 <z_impl_k_mutex_unlock+0x12e>
   2f206:	235d      	movs	r3, #93	; 0x5d
   2f208:	4a14      	ldr	r2, [pc, #80]	; (2f25c <z_impl_k_mutex_unlock+0x168>)
   2f20a:	4917      	ldr	r1, [pc, #92]	; (2f268 <z_impl_k_mutex_unlock+0x174>)
   2f20c:	480c      	ldr	r0, [pc, #48]	; (2f240 <z_impl_k_mutex_unlock+0x14c>)
   2f20e:	f004 f982 	bl	33516 <printk>
   2f212:	4911      	ldr	r1, [pc, #68]	; (2f258 <z_impl_k_mutex_unlock+0x164>)
   2f214:	4815      	ldr	r0, [pc, #84]	; (2f26c <z_impl_k_mutex_unlock+0x178>)
   2f216:	f004 f97e 	bl	33516 <printk>
   2f21a:	215d      	movs	r1, #93	; 0x5d
   2f21c:	480f      	ldr	r0, [pc, #60]	; (2f25c <z_impl_k_mutex_unlock+0x168>)
   2f21e:	f004 f9c0 	bl	335a2 <assert_post_action>
	__asm__ volatile(
   2f222:	f385 8811 	msr	BASEPRI, r5
   2f226:	f3bf 8f6f 	isb	sy
   2f22a:	e7a8      	b.n	2f17e <z_impl_k_mutex_unlock+0x8a>
		return -EINVAL;
   2f22c:	f06f 0015 	mvn.w	r0, #21
   2f230:	e7a8      	b.n	2f184 <z_impl_k_mutex_unlock+0x90>
		return -EPERM;
   2f232:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2f236:	e7a5      	b.n	2f184 <z_impl_k_mutex_unlock+0x90>
   2f238:	20023ed0 	.word	0x20023ed0
   2f23c:	0003aebc 	.word	0x0003aebc
   2f240:	00037a66 	.word	0x00037a66
   2f244:	0003ae9a 	.word	0x0003ae9a
   2f248:	0003aefe 	.word	0x0003aefe
   2f24c:	0003aed3 	.word	0x0003aed3
   2f250:	00038d10 	.word	0x00038d10
   2f254:	0003af10 	.word	0x0003af10
   2f258:	20023ecc 	.word	0x20023ecc
   2f25c:	000382ba 	.word	0x000382ba
   2f260:	000382e0 	.word	0x000382e0
   2f264:	000382f5 	.word	0x000382f5
   2f268:	0003830d 	.word	0x0003830d
   2f26c:	00038324 	.word	0x00038324

0002f270 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static s32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
   2f270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2f274:	4604      	mov	r4, r0
   2f276:	460e      	mov	r6, r1
   2f278:	4690      	mov	r8, r2
   2f27a:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2f27c:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   2f280:	f04f 0320 	mov.w	r3, #32
   2f284:	f3ef 8711 	mrs	r7, BASEPRI
   2f288:	f383 8811 	msr	BASEPRI, r3
   2f28c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2f290:	4628      	mov	r0, r5
   2f292:	f001 fb77 	bl	30984 <z_spin_lock_valid>
   2f296:	b968      	cbnz	r0, 2f2b4 <queue_insert+0x44>
   2f298:	234a      	movs	r3, #74	; 0x4a
   2f29a:	4a33      	ldr	r2, [pc, #204]	; (2f368 <queue_insert+0xf8>)
   2f29c:	4933      	ldr	r1, [pc, #204]	; (2f36c <queue_insert+0xfc>)
   2f29e:	4834      	ldr	r0, [pc, #208]	; (2f370 <queue_insert+0x100>)
   2f2a0:	f004 f939 	bl	33516 <printk>
   2f2a4:	4629      	mov	r1, r5
   2f2a6:	4833      	ldr	r0, [pc, #204]	; (2f374 <queue_insert+0x104>)
   2f2a8:	f004 f935 	bl	33516 <printk>
   2f2ac:	214a      	movs	r1, #74	; 0x4a
   2f2ae:	482e      	ldr	r0, [pc, #184]	; (2f368 <queue_insert+0xf8>)
   2f2b0:	f004 f977 	bl	335a2 <assert_post_action>
	z_spin_lock_set_owner(l);
   2f2b4:	4628      	mov	r0, r5
   2f2b6:	f001 fb83 	bl	309c0 <z_spin_lock_set_owner>
		return 0;
	}
#endif /* !CONFIG_POLL */

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   2f2ba:	f1b9 0f00 	cmp.w	r9, #0
   2f2be:	d02d      	beq.n	2f31c <queue_insert+0xac>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
   2f2c0:	2008      	movs	r0, #8
   2f2c2:	f7ff fcd3 	bl	2ec6c <z_thread_malloc>
		if (anode == NULL) {
   2f2c6:	b9c8      	cbnz	r0, 2f2fc <queue_insert+0x8c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2f2c8:	4628      	mov	r0, r5
   2f2ca:	f001 fb69 	bl	309a0 <z_spin_unlock_valid>
   2f2ce:	b968      	cbnz	r0, 2f2ec <queue_insert+0x7c>
   2f2d0:	235d      	movs	r3, #93	; 0x5d
   2f2d2:	4a25      	ldr	r2, [pc, #148]	; (2f368 <queue_insert+0xf8>)
   2f2d4:	4928      	ldr	r1, [pc, #160]	; (2f378 <queue_insert+0x108>)
   2f2d6:	4826      	ldr	r0, [pc, #152]	; (2f370 <queue_insert+0x100>)
   2f2d8:	f004 f91d 	bl	33516 <printk>
   2f2dc:	4629      	mov	r1, r5
   2f2de:	4827      	ldr	r0, [pc, #156]	; (2f37c <queue_insert+0x10c>)
   2f2e0:	f004 f919 	bl	33516 <printk>
   2f2e4:	215d      	movs	r1, #93	; 0x5d
   2f2e6:	4820      	ldr	r0, [pc, #128]	; (2f368 <queue_insert+0xf8>)
   2f2e8:	f004 f95b 	bl	335a2 <assert_post_action>
	__asm__ volatile(
   2f2ec:	f387 8811 	msr	BASEPRI, r7
   2f2f0:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&queue->lock, key);
			return -ENOMEM;
   2f2f4:	f06f 000b 	mvn.w	r0, #11
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
#endif /* CONFIG_POLL */

	z_reschedule(&queue->lock, key);
	return 0;
}
   2f2f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, u8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   2f2fc:	2301      	movs	r3, #1
		anode->data = data;
   2f2fe:	f8c0 8004 	str.w	r8, [r0, #4]
   2f302:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   2f304:	6803      	ldr	r3, [r0, #0]
   2f306:	f003 0203 	and.w	r2, r3, #3
   2f30a:	b95e      	cbnz	r6, 2f324 <queue_insert+0xb4>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2f30c:	6823      	ldr	r3, [r4, #0]
   2f30e:	4313      	orrs	r3, r2
   2f310:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2f312:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   2f314:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2f316:	b973      	cbnz	r3, 2f336 <queue_insert+0xc6>
	list->tail = node;
   2f318:	6060      	str	r0, [r4, #4]
}
   2f31a:	e00c      	b.n	2f336 <queue_insert+0xc6>
}
   2f31c:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   2f31e:	f8c8 9000 	str.w	r9, [r8]
}
   2f322:	e7ef      	b.n	2f304 <queue_insert+0x94>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2f324:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   2f326:	f033 0303 	bics.w	r3, r3, #3
   2f32a:	d115      	bne.n	2f358 <queue_insert+0xe8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2f32c:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   2f32e:	6862      	ldr	r2, [r4, #4]
   2f330:	b962      	cbnz	r2, 2f34c <queue_insert+0xdc>
	list->head = node;
   2f332:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   2f336:	2104      	movs	r1, #4
   2f338:	f104 000c 	add.w	r0, r4, #12
   2f33c:	f006 fbb5 	bl	35aaa <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   2f340:	4628      	mov	r0, r5
   2f342:	4639      	mov	r1, r7
   2f344:	f000 f98e 	bl	2f664 <z_reschedule>
	return 0;
   2f348:	2000      	movs	r0, #0
   2f34a:	e7d5      	b.n	2f2f8 <queue_insert+0x88>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2f34c:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2f34e:	f003 0303 	and.w	r3, r3, #3
   2f352:	4303      	orrs	r3, r0
   2f354:	6013      	str	r3, [r2, #0]
   2f356:	e7df      	b.n	2f318 <queue_insert+0xa8>
   2f358:	4313      	orrs	r3, r2
   2f35a:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2f35c:	6833      	ldr	r3, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2f35e:	f003 0303 	and.w	r3, r3, #3
   2f362:	4303      	orrs	r3, r0
   2f364:	6033      	str	r3, [r6, #0]
}
   2f366:	e7e6      	b.n	2f336 <queue_insert+0xc6>
   2f368:	000382ba 	.word	0x000382ba
   2f36c:	000382e0 	.word	0x000382e0
   2f370:	00037a66 	.word	0x00037a66
   2f374:	000382f5 	.word	0x000382f5
   2f378:	0003830d 	.word	0x0003830d
   2f37c:	00038324 	.word	0x00038324

0002f380 <z_impl_k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *z_impl_k_queue_get(struct k_queue *queue, s32_t timeout)
{
   2f380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f384:	4606      	mov	r6, r0
   2f386:	b089      	sub	sp, #36	; 0x24
   2f388:	460f      	mov	r7, r1
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2f38a:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   2f38e:	f04f 0320 	mov.w	r3, #32
   2f392:	f3ef 8811 	mrs	r8, BASEPRI
   2f396:	f383 8811 	msr	BASEPRI, r3
   2f39a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2f39e:	4628      	mov	r0, r5
   2f3a0:	f001 faf0 	bl	30984 <z_spin_lock_valid>
   2f3a4:	b968      	cbnz	r0, 2f3c2 <z_impl_k_queue_get+0x42>
   2f3a6:	234a      	movs	r3, #74	; 0x4a
   2f3a8:	4a61      	ldr	r2, [pc, #388]	; (2f530 <z_impl_k_queue_get+0x1b0>)
   2f3aa:	4962      	ldr	r1, [pc, #392]	; (2f534 <z_impl_k_queue_get+0x1b4>)
   2f3ac:	4862      	ldr	r0, [pc, #392]	; (2f538 <z_impl_k_queue_get+0x1b8>)
   2f3ae:	f004 f8b2 	bl	33516 <printk>
   2f3b2:	4629      	mov	r1, r5
   2f3b4:	4861      	ldr	r0, [pc, #388]	; (2f53c <z_impl_k_queue_get+0x1bc>)
   2f3b6:	f004 f8ae 	bl	33516 <printk>
   2f3ba:	214a      	movs	r1, #74	; 0x4a
   2f3bc:	485c      	ldr	r0, [pc, #368]	; (2f530 <z_impl_k_queue_get+0x1b0>)
   2f3be:	f004 f8f0 	bl	335a2 <assert_post_action>
	z_spin_lock_set_owner(l);
   2f3c2:	4628      	mov	r0, r5
   2f3c4:	f001 fafc 	bl	309c0 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   2f3c8:	6834      	ldr	r4, [r6, #0]
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   2f3ca:	b33c      	cbz	r4, 2f41c <z_impl_k_queue_get+0x9c>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2f3cc:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2f3ce:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2f3d0:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2f3d4:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   2f3d6:	4620      	mov	r0, r4
   2f3d8:	f04f 0101 	mov.w	r1, #1
	list->head = node;
   2f3dc:	6033      	str	r3, [r6, #0]
	list->tail = node;
   2f3de:	bf08      	it	eq
   2f3e0:	6073      	streq	r3, [r6, #4]
   2f3e2:	f006 fa0a 	bl	357fa <z_queue_node_peek>
   2f3e6:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2f3e8:	4628      	mov	r0, r5
   2f3ea:	f001 fad9 	bl	309a0 <z_spin_unlock_valid>
   2f3ee:	b968      	cbnz	r0, 2f40c <z_impl_k_queue_get+0x8c>
   2f3f0:	235d      	movs	r3, #93	; 0x5d
   2f3f2:	4a4f      	ldr	r2, [pc, #316]	; (2f530 <z_impl_k_queue_get+0x1b0>)
   2f3f4:	4952      	ldr	r1, [pc, #328]	; (2f540 <z_impl_k_queue_get+0x1c0>)
   2f3f6:	4850      	ldr	r0, [pc, #320]	; (2f538 <z_impl_k_queue_get+0x1b8>)
   2f3f8:	f004 f88d 	bl	33516 <printk>
   2f3fc:	4629      	mov	r1, r5
   2f3fe:	4851      	ldr	r0, [pc, #324]	; (2f544 <z_impl_k_queue_get+0x1c4>)
   2f400:	f004 f889 	bl	33516 <printk>
   2f404:	215d      	movs	r1, #93	; 0x5d
   2f406:	484a      	ldr	r0, [pc, #296]	; (2f530 <z_impl_k_queue_get+0x1b0>)
   2f408:	f004 f8cb 	bl	335a2 <assert_post_action>
	__asm__ volatile(
   2f40c:	f388 8811 	msr	BASEPRI, r8
   2f410:	f3bf 8f6f 	isb	sy
#else
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   2f414:	4620      	mov	r0, r4
   2f416:	b009      	add	sp, #36	; 0x24
   2f418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f41c:	4628      	mov	r0, r5
	if (timeout == K_NO_WAIT) {
   2f41e:	2f00      	cmp	r7, #0
   2f420:	d0e3      	beq.n	2f3ea <z_impl_k_queue_get+0x6a>
   2f422:	f001 fabd 	bl	309a0 <z_spin_unlock_valid>
   2f426:	b968      	cbnz	r0, 2f444 <z_impl_k_queue_get+0xc4>
   2f428:	235d      	movs	r3, #93	; 0x5d
   2f42a:	4a41      	ldr	r2, [pc, #260]	; (2f530 <z_impl_k_queue_get+0x1b0>)
   2f42c:	4944      	ldr	r1, [pc, #272]	; (2f540 <z_impl_k_queue_get+0x1c0>)
   2f42e:	4842      	ldr	r0, [pc, #264]	; (2f538 <z_impl_k_queue_get+0x1b8>)
   2f430:	f004 f871 	bl	33516 <printk>
   2f434:	4629      	mov	r1, r5
   2f436:	4843      	ldr	r0, [pc, #268]	; (2f544 <z_impl_k_queue_get+0x1c4>)
   2f438:	f004 f86d 	bl	33516 <printk>
   2f43c:	215d      	movs	r1, #93	; 0x5d
   2f43e:	483c      	ldr	r0, [pc, #240]	; (2f530 <z_impl_k_queue_get+0x1b0>)
   2f440:	f004 f8af 	bl	335a2 <assert_post_action>
   2f444:	f388 8811 	msr	BASEPRI, r8
   2f448:	f3bf 8f6f 	isb	sy
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   2f44c:	2200      	movs	r2, #0
   2f44e:	4633      	mov	r3, r6
   2f450:	2104      	movs	r1, #4
   2f452:	a803      	add	r0, sp, #12
   2f454:	f002 f9da 	bl	3180c <k_poll_event_init>
	if (timeout != K_FOREVER) {
   2f458:	1c7a      	adds	r2, r7, #1
   2f45a:	d002      	beq.n	2f462 <z_impl_k_queue_get+0xe2>
   2f45c:	f006 facb 	bl	359f6 <z_impl_k_uptime_get>
   2f460:	9000      	str	r0, [sp, #0]
{
   2f462:	f04f 0800 	mov.w	r8, #0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2f466:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 2f530 <z_impl_k_queue_get+0x1b0>
   2f46a:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 2f534 <z_impl_k_queue_get+0x1b4>
   2f46e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 2f538 <z_impl_k_queue_get+0x1b8>
		event.state = K_POLL_STATE_NOT_READY;
   2f472:	9b06      	ldr	r3, [sp, #24]
   2f474:	f36f 3310 	bfc	r3, #12, #5
   2f478:	9306      	str	r3, [sp, #24]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&events, *(uintptr_t *)&num_events, *(uintptr_t *)&timeout, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   2f47a:	2101      	movs	r1, #1
   2f47c:	eba7 0208 	sub.w	r2, r7, r8
   2f480:	a803      	add	r0, sp, #12
   2f482:	f002 fa11 	bl	318a8 <z_impl_k_poll>
		if (err && err != -EAGAIN) {
   2f486:	b118      	cbz	r0, 2f490 <z_impl_k_queue_get+0x110>
   2f488:	300b      	adds	r0, #11
   2f48a:	d001      	beq.n	2f490 <z_impl_k_queue_get+0x110>
			return NULL;
   2f48c:	2400      	movs	r4, #0
   2f48e:	e7c1      	b.n	2f414 <z_impl_k_queue_get+0x94>
	__asm__ volatile(
   2f490:	f04f 0320 	mov.w	r3, #32
   2f494:	f3ef 8211 	mrs	r2, BASEPRI
   2f498:	f383 8811 	msr	BASEPRI, r3
   2f49c:	f3bf 8f6f 	isb	sy
   2f4a0:	4628      	mov	r0, r5
   2f4a2:	9201      	str	r2, [sp, #4]
   2f4a4:	f001 fa6e 	bl	30984 <z_spin_lock_valid>
   2f4a8:	b968      	cbnz	r0, 2f4c6 <z_impl_k_queue_get+0x146>
   2f4aa:	234a      	movs	r3, #74	; 0x4a
   2f4ac:	464a      	mov	r2, r9
   2f4ae:	4659      	mov	r1, fp
   2f4b0:	4650      	mov	r0, sl
   2f4b2:	f004 f830 	bl	33516 <printk>
   2f4b6:	4629      	mov	r1, r5
   2f4b8:	4820      	ldr	r0, [pc, #128]	; (2f53c <z_impl_k_queue_get+0x1bc>)
   2f4ba:	f004 f82c 	bl	33516 <printk>
   2f4be:	214a      	movs	r1, #74	; 0x4a
   2f4c0:	4648      	mov	r0, r9
   2f4c2:	f004 f86e 	bl	335a2 <assert_post_action>
	z_spin_lock_set_owner(l);
   2f4c6:	4628      	mov	r0, r5
   2f4c8:	f001 fa7a 	bl	309c0 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   2f4cc:	6830      	ldr	r0, [r6, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

Z_GENLIST_GET(sflist, sfnode)
   2f4ce:	b138      	cbz	r0, 2f4e0 <z_impl_k_queue_get+0x160>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2f4d0:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2f4d2:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2f4d4:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2f4d8:	4290      	cmp	r0, r2
	list->head = node;
   2f4da:	6033      	str	r3, [r6, #0]
	list->tail = node;
   2f4dc:	bf08      	it	eq
   2f4de:	6073      	streq	r3, [r6, #4]
		val = z_queue_node_peek(sys_sflist_get(&queue->data_q), true);
   2f4e0:	2101      	movs	r1, #1
   2f4e2:	f006 f98a 	bl	357fa <z_queue_node_peek>
   2f4e6:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2f4e8:	4628      	mov	r0, r5
   2f4ea:	f001 fa59 	bl	309a0 <z_spin_unlock_valid>
   2f4ee:	b968      	cbnz	r0, 2f50c <z_impl_k_queue_get+0x18c>
   2f4f0:	235d      	movs	r3, #93	; 0x5d
   2f4f2:	464a      	mov	r2, r9
   2f4f4:	4650      	mov	r0, sl
   2f4f6:	4912      	ldr	r1, [pc, #72]	; (2f540 <z_impl_k_queue_get+0x1c0>)
   2f4f8:	f004 f80d 	bl	33516 <printk>
   2f4fc:	4629      	mov	r1, r5
   2f4fe:	4811      	ldr	r0, [pc, #68]	; (2f544 <z_impl_k_queue_get+0x1c4>)
   2f500:	f004 f809 	bl	33516 <printk>
   2f504:	215d      	movs	r1, #93	; 0x5d
   2f506:	4648      	mov	r0, r9
   2f508:	f004 f84b 	bl	335a2 <assert_post_action>
	__asm__ volatile(
   2f50c:	9b01      	ldr	r3, [sp, #4]
   2f50e:	f383 8811 	msr	BASEPRI, r3
   2f512:	f3bf 8f6f 	isb	sy
		if ((val == NULL) && (timeout != K_FOREVER)) {
   2f516:	2c00      	cmp	r4, #0
   2f518:	f47f af7c 	bne.w	2f414 <z_impl_k_queue_get+0x94>
   2f51c:	1c7b      	adds	r3, r7, #1
   2f51e:	d0a8      	beq.n	2f472 <z_impl_k_queue_get+0xf2>
	return z_impl_k_uptime_get();
   2f520:	f006 fa69 	bl	359f6 <z_impl_k_uptime_get>
			elapsed = k_uptime_get_32() - start;
   2f524:	9b00      	ldr	r3, [sp, #0]
   2f526:	eba0 0803 	sub.w	r8, r0, r3
	} while (!val && !done);
   2f52a:	4547      	cmp	r7, r8
   2f52c:	daa1      	bge.n	2f472 <z_impl_k_queue_get+0xf2>
   2f52e:	e7ad      	b.n	2f48c <z_impl_k_queue_get+0x10c>
   2f530:	000382ba 	.word	0x000382ba
   2f534:	000382e0 	.word	0x000382e0
   2f538:	00037a66 	.word	0x00037a66
   2f53c:	000382f5 	.word	0x000382f5
   2f540:	0003830d 	.word	0x0003830d
   2f544:	00038324 	.word	0x00038324

0002f548 <pended_on.isra.0>:
	}
}

static _wait_q_t *pended_on(struct k_thread *thread)
{
	__ASSERT_NO_MSG(thread->base.pended_on);
   2f548:	6803      	ldr	r3, [r0, #0]
static _wait_q_t *pended_on(struct k_thread *thread)
   2f54a:	b510      	push	{r4, lr}
   2f54c:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   2f54e:	b95b      	cbnz	r3, 2f568 <pended_on.isra.0+0x20>
   2f550:	4906      	ldr	r1, [pc, #24]	; (2f56c <pended_on.isra.0+0x24>)
   2f552:	4807      	ldr	r0, [pc, #28]	; (2f570 <pended_on.isra.0+0x28>)
   2f554:	f240 139d 	movw	r3, #413	; 0x19d
   2f558:	4a06      	ldr	r2, [pc, #24]	; (2f574 <pended_on.isra.0+0x2c>)
   2f55a:	f003 ffdc 	bl	33516 <printk>
   2f55e:	f240 119d 	movw	r1, #413	; 0x19d
   2f562:	4804      	ldr	r0, [pc, #16]	; (2f574 <pended_on.isra.0+0x2c>)
   2f564:	f004 f81d 	bl	335a2 <assert_post_action>

	return thread->base.pended_on;
}
   2f568:	6820      	ldr	r0, [r4, #0]
   2f56a:	bd10      	pop	{r4, pc}
   2f56c:	0003af5a 	.word	0x0003af5a
   2f570:	00037a66 	.word	0x00037a66
   2f574:	0003af38 	.word	0x0003af38

0002f578 <z_reset_time_slice>:
{
   2f578:	b510      	push	{r4, lr}
	if (slice_time != 0) {
   2f57a:	4c08      	ldr	r4, [pc, #32]	; (2f59c <z_reset_time_slice+0x24>)
   2f57c:	6823      	ldr	r3, [r4, #0]
   2f57e:	b15b      	cbz	r3, 2f598 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   2f580:	f7f0 fe3e 	bl	20200 <z_clock_elapsed>
   2f584:	6822      	ldr	r2, [r4, #0]
   2f586:	4906      	ldr	r1, [pc, #24]	; (2f5a0 <z_reset_time_slice+0x28>)
   2f588:	4410      	add	r0, r2
   2f58a:	6108      	str	r0, [r1, #16]
}
   2f58c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   2f590:	2100      	movs	r1, #0
   2f592:	4610      	mov	r0, r2
   2f594:	f001 bdfc 	b.w	31190 <z_set_timeout_expiry>
}
   2f598:	bd10      	pop	{r4, pc}
   2f59a:	bf00      	nop
   2f59c:	20023f10 	.word	0x20023f10
   2f5a0:	20023ed0 	.word	0x20023ed0

0002f5a4 <k_sched_time_slice_set>:
{
   2f5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2f5a6:	4605      	mov	r5, r0
   2f5a8:	460c      	mov	r4, r1
	__asm__ volatile(
   2f5aa:	f04f 0320 	mov.w	r3, #32
   2f5ae:	f3ef 8611 	mrs	r6, BASEPRI
   2f5b2:	f383 8811 	msr	BASEPRI, r3
   2f5b6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2f5ba:	4820      	ldr	r0, [pc, #128]	; (2f63c <k_sched_time_slice_set+0x98>)
   2f5bc:	f001 f9e2 	bl	30984 <z_spin_lock_valid>
   2f5c0:	b968      	cbnz	r0, 2f5de <k_sched_time_slice_set+0x3a>
   2f5c2:	234a      	movs	r3, #74	; 0x4a
   2f5c4:	4a1e      	ldr	r2, [pc, #120]	; (2f640 <k_sched_time_slice_set+0x9c>)
   2f5c6:	491f      	ldr	r1, [pc, #124]	; (2f644 <k_sched_time_slice_set+0xa0>)
   2f5c8:	481f      	ldr	r0, [pc, #124]	; (2f648 <k_sched_time_slice_set+0xa4>)
   2f5ca:	f003 ffa4 	bl	33516 <printk>
   2f5ce:	491b      	ldr	r1, [pc, #108]	; (2f63c <k_sched_time_slice_set+0x98>)
   2f5d0:	481e      	ldr	r0, [pc, #120]	; (2f64c <k_sched_time_slice_set+0xa8>)
   2f5d2:	f003 ffa0 	bl	33516 <printk>
   2f5d6:	214a      	movs	r1, #74	; 0x4a
   2f5d8:	4819      	ldr	r0, [pc, #100]	; (2f640 <k_sched_time_slice_set+0x9c>)
   2f5da:	f003 ffe2 	bl	335a2 <assert_post_action>
	z_spin_lock_set_owner(l);
   2f5de:	4817      	ldr	r0, [pc, #92]	; (2f63c <k_sched_time_slice_set+0x98>)
   2f5e0:	f001 f9ee 	bl	309c0 <z_spin_lock_set_owner>
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
   2f5e4:	f44f 4700 	mov.w	r7, #32768	; 0x8000
		_current_cpu->slice_ticks = 0;
   2f5e8:	2200      	movs	r2, #0
   2f5ea:	f240 30e7 	movw	r0, #999	; 0x3e7
   2f5ee:	2100      	movs	r1, #0
   2f5f0:	4b17      	ldr	r3, [pc, #92]	; (2f650 <k_sched_time_slice_set+0xac>)
   2f5f2:	fbe7 0105 	umlal	r0, r1, r7, r5
   2f5f6:	611a      	str	r2, [r3, #16]
   2f5f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2f5fc:	2300      	movs	r3, #0
   2f5fe:	f7ed f98b 	bl	1c918 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   2f602:	4b14      	ldr	r3, [pc, #80]	; (2f654 <k_sched_time_slice_set+0xb0>)
   2f604:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   2f606:	4b14      	ldr	r3, [pc, #80]	; (2f658 <k_sched_time_slice_set+0xb4>)
   2f608:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
   2f60a:	f7ff ffb5 	bl	2f578 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2f60e:	480b      	ldr	r0, [pc, #44]	; (2f63c <k_sched_time_slice_set+0x98>)
   2f610:	f001 f9c6 	bl	309a0 <z_spin_unlock_valid>
   2f614:	b968      	cbnz	r0, 2f632 <k_sched_time_slice_set+0x8e>
   2f616:	235d      	movs	r3, #93	; 0x5d
   2f618:	4a09      	ldr	r2, [pc, #36]	; (2f640 <k_sched_time_slice_set+0x9c>)
   2f61a:	4910      	ldr	r1, [pc, #64]	; (2f65c <k_sched_time_slice_set+0xb8>)
   2f61c:	480a      	ldr	r0, [pc, #40]	; (2f648 <k_sched_time_slice_set+0xa4>)
   2f61e:	f003 ff7a 	bl	33516 <printk>
   2f622:	4906      	ldr	r1, [pc, #24]	; (2f63c <k_sched_time_slice_set+0x98>)
   2f624:	480e      	ldr	r0, [pc, #56]	; (2f660 <k_sched_time_slice_set+0xbc>)
   2f626:	f003 ff76 	bl	33516 <printk>
   2f62a:	215d      	movs	r1, #93	; 0x5d
   2f62c:	4804      	ldr	r0, [pc, #16]	; (2f640 <k_sched_time_slice_set+0x9c>)
   2f62e:	f003 ffb8 	bl	335a2 <assert_post_action>
	__asm__ volatile(
   2f632:	f386 8811 	msr	BASEPRI, r6
   2f636:	f3bf 8f6f 	isb	sy
}
   2f63a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2f63c:	20023f08 	.word	0x20023f08
   2f640:	000382ba 	.word	0x000382ba
   2f644:	000382e0 	.word	0x000382e0
   2f648:	00037a66 	.word	0x00037a66
   2f64c:	000382f5 	.word	0x000382f5
   2f650:	20023ed0 	.word	0x20023ed0
   2f654:	20023f10 	.word	0x20023f10
   2f658:	20023f0c 	.word	0x20023f0c
   2f65c:	0003830d 	.word	0x0003830d
   2f660:	00038324 	.word	0x00038324

0002f664 <z_reschedule>:

	return arch_irq_unlocked(key) && !arch_is_in_isr();
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   2f664:	b538      	push	{r3, r4, r5, lr}
   2f666:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2f668:	460d      	mov	r5, r1
   2f66a:	b9c1      	cbnz	r1, 2f69e <z_reschedule+0x3a>
   2f66c:	f3ef 8305 	mrs	r3, IPSR
   2f670:	b9ab      	cbnz	r3, 2f69e <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2f672:	f001 f995 	bl	309a0 <z_spin_unlock_valid>
   2f676:	b968      	cbnz	r0, 2f694 <z_reschedule+0x30>
   2f678:	2374      	movs	r3, #116	; 0x74
   2f67a:	4a14      	ldr	r2, [pc, #80]	; (2f6cc <z_reschedule+0x68>)
   2f67c:	4914      	ldr	r1, [pc, #80]	; (2f6d0 <z_reschedule+0x6c>)
   2f67e:	4815      	ldr	r0, [pc, #84]	; (2f6d4 <z_reschedule+0x70>)
   2f680:	f003 ff49 	bl	33516 <printk>
   2f684:	4621      	mov	r1, r4
   2f686:	4814      	ldr	r0, [pc, #80]	; (2f6d8 <z_reschedule+0x74>)
   2f688:	f003 ff45 	bl	33516 <printk>
   2f68c:	2174      	movs	r1, #116	; 0x74
   2f68e:	480f      	ldr	r0, [pc, #60]	; (2f6cc <z_reschedule+0x68>)
   2f690:	f003 ff87 	bl	335a2 <assert_post_action>
	if (resched(key.key)) {
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   2f694:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2f698:	2000      	movs	r0, #0
   2f69a:	f7f0 be61 	b.w	20360 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2f69e:	4620      	mov	r0, r4
   2f6a0:	f001 f97e 	bl	309a0 <z_spin_unlock_valid>
   2f6a4:	b968      	cbnz	r0, 2f6c2 <z_reschedule+0x5e>
   2f6a6:	235d      	movs	r3, #93	; 0x5d
   2f6a8:	4a08      	ldr	r2, [pc, #32]	; (2f6cc <z_reschedule+0x68>)
   2f6aa:	4909      	ldr	r1, [pc, #36]	; (2f6d0 <z_reschedule+0x6c>)
   2f6ac:	4809      	ldr	r0, [pc, #36]	; (2f6d4 <z_reschedule+0x70>)
   2f6ae:	f003 ff32 	bl	33516 <printk>
   2f6b2:	4621      	mov	r1, r4
   2f6b4:	4808      	ldr	r0, [pc, #32]	; (2f6d8 <z_reschedule+0x74>)
   2f6b6:	f003 ff2e 	bl	33516 <printk>
   2f6ba:	215d      	movs	r1, #93	; 0x5d
   2f6bc:	4803      	ldr	r0, [pc, #12]	; (2f6cc <z_reschedule+0x68>)
   2f6be:	f003 ff70 	bl	335a2 <assert_post_action>
   2f6c2:	f385 8811 	msr	BASEPRI, r5
   2f6c6:	f3bf 8f6f 	isb	sy
   2f6ca:	bd38      	pop	{r3, r4, r5, pc}
   2f6cc:	000382ba 	.word	0x000382ba
   2f6d0:	0003830d 	.word	0x0003830d
   2f6d4:	00037a66 	.word	0x00037a66
   2f6d8:	00038324 	.word	0x00038324

0002f6dc <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   2f6dc:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2f6de:	f04f 0320 	mov.w	r3, #32
   2f6e2:	f3ef 8511 	mrs	r5, BASEPRI
   2f6e6:	f383 8811 	msr	BASEPRI, r3
   2f6ea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2f6ee:	482b      	ldr	r0, [pc, #172]	; (2f79c <k_sched_lock+0xc0>)
   2f6f0:	f001 f948 	bl	30984 <z_spin_lock_valid>
   2f6f4:	b968      	cbnz	r0, 2f712 <k_sched_lock+0x36>
   2f6f6:	234a      	movs	r3, #74	; 0x4a
   2f6f8:	4a29      	ldr	r2, [pc, #164]	; (2f7a0 <k_sched_lock+0xc4>)
   2f6fa:	492a      	ldr	r1, [pc, #168]	; (2f7a4 <k_sched_lock+0xc8>)
   2f6fc:	482a      	ldr	r0, [pc, #168]	; (2f7a8 <k_sched_lock+0xcc>)
   2f6fe:	f003 ff0a 	bl	33516 <printk>
   2f702:	4926      	ldr	r1, [pc, #152]	; (2f79c <k_sched_lock+0xc0>)
   2f704:	4829      	ldr	r0, [pc, #164]	; (2f7ac <k_sched_lock+0xd0>)
   2f706:	f003 ff06 	bl	33516 <printk>
   2f70a:	214a      	movs	r1, #74	; 0x4a
   2f70c:	4824      	ldr	r0, [pc, #144]	; (2f7a0 <k_sched_lock+0xc4>)
   2f70e:	f003 ff48 	bl	335a2 <assert_post_action>
	z_spin_lock_set_owner(l);
   2f712:	4822      	ldr	r0, [pc, #136]	; (2f79c <k_sched_lock+0xc0>)
   2f714:	f001 f954 	bl	309c0 <z_spin_lock_set_owner>
   2f718:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   2f71c:	b173      	cbz	r3, 2f73c <k_sched_lock+0x60>
   2f71e:	4924      	ldr	r1, [pc, #144]	; (2f7b0 <k_sched_lock+0xd4>)
   2f720:	f240 130d 	movw	r3, #269	; 0x10d
   2f724:	4a23      	ldr	r2, [pc, #140]	; (2f7b4 <k_sched_lock+0xd8>)
   2f726:	4820      	ldr	r0, [pc, #128]	; (2f7a8 <k_sched_lock+0xcc>)
   2f728:	f003 fef5 	bl	33516 <printk>
   2f72c:	4822      	ldr	r0, [pc, #136]	; (2f7b8 <k_sched_lock+0xdc>)
   2f72e:	f003 fef2 	bl	33516 <printk>
   2f732:	f240 110d 	movw	r1, #269	; 0x10d
   2f736:	481f      	ldr	r0, [pc, #124]	; (2f7b4 <k_sched_lock+0xd8>)
   2f738:	f003 ff33 	bl	335a2 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   2f73c:	4c1f      	ldr	r4, [pc, #124]	; (2f7bc <k_sched_lock+0xe0>)
   2f73e:	68a2      	ldr	r2, [r4, #8]
   2f740:	7bd2      	ldrb	r2, [r2, #15]
   2f742:	2a01      	cmp	r2, #1
   2f744:	d10e      	bne.n	2f764 <k_sched_lock+0x88>
   2f746:	491e      	ldr	r1, [pc, #120]	; (2f7c0 <k_sched_lock+0xe4>)
   2f748:	f44f 7387 	mov.w	r3, #270	; 0x10e
   2f74c:	4a19      	ldr	r2, [pc, #100]	; (2f7b4 <k_sched_lock+0xd8>)
   2f74e:	4816      	ldr	r0, [pc, #88]	; (2f7a8 <k_sched_lock+0xcc>)
   2f750:	f003 fee1 	bl	33516 <printk>
   2f754:	4818      	ldr	r0, [pc, #96]	; (2f7b8 <k_sched_lock+0xdc>)
   2f756:	f003 fede 	bl	33516 <printk>
   2f75a:	f44f 7187 	mov.w	r1, #270	; 0x10e
   2f75e:	4815      	ldr	r0, [pc, #84]	; (2f7b4 <k_sched_lock+0xd8>)
   2f760:	f003 ff1f 	bl	335a2 <assert_post_action>
	--_current->base.sched_locked;
   2f764:	68a2      	ldr	r2, [r4, #8]
   2f766:	7bd3      	ldrb	r3, [r2, #15]
   2f768:	3b01      	subs	r3, #1
   2f76a:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2f76c:	480b      	ldr	r0, [pc, #44]	; (2f79c <k_sched_lock+0xc0>)
   2f76e:	f001 f917 	bl	309a0 <z_spin_unlock_valid>
   2f772:	b968      	cbnz	r0, 2f790 <k_sched_lock+0xb4>
   2f774:	235d      	movs	r3, #93	; 0x5d
   2f776:	4a0a      	ldr	r2, [pc, #40]	; (2f7a0 <k_sched_lock+0xc4>)
   2f778:	4912      	ldr	r1, [pc, #72]	; (2f7c4 <k_sched_lock+0xe8>)
   2f77a:	480b      	ldr	r0, [pc, #44]	; (2f7a8 <k_sched_lock+0xcc>)
   2f77c:	f003 fecb 	bl	33516 <printk>
   2f780:	4906      	ldr	r1, [pc, #24]	; (2f79c <k_sched_lock+0xc0>)
   2f782:	4811      	ldr	r0, [pc, #68]	; (2f7c8 <k_sched_lock+0xec>)
   2f784:	f003 fec7 	bl	33516 <printk>
   2f788:	215d      	movs	r1, #93	; 0x5d
   2f78a:	4805      	ldr	r0, [pc, #20]	; (2f7a0 <k_sched_lock+0xc4>)
   2f78c:	f003 ff09 	bl	335a2 <assert_post_action>
	__asm__ volatile(
   2f790:	f385 8811 	msr	BASEPRI, r5
   2f794:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   2f798:	bd38      	pop	{r3, r4, r5, pc}
   2f79a:	bf00      	nop
   2f79c:	20023f08 	.word	0x20023f08
   2f7a0:	000382ba 	.word	0x000382ba
   2f7a4:	000382e0 	.word	0x000382e0
   2f7a8:	00037a66 	.word	0x00037a66
   2f7ac:	000382f5 	.word	0x000382f5
   2f7b0:	0003aefe 	.word	0x0003aefe
   2f7b4:	0003aed3 	.word	0x0003aed3
   2f7b8:	00038d10 	.word	0x00038d10
   2f7bc:	20023ed0 	.word	0x20023ed0
   2f7c0:	0003af10 	.word	0x0003af10
   2f7c4:	0003830d 	.word	0x0003830d
   2f7c8:	00038324 	.word	0x00038324

0002f7cc <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   2f7cc:	4b11      	ldr	r3, [pc, #68]	; (2f814 <z_priq_dumb_remove+0x48>)
{
   2f7ce:	b510      	push	{r4, lr}
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   2f7d0:	f103 0228 	add.w	r2, r3, #40	; 0x28
   2f7d4:	4282      	cmp	r2, r0
{
   2f7d6:	460c      	mov	r4, r1
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   2f7d8:	d105      	bne.n	2f7e6 <z_priq_dumb_remove+0x1a>
   2f7da:	689b      	ldr	r3, [r3, #8]
   2f7dc:	428b      	cmp	r3, r1
   2f7de:	d102      	bne.n	2f7e6 <z_priq_dumb_remove+0x1a>
   2f7e0:	7b4b      	ldrb	r3, [r1, #13]
   2f7e2:	06db      	lsls	r3, r3, #27
   2f7e4:	d115      	bne.n	2f812 <z_priq_dumb_remove+0x46>
	    z_is_thread_prevented_from_running(thread)) {
		return;
	}
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2f7e6:	4b0c      	ldr	r3, [pc, #48]	; (2f818 <z_priq_dumb_remove+0x4c>)
   2f7e8:	429c      	cmp	r4, r3
   2f7ea:	d10b      	bne.n	2f804 <z_priq_dumb_remove+0x38>
   2f7ec:	490b      	ldr	r1, [pc, #44]	; (2f81c <z_priq_dumb_remove+0x50>)
   2f7ee:	480c      	ldr	r0, [pc, #48]	; (2f820 <z_priq_dumb_remove+0x54>)
   2f7f0:	f44f 7346 	mov.w	r3, #792	; 0x318
   2f7f4:	4a0b      	ldr	r2, [pc, #44]	; (2f824 <z_priq_dumb_remove+0x58>)
   2f7f6:	f003 fe8e 	bl	33516 <printk>
   2f7fa:	f44f 7146 	mov.w	r1, #792	; 0x318
   2f7fe:	4809      	ldr	r0, [pc, #36]	; (2f824 <z_priq_dumb_remove+0x58>)
   2f800:	f003 fecf 	bl	335a2 <assert_post_action>
	node->prev->next = node->next;
   2f804:	e9d4 3200 	ldrd	r3, r2, [r4]
   2f808:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   2f80a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2f80c:	2300      	movs	r3, #0
	node->prev = NULL;
   2f80e:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   2f812:	bd10      	pop	{r4, pc}
   2f814:	20023ed0 	.word	0x20023ed0
   2f818:	20022d2c 	.word	0x20022d2c
   2f81c:	0003af71 	.word	0x0003af71
   2f820:	00037a66 	.word	0x00037a66
   2f824:	0003af38 	.word	0x0003af38

0002f828 <z_unpend_thread>:
{
   2f828:	b538      	push	{r3, r4, r5, lr}
   2f82a:	4604      	mov	r4, r0
	__asm__ volatile(
   2f82c:	f04f 0320 	mov.w	r3, #32
   2f830:	f3ef 8511 	mrs	r5, BASEPRI
   2f834:	f383 8811 	msr	BASEPRI, r3
   2f838:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2f83c:	481e      	ldr	r0, [pc, #120]	; (2f8b8 <z_unpend_thread+0x90>)
   2f83e:	f001 f8a1 	bl	30984 <z_spin_lock_valid>
   2f842:	b968      	cbnz	r0, 2f860 <z_unpend_thread+0x38>
   2f844:	234a      	movs	r3, #74	; 0x4a
   2f846:	4a1d      	ldr	r2, [pc, #116]	; (2f8bc <z_unpend_thread+0x94>)
   2f848:	491d      	ldr	r1, [pc, #116]	; (2f8c0 <z_unpend_thread+0x98>)
   2f84a:	481e      	ldr	r0, [pc, #120]	; (2f8c4 <z_unpend_thread+0x9c>)
   2f84c:	f003 fe63 	bl	33516 <printk>
   2f850:	4919      	ldr	r1, [pc, #100]	; (2f8b8 <z_unpend_thread+0x90>)
   2f852:	481d      	ldr	r0, [pc, #116]	; (2f8c8 <z_unpend_thread+0xa0>)
   2f854:	f003 fe5f 	bl	33516 <printk>
   2f858:	214a      	movs	r1, #74	; 0x4a
   2f85a:	4818      	ldr	r0, [pc, #96]	; (2f8bc <z_unpend_thread+0x94>)
   2f85c:	f003 fea1 	bl	335a2 <assert_post_action>
	z_spin_lock_set_owner(l);
   2f860:	4815      	ldr	r0, [pc, #84]	; (2f8b8 <z_unpend_thread+0x90>)
   2f862:	f001 f8ad 	bl	309c0 <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   2f866:	f104 0008 	add.w	r0, r4, #8
   2f86a:	f7ff fe6d 	bl	2f548 <pended_on.isra.0>
   2f86e:	4621      	mov	r1, r4
   2f870:	f7ff ffac 	bl	2f7cc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2f874:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2f876:	4810      	ldr	r0, [pc, #64]	; (2f8b8 <z_unpend_thread+0x90>)
   2f878:	f023 0302 	bic.w	r3, r3, #2
   2f87c:	7363      	strb	r3, [r4, #13]
   2f87e:	f001 f88f 	bl	309a0 <z_spin_unlock_valid>
   2f882:	b968      	cbnz	r0, 2f8a0 <z_unpend_thread+0x78>
   2f884:	235d      	movs	r3, #93	; 0x5d
   2f886:	4a0d      	ldr	r2, [pc, #52]	; (2f8bc <z_unpend_thread+0x94>)
   2f888:	4910      	ldr	r1, [pc, #64]	; (2f8cc <z_unpend_thread+0xa4>)
   2f88a:	480e      	ldr	r0, [pc, #56]	; (2f8c4 <z_unpend_thread+0x9c>)
   2f88c:	f003 fe43 	bl	33516 <printk>
   2f890:	4909      	ldr	r1, [pc, #36]	; (2f8b8 <z_unpend_thread+0x90>)
   2f892:	480f      	ldr	r0, [pc, #60]	; (2f8d0 <z_unpend_thread+0xa8>)
   2f894:	f003 fe3f 	bl	33516 <printk>
   2f898:	215d      	movs	r1, #93	; 0x5d
   2f89a:	4808      	ldr	r0, [pc, #32]	; (2f8bc <z_unpend_thread+0x94>)
   2f89c:	f003 fe81 	bl	335a2 <assert_post_action>
	__asm__ volatile(
   2f8a0:	f385 8811 	msr	BASEPRI, r5
   2f8a4:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   2f8a8:	2300      	movs	r3, #0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   2f8aa:	f104 0018 	add.w	r0, r4, #24
   2f8ae:	60a3      	str	r3, [r4, #8]
}
   2f8b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2f8b4:	f001 bbd6 	b.w	31064 <z_abort_timeout>
   2f8b8:	20023f08 	.word	0x20023f08
   2f8bc:	000382ba 	.word	0x000382ba
   2f8c0:	000382e0 	.word	0x000382e0
   2f8c4:	00037a66 	.word	0x00037a66
   2f8c8:	000382f5 	.word	0x000382f5
   2f8cc:	0003830d 	.word	0x0003830d
   2f8d0:	00038324 	.word	0x00038324

0002f8d4 <update_cache>:
{
   2f8d4:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   2f8d6:	4c15      	ldr	r4, [pc, #84]	; (2f92c <update_cache+0x58>)
{
   2f8d8:	4602      	mov	r2, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   2f8da:	f104 0028 	add.w	r0, r4, #40	; 0x28
   2f8de:	f005 ffce 	bl	3587e <z_priq_dumb_best>
	return thread ? thread : _current_cpu->idle_thread;
   2f8e2:	4605      	mov	r5, r0
   2f8e4:	b900      	cbnz	r0, 2f8e8 <update_cache+0x14>
   2f8e6:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   2f8e8:	b9ca      	cbnz	r2, 2f91e <update_cache+0x4a>
	__ASSERT(_current != NULL, "");
   2f8ea:	68a3      	ldr	r3, [r4, #8]
   2f8ec:	b963      	cbnz	r3, 2f908 <update_cache+0x34>
   2f8ee:	4910      	ldr	r1, [pc, #64]	; (2f930 <update_cache+0x5c>)
   2f8f0:	237e      	movs	r3, #126	; 0x7e
   2f8f2:	4a10      	ldr	r2, [pc, #64]	; (2f934 <update_cache+0x60>)
   2f8f4:	4810      	ldr	r0, [pc, #64]	; (2f938 <update_cache+0x64>)
   2f8f6:	f003 fe0e 	bl	33516 <printk>
   2f8fa:	4810      	ldr	r0, [pc, #64]	; (2f93c <update_cache+0x68>)
   2f8fc:	f003 fe0b 	bl	33516 <printk>
   2f900:	217e      	movs	r1, #126	; 0x7e
   2f902:	480c      	ldr	r0, [pc, #48]	; (2f934 <update_cache+0x60>)
   2f904:	f003 fe4d 	bl	335a2 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   2f908:	68a3      	ldr	r3, [r4, #8]
   2f90a:	7b5a      	ldrb	r2, [r3, #13]
   2f90c:	06d2      	lsls	r2, r2, #27
   2f90e:	d106      	bne.n	2f91e <update_cache+0x4a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   2f910:	69aa      	ldr	r2, [r5, #24]
   2f912:	b922      	cbnz	r2, 2f91e <update_cache+0x4a>
	if (is_preempt(_current) || is_metairq(thread)) {
   2f914:	89da      	ldrh	r2, [r3, #14]
   2f916:	2a7f      	cmp	r2, #127	; 0x7f
   2f918:	d901      	bls.n	2f91e <update_cache+0x4a>
		_kernel.ready_q.cache = _current;
   2f91a:	6263      	str	r3, [r4, #36]	; 0x24
}
   2f91c:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   2f91e:	68a3      	ldr	r3, [r4, #8]
   2f920:	42ab      	cmp	r3, r5
   2f922:	d001      	beq.n	2f928 <update_cache+0x54>
			z_reset_time_slice();
   2f924:	f7ff fe28 	bl	2f578 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   2f928:	6265      	str	r5, [r4, #36]	; 0x24
}
   2f92a:	e7f7      	b.n	2f91c <update_cache+0x48>
   2f92c:	20023ed0 	.word	0x20023ed0
   2f930:	0003af92 	.word	0x0003af92
   2f934:	0003af38 	.word	0x0003af38
   2f938:	00037a66 	.word	0x00037a66
   2f93c:	00038d10 	.word	0x00038d10

0002f940 <k_sched_unlock>:
{
   2f940:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(_current->base.sched_locked != 0, "");
   2f942:	4c31      	ldr	r4, [pc, #196]	; (2fa08 <k_sched_unlock+0xc8>)
   2f944:	68a2      	ldr	r2, [r4, #8]
   2f946:	7bd2      	ldrb	r2, [r2, #15]
   2f948:	b972      	cbnz	r2, 2f968 <k_sched_unlock+0x28>
   2f94a:	4930      	ldr	r1, [pc, #192]	; (2fa0c <k_sched_unlock+0xcc>)
   2f94c:	f240 23ad 	movw	r3, #685	; 0x2ad
   2f950:	4a2f      	ldr	r2, [pc, #188]	; (2fa10 <k_sched_unlock+0xd0>)
   2f952:	4830      	ldr	r0, [pc, #192]	; (2fa14 <k_sched_unlock+0xd4>)
   2f954:	f003 fddf 	bl	33516 <printk>
   2f958:	482f      	ldr	r0, [pc, #188]	; (2fa18 <k_sched_unlock+0xd8>)
   2f95a:	f003 fddc 	bl	33516 <printk>
   2f95e:	f240 21ad 	movw	r1, #685	; 0x2ad
   2f962:	482b      	ldr	r0, [pc, #172]	; (2fa10 <k_sched_unlock+0xd0>)
   2f964:	f003 fe1d 	bl	335a2 <assert_post_action>
   2f968:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   2f96c:	b173      	cbz	r3, 2f98c <k_sched_unlock+0x4c>
   2f96e:	492b      	ldr	r1, [pc, #172]	; (2fa1c <k_sched_unlock+0xdc>)
   2f970:	f240 23ae 	movw	r3, #686	; 0x2ae
   2f974:	4a26      	ldr	r2, [pc, #152]	; (2fa10 <k_sched_unlock+0xd0>)
   2f976:	4827      	ldr	r0, [pc, #156]	; (2fa14 <k_sched_unlock+0xd4>)
   2f978:	f003 fdcd 	bl	33516 <printk>
   2f97c:	4826      	ldr	r0, [pc, #152]	; (2fa18 <k_sched_unlock+0xd8>)
   2f97e:	f003 fdca 	bl	33516 <printk>
   2f982:	f240 21ae 	movw	r1, #686	; 0x2ae
   2f986:	4822      	ldr	r0, [pc, #136]	; (2fa10 <k_sched_unlock+0xd0>)
   2f988:	f003 fe0b 	bl	335a2 <assert_post_action>
	__asm__ volatile(
   2f98c:	f04f 0320 	mov.w	r3, #32
   2f990:	f3ef 8511 	mrs	r5, BASEPRI
   2f994:	f383 8811 	msr	BASEPRI, r3
   2f998:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2f99c:	4820      	ldr	r0, [pc, #128]	; (2fa20 <k_sched_unlock+0xe0>)
   2f99e:	f000 fff1 	bl	30984 <z_spin_lock_valid>
   2f9a2:	b968      	cbnz	r0, 2f9c0 <k_sched_unlock+0x80>
   2f9a4:	234a      	movs	r3, #74	; 0x4a
   2f9a6:	4a1f      	ldr	r2, [pc, #124]	; (2fa24 <k_sched_unlock+0xe4>)
   2f9a8:	491f      	ldr	r1, [pc, #124]	; (2fa28 <k_sched_unlock+0xe8>)
   2f9aa:	481a      	ldr	r0, [pc, #104]	; (2fa14 <k_sched_unlock+0xd4>)
   2f9ac:	f003 fdb3 	bl	33516 <printk>
   2f9b0:	491b      	ldr	r1, [pc, #108]	; (2fa20 <k_sched_unlock+0xe0>)
   2f9b2:	481e      	ldr	r0, [pc, #120]	; (2fa2c <k_sched_unlock+0xec>)
   2f9b4:	f003 fdaf 	bl	33516 <printk>
   2f9b8:	214a      	movs	r1, #74	; 0x4a
   2f9ba:	481a      	ldr	r0, [pc, #104]	; (2fa24 <k_sched_unlock+0xe4>)
   2f9bc:	f003 fdf1 	bl	335a2 <assert_post_action>
	z_spin_lock_set_owner(l);
   2f9c0:	4817      	ldr	r0, [pc, #92]	; (2fa20 <k_sched_unlock+0xe0>)
   2f9c2:	f000 fffd 	bl	309c0 <z_spin_lock_set_owner>
		++_current->base.sched_locked;
   2f9c6:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
   2f9c8:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   2f9ca:	7bd3      	ldrb	r3, [r2, #15]
   2f9cc:	3301      	adds	r3, #1
   2f9ce:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   2f9d0:	f7ff ff80 	bl	2f8d4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2f9d4:	4812      	ldr	r0, [pc, #72]	; (2fa20 <k_sched_unlock+0xe0>)
   2f9d6:	f000 ffe3 	bl	309a0 <z_spin_unlock_valid>
   2f9da:	b968      	cbnz	r0, 2f9f8 <k_sched_unlock+0xb8>
   2f9dc:	235d      	movs	r3, #93	; 0x5d
   2f9de:	4a11      	ldr	r2, [pc, #68]	; (2fa24 <k_sched_unlock+0xe4>)
   2f9e0:	4913      	ldr	r1, [pc, #76]	; (2fa30 <k_sched_unlock+0xf0>)
   2f9e2:	480c      	ldr	r0, [pc, #48]	; (2fa14 <k_sched_unlock+0xd4>)
   2f9e4:	f003 fd97 	bl	33516 <printk>
   2f9e8:	490d      	ldr	r1, [pc, #52]	; (2fa20 <k_sched_unlock+0xe0>)
   2f9ea:	4812      	ldr	r0, [pc, #72]	; (2fa34 <k_sched_unlock+0xf4>)
   2f9ec:	f003 fd93 	bl	33516 <printk>
   2f9f0:	215d      	movs	r1, #93	; 0x5d
   2f9f2:	480c      	ldr	r0, [pc, #48]	; (2fa24 <k_sched_unlock+0xe4>)
   2f9f4:	f003 fdd5 	bl	335a2 <assert_post_action>
	__asm__ volatile(
   2f9f8:	f385 8811 	msr	BASEPRI, r5
   2f9fc:	f3bf 8f6f 	isb	sy
}
   2fa00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   2fa04:	f005 bf31 	b.w	3586a <z_reschedule_unlocked>
   2fa08:	20023ed0 	.word	0x20023ed0
   2fa0c:	0003afb1 	.word	0x0003afb1
   2fa10:	0003af38 	.word	0x0003af38
   2fa14:	00037a66 	.word	0x00037a66
   2fa18:	00038d10 	.word	0x00038d10
   2fa1c:	0003aefe 	.word	0x0003aefe
   2fa20:	20023f08 	.word	0x20023f08
   2fa24:	000382ba 	.word	0x000382ba
   2fa28:	000382e0 	.word	0x000382e0
   2fa2c:	000382f5 	.word	0x000382f5
   2fa30:	0003830d 	.word	0x0003830d
   2fa34:	00038324 	.word	0x00038324

0002fa38 <z_add_thread_to_ready_q>:
{
   2fa38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2fa3a:	4604      	mov	r4, r0
	__asm__ volatile(
   2fa3c:	f04f 0320 	mov.w	r3, #32
   2fa40:	f3ef 8511 	mrs	r5, BASEPRI
   2fa44:	f383 8811 	msr	BASEPRI, r3
   2fa48:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2fa4c:	4831      	ldr	r0, [pc, #196]	; (2fb14 <z_add_thread_to_ready_q+0xdc>)
   2fa4e:	f000 ff99 	bl	30984 <z_spin_lock_valid>
   2fa52:	b968      	cbnz	r0, 2fa70 <z_add_thread_to_ready_q+0x38>
   2fa54:	234a      	movs	r3, #74	; 0x4a
   2fa56:	4a30      	ldr	r2, [pc, #192]	; (2fb18 <z_add_thread_to_ready_q+0xe0>)
   2fa58:	4930      	ldr	r1, [pc, #192]	; (2fb1c <z_add_thread_to_ready_q+0xe4>)
   2fa5a:	4831      	ldr	r0, [pc, #196]	; (2fb20 <z_add_thread_to_ready_q+0xe8>)
   2fa5c:	f003 fd5b 	bl	33516 <printk>
   2fa60:	492c      	ldr	r1, [pc, #176]	; (2fb14 <z_add_thread_to_ready_q+0xdc>)
   2fa62:	4830      	ldr	r0, [pc, #192]	; (2fb24 <z_add_thread_to_ready_q+0xec>)
   2fa64:	f003 fd57 	bl	33516 <printk>
   2fa68:	214a      	movs	r1, #74	; 0x4a
   2fa6a:	482b      	ldr	r0, [pc, #172]	; (2fb18 <z_add_thread_to_ready_q+0xe0>)
   2fa6c:	f003 fd99 	bl	335a2 <assert_post_action>
	z_spin_lock_set_owner(l);
   2fa70:	4828      	ldr	r0, [pc, #160]	; (2fb14 <z_add_thread_to_ready_q+0xdc>)
   2fa72:	f000 ffa5 	bl	309c0 <z_spin_lock_set_owner>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2fa76:	4b2c      	ldr	r3, [pc, #176]	; (2fb28 <z_add_thread_to_ready_q+0xf0>)
   2fa78:	429c      	cmp	r4, r3
   2fa7a:	d10b      	bne.n	2fa94 <z_add_thread_to_ready_q+0x5c>
   2fa7c:	492b      	ldr	r1, [pc, #172]	; (2fb2c <z_add_thread_to_ready_q+0xf4>)
   2fa7e:	4828      	ldr	r0, [pc, #160]	; (2fb20 <z_add_thread_to_ready_q+0xe8>)
   2fa80:	f240 3302 	movw	r3, #770	; 0x302
   2fa84:	4a2a      	ldr	r2, [pc, #168]	; (2fb30 <z_add_thread_to_ready_q+0xf8>)
   2fa86:	f003 fd46 	bl	33516 <printk>
   2fa8a:	f240 3102 	movw	r1, #770	; 0x302
   2fa8e:	4828      	ldr	r0, [pc, #160]	; (2fb30 <z_add_thread_to_ready_q+0xf8>)
   2fa90:	f003 fd87 	bl	335a2 <assert_post_action>
	return list->head == list;
   2fa94:	4a27      	ldr	r2, [pc, #156]	; (2fb34 <z_add_thread_to_ready_q+0xfc>)
   2fa96:	4611      	mov	r1, r2
   2fa98:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2fa9c:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2fa9e:	428b      	cmp	r3, r1
   2faa0:	bf08      	it	eq
   2faa2:	2300      	moveq	r3, #0
   2faa4:	2b00      	cmp	r3, #0
   2faa6:	bf38      	it	cc
   2faa8:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2faaa:	b363      	cbz	r3, 2fb06 <z_add_thread_to_ready_q+0xce>
	if (thread_1->base.prio < thread_2->base.prio) {
   2faac:	f994 700e 	ldrsb.w	r7, [r4, #14]
   2fab0:	f993 600e 	ldrsb.w	r6, [r3, #14]
   2fab4:	42b7      	cmp	r7, r6
   2fab6:	db03      	blt.n	2fac0 <z_add_thread_to_ready_q+0x88>
	return (node == list->tail) ? NULL : node->next;
   2fab8:	4283      	cmp	r3, r0
   2faba:	d024      	beq.n	2fb06 <z_add_thread_to_ready_q+0xce>
   2fabc:	681b      	ldr	r3, [r3, #0]
   2fabe:	e7f4      	b.n	2faaa <z_add_thread_to_ready_q+0x72>
	node->prev = successor->prev;
   2fac0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2fac2:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   2fac6:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2fac8:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   2faca:	7b63      	ldrb	r3, [r4, #13]
		update_cache(0);
   2facc:	2000      	movs	r0, #0
   2face:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2fad2:	7363      	strb	r3, [r4, #13]
   2fad4:	f7ff fefe 	bl	2f8d4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2fad8:	480e      	ldr	r0, [pc, #56]	; (2fb14 <z_add_thread_to_ready_q+0xdc>)
   2fada:	f000 ff61 	bl	309a0 <z_spin_unlock_valid>
   2fade:	b968      	cbnz	r0, 2fafc <z_add_thread_to_ready_q+0xc4>
   2fae0:	235d      	movs	r3, #93	; 0x5d
   2fae2:	4a0d      	ldr	r2, [pc, #52]	; (2fb18 <z_add_thread_to_ready_q+0xe0>)
   2fae4:	4914      	ldr	r1, [pc, #80]	; (2fb38 <z_add_thread_to_ready_q+0x100>)
   2fae6:	480e      	ldr	r0, [pc, #56]	; (2fb20 <z_add_thread_to_ready_q+0xe8>)
   2fae8:	f003 fd15 	bl	33516 <printk>
   2faec:	4909      	ldr	r1, [pc, #36]	; (2fb14 <z_add_thread_to_ready_q+0xdc>)
   2faee:	4813      	ldr	r0, [pc, #76]	; (2fb3c <z_add_thread_to_ready_q+0x104>)
   2faf0:	f003 fd11 	bl	33516 <printk>
   2faf4:	215d      	movs	r1, #93	; 0x5d
   2faf6:	4808      	ldr	r0, [pc, #32]	; (2fb18 <z_add_thread_to_ready_q+0xe0>)
   2faf8:	f003 fd53 	bl	335a2 <assert_post_action>
	__asm__ volatile(
   2fafc:	f385 8811 	msr	BASEPRI, r5
   2fb00:	f3bf 8f6f 	isb	sy
}
   2fb04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	node->prev = list->tail;
   2fb06:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   2fb0a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   2fb0c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2fb0e:	62d4      	str	r4, [r2, #44]	; 0x2c
}
   2fb10:	e7db      	b.n	2faca <z_add_thread_to_ready_q+0x92>
   2fb12:	bf00      	nop
   2fb14:	20023f08 	.word	0x20023f08
   2fb18:	000382ba 	.word	0x000382ba
   2fb1c:	000382e0 	.word	0x000382e0
   2fb20:	00037a66 	.word	0x00037a66
   2fb24:	000382f5 	.word	0x000382f5
   2fb28:	20022d2c 	.word	0x20022d2c
   2fb2c:	0003af71 	.word	0x0003af71
   2fb30:	0003af38 	.word	0x0003af38
   2fb34:	20023ed0 	.word	0x20023ed0
   2fb38:	0003830d 	.word	0x0003830d
   2fb3c:	00038324 	.word	0x00038324

0002fb40 <z_thread_timeout>:
	if (thread->base.pended_on != NULL) {
   2fb40:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   2fb44:	b570      	push	{r4, r5, r6, lr}
   2fb46:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   2fb48:	f1a0 0518 	sub.w	r5, r0, #24
	if (thread->base.pended_on != NULL) {
   2fb4c:	2b00      	cmp	r3, #0
   2fb4e:	d042      	beq.n	2fbd6 <z_thread_timeout+0x96>
	__asm__ volatile(
   2fb50:	f04f 0320 	mov.w	r3, #32
   2fb54:	f3ef 8611 	mrs	r6, BASEPRI
   2fb58:	f383 8811 	msr	BASEPRI, r3
   2fb5c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2fb60:	4825      	ldr	r0, [pc, #148]	; (2fbf8 <z_thread_timeout+0xb8>)
   2fb62:	f000 ff0f 	bl	30984 <z_spin_lock_valid>
   2fb66:	b968      	cbnz	r0, 2fb84 <z_thread_timeout+0x44>
   2fb68:	234a      	movs	r3, #74	; 0x4a
   2fb6a:	4a24      	ldr	r2, [pc, #144]	; (2fbfc <z_thread_timeout+0xbc>)
   2fb6c:	4924      	ldr	r1, [pc, #144]	; (2fc00 <z_thread_timeout+0xc0>)
   2fb6e:	4825      	ldr	r0, [pc, #148]	; (2fc04 <z_thread_timeout+0xc4>)
   2fb70:	f003 fcd1 	bl	33516 <printk>
   2fb74:	4920      	ldr	r1, [pc, #128]	; (2fbf8 <z_thread_timeout+0xb8>)
   2fb76:	4824      	ldr	r0, [pc, #144]	; (2fc08 <z_thread_timeout+0xc8>)
   2fb78:	f003 fccd 	bl	33516 <printk>
   2fb7c:	214a      	movs	r1, #74	; 0x4a
   2fb7e:	481f      	ldr	r0, [pc, #124]	; (2fbfc <z_thread_timeout+0xbc>)
   2fb80:	f003 fd0f 	bl	335a2 <assert_post_action>
	z_spin_lock_set_owner(l);
   2fb84:	481c      	ldr	r0, [pc, #112]	; (2fbf8 <z_thread_timeout+0xb8>)
   2fb86:	f000 ff1b 	bl	309c0 <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   2fb8a:	f1a4 0010 	sub.w	r0, r4, #16
   2fb8e:	f7ff fcdb 	bl	2f548 <pended_on.isra.0>
   2fb92:	4629      	mov	r1, r5
   2fb94:	f7ff fe1a 	bl	2f7cc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2fb98:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2fb9c:	4816      	ldr	r0, [pc, #88]	; (2fbf8 <z_thread_timeout+0xb8>)
   2fb9e:	f023 0302 	bic.w	r3, r3, #2
   2fba2:	f804 3c0b 	strb.w	r3, [r4, #-11]
   2fba6:	f000 fefb 	bl	309a0 <z_spin_unlock_valid>
   2fbaa:	b968      	cbnz	r0, 2fbc8 <z_thread_timeout+0x88>
   2fbac:	235d      	movs	r3, #93	; 0x5d
   2fbae:	4a13      	ldr	r2, [pc, #76]	; (2fbfc <z_thread_timeout+0xbc>)
   2fbb0:	4916      	ldr	r1, [pc, #88]	; (2fc0c <z_thread_timeout+0xcc>)
   2fbb2:	4814      	ldr	r0, [pc, #80]	; (2fc04 <z_thread_timeout+0xc4>)
   2fbb4:	f003 fcaf 	bl	33516 <printk>
   2fbb8:	490f      	ldr	r1, [pc, #60]	; (2fbf8 <z_thread_timeout+0xb8>)
   2fbba:	4815      	ldr	r0, [pc, #84]	; (2fc10 <z_thread_timeout+0xd0>)
   2fbbc:	f003 fcab 	bl	33516 <printk>
   2fbc0:	215d      	movs	r1, #93	; 0x5d
   2fbc2:	480e      	ldr	r0, [pc, #56]	; (2fbfc <z_thread_timeout+0xbc>)
   2fbc4:	f003 fced 	bl	335a2 <assert_post_action>
	__asm__ volatile(
   2fbc8:	f386 8811 	msr	BASEPRI, r6
   2fbcc:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   2fbd0:	2300      	movs	r3, #0
   2fbd2:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2fbd6:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   2fbda:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2fbdc:	f023 0314 	bic.w	r3, r3, #20
   2fbe0:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
   2fbe4:	f005 fe23 	bl	3582e <z_is_thread_ready>
   2fbe8:	b120      	cbz	r0, 2fbf4 <z_thread_timeout+0xb4>
		z_add_thread_to_ready_q(thread);
   2fbea:	4628      	mov	r0, r5
}
   2fbec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2fbf0:	f7ff bf22 	b.w	2fa38 <z_add_thread_to_ready_q>
   2fbf4:	bd70      	pop	{r4, r5, r6, pc}
   2fbf6:	bf00      	nop
   2fbf8:	20023f08 	.word	0x20023f08
   2fbfc:	000382ba 	.word	0x000382ba
   2fc00:	000382e0 	.word	0x000382e0
   2fc04:	00037a66 	.word	0x00037a66
   2fc08:	000382f5 	.word	0x000382f5
   2fc0c:	0003830d 	.word	0x0003830d
   2fc10:	00038324 	.word	0x00038324

0002fc14 <z_move_thread_to_end_of_prio_q>:
{
   2fc14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2fc16:	4604      	mov	r4, r0
	__asm__ volatile(
   2fc18:	f04f 0320 	mov.w	r3, #32
   2fc1c:	f3ef 8511 	mrs	r5, BASEPRI
   2fc20:	f383 8811 	msr	BASEPRI, r3
   2fc24:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2fc28:	4837      	ldr	r0, [pc, #220]	; (2fd08 <z_move_thread_to_end_of_prio_q+0xf4>)
   2fc2a:	f000 feab 	bl	30984 <z_spin_lock_valid>
   2fc2e:	b968      	cbnz	r0, 2fc4c <z_move_thread_to_end_of_prio_q+0x38>
   2fc30:	234a      	movs	r3, #74	; 0x4a
   2fc32:	4a36      	ldr	r2, [pc, #216]	; (2fd0c <z_move_thread_to_end_of_prio_q+0xf8>)
   2fc34:	4936      	ldr	r1, [pc, #216]	; (2fd10 <z_move_thread_to_end_of_prio_q+0xfc>)
   2fc36:	4837      	ldr	r0, [pc, #220]	; (2fd14 <z_move_thread_to_end_of_prio_q+0x100>)
   2fc38:	f003 fc6d 	bl	33516 <printk>
   2fc3c:	4932      	ldr	r1, [pc, #200]	; (2fd08 <z_move_thread_to_end_of_prio_q+0xf4>)
   2fc3e:	4836      	ldr	r0, [pc, #216]	; (2fd18 <z_move_thread_to_end_of_prio_q+0x104>)
   2fc40:	f003 fc69 	bl	33516 <printk>
   2fc44:	214a      	movs	r1, #74	; 0x4a
   2fc46:	4831      	ldr	r0, [pc, #196]	; (2fd0c <z_move_thread_to_end_of_prio_q+0xf8>)
   2fc48:	f003 fcab 	bl	335a2 <assert_post_action>
	z_spin_lock_set_owner(l);
   2fc4c:	482e      	ldr	r0, [pc, #184]	; (2fd08 <z_move_thread_to_end_of_prio_q+0xf4>)
   2fc4e:	f000 feb7 	bl	309c0 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   2fc52:	f994 300d 	ldrsb.w	r3, [r4, #13]
   2fc56:	2b00      	cmp	r3, #0
   2fc58:	da03      	bge.n	2fc62 <z_move_thread_to_end_of_prio_q+0x4e>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   2fc5a:	4621      	mov	r1, r4
   2fc5c:	482f      	ldr	r0, [pc, #188]	; (2fd1c <z_move_thread_to_end_of_prio_q+0x108>)
   2fc5e:	f7ff fdb5 	bl	2f7cc <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2fc62:	4b2f      	ldr	r3, [pc, #188]	; (2fd20 <z_move_thread_to_end_of_prio_q+0x10c>)
   2fc64:	429c      	cmp	r4, r3
   2fc66:	d10b      	bne.n	2fc80 <z_move_thread_to_end_of_prio_q+0x6c>
   2fc68:	492e      	ldr	r1, [pc, #184]	; (2fd24 <z_move_thread_to_end_of_prio_q+0x110>)
   2fc6a:	482a      	ldr	r0, [pc, #168]	; (2fd14 <z_move_thread_to_end_of_prio_q+0x100>)
   2fc6c:	f240 3302 	movw	r3, #770	; 0x302
   2fc70:	4a2d      	ldr	r2, [pc, #180]	; (2fd28 <z_move_thread_to_end_of_prio_q+0x114>)
   2fc72:	f003 fc50 	bl	33516 <printk>
   2fc76:	f240 3102 	movw	r1, #770	; 0x302
   2fc7a:	482b      	ldr	r0, [pc, #172]	; (2fd28 <z_move_thread_to_end_of_prio_q+0x114>)
   2fc7c:	f003 fc91 	bl	335a2 <assert_post_action>
	return list->head == list;
   2fc80:	4a2a      	ldr	r2, [pc, #168]	; (2fd2c <z_move_thread_to_end_of_prio_q+0x118>)
   2fc82:	4611      	mov	r1, r2
   2fc84:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2fc88:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2fc8a:	428b      	cmp	r3, r1
   2fc8c:	bf08      	it	eq
   2fc8e:	2300      	moveq	r3, #0
   2fc90:	2b00      	cmp	r3, #0
   2fc92:	bf38      	it	cc
   2fc94:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2fc96:	2b00      	cmp	r3, #0
   2fc98:	d02f      	beq.n	2fcfa <z_move_thread_to_end_of_prio_q+0xe6>
	if (thread_1->base.prio < thread_2->base.prio) {
   2fc9a:	f994 700e 	ldrsb.w	r7, [r4, #14]
   2fc9e:	f993 600e 	ldrsb.w	r6, [r3, #14]
   2fca2:	42b7      	cmp	r7, r6
   2fca4:	db03      	blt.n	2fcae <z_move_thread_to_end_of_prio_q+0x9a>
	return (node == list->tail) ? NULL : node->next;
   2fca6:	4283      	cmp	r3, r0
   2fca8:	d027      	beq.n	2fcfa <z_move_thread_to_end_of_prio_q+0xe6>
   2fcaa:	681b      	ldr	r3, [r3, #0]
   2fcac:	e7f3      	b.n	2fc96 <z_move_thread_to_end_of_prio_q+0x82>
	node->prev = successor->prev;
   2fcae:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   2fcb0:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   2fcb4:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   2fcb6:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   2fcb8:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
   2fcba:	6890      	ldr	r0, [r2, #8]
   2fcbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2fcc0:	7363      	strb	r3, [r4, #13]
   2fcc2:	1b03      	subs	r3, r0, r4
   2fcc4:	4258      	negs	r0, r3
   2fcc6:	4158      	adcs	r0, r3
   2fcc8:	f7ff fe04 	bl	2f8d4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2fccc:	480e      	ldr	r0, [pc, #56]	; (2fd08 <z_move_thread_to_end_of_prio_q+0xf4>)
   2fcce:	f000 fe67 	bl	309a0 <z_spin_unlock_valid>
   2fcd2:	b968      	cbnz	r0, 2fcf0 <z_move_thread_to_end_of_prio_q+0xdc>
   2fcd4:	235d      	movs	r3, #93	; 0x5d
   2fcd6:	4a0d      	ldr	r2, [pc, #52]	; (2fd0c <z_move_thread_to_end_of_prio_q+0xf8>)
   2fcd8:	4915      	ldr	r1, [pc, #84]	; (2fd30 <z_move_thread_to_end_of_prio_q+0x11c>)
   2fcda:	480e      	ldr	r0, [pc, #56]	; (2fd14 <z_move_thread_to_end_of_prio_q+0x100>)
   2fcdc:	f003 fc1b 	bl	33516 <printk>
   2fce0:	4909      	ldr	r1, [pc, #36]	; (2fd08 <z_move_thread_to_end_of_prio_q+0xf4>)
   2fce2:	4814      	ldr	r0, [pc, #80]	; (2fd34 <z_move_thread_to_end_of_prio_q+0x120>)
   2fce4:	f003 fc17 	bl	33516 <printk>
   2fce8:	215d      	movs	r1, #93	; 0x5d
   2fcea:	4808      	ldr	r0, [pc, #32]	; (2fd0c <z_move_thread_to_end_of_prio_q+0xf8>)
   2fcec:	f003 fc59 	bl	335a2 <assert_post_action>
	__asm__ volatile(
   2fcf0:	f385 8811 	msr	BASEPRI, r5
   2fcf4:	f3bf 8f6f 	isb	sy
}
   2fcf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	node->prev = list->tail;
   2fcfa:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   2fcfe:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   2fd00:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2fd02:	62d4      	str	r4, [r2, #44]	; 0x2c
}
   2fd04:	e7d8      	b.n	2fcb8 <z_move_thread_to_end_of_prio_q+0xa4>
   2fd06:	bf00      	nop
   2fd08:	20023f08 	.word	0x20023f08
   2fd0c:	000382ba 	.word	0x000382ba
   2fd10:	000382e0 	.word	0x000382e0
   2fd14:	00037a66 	.word	0x00037a66
   2fd18:	000382f5 	.word	0x000382f5
   2fd1c:	20023ef8 	.word	0x20023ef8
   2fd20:	20022d2c 	.word	0x20022d2c
   2fd24:	0003af71 	.word	0x0003af71
   2fd28:	0003af38 	.word	0x0003af38
   2fd2c:	20023ed0 	.word	0x20023ed0
   2fd30:	0003830d 	.word	0x0003830d
   2fd34:	00038324 	.word	0x00038324

0002fd38 <z_time_slice>:
{
   2fd38:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
   2fd3a:	4a15      	ldr	r2, [pc, #84]	; (2fd90 <z_time_slice+0x58>)
   2fd3c:	4b15      	ldr	r3, [pc, #84]	; (2fd94 <z_time_slice+0x5c>)
   2fd3e:	6814      	ldr	r4, [r2, #0]
{
   2fd40:	4601      	mov	r1, r0
	if (pending_current == _current) {
   2fd42:	6898      	ldr	r0, [r3, #8]
   2fd44:	42a0      	cmp	r0, r4
   2fd46:	461c      	mov	r4, r3
   2fd48:	d103      	bne.n	2fd52 <z_time_slice+0x1a>
}
   2fd4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
   2fd4e:	f7ff bc13 	b.w	2f578 <z_reset_time_slice>
	pending_current = NULL;
   2fd52:	2500      	movs	r5, #0
   2fd54:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
   2fd56:	4a10      	ldr	r2, [pc, #64]	; (2fd98 <z_time_slice+0x60>)
   2fd58:	6812      	ldr	r2, [r2, #0]
   2fd5a:	b1b2      	cbz	r2, 2fd8a <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   2fd5c:	89c2      	ldrh	r2, [r0, #14]
   2fd5e:	2a7f      	cmp	r2, #127	; 0x7f
   2fd60:	d813      	bhi.n	2fd8a <z_time_slice+0x52>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   2fd62:	4a0e      	ldr	r2, [pc, #56]	; (2fd9c <z_time_slice+0x64>)
   2fd64:	f990 500e 	ldrsb.w	r5, [r0, #14]
   2fd68:	6812      	ldr	r2, [r2, #0]
   2fd6a:	4295      	cmp	r5, r2
   2fd6c:	db0d      	blt.n	2fd8a <z_time_slice+0x52>
		&& !z_is_idle_thread_object(thread)
   2fd6e:	4a0c      	ldr	r2, [pc, #48]	; (2fda0 <z_time_slice+0x68>)
   2fd70:	4290      	cmp	r0, r2
   2fd72:	d00a      	beq.n	2fd8a <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   2fd74:	6982      	ldr	r2, [r0, #24]
   2fd76:	b942      	cbnz	r2, 2fd8a <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
   2fd78:	691a      	ldr	r2, [r3, #16]
   2fd7a:	428a      	cmp	r2, r1
   2fd7c:	dc02      	bgt.n	2fd84 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
   2fd7e:	f7ff ff49 	bl	2fc14 <z_move_thread_to_end_of_prio_q>
   2fd82:	e7e2      	b.n	2fd4a <z_time_slice+0x12>
			_current_cpu->slice_ticks -= ticks;
   2fd84:	1a52      	subs	r2, r2, r1
   2fd86:	611a      	str	r2, [r3, #16]
}
   2fd88:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
   2fd8a:	2300      	movs	r3, #0
   2fd8c:	6123      	str	r3, [r4, #16]
   2fd8e:	e7fb      	b.n	2fd88 <z_time_slice+0x50>
   2fd90:	20023f04 	.word	0x20023f04
   2fd94:	20023ed0 	.word	0x20023ed0
   2fd98:	20023f10 	.word	0x20023f10
   2fd9c:	20023f0c 	.word	0x20023f0c
   2fda0:	20022d2c 	.word	0x20022d2c

0002fda4 <z_thread_single_suspend>:
{
   2fda4:	b570      	push	{r4, r5, r6, lr}
   2fda6:	4604      	mov	r4, r0
   2fda8:	3018      	adds	r0, #24
   2fdaa:	f001 f95b 	bl	31064 <z_abort_timeout>
	__asm__ volatile(
   2fdae:	f04f 0320 	mov.w	r3, #32
   2fdb2:	f3ef 8611 	mrs	r6, BASEPRI
   2fdb6:	f383 8811 	msr	BASEPRI, r3
   2fdba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2fdbe:	4825      	ldr	r0, [pc, #148]	; (2fe54 <z_thread_single_suspend+0xb0>)
   2fdc0:	f000 fde0 	bl	30984 <z_spin_lock_valid>
   2fdc4:	b968      	cbnz	r0, 2fde2 <z_thread_single_suspend+0x3e>
   2fdc6:	234a      	movs	r3, #74	; 0x4a
   2fdc8:	4a23      	ldr	r2, [pc, #140]	; (2fe58 <z_thread_single_suspend+0xb4>)
   2fdca:	4924      	ldr	r1, [pc, #144]	; (2fe5c <z_thread_single_suspend+0xb8>)
   2fdcc:	4824      	ldr	r0, [pc, #144]	; (2fe60 <z_thread_single_suspend+0xbc>)
   2fdce:	f003 fba2 	bl	33516 <printk>
   2fdd2:	4920      	ldr	r1, [pc, #128]	; (2fe54 <z_thread_single_suspend+0xb0>)
   2fdd4:	4823      	ldr	r0, [pc, #140]	; (2fe64 <z_thread_single_suspend+0xc0>)
   2fdd6:	f003 fb9e 	bl	33516 <printk>
   2fdda:	214a      	movs	r1, #74	; 0x4a
   2fddc:	481e      	ldr	r0, [pc, #120]	; (2fe58 <z_thread_single_suspend+0xb4>)
   2fdde:	f003 fbe0 	bl	335a2 <assert_post_action>
	z_spin_lock_set_owner(l);
   2fde2:	481c      	ldr	r0, [pc, #112]	; (2fe54 <z_thread_single_suspend+0xb0>)
   2fde4:	f000 fdec 	bl	309c0 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   2fde8:	f994 300d 	ldrsb.w	r3, [r4, #13]
   2fdec:	2b00      	cmp	r3, #0
   2fdee:	da07      	bge.n	2fe00 <z_thread_single_suspend+0x5c>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   2fdf0:	4621      	mov	r1, r4
   2fdf2:	481d      	ldr	r0, [pc, #116]	; (2fe68 <z_thread_single_suspend+0xc4>)
   2fdf4:	f7ff fcea 	bl	2f7cc <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   2fdf8:	7b63      	ldrb	r3, [r4, #13]
   2fdfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2fdfe:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   2fe00:	4d1a      	ldr	r5, [pc, #104]	; (2fe6c <z_thread_single_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2fe02:	7b63      	ldrb	r3, [r4, #13]
   2fe04:	68a8      	ldr	r0, [r5, #8]
   2fe06:	f043 0310 	orr.w	r3, r3, #16
   2fe0a:	7363      	strb	r3, [r4, #13]
   2fe0c:	1b03      	subs	r3, r0, r4
   2fe0e:	4258      	negs	r0, r3
   2fe10:	4158      	adcs	r0, r3
   2fe12:	f7ff fd5f 	bl	2f8d4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2fe16:	480f      	ldr	r0, [pc, #60]	; (2fe54 <z_thread_single_suspend+0xb0>)
   2fe18:	f000 fdc2 	bl	309a0 <z_spin_unlock_valid>
   2fe1c:	b968      	cbnz	r0, 2fe3a <z_thread_single_suspend+0x96>
   2fe1e:	235d      	movs	r3, #93	; 0x5d
   2fe20:	4a0d      	ldr	r2, [pc, #52]	; (2fe58 <z_thread_single_suspend+0xb4>)
   2fe22:	4913      	ldr	r1, [pc, #76]	; (2fe70 <z_thread_single_suspend+0xcc>)
   2fe24:	480e      	ldr	r0, [pc, #56]	; (2fe60 <z_thread_single_suspend+0xbc>)
   2fe26:	f003 fb76 	bl	33516 <printk>
   2fe2a:	490a      	ldr	r1, [pc, #40]	; (2fe54 <z_thread_single_suspend+0xb0>)
   2fe2c:	4811      	ldr	r0, [pc, #68]	; (2fe74 <z_thread_single_suspend+0xd0>)
   2fe2e:	f003 fb72 	bl	33516 <printk>
   2fe32:	215d      	movs	r1, #93	; 0x5d
   2fe34:	4808      	ldr	r0, [pc, #32]	; (2fe58 <z_thread_single_suspend+0xb4>)
   2fe36:	f003 fbb4 	bl	335a2 <assert_post_action>
	__asm__ volatile(
   2fe3a:	f386 8811 	msr	BASEPRI, r6
   2fe3e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   2fe42:	68ab      	ldr	r3, [r5, #8]
   2fe44:	42a3      	cmp	r3, r4
   2fe46:	d103      	bne.n	2fe50 <z_thread_single_suspend+0xac>
}
   2fe48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   2fe4c:	f005 bd0d 	b.w	3586a <z_reschedule_unlocked>
}
   2fe50:	bd70      	pop	{r4, r5, r6, pc}
   2fe52:	bf00      	nop
   2fe54:	20023f08 	.word	0x20023f08
   2fe58:	000382ba 	.word	0x000382ba
   2fe5c:	000382e0 	.word	0x000382e0
   2fe60:	00037a66 	.word	0x00037a66
   2fe64:	000382f5 	.word	0x000382f5
   2fe68:	20023ef8 	.word	0x20023ef8
   2fe6c:	20023ed0 	.word	0x20023ed0
   2fe70:	0003830d 	.word	0x0003830d
   2fe74:	00038324 	.word	0x00038324

0002fe78 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   2fe78:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   2fe7a:	b570      	push	{r4, r5, r6, lr}
   2fe7c:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   2fe7e:	b103      	cbz	r3, 2fe82 <z_thread_single_abort+0xa>
		thread->fn_abort();
   2fe80:	4798      	blx	r3
   2fe82:	f104 0018 	add.w	r0, r4, #24
   2fe86:	f001 f8ed 	bl	31064 <z_abort_timeout>
	__asm__ volatile(
   2fe8a:	f04f 0320 	mov.w	r3, #32
   2fe8e:	f3ef 8611 	mrs	r6, BASEPRI
   2fe92:	f383 8811 	msr	BASEPRI, r3
   2fe96:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2fe9a:	482c      	ldr	r0, [pc, #176]	; (2ff4c <z_thread_single_abort+0xd4>)
   2fe9c:	f000 fd72 	bl	30984 <z_spin_lock_valid>
   2fea0:	b968      	cbnz	r0, 2febe <z_thread_single_abort+0x46>
   2fea2:	234a      	movs	r3, #74	; 0x4a
   2fea4:	4a2a      	ldr	r2, [pc, #168]	; (2ff50 <z_thread_single_abort+0xd8>)
   2fea6:	492b      	ldr	r1, [pc, #172]	; (2ff54 <z_thread_single_abort+0xdc>)
   2fea8:	482b      	ldr	r0, [pc, #172]	; (2ff58 <z_thread_single_abort+0xe0>)
   2feaa:	f003 fb34 	bl	33516 <printk>
   2feae:	4927      	ldr	r1, [pc, #156]	; (2ff4c <z_thread_single_abort+0xd4>)
   2feb0:	482a      	ldr	r0, [pc, #168]	; (2ff5c <z_thread_single_abort+0xe4>)
   2feb2:	f003 fb30 	bl	33516 <printk>
   2feb6:	214a      	movs	r1, #74	; 0x4a
   2feb8:	4825      	ldr	r0, [pc, #148]	; (2ff50 <z_thread_single_abort+0xd8>)
   2feba:	f003 fb72 	bl	335a2 <assert_post_action>
	z_spin_lock_set_owner(l);
   2febe:	4823      	ldr	r0, [pc, #140]	; (2ff4c <z_thread_single_abort+0xd4>)
   2fec0:	f000 fd7e 	bl	309c0 <z_spin_lock_set_owner>
		if (z_is_thread_ready(thread)) {
   2fec4:	4620      	mov	r0, r4
   2fec6:	f005 fcb2 	bl	3582e <z_is_thread_ready>
   2feca:	4605      	mov	r5, r0
   2fecc:	b368      	cbz	r0, 2ff2a <z_thread_single_abort+0xb2>
			if (z_is_thread_queued(thread)) {
   2fece:	f994 300d 	ldrsb.w	r3, [r4, #13]
   2fed2:	2b00      	cmp	r3, #0
   2fed4:	da07      	bge.n	2fee6 <z_thread_single_abort+0x6e>
				_priq_run_remove(&_kernel.ready_q.runq,
   2fed6:	4621      	mov	r1, r4
   2fed8:	4821      	ldr	r0, [pc, #132]	; (2ff60 <z_thread_single_abort+0xe8>)
   2feda:	f7ff fc77 	bl	2f7cc <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   2fede:	7b63      	ldrb	r3, [r4, #13]
   2fee0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2fee4:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   2fee6:	4b1f      	ldr	r3, [pc, #124]	; (2ff64 <z_thread_single_abort+0xec>)
   2fee8:	6898      	ldr	r0, [r3, #8]
   2feea:	1b02      	subs	r2, r0, r4
   2feec:	4250      	negs	r0, r2
   2feee:	4150      	adcs	r0, r2
   2fef0:	f7ff fcf0 	bl	2f8d4 <update_cache>
		thread->base.thread_state |= mask;
   2fef4:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2fef6:	4815      	ldr	r0, [pc, #84]	; (2ff4c <z_thread_single_abort+0xd4>)
   2fef8:	f043 0308 	orr.w	r3, r3, #8
   2fefc:	7363      	strb	r3, [r4, #13]
   2fefe:	f000 fd4f 	bl	309a0 <z_spin_unlock_valid>
   2ff02:	b968      	cbnz	r0, 2ff20 <z_thread_single_abort+0xa8>
   2ff04:	235d      	movs	r3, #93	; 0x5d
   2ff06:	4a12      	ldr	r2, [pc, #72]	; (2ff50 <z_thread_single_abort+0xd8>)
   2ff08:	4917      	ldr	r1, [pc, #92]	; (2ff68 <z_thread_single_abort+0xf0>)
   2ff0a:	4813      	ldr	r0, [pc, #76]	; (2ff58 <z_thread_single_abort+0xe0>)
   2ff0c:	f003 fb03 	bl	33516 <printk>
   2ff10:	490e      	ldr	r1, [pc, #56]	; (2ff4c <z_thread_single_abort+0xd4>)
   2ff12:	4816      	ldr	r0, [pc, #88]	; (2ff6c <z_thread_single_abort+0xf4>)
   2ff14:	f003 faff 	bl	33516 <printk>
   2ff18:	215d      	movs	r1, #93	; 0x5d
   2ff1a:	480d      	ldr	r0, [pc, #52]	; (2ff50 <z_thread_single_abort+0xd8>)
   2ff1c:	f003 fb41 	bl	335a2 <assert_post_action>
	__asm__ volatile(
   2ff20:	f386 8811 	msr	BASEPRI, r6
   2ff24:	f3bf 8f6f 	isb	sy
}
   2ff28:	bd70      	pop	{r4, r5, r6, pc}
			if (z_is_thread_pending(thread)) {
   2ff2a:	7b63      	ldrb	r3, [r4, #13]
   2ff2c:	079b      	lsls	r3, r3, #30
   2ff2e:	d5e1      	bpl.n	2fef4 <z_thread_single_abort+0x7c>
				_priq_wait_remove(&pended_on(thread)->waitq,
   2ff30:	f104 0008 	add.w	r0, r4, #8
   2ff34:	f7ff fb08 	bl	2f548 <pended_on.isra.0>
   2ff38:	4621      	mov	r1, r4
   2ff3a:	f7ff fc47 	bl	2f7cc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2ff3e:	7b63      	ldrb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   2ff40:	60a5      	str	r5, [r4, #8]
   2ff42:	f023 0302 	bic.w	r3, r3, #2
   2ff46:	7363      	strb	r3, [r4, #13]
   2ff48:	e7d4      	b.n	2fef4 <z_thread_single_abort+0x7c>
   2ff4a:	bf00      	nop
   2ff4c:	20023f08 	.word	0x20023f08
   2ff50:	000382ba 	.word	0x000382ba
   2ff54:	000382e0 	.word	0x000382e0
   2ff58:	00037a66 	.word	0x00037a66
   2ff5c:	000382f5 	.word	0x000382f5
   2ff60:	20023ef8 	.word	0x20023ef8
   2ff64:	20023ed0 	.word	0x20023ed0
   2ff68:	0003830d 	.word	0x0003830d
   2ff6c:	00038324 	.word	0x00038324

0002ff70 <z_remove_thread_from_ready_q>:
{
   2ff70:	b538      	push	{r3, r4, r5, lr}
   2ff72:	4604      	mov	r4, r0
	__asm__ volatile(
   2ff74:	f04f 0320 	mov.w	r3, #32
   2ff78:	f3ef 8511 	mrs	r5, BASEPRI
   2ff7c:	f383 8811 	msr	BASEPRI, r3
   2ff80:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2ff84:	481f      	ldr	r0, [pc, #124]	; (30004 <z_remove_thread_from_ready_q+0x94>)
   2ff86:	f000 fcfd 	bl	30984 <z_spin_lock_valid>
   2ff8a:	b968      	cbnz	r0, 2ffa8 <z_remove_thread_from_ready_q+0x38>
   2ff8c:	234a      	movs	r3, #74	; 0x4a
   2ff8e:	4a1e      	ldr	r2, [pc, #120]	; (30008 <z_remove_thread_from_ready_q+0x98>)
   2ff90:	491e      	ldr	r1, [pc, #120]	; (3000c <z_remove_thread_from_ready_q+0x9c>)
   2ff92:	481f      	ldr	r0, [pc, #124]	; (30010 <z_remove_thread_from_ready_q+0xa0>)
   2ff94:	f003 fabf 	bl	33516 <printk>
   2ff98:	491a      	ldr	r1, [pc, #104]	; (30004 <z_remove_thread_from_ready_q+0x94>)
   2ff9a:	481e      	ldr	r0, [pc, #120]	; (30014 <z_remove_thread_from_ready_q+0xa4>)
   2ff9c:	f003 fabb 	bl	33516 <printk>
   2ffa0:	214a      	movs	r1, #74	; 0x4a
   2ffa2:	4819      	ldr	r0, [pc, #100]	; (30008 <z_remove_thread_from_ready_q+0x98>)
   2ffa4:	f003 fafd 	bl	335a2 <assert_post_action>
	z_spin_lock_set_owner(l);
   2ffa8:	4816      	ldr	r0, [pc, #88]	; (30004 <z_remove_thread_from_ready_q+0x94>)
   2ffaa:	f000 fd09 	bl	309c0 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   2ffae:	f994 300d 	ldrsb.w	r3, [r4, #13]
   2ffb2:	2b00      	cmp	r3, #0
   2ffb4:	da07      	bge.n	2ffc6 <z_remove_thread_from_ready_q+0x56>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   2ffb6:	4621      	mov	r1, r4
   2ffb8:	4817      	ldr	r0, [pc, #92]	; (30018 <z_remove_thread_from_ready_q+0xa8>)
   2ffba:	f7ff fc07 	bl	2f7cc <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   2ffbe:	7b63      	ldrb	r3, [r4, #13]
   2ffc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2ffc4:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   2ffc6:	4b15      	ldr	r3, [pc, #84]	; (3001c <z_remove_thread_from_ready_q+0xac>)
   2ffc8:	6898      	ldr	r0, [r3, #8]
   2ffca:	1b03      	subs	r3, r0, r4
   2ffcc:	4258      	negs	r0, r3
   2ffce:	4158      	adcs	r0, r3
   2ffd0:	f7ff fc80 	bl	2f8d4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2ffd4:	480b      	ldr	r0, [pc, #44]	; (30004 <z_remove_thread_from_ready_q+0x94>)
   2ffd6:	f000 fce3 	bl	309a0 <z_spin_unlock_valid>
   2ffda:	b968      	cbnz	r0, 2fff8 <z_remove_thread_from_ready_q+0x88>
   2ffdc:	235d      	movs	r3, #93	; 0x5d
   2ffde:	4a0a      	ldr	r2, [pc, #40]	; (30008 <z_remove_thread_from_ready_q+0x98>)
   2ffe0:	490f      	ldr	r1, [pc, #60]	; (30020 <z_remove_thread_from_ready_q+0xb0>)
   2ffe2:	480b      	ldr	r0, [pc, #44]	; (30010 <z_remove_thread_from_ready_q+0xa0>)
   2ffe4:	f003 fa97 	bl	33516 <printk>
   2ffe8:	4906      	ldr	r1, [pc, #24]	; (30004 <z_remove_thread_from_ready_q+0x94>)
   2ffea:	480e      	ldr	r0, [pc, #56]	; (30024 <z_remove_thread_from_ready_q+0xb4>)
   2ffec:	f003 fa93 	bl	33516 <printk>
   2fff0:	215d      	movs	r1, #93	; 0x5d
   2fff2:	4805      	ldr	r0, [pc, #20]	; (30008 <z_remove_thread_from_ready_q+0x98>)
   2fff4:	f003 fad5 	bl	335a2 <assert_post_action>
	__asm__ volatile(
   2fff8:	f385 8811 	msr	BASEPRI, r5
   2fffc:	f3bf 8f6f 	isb	sy
}
   30000:	bd38      	pop	{r3, r4, r5, pc}
   30002:	bf00      	nop
   30004:	20023f08 	.word	0x20023f08
   30008:	000382ba 	.word	0x000382ba
   3000c:	000382e0 	.word	0x000382e0
   30010:	00037a66 	.word	0x00037a66
   30014:	000382f5 	.word	0x000382f5
   30018:	20023ef8 	.word	0x20023ef8
   3001c:	20023ed0 	.word	0x20023ed0
   30020:	0003830d 	.word	0x0003830d
   30024:	00038324 	.word	0x00038324

00030028 <pend>:
{
   30028:	b570      	push	{r4, r5, r6, lr}
   3002a:	4604      	mov	r4, r0
   3002c:	460d      	mov	r5, r1
   3002e:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
   30030:	f7ff ff9e 	bl	2ff70 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
   30034:	7b63      	ldrb	r3, [r4, #13]
   30036:	f043 0302 	orr.w	r3, r3, #2
   3003a:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   3003c:	b345      	cbz	r5, 30090 <pend+0x68>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3003e:	4b2d      	ldr	r3, [pc, #180]	; (300f4 <pend+0xcc>)
		thread->base.pended_on = wait_q;
   30040:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   30042:	429c      	cmp	r4, r3
   30044:	d10b      	bne.n	3005e <pend+0x36>
   30046:	492c      	ldr	r1, [pc, #176]	; (300f8 <pend+0xd0>)
   30048:	482c      	ldr	r0, [pc, #176]	; (300fc <pend+0xd4>)
   3004a:	f240 3302 	movw	r3, #770	; 0x302
   3004e:	4a2c      	ldr	r2, [pc, #176]	; (30100 <pend+0xd8>)
   30050:	f003 fa61 	bl	33516 <printk>
   30054:	f240 3102 	movw	r1, #770	; 0x302
   30058:	4829      	ldr	r0, [pc, #164]	; (30100 <pend+0xd8>)
   3005a:	f003 faa2 	bl	335a2 <assert_post_action>
	return list->head == list;
   3005e:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   30060:	429d      	cmp	r5, r3
   30062:	bf08      	it	eq
   30064:	2300      	moveq	r3, #0
   30066:	2b00      	cmp	r3, #0
   30068:	bf38      	it	cc
   3006a:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3006c:	2b00      	cmp	r3, #0
   3006e:	d038      	beq.n	300e2 <pend+0xba>
	if (thread_1->base.prio < thread_2->base.prio) {
   30070:	f994 100e 	ldrsb.w	r1, [r4, #14]
   30074:	f993 200e 	ldrsb.w	r2, [r3, #14]
   30078:	4291      	cmp	r1, r2
   3007a:	db04      	blt.n	30086 <pend+0x5e>
	return (node == list->tail) ? NULL : node->next;
   3007c:	686a      	ldr	r2, [r5, #4]
   3007e:	429a      	cmp	r2, r3
   30080:	d02f      	beq.n	300e2 <pend+0xba>
   30082:	681b      	ldr	r3, [r3, #0]
   30084:	e7f2      	b.n	3006c <pend+0x44>
	node->prev = successor->prev;
   30086:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   30088:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   3008c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   3008e:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
   30090:	1c73      	adds	r3, r6, #1
   30092:	d02d      	beq.n	300f0 <pend+0xc8>
		__ASSERT(timeout >= 0,
   30094:	2e00      	cmp	r6, #0
   30096:	da0e      	bge.n	300b6 <pend+0x8e>
   30098:	491a      	ldr	r1, [pc, #104]	; (30104 <pend+0xdc>)
   3009a:	f240 13f5 	movw	r3, #501	; 0x1f5
   3009e:	4a18      	ldr	r2, [pc, #96]	; (30100 <pend+0xd8>)
   300a0:	4816      	ldr	r0, [pc, #88]	; (300fc <pend+0xd4>)
   300a2:	f003 fa38 	bl	33516 <printk>
   300a6:	4818      	ldr	r0, [pc, #96]	; (30108 <pend+0xe0>)
   300a8:	f003 fa35 	bl	33516 <printk>
   300ac:	f240 11f5 	movw	r1, #501	; 0x1f5
   300b0:	4813      	ldr	r0, [pc, #76]	; (30100 <pend+0xd8>)
   300b2:	f003 fa76 	bl	335a2 <assert_post_action>
   300b6:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   300ba:	f240 30e7 	movw	r0, #999	; 0x3e7
   300be:	2100      	movs	r1, #0
   300c0:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
   300c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   300c8:	fbc5 0106 	smlal	r0, r1, r5, r6
   300cc:	2300      	movs	r3, #0
   300ce:	f7ec fc23 	bl	1c918 <__aeabi_uldivmod>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   300d2:	490e      	ldr	r1, [pc, #56]	; (3010c <pend+0xe4>)
   300d4:	1c42      	adds	r2, r0, #1
   300d6:	f104 0018 	add.w	r0, r4, #24
}
   300da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   300de:	f000 bf19 	b.w	30f14 <z_add_timeout>
	node->prev = list->tail;
   300e2:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   300e4:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   300e6:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   300e8:	686b      	ldr	r3, [r5, #4]
   300ea:	601c      	str	r4, [r3, #0]
	list->tail = node;
   300ec:	606c      	str	r4, [r5, #4]
}
   300ee:	e7cf      	b.n	30090 <pend+0x68>
   300f0:	bd70      	pop	{r4, r5, r6, pc}
   300f2:	bf00      	nop
   300f4:	20022d2c 	.word	0x20022d2c
   300f8:	0003af71 	.word	0x0003af71
   300fc:	00037a66 	.word	0x00037a66
   30100:	0003af38 	.word	0x0003af38
   30104:	0003afd9 	.word	0x0003afd9
   30108:	0003afe6 	.word	0x0003afe6
   3010c:	0002fb41 	.word	0x0002fb41

00030110 <z_pend_curr_irqlock>:
{
   30110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   30112:	4606      	mov	r6, r0
	pend(_current, wait_q, timeout);
   30114:	4d22      	ldr	r5, [pc, #136]	; (301a0 <z_pend_curr_irqlock+0x90>)
	pending_current = _current;
   30116:	4c23      	ldr	r4, [pc, #140]	; (301a4 <z_pend_curr_irqlock+0x94>)
	pend(_current, wait_q, timeout);
   30118:	68a8      	ldr	r0, [r5, #8]
   3011a:	f7ff ff85 	bl	30028 <pend>
	pending_current = _current;
   3011e:	68ab      	ldr	r3, [r5, #8]
   30120:	4630      	mov	r0, r6
   30122:	6023      	str	r3, [r4, #0]
   30124:	f7f0 f91c 	bl	20360 <arch_swap>
   30128:	4606      	mov	r6, r0
	__asm__ volatile(
   3012a:	f04f 0320 	mov.w	r3, #32
   3012e:	f3ef 8711 	mrs	r7, BASEPRI
   30132:	f383 8811 	msr	BASEPRI, r3
   30136:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3013a:	481b      	ldr	r0, [pc, #108]	; (301a8 <z_pend_curr_irqlock+0x98>)
   3013c:	f000 fc22 	bl	30984 <z_spin_lock_valid>
   30140:	b968      	cbnz	r0, 3015e <z_pend_curr_irqlock+0x4e>
   30142:	234a      	movs	r3, #74	; 0x4a
   30144:	4a19      	ldr	r2, [pc, #100]	; (301ac <z_pend_curr_irqlock+0x9c>)
   30146:	491a      	ldr	r1, [pc, #104]	; (301b0 <z_pend_curr_irqlock+0xa0>)
   30148:	481a      	ldr	r0, [pc, #104]	; (301b4 <z_pend_curr_irqlock+0xa4>)
   3014a:	f003 f9e4 	bl	33516 <printk>
   3014e:	4916      	ldr	r1, [pc, #88]	; (301a8 <z_pend_curr_irqlock+0x98>)
   30150:	4819      	ldr	r0, [pc, #100]	; (301b8 <z_pend_curr_irqlock+0xa8>)
   30152:	f003 f9e0 	bl	33516 <printk>
   30156:	214a      	movs	r1, #74	; 0x4a
   30158:	4814      	ldr	r0, [pc, #80]	; (301ac <z_pend_curr_irqlock+0x9c>)
   3015a:	f003 fa22 	bl	335a2 <assert_post_action>
	z_spin_lock_set_owner(l);
   3015e:	4812      	ldr	r0, [pc, #72]	; (301a8 <z_pend_curr_irqlock+0x98>)
   30160:	f000 fc2e 	bl	309c0 <z_spin_lock_set_owner>
		if (pending_current == _current) {
   30164:	6823      	ldr	r3, [r4, #0]
   30166:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   30168:	480f      	ldr	r0, [pc, #60]	; (301a8 <z_pend_curr_irqlock+0x98>)
   3016a:	429a      	cmp	r2, r3
			pending_current = NULL;
   3016c:	bf04      	itt	eq
   3016e:	2300      	moveq	r3, #0
   30170:	6023      	streq	r3, [r4, #0]
   30172:	f000 fc15 	bl	309a0 <z_spin_unlock_valid>
   30176:	b968      	cbnz	r0, 30194 <z_pend_curr_irqlock+0x84>
   30178:	235d      	movs	r3, #93	; 0x5d
   3017a:	4a0c      	ldr	r2, [pc, #48]	; (301ac <z_pend_curr_irqlock+0x9c>)
   3017c:	490f      	ldr	r1, [pc, #60]	; (301bc <z_pend_curr_irqlock+0xac>)
   3017e:	480d      	ldr	r0, [pc, #52]	; (301b4 <z_pend_curr_irqlock+0xa4>)
   30180:	f003 f9c9 	bl	33516 <printk>
   30184:	4908      	ldr	r1, [pc, #32]	; (301a8 <z_pend_curr_irqlock+0x98>)
   30186:	480e      	ldr	r0, [pc, #56]	; (301c0 <z_pend_curr_irqlock+0xb0>)
   30188:	f003 f9c5 	bl	33516 <printk>
   3018c:	215d      	movs	r1, #93	; 0x5d
   3018e:	4807      	ldr	r0, [pc, #28]	; (301ac <z_pend_curr_irqlock+0x9c>)
   30190:	f003 fa07 	bl	335a2 <assert_post_action>
	__asm__ volatile(
   30194:	f387 8811 	msr	BASEPRI, r7
   30198:	f3bf 8f6f 	isb	sy
}
   3019c:	4630      	mov	r0, r6
   3019e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   301a0:	20023ed0 	.word	0x20023ed0
   301a4:	20023f04 	.word	0x20023f04
   301a8:	20023f08 	.word	0x20023f08
   301ac:	000382ba 	.word	0x000382ba
   301b0:	000382e0 	.word	0x000382e0
   301b4:	00037a66 	.word	0x00037a66
   301b8:	000382f5 	.word	0x000382f5
   301bc:	0003830d 	.word	0x0003830d
   301c0:	00038324 	.word	0x00038324

000301c4 <z_pend_curr>:
{
   301c4:	b538      	push	{r3, r4, r5, lr}
   301c6:	4604      	mov	r4, r0
   301c8:	460d      	mov	r5, r1
   301ca:	4611      	mov	r1, r2
	pending_current = _current;
   301cc:	4a0e      	ldr	r2, [pc, #56]	; (30208 <z_pend_curr+0x44>)
   301ce:	6890      	ldr	r0, [r2, #8]
   301d0:	4a0e      	ldr	r2, [pc, #56]	; (3020c <z_pend_curr+0x48>)
   301d2:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
   301d4:	461a      	mov	r2, r3
   301d6:	f7ff ff27 	bl	30028 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   301da:	4620      	mov	r0, r4
   301dc:	f000 fbe0 	bl	309a0 <z_spin_unlock_valid>
   301e0:	b968      	cbnz	r0, 301fe <z_pend_curr+0x3a>
   301e2:	2374      	movs	r3, #116	; 0x74
   301e4:	4a0a      	ldr	r2, [pc, #40]	; (30210 <z_pend_curr+0x4c>)
   301e6:	490b      	ldr	r1, [pc, #44]	; (30214 <z_pend_curr+0x50>)
   301e8:	480b      	ldr	r0, [pc, #44]	; (30218 <z_pend_curr+0x54>)
   301ea:	f003 f994 	bl	33516 <printk>
   301ee:	4621      	mov	r1, r4
   301f0:	480a      	ldr	r0, [pc, #40]	; (3021c <z_pend_curr+0x58>)
   301f2:	f003 f990 	bl	33516 <printk>
   301f6:	2174      	movs	r1, #116	; 0x74
   301f8:	4805      	ldr	r0, [pc, #20]	; (30210 <z_pend_curr+0x4c>)
   301fa:	f003 f9d2 	bl	335a2 <assert_post_action>
   301fe:	4628      	mov	r0, r5
}
   30200:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   30204:	f7f0 b8ac 	b.w	20360 <arch_swap>
   30208:	20023ed0 	.word	0x20023ed0
   3020c:	20023f04 	.word	0x20023f04
   30210:	000382ba 	.word	0x000382ba
   30214:	0003830d 	.word	0x0003830d
   30218:	00037a66 	.word	0x00037a66
   3021c:	00038324 	.word	0x00038324

00030220 <z_set_prio>:
{
   30220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   30222:	4604      	mov	r4, r0
   30224:	460d      	mov	r5, r1
	__asm__ volatile(
   30226:	f04f 0320 	mov.w	r3, #32
   3022a:	f3ef 8611 	mrs	r6, BASEPRI
   3022e:	f383 8811 	msr	BASEPRI, r3
   30232:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   30236:	4837      	ldr	r0, [pc, #220]	; (30314 <z_set_prio+0xf4>)
   30238:	f000 fba4 	bl	30984 <z_spin_lock_valid>
   3023c:	b968      	cbnz	r0, 3025a <z_set_prio+0x3a>
   3023e:	234a      	movs	r3, #74	; 0x4a
   30240:	4a35      	ldr	r2, [pc, #212]	; (30318 <z_set_prio+0xf8>)
   30242:	4936      	ldr	r1, [pc, #216]	; (3031c <z_set_prio+0xfc>)
   30244:	4836      	ldr	r0, [pc, #216]	; (30320 <z_set_prio+0x100>)
   30246:	f003 f966 	bl	33516 <printk>
   3024a:	4932      	ldr	r1, [pc, #200]	; (30314 <z_set_prio+0xf4>)
   3024c:	4835      	ldr	r0, [pc, #212]	; (30324 <z_set_prio+0x104>)
   3024e:	f003 f962 	bl	33516 <printk>
   30252:	214a      	movs	r1, #74	; 0x4a
   30254:	4830      	ldr	r0, [pc, #192]	; (30318 <z_set_prio+0xf8>)
   30256:	f003 f9a4 	bl	335a2 <assert_post_action>
	z_spin_lock_set_owner(l);
   3025a:	482e      	ldr	r0, [pc, #184]	; (30314 <z_set_prio+0xf4>)
   3025c:	f000 fbb0 	bl	309c0 <z_spin_lock_set_owner>
		need_sched = z_is_thread_ready(thread);
   30260:	4620      	mov	r0, r4
   30262:	f005 fae4 	bl	3582e <z_is_thread_ready>
		if (need_sched) {
   30266:	b26d      	sxtb	r5, r5
   30268:	4607      	mov	r7, r0
   3026a:	2800      	cmp	r0, #0
   3026c:	d04f      	beq.n	3030e <z_set_prio+0xee>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   3026e:	4621      	mov	r1, r4
   30270:	482d      	ldr	r0, [pc, #180]	; (30328 <z_set_prio+0x108>)
   30272:	f7ff faab 	bl	2f7cc <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   30276:	4b2d      	ldr	r3, [pc, #180]	; (3032c <z_set_prio+0x10c>)
				thread->base.prio = prio;
   30278:	73a5      	strb	r5, [r4, #14]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3027a:	429c      	cmp	r4, r3
   3027c:	d10b      	bne.n	30296 <z_set_prio+0x76>
   3027e:	492c      	ldr	r1, [pc, #176]	; (30330 <z_set_prio+0x110>)
   30280:	4827      	ldr	r0, [pc, #156]	; (30320 <z_set_prio+0x100>)
   30282:	f240 3302 	movw	r3, #770	; 0x302
   30286:	4a2b      	ldr	r2, [pc, #172]	; (30334 <z_set_prio+0x114>)
   30288:	f003 f945 	bl	33516 <printk>
   3028c:	f240 3102 	movw	r1, #770	; 0x302
   30290:	4828      	ldr	r0, [pc, #160]	; (30334 <z_set_prio+0x114>)
   30292:	f003 f986 	bl	335a2 <assert_post_action>
	return list->head == list;
   30296:	4a28      	ldr	r2, [pc, #160]	; (30338 <z_set_prio+0x118>)
   30298:	4611      	mov	r1, r2
   3029a:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   3029e:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   302a0:	428b      	cmp	r3, r1
   302a2:	bf08      	it	eq
   302a4:	2300      	moveq	r3, #0
   302a6:	2b00      	cmp	r3, #0
   302a8:	bf38      	it	cc
   302aa:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   302ac:	b34b      	cbz	r3, 30302 <z_set_prio+0xe2>
	if (thread_1->base.prio < thread_2->base.prio) {
   302ae:	f994 c00e 	ldrsb.w	ip, [r4, #14]
   302b2:	f993 500e 	ldrsb.w	r5, [r3, #14]
   302b6:	45ac      	cmp	ip, r5
   302b8:	db03      	blt.n	302c2 <z_set_prio+0xa2>
	return (node == list->tail) ? NULL : node->next;
   302ba:	4283      	cmp	r3, r0
   302bc:	d021      	beq.n	30302 <z_set_prio+0xe2>
   302be:	681b      	ldr	r3, [r3, #0]
   302c0:	e7f4      	b.n	302ac <z_set_prio+0x8c>
	node->prev = successor->prev;
   302c2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   302c4:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   302c8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   302ca:	605c      	str	r4, [r3, #4]
			update_cache(1);
   302cc:	2001      	movs	r0, #1
   302ce:	f7ff fb01 	bl	2f8d4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   302d2:	4810      	ldr	r0, [pc, #64]	; (30314 <z_set_prio+0xf4>)
   302d4:	f000 fb64 	bl	309a0 <z_spin_unlock_valid>
   302d8:	b968      	cbnz	r0, 302f6 <z_set_prio+0xd6>
   302da:	235d      	movs	r3, #93	; 0x5d
   302dc:	4a0e      	ldr	r2, [pc, #56]	; (30318 <z_set_prio+0xf8>)
   302de:	4917      	ldr	r1, [pc, #92]	; (3033c <z_set_prio+0x11c>)
   302e0:	480f      	ldr	r0, [pc, #60]	; (30320 <z_set_prio+0x100>)
   302e2:	f003 f918 	bl	33516 <printk>
   302e6:	490b      	ldr	r1, [pc, #44]	; (30314 <z_set_prio+0xf4>)
   302e8:	4815      	ldr	r0, [pc, #84]	; (30340 <z_set_prio+0x120>)
   302ea:	f003 f914 	bl	33516 <printk>
   302ee:	215d      	movs	r1, #93	; 0x5d
   302f0:	4809      	ldr	r0, [pc, #36]	; (30318 <z_set_prio+0xf8>)
   302f2:	f003 f956 	bl	335a2 <assert_post_action>
	__asm__ volatile(
   302f6:	f386 8811 	msr	BASEPRI, r6
   302fa:	f3bf 8f6f 	isb	sy
}
   302fe:	4638      	mov	r0, r7
   30300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	node->prev = list->tail;
   30302:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   30306:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   30308:	601c      	str	r4, [r3, #0]
	list->tail = node;
   3030a:	62d4      	str	r4, [r2, #44]	; 0x2c
}
   3030c:	e7de      	b.n	302cc <z_set_prio+0xac>
			thread->base.prio = prio;
   3030e:	73a5      	strb	r5, [r4, #14]
   30310:	e7df      	b.n	302d2 <z_set_prio+0xb2>
   30312:	bf00      	nop
   30314:	20023f08 	.word	0x20023f08
   30318:	000382ba 	.word	0x000382ba
   3031c:	000382e0 	.word	0x000382e0
   30320:	00037a66 	.word	0x00037a66
   30324:	000382f5 	.word	0x000382f5
   30328:	20023ef8 	.word	0x20023ef8
   3032c:	20022d2c 	.word	0x20022d2c
   30330:	0003af71 	.word	0x0003af71
   30334:	0003af38 	.word	0x0003af38
   30338:	20023ed0 	.word	0x20023ed0
   3033c:	0003830d 	.word	0x0003830d
   30340:	00038324 	.word	0x00038324

00030344 <z_unpend_first_thread>:
{
   30344:	b538      	push	{r3, r4, r5, lr}
   30346:	4604      	mov	r4, r0
	__asm__ volatile(
   30348:	f04f 0320 	mov.w	r3, #32
   3034c:	f3ef 8511 	mrs	r5, BASEPRI
   30350:	f383 8811 	msr	BASEPRI, r3
   30354:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   30358:	483b      	ldr	r0, [pc, #236]	; (30448 <z_unpend_first_thread+0x104>)
   3035a:	f000 fb13 	bl	30984 <z_spin_lock_valid>
   3035e:	b968      	cbnz	r0, 3037c <z_unpend_first_thread+0x38>
   30360:	234a      	movs	r3, #74	; 0x4a
   30362:	4a3a      	ldr	r2, [pc, #232]	; (3044c <z_unpend_first_thread+0x108>)
   30364:	493a      	ldr	r1, [pc, #232]	; (30450 <z_unpend_first_thread+0x10c>)
   30366:	483b      	ldr	r0, [pc, #236]	; (30454 <z_unpend_first_thread+0x110>)
   30368:	f003 f8d5 	bl	33516 <printk>
   3036c:	4936      	ldr	r1, [pc, #216]	; (30448 <z_unpend_first_thread+0x104>)
   3036e:	483a      	ldr	r0, [pc, #232]	; (30458 <z_unpend_first_thread+0x114>)
   30370:	f003 f8d1 	bl	33516 <printk>
   30374:	214a      	movs	r1, #74	; 0x4a
   30376:	4835      	ldr	r0, [pc, #212]	; (3044c <z_unpend_first_thread+0x108>)
   30378:	f003 f913 	bl	335a2 <assert_post_action>
	z_spin_lock_set_owner(l);
   3037c:	4832      	ldr	r0, [pc, #200]	; (30448 <z_unpend_first_thread+0x104>)
   3037e:	f000 fb1f 	bl	309c0 <z_spin_lock_set_owner>
		ret = _priq_wait_best(&wait_q->waitq);
   30382:	4620      	mov	r0, r4
   30384:	f005 fa7b 	bl	3587e <z_priq_dumb_best>
   30388:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3038a:	482f      	ldr	r0, [pc, #188]	; (30448 <z_unpend_first_thread+0x104>)
   3038c:	f000 fb08 	bl	309a0 <z_spin_unlock_valid>
   30390:	b968      	cbnz	r0, 303ae <z_unpend_first_thread+0x6a>
   30392:	235d      	movs	r3, #93	; 0x5d
   30394:	4a2d      	ldr	r2, [pc, #180]	; (3044c <z_unpend_first_thread+0x108>)
   30396:	4931      	ldr	r1, [pc, #196]	; (3045c <z_unpend_first_thread+0x118>)
   30398:	482e      	ldr	r0, [pc, #184]	; (30454 <z_unpend_first_thread+0x110>)
   3039a:	f003 f8bc 	bl	33516 <printk>
   3039e:	492a      	ldr	r1, [pc, #168]	; (30448 <z_unpend_first_thread+0x104>)
   303a0:	482f      	ldr	r0, [pc, #188]	; (30460 <z_unpend_first_thread+0x11c>)
   303a2:	f003 f8b8 	bl	33516 <printk>
   303a6:	215d      	movs	r1, #93	; 0x5d
   303a8:	4828      	ldr	r0, [pc, #160]	; (3044c <z_unpend_first_thread+0x108>)
   303aa:	f003 f8fa 	bl	335a2 <assert_post_action>
	__asm__ volatile(
   303ae:	f385 8811 	msr	BASEPRI, r5
   303b2:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   303b6:	2c00      	cmp	r4, #0
   303b8:	d043      	beq.n	30442 <z_unpend_first_thread+0xfe>
	__asm__ volatile(
   303ba:	f04f 0320 	mov.w	r3, #32
   303be:	f3ef 8511 	mrs	r5, BASEPRI
   303c2:	f383 8811 	msr	BASEPRI, r3
   303c6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   303ca:	481f      	ldr	r0, [pc, #124]	; (30448 <z_unpend_first_thread+0x104>)
   303cc:	f000 fada 	bl	30984 <z_spin_lock_valid>
   303d0:	b968      	cbnz	r0, 303ee <z_unpend_first_thread+0xaa>
   303d2:	234a      	movs	r3, #74	; 0x4a
   303d4:	4a1d      	ldr	r2, [pc, #116]	; (3044c <z_unpend_first_thread+0x108>)
   303d6:	491e      	ldr	r1, [pc, #120]	; (30450 <z_unpend_first_thread+0x10c>)
   303d8:	481e      	ldr	r0, [pc, #120]	; (30454 <z_unpend_first_thread+0x110>)
   303da:	f003 f89c 	bl	33516 <printk>
   303de:	491a      	ldr	r1, [pc, #104]	; (30448 <z_unpend_first_thread+0x104>)
   303e0:	481d      	ldr	r0, [pc, #116]	; (30458 <z_unpend_first_thread+0x114>)
   303e2:	f003 f898 	bl	33516 <printk>
   303e6:	214a      	movs	r1, #74	; 0x4a
   303e8:	4818      	ldr	r0, [pc, #96]	; (3044c <z_unpend_first_thread+0x108>)
   303ea:	f003 f8da 	bl	335a2 <assert_post_action>
	z_spin_lock_set_owner(l);
   303ee:	4816      	ldr	r0, [pc, #88]	; (30448 <z_unpend_first_thread+0x104>)
   303f0:	f000 fae6 	bl	309c0 <z_spin_lock_set_owner>
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   303f4:	f104 0008 	add.w	r0, r4, #8
   303f8:	f7ff f8a6 	bl	2f548 <pended_on.isra.0>
   303fc:	4621      	mov	r1, r4
   303fe:	f7ff f9e5 	bl	2f7cc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   30402:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   30404:	4810      	ldr	r0, [pc, #64]	; (30448 <z_unpend_first_thread+0x104>)
   30406:	f023 0302 	bic.w	r3, r3, #2
   3040a:	7363      	strb	r3, [r4, #13]
   3040c:	f000 fac8 	bl	309a0 <z_spin_unlock_valid>
   30410:	b968      	cbnz	r0, 3042e <z_unpend_first_thread+0xea>
   30412:	235d      	movs	r3, #93	; 0x5d
   30414:	4a0d      	ldr	r2, [pc, #52]	; (3044c <z_unpend_first_thread+0x108>)
   30416:	4911      	ldr	r1, [pc, #68]	; (3045c <z_unpend_first_thread+0x118>)
   30418:	480e      	ldr	r0, [pc, #56]	; (30454 <z_unpend_first_thread+0x110>)
   3041a:	f003 f87c 	bl	33516 <printk>
   3041e:	490a      	ldr	r1, [pc, #40]	; (30448 <z_unpend_first_thread+0x104>)
   30420:	480f      	ldr	r0, [pc, #60]	; (30460 <z_unpend_first_thread+0x11c>)
   30422:	f003 f878 	bl	33516 <printk>
   30426:	215d      	movs	r1, #93	; 0x5d
   30428:	4808      	ldr	r0, [pc, #32]	; (3044c <z_unpend_first_thread+0x108>)
   3042a:	f003 f8ba 	bl	335a2 <assert_post_action>
	__asm__ volatile(
   3042e:	f385 8811 	msr	BASEPRI, r5
   30432:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
   30436:	2300      	movs	r3, #0
	return z_abort_timeout(&thread->base.timeout);
   30438:	f104 0018 	add.w	r0, r4, #24
   3043c:	60a3      	str	r3, [r4, #8]
   3043e:	f000 fe11 	bl	31064 <z_abort_timeout>
}
   30442:	4620      	mov	r0, r4
   30444:	bd38      	pop	{r3, r4, r5, pc}
   30446:	bf00      	nop
   30448:	20023f08 	.word	0x20023f08
   3044c:	000382ba 	.word	0x000382ba
   30450:	000382e0 	.word	0x000382e0
   30454:	00037a66 	.word	0x00037a66
   30458:	000382f5 	.word	0x000382f5
   3045c:	0003830d 	.word	0x0003830d
   30460:	00038324 	.word	0x00038324

00030464 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   30464:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   30466:	4b04      	ldr	r3, [pc, #16]	; (30478 <z_sched_init+0x14>)
   30468:	4608      	mov	r0, r1
   3046a:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   3046e:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   30472:	f7ff b897 	b.w	2f5a4 <k_sched_time_slice_set>
   30476:	bf00      	nop
   30478:	20023ed0 	.word	0x20023ed0

0003047c <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   3047c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3047e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   30482:	b173      	cbz	r3, 304a2 <z_impl_k_yield+0x26>
   30484:	4946      	ldr	r1, [pc, #280]	; (305a0 <z_impl_k_yield+0x124>)
   30486:	f240 430d 	movw	r3, #1037	; 0x40d
   3048a:	4a46      	ldr	r2, [pc, #280]	; (305a4 <z_impl_k_yield+0x128>)
   3048c:	4846      	ldr	r0, [pc, #280]	; (305a8 <z_impl_k_yield+0x12c>)
   3048e:	f003 f842 	bl	33516 <printk>
   30492:	4846      	ldr	r0, [pc, #280]	; (305ac <z_impl_k_yield+0x130>)
   30494:	f003 f83f 	bl	33516 <printk>
   30498:	f240 410d 	movw	r1, #1037	; 0x40d
   3049c:	4841      	ldr	r0, [pc, #260]	; (305a4 <z_impl_k_yield+0x128>)
   3049e:	f003 f880 	bl	335a2 <assert_post_action>

	if (!z_is_idle_thread_object(_current)) {
   304a2:	4c43      	ldr	r4, [pc, #268]	; (305b0 <z_impl_k_yield+0x134>)
   304a4:	4e43      	ldr	r6, [pc, #268]	; (305b4 <z_impl_k_yield+0x138>)
   304a6:	68a2      	ldr	r2, [r4, #8]
   304a8:	42b2      	cmp	r2, r6
   304aa:	d067      	beq.n	3057c <z_impl_k_yield+0x100>
	__asm__ volatile(
   304ac:	f04f 0320 	mov.w	r3, #32
   304b0:	f3ef 8711 	mrs	r7, BASEPRI
   304b4:	f383 8811 	msr	BASEPRI, r3
   304b8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   304bc:	483e      	ldr	r0, [pc, #248]	; (305b8 <z_impl_k_yield+0x13c>)
   304be:	f000 fa61 	bl	30984 <z_spin_lock_valid>
   304c2:	b968      	cbnz	r0, 304e0 <z_impl_k_yield+0x64>
   304c4:	234a      	movs	r3, #74	; 0x4a
   304c6:	4a3d      	ldr	r2, [pc, #244]	; (305bc <z_impl_k_yield+0x140>)
   304c8:	493d      	ldr	r1, [pc, #244]	; (305c0 <z_impl_k_yield+0x144>)
   304ca:	4837      	ldr	r0, [pc, #220]	; (305a8 <z_impl_k_yield+0x12c>)
   304cc:	f003 f823 	bl	33516 <printk>
   304d0:	4939      	ldr	r1, [pc, #228]	; (305b8 <z_impl_k_yield+0x13c>)
   304d2:	483c      	ldr	r0, [pc, #240]	; (305c4 <z_impl_k_yield+0x148>)
   304d4:	f003 f81f 	bl	33516 <printk>
   304d8:	214a      	movs	r1, #74	; 0x4a
   304da:	4838      	ldr	r0, [pc, #224]	; (305bc <z_impl_k_yield+0x140>)
   304dc:	f003 f861 	bl	335a2 <assert_post_action>
	z_spin_lock_set_owner(l);
   304e0:	4835      	ldr	r0, [pc, #212]	; (305b8 <z_impl_k_yield+0x13c>)
   304e2:	f000 fa6d 	bl	309c0 <z_spin_lock_set_owner>
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
   304e6:	68a1      	ldr	r1, [r4, #8]
   304e8:	4837      	ldr	r0, [pc, #220]	; (305c8 <z_impl_k_yield+0x14c>)
   304ea:	f7ff f96f 	bl	2f7cc <z_priq_dumb_remove>
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
   304ee:	68a5      	ldr	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   304f0:	42b5      	cmp	r5, r6
   304f2:	d10b      	bne.n	3050c <z_impl_k_yield+0x90>
   304f4:	4935      	ldr	r1, [pc, #212]	; (305cc <z_impl_k_yield+0x150>)
   304f6:	482c      	ldr	r0, [pc, #176]	; (305a8 <z_impl_k_yield+0x12c>)
   304f8:	f240 3302 	movw	r3, #770	; 0x302
   304fc:	4a29      	ldr	r2, [pc, #164]	; (305a4 <z_impl_k_yield+0x128>)
   304fe:	f003 f80a 	bl	33516 <printk>
   30502:	f240 3102 	movw	r1, #770	; 0x302
   30506:	4827      	ldr	r0, [pc, #156]	; (305a4 <z_impl_k_yield+0x128>)
   30508:	f003 f84b 	bl	335a2 <assert_post_action>
	return list->head == list;
   3050c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3050e:	492e      	ldr	r1, [pc, #184]	; (305c8 <z_impl_k_yield+0x14c>)
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   30510:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   30512:	428b      	cmp	r3, r1
   30514:	bf08      	it	eq
   30516:	2300      	moveq	r3, #0
   30518:	2b00      	cmp	r3, #0
   3051a:	bf38      	it	cc
   3051c:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3051e:	2b00      	cmp	r3, #0
   30520:	d038      	beq.n	30594 <z_impl_k_yield+0x118>
	if (thread_1->base.prio < thread_2->base.prio) {
   30522:	f995 600e 	ldrsb.w	r6, [r5, #14]
   30526:	f993 000e 	ldrsb.w	r0, [r3, #14]
   3052a:	4286      	cmp	r6, r0
   3052c:	db03      	blt.n	30536 <z_impl_k_yield+0xba>
	return (node == list->tail) ? NULL : node->next;
   3052e:	4293      	cmp	r3, r2
   30530:	d030      	beq.n	30594 <z_impl_k_yield+0x118>
   30532:	681b      	ldr	r3, [r3, #0]
   30534:	e7f3      	b.n	3051e <z_impl_k_yield+0xa2>
	node->prev = successor->prev;
   30536:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   30538:	e9c5 3200 	strd	r3, r2, [r5]
	successor->prev->next = node;
   3053c:	6015      	str	r5, [r2, #0]
	successor->prev = node;
   3053e:	605d      	str	r5, [r3, #4]
			z_mark_thread_as_queued(_current);
   30540:	68a2      	ldr	r2, [r4, #8]
			update_cache(1);
   30542:	2001      	movs	r0, #1
	thread->base.thread_state |= states;
   30544:	7b53      	ldrb	r3, [r2, #13]
   30546:	f063 037f 	orn	r3, r3, #127	; 0x7f
   3054a:	7353      	strb	r3, [r2, #13]
   3054c:	f7ff f9c2 	bl	2f8d4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   30550:	4819      	ldr	r0, [pc, #100]	; (305b8 <z_impl_k_yield+0x13c>)
   30552:	f000 fa25 	bl	309a0 <z_spin_unlock_valid>
   30556:	b968      	cbnz	r0, 30574 <z_impl_k_yield+0xf8>
   30558:	235d      	movs	r3, #93	; 0x5d
   3055a:	4a18      	ldr	r2, [pc, #96]	; (305bc <z_impl_k_yield+0x140>)
   3055c:	491c      	ldr	r1, [pc, #112]	; (305d0 <z_impl_k_yield+0x154>)
   3055e:	4812      	ldr	r0, [pc, #72]	; (305a8 <z_impl_k_yield+0x12c>)
   30560:	f002 ffd9 	bl	33516 <printk>
   30564:	4914      	ldr	r1, [pc, #80]	; (305b8 <z_impl_k_yield+0x13c>)
   30566:	481b      	ldr	r0, [pc, #108]	; (305d4 <z_impl_k_yield+0x158>)
   30568:	f002 ffd5 	bl	33516 <printk>
   3056c:	215d      	movs	r1, #93	; 0x5d
   3056e:	4813      	ldr	r0, [pc, #76]	; (305bc <z_impl_k_yield+0x140>)
   30570:	f003 f817 	bl	335a2 <assert_post_action>
	__asm__ volatile(
   30574:	f387 8811 	msr	BASEPRI, r7
   30578:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   3057c:	f04f 0320 	mov.w	r3, #32
   30580:	f3ef 8011 	mrs	r0, BASEPRI
   30584:	f383 8811 	msr	BASEPRI, r3
   30588:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
   3058c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   30590:	f7ef bee6 	b.w	20360 <arch_swap>
	node->prev = list->tail;
   30594:	e9c5 1200 	strd	r1, r2, [r5]
	list->tail->next = node;
   30598:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   3059a:	601d      	str	r5, [r3, #0]
	list->tail = node;
   3059c:	62e5      	str	r5, [r4, #44]	; 0x2c
}
   3059e:	e7cf      	b.n	30540 <z_impl_k_yield+0xc4>
   305a0:	0003aefe 	.word	0x0003aefe
   305a4:	0003af38 	.word	0x0003af38
   305a8:	00037a66 	.word	0x00037a66
   305ac:	00038d10 	.word	0x00038d10
   305b0:	20023ed0 	.word	0x20023ed0
   305b4:	20022d2c 	.word	0x20022d2c
   305b8:	20023f08 	.word	0x20023f08
   305bc:	000382ba 	.word	0x000382ba
   305c0:	000382e0 	.word	0x000382e0
   305c4:	000382f5 	.word	0x000382f5
   305c8:	20023ef8 	.word	0x20023ef8
   305cc:	0003af71 	.word	0x0003af71
   305d0:	0003830d 	.word	0x0003830d
   305d4:	00038324 	.word	0x00038324

000305d8 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
{
   305d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   305da:	4605      	mov	r5, r0
   305dc:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	u32_t expected_wakeup_time;

	__ASSERT(!arch_is_in_isr(), "");
   305e0:	b173      	cbz	r3, 30600 <z_tick_sleep+0x28>
   305e2:	493b      	ldr	r1, [pc, #236]	; (306d0 <z_tick_sleep+0xf8>)
   305e4:	f240 432b 	movw	r3, #1067	; 0x42b
   305e8:	4a3a      	ldr	r2, [pc, #232]	; (306d4 <z_tick_sleep+0xfc>)
   305ea:	483b      	ldr	r0, [pc, #236]	; (306d8 <z_tick_sleep+0x100>)
   305ec:	f002 ff93 	bl	33516 <printk>
   305f0:	483a      	ldr	r0, [pc, #232]	; (306dc <z_tick_sleep+0x104>)
   305f2:	f002 ff90 	bl	33516 <printk>
   305f6:	f240 412b 	movw	r1, #1067	; 0x42b
   305fa:	4836      	ldr	r0, [pc, #216]	; (306d4 <z_tick_sleep+0xfc>)
   305fc:	f002 ffd1 	bl	335a2 <assert_post_action>

	K_DEBUG("thread %p for %d ticks\n", _current, ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   30600:	b925      	cbnz	r5, 3060c <z_tick_sleep+0x34>
	z_impl_k_yield();
   30602:	f7ff ff3b 	bl	3047c <z_impl_k_yield>
		return ticks;
	}
#endif

	return 0;
}
   30606:	4628      	mov	r0, r5
   30608:	b003      	add	sp, #12
   3060a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	expected_wakeup_time = ticks + z_tick_get_32();
   3060c:	f005 f9ef 	bl	359ee <z_tick_get_32>
	struct k_spinlock local_lock = {};
   30610:	2300      	movs	r3, #0
	ticks += _TICK_ALIGN;
   30612:	1c6f      	adds	r7, r5, #1
	expected_wakeup_time = ticks + z_tick_get_32();
   30614:	183d      	adds	r5, r7, r0
	struct k_spinlock local_lock = {};
   30616:	9301      	str	r3, [sp, #4]
   30618:	f04f 0320 	mov.w	r3, #32
   3061c:	f3ef 8411 	mrs	r4, BASEPRI
   30620:	f383 8811 	msr	BASEPRI, r3
   30624:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   30628:	a801      	add	r0, sp, #4
   3062a:	f000 f9ab 	bl	30984 <z_spin_lock_valid>
   3062e:	b968      	cbnz	r0, 3064c <z_tick_sleep+0x74>
   30630:	234a      	movs	r3, #74	; 0x4a
   30632:	4a2b      	ldr	r2, [pc, #172]	; (306e0 <z_tick_sleep+0x108>)
   30634:	492b      	ldr	r1, [pc, #172]	; (306e4 <z_tick_sleep+0x10c>)
   30636:	4828      	ldr	r0, [pc, #160]	; (306d8 <z_tick_sleep+0x100>)
   30638:	f002 ff6d 	bl	33516 <printk>
   3063c:	482a      	ldr	r0, [pc, #168]	; (306e8 <z_tick_sleep+0x110>)
   3063e:	a901      	add	r1, sp, #4
   30640:	f002 ff69 	bl	33516 <printk>
   30644:	214a      	movs	r1, #74	; 0x4a
   30646:	4826      	ldr	r0, [pc, #152]	; (306e0 <z_tick_sleep+0x108>)
   30648:	f002 ffab 	bl	335a2 <assert_post_action>
	pending_current = _current;
   3064c:	4e27      	ldr	r6, [pc, #156]	; (306ec <z_tick_sleep+0x114>)
	z_spin_lock_set_owner(l);
   3064e:	a801      	add	r0, sp, #4
   30650:	f000 f9b6 	bl	309c0 <z_spin_lock_set_owner>
   30654:	4b26      	ldr	r3, [pc, #152]	; (306f0 <z_tick_sleep+0x118>)
   30656:	68b0      	ldr	r0, [r6, #8]
   30658:	6018      	str	r0, [r3, #0]
	z_remove_thread_from_ready_q(_current);
   3065a:	f7ff fc89 	bl	2ff70 <z_remove_thread_from_ready_q>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   3065e:	68b0      	ldr	r0, [r6, #8]
   30660:	463a      	mov	r2, r7
   30662:	3018      	adds	r0, #24
   30664:	4923      	ldr	r1, [pc, #140]	; (306f4 <z_tick_sleep+0x11c>)
   30666:	f000 fc55 	bl	30f14 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   3066a:	68b2      	ldr	r2, [r6, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3066c:	a801      	add	r0, sp, #4
	thread->base.thread_state |= _THREAD_SUSPENDED;
   3066e:	7b53      	ldrb	r3, [r2, #13]
   30670:	f043 0310 	orr.w	r3, r3, #16
   30674:	7353      	strb	r3, [r2, #13]
   30676:	f000 f993 	bl	309a0 <z_spin_unlock_valid>
   3067a:	b968      	cbnz	r0, 30698 <z_tick_sleep+0xc0>
   3067c:	2374      	movs	r3, #116	; 0x74
   3067e:	4a18      	ldr	r2, [pc, #96]	; (306e0 <z_tick_sleep+0x108>)
   30680:	491d      	ldr	r1, [pc, #116]	; (306f8 <z_tick_sleep+0x120>)
   30682:	4815      	ldr	r0, [pc, #84]	; (306d8 <z_tick_sleep+0x100>)
   30684:	f002 ff47 	bl	33516 <printk>
   30688:	481c      	ldr	r0, [pc, #112]	; (306fc <z_tick_sleep+0x124>)
   3068a:	a901      	add	r1, sp, #4
   3068c:	f002 ff43 	bl	33516 <printk>
   30690:	2174      	movs	r1, #116	; 0x74
   30692:	4813      	ldr	r0, [pc, #76]	; (306e0 <z_tick_sleep+0x108>)
   30694:	f002 ff85 	bl	335a2 <assert_post_action>
   30698:	4620      	mov	r0, r4
   3069a:	f7ef fe61 	bl	20360 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   3069e:	68b3      	ldr	r3, [r6, #8]
   306a0:	7b5b      	ldrb	r3, [r3, #13]
   306a2:	06db      	lsls	r3, r3, #27
   306a4:	d50e      	bpl.n	306c4 <z_tick_sleep+0xec>
   306a6:	4916      	ldr	r1, [pc, #88]	; (30700 <z_tick_sleep+0x128>)
   306a8:	f44f 6389 	mov.w	r3, #1096	; 0x448
   306ac:	4a09      	ldr	r2, [pc, #36]	; (306d4 <z_tick_sleep+0xfc>)
   306ae:	480a      	ldr	r0, [pc, #40]	; (306d8 <z_tick_sleep+0x100>)
   306b0:	f002 ff31 	bl	33516 <printk>
   306b4:	4809      	ldr	r0, [pc, #36]	; (306dc <z_tick_sleep+0x104>)
   306b6:	f002 ff2e 	bl	33516 <printk>
   306ba:	f44f 6189 	mov.w	r1, #1096	; 0x448
   306be:	4805      	ldr	r0, [pc, #20]	; (306d4 <z_tick_sleep+0xfc>)
   306c0:	f002 ff6f 	bl	335a2 <assert_post_action>
	ticks = expected_wakeup_time - z_tick_get_32();
   306c4:	f005 f993 	bl	359ee <z_tick_get_32>
   306c8:	1a2d      	subs	r5, r5, r0
   306ca:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
   306ce:	e79a      	b.n	30606 <z_tick_sleep+0x2e>
   306d0:	0003aefe 	.word	0x0003aefe
   306d4:	0003af38 	.word	0x0003af38
   306d8:	00037a66 	.word	0x00037a66
   306dc:	00038d10 	.word	0x00038d10
   306e0:	000382ba 	.word	0x000382ba
   306e4:	000382e0 	.word	0x000382e0
   306e8:	000382f5 	.word	0x000382f5
   306ec:	20023ed0 	.word	0x20023ed0
   306f0:	20023f04 	.word	0x20023f04
   306f4:	0002fb41 	.word	0x0002fb41
   306f8:	0003830d 	.word	0x0003830d
   306fc:	00038324 	.word	0x00038324
   30700:	0003b00f 	.word	0x0003b00f

00030704 <z_impl_k_sleep>:

s32_t z_impl_k_sleep(int ms)
{
   30704:	b538      	push	{r3, r4, r5, lr}
   30706:	4604      	mov	r4, r0
   30708:	f3ef 8305 	mrs	r3, IPSR
	s32_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   3070c:	b173      	cbz	r3, 3072c <z_impl_k_sleep+0x28>
   3070e:	4916      	ldr	r1, [pc, #88]	; (30768 <z_impl_k_sleep+0x64>)
   30710:	f240 4357 	movw	r3, #1111	; 0x457
   30714:	4a15      	ldr	r2, [pc, #84]	; (3076c <z_impl_k_sleep+0x68>)
   30716:	4816      	ldr	r0, [pc, #88]	; (30770 <z_impl_k_sleep+0x6c>)
   30718:	f002 fefd 	bl	33516 <printk>
   3071c:	4815      	ldr	r0, [pc, #84]	; (30774 <z_impl_k_sleep+0x70>)
   3071e:	f002 fefa 	bl	33516 <printk>
   30722:	f240 4157 	movw	r1, #1111	; 0x457
   30726:	4811      	ldr	r0, [pc, #68]	; (3076c <z_impl_k_sleep+0x68>)
   30728:	f002 ff3b 	bl	335a2 <assert_post_action>

	if (ms == K_FOREVER) {
   3072c:	1c63      	adds	r3, r4, #1
   3072e:	d105      	bne.n	3073c <z_impl_k_sleep+0x38>
		k_thread_suspend(_current);
   30730:	4b11      	ldr	r3, [pc, #68]	; (30778 <z_impl_k_sleep+0x74>)
   30732:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   30734:	f000 fa82 	bl	30c3c <z_impl_k_thread_suspend>
	}

	ticks = k_ms_to_ticks_ceil32(ms);
	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
   30738:	4620      	mov	r0, r4
   3073a:	bd38      	pop	{r3, r4, r5, pc}
   3073c:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   30740:	f240 30e7 	movw	r0, #999	; 0x3e7
   30744:	2100      	movs	r1, #0
   30746:	2300      	movs	r3, #0
   30748:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3074c:	fbe5 0104 	umlal	r0, r1, r5, r4
   30750:	f7ec f8e2 	bl	1c918 <__aeabi_uldivmod>
	ticks = z_tick_sleep(ticks);
   30754:	f7ff ff40 	bl	305d8 <z_tick_sleep>
		} else {
			return (t * to_hz + off) / from_hz;
   30758:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   3075c:	fb80 0103 	smull	r0, r1, r0, r3
   30760:	0bc4      	lsrs	r4, r0, #15
   30762:	ea44 4441 	orr.w	r4, r4, r1, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   30766:	e7e7      	b.n	30738 <z_impl_k_sleep+0x34>
   30768:	0003aefe 	.word	0x0003aefe
   3076c:	0003af38 	.word	0x0003af38
   30770:	00037a66 	.word	0x00037a66
   30774:	00038d10 	.word	0x00038d10
   30778:	20023ed0 	.word	0x20023ed0

0003077c <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
   3077c:	4b01      	ldr	r3, [pc, #4]	; (30784 <z_impl_k_current_get+0x8>)
   3077e:	6898      	ldr	r0, [r3, #8]
   30780:	4770      	bx	lr
   30782:	bf00      	nop
   30784:	20023ed0 	.word	0x20023ed0

00030788 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   30788:	b570      	push	{r4, r5, r6, lr}
   3078a:	4604      	mov	r4, r0
   3078c:	f04f 0320 	mov.w	r3, #32
   30790:	f3ef 8611 	mrs	r6, BASEPRI
   30794:	f383 8811 	msr	BASEPRI, r3
   30798:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3079c:	481a      	ldr	r0, [pc, #104]	; (30808 <z_impl_k_sem_give+0x80>)
   3079e:	f000 f8f1 	bl	30984 <z_spin_lock_valid>
   307a2:	b968      	cbnz	r0, 307c0 <z_impl_k_sem_give+0x38>
   307a4:	234a      	movs	r3, #74	; 0x4a
   307a6:	4a19      	ldr	r2, [pc, #100]	; (3080c <z_impl_k_sem_give+0x84>)
   307a8:	4919      	ldr	r1, [pc, #100]	; (30810 <z_impl_k_sem_give+0x88>)
   307aa:	481a      	ldr	r0, [pc, #104]	; (30814 <z_impl_k_sem_give+0x8c>)
   307ac:	f002 feb3 	bl	33516 <printk>
   307b0:	4915      	ldr	r1, [pc, #84]	; (30808 <z_impl_k_sem_give+0x80>)
   307b2:	4819      	ldr	r0, [pc, #100]	; (30818 <z_impl_k_sem_give+0x90>)
   307b4:	f002 feaf 	bl	33516 <printk>
   307b8:	214a      	movs	r1, #74	; 0x4a
   307ba:	4814      	ldr	r0, [pc, #80]	; (3080c <z_impl_k_sem_give+0x84>)
   307bc:	f002 fef1 	bl	335a2 <assert_post_action>
	z_spin_lock_set_owner(l);
   307c0:	4811      	ldr	r0, [pc, #68]	; (30808 <z_impl_k_sem_give+0x80>)
   307c2:	f000 f8fd 	bl	309c0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   307c6:	4620      	mov	r0, r4
   307c8:	f7ff fdbc 	bl	30344 <z_unpend_first_thread>

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);

	if (thread != NULL) {
   307cc:	4605      	mov	r5, r0
   307ce:	b170      	cbz	r0, 307ee <z_impl_k_sem_give+0x66>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   307d0:	7b43      	ldrb	r3, [r0, #13]
   307d2:	06db      	lsls	r3, r3, #27
   307d4:	d103      	bne.n	307de <z_impl_k_sem_give+0x56>
	if (z_is_thread_ready(thread)) {
   307d6:	6983      	ldr	r3, [r0, #24]
   307d8:	b90b      	cbnz	r3, 307de <z_impl_k_sem_give+0x56>
		z_add_thread_to_ready_q(thread);
   307da:	f7ff f92d 	bl	2fa38 <z_add_thread_to_ready_q>
   307de:	2300      	movs	r3, #0
   307e0:	66ab      	str	r3, [r5, #104]	; 0x68
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
   307e2:	4631      	mov	r1, r6
}
   307e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   307e8:	4807      	ldr	r0, [pc, #28]	; (30808 <z_impl_k_sem_give+0x80>)
   307ea:	f7fe bf3b 	b.w	2f664 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   307ee:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   307f2:	429a      	cmp	r2, r3
   307f4:	bf18      	it	ne
   307f6:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   307f8:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   307fa:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   307fc:	f104 0010 	add.w	r0, r4, #16
   30800:	f005 f953 	bl	35aaa <z_handle_obj_poll_events>
}
   30804:	e7ed      	b.n	307e2 <z_impl_k_sem_give+0x5a>
   30806:	bf00      	nop
   30808:	20023f14 	.word	0x20023f14
   3080c:	000382ba 	.word	0x000382ba
   30810:	000382e0 	.word	0x000382e0
   30814:	00037a66 	.word	0x00037a66
   30818:	000382f5 	.word	0x000382f5

0003081c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   3081c:	b570      	push	{r4, r5, r6, lr}
   3081e:	4604      	mov	r4, r0
   30820:	460d      	mov	r5, r1
   30822:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");
   30826:	b16b      	cbz	r3, 30844 <z_impl_k_sem_take+0x28>
   30828:	b161      	cbz	r1, 30844 <z_impl_k_sem_take+0x28>
   3082a:	4934      	ldr	r1, [pc, #208]	; (308fc <z_impl_k_sem_take+0xe0>)
   3082c:	238c      	movs	r3, #140	; 0x8c
   3082e:	4a34      	ldr	r2, [pc, #208]	; (30900 <z_impl_k_sem_take+0xe4>)
   30830:	4834      	ldr	r0, [pc, #208]	; (30904 <z_impl_k_sem_take+0xe8>)
   30832:	f002 fe70 	bl	33516 <printk>
   30836:	4834      	ldr	r0, [pc, #208]	; (30908 <z_impl_k_sem_take+0xec>)
   30838:	f002 fe6d 	bl	33516 <printk>
   3083c:	218c      	movs	r1, #140	; 0x8c
   3083e:	4830      	ldr	r0, [pc, #192]	; (30900 <z_impl_k_sem_take+0xe4>)
   30840:	f002 feaf 	bl	335a2 <assert_post_action>
   30844:	f04f 0320 	mov.w	r3, #32
   30848:	f3ef 8611 	mrs	r6, BASEPRI
   3084c:	f383 8811 	msr	BASEPRI, r3
   30850:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   30854:	482d      	ldr	r0, [pc, #180]	; (3090c <z_impl_k_sem_take+0xf0>)
   30856:	f000 f895 	bl	30984 <z_spin_lock_valid>
   3085a:	b968      	cbnz	r0, 30878 <z_impl_k_sem_take+0x5c>
   3085c:	234a      	movs	r3, #74	; 0x4a
   3085e:	4a2c      	ldr	r2, [pc, #176]	; (30910 <z_impl_k_sem_take+0xf4>)
   30860:	492c      	ldr	r1, [pc, #176]	; (30914 <z_impl_k_sem_take+0xf8>)
   30862:	4828      	ldr	r0, [pc, #160]	; (30904 <z_impl_k_sem_take+0xe8>)
   30864:	f002 fe57 	bl	33516 <printk>
   30868:	4928      	ldr	r1, [pc, #160]	; (3090c <z_impl_k_sem_take+0xf0>)
   3086a:	482b      	ldr	r0, [pc, #172]	; (30918 <z_impl_k_sem_take+0xfc>)
   3086c:	f002 fe53 	bl	33516 <printk>
   30870:	214a      	movs	r1, #74	; 0x4a
   30872:	4827      	ldr	r0, [pc, #156]	; (30910 <z_impl_k_sem_take+0xf4>)
   30874:	f002 fe95 	bl	335a2 <assert_post_action>
	z_spin_lock_set_owner(l);
   30878:	4824      	ldr	r0, [pc, #144]	; (3090c <z_impl_k_sem_take+0xf0>)
   3087a:	f000 f8a1 	bl	309c0 <z_spin_lock_set_owner>

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
   3087e:	68a3      	ldr	r3, [r4, #8]
   30880:	b1cb      	cbz	r3, 308b6 <z_impl_k_sem_take+0x9a>
		sem->count--;
   30882:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   30884:	4821      	ldr	r0, [pc, #132]	; (3090c <z_impl_k_sem_take+0xf0>)
   30886:	60a3      	str	r3, [r4, #8]
   30888:	f000 f88a 	bl	309a0 <z_spin_unlock_valid>
   3088c:	b968      	cbnz	r0, 308aa <z_impl_k_sem_take+0x8e>
   3088e:	235d      	movs	r3, #93	; 0x5d
   30890:	4a1f      	ldr	r2, [pc, #124]	; (30910 <z_impl_k_sem_take+0xf4>)
   30892:	4922      	ldr	r1, [pc, #136]	; (3091c <z_impl_k_sem_take+0x100>)
   30894:	481b      	ldr	r0, [pc, #108]	; (30904 <z_impl_k_sem_take+0xe8>)
   30896:	f002 fe3e 	bl	33516 <printk>
   3089a:	491c      	ldr	r1, [pc, #112]	; (3090c <z_impl_k_sem_take+0xf0>)
   3089c:	4820      	ldr	r0, [pc, #128]	; (30920 <z_impl_k_sem_take+0x104>)
   3089e:	f002 fe3a 	bl	33516 <printk>
   308a2:	215d      	movs	r1, #93	; 0x5d
   308a4:	481a      	ldr	r0, [pc, #104]	; (30910 <z_impl_k_sem_take+0xf4>)
   308a6:	f002 fe7c 	bl	335a2 <assert_post_action>
	__asm__ volatile(
   308aa:	f386 8811 	msr	BASEPRI, r6
   308ae:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   308b2:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   308b4:	bd70      	pop	{r4, r5, r6, pc}
	if (timeout == K_NO_WAIT) {
   308b6:	b9c5      	cbnz	r5, 308ea <z_impl_k_sem_take+0xce>
   308b8:	4814      	ldr	r0, [pc, #80]	; (3090c <z_impl_k_sem_take+0xf0>)
   308ba:	f000 f871 	bl	309a0 <z_spin_unlock_valid>
   308be:	b968      	cbnz	r0, 308dc <z_impl_k_sem_take+0xc0>
   308c0:	235d      	movs	r3, #93	; 0x5d
   308c2:	4a13      	ldr	r2, [pc, #76]	; (30910 <z_impl_k_sem_take+0xf4>)
   308c4:	4915      	ldr	r1, [pc, #84]	; (3091c <z_impl_k_sem_take+0x100>)
   308c6:	480f      	ldr	r0, [pc, #60]	; (30904 <z_impl_k_sem_take+0xe8>)
   308c8:	f002 fe25 	bl	33516 <printk>
   308cc:	490f      	ldr	r1, [pc, #60]	; (3090c <z_impl_k_sem_take+0xf0>)
   308ce:	4814      	ldr	r0, [pc, #80]	; (30920 <z_impl_k_sem_take+0x104>)
   308d0:	f002 fe21 	bl	33516 <printk>
   308d4:	215d      	movs	r1, #93	; 0x5d
   308d6:	480e      	ldr	r0, [pc, #56]	; (30910 <z_impl_k_sem_take+0xf4>)
   308d8:	f002 fe63 	bl	335a2 <assert_post_action>
   308dc:	f386 8811 	msr	BASEPRI, r6
   308e0:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   308e4:	f06f 000f 	mvn.w	r0, #15
		goto out;
   308e8:	e7e4      	b.n	308b4 <z_impl_k_sem_take+0x98>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   308ea:	462b      	mov	r3, r5
   308ec:	4622      	mov	r2, r4
   308ee:	4631      	mov	r1, r6
}
   308f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   308f4:	4805      	ldr	r0, [pc, #20]	; (3090c <z_impl_k_sem_take+0xf0>)
   308f6:	f7ff bc65 	b.w	301c4 <z_pend_curr>
   308fa:	bf00      	nop
   308fc:	0003b067 	.word	0x0003b067
   30900:	0003b047 	.word	0x0003b047
   30904:	00037a66 	.word	0x00037a66
   30908:	00038d10 	.word	0x00038d10
   3090c:	20023f14 	.word	0x20023f14
   30910:	000382ba 	.word	0x000382ba
   30914:	000382e0 	.word	0x000382e0
   30918:	000382f5 	.word	0x000382f5
   3091c:	0003830d 	.word	0x0003830d
   30920:	00038324 	.word	0x00038324

00030924 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   30924:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   30926:	4c08      	ldr	r4, [pc, #32]	; (30948 <k_sys_work_q_init+0x24>)
   30928:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3092c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   30930:	4620      	mov	r0, r4
   30932:	4906      	ldr	r1, [pc, #24]	; (3094c <k_sys_work_q_init+0x28>)
   30934:	f000 fa08 	bl	30d48 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   30938:	4905      	ldr	r1, [pc, #20]	; (30950 <k_sys_work_q_init+0x2c>)
   3093a:	f104 0014 	add.w	r0, r4, #20
   3093e:	f004 ffd4 	bl	358ea <z_impl_k_thread_name_set>
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   30942:	2000      	movs	r0, #0
   30944:	bd10      	pop	{r4, pc}
   30946:	bf00      	nop
   30948:	20023f18 	.word	0x20023f18
   3094c:	20027c00 	.word	0x20027c00
   30950:	0003b093 	.word	0x0003b093

00030954 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
   30954:	b530      	push	{r4, r5, lr}
   30956:	b087      	sub	sp, #28
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   30958:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
   3095a:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   3095c:	9504      	str	r5, [sp, #16]
   3095e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   30960:	9503      	str	r5, [sp, #12]
   30962:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   30964:	9502      	str	r5, [sp, #8]
   30966:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   30968:	9501      	str	r5, [sp, #4]
   3096a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   3096c:	9500      	str	r5, [sp, #0]
   3096e:	f7ef fdd3 	bl	20518 <arch_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   30972:	4b03      	ldr	r3, [pc, #12]	; (30980 <z_setup_new_thread+0x2c>)
   30974:	689b      	ldr	r3, [r3, #8]
   30976:	b103      	cbz	r3, 3097a <z_setup_new_thread+0x26>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   30978:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   3097a:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
   3097c:	b007      	add	sp, #28
   3097e:	bd30      	pop	{r4, r5, pc}
   30980:	20023ed0 	.word	0x20023ed0

00030984 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   30984:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu) {
   30986:	b138      	cbz	r0, 30998 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3) == _current_cpu->id) {
   30988:	4b04      	ldr	r3, [pc, #16]	; (3099c <z_spin_lock_valid+0x18>)
   3098a:	f000 0003 	and.w	r0, r0, #3
   3098e:	7d1b      	ldrb	r3, [r3, #20]
   30990:	1ac0      	subs	r0, r0, r3
   30992:	bf18      	it	ne
   30994:	2001      	movne	r0, #1
   30996:	4770      	bx	lr
			return false;
		}
	}
	return true;
   30998:	2001      	movs	r0, #1
}
   3099a:	4770      	bx	lr
   3099c:	20023ed0 	.word	0x20023ed0

000309a0 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   309a0:	4a06      	ldr	r2, [pc, #24]	; (309bc <z_spin_unlock_valid+0x1c>)
   309a2:	7d11      	ldrb	r1, [r2, #20]
   309a4:	6893      	ldr	r3, [r2, #8]
   309a6:	6802      	ldr	r2, [r0, #0]
   309a8:	430b      	orrs	r3, r1
   309aa:	429a      	cmp	r2, r3
   309ac:	f04f 0300 	mov.w	r3, #0
		return false;
	}
	l->thread_cpu = 0;
   309b0:	bf06      	itte	eq
   309b2:	6003      	streq	r3, [r0, #0]
	return true;
   309b4:	2001      	moveq	r0, #1
		return false;
   309b6:	4618      	movne	r0, r3
}
   309b8:	4770      	bx	lr
   309ba:	bf00      	nop
   309bc:	20023ed0 	.word	0x20023ed0

000309c0 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   309c0:	4a02      	ldr	r2, [pc, #8]	; (309cc <z_spin_lock_set_owner+0xc>)
   309c2:	7d11      	ldrb	r1, [r2, #20]
   309c4:	6893      	ldr	r3, [r2, #8]
   309c6:	430b      	orrs	r3, r1
   309c8:	6003      	str	r3, [r0, #0]
}
   309ca:	4770      	bx	lr
   309cc:	20023ed0 	.word	0x20023ed0

000309d0 <z_impl_k_thread_start>:
{
   309d0:	b538      	push	{r3, r4, r5, lr}
   309d2:	4604      	mov	r4, r0
	__asm__ volatile(
   309d4:	f04f 0320 	mov.w	r3, #32
   309d8:	f3ef 8511 	mrs	r5, BASEPRI
   309dc:	f383 8811 	msr	BASEPRI, r3
   309e0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   309e4:	481f      	ldr	r0, [pc, #124]	; (30a64 <z_impl_k_thread_start+0x94>)
   309e6:	f7ff ffcd 	bl	30984 <z_spin_lock_valid>
   309ea:	b968      	cbnz	r0, 30a08 <z_impl_k_thread_start+0x38>
   309ec:	234a      	movs	r3, #74	; 0x4a
   309ee:	4a1e      	ldr	r2, [pc, #120]	; (30a68 <z_impl_k_thread_start+0x98>)
   309f0:	491e      	ldr	r1, [pc, #120]	; (30a6c <z_impl_k_thread_start+0x9c>)
   309f2:	481f      	ldr	r0, [pc, #124]	; (30a70 <z_impl_k_thread_start+0xa0>)
   309f4:	f002 fd8f 	bl	33516 <printk>
   309f8:	491a      	ldr	r1, [pc, #104]	; (30a64 <z_impl_k_thread_start+0x94>)
   309fa:	481e      	ldr	r0, [pc, #120]	; (30a74 <z_impl_k_thread_start+0xa4>)
   309fc:	f002 fd8b 	bl	33516 <printk>
   30a00:	214a      	movs	r1, #74	; 0x4a
   30a02:	4819      	ldr	r0, [pc, #100]	; (30a68 <z_impl_k_thread_start+0x98>)
   30a04:	f002 fdcd 	bl	335a2 <assert_post_action>
	z_spin_lock_set_owner(l);
   30a08:	4816      	ldr	r0, [pc, #88]	; (30a64 <z_impl_k_thread_start+0x94>)
   30a0a:	f7ff ffd9 	bl	309c0 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
   30a0e:	7b63      	ldrb	r3, [r4, #13]
   30a10:	075a      	lsls	r2, r3, #29
   30a12:	d416      	bmi.n	30a42 <z_impl_k_thread_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   30a14:	4813      	ldr	r0, [pc, #76]	; (30a64 <z_impl_k_thread_start+0x94>)
   30a16:	f7ff ffc3 	bl	309a0 <z_spin_unlock_valid>
   30a1a:	b968      	cbnz	r0, 30a38 <z_impl_k_thread_start+0x68>
   30a1c:	235d      	movs	r3, #93	; 0x5d
   30a1e:	4a12      	ldr	r2, [pc, #72]	; (30a68 <z_impl_k_thread_start+0x98>)
   30a20:	4915      	ldr	r1, [pc, #84]	; (30a78 <z_impl_k_thread_start+0xa8>)
   30a22:	4813      	ldr	r0, [pc, #76]	; (30a70 <z_impl_k_thread_start+0xa0>)
   30a24:	f002 fd77 	bl	33516 <printk>
   30a28:	490e      	ldr	r1, [pc, #56]	; (30a64 <z_impl_k_thread_start+0x94>)
   30a2a:	4814      	ldr	r0, [pc, #80]	; (30a7c <z_impl_k_thread_start+0xac>)
   30a2c:	f002 fd73 	bl	33516 <printk>
   30a30:	215d      	movs	r1, #93	; 0x5d
   30a32:	480d      	ldr	r0, [pc, #52]	; (30a68 <z_impl_k_thread_start+0x98>)
   30a34:	f002 fdb5 	bl	335a2 <assert_post_action>
	__asm__ volatile(
   30a38:	f385 8811 	msr	BASEPRI, r5
   30a3c:	f3bf 8f6f 	isb	sy
}
   30a40:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   30a42:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   30a46:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   30a4a:	7362      	strb	r2, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   30a4c:	d104      	bne.n	30a58 <z_impl_k_thread_start+0x88>
	if (z_is_thread_ready(thread)) {
   30a4e:	69a3      	ldr	r3, [r4, #24]
   30a50:	b913      	cbnz	r3, 30a58 <z_impl_k_thread_start+0x88>
		z_add_thread_to_ready_q(thread);
   30a52:	4620      	mov	r0, r4
   30a54:	f7fe fff0 	bl	2fa38 <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
   30a58:	4629      	mov	r1, r5
}
   30a5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   30a5e:	4801      	ldr	r0, [pc, #4]	; (30a64 <z_impl_k_thread_start+0x94>)
   30a60:	f7fe be00 	b.w	2f664 <z_reschedule>
   30a64:	20023fdc 	.word	0x20023fdc
   30a68:	000382ba 	.word	0x000382ba
   30a6c:	000382e0 	.word	0x000382e0
   30a70:	00037a66 	.word	0x00037a66
   30a74:	000382f5 	.word	0x000382f5
   30a78:	0003830d 	.word	0x0003830d
   30a7c:	00038324 	.word	0x00038324

00030a80 <z_impl_k_thread_create>:
{
   30a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   30a84:	b086      	sub	sp, #24
   30a86:	4604      	mov	r4, r0
   30a88:	460e      	mov	r6, r1
   30a8a:	4617      	mov	r7, r2
   30a8c:	4698      	mov	r8, r3
   30a8e:	9d11      	ldr	r5, [sp, #68]	; 0x44
   30a90:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   30a94:	b173      	cbz	r3, 30ab4 <z_impl_k_thread_create+0x34>
   30a96:	491f      	ldr	r1, [pc, #124]	; (30b14 <z_impl_k_thread_create+0x94>)
   30a98:	f240 2357 	movw	r3, #599	; 0x257
   30a9c:	4a1e      	ldr	r2, [pc, #120]	; (30b18 <z_impl_k_thread_create+0x98>)
   30a9e:	481f      	ldr	r0, [pc, #124]	; (30b1c <z_impl_k_thread_create+0x9c>)
   30aa0:	f002 fd39 	bl	33516 <printk>
   30aa4:	481e      	ldr	r0, [pc, #120]	; (30b20 <z_impl_k_thread_create+0xa0>)
   30aa6:	f002 fd36 	bl	33516 <printk>
   30aaa:	f240 2157 	movw	r1, #599	; 0x257
   30aae:	481a      	ldr	r0, [pc, #104]	; (30b18 <z_impl_k_thread_create+0x98>)
   30ab0:	f002 fd77 	bl	335a2 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   30ab4:	2300      	movs	r3, #0
   30ab6:	9305      	str	r3, [sp, #20]
   30ab8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   30aba:	463a      	mov	r2, r7
   30abc:	9304      	str	r3, [sp, #16]
   30abe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   30ac0:	4631      	mov	r1, r6
   30ac2:	9303      	str	r3, [sp, #12]
   30ac4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   30ac6:	4620      	mov	r0, r4
   30ac8:	9302      	str	r3, [sp, #8]
   30aca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   30acc:	9301      	str	r3, [sp, #4]
   30ace:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   30ad0:	9300      	str	r3, [sp, #0]
   30ad2:	4643      	mov	r3, r8
   30ad4:	f7ff ff3e 	bl	30954 <z_setup_new_thread>
	if (delay != K_FOREVER) {
   30ad8:	1c6b      	adds	r3, r5, #1
   30ada:	d003      	beq.n	30ae4 <z_impl_k_thread_create+0x64>
	if (delay == 0) {
   30adc:	b935      	cbnz	r5, 30aec <z_impl_k_thread_create+0x6c>
	z_impl_k_thread_start(thread);
   30ade:	4620      	mov	r0, r4
   30ae0:	f7ff ff76 	bl	309d0 <z_impl_k_thread_start>
}
   30ae4:	4620      	mov	r0, r4
   30ae6:	b006      	add	sp, #24
   30ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return (u32_t)((t * to_hz + off) / from_hz);
   30aec:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   30af0:	f240 30e7 	movw	r0, #999	; 0x3e7
   30af4:	2100      	movs	r1, #0
   30af6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   30afa:	2300      	movs	r3, #0
   30afc:	fbe6 0105 	umlal	r0, r1, r6, r5
   30b00:	f7eb ff0a 	bl	1c918 <__aeabi_uldivmod>
   30b04:	4907      	ldr	r1, [pc, #28]	; (30b24 <z_impl_k_thread_create+0xa4>)
   30b06:	1c42      	adds	r2, r0, #1
   30b08:	f104 0018 	add.w	r0, r4, #24
   30b0c:	f000 fa02 	bl	30f14 <z_add_timeout>
}
   30b10:	e7e8      	b.n	30ae4 <z_impl_k_thread_create+0x64>
   30b12:	bf00      	nop
   30b14:	0003aefe 	.word	0x0003aefe
   30b18:	0003b09c 	.word	0x0003b09c
   30b1c:	00037a66 	.word	0x00037a66
   30b20:	0003b0bf 	.word	0x0003b0bf
   30b24:	0002fb41 	.word	0x0002fb41

00030b28 <z_init_static_threads>:
{
   30b28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   30b2c:	4f3c      	ldr	r7, [pc, #240]	; (30c20 <z_init_static_threads+0xf8>)
   30b2e:	4d3d      	ldr	r5, [pc, #244]	; (30c24 <z_init_static_threads+0xfc>)
   30b30:	463e      	mov	r6, r7
   30b32:	f8df 8100 	ldr.w	r8, [pc, #256]	; 30c34 <z_init_static_threads+0x10c>
{
   30b36:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   30b38:	42bd      	cmp	r5, r7
   30b3a:	d90e      	bls.n	30b5a <z_init_static_threads+0x32>
   30b3c:	493a      	ldr	r1, [pc, #232]	; (30c28 <z_init_static_threads+0x100>)
   30b3e:	f240 23e7 	movw	r3, #743	; 0x2e7
   30b42:	4642      	mov	r2, r8
   30b44:	4839      	ldr	r0, [pc, #228]	; (30c2c <z_init_static_threads+0x104>)
   30b46:	f002 fce6 	bl	33516 <printk>
   30b4a:	4839      	ldr	r0, [pc, #228]	; (30c30 <z_init_static_threads+0x108>)
   30b4c:	f002 fce3 	bl	33516 <printk>
   30b50:	f240 21e7 	movw	r1, #743	; 0x2e7
   30b54:	4640      	mov	r0, r8
   30b56:	f002 fd24 	bl	335a2 <assert_post_action>
   30b5a:	42b5      	cmp	r5, r6
   30b5c:	f105 0430 	add.w	r4, r5, #48	; 0x30
   30b60:	d31f      	bcc.n	30ba2 <z_init_static_threads+0x7a>
	k_sched_lock();
   30b62:	f7fe fdbb 	bl	2f6dc <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   30b66:	4c2f      	ldr	r4, [pc, #188]	; (30c24 <z_init_static_threads+0xfc>)
   30b68:	4d32      	ldr	r5, [pc, #200]	; (30c34 <z_init_static_threads+0x10c>)
   30b6a:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 30c28 <z_init_static_threads+0x100>
   30b6e:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 30c2c <z_init_static_threads+0x104>
   30b72:	42b4      	cmp	r4, r6
   30b74:	d90e      	bls.n	30b94 <z_init_static_threads+0x6c>
   30b76:	4641      	mov	r1, r8
   30b78:	f240 3306 	movw	r3, #774	; 0x306
   30b7c:	462a      	mov	r2, r5
   30b7e:	4648      	mov	r0, r9
   30b80:	f002 fcc9 	bl	33516 <printk>
   30b84:	482a      	ldr	r0, [pc, #168]	; (30c30 <z_init_static_threads+0x108>)
   30b86:	f002 fcc6 	bl	33516 <printk>
   30b8a:	f240 3106 	movw	r1, #774	; 0x306
   30b8e:	4628      	mov	r0, r5
   30b90:	f002 fd07 	bl	335a2 <assert_post_action>
   30b94:	42b4      	cmp	r4, r6
   30b96:	d321      	bcc.n	30bdc <z_init_static_threads+0xb4>
}
   30b98:	b007      	add	sp, #28
   30b9a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   30b9e:	f7fe becf 	b.w	2f940 <k_sched_unlock>
		z_setup_new_thread(
   30ba2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   30ba6:	9305      	str	r3, [sp, #20]
   30ba8:	f854 3c10 	ldr.w	r3, [r4, #-16]
   30bac:	9304      	str	r3, [sp, #16]
   30bae:	f854 3c14 	ldr.w	r3, [r4, #-20]
   30bb2:	9303      	str	r3, [sp, #12]
   30bb4:	f854 3c18 	ldr.w	r3, [r4, #-24]
   30bb8:	9302      	str	r3, [sp, #8]
   30bba:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   30bbe:	9301      	str	r3, [sp, #4]
   30bc0:	f854 3c20 	ldr.w	r3, [r4, #-32]
   30bc4:	9300      	str	r3, [sp, #0]
   30bc6:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   30bca:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   30bce:	f7ff fec1 	bl	30954 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   30bd2:	f854 3c30 	ldr.w	r3, [r4, #-48]
   30bd6:	64dd      	str	r5, [r3, #76]	; 0x4c
   30bd8:	4625      	mov	r5, r4
   30bda:	e7ad      	b.n	30b38 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_FOREVER) {
   30bdc:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   30be0:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
   30be4:	d006      	beq.n	30bf4 <z_init_static_threads+0xcc>
			schedule_new_thread(thread_data->init_thread,
   30be6:	6827      	ldr	r7, [r4, #0]
	if (delay == 0) {
   30be8:	f1bc 0f00 	cmp.w	ip, #0
   30bec:	d104      	bne.n	30bf8 <z_init_static_threads+0xd0>
   30bee:	4638      	mov	r0, r7
   30bf0:	f7ff feee 	bl	309d0 <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   30bf4:	3430      	adds	r4, #48	; 0x30
   30bf6:	e7bc      	b.n	30b72 <z_init_static_threads+0x4a>
   30bf8:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   30bfc:	f240 30e7 	movw	r0, #999	; 0x3e7
   30c00:	2100      	movs	r1, #0
   30c02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   30c06:	2300      	movs	r3, #0
   30c08:	fbee 010c 	umlal	r0, r1, lr, ip
   30c0c:	f7eb fe84 	bl	1c918 <__aeabi_uldivmod>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   30c10:	4909      	ldr	r1, [pc, #36]	; (30c38 <z_init_static_threads+0x110>)
   30c12:	1c42      	adds	r2, r0, #1
   30c14:	f107 0018 	add.w	r0, r7, #24
   30c18:	f000 f97c 	bl	30f14 <z_add_timeout>
}
   30c1c:	e7ea      	b.n	30bf4 <z_init_static_threads+0xcc>
   30c1e:	bf00      	nop
   30c20:	20029850 	.word	0x20029850
   30c24:	20029850 	.word	0x20029850
   30c28:	0003b0e4 	.word	0x0003b0e4
   30c2c:	00037a66 	.word	0x00037a66
   30c30:	00038117 	.word	0x00038117
   30c34:	0003b09c 	.word	0x0003b09c
   30c38:	0002fb41 	.word	0x0002fb41

00030c3c <z_impl_k_thread_suspend>:
{
   30c3c:	b538      	push	{r3, r4, r5, lr}
   30c3e:	4604      	mov	r4, r0
	__asm__ volatile(
   30c40:	f04f 0320 	mov.w	r3, #32
   30c44:	f3ef 8511 	mrs	r5, BASEPRI
   30c48:	f383 8811 	msr	BASEPRI, r3
   30c4c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   30c50:	481c      	ldr	r0, [pc, #112]	; (30cc4 <z_impl_k_thread_suspend+0x88>)
   30c52:	f7ff fe97 	bl	30984 <z_spin_lock_valid>
   30c56:	b968      	cbnz	r0, 30c74 <z_impl_k_thread_suspend+0x38>
   30c58:	234a      	movs	r3, #74	; 0x4a
   30c5a:	4a1b      	ldr	r2, [pc, #108]	; (30cc8 <z_impl_k_thread_suspend+0x8c>)
   30c5c:	491b      	ldr	r1, [pc, #108]	; (30ccc <z_impl_k_thread_suspend+0x90>)
   30c5e:	481c      	ldr	r0, [pc, #112]	; (30cd0 <z_impl_k_thread_suspend+0x94>)
   30c60:	f002 fc59 	bl	33516 <printk>
   30c64:	4917      	ldr	r1, [pc, #92]	; (30cc4 <z_impl_k_thread_suspend+0x88>)
   30c66:	481b      	ldr	r0, [pc, #108]	; (30cd4 <z_impl_k_thread_suspend+0x98>)
   30c68:	f002 fc55 	bl	33516 <printk>
   30c6c:	214a      	movs	r1, #74	; 0x4a
   30c6e:	4816      	ldr	r0, [pc, #88]	; (30cc8 <z_impl_k_thread_suspend+0x8c>)
   30c70:	f002 fc97 	bl	335a2 <assert_post_action>
	z_spin_lock_set_owner(l);
   30c74:	4813      	ldr	r0, [pc, #76]	; (30cc4 <z_impl_k_thread_suspend+0x88>)
   30c76:	f7ff fea3 	bl	309c0 <z_spin_lock_set_owner>
	z_thread_single_suspend(thread);
   30c7a:	4620      	mov	r0, r4
   30c7c:	f7ff f892 	bl	2fda4 <z_thread_single_suspend>
	if (thread == _current) {
   30c80:	4b15      	ldr	r3, [pc, #84]	; (30cd8 <z_impl_k_thread_suspend+0x9c>)
   30c82:	689b      	ldr	r3, [r3, #8]
   30c84:	42a3      	cmp	r3, r4
   30c86:	d105      	bne.n	30c94 <z_impl_k_thread_suspend+0x58>
		z_reschedule(&lock, key);
   30c88:	4629      	mov	r1, r5
}
   30c8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&lock, key);
   30c8e:	480d      	ldr	r0, [pc, #52]	; (30cc4 <z_impl_k_thread_suspend+0x88>)
   30c90:	f7fe bce8 	b.w	2f664 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   30c94:	480b      	ldr	r0, [pc, #44]	; (30cc4 <z_impl_k_thread_suspend+0x88>)
   30c96:	f7ff fe83 	bl	309a0 <z_spin_unlock_valid>
   30c9a:	b968      	cbnz	r0, 30cb8 <z_impl_k_thread_suspend+0x7c>
   30c9c:	235d      	movs	r3, #93	; 0x5d
   30c9e:	4a0a      	ldr	r2, [pc, #40]	; (30cc8 <z_impl_k_thread_suspend+0x8c>)
   30ca0:	490e      	ldr	r1, [pc, #56]	; (30cdc <z_impl_k_thread_suspend+0xa0>)
   30ca2:	480b      	ldr	r0, [pc, #44]	; (30cd0 <z_impl_k_thread_suspend+0x94>)
   30ca4:	f002 fc37 	bl	33516 <printk>
   30ca8:	4906      	ldr	r1, [pc, #24]	; (30cc4 <z_impl_k_thread_suspend+0x88>)
   30caa:	480d      	ldr	r0, [pc, #52]	; (30ce0 <z_impl_k_thread_suspend+0xa4>)
   30cac:	f002 fc33 	bl	33516 <printk>
   30cb0:	215d      	movs	r1, #93	; 0x5d
   30cb2:	4805      	ldr	r0, [pc, #20]	; (30cc8 <z_impl_k_thread_suspend+0x8c>)
   30cb4:	f002 fc75 	bl	335a2 <assert_post_action>
	__asm__ volatile(
   30cb8:	f385 8811 	msr	BASEPRI, r5
   30cbc:	f3bf 8f6f 	isb	sy
}
   30cc0:	bd38      	pop	{r3, r4, r5, pc}
   30cc2:	bf00      	nop
   30cc4:	20023fdc 	.word	0x20023fdc
   30cc8:	000382ba 	.word	0x000382ba
   30ccc:	000382e0 	.word	0x000382e0
   30cd0:	00037a66 	.word	0x00037a66
   30cd4:	000382f5 	.word	0x000382f5
   30cd8:	20023ed0 	.word	0x20023ed0
   30cdc:	0003830d 	.word	0x0003830d
   30ce0:	00038324 	.word	0x00038324

00030ce4 <z_impl_k_thread_resume>:
{
   30ce4:	b538      	push	{r3, r4, r5, lr}
   30ce6:	4604      	mov	r4, r0
	__asm__ volatile(
   30ce8:	f04f 0320 	mov.w	r3, #32
   30cec:	f3ef 8511 	mrs	r5, BASEPRI
   30cf0:	f383 8811 	msr	BASEPRI, r3
   30cf4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   30cf8:	480e      	ldr	r0, [pc, #56]	; (30d34 <z_impl_k_thread_resume+0x50>)
   30cfa:	f7ff fe43 	bl	30984 <z_spin_lock_valid>
   30cfe:	b968      	cbnz	r0, 30d1c <z_impl_k_thread_resume+0x38>
   30d00:	234a      	movs	r3, #74	; 0x4a
   30d02:	4a0d      	ldr	r2, [pc, #52]	; (30d38 <z_impl_k_thread_resume+0x54>)
   30d04:	490d      	ldr	r1, [pc, #52]	; (30d3c <z_impl_k_thread_resume+0x58>)
   30d06:	480e      	ldr	r0, [pc, #56]	; (30d40 <z_impl_k_thread_resume+0x5c>)
   30d08:	f002 fc05 	bl	33516 <printk>
   30d0c:	4909      	ldr	r1, [pc, #36]	; (30d34 <z_impl_k_thread_resume+0x50>)
   30d0e:	480d      	ldr	r0, [pc, #52]	; (30d44 <z_impl_k_thread_resume+0x60>)
   30d10:	f002 fc01 	bl	33516 <printk>
   30d14:	214a      	movs	r1, #74	; 0x4a
   30d16:	4808      	ldr	r0, [pc, #32]	; (30d38 <z_impl_k_thread_resume+0x54>)
   30d18:	f002 fc43 	bl	335a2 <assert_post_action>
	z_spin_lock_set_owner(l);
   30d1c:	4805      	ldr	r0, [pc, #20]	; (30d34 <z_impl_k_thread_resume+0x50>)
   30d1e:	f7ff fe4f 	bl	309c0 <z_spin_lock_set_owner>
	z_thread_single_resume(thread);
   30d22:	4620      	mov	r0, r4
   30d24:	f004 fdf5 	bl	35912 <z_thread_single_resume>
	z_reschedule(&lock, key);
   30d28:	4629      	mov	r1, r5
}
   30d2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   30d2e:	4801      	ldr	r0, [pc, #4]	; (30d34 <z_impl_k_thread_resume+0x50>)
   30d30:	f7fe bc98 	b.w	2f664 <z_reschedule>
   30d34:	20023fdc 	.word	0x20023fdc
   30d38:	000382ba 	.word	0x000382ba
   30d3c:	000382e0 	.word	0x000382e0
   30d40:	00037a66 	.word	0x00037a66
   30d44:	000382f5 	.word	0x000382f5

00030d48 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   30d48:	b570      	push	{r4, r5, r6, lr}
   30d4a:	b088      	sub	sp, #32
   30d4c:	4604      	mov	r4, r0
   30d4e:	461d      	mov	r5, r3
   30d50:	e9cd 2106 	strd	r2, r1, [sp, #24]
	z_impl_k_queue_init(queue);
   30d54:	f004 fd5d 	bl	35812 <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   30d58:	f104 0614 	add.w	r6, r4, #20
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   30d5c:	2000      	movs	r0, #0
   30d5e:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
   30d62:	e9cd 0004 	strd	r0, r0, [sp, #16]
   30d66:	e9cd 0502 	strd	r0, r5, [sp, #8]
   30d6a:	e9cd 4000 	strd	r4, r0, [sp]
   30d6e:	4b05      	ldr	r3, [pc, #20]	; (30d84 <k_work_q_start+0x3c>)
   30d70:	4630      	mov	r0, r6
   30d72:	f7ff fe85 	bl	30a80 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   30d76:	4630      	mov	r0, r6
   30d78:	4903      	ldr	r1, [pc, #12]	; (30d88 <k_work_q_start+0x40>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   30d7a:	b008      	add	sp, #32
   30d7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   30d80:	f004 bdb3 	b.w	358ea <z_impl_k_thread_name_set>
   30d84:	0003356d 	.word	0x0003356d
   30d88:	0003b111 	.word	0x0003b111

00030d8c <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   s32_t delay)
{
   30d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   30d90:	4605      	mov	r5, r0
   30d92:	460e      	mov	r6, r1
   30d94:	4617      	mov	r7, r2
   30d96:	f04f 0320 	mov.w	r3, #32
   30d9a:	f3ef 8811 	mrs	r8, BASEPRI
   30d9e:	f383 8811 	msr	BASEPRI, r3
   30da2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   30da6:	4836      	ldr	r0, [pc, #216]	; (30e80 <k_delayed_work_submit_to_queue+0xf4>)
   30da8:	f7ff fdec 	bl	30984 <z_spin_lock_valid>
   30dac:	b968      	cbnz	r0, 30dca <k_delayed_work_submit_to_queue+0x3e>
   30dae:	234a      	movs	r3, #74	; 0x4a
   30db0:	4a34      	ldr	r2, [pc, #208]	; (30e84 <k_delayed_work_submit_to_queue+0xf8>)
   30db2:	4935      	ldr	r1, [pc, #212]	; (30e88 <k_delayed_work_submit_to_queue+0xfc>)
   30db4:	4835      	ldr	r0, [pc, #212]	; (30e8c <k_delayed_work_submit_to_queue+0x100>)
   30db6:	f002 fbae 	bl	33516 <printk>
   30dba:	4931      	ldr	r1, [pc, #196]	; (30e80 <k_delayed_work_submit_to_queue+0xf4>)
   30dbc:	4834      	ldr	r0, [pc, #208]	; (30e90 <k_delayed_work_submit_to_queue+0x104>)
   30dbe:	f002 fbaa 	bl	33516 <printk>
   30dc2:	214a      	movs	r1, #74	; 0x4a
   30dc4:	482f      	ldr	r0, [pc, #188]	; (30e84 <k_delayed_work_submit_to_queue+0xf8>)
   30dc6:	f002 fbec 	bl	335a2 <assert_post_action>
	z_spin_lock_set_owner(l);
   30dca:	482d      	ldr	r0, [pc, #180]	; (30e80 <k_delayed_work_submit_to_queue+0xf4>)
   30dcc:	f7ff fdf8 	bl	309c0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   30dd0:	69f4      	ldr	r4, [r6, #28]
   30dd2:	b1ec      	cbz	r4, 30e10 <k_delayed_work_submit_to_queue+0x84>
   30dd4:	42ac      	cmp	r4, r5
   30dd6:	d150      	bne.n	30e7a <k_delayed_work_submit_to_queue+0xee>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   30dd8:	4630      	mov	r0, r6
   30dda:	f004 fdbe 	bl	3595a <work_cancel>
		if (err < 0) {
   30dde:	1e04      	subs	r4, r0, #0
   30de0:	da18      	bge.n	30e14 <k_delayed_work_submit_to_queue+0x88>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   30de2:	4827      	ldr	r0, [pc, #156]	; (30e80 <k_delayed_work_submit_to_queue+0xf4>)
   30de4:	f7ff fddc 	bl	309a0 <z_spin_unlock_valid>
   30de8:	b968      	cbnz	r0, 30e06 <k_delayed_work_submit_to_queue+0x7a>
   30dea:	235d      	movs	r3, #93	; 0x5d
   30dec:	4a25      	ldr	r2, [pc, #148]	; (30e84 <k_delayed_work_submit_to_queue+0xf8>)
   30dee:	4929      	ldr	r1, [pc, #164]	; (30e94 <k_delayed_work_submit_to_queue+0x108>)
   30df0:	4826      	ldr	r0, [pc, #152]	; (30e8c <k_delayed_work_submit_to_queue+0x100>)
   30df2:	f002 fb90 	bl	33516 <printk>
   30df6:	4922      	ldr	r1, [pc, #136]	; (30e80 <k_delayed_work_submit_to_queue+0xf4>)
   30df8:	4827      	ldr	r0, [pc, #156]	; (30e98 <k_delayed_work_submit_to_queue+0x10c>)
   30dfa:	f002 fb8c 	bl	33516 <printk>
   30dfe:	215d      	movs	r1, #93	; 0x5d
   30e00:	4820      	ldr	r0, [pc, #128]	; (30e84 <k_delayed_work_submit_to_queue+0xf8>)
   30e02:	f002 fbce 	bl	335a2 <assert_post_action>
	__asm__ volatile(
   30e06:	f388 8811 	msr	BASEPRI, r8
   30e0a:	f3bf 8f6f 	isb	sy
	z_add_timeout(&work->timeout, work_timeout,
		     _TICK_ALIGN + k_ms_to_ticks_ceil32(delay));

done:
	k_spin_unlock(&lock, key);
	return err;
   30e0e:	e01e      	b.n	30e4e <k_delayed_work_submit_to_queue+0xc2>
	if (work->work_q == work_q) {
   30e10:	2d00      	cmp	r5, #0
   30e12:	d0e1      	beq.n	30dd8 <k_delayed_work_submit_to_queue+0x4c>
	work->work_q = work_q;
   30e14:	61f5      	str	r5, [r6, #28]
	if (delay == 0) {
   30e16:	b9ef      	cbnz	r7, 30e54 <k_delayed_work_submit_to_queue+0xc8>
   30e18:	4819      	ldr	r0, [pc, #100]	; (30e80 <k_delayed_work_submit_to_queue+0xf4>)
   30e1a:	f7ff fdc1 	bl	309a0 <z_spin_unlock_valid>
   30e1e:	b968      	cbnz	r0, 30e3c <k_delayed_work_submit_to_queue+0xb0>
   30e20:	235d      	movs	r3, #93	; 0x5d
   30e22:	4a18      	ldr	r2, [pc, #96]	; (30e84 <k_delayed_work_submit_to_queue+0xf8>)
   30e24:	491b      	ldr	r1, [pc, #108]	; (30e94 <k_delayed_work_submit_to_queue+0x108>)
   30e26:	4819      	ldr	r0, [pc, #100]	; (30e8c <k_delayed_work_submit_to_queue+0x100>)
   30e28:	f002 fb75 	bl	33516 <printk>
   30e2c:	4914      	ldr	r1, [pc, #80]	; (30e80 <k_delayed_work_submit_to_queue+0xf4>)
   30e2e:	481a      	ldr	r0, [pc, #104]	; (30e98 <k_delayed_work_submit_to_queue+0x10c>)
   30e30:	f002 fb71 	bl	33516 <printk>
   30e34:	215d      	movs	r1, #93	; 0x5d
   30e36:	4813      	ldr	r0, [pc, #76]	; (30e84 <k_delayed_work_submit_to_queue+0xf8>)
   30e38:	f002 fbb3 	bl	335a2 <assert_post_action>
   30e3c:	f388 8811 	msr	BASEPRI, r8
   30e40:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   30e44:	4631      	mov	r1, r6
   30e46:	4628      	mov	r0, r5
   30e48:	f004 fd6e 	bl	35928 <k_work_submit_to_queue>
		return 0;
   30e4c:	2400      	movs	r4, #0
}
   30e4e:	4620      	mov	r0, r4
   30e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   30e54:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   30e58:	f240 30e7 	movw	r0, #999	; 0x3e7
   30e5c:	2100      	movs	r1, #0
   30e5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   30e62:	2300      	movs	r3, #0
   30e64:	fbe5 0107 	umlal	r0, r1, r5, r7
   30e68:	f7eb fd56 	bl	1c918 <__aeabi_uldivmod>
	z_add_timeout(&work->timeout, work_timeout,
   30e6c:	490b      	ldr	r1, [pc, #44]	; (30e9c <k_delayed_work_submit_to_queue+0x110>)
   30e6e:	1c42      	adds	r2, r0, #1
   30e70:	f106 000c 	add.w	r0, r6, #12
   30e74:	f000 f84e 	bl	30f14 <z_add_timeout>
   30e78:	e7b3      	b.n	30de2 <k_delayed_work_submit_to_queue+0x56>
		err = -EADDRINUSE;
   30e7a:	f06f 046f 	mvn.w	r4, #111	; 0x6f
   30e7e:	e7b0      	b.n	30de2 <k_delayed_work_submit_to_queue+0x56>
   30e80:	20023fe0 	.word	0x20023fe0
   30e84:	000382ba 	.word	0x000382ba
   30e88:	000382e0 	.word	0x000382e0
   30e8c:	00037a66 	.word	0x00037a66
   30e90:	000382f5 	.word	0x000382f5
   30e94:	0003830d 	.word	0x0003830d
   30e98:	00038324 	.word	0x00038324
   30e9c:	00035951 	.word	0x00035951

00030ea0 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   30ea0:	4b03      	ldr	r3, [pc, #12]	; (30eb0 <elapsed+0x10>)
   30ea2:	681b      	ldr	r3, [r3, #0]
   30ea4:	b90b      	cbnz	r3, 30eaa <elapsed+0xa>
   30ea6:	f7ef b9ab 	b.w	20200 <z_clock_elapsed>
}
   30eaa:	2000      	movs	r0, #0
   30eac:	4770      	bx	lr
   30eae:	bf00      	nop
   30eb0:	20023fe4 	.word	0x20023fe4

00030eb4 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   30eb4:	6803      	ldr	r3, [r0, #0]
   30eb6:	b140      	cbz	r0, 30eca <remove_timeout+0x16>
   30eb8:	4a07      	ldr	r2, [pc, #28]	; (30ed8 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
   30eba:	6852      	ldr	r2, [r2, #4]
   30ebc:	4290      	cmp	r0, r2
   30ebe:	d004      	beq.n	30eca <remove_timeout+0x16>
	if (next(t) != NULL) {
   30ec0:	b11b      	cbz	r3, 30eca <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
   30ec2:	689a      	ldr	r2, [r3, #8]
   30ec4:	6881      	ldr	r1, [r0, #8]
   30ec6:	440a      	add	r2, r1
   30ec8:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
   30eca:	6842      	ldr	r2, [r0, #4]
   30ecc:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   30ece:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   30ed0:	2300      	movs	r3, #0
	node->prev = NULL;
   30ed2:	e9c0 3300 	strd	r3, r3, [r0]
}
   30ed6:	4770      	bx	lr
   30ed8:	200295b4 	.word	0x200295b4

00030edc <next_timeout>:
	return list->head == list;
   30edc:	4b0b      	ldr	r3, [pc, #44]	; (30f0c <next_timeout+0x30>)

static s32_t next_timeout(void)
{
   30ede:	b510      	push	{r4, lr}
   30ee0:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   30ee2:	429c      	cmp	r4, r3
   30ee4:	bf08      	it	eq
   30ee6:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
   30ee8:	f7ff ffda 	bl	30ea0 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   30eec:	b154      	cbz	r4, 30f04 <next_timeout+0x28>
   30eee:	68a3      	ldr	r3, [r4, #8]
   30ef0:	1a18      	subs	r0, r3, r0
   30ef2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   30ef6:	4b06      	ldr	r3, [pc, #24]	; (30f10 <next_timeout+0x34>)
   30ef8:	691b      	ldr	r3, [r3, #16]
   30efa:	b113      	cbz	r3, 30f02 <next_timeout+0x26>
   30efc:	4298      	cmp	r0, r3
   30efe:	bfa8      	it	ge
   30f00:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   30f02:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   30f04:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   30f08:	e7f5      	b.n	30ef6 <next_timeout+0x1a>
   30f0a:	bf00      	nop
   30f0c:	200295b4 	.word	0x200295b4
   30f10:	20023ed0 	.word	0x20023ed0

00030f14 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   30f14:	6803      	ldr	r3, [r0, #0]
{
   30f16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   30f1a:	4604      	mov	r4, r0
   30f1c:	460e      	mov	r6, r1
   30f1e:	4615      	mov	r5, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   30f20:	b163      	cbz	r3, 30f3c <z_add_timeout+0x28>
   30f22:	4944      	ldr	r1, [pc, #272]	; (31034 <z_add_timeout+0x120>)
   30f24:	2358      	movs	r3, #88	; 0x58
   30f26:	4a44      	ldr	r2, [pc, #272]	; (31038 <z_add_timeout+0x124>)
   30f28:	4844      	ldr	r0, [pc, #272]	; (3103c <z_add_timeout+0x128>)
   30f2a:	f002 faf4 	bl	33516 <printk>
   30f2e:	4844      	ldr	r0, [pc, #272]	; (31040 <z_add_timeout+0x12c>)
   30f30:	f002 faf1 	bl	33516 <printk>
   30f34:	2158      	movs	r1, #88	; 0x58
   30f36:	4840      	ldr	r0, [pc, #256]	; (31038 <z_add_timeout+0x124>)
   30f38:	f002 fb33 	bl	335a2 <assert_post_action>
	to->fn = fn;
	ticks = MAX(1, ticks);
   30f3c:	2d01      	cmp	r5, #1
   30f3e:	bfb8      	it	lt
   30f40:	2501      	movlt	r5, #1
	to->fn = fn;
   30f42:	60e6      	str	r6, [r4, #12]
	__asm__ volatile(
   30f44:	f04f 0320 	mov.w	r3, #32
   30f48:	f3ef 8711 	mrs	r7, BASEPRI
   30f4c:	f383 8811 	msr	BASEPRI, r3
   30f50:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   30f54:	483b      	ldr	r0, [pc, #236]	; (31044 <z_add_timeout+0x130>)
   30f56:	f7ff fd15 	bl	30984 <z_spin_lock_valid>
   30f5a:	b968      	cbnz	r0, 30f78 <z_add_timeout+0x64>
   30f5c:	234a      	movs	r3, #74	; 0x4a
   30f5e:	4a3a      	ldr	r2, [pc, #232]	; (31048 <z_add_timeout+0x134>)
   30f60:	493a      	ldr	r1, [pc, #232]	; (3104c <z_add_timeout+0x138>)
   30f62:	4836      	ldr	r0, [pc, #216]	; (3103c <z_add_timeout+0x128>)
   30f64:	f002 fad7 	bl	33516 <printk>
   30f68:	4936      	ldr	r1, [pc, #216]	; (31044 <z_add_timeout+0x130>)
   30f6a:	4839      	ldr	r0, [pc, #228]	; (31050 <z_add_timeout+0x13c>)
   30f6c:	f002 fad3 	bl	33516 <printk>
   30f70:	214a      	movs	r1, #74	; 0x4a
   30f72:	4835      	ldr	r0, [pc, #212]	; (31048 <z_add_timeout+0x134>)
   30f74:	f002 fb15 	bl	335a2 <assert_post_action>
	z_spin_lock_set_owner(l);
   30f78:	4832      	ldr	r0, [pc, #200]	; (31044 <z_add_timeout+0x130>)
   30f7a:	f7ff fd21 	bl	309c0 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   30f7e:	f7ff ff8f 	bl	30ea0 <elapsed>
   30f82:	4428      	add	r0, r5
	return list->head == list;
   30f84:	4d33      	ldr	r5, [pc, #204]	; (31054 <z_add_timeout+0x140>)
   30f86:	60a0      	str	r0, [r4, #8]
   30f88:	682e      	ldr	r6, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   30f8a:	42ae      	cmp	r6, r5
   30f8c:	d006      	beq.n	30f9c <z_add_timeout+0x88>
		for (t = first(); t != NULL; t = next(t)) {
			__ASSERT(t->dticks >= 0, "");
   30f8e:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 31038 <z_add_timeout+0x124>
   30f92:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 31060 <z_add_timeout+0x14c>
   30f96:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 3103c <z_add_timeout+0x128>
		for (t = first(); t != NULL; t = next(t)) {
   30f9a:	b936      	cbnz	r6, 30faa <z_add_timeout+0x96>
	node->prev = list->tail;
   30f9c:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   30f9e:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   30fa0:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   30fa2:	686b      	ldr	r3, [r5, #4]
   30fa4:	601c      	str	r4, [r3, #0]
	list->tail = node;
   30fa6:	606c      	str	r4, [r5, #4]
}
   30fa8:	e01a      	b.n	30fe0 <z_add_timeout+0xcc>
			__ASSERT(t->dticks >= 0, "");
   30faa:	68b3      	ldr	r3, [r6, #8]
   30fac:	2b00      	cmp	r3, #0
   30fae:	da0c      	bge.n	30fca <z_add_timeout+0xb6>
   30fb0:	4641      	mov	r1, r8
   30fb2:	2361      	movs	r3, #97	; 0x61
   30fb4:	4652      	mov	r2, sl
   30fb6:	4648      	mov	r0, r9
   30fb8:	f002 faad 	bl	33516 <printk>
   30fbc:	4820      	ldr	r0, [pc, #128]	; (31040 <z_add_timeout+0x12c>)
   30fbe:	f002 faaa 	bl	33516 <printk>
   30fc2:	2161      	movs	r1, #97	; 0x61
   30fc4:	4650      	mov	r0, sl
   30fc6:	f002 faec 	bl	335a2 <assert_post_action>

			if (t->dticks > to->dticks) {
   30fca:	68b2      	ldr	r2, [r6, #8]
   30fcc:	68a3      	ldr	r3, [r4, #8]
   30fce:	429a      	cmp	r2, r3
   30fd0:	dd28      	ble.n	31024 <z_add_timeout+0x110>
				t->dticks -= to->dticks;
   30fd2:	1ad3      	subs	r3, r2, r3
   30fd4:	60b3      	str	r3, [r6, #8]
	node->prev = successor->prev;
   30fd6:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   30fd8:	e9c4 6300 	strd	r6, r3, [r4]
	successor->prev->next = node;
   30fdc:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   30fde:	6074      	str	r4, [r6, #4]
	return list->head == list;
   30fe0:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   30fe2:	42ab      	cmp	r3, r5
   30fe4:	d006      	beq.n	30ff4 <z_add_timeout+0xe0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   30fe6:	429c      	cmp	r4, r3
   30fe8:	d104      	bne.n	30ff4 <z_add_timeout+0xe0>
			z_clock_set_timeout(next_timeout(), false);
   30fea:	f7ff ff77 	bl	30edc <next_timeout>
   30fee:	2100      	movs	r1, #0
   30ff0:	f7ef f878 	bl	200e4 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   30ff4:	4813      	ldr	r0, [pc, #76]	; (31044 <z_add_timeout+0x130>)
   30ff6:	f7ff fcd3 	bl	309a0 <z_spin_unlock_valid>
   30ffa:	b968      	cbnz	r0, 31018 <z_add_timeout+0x104>
   30ffc:	235d      	movs	r3, #93	; 0x5d
   30ffe:	4a12      	ldr	r2, [pc, #72]	; (31048 <z_add_timeout+0x134>)
   31000:	4915      	ldr	r1, [pc, #84]	; (31058 <z_add_timeout+0x144>)
   31002:	480e      	ldr	r0, [pc, #56]	; (3103c <z_add_timeout+0x128>)
   31004:	f002 fa87 	bl	33516 <printk>
   31008:	490e      	ldr	r1, [pc, #56]	; (31044 <z_add_timeout+0x130>)
   3100a:	4814      	ldr	r0, [pc, #80]	; (3105c <z_add_timeout+0x148>)
   3100c:	f002 fa83 	bl	33516 <printk>
   31010:	215d      	movs	r1, #93	; 0x5d
   31012:	480d      	ldr	r0, [pc, #52]	; (31048 <z_add_timeout+0x134>)
   31014:	f002 fac5 	bl	335a2 <assert_post_action>
	__asm__ volatile(
   31018:	f387 8811 	msr	BASEPRI, r7
   3101c:	f3bf 8f6f 	isb	sy
		}
	}
}
   31020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			to->dticks -= t->dticks;
   31024:	1a9b      	subs	r3, r3, r2
   31026:	60a3      	str	r3, [r4, #8]
	return (node == list->tail) ? NULL : node->next;
   31028:	686b      	ldr	r3, [r5, #4]
   3102a:	429e      	cmp	r6, r3
   3102c:	d0b6      	beq.n	30f9c <z_add_timeout+0x88>
   3102e:	6836      	ldr	r6, [r6, #0]
   31030:	e7b3      	b.n	30f9a <z_add_timeout+0x86>
   31032:	bf00      	nop
   31034:	0003b13f 	.word	0x0003b13f
   31038:	0003b11b 	.word	0x0003b11b
   3103c:	00037a66 	.word	0x00037a66
   31040:	00038d10 	.word	0x00038d10
   31044:	20023fe8 	.word	0x20023fe8
   31048:	000382ba 	.word	0x000382ba
   3104c:	000382e0 	.word	0x000382e0
   31050:	000382f5 	.word	0x000382f5
   31054:	200295b4 	.word	0x200295b4
   31058:	0003830d 	.word	0x0003830d
   3105c:	00038324 	.word	0x00038324
   31060:	0003b15f 	.word	0x0003b15f

00031064 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   31064:	b538      	push	{r3, r4, r5, lr}
   31066:	4604      	mov	r4, r0
	__asm__ volatile(
   31068:	f04f 0320 	mov.w	r3, #32
   3106c:	f3ef 8511 	mrs	r5, BASEPRI
   31070:	f383 8811 	msr	BASEPRI, r3
   31074:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   31078:	481a      	ldr	r0, [pc, #104]	; (310e4 <z_abort_timeout+0x80>)
   3107a:	f7ff fc83 	bl	30984 <z_spin_lock_valid>
   3107e:	b968      	cbnz	r0, 3109c <z_abort_timeout+0x38>
   31080:	234a      	movs	r3, #74	; 0x4a
   31082:	4a19      	ldr	r2, [pc, #100]	; (310e8 <z_abort_timeout+0x84>)
   31084:	4919      	ldr	r1, [pc, #100]	; (310ec <z_abort_timeout+0x88>)
   31086:	481a      	ldr	r0, [pc, #104]	; (310f0 <z_abort_timeout+0x8c>)
   31088:	f002 fa45 	bl	33516 <printk>
   3108c:	4915      	ldr	r1, [pc, #84]	; (310e4 <z_abort_timeout+0x80>)
   3108e:	4819      	ldr	r0, [pc, #100]	; (310f4 <z_abort_timeout+0x90>)
   31090:	f002 fa41 	bl	33516 <printk>
   31094:	214a      	movs	r1, #74	; 0x4a
   31096:	4814      	ldr	r0, [pc, #80]	; (310e8 <z_abort_timeout+0x84>)
   31098:	f002 fa83 	bl	335a2 <assert_post_action>
	z_spin_lock_set_owner(l);
   3109c:	4811      	ldr	r0, [pc, #68]	; (310e4 <z_abort_timeout+0x80>)
   3109e:	f7ff fc8f 	bl	309c0 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   310a2:	6823      	ldr	r3, [r4, #0]
   310a4:	b1db      	cbz	r3, 310de <z_abort_timeout+0x7a>
			remove_timeout(to);
   310a6:	4620      	mov	r0, r4
   310a8:	f7ff ff04 	bl	30eb4 <remove_timeout>
			ret = 0;
   310ac:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   310ae:	480d      	ldr	r0, [pc, #52]	; (310e4 <z_abort_timeout+0x80>)
   310b0:	f7ff fc76 	bl	309a0 <z_spin_unlock_valid>
   310b4:	b968      	cbnz	r0, 310d2 <z_abort_timeout+0x6e>
   310b6:	235d      	movs	r3, #93	; 0x5d
   310b8:	4a0b      	ldr	r2, [pc, #44]	; (310e8 <z_abort_timeout+0x84>)
   310ba:	490f      	ldr	r1, [pc, #60]	; (310f8 <z_abort_timeout+0x94>)
   310bc:	480c      	ldr	r0, [pc, #48]	; (310f0 <z_abort_timeout+0x8c>)
   310be:	f002 fa2a 	bl	33516 <printk>
   310c2:	4908      	ldr	r1, [pc, #32]	; (310e4 <z_abort_timeout+0x80>)
   310c4:	480d      	ldr	r0, [pc, #52]	; (310fc <z_abort_timeout+0x98>)
   310c6:	f002 fa26 	bl	33516 <printk>
   310ca:	215d      	movs	r1, #93	; 0x5d
   310cc:	4806      	ldr	r0, [pc, #24]	; (310e8 <z_abort_timeout+0x84>)
   310ce:	f002 fa68 	bl	335a2 <assert_post_action>
	__asm__ volatile(
   310d2:	f385 8811 	msr	BASEPRI, r5
   310d6:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   310da:	4620      	mov	r0, r4
   310dc:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   310de:	f06f 0415 	mvn.w	r4, #21
   310e2:	e7e4      	b.n	310ae <z_abort_timeout+0x4a>
   310e4:	20023fe8 	.word	0x20023fe8
   310e8:	000382ba 	.word	0x000382ba
   310ec:	000382e0 	.word	0x000382e0
   310f0:	00037a66 	.word	0x00037a66
   310f4:	000382f5 	.word	0x000382f5
   310f8:	0003830d 	.word	0x0003830d
   310fc:	00038324 	.word	0x00038324

00031100 <z_get_next_timeout_expiry>:

	return ticks - elapsed();
}

s32_t z_get_next_timeout_expiry(void)
{
   31100:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   31102:	f04f 0320 	mov.w	r3, #32
   31106:	f3ef 8511 	mrs	r5, BASEPRI
   3110a:	f383 8811 	msr	BASEPRI, r3
   3110e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   31112:	4818      	ldr	r0, [pc, #96]	; (31174 <z_get_next_timeout_expiry+0x74>)
   31114:	f7ff fc36 	bl	30984 <z_spin_lock_valid>
   31118:	b968      	cbnz	r0, 31136 <z_get_next_timeout_expiry+0x36>
   3111a:	234a      	movs	r3, #74	; 0x4a
   3111c:	4a16      	ldr	r2, [pc, #88]	; (31178 <z_get_next_timeout_expiry+0x78>)
   3111e:	4917      	ldr	r1, [pc, #92]	; (3117c <z_get_next_timeout_expiry+0x7c>)
   31120:	4817      	ldr	r0, [pc, #92]	; (31180 <z_get_next_timeout_expiry+0x80>)
   31122:	f002 f9f8 	bl	33516 <printk>
   31126:	4913      	ldr	r1, [pc, #76]	; (31174 <z_get_next_timeout_expiry+0x74>)
   31128:	4816      	ldr	r0, [pc, #88]	; (31184 <z_get_next_timeout_expiry+0x84>)
   3112a:	f002 f9f4 	bl	33516 <printk>
   3112e:	214a      	movs	r1, #74	; 0x4a
   31130:	4811      	ldr	r0, [pc, #68]	; (31178 <z_get_next_timeout_expiry+0x78>)
   31132:	f002 fa36 	bl	335a2 <assert_post_action>
	z_spin_lock_set_owner(l);
   31136:	480f      	ldr	r0, [pc, #60]	; (31174 <z_get_next_timeout_expiry+0x74>)
   31138:	f7ff fc42 	bl	309c0 <z_spin_lock_set_owner>
	s32_t ret = K_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   3113c:	f7ff fece 	bl	30edc <next_timeout>
   31140:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   31142:	480c      	ldr	r0, [pc, #48]	; (31174 <z_get_next_timeout_expiry+0x74>)
   31144:	f7ff fc2c 	bl	309a0 <z_spin_unlock_valid>
   31148:	b968      	cbnz	r0, 31166 <z_get_next_timeout_expiry+0x66>
   3114a:	235d      	movs	r3, #93	; 0x5d
   3114c:	4a0a      	ldr	r2, [pc, #40]	; (31178 <z_get_next_timeout_expiry+0x78>)
   3114e:	490e      	ldr	r1, [pc, #56]	; (31188 <z_get_next_timeout_expiry+0x88>)
   31150:	480b      	ldr	r0, [pc, #44]	; (31180 <z_get_next_timeout_expiry+0x80>)
   31152:	f002 f9e0 	bl	33516 <printk>
   31156:	4907      	ldr	r1, [pc, #28]	; (31174 <z_get_next_timeout_expiry+0x74>)
   31158:	480c      	ldr	r0, [pc, #48]	; (3118c <z_get_next_timeout_expiry+0x8c>)
   3115a:	f002 f9dc 	bl	33516 <printk>
   3115e:	215d      	movs	r1, #93	; 0x5d
   31160:	4805      	ldr	r0, [pc, #20]	; (31178 <z_get_next_timeout_expiry+0x78>)
   31162:	f002 fa1e 	bl	335a2 <assert_post_action>
	__asm__ volatile(
   31166:	f385 8811 	msr	BASEPRI, r5
   3116a:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   3116e:	4620      	mov	r0, r4
   31170:	bd38      	pop	{r3, r4, r5, pc}
   31172:	bf00      	nop
   31174:	20023fe8 	.word	0x20023fe8
   31178:	000382ba 	.word	0x000382ba
   3117c:	000382e0 	.word	0x000382e0
   31180:	00037a66 	.word	0x00037a66
   31184:	000382f5 	.word	0x000382f5
   31188:	0003830d 	.word	0x0003830d
   3118c:	00038324 	.word	0x00038324

00031190 <z_set_timeout_expiry>:

void z_set_timeout_expiry(s32_t ticks, bool idle)
{
   31190:	b570      	push	{r4, r5, r6, lr}
   31192:	4604      	mov	r4, r0
   31194:	460d      	mov	r5, r1
	__asm__ volatile(
   31196:	f04f 0320 	mov.w	r3, #32
   3119a:	f3ef 8611 	mrs	r6, BASEPRI
   3119e:	f383 8811 	msr	BASEPRI, r3
   311a2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   311a6:	481b      	ldr	r0, [pc, #108]	; (31214 <z_set_timeout_expiry+0x84>)
   311a8:	f7ff fbec 	bl	30984 <z_spin_lock_valid>
   311ac:	b968      	cbnz	r0, 311ca <z_set_timeout_expiry+0x3a>
   311ae:	234a      	movs	r3, #74	; 0x4a
   311b0:	4a19      	ldr	r2, [pc, #100]	; (31218 <z_set_timeout_expiry+0x88>)
   311b2:	491a      	ldr	r1, [pc, #104]	; (3121c <z_set_timeout_expiry+0x8c>)
   311b4:	481a      	ldr	r0, [pc, #104]	; (31220 <z_set_timeout_expiry+0x90>)
   311b6:	f002 f9ae 	bl	33516 <printk>
   311ba:	4916      	ldr	r1, [pc, #88]	; (31214 <z_set_timeout_expiry+0x84>)
   311bc:	4819      	ldr	r0, [pc, #100]	; (31224 <z_set_timeout_expiry+0x94>)
   311be:	f002 f9aa 	bl	33516 <printk>
   311c2:	214a      	movs	r1, #74	; 0x4a
   311c4:	4814      	ldr	r0, [pc, #80]	; (31218 <z_set_timeout_expiry+0x88>)
   311c6:	f002 f9ec 	bl	335a2 <assert_post_action>
	z_spin_lock_set_owner(l);
   311ca:	4812      	ldr	r0, [pc, #72]	; (31214 <z_set_timeout_expiry+0x84>)
   311cc:	f7ff fbf8 	bl	309c0 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next = next_timeout();
   311d0:	f7ff fe84 	bl	30edc <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   311d4:	2801      	cmp	r0, #1
   311d6:	dd05      	ble.n	311e4 <z_set_timeout_expiry+0x54>
   311d8:	42a0      	cmp	r0, r4
   311da:	dd03      	ble.n	311e4 <z_set_timeout_expiry+0x54>
			z_clock_set_timeout(ticks, idle);
   311dc:	4629      	mov	r1, r5
   311de:	4620      	mov	r0, r4
   311e0:	f7ee ff80 	bl	200e4 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   311e4:	480b      	ldr	r0, [pc, #44]	; (31214 <z_set_timeout_expiry+0x84>)
   311e6:	f7ff fbdb 	bl	309a0 <z_spin_unlock_valid>
   311ea:	b968      	cbnz	r0, 31208 <z_set_timeout_expiry+0x78>
   311ec:	235d      	movs	r3, #93	; 0x5d
   311ee:	4a0a      	ldr	r2, [pc, #40]	; (31218 <z_set_timeout_expiry+0x88>)
   311f0:	490d      	ldr	r1, [pc, #52]	; (31228 <z_set_timeout_expiry+0x98>)
   311f2:	480b      	ldr	r0, [pc, #44]	; (31220 <z_set_timeout_expiry+0x90>)
   311f4:	f002 f98f 	bl	33516 <printk>
   311f8:	4906      	ldr	r1, [pc, #24]	; (31214 <z_set_timeout_expiry+0x84>)
   311fa:	480c      	ldr	r0, [pc, #48]	; (3122c <z_set_timeout_expiry+0x9c>)
   311fc:	f002 f98b 	bl	33516 <printk>
   31200:	215d      	movs	r1, #93	; 0x5d
   31202:	4805      	ldr	r0, [pc, #20]	; (31218 <z_set_timeout_expiry+0x88>)
   31204:	f002 f9cd 	bl	335a2 <assert_post_action>
	__asm__ volatile(
   31208:	f386 8811 	msr	BASEPRI, r6
   3120c:	f3bf 8f6f 	isb	sy
		}
	}
}
   31210:	bd70      	pop	{r4, r5, r6, pc}
   31212:	bf00      	nop
   31214:	20023fe8 	.word	0x20023fe8
   31218:	000382ba 	.word	0x000382ba
   3121c:	000382e0 	.word	0x000382e0
   31220:	00037a66 	.word	0x00037a66
   31224:	000382f5 	.word	0x000382f5
   31228:	0003830d 	.word	0x0003830d
   3122c:	00038324 	.word	0x00038324

00031230 <z_clock_announce>:

void z_clock_announce(s32_t ticks)
{
   31230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   31234:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   31236:	f7fe fd7f 	bl	2fd38 <z_time_slice>
	__asm__ volatile(
   3123a:	f04f 0320 	mov.w	r3, #32
   3123e:	f3ef 8511 	mrs	r5, BASEPRI
   31242:	f383 8811 	msr	BASEPRI, r3
   31246:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3124a:	4847      	ldr	r0, [pc, #284]	; (31368 <z_clock_announce+0x138>)
   3124c:	f7ff fb9a 	bl	30984 <z_spin_lock_valid>
   31250:	b968      	cbnz	r0, 3126e <z_clock_announce+0x3e>
   31252:	234a      	movs	r3, #74	; 0x4a
   31254:	4a45      	ldr	r2, [pc, #276]	; (3136c <z_clock_announce+0x13c>)
   31256:	4946      	ldr	r1, [pc, #280]	; (31370 <z_clock_announce+0x140>)
   31258:	4846      	ldr	r0, [pc, #280]	; (31374 <z_clock_announce+0x144>)
   3125a:	f002 f95c 	bl	33516 <printk>
   3125e:	4942      	ldr	r1, [pc, #264]	; (31368 <z_clock_announce+0x138>)
   31260:	4845      	ldr	r0, [pc, #276]	; (31378 <z_clock_announce+0x148>)
   31262:	f002 f958 	bl	33516 <printk>
   31266:	214a      	movs	r1, #74	; 0x4a
   31268:	4840      	ldr	r0, [pc, #256]	; (3136c <z_clock_announce+0x13c>)
   3126a:	f002 f99a 	bl	335a2 <assert_post_action>
	z_spin_lock_set_owner(l);
   3126e:	4f43      	ldr	r7, [pc, #268]	; (3137c <z_clock_announce+0x14c>)
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   31270:	4e43      	ldr	r6, [pc, #268]	; (31380 <z_clock_announce+0x150>)
   31272:	46b9      	mov	r9, r7
   31274:	483c      	ldr	r0, [pc, #240]	; (31368 <z_clock_announce+0x138>)
	return list->head == list;
   31276:	f8df 8114 	ldr.w	r8, [pc, #276]	; 3138c <z_clock_announce+0x15c>
   3127a:	f7ff fba1 	bl	309c0 <z_spin_lock_set_owner>
   3127e:	6034      	str	r4, [r6, #0]
   31280:	f8d8 4000 	ldr.w	r4, [r8]
   31284:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   31286:	4544      	cmp	r4, r8
   31288:	e9d7 0100 	ldrd	r0, r1, [r7]
   3128c:	d005      	beq.n	3129a <z_clock_announce+0x6a>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   3128e:	b124      	cbz	r4, 3129a <z_clock_announce+0x6a>
   31290:	68a3      	ldr	r3, [r4, #8]
   31292:	4293      	cmp	r3, r2
   31294:	dd25      	ble.n	312e2 <z_clock_announce+0xb2>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   31296:	1a9b      	subs	r3, r3, r2
   31298:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   3129a:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   3129c:	1880      	adds	r0, r0, r2
   3129e:	eb41 71e2 	adc.w	r1, r1, r2, asr #31
   312a2:	e9c9 0100 	strd	r0, r1, [r9]
	announce_remaining = 0;
   312a6:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
   312a8:	f7ff fe18 	bl	30edc <next_timeout>
   312ac:	4621      	mov	r1, r4
   312ae:	f7ee ff19 	bl	200e4 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   312b2:	482d      	ldr	r0, [pc, #180]	; (31368 <z_clock_announce+0x138>)
   312b4:	f7ff fb74 	bl	309a0 <z_spin_unlock_valid>
   312b8:	b968      	cbnz	r0, 312d6 <z_clock_announce+0xa6>
   312ba:	235d      	movs	r3, #93	; 0x5d
   312bc:	4a2b      	ldr	r2, [pc, #172]	; (3136c <z_clock_announce+0x13c>)
   312be:	4931      	ldr	r1, [pc, #196]	; (31384 <z_clock_announce+0x154>)
   312c0:	482c      	ldr	r0, [pc, #176]	; (31374 <z_clock_announce+0x144>)
   312c2:	f002 f928 	bl	33516 <printk>
   312c6:	4928      	ldr	r1, [pc, #160]	; (31368 <z_clock_announce+0x138>)
   312c8:	482f      	ldr	r0, [pc, #188]	; (31388 <z_clock_announce+0x158>)
   312ca:	f002 f924 	bl	33516 <printk>
   312ce:	215d      	movs	r1, #93	; 0x5d
   312d0:	4826      	ldr	r0, [pc, #152]	; (3136c <z_clock_announce+0x13c>)
   312d2:	f002 f966 	bl	335a2 <assert_post_action>
	__asm__ volatile(
   312d6:	f385 8811 	msr	BASEPRI, r5
   312da:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   312de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   312e2:	18c0      	adds	r0, r0, r3
   312e4:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
		announce_remaining -= dt;
   312e8:	1ad3      	subs	r3, r2, r3
   312ea:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   312ec:	2300      	movs	r3, #0
		curr_tick += dt;
   312ee:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
   312f2:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
   312f4:	4620      	mov	r0, r4
   312f6:	f7ff fddd 	bl	30eb4 <remove_timeout>
   312fa:	481b      	ldr	r0, [pc, #108]	; (31368 <z_clock_announce+0x138>)
   312fc:	f7ff fb50 	bl	309a0 <z_spin_unlock_valid>
   31300:	b968      	cbnz	r0, 3131e <z_clock_announce+0xee>
   31302:	235d      	movs	r3, #93	; 0x5d
   31304:	4a19      	ldr	r2, [pc, #100]	; (3136c <z_clock_announce+0x13c>)
   31306:	491f      	ldr	r1, [pc, #124]	; (31384 <z_clock_announce+0x154>)
   31308:	481a      	ldr	r0, [pc, #104]	; (31374 <z_clock_announce+0x144>)
   3130a:	f002 f904 	bl	33516 <printk>
   3130e:	4916      	ldr	r1, [pc, #88]	; (31368 <z_clock_announce+0x138>)
   31310:	481d      	ldr	r0, [pc, #116]	; (31388 <z_clock_announce+0x158>)
   31312:	f002 f900 	bl	33516 <printk>
   31316:	215d      	movs	r1, #93	; 0x5d
   31318:	4814      	ldr	r0, [pc, #80]	; (3136c <z_clock_announce+0x13c>)
   3131a:	f002 f942 	bl	335a2 <assert_post_action>
   3131e:	f385 8811 	msr	BASEPRI, r5
   31322:	f3bf 8f6f 	isb	sy
		t->fn(t);
   31326:	4620      	mov	r0, r4
   31328:	68e3      	ldr	r3, [r4, #12]
   3132a:	4798      	blx	r3
	__asm__ volatile(
   3132c:	f04f 0320 	mov.w	r3, #32
   31330:	f3ef 8511 	mrs	r5, BASEPRI
   31334:	f383 8811 	msr	BASEPRI, r3
   31338:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3133c:	480a      	ldr	r0, [pc, #40]	; (31368 <z_clock_announce+0x138>)
   3133e:	f7ff fb21 	bl	30984 <z_spin_lock_valid>
   31342:	b968      	cbnz	r0, 31360 <z_clock_announce+0x130>
   31344:	234a      	movs	r3, #74	; 0x4a
   31346:	4a09      	ldr	r2, [pc, #36]	; (3136c <z_clock_announce+0x13c>)
   31348:	4909      	ldr	r1, [pc, #36]	; (31370 <z_clock_announce+0x140>)
   3134a:	480a      	ldr	r0, [pc, #40]	; (31374 <z_clock_announce+0x144>)
   3134c:	f002 f8e3 	bl	33516 <printk>
   31350:	4905      	ldr	r1, [pc, #20]	; (31368 <z_clock_announce+0x138>)
   31352:	4809      	ldr	r0, [pc, #36]	; (31378 <z_clock_announce+0x148>)
   31354:	f002 f8df 	bl	33516 <printk>
   31358:	214a      	movs	r1, #74	; 0x4a
   3135a:	4804      	ldr	r0, [pc, #16]	; (3136c <z_clock_announce+0x13c>)
   3135c:	f002 f921 	bl	335a2 <assert_post_action>
	z_spin_lock_set_owner(l);
   31360:	4801      	ldr	r0, [pc, #4]	; (31368 <z_clock_announce+0x138>)
   31362:	f7ff fb2d 	bl	309c0 <z_spin_lock_set_owner>
	return k;
   31366:	e78b      	b.n	31280 <z_clock_announce+0x50>
   31368:	20023fe8 	.word	0x20023fe8
   3136c:	000382ba 	.word	0x000382ba
   31370:	000382e0 	.word	0x000382e0
   31374:	00037a66 	.word	0x00037a66
   31378:	000382f5 	.word	0x000382f5
   3137c:	200220e8 	.word	0x200220e8
   31380:	20023fe4 	.word	0x20023fe4
   31384:	0003830d 	.word	0x0003830d
   31388:	00038324 	.word	0x00038324
   3138c:	200295b4 	.word	0x200295b4

00031390 <z_tick_get>:

s64_t z_tick_get(void)
{
   31390:	b570      	push	{r4, r5, r6, lr}
   31392:	f04f 0320 	mov.w	r3, #32
   31396:	f3ef 8611 	mrs	r6, BASEPRI
   3139a:	f383 8811 	msr	BASEPRI, r3
   3139e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   313a2:	481b      	ldr	r0, [pc, #108]	; (31410 <z_tick_get+0x80>)
   313a4:	f7ff faee 	bl	30984 <z_spin_lock_valid>
   313a8:	b968      	cbnz	r0, 313c6 <z_tick_get+0x36>
   313aa:	234a      	movs	r3, #74	; 0x4a
   313ac:	4a19      	ldr	r2, [pc, #100]	; (31414 <z_tick_get+0x84>)
   313ae:	491a      	ldr	r1, [pc, #104]	; (31418 <z_tick_get+0x88>)
   313b0:	481a      	ldr	r0, [pc, #104]	; (3141c <z_tick_get+0x8c>)
   313b2:	f002 f8b0 	bl	33516 <printk>
   313b6:	4916      	ldr	r1, [pc, #88]	; (31410 <z_tick_get+0x80>)
   313b8:	4819      	ldr	r0, [pc, #100]	; (31420 <z_tick_get+0x90>)
   313ba:	f002 f8ac 	bl	33516 <printk>
   313be:	214a      	movs	r1, #74	; 0x4a
   313c0:	4814      	ldr	r0, [pc, #80]	; (31414 <z_tick_get+0x84>)
   313c2:	f002 f8ee 	bl	335a2 <assert_post_action>
	z_spin_lock_set_owner(l);
   313c6:	4812      	ldr	r0, [pc, #72]	; (31410 <z_tick_get+0x80>)
   313c8:	f7ff fafa 	bl	309c0 <z_spin_lock_set_owner>
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   313cc:	f7ee ff18 	bl	20200 <z_clock_elapsed>
   313d0:	4b14      	ldr	r3, [pc, #80]	; (31424 <z_tick_get+0x94>)
   313d2:	e9d3 4500 	ldrd	r4, r5, [r3]
   313d6:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   313d8:	480d      	ldr	r0, [pc, #52]	; (31410 <z_tick_get+0x80>)
   313da:	f145 0500 	adc.w	r5, r5, #0
   313de:	f7ff fadf 	bl	309a0 <z_spin_unlock_valid>
   313e2:	b968      	cbnz	r0, 31400 <z_tick_get+0x70>
   313e4:	235d      	movs	r3, #93	; 0x5d
   313e6:	4a0b      	ldr	r2, [pc, #44]	; (31414 <z_tick_get+0x84>)
   313e8:	490f      	ldr	r1, [pc, #60]	; (31428 <z_tick_get+0x98>)
   313ea:	480c      	ldr	r0, [pc, #48]	; (3141c <z_tick_get+0x8c>)
   313ec:	f002 f893 	bl	33516 <printk>
   313f0:	4907      	ldr	r1, [pc, #28]	; (31410 <z_tick_get+0x80>)
   313f2:	480e      	ldr	r0, [pc, #56]	; (3142c <z_tick_get+0x9c>)
   313f4:	f002 f88f 	bl	33516 <printk>
   313f8:	215d      	movs	r1, #93	; 0x5d
   313fa:	4806      	ldr	r0, [pc, #24]	; (31414 <z_tick_get+0x84>)
   313fc:	f002 f8d1 	bl	335a2 <assert_post_action>
	__asm__ volatile(
   31400:	f386 8811 	msr	BASEPRI, r6
   31404:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   31408:	4620      	mov	r0, r4
   3140a:	4629      	mov	r1, r5
   3140c:	bd70      	pop	{r4, r5, r6, pc}
   3140e:	bf00      	nop
   31410:	20023fe8 	.word	0x20023fe8
   31414:	000382ba 	.word	0x000382ba
   31418:	000382e0 	.word	0x000382e0
   3141c:	00037a66 	.word	0x00037a66
   31420:	000382f5 	.word	0x000382f5
   31424:	200220e8 	.word	0x200220e8
   31428:	0003830d 	.word	0x0003830d
   3142c:	00038324 	.word	0x00038324

00031430 <k_poll_poller_cb>:

	return events_registered;
}

static int k_poll_poller_cb(struct k_poll_event *event, u32_t state)
{
   31430:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
   31432:	6883      	ldr	r3, [r0, #8]
{
   31434:	460d      	mov	r5, r1
	struct k_thread *thread = event->poller->thread;
   31436:	685c      	ldr	r4, [r3, #4]

	__ASSERT(thread != NULL, "poller should have a thread\n");
   31438:	b964      	cbnz	r4, 31454 <k_poll_poller_cb+0x24>
   3143a:	4915      	ldr	r1, [pc, #84]	; (31490 <k_poll_poller_cb+0x60>)
   3143c:	23e0      	movs	r3, #224	; 0xe0
   3143e:	4a15      	ldr	r2, [pc, #84]	; (31494 <k_poll_poller_cb+0x64>)
   31440:	4815      	ldr	r0, [pc, #84]	; (31498 <k_poll_poller_cb+0x68>)
   31442:	f002 f868 	bl	33516 <printk>
   31446:	4815      	ldr	r0, [pc, #84]	; (3149c <k_poll_poller_cb+0x6c>)
   31448:	f002 f865 	bl	33516 <printk>
   3144c:	21e0      	movs	r1, #224	; 0xe0
   3144e:	4811      	ldr	r0, [pc, #68]	; (31494 <k_poll_poller_cb+0x64>)
   31450:	f002 f8a7 	bl	335a2 <assert_post_action>

	if (!z_is_thread_pending(thread)) {
   31454:	7b63      	ldrb	r3, [r4, #13]
   31456:	079a      	lsls	r2, r3, #30
   31458:	d50e      	bpl.n	31478 <k_poll_poller_cb+0x48>
		return 0;
	}

	if (z_is_thread_timeout_expired(thread)) {
   3145a:	6a23      	ldr	r3, [r4, #32]
   3145c:	3302      	adds	r3, #2
   3145e:	d014      	beq.n	3148a <k_poll_poller_cb+0x5a>
		return -EAGAIN;
	}

	z_unpend_thread(thread);
   31460:	4620      	mov	r0, r4
   31462:	f7fe f9e1 	bl	2f828 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   31466:	2d08      	cmp	r5, #8
   31468:	bf0c      	ite	eq
   3146a:	f06f 0303 	mvneq.w	r3, #3
   3146e:	2300      	movne	r3, #0
   31470:	66a3      	str	r3, [r4, #104]	; 0x68
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   31472:	7b63      	ldrb	r3, [r4, #13]
   31474:	06db      	lsls	r3, r3, #27
   31476:	d001      	beq.n	3147c <k_poll_poller_cb+0x4c>
		state == K_POLL_STATE_CANCELLED ? -EINTR : 0);

	if (!z_is_thread_ready(thread)) {
		return 0;
   31478:	2000      	movs	r0, #0
	}

	z_ready_thread(thread);

	return 0;
}
   3147a:	bd38      	pop	{r3, r4, r5, pc}
	if (!z_is_thread_ready(thread)) {
   3147c:	69a5      	ldr	r5, [r4, #24]
   3147e:	2d00      	cmp	r5, #0
   31480:	d1fa      	bne.n	31478 <k_poll_poller_cb+0x48>
		z_add_thread_to_ready_q(thread);
   31482:	4620      	mov	r0, r4
   31484:	f7fe fad8 	bl	2fa38 <z_add_thread_to_ready_q>
	return 0;
   31488:	e7f6      	b.n	31478 <k_poll_poller_cb+0x48>
		return -EAGAIN;
   3148a:	f06f 000a 	mvn.w	r0, #10
   3148e:	e7f4      	b.n	3147a <k_poll_poller_cb+0x4a>
   31490:	0003b18f 	.word	0x0003b18f
   31494:	0003b16e 	.word	0x0003b16e
   31498:	00037a66 	.word	0x00037a66
   3149c:	0003b1a5 	.word	0x0003b1a5

000314a0 <clear_event_registrations>:
{
   314a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   314a4:	2414      	movs	r4, #20
   314a6:	4680      	mov	r8, r0
   314a8:	4616      	mov	r6, r2
	while (num_events--) {
   314aa:	fb04 0401 	mla	r4, r4, r1, r0
		__ASSERT(false, "invalid event type\n");
   314ae:	4d48      	ldr	r5, [pc, #288]	; (315d0 <clear_event_registrations+0x130>)
   314b0:	f8df 9158 	ldr.w	r9, [pc, #344]	; 3160c <clear_event_registrations+0x16c>
   314b4:	4f47      	ldr	r7, [pc, #284]	; (315d4 <clear_event_registrations+0x134>)
	while (num_events--) {
   314b6:	4544      	cmp	r4, r8
   314b8:	d101      	bne.n	314be <clear_event_registrations+0x1e>
}
   314ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	event->poller = NULL;
   314be:	2300      	movs	r3, #0
   314c0:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   314c4:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   314c8:	f003 030f 	and.w	r3, r3, #15
   314cc:	2b04      	cmp	r3, #4
   314ce:	d83d      	bhi.n	3154c <clear_event_registrations+0xac>
   314d0:	e8df f003 	tbb	[pc, r3]
   314d4:	3c032d49 	.word	0x3c032d49
   314d8:	1e          	.byte	0x1e
   314d9:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   314da:	f854 3c04 	ldr.w	r3, [r4, #-4]
   314de:	b963      	cbnz	r3, 314fa <clear_event_registrations+0x5a>
   314e0:	493d      	ldr	r1, [pc, #244]	; (315d8 <clear_event_registrations+0x138>)
   314e2:	2396      	movs	r3, #150	; 0x96
   314e4:	462a      	mov	r2, r5
   314e6:	4638      	mov	r0, r7
   314e8:	f002 f815 	bl	33516 <printk>
   314ec:	483b      	ldr	r0, [pc, #236]	; (315dc <clear_event_registrations+0x13c>)
   314ee:	f002 f812 	bl	33516 <printk>
   314f2:	2196      	movs	r1, #150	; 0x96
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   314f4:	4628      	mov	r0, r5
   314f6:	f002 f854 	bl	335a2 <assert_post_action>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   314fa:	f854 3c14 	ldr.w	r3, [r4, #-20]
   314fe:	b393      	cbz	r3, 31566 <clear_event_registrations+0xc6>
	node->prev->next = node->next;
   31500:	f854 2c10 	ldr.w	r2, [r4, #-16]
   31504:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   31506:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   31508:	2300      	movs	r3, #0
	node->prev = NULL;
   3150a:	e944 3305 	strd	r3, r3, [r4, #-20]
	sys_dnode_init(node);
}
   3150e:	e02a      	b.n	31566 <clear_event_registrations+0xc6>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   31510:	f854 3c04 	ldr.w	r3, [r4, #-4]
   31514:	2b00      	cmp	r3, #0
   31516:	d1f0      	bne.n	314fa <clear_event_registrations+0x5a>
   31518:	4931      	ldr	r1, [pc, #196]	; (315e0 <clear_event_registrations+0x140>)
   3151a:	239a      	movs	r3, #154	; 0x9a
   3151c:	462a      	mov	r2, r5
   3151e:	4638      	mov	r0, r7
   31520:	f001 fff9 	bl	33516 <printk>
   31524:	482f      	ldr	r0, [pc, #188]	; (315e4 <clear_event_registrations+0x144>)
   31526:	f001 fff6 	bl	33516 <printk>
   3152a:	219a      	movs	r1, #154	; 0x9a
   3152c:	e7e2      	b.n	314f4 <clear_event_registrations+0x54>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   3152e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   31532:	2b00      	cmp	r3, #0
   31534:	d1e1      	bne.n	314fa <clear_event_registrations+0x5a>
   31536:	492c      	ldr	r1, [pc, #176]	; (315e8 <clear_event_registrations+0x148>)
   31538:	239e      	movs	r3, #158	; 0x9e
   3153a:	462a      	mov	r2, r5
   3153c:	4638      	mov	r0, r7
   3153e:	f001 ffea 	bl	33516 <printk>
   31542:	482a      	ldr	r0, [pc, #168]	; (315ec <clear_event_registrations+0x14c>)
   31544:	f001 ffe7 	bl	33516 <printk>
   31548:	219e      	movs	r1, #158	; 0x9e
   3154a:	e7d3      	b.n	314f4 <clear_event_registrations+0x54>
		__ASSERT(false, "invalid event type\n");
   3154c:	4649      	mov	r1, r9
   3154e:	23a5      	movs	r3, #165	; 0xa5
   31550:	462a      	mov	r2, r5
   31552:	4638      	mov	r0, r7
   31554:	f001 ffdf 	bl	33516 <printk>
   31558:	4825      	ldr	r0, [pc, #148]	; (315f0 <clear_event_registrations+0x150>)
   3155a:	f001 ffdc 	bl	33516 <printk>
   3155e:	21a5      	movs	r1, #165	; 0xa5
   31560:	4628      	mov	r0, r5
   31562:	f002 f81e 	bl	335a2 <assert_post_action>
   31566:	4823      	ldr	r0, [pc, #140]	; (315f4 <clear_event_registrations+0x154>)
   31568:	f7ff fa1a 	bl	309a0 <z_spin_unlock_valid>
   3156c:	b968      	cbnz	r0, 3158a <clear_event_registrations+0xea>
   3156e:	235d      	movs	r3, #93	; 0x5d
   31570:	4638      	mov	r0, r7
   31572:	4a21      	ldr	r2, [pc, #132]	; (315f8 <clear_event_registrations+0x158>)
   31574:	4921      	ldr	r1, [pc, #132]	; (315fc <clear_event_registrations+0x15c>)
   31576:	f001 ffce 	bl	33516 <printk>
   3157a:	491e      	ldr	r1, [pc, #120]	; (315f4 <clear_event_registrations+0x154>)
   3157c:	4820      	ldr	r0, [pc, #128]	; (31600 <clear_event_registrations+0x160>)
   3157e:	f001 ffca 	bl	33516 <printk>
   31582:	215d      	movs	r1, #93	; 0x5d
   31584:	481c      	ldr	r0, [pc, #112]	; (315f8 <clear_event_registrations+0x158>)
   31586:	f002 f80c 	bl	335a2 <assert_post_action>
   3158a:	f386 8811 	msr	BASEPRI, r6
   3158e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   31592:	f04f 0320 	mov.w	r3, #32
   31596:	f3ef 8611 	mrs	r6, BASEPRI
   3159a:	f383 8811 	msr	BASEPRI, r3
   3159e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   315a2:	4814      	ldr	r0, [pc, #80]	; (315f4 <clear_event_registrations+0x154>)
   315a4:	f7ff f9ee 	bl	30984 <z_spin_lock_valid>
   315a8:	b968      	cbnz	r0, 315c6 <clear_event_registrations+0x126>
   315aa:	234a      	movs	r3, #74	; 0x4a
   315ac:	4638      	mov	r0, r7
   315ae:	4a12      	ldr	r2, [pc, #72]	; (315f8 <clear_event_registrations+0x158>)
   315b0:	4914      	ldr	r1, [pc, #80]	; (31604 <clear_event_registrations+0x164>)
   315b2:	f001 ffb0 	bl	33516 <printk>
   315b6:	490f      	ldr	r1, [pc, #60]	; (315f4 <clear_event_registrations+0x154>)
   315b8:	4813      	ldr	r0, [pc, #76]	; (31608 <clear_event_registrations+0x168>)
   315ba:	f001 ffac 	bl	33516 <printk>
   315be:	214a      	movs	r1, #74	; 0x4a
   315c0:	480d      	ldr	r0, [pc, #52]	; (315f8 <clear_event_registrations+0x158>)
   315c2:	f001 ffee 	bl	335a2 <assert_post_action>
	z_spin_lock_set_owner(l);
   315c6:	480b      	ldr	r0, [pc, #44]	; (315f4 <clear_event_registrations+0x154>)
   315c8:	f7ff f9fa 	bl	309c0 <z_spin_lock_set_owner>
	return k;
   315cc:	3c14      	subs	r4, #20
   315ce:	e772      	b.n	314b6 <clear_event_registrations+0x16>
   315d0:	0003b16e 	.word	0x0003b16e
   315d4:	00037a66 	.word	0x00037a66
   315d8:	0003b1c4 	.word	0x0003b1c4
   315dc:	0003b1de 	.word	0x0003b1de
   315e0:	0003b1f3 	.word	0x0003b1f3
   315e4:	0003b20f 	.word	0x0003b20f
   315e8:	0003b220 	.word	0x0003b220
   315ec:	0003b23d 	.word	0x0003b23d
   315f0:	0003b254 	.word	0x0003b254
   315f4:	20023fec 	.word	0x20023fec
   315f8:	000382ba 	.word	0x000382ba
   315fc:	0003830d 	.word	0x0003830d
   31600:	00038324 	.word	0x00038324
   31604:	000382e0 	.word	0x000382e0
   31608:	000382f5 	.word	0x000382f5
   3160c:	0003afd7 	.word	0x0003afd7

00031610 <register_events>:
{
   31610:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   31614:	2700      	movs	r7, #0
{
   31616:	4615      	mov	r5, r2
   31618:	4604      	mov	r4, r0
	int events_registered = 0;
   3161a:	46b9      	mov	r9, r7
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3161c:	4e6a      	ldr	r6, [pc, #424]	; (317c8 <register_events+0x1b8>)
   3161e:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 31804 <register_events+0x1f4>
   31622:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 31808 <register_events+0x1f8>
{
   31626:	9100      	str	r1, [sp, #0]
   31628:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   3162a:	9b00      	ldr	r3, [sp, #0]
   3162c:	429f      	cmp	r7, r3
   3162e:	db03      	blt.n	31638 <register_events+0x28>
}
   31630:	4648      	mov	r0, r9
   31632:	b003      	add	sp, #12
   31634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31638:	f04f 0320 	mov.w	r3, #32
   3163c:	f3ef 8b11 	mrs	fp, BASEPRI
   31640:	f383 8811 	msr	BASEPRI, r3
   31644:	f3bf 8f6f 	isb	sy
   31648:	4630      	mov	r0, r6
   3164a:	f7ff f99b 	bl	30984 <z_spin_lock_valid>
   3164e:	b968      	cbnz	r0, 3166c <register_events+0x5c>
   31650:	234a      	movs	r3, #74	; 0x4a
   31652:	4642      	mov	r2, r8
   31654:	4651      	mov	r1, sl
   31656:	485d      	ldr	r0, [pc, #372]	; (317cc <register_events+0x1bc>)
   31658:	f001 ff5d 	bl	33516 <printk>
   3165c:	4631      	mov	r1, r6
   3165e:	485c      	ldr	r0, [pc, #368]	; (317d0 <register_events+0x1c0>)
   31660:	f001 ff59 	bl	33516 <printk>
   31664:	214a      	movs	r1, #74	; 0x4a
   31666:	4640      	mov	r0, r8
   31668:	f001 ff9b 	bl	335a2 <assert_post_action>
	z_spin_lock_set_owner(l);
   3166c:	4630      	mov	r0, r6
   3166e:	f7ff f9a7 	bl	309c0 <z_spin_lock_set_owner>
	switch (event->type) {
   31672:	7b63      	ldrb	r3, [r4, #13]
   31674:	f003 030f 	and.w	r3, r3, #15
   31678:	2b04      	cmp	r3, #4
   3167a:	d844      	bhi.n	31706 <register_events+0xf6>
   3167c:	e8df f003 	tbb	[pc, r3]
   31680:	43033d2d 	.word	0x43033d2d
   31684:	2a          	.byte	0x2a
   31685:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0) {
   31686:	6923      	ldr	r3, [r4, #16]
   31688:	689b      	ldr	r3, [r3, #8]
   3168a:	b333      	cbz	r3, 316da <register_events+0xca>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   3168c:	2202      	movs	r2, #2
	event->poller = NULL;
   3168e:	2100      	movs	r1, #0
	event->state |= state;
   31690:	68e3      	ldr	r3, [r4, #12]
	event->poller = NULL;
   31692:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   31694:	f3c3 3004 	ubfx	r0, r3, #12, #5
   31698:	4302      	orrs	r2, r0
   3169a:	f362 3310 	bfi	r3, r2, #12, #5
   3169e:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   316a0:	7029      	strb	r1, [r5, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   316a2:	4630      	mov	r0, r6
   316a4:	f7ff f97c 	bl	309a0 <z_spin_unlock_valid>
   316a8:	b968      	cbnz	r0, 316c6 <register_events+0xb6>
   316aa:	235d      	movs	r3, #93	; 0x5d
   316ac:	4642      	mov	r2, r8
   316ae:	4949      	ldr	r1, [pc, #292]	; (317d4 <register_events+0x1c4>)
   316b0:	4846      	ldr	r0, [pc, #280]	; (317cc <register_events+0x1bc>)
   316b2:	f001 ff30 	bl	33516 <printk>
   316b6:	4631      	mov	r1, r6
   316b8:	4847      	ldr	r0, [pc, #284]	; (317d8 <register_events+0x1c8>)
   316ba:	f001 ff2c 	bl	33516 <printk>
   316be:	215d      	movs	r1, #93	; 0x5d
   316c0:	4640      	mov	r0, r8
   316c2:	f001 ff6e 	bl	335a2 <assert_post_action>
	__asm__ volatile(
   316c6:	f38b 8811 	msr	BASEPRI, fp
   316ca:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   316ce:	3701      	adds	r7, #1
   316d0:	3414      	adds	r4, #20
   316d2:	e7aa      	b.n	3162a <register_events+0x1a>
		if (!k_queue_is_empty(event->queue)) {
   316d4:	6923      	ldr	r3, [r4, #16]
   316d6:	681b      	ldr	r3, [r3, #0]
   316d8:	bb33      	cbnz	r3, 31728 <register_events+0x118>
		} else if (!just_check && poller->is_polling) {
   316da:	9b01      	ldr	r3, [sp, #4]
   316dc:	2b00      	cmp	r3, #0
   316de:	d1e0      	bne.n	316a2 <register_events+0x92>
   316e0:	782b      	ldrb	r3, [r5, #0]
   316e2:	2b00      	cmp	r3, #0
   316e4:	d0dd      	beq.n	316a2 <register_events+0x92>
	switch (event->type) {
   316e6:	7b63      	ldrb	r3, [r4, #13]
   316e8:	f003 030f 	and.w	r3, r3, #15
   316ec:	2b04      	cmp	r3, #4
   316ee:	d85d      	bhi.n	317ac <register_events+0x19c>
   316f0:	e8df f003 	tbb	[pc, r3]
   316f4:	5c1c4931 	.word	0x5c1c4931
   316f8:	35          	.byte	0x35
   316f9:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   316fa:	6923      	ldr	r3, [r4, #16]
   316fc:	689b      	ldr	r3, [r3, #8]
   316fe:	2b00      	cmp	r3, #0
   31700:	d0eb      	beq.n	316da <register_events+0xca>
			*state = K_POLL_STATE_SIGNALED;
   31702:	2201      	movs	r2, #1
   31704:	e7c3      	b.n	3168e <register_events+0x7e>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   31706:	2350      	movs	r3, #80	; 0x50
   31708:	4a34      	ldr	r2, [pc, #208]	; (317dc <register_events+0x1cc>)
   3170a:	4935      	ldr	r1, [pc, #212]	; (317e0 <register_events+0x1d0>)
   3170c:	482f      	ldr	r0, [pc, #188]	; (317cc <register_events+0x1bc>)
   3170e:	f001 ff02 	bl	33516 <printk>
   31712:	7b61      	ldrb	r1, [r4, #13]
   31714:	4833      	ldr	r0, [pc, #204]	; (317e4 <register_events+0x1d4>)
   31716:	f001 010f 	and.w	r1, r1, #15
   3171a:	f001 fefc 	bl	33516 <printk>
   3171e:	2150      	movs	r1, #80	; 0x50
   31720:	482e      	ldr	r0, [pc, #184]	; (317dc <register_events+0x1cc>)
   31722:	f001 ff3e 	bl	335a2 <assert_post_action>
		break;
   31726:	e7d8      	b.n	316da <register_events+0xca>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   31728:	2204      	movs	r2, #4
   3172a:	e7b0      	b.n	3168e <register_events+0x7e>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   3172c:	6923      	ldr	r3, [r4, #16]
   3172e:	b963      	cbnz	r3, 3174a <register_events+0x13a>
   31730:	492d      	ldr	r1, [pc, #180]	; (317e8 <register_events+0x1d8>)
   31732:	2375      	movs	r3, #117	; 0x75
   31734:	4a29      	ldr	r2, [pc, #164]	; (317dc <register_events+0x1cc>)
   31736:	4825      	ldr	r0, [pc, #148]	; (317cc <register_events+0x1bc>)
   31738:	f001 feed 	bl	33516 <printk>
   3173c:	482b      	ldr	r0, [pc, #172]	; (317ec <register_events+0x1dc>)
   3173e:	f001 feea 	bl	33516 <printk>
   31742:	2175      	movs	r1, #117	; 0x75
   31744:	4825      	ldr	r0, [pc, #148]	; (317dc <register_events+0x1cc>)
   31746:	f001 ff2c 	bl	335a2 <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   3174a:	462a      	mov	r2, r5
   3174c:	4621      	mov	r1, r4
   3174e:	6920      	ldr	r0, [r4, #16]
   31750:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   31752:	f004 f979 	bl	35a48 <add_event>
	event->poller = poller;
   31756:	60a5      	str	r5, [r4, #8]
				events_registered += 1;
   31758:	f109 0901 	add.w	r9, r9, #1
   3175c:	e7a1      	b.n	316a2 <register_events+0x92>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   3175e:	6923      	ldr	r3, [r4, #16]
   31760:	b963      	cbnz	r3, 3177c <register_events+0x16c>
   31762:	4923      	ldr	r1, [pc, #140]	; (317f0 <register_events+0x1e0>)
   31764:	2379      	movs	r3, #121	; 0x79
   31766:	4a1d      	ldr	r2, [pc, #116]	; (317dc <register_events+0x1cc>)
   31768:	4818      	ldr	r0, [pc, #96]	; (317cc <register_events+0x1bc>)
   3176a:	f001 fed4 	bl	33516 <printk>
   3176e:	4821      	ldr	r0, [pc, #132]	; (317f4 <register_events+0x1e4>)
   31770:	f001 fed1 	bl	33516 <printk>
   31774:	2179      	movs	r1, #121	; 0x79
   31776:	4819      	ldr	r0, [pc, #100]	; (317dc <register_events+0x1cc>)
   31778:	f001 ff13 	bl	335a2 <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   3177c:	6920      	ldr	r0, [r4, #16]
   3177e:	462a      	mov	r2, r5
   31780:	4621      	mov	r1, r4
   31782:	300c      	adds	r0, #12
   31784:	e7e5      	b.n	31752 <register_events+0x142>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   31786:	6923      	ldr	r3, [r4, #16]
   31788:	b963      	cbnz	r3, 317a4 <register_events+0x194>
   3178a:	491b      	ldr	r1, [pc, #108]	; (317f8 <register_events+0x1e8>)
   3178c:	237d      	movs	r3, #125	; 0x7d
   3178e:	4a13      	ldr	r2, [pc, #76]	; (317dc <register_events+0x1cc>)
   31790:	480e      	ldr	r0, [pc, #56]	; (317cc <register_events+0x1bc>)
   31792:	f001 fec0 	bl	33516 <printk>
   31796:	4819      	ldr	r0, [pc, #100]	; (317fc <register_events+0x1ec>)
   31798:	f001 febd 	bl	33516 <printk>
   3179c:	217d      	movs	r1, #125	; 0x7d
   3179e:	480f      	ldr	r0, [pc, #60]	; (317dc <register_events+0x1cc>)
   317a0:	f001 feff 	bl	335a2 <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   317a4:	462a      	mov	r2, r5
   317a6:	4621      	mov	r1, r4
   317a8:	6920      	ldr	r0, [r4, #16]
   317aa:	e7d2      	b.n	31752 <register_events+0x142>
		__ASSERT(false, "invalid event type\n");
   317ac:	2384      	movs	r3, #132	; 0x84
   317ae:	4a0b      	ldr	r2, [pc, #44]	; (317dc <register_events+0x1cc>)
   317b0:	490b      	ldr	r1, [pc, #44]	; (317e0 <register_events+0x1d0>)
   317b2:	4806      	ldr	r0, [pc, #24]	; (317cc <register_events+0x1bc>)
   317b4:	f001 feaf 	bl	33516 <printk>
   317b8:	4811      	ldr	r0, [pc, #68]	; (31800 <register_events+0x1f0>)
   317ba:	f001 feac 	bl	33516 <printk>
   317be:	2184      	movs	r1, #132	; 0x84
   317c0:	4806      	ldr	r0, [pc, #24]	; (317dc <register_events+0x1cc>)
   317c2:	f001 feee 	bl	335a2 <assert_post_action>
		break;
   317c6:	e7c6      	b.n	31756 <register_events+0x146>
   317c8:	20023fec 	.word	0x20023fec
   317cc:	00037a66 	.word	0x00037a66
   317d0:	000382f5 	.word	0x000382f5
   317d4:	0003830d 	.word	0x0003830d
   317d8:	00038324 	.word	0x00038324
   317dc:	0003b16e 	.word	0x0003b16e
   317e0:	0003afd7 	.word	0x0003afd7
   317e4:	0003b26a 	.word	0x0003b26a
   317e8:	0003b1c4 	.word	0x0003b1c4
   317ec:	0003b1de 	.word	0x0003b1de
   317f0:	0003b1f3 	.word	0x0003b1f3
   317f4:	0003b20f 	.word	0x0003b20f
   317f8:	0003b220 	.word	0x0003b220
   317fc:	0003b23d 	.word	0x0003b23d
   31800:	0003b254 	.word	0x0003b254
   31804:	000382ba 	.word	0x000382ba
   31808:	000382e0 	.word	0x000382e0

0003180c <k_poll_event_init>:
{
   3180c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3180e:	4605      	mov	r5, r0
   31810:	460f      	mov	r7, r1
   31812:	461e      	mov	r6, r3
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   31814:	4614      	mov	r4, r2
   31816:	b162      	cbz	r2, 31832 <k_poll_event_init+0x26>
   31818:	491b      	ldr	r1, [pc, #108]	; (31888 <k_poll_event_init+0x7c>)
   3181a:	2329      	movs	r3, #41	; 0x29
   3181c:	4a1b      	ldr	r2, [pc, #108]	; (3188c <k_poll_event_init+0x80>)
   3181e:	481c      	ldr	r0, [pc, #112]	; (31890 <k_poll_event_init+0x84>)
   31820:	f001 fe79 	bl	33516 <printk>
   31824:	481b      	ldr	r0, [pc, #108]	; (31894 <k_poll_event_init+0x88>)
   31826:	f001 fe76 	bl	33516 <printk>
   3182a:	2129      	movs	r1, #41	; 0x29
   3182c:	4817      	ldr	r0, [pc, #92]	; (3188c <k_poll_event_init+0x80>)
   3182e:	f001 feb8 	bl	335a2 <assert_post_action>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   31832:	2f0f      	cmp	r7, #15
   31834:	d90c      	bls.n	31850 <k_poll_event_init+0x44>
   31836:	4918      	ldr	r1, [pc, #96]	; (31898 <k_poll_event_init+0x8c>)
   31838:	232b      	movs	r3, #43	; 0x2b
   3183a:	4a14      	ldr	r2, [pc, #80]	; (3188c <k_poll_event_init+0x80>)
   3183c:	4814      	ldr	r0, [pc, #80]	; (31890 <k_poll_event_init+0x84>)
   3183e:	f001 fe6a 	bl	33516 <printk>
   31842:	4816      	ldr	r0, [pc, #88]	; (3189c <k_poll_event_init+0x90>)
   31844:	f001 fe67 	bl	33516 <printk>
   31848:	212b      	movs	r1, #43	; 0x2b
   3184a:	4810      	ldr	r0, [pc, #64]	; (3188c <k_poll_event_init+0x80>)
   3184c:	f001 fea9 	bl	335a2 <assert_post_action>
	__ASSERT(obj != NULL, "must provide an object\n");
   31850:	b966      	cbnz	r6, 3186c <k_poll_event_init+0x60>
   31852:	4913      	ldr	r1, [pc, #76]	; (318a0 <k_poll_event_init+0x94>)
   31854:	232c      	movs	r3, #44	; 0x2c
   31856:	4a0d      	ldr	r2, [pc, #52]	; (3188c <k_poll_event_init+0x80>)
   31858:	480d      	ldr	r0, [pc, #52]	; (31890 <k_poll_event_init+0x84>)
   3185a:	f001 fe5c 	bl	33516 <printk>
   3185e:	4811      	ldr	r0, [pc, #68]	; (318a4 <k_poll_event_init+0x98>)
   31860:	f001 fe59 	bl	33516 <printk>
   31864:	212c      	movs	r1, #44	; 0x2c
   31866:	4809      	ldr	r0, [pc, #36]	; (3188c <k_poll_event_init+0x80>)
   31868:	f001 fe9b 	bl	335a2 <assert_post_action>
	event->poller = NULL;
   3186c:	2300      	movs	r3, #0
	event->type = type;
   3186e:	0464      	lsls	r4, r4, #17
   31870:	023f      	lsls	r7, r7, #8
	event->poller = NULL;
   31872:	60ab      	str	r3, [r5, #8]
	event->type = type;
   31874:	f404 3400 	and.w	r4, r4, #131072	; 0x20000
   31878:	7b2b      	ldrb	r3, [r5, #12]
   3187a:	f407 6770 	and.w	r7, r7, #3840	; 0xf00
   3187e:	433c      	orrs	r4, r7
   31880:	431c      	orrs	r4, r3
	event->obj = obj;
   31882:	e9c5 4603 	strd	r4, r6, [r5, #12]
}
   31886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   31888:	0003b287 	.word	0x0003b287
   3188c:	0003b16e 	.word	0x0003b16e
   31890:	00037a66 	.word	0x00037a66
   31894:	0003b2a7 	.word	0x0003b2a7
   31898:	0003b2cd 	.word	0x0003b2cd
   3189c:	0003b2f1 	.word	0x0003b2f1
   318a0:	0003b301 	.word	0x0003b301
   318a4:	0003b314 	.word	0x0003b314

000318a8 <z_impl_k_poll>:

int z_impl_k_poll(struct k_poll_event *events, int num_events, s32_t timeout)
{
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
   318a8:	2301      	movs	r3, #1
{
   318aa:	b5f0      	push	{r4, r5, r6, r7, lr}
   318ac:	b087      	sub	sp, #28
	struct _poller poller = { .is_polling = true,
   318ae:	f88d 300c 	strb.w	r3, [sp, #12]
				  .thread     = _current,
   318b2:	4b70      	ldr	r3, [pc, #448]	; (31a74 <z_impl_k_poll+0x1cc>)
{
   318b4:	4604      	mov	r4, r0
	struct _poller poller = { .is_polling = true,
   318b6:	689b      	ldr	r3, [r3, #8]
{
   318b8:	460e      	mov	r6, r1
	struct _poller poller = { .is_polling = true,
   318ba:	9304      	str	r3, [sp, #16]
   318bc:	4b6e      	ldr	r3, [pc, #440]	; (31a78 <z_impl_k_poll+0x1d0>)
{
   318be:	4615      	mov	r5, r2
	struct _poller poller = { .is_polling = true,
   318c0:	9305      	str	r3, [sp, #20]
   318c2:	f3ef 8305 	mrs	r3, IPSR
				  .cb         = k_poll_poller_cb };

	__ASSERT(!arch_is_in_isr(), "");
   318c6:	b163      	cbz	r3, 318e2 <z_impl_k_poll+0x3a>
   318c8:	496c      	ldr	r1, [pc, #432]	; (31a7c <z_impl_k_poll+0x1d4>)
   318ca:	23ff      	movs	r3, #255	; 0xff
   318cc:	4a6c      	ldr	r2, [pc, #432]	; (31a80 <z_impl_k_poll+0x1d8>)
   318ce:	486d      	ldr	r0, [pc, #436]	; (31a84 <z_impl_k_poll+0x1dc>)
   318d0:	f001 fe21 	bl	33516 <printk>
   318d4:	486c      	ldr	r0, [pc, #432]	; (31a88 <z_impl_k_poll+0x1e0>)
   318d6:	f001 fe1e 	bl	33516 <printk>
   318da:	21ff      	movs	r1, #255	; 0xff
   318dc:	4868      	ldr	r0, [pc, #416]	; (31a80 <z_impl_k_poll+0x1d8>)
   318de:	f001 fe60 	bl	335a2 <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   318e2:	b974      	cbnz	r4, 31902 <z_impl_k_poll+0x5a>
   318e4:	4969      	ldr	r1, [pc, #420]	; (31a8c <z_impl_k_poll+0x1e4>)
   318e6:	f44f 7380 	mov.w	r3, #256	; 0x100
   318ea:	4a65      	ldr	r2, [pc, #404]	; (31a80 <z_impl_k_poll+0x1d8>)
   318ec:	4865      	ldr	r0, [pc, #404]	; (31a84 <z_impl_k_poll+0x1dc>)
   318ee:	f001 fe12 	bl	33516 <printk>
   318f2:	4867      	ldr	r0, [pc, #412]	; (31a90 <z_impl_k_poll+0x1e8>)
   318f4:	f001 fe0f 	bl	33516 <printk>
   318f8:	f44f 7180 	mov.w	r1, #256	; 0x100
   318fc:	4860      	ldr	r0, [pc, #384]	; (31a80 <z_impl_k_poll+0x1d8>)
   318fe:	f001 fe50 	bl	335a2 <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   31902:	2e00      	cmp	r6, #0
   31904:	da0e      	bge.n	31924 <z_impl_k_poll+0x7c>
   31906:	4963      	ldr	r1, [pc, #396]	; (31a94 <z_impl_k_poll+0x1ec>)
   31908:	f240 1301 	movw	r3, #257	; 0x101
   3190c:	4a5c      	ldr	r2, [pc, #368]	; (31a80 <z_impl_k_poll+0x1d8>)
   3190e:	485d      	ldr	r0, [pc, #372]	; (31a84 <z_impl_k_poll+0x1dc>)
   31910:	f001 fe01 	bl	33516 <printk>
   31914:	4860      	ldr	r0, [pc, #384]	; (31a98 <z_impl_k_poll+0x1f0>)
   31916:	f001 fdfe 	bl	33516 <printk>
   3191a:	f240 1101 	movw	r1, #257	; 0x101
   3191e:	4858      	ldr	r0, [pc, #352]	; (31a80 <z_impl_k_poll+0x1d8>)
   31920:	f001 fe3f 	bl	335a2 <assert_post_action>

	events_registered = register_events(events, num_events, &poller,
   31924:	fab5 f385 	clz	r3, r5
   31928:	4631      	mov	r1, r6
   3192a:	4620      	mov	r0, r4
   3192c:	095b      	lsrs	r3, r3, #5
   3192e:	aa03      	add	r2, sp, #12
   31930:	f7ff fe6e 	bl	31610 <register_events>
   31934:	4606      	mov	r6, r0
	__asm__ volatile(
   31936:	f04f 0320 	mov.w	r3, #32
   3193a:	f3ef 8711 	mrs	r7, BASEPRI
   3193e:	f383 8811 	msr	BASEPRI, r3
   31942:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   31946:	4855      	ldr	r0, [pc, #340]	; (31a9c <z_impl_k_poll+0x1f4>)
   31948:	f7ff f81c 	bl	30984 <z_spin_lock_valid>
   3194c:	b968      	cbnz	r0, 3196a <z_impl_k_poll+0xc2>
   3194e:	234a      	movs	r3, #74	; 0x4a
   31950:	4a53      	ldr	r2, [pc, #332]	; (31aa0 <z_impl_k_poll+0x1f8>)
   31952:	4954      	ldr	r1, [pc, #336]	; (31aa4 <z_impl_k_poll+0x1fc>)
   31954:	484b      	ldr	r0, [pc, #300]	; (31a84 <z_impl_k_poll+0x1dc>)
   31956:	f001 fdde 	bl	33516 <printk>
   3195a:	4950      	ldr	r1, [pc, #320]	; (31a9c <z_impl_k_poll+0x1f4>)
   3195c:	4852      	ldr	r0, [pc, #328]	; (31aa8 <z_impl_k_poll+0x200>)
   3195e:	f001 fdda 	bl	33516 <printk>
   31962:	214a      	movs	r1, #74	; 0x4a
   31964:	484e      	ldr	r0, [pc, #312]	; (31aa0 <z_impl_k_poll+0x1f8>)
   31966:	f001 fe1c 	bl	335a2 <assert_post_action>
	z_spin_lock_set_owner(l);
   3196a:	484c      	ldr	r0, [pc, #304]	; (31a9c <z_impl_k_poll+0x1f4>)
   3196c:	f7ff f828 	bl	309c0 <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   31970:	f89d 300c 	ldrb.w	r3, [sp, #12]
   31974:	b9f3      	cbnz	r3, 319b4 <z_impl_k_poll+0x10c>
		clear_event_registrations(events, events_registered, key);
   31976:	4620      	mov	r0, r4
   31978:	463a      	mov	r2, r7
   3197a:	4631      	mov	r1, r6
   3197c:	f7ff fd90 	bl	314a0 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   31980:	4846      	ldr	r0, [pc, #280]	; (31a9c <z_impl_k_poll+0x1f4>)
   31982:	f7ff f80d 	bl	309a0 <z_spin_unlock_valid>
   31986:	b968      	cbnz	r0, 319a4 <z_impl_k_poll+0xfc>
   31988:	235d      	movs	r3, #93	; 0x5d
   3198a:	4a45      	ldr	r2, [pc, #276]	; (31aa0 <z_impl_k_poll+0x1f8>)
   3198c:	4947      	ldr	r1, [pc, #284]	; (31aac <z_impl_k_poll+0x204>)
   3198e:	483d      	ldr	r0, [pc, #244]	; (31a84 <z_impl_k_poll+0x1dc>)
   31990:	f001 fdc1 	bl	33516 <printk>
   31994:	4941      	ldr	r1, [pc, #260]	; (31a9c <z_impl_k_poll+0x1f4>)
   31996:	4846      	ldr	r0, [pc, #280]	; (31ab0 <z_impl_k_poll+0x208>)
   31998:	f001 fdbd 	bl	33516 <printk>
   3199c:	215d      	movs	r1, #93	; 0x5d
   3199e:	4840      	ldr	r0, [pc, #256]	; (31aa0 <z_impl_k_poll+0x1f8>)
   319a0:	f001 fdff 	bl	335a2 <assert_post_action>
	__asm__ volatile(
   319a4:	f387 8811 	msr	BASEPRI, r7
   319a8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		return 0;
   319ac:	2500      	movs	r5, #0
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   319ae:	4628      	mov	r0, r5
   319b0:	b007      	add	sp, #28
   319b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	poller.is_polling = false;
   319b4:	2300      	movs	r3, #0
   319b6:	f88d 300c 	strb.w	r3, [sp, #12]
	if (timeout == K_NO_WAIT) {
   319ba:	b9c5      	cbnz	r5, 319ee <z_impl_k_poll+0x146>
   319bc:	4837      	ldr	r0, [pc, #220]	; (31a9c <z_impl_k_poll+0x1f4>)
   319be:	f7fe ffef 	bl	309a0 <z_spin_unlock_valid>
   319c2:	b968      	cbnz	r0, 319e0 <z_impl_k_poll+0x138>
   319c4:	235d      	movs	r3, #93	; 0x5d
   319c6:	4a36      	ldr	r2, [pc, #216]	; (31aa0 <z_impl_k_poll+0x1f8>)
   319c8:	4938      	ldr	r1, [pc, #224]	; (31aac <z_impl_k_poll+0x204>)
   319ca:	482e      	ldr	r0, [pc, #184]	; (31a84 <z_impl_k_poll+0x1dc>)
   319cc:	f001 fda3 	bl	33516 <printk>
   319d0:	4932      	ldr	r1, [pc, #200]	; (31a9c <z_impl_k_poll+0x1f4>)
   319d2:	4837      	ldr	r0, [pc, #220]	; (31ab0 <z_impl_k_poll+0x208>)
   319d4:	f001 fd9f 	bl	33516 <printk>
   319d8:	215d      	movs	r1, #93	; 0x5d
   319da:	4831      	ldr	r0, [pc, #196]	; (31aa0 <z_impl_k_poll+0x1f8>)
   319dc:	f001 fde1 	bl	335a2 <assert_post_action>
   319e0:	f387 8811 	msr	BASEPRI, r7
   319e4:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   319e8:	f06f 050a 	mvn.w	r5, #10
   319ec:	e7df      	b.n	319ae <z_impl_k_poll+0x106>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   319ee:	462b      	mov	r3, r5
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   319f0:	aa01      	add	r2, sp, #4
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   319f2:	4639      	mov	r1, r7
   319f4:	4829      	ldr	r0, [pc, #164]	; (31a9c <z_impl_k_poll+0x1f4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   319f6:	e9cd 2201 	strd	r2, r2, [sp, #4]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   319fa:	f7fe fbe3 	bl	301c4 <z_pend_curr>
   319fe:	4605      	mov	r5, r0
	__asm__ volatile(
   31a00:	f04f 0320 	mov.w	r3, #32
   31a04:	f3ef 8711 	mrs	r7, BASEPRI
   31a08:	f383 8811 	msr	BASEPRI, r3
   31a0c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   31a10:	4822      	ldr	r0, [pc, #136]	; (31a9c <z_impl_k_poll+0x1f4>)
   31a12:	f7fe ffb7 	bl	30984 <z_spin_lock_valid>
   31a16:	b968      	cbnz	r0, 31a34 <z_impl_k_poll+0x18c>
   31a18:	234a      	movs	r3, #74	; 0x4a
   31a1a:	4a21      	ldr	r2, [pc, #132]	; (31aa0 <z_impl_k_poll+0x1f8>)
   31a1c:	4921      	ldr	r1, [pc, #132]	; (31aa4 <z_impl_k_poll+0x1fc>)
   31a1e:	4819      	ldr	r0, [pc, #100]	; (31a84 <z_impl_k_poll+0x1dc>)
   31a20:	f001 fd79 	bl	33516 <printk>
   31a24:	491d      	ldr	r1, [pc, #116]	; (31a9c <z_impl_k_poll+0x1f4>)
   31a26:	4820      	ldr	r0, [pc, #128]	; (31aa8 <z_impl_k_poll+0x200>)
   31a28:	f001 fd75 	bl	33516 <printk>
   31a2c:	214a      	movs	r1, #74	; 0x4a
   31a2e:	481c      	ldr	r0, [pc, #112]	; (31aa0 <z_impl_k_poll+0x1f8>)
   31a30:	f001 fdb7 	bl	335a2 <assert_post_action>
	z_spin_lock_set_owner(l);
   31a34:	4819      	ldr	r0, [pc, #100]	; (31a9c <z_impl_k_poll+0x1f4>)
   31a36:	f7fe ffc3 	bl	309c0 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   31a3a:	4620      	mov	r0, r4
   31a3c:	463a      	mov	r2, r7
   31a3e:	4631      	mov	r1, r6
   31a40:	f7ff fd2e 	bl	314a0 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   31a44:	4815      	ldr	r0, [pc, #84]	; (31a9c <z_impl_k_poll+0x1f4>)
   31a46:	f7fe ffab 	bl	309a0 <z_spin_unlock_valid>
   31a4a:	b968      	cbnz	r0, 31a68 <z_impl_k_poll+0x1c0>
   31a4c:	235d      	movs	r3, #93	; 0x5d
   31a4e:	4a14      	ldr	r2, [pc, #80]	; (31aa0 <z_impl_k_poll+0x1f8>)
   31a50:	4916      	ldr	r1, [pc, #88]	; (31aac <z_impl_k_poll+0x204>)
   31a52:	480c      	ldr	r0, [pc, #48]	; (31a84 <z_impl_k_poll+0x1dc>)
   31a54:	f001 fd5f 	bl	33516 <printk>
   31a58:	4910      	ldr	r1, [pc, #64]	; (31a9c <z_impl_k_poll+0x1f4>)
   31a5a:	4815      	ldr	r0, [pc, #84]	; (31ab0 <z_impl_k_poll+0x208>)
   31a5c:	f001 fd5b 	bl	33516 <printk>
   31a60:	215d      	movs	r1, #93	; 0x5d
   31a62:	480f      	ldr	r0, [pc, #60]	; (31aa0 <z_impl_k_poll+0x1f8>)
   31a64:	f001 fd9d 	bl	335a2 <assert_post_action>
	__asm__ volatile(
   31a68:	f387 8811 	msr	BASEPRI, r7
   31a6c:	f3bf 8f6f 	isb	sy
	return swap_rc;
   31a70:	e79d      	b.n	319ae <z_impl_k_poll+0x106>
   31a72:	bf00      	nop
   31a74:	20023ed0 	.word	0x20023ed0
   31a78:	00031431 	.word	0x00031431
   31a7c:	0003aefe 	.word	0x0003aefe
   31a80:	0003b16e 	.word	0x0003b16e
   31a84:	00037a66 	.word	0x00037a66
   31a88:	00038d10 	.word	0x00038d10
   31a8c:	0003b32e 	.word	0x0003b32e
   31a90:	0003b344 	.word	0x0003b344
   31a94:	0003b353 	.word	0x0003b353
   31a98:	0003b363 	.word	0x0003b363
   31a9c:	20023fec 	.word	0x20023fec
   31aa0:	000382ba 	.word	0x000382ba
   31aa4:	000382e0 	.word	0x000382e0
   31aa8:	000382f5 	.word	0x000382f5
   31aac:	0003830d 	.word	0x0003830d
   31ab0:	00038324 	.word	0x00038324

00031ab4 <__assert_func>:
   31ab4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   31ab6:	4614      	mov	r4, r2
   31ab8:	461a      	mov	r2, r3
   31aba:	4b09      	ldr	r3, [pc, #36]	; (31ae0 <__assert_func+0x2c>)
   31abc:	4605      	mov	r5, r0
   31abe:	681b      	ldr	r3, [r3, #0]
   31ac0:	68d8      	ldr	r0, [r3, #12]
   31ac2:	b14c      	cbz	r4, 31ad8 <__assert_func+0x24>
   31ac4:	4b07      	ldr	r3, [pc, #28]	; (31ae4 <__assert_func+0x30>)
   31ac6:	9100      	str	r1, [sp, #0]
   31ac8:	4907      	ldr	r1, [pc, #28]	; (31ae8 <__assert_func+0x34>)
   31aca:	e9cd 3401 	strd	r3, r4, [sp, #4]
   31ace:	462b      	mov	r3, r5
   31ad0:	f000 f80e 	bl	31af0 <fiprintf>
   31ad4:	f004 f9c5 	bl	35e62 <abort>
   31ad8:	4b04      	ldr	r3, [pc, #16]	; (31aec <__assert_func+0x38>)
   31ada:	461c      	mov	r4, r3
   31adc:	e7f3      	b.n	31ac6 <__assert_func+0x12>
   31ade:	bf00      	nop
   31ae0:	200295bc 	.word	0x200295bc
   31ae4:	0003b370 	.word	0x0003b370
   31ae8:	0003b37d 	.word	0x0003b37d
   31aec:	00038d12 	.word	0x00038d12

00031af0 <fiprintf>:
   31af0:	b40e      	push	{r1, r2, r3}
   31af2:	b503      	push	{r0, r1, lr}
   31af4:	ab03      	add	r3, sp, #12
   31af6:	4601      	mov	r1, r0
   31af8:	4805      	ldr	r0, [pc, #20]	; (31b10 <fiprintf+0x20>)
   31afa:	f853 2b04 	ldr.w	r2, [r3], #4
   31afe:	6800      	ldr	r0, [r0, #0]
   31b00:	9301      	str	r3, [sp, #4]
   31b02:	f000 f8c1 	bl	31c88 <_vfiprintf_r>
   31b06:	b002      	add	sp, #8
   31b08:	f85d eb04 	ldr.w	lr, [sp], #4
   31b0c:	b003      	add	sp, #12
   31b0e:	4770      	bx	lr
   31b10:	200295bc 	.word	0x200295bc

00031b14 <malloc>:
   31b14:	4b02      	ldr	r3, [pc, #8]	; (31b20 <malloc+0xc>)
   31b16:	4601      	mov	r1, r0
   31b18:	6818      	ldr	r0, [r3, #0]
   31b1a:	f000 b85b 	b.w	31bd4 <_malloc_r>
   31b1e:	bf00      	nop
   31b20:	200295bc 	.word	0x200295bc

00031b24 <free>:
   31b24:	4b02      	ldr	r3, [pc, #8]	; (31b30 <free+0xc>)
   31b26:	4601      	mov	r1, r0
   31b28:	6818      	ldr	r0, [r3, #0]
   31b2a:	f000 b803 	b.w	31b34 <_free_r>
   31b2e:	bf00      	nop
   31b30:	200295bc 	.word	0x200295bc

00031b34 <_free_r>:
   31b34:	b537      	push	{r0, r1, r2, r4, r5, lr}
   31b36:	2900      	cmp	r1, #0
   31b38:	d047      	beq.n	31bca <_free_r+0x96>
   31b3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
   31b3e:	1f0c      	subs	r4, r1, #4
   31b40:	9001      	str	r0, [sp, #4]
   31b42:	2b00      	cmp	r3, #0
   31b44:	bfb8      	it	lt
   31b46:	18e4      	addlt	r4, r4, r3
   31b48:	f001 f98c 	bl	32e64 <__malloc_lock>
   31b4c:	4a20      	ldr	r2, [pc, #128]	; (31bd0 <_free_r+0x9c>)
   31b4e:	9801      	ldr	r0, [sp, #4]
   31b50:	6813      	ldr	r3, [r2, #0]
   31b52:	4615      	mov	r5, r2
   31b54:	b933      	cbnz	r3, 31b64 <_free_r+0x30>
   31b56:	6063      	str	r3, [r4, #4]
   31b58:	6014      	str	r4, [r2, #0]
   31b5a:	b003      	add	sp, #12
   31b5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   31b60:	f001 b986 	b.w	32e70 <__malloc_unlock>
   31b64:	42a3      	cmp	r3, r4
   31b66:	d90b      	bls.n	31b80 <_free_r+0x4c>
   31b68:	6821      	ldr	r1, [r4, #0]
   31b6a:	1862      	adds	r2, r4, r1
   31b6c:	4293      	cmp	r3, r2
   31b6e:	bf02      	ittt	eq
   31b70:	681a      	ldreq	r2, [r3, #0]
   31b72:	685b      	ldreq	r3, [r3, #4]
   31b74:	1852      	addeq	r2, r2, r1
   31b76:	6063      	str	r3, [r4, #4]
   31b78:	bf08      	it	eq
   31b7a:	6022      	streq	r2, [r4, #0]
   31b7c:	602c      	str	r4, [r5, #0]
   31b7e:	e7ec      	b.n	31b5a <_free_r+0x26>
   31b80:	461a      	mov	r2, r3
   31b82:	685b      	ldr	r3, [r3, #4]
   31b84:	b10b      	cbz	r3, 31b8a <_free_r+0x56>
   31b86:	42a3      	cmp	r3, r4
   31b88:	d9fa      	bls.n	31b80 <_free_r+0x4c>
   31b8a:	6811      	ldr	r1, [r2, #0]
   31b8c:	1855      	adds	r5, r2, r1
   31b8e:	42a5      	cmp	r5, r4
   31b90:	d10b      	bne.n	31baa <_free_r+0x76>
   31b92:	6824      	ldr	r4, [r4, #0]
   31b94:	4421      	add	r1, r4
   31b96:	1854      	adds	r4, r2, r1
   31b98:	6011      	str	r1, [r2, #0]
   31b9a:	42a3      	cmp	r3, r4
   31b9c:	d1dd      	bne.n	31b5a <_free_r+0x26>
   31b9e:	681c      	ldr	r4, [r3, #0]
   31ba0:	685b      	ldr	r3, [r3, #4]
   31ba2:	4421      	add	r1, r4
   31ba4:	6053      	str	r3, [r2, #4]
   31ba6:	6011      	str	r1, [r2, #0]
   31ba8:	e7d7      	b.n	31b5a <_free_r+0x26>
   31baa:	d902      	bls.n	31bb2 <_free_r+0x7e>
   31bac:	230c      	movs	r3, #12
   31bae:	6003      	str	r3, [r0, #0]
   31bb0:	e7d3      	b.n	31b5a <_free_r+0x26>
   31bb2:	6825      	ldr	r5, [r4, #0]
   31bb4:	1961      	adds	r1, r4, r5
   31bb6:	428b      	cmp	r3, r1
   31bb8:	bf02      	ittt	eq
   31bba:	6819      	ldreq	r1, [r3, #0]
   31bbc:	685b      	ldreq	r3, [r3, #4]
   31bbe:	1949      	addeq	r1, r1, r5
   31bc0:	6063      	str	r3, [r4, #4]
   31bc2:	bf08      	it	eq
   31bc4:	6021      	streq	r1, [r4, #0]
   31bc6:	6054      	str	r4, [r2, #4]
   31bc8:	e7c7      	b.n	31b5a <_free_r+0x26>
   31bca:	b003      	add	sp, #12
   31bcc:	bd30      	pop	{r4, r5, pc}
   31bce:	bf00      	nop
   31bd0:	20023ff0 	.word	0x20023ff0

00031bd4 <_malloc_r>:
   31bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   31bd6:	1ccd      	adds	r5, r1, #3
   31bd8:	4606      	mov	r6, r0
   31bda:	f025 0503 	bic.w	r5, r5, #3
   31bde:	3508      	adds	r5, #8
   31be0:	2d0c      	cmp	r5, #12
   31be2:	bf38      	it	cc
   31be4:	250c      	movcc	r5, #12
   31be6:	2d00      	cmp	r5, #0
   31be8:	db01      	blt.n	31bee <_malloc_r+0x1a>
   31bea:	42a9      	cmp	r1, r5
   31bec:	d903      	bls.n	31bf6 <_malloc_r+0x22>
   31bee:	230c      	movs	r3, #12
   31bf0:	6033      	str	r3, [r6, #0]
   31bf2:	2000      	movs	r0, #0
   31bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   31bf6:	f001 f935 	bl	32e64 <__malloc_lock>
   31bfa:	4921      	ldr	r1, [pc, #132]	; (31c80 <_malloc_r+0xac>)
   31bfc:	680a      	ldr	r2, [r1, #0]
   31bfe:	4614      	mov	r4, r2
   31c00:	b99c      	cbnz	r4, 31c2a <_malloc_r+0x56>
   31c02:	4f20      	ldr	r7, [pc, #128]	; (31c84 <_malloc_r+0xb0>)
   31c04:	683b      	ldr	r3, [r7, #0]
   31c06:	b923      	cbnz	r3, 31c12 <_malloc_r+0x3e>
   31c08:	4621      	mov	r1, r4
   31c0a:	4630      	mov	r0, r6
   31c0c:	f000 fa9a 	bl	32144 <_sbrk_r>
   31c10:	6038      	str	r0, [r7, #0]
   31c12:	4629      	mov	r1, r5
   31c14:	4630      	mov	r0, r6
   31c16:	f000 fa95 	bl	32144 <_sbrk_r>
   31c1a:	1c43      	adds	r3, r0, #1
   31c1c:	d123      	bne.n	31c66 <_malloc_r+0x92>
   31c1e:	230c      	movs	r3, #12
   31c20:	4630      	mov	r0, r6
   31c22:	6033      	str	r3, [r6, #0]
   31c24:	f001 f924 	bl	32e70 <__malloc_unlock>
   31c28:	e7e3      	b.n	31bf2 <_malloc_r+0x1e>
   31c2a:	6823      	ldr	r3, [r4, #0]
   31c2c:	1b5b      	subs	r3, r3, r5
   31c2e:	d417      	bmi.n	31c60 <_malloc_r+0x8c>
   31c30:	2b0b      	cmp	r3, #11
   31c32:	d903      	bls.n	31c3c <_malloc_r+0x68>
   31c34:	6023      	str	r3, [r4, #0]
   31c36:	441c      	add	r4, r3
   31c38:	6025      	str	r5, [r4, #0]
   31c3a:	e004      	b.n	31c46 <_malloc_r+0x72>
   31c3c:	6863      	ldr	r3, [r4, #4]
   31c3e:	42a2      	cmp	r2, r4
   31c40:	bf0c      	ite	eq
   31c42:	600b      	streq	r3, [r1, #0]
   31c44:	6053      	strne	r3, [r2, #4]
   31c46:	4630      	mov	r0, r6
   31c48:	f001 f912 	bl	32e70 <__malloc_unlock>
   31c4c:	f104 000b 	add.w	r0, r4, #11
   31c50:	1d23      	adds	r3, r4, #4
   31c52:	f020 0007 	bic.w	r0, r0, #7
   31c56:	1ac2      	subs	r2, r0, r3
   31c58:	d0cc      	beq.n	31bf4 <_malloc_r+0x20>
   31c5a:	1a1b      	subs	r3, r3, r0
   31c5c:	50a3      	str	r3, [r4, r2]
   31c5e:	e7c9      	b.n	31bf4 <_malloc_r+0x20>
   31c60:	4622      	mov	r2, r4
   31c62:	6864      	ldr	r4, [r4, #4]
   31c64:	e7cc      	b.n	31c00 <_malloc_r+0x2c>
   31c66:	1cc4      	adds	r4, r0, #3
   31c68:	f024 0403 	bic.w	r4, r4, #3
   31c6c:	42a0      	cmp	r0, r4
   31c6e:	d0e3      	beq.n	31c38 <_malloc_r+0x64>
   31c70:	1a21      	subs	r1, r4, r0
   31c72:	4630      	mov	r0, r6
   31c74:	f000 fa66 	bl	32144 <_sbrk_r>
   31c78:	3001      	adds	r0, #1
   31c7a:	d1dd      	bne.n	31c38 <_malloc_r+0x64>
   31c7c:	e7cf      	b.n	31c1e <_malloc_r+0x4a>
   31c7e:	bf00      	nop
   31c80:	20023ff0 	.word	0x20023ff0
   31c84:	20023ff4 	.word	0x20023ff4

00031c88 <_vfiprintf_r>:
   31c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31c8c:	460d      	mov	r5, r1
   31c8e:	b09d      	sub	sp, #116	; 0x74
   31c90:	4614      	mov	r4, r2
   31c92:	4698      	mov	r8, r3
   31c94:	4606      	mov	r6, r0
   31c96:	b118      	cbz	r0, 31ca0 <_vfiprintf_r+0x18>
   31c98:	6983      	ldr	r3, [r0, #24]
   31c9a:	b90b      	cbnz	r3, 31ca0 <_vfiprintf_r+0x18>
   31c9c:	f000 fdde 	bl	3285c <__sinit>
   31ca0:	4b89      	ldr	r3, [pc, #548]	; (31ec8 <_vfiprintf_r+0x240>)
   31ca2:	429d      	cmp	r5, r3
   31ca4:	d11b      	bne.n	31cde <_vfiprintf_r+0x56>
   31ca6:	6875      	ldr	r5, [r6, #4]
   31ca8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   31caa:	07d9      	lsls	r1, r3, #31
   31cac:	d405      	bmi.n	31cba <_vfiprintf_r+0x32>
   31cae:	89ab      	ldrh	r3, [r5, #12]
   31cb0:	059a      	lsls	r2, r3, #22
   31cb2:	d402      	bmi.n	31cba <_vfiprintf_r+0x32>
   31cb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
   31cb6:	f004 fa39 	bl	3612c <__retarget_lock_acquire_recursive>
   31cba:	89ab      	ldrh	r3, [r5, #12]
   31cbc:	071b      	lsls	r3, r3, #28
   31cbe:	d501      	bpl.n	31cc4 <_vfiprintf_r+0x3c>
   31cc0:	692b      	ldr	r3, [r5, #16]
   31cc2:	b9eb      	cbnz	r3, 31d00 <_vfiprintf_r+0x78>
   31cc4:	4629      	mov	r1, r5
   31cc6:	4630      	mov	r0, r6
   31cc8:	f000 fc24 	bl	32514 <__swsetup_r>
   31ccc:	b1c0      	cbz	r0, 31d00 <_vfiprintf_r+0x78>
   31cce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   31cd0:	07dc      	lsls	r4, r3, #31
   31cd2:	d50e      	bpl.n	31cf2 <_vfiprintf_r+0x6a>
   31cd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   31cd8:	b01d      	add	sp, #116	; 0x74
   31cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31cde:	4b7b      	ldr	r3, [pc, #492]	; (31ecc <_vfiprintf_r+0x244>)
   31ce0:	429d      	cmp	r5, r3
   31ce2:	d101      	bne.n	31ce8 <_vfiprintf_r+0x60>
   31ce4:	68b5      	ldr	r5, [r6, #8]
   31ce6:	e7df      	b.n	31ca8 <_vfiprintf_r+0x20>
   31ce8:	4b79      	ldr	r3, [pc, #484]	; (31ed0 <_vfiprintf_r+0x248>)
   31cea:	429d      	cmp	r5, r3
   31cec:	bf08      	it	eq
   31cee:	68f5      	ldreq	r5, [r6, #12]
   31cf0:	e7da      	b.n	31ca8 <_vfiprintf_r+0x20>
   31cf2:	89ab      	ldrh	r3, [r5, #12]
   31cf4:	0598      	lsls	r0, r3, #22
   31cf6:	d4ed      	bmi.n	31cd4 <_vfiprintf_r+0x4c>
   31cf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
   31cfa:	f004 fa18 	bl	3612e <__retarget_lock_release_recursive>
   31cfe:	e7e9      	b.n	31cd4 <_vfiprintf_r+0x4c>
   31d00:	2300      	movs	r3, #0
   31d02:	f8cd 800c 	str.w	r8, [sp, #12]
   31d06:	f04f 0901 	mov.w	r9, #1
   31d0a:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 31ed4 <_vfiprintf_r+0x24c>
   31d0e:	9309      	str	r3, [sp, #36]	; 0x24
   31d10:	2320      	movs	r3, #32
   31d12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   31d16:	2330      	movs	r3, #48	; 0x30
   31d18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   31d1c:	4623      	mov	r3, r4
   31d1e:	469a      	mov	sl, r3
   31d20:	f813 2b01 	ldrb.w	r2, [r3], #1
   31d24:	b10a      	cbz	r2, 31d2a <_vfiprintf_r+0xa2>
   31d26:	2a25      	cmp	r2, #37	; 0x25
   31d28:	d1f9      	bne.n	31d1e <_vfiprintf_r+0x96>
   31d2a:	ebba 0b04 	subs.w	fp, sl, r4
   31d2e:	d00b      	beq.n	31d48 <_vfiprintf_r+0xc0>
   31d30:	465b      	mov	r3, fp
   31d32:	4622      	mov	r2, r4
   31d34:	4629      	mov	r1, r5
   31d36:	4630      	mov	r0, r6
   31d38:	f003 ff2e 	bl	35b98 <__sfputs_r>
   31d3c:	3001      	adds	r0, #1
   31d3e:	f000 80aa 	beq.w	31e96 <_vfiprintf_r+0x20e>
   31d42:	9a09      	ldr	r2, [sp, #36]	; 0x24
   31d44:	445a      	add	r2, fp
   31d46:	9209      	str	r2, [sp, #36]	; 0x24
   31d48:	f89a 3000 	ldrb.w	r3, [sl]
   31d4c:	2b00      	cmp	r3, #0
   31d4e:	f000 80a2 	beq.w	31e96 <_vfiprintf_r+0x20e>
   31d52:	2300      	movs	r3, #0
   31d54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   31d58:	f10a 0a01 	add.w	sl, sl, #1
   31d5c:	9304      	str	r3, [sp, #16]
   31d5e:	9307      	str	r3, [sp, #28]
   31d60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   31d64:	931a      	str	r3, [sp, #104]	; 0x68
   31d66:	e9cd 2305 	strd	r2, r3, [sp, #20]
   31d6a:	4654      	mov	r4, sl
   31d6c:	2205      	movs	r2, #5
   31d6e:	4859      	ldr	r0, [pc, #356]	; (31ed4 <_vfiprintf_r+0x24c>)
   31d70:	f814 1b01 	ldrb.w	r1, [r4], #1
   31d74:	f003 feac 	bl	35ad0 <memchr>
   31d78:	9a04      	ldr	r2, [sp, #16]
   31d7a:	b9d8      	cbnz	r0, 31db4 <_vfiprintf_r+0x12c>
   31d7c:	06d1      	lsls	r1, r2, #27
   31d7e:	bf44      	itt	mi
   31d80:	2320      	movmi	r3, #32
   31d82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   31d86:	0713      	lsls	r3, r2, #28
   31d88:	bf44      	itt	mi
   31d8a:	232b      	movmi	r3, #43	; 0x2b
   31d8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   31d90:	f89a 3000 	ldrb.w	r3, [sl]
   31d94:	2b2a      	cmp	r3, #42	; 0x2a
   31d96:	d015      	beq.n	31dc4 <_vfiprintf_r+0x13c>
   31d98:	9a07      	ldr	r2, [sp, #28]
   31d9a:	4654      	mov	r4, sl
   31d9c:	2000      	movs	r0, #0
   31d9e:	f04f 0c0a 	mov.w	ip, #10
   31da2:	4621      	mov	r1, r4
   31da4:	f811 3b01 	ldrb.w	r3, [r1], #1
   31da8:	3b30      	subs	r3, #48	; 0x30
   31daa:	2b09      	cmp	r3, #9
   31dac:	d94e      	bls.n	31e4c <_vfiprintf_r+0x1c4>
   31dae:	b1b0      	cbz	r0, 31dde <_vfiprintf_r+0x156>
   31db0:	9207      	str	r2, [sp, #28]
   31db2:	e014      	b.n	31dde <_vfiprintf_r+0x156>
   31db4:	eba0 0308 	sub.w	r3, r0, r8
   31db8:	46a2      	mov	sl, r4
   31dba:	fa09 f303 	lsl.w	r3, r9, r3
   31dbe:	4313      	orrs	r3, r2
   31dc0:	9304      	str	r3, [sp, #16]
   31dc2:	e7d2      	b.n	31d6a <_vfiprintf_r+0xe2>
   31dc4:	9b03      	ldr	r3, [sp, #12]
   31dc6:	1d19      	adds	r1, r3, #4
   31dc8:	681b      	ldr	r3, [r3, #0]
   31dca:	2b00      	cmp	r3, #0
   31dcc:	9103      	str	r1, [sp, #12]
   31dce:	bfbb      	ittet	lt
   31dd0:	425b      	neglt	r3, r3
   31dd2:	f042 0202 	orrlt.w	r2, r2, #2
   31dd6:	9307      	strge	r3, [sp, #28]
   31dd8:	9307      	strlt	r3, [sp, #28]
   31dda:	bfb8      	it	lt
   31ddc:	9204      	strlt	r2, [sp, #16]
   31dde:	7823      	ldrb	r3, [r4, #0]
   31de0:	2b2e      	cmp	r3, #46	; 0x2e
   31de2:	d10c      	bne.n	31dfe <_vfiprintf_r+0x176>
   31de4:	7863      	ldrb	r3, [r4, #1]
   31de6:	2b2a      	cmp	r3, #42	; 0x2a
   31de8:	d135      	bne.n	31e56 <_vfiprintf_r+0x1ce>
   31dea:	9b03      	ldr	r3, [sp, #12]
   31dec:	3402      	adds	r4, #2
   31dee:	1d1a      	adds	r2, r3, #4
   31df0:	681b      	ldr	r3, [r3, #0]
   31df2:	2b00      	cmp	r3, #0
   31df4:	9203      	str	r2, [sp, #12]
   31df6:	bfb8      	it	lt
   31df8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   31dfc:	9305      	str	r3, [sp, #20]
   31dfe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 31ee4 <_vfiprintf_r+0x25c>
   31e02:	2203      	movs	r2, #3
   31e04:	7821      	ldrb	r1, [r4, #0]
   31e06:	4650      	mov	r0, sl
   31e08:	f003 fe62 	bl	35ad0 <memchr>
   31e0c:	b140      	cbz	r0, 31e20 <_vfiprintf_r+0x198>
   31e0e:	2340      	movs	r3, #64	; 0x40
   31e10:	eba0 000a 	sub.w	r0, r0, sl
   31e14:	3401      	adds	r4, #1
   31e16:	fa03 f000 	lsl.w	r0, r3, r0
   31e1a:	9b04      	ldr	r3, [sp, #16]
   31e1c:	4303      	orrs	r3, r0
   31e1e:	9304      	str	r3, [sp, #16]
   31e20:	f814 1b01 	ldrb.w	r1, [r4], #1
   31e24:	2206      	movs	r2, #6
   31e26:	482c      	ldr	r0, [pc, #176]	; (31ed8 <_vfiprintf_r+0x250>)
   31e28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   31e2c:	f003 fe50 	bl	35ad0 <memchr>
   31e30:	2800      	cmp	r0, #0
   31e32:	d03f      	beq.n	31eb4 <_vfiprintf_r+0x22c>
   31e34:	4b29      	ldr	r3, [pc, #164]	; (31edc <_vfiprintf_r+0x254>)
   31e36:	bb1b      	cbnz	r3, 31e80 <_vfiprintf_r+0x1f8>
   31e38:	9b03      	ldr	r3, [sp, #12]
   31e3a:	3307      	adds	r3, #7
   31e3c:	f023 0307 	bic.w	r3, r3, #7
   31e40:	3308      	adds	r3, #8
   31e42:	9303      	str	r3, [sp, #12]
   31e44:	9b09      	ldr	r3, [sp, #36]	; 0x24
   31e46:	443b      	add	r3, r7
   31e48:	9309      	str	r3, [sp, #36]	; 0x24
   31e4a:	e767      	b.n	31d1c <_vfiprintf_r+0x94>
   31e4c:	fb0c 3202 	mla	r2, ip, r2, r3
   31e50:	460c      	mov	r4, r1
   31e52:	2001      	movs	r0, #1
   31e54:	e7a5      	b.n	31da2 <_vfiprintf_r+0x11a>
   31e56:	2300      	movs	r3, #0
   31e58:	3401      	adds	r4, #1
   31e5a:	f04f 0c0a 	mov.w	ip, #10
   31e5e:	4619      	mov	r1, r3
   31e60:	9305      	str	r3, [sp, #20]
   31e62:	4620      	mov	r0, r4
   31e64:	f810 2b01 	ldrb.w	r2, [r0], #1
   31e68:	3a30      	subs	r2, #48	; 0x30
   31e6a:	2a09      	cmp	r2, #9
   31e6c:	d903      	bls.n	31e76 <_vfiprintf_r+0x1ee>
   31e6e:	2b00      	cmp	r3, #0
   31e70:	d0c5      	beq.n	31dfe <_vfiprintf_r+0x176>
   31e72:	9105      	str	r1, [sp, #20]
   31e74:	e7c3      	b.n	31dfe <_vfiprintf_r+0x176>
   31e76:	fb0c 2101 	mla	r1, ip, r1, r2
   31e7a:	4604      	mov	r4, r0
   31e7c:	2301      	movs	r3, #1
   31e7e:	e7f0      	b.n	31e62 <_vfiprintf_r+0x1da>
   31e80:	ab03      	add	r3, sp, #12
   31e82:	462a      	mov	r2, r5
   31e84:	a904      	add	r1, sp, #16
   31e86:	4630      	mov	r0, r6
   31e88:	9300      	str	r3, [sp, #0]
   31e8a:	4b15      	ldr	r3, [pc, #84]	; (31ee0 <_vfiprintf_r+0x258>)
   31e8c:	e000      	b.n	31e90 <_vfiprintf_r+0x208>
   31e8e:	bf00      	nop
   31e90:	4607      	mov	r7, r0
   31e92:	1c78      	adds	r0, r7, #1
   31e94:	d1d6      	bne.n	31e44 <_vfiprintf_r+0x1bc>
   31e96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   31e98:	07d9      	lsls	r1, r3, #31
   31e9a:	d405      	bmi.n	31ea8 <_vfiprintf_r+0x220>
   31e9c:	89ab      	ldrh	r3, [r5, #12]
   31e9e:	059a      	lsls	r2, r3, #22
   31ea0:	d402      	bmi.n	31ea8 <_vfiprintf_r+0x220>
   31ea2:	6da8      	ldr	r0, [r5, #88]	; 0x58
   31ea4:	f004 f943 	bl	3612e <__retarget_lock_release_recursive>
   31ea8:	89ab      	ldrh	r3, [r5, #12]
   31eaa:	065b      	lsls	r3, r3, #25
   31eac:	f53f af12 	bmi.w	31cd4 <_vfiprintf_r+0x4c>
   31eb0:	9809      	ldr	r0, [sp, #36]	; 0x24
   31eb2:	e711      	b.n	31cd8 <_vfiprintf_r+0x50>
   31eb4:	ab03      	add	r3, sp, #12
   31eb6:	462a      	mov	r2, r5
   31eb8:	a904      	add	r1, sp, #16
   31eba:	4630      	mov	r0, r6
   31ebc:	9300      	str	r3, [sp, #0]
   31ebe:	4b08      	ldr	r3, [pc, #32]	; (31ee0 <_vfiprintf_r+0x258>)
   31ec0:	f000 f812 	bl	31ee8 <_printf_i>
   31ec4:	e7e4      	b.n	31e90 <_vfiprintf_r+0x208>
   31ec6:	bf00      	nop
   31ec8:	00037554 	.word	0x00037554
   31ecc:	00037574 	.word	0x00037574
   31ed0:	00037534 	.word	0x00037534
   31ed4:	0003b4ad 	.word	0x0003b4ad
   31ed8:	0003b4b7 	.word	0x0003b4b7
   31edc:	00000000 	.word	0x00000000
   31ee0:	00035b99 	.word	0x00035b99
   31ee4:	0003b4b3 	.word	0x0003b4b3

00031ee8 <_printf_i>:
   31ee8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   31eec:	460c      	mov	r4, r1
   31eee:	4691      	mov	r9, r2
   31ef0:	4680      	mov	r8, r0
   31ef2:	469a      	mov	sl, r3
   31ef4:	7e27      	ldrb	r7, [r4, #24]
   31ef6:	f104 0243 	add.w	r2, r4, #67	; 0x43
   31efa:	990c      	ldr	r1, [sp, #48]	; 0x30
   31efc:	2f78      	cmp	r7, #120	; 0x78
   31efe:	d807      	bhi.n	31f10 <_printf_i+0x28>
   31f00:	2f62      	cmp	r7, #98	; 0x62
   31f02:	d80a      	bhi.n	31f1a <_printf_i+0x32>
   31f04:	2f00      	cmp	r7, #0
   31f06:	f000 80d8 	beq.w	320ba <_printf_i+0x1d2>
   31f0a:	2f58      	cmp	r7, #88	; 0x58
   31f0c:	f000 80a3 	beq.w	32056 <_printf_i+0x16e>
   31f10:	f104 0642 	add.w	r6, r4, #66	; 0x42
   31f14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   31f18:	e03a      	b.n	31f90 <_printf_i+0xa8>
   31f1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   31f1e:	2b15      	cmp	r3, #21
   31f20:	d8f6      	bhi.n	31f10 <_printf_i+0x28>
   31f22:	a001      	add	r0, pc, #4	; (adr r0, 31f28 <_printf_i+0x40>)
   31f24:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   31f28:	00031f81 	.word	0x00031f81
   31f2c:	00031f95 	.word	0x00031f95
   31f30:	00031f11 	.word	0x00031f11
   31f34:	00031f11 	.word	0x00031f11
   31f38:	00031f11 	.word	0x00031f11
   31f3c:	00031f11 	.word	0x00031f11
   31f40:	00031f95 	.word	0x00031f95
   31f44:	00031f11 	.word	0x00031f11
   31f48:	00031f11 	.word	0x00031f11
   31f4c:	00031f11 	.word	0x00031f11
   31f50:	00031f11 	.word	0x00031f11
   31f54:	000320a1 	.word	0x000320a1
   31f58:	00031fc5 	.word	0x00031fc5
   31f5c:	00032083 	.word	0x00032083
   31f60:	00031f11 	.word	0x00031f11
   31f64:	00031f11 	.word	0x00031f11
   31f68:	000320c3 	.word	0x000320c3
   31f6c:	00031f11 	.word	0x00031f11
   31f70:	00031fc5 	.word	0x00031fc5
   31f74:	00031f11 	.word	0x00031f11
   31f78:	00031f11 	.word	0x00031f11
   31f7c:	0003208b 	.word	0x0003208b
   31f80:	680b      	ldr	r3, [r1, #0]
   31f82:	f104 0642 	add.w	r6, r4, #66	; 0x42
   31f86:	1d1a      	adds	r2, r3, #4
   31f88:	681b      	ldr	r3, [r3, #0]
   31f8a:	600a      	str	r2, [r1, #0]
   31f8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   31f90:	2301      	movs	r3, #1
   31f92:	e0a3      	b.n	320dc <_printf_i+0x1f4>
   31f94:	6825      	ldr	r5, [r4, #0]
   31f96:	6808      	ldr	r0, [r1, #0]
   31f98:	062e      	lsls	r6, r5, #24
   31f9a:	f100 0304 	add.w	r3, r0, #4
   31f9e:	d50a      	bpl.n	31fb6 <_printf_i+0xce>
   31fa0:	6805      	ldr	r5, [r0, #0]
   31fa2:	600b      	str	r3, [r1, #0]
   31fa4:	2d00      	cmp	r5, #0
   31fa6:	da03      	bge.n	31fb0 <_printf_i+0xc8>
   31fa8:	232d      	movs	r3, #45	; 0x2d
   31faa:	426d      	negs	r5, r5
   31fac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   31fb0:	485e      	ldr	r0, [pc, #376]	; (3212c <_printf_i+0x244>)
   31fb2:	230a      	movs	r3, #10
   31fb4:	e019      	b.n	31fea <_printf_i+0x102>
   31fb6:	f015 0f40 	tst.w	r5, #64	; 0x40
   31fba:	6805      	ldr	r5, [r0, #0]
   31fbc:	600b      	str	r3, [r1, #0]
   31fbe:	bf18      	it	ne
   31fc0:	b22d      	sxthne	r5, r5
   31fc2:	e7ef      	b.n	31fa4 <_printf_i+0xbc>
   31fc4:	680b      	ldr	r3, [r1, #0]
   31fc6:	6825      	ldr	r5, [r4, #0]
   31fc8:	1d18      	adds	r0, r3, #4
   31fca:	6008      	str	r0, [r1, #0]
   31fcc:	0628      	lsls	r0, r5, #24
   31fce:	d501      	bpl.n	31fd4 <_printf_i+0xec>
   31fd0:	681d      	ldr	r5, [r3, #0]
   31fd2:	e002      	b.n	31fda <_printf_i+0xf2>
   31fd4:	0669      	lsls	r1, r5, #25
   31fd6:	d5fb      	bpl.n	31fd0 <_printf_i+0xe8>
   31fd8:	881d      	ldrh	r5, [r3, #0]
   31fda:	2f6f      	cmp	r7, #111	; 0x6f
   31fdc:	4853      	ldr	r0, [pc, #332]	; (3212c <_printf_i+0x244>)
   31fde:	bf0c      	ite	eq
   31fe0:	2308      	moveq	r3, #8
   31fe2:	230a      	movne	r3, #10
   31fe4:	2100      	movs	r1, #0
   31fe6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   31fea:	6866      	ldr	r6, [r4, #4]
   31fec:	2e00      	cmp	r6, #0
   31fee:	60a6      	str	r6, [r4, #8]
   31ff0:	bfa2      	ittt	ge
   31ff2:	6821      	ldrge	r1, [r4, #0]
   31ff4:	f021 0104 	bicge.w	r1, r1, #4
   31ff8:	6021      	strge	r1, [r4, #0]
   31ffa:	b90d      	cbnz	r5, 32000 <_printf_i+0x118>
   31ffc:	2e00      	cmp	r6, #0
   31ffe:	d04d      	beq.n	3209c <_printf_i+0x1b4>
   32000:	4616      	mov	r6, r2
   32002:	fbb5 f1f3 	udiv	r1, r5, r3
   32006:	fb03 5711 	mls	r7, r3, r1, r5
   3200a:	5dc7      	ldrb	r7, [r0, r7]
   3200c:	f806 7d01 	strb.w	r7, [r6, #-1]!
   32010:	462f      	mov	r7, r5
   32012:	460d      	mov	r5, r1
   32014:	42bb      	cmp	r3, r7
   32016:	d9f4      	bls.n	32002 <_printf_i+0x11a>
   32018:	2b08      	cmp	r3, #8
   3201a:	d10b      	bne.n	32034 <_printf_i+0x14c>
   3201c:	6823      	ldr	r3, [r4, #0]
   3201e:	07df      	lsls	r7, r3, #31
   32020:	d508      	bpl.n	32034 <_printf_i+0x14c>
   32022:	6923      	ldr	r3, [r4, #16]
   32024:	6861      	ldr	r1, [r4, #4]
   32026:	4299      	cmp	r1, r3
   32028:	bfde      	ittt	le
   3202a:	2330      	movle	r3, #48	; 0x30
   3202c:	f806 3c01 	strble.w	r3, [r6, #-1]
   32030:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
   32034:	1b92      	subs	r2, r2, r6
   32036:	6122      	str	r2, [r4, #16]
   32038:	464b      	mov	r3, r9
   3203a:	aa03      	add	r2, sp, #12
   3203c:	4621      	mov	r1, r4
   3203e:	4640      	mov	r0, r8
   32040:	f8cd a000 	str.w	sl, [sp]
   32044:	f003 fdba 	bl	35bbc <_printf_common>
   32048:	3001      	adds	r0, #1
   3204a:	d14c      	bne.n	320e6 <_printf_i+0x1fe>
   3204c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   32050:	b004      	add	sp, #16
   32052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   32056:	4835      	ldr	r0, [pc, #212]	; (3212c <_printf_i+0x244>)
   32058:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   3205c:	6823      	ldr	r3, [r4, #0]
   3205e:	680e      	ldr	r6, [r1, #0]
   32060:	061f      	lsls	r7, r3, #24
   32062:	f856 5b04 	ldr.w	r5, [r6], #4
   32066:	600e      	str	r6, [r1, #0]
   32068:	d514      	bpl.n	32094 <_printf_i+0x1ac>
   3206a:	07d9      	lsls	r1, r3, #31
   3206c:	bf44      	itt	mi
   3206e:	f043 0320 	orrmi.w	r3, r3, #32
   32072:	6023      	strmi	r3, [r4, #0]
   32074:	b91d      	cbnz	r5, 3207e <_printf_i+0x196>
   32076:	6823      	ldr	r3, [r4, #0]
   32078:	f023 0320 	bic.w	r3, r3, #32
   3207c:	6023      	str	r3, [r4, #0]
   3207e:	2310      	movs	r3, #16
   32080:	e7b0      	b.n	31fe4 <_printf_i+0xfc>
   32082:	6823      	ldr	r3, [r4, #0]
   32084:	f043 0320 	orr.w	r3, r3, #32
   32088:	6023      	str	r3, [r4, #0]
   3208a:	2378      	movs	r3, #120	; 0x78
   3208c:	4828      	ldr	r0, [pc, #160]	; (32130 <_printf_i+0x248>)
   3208e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   32092:	e7e3      	b.n	3205c <_printf_i+0x174>
   32094:	065e      	lsls	r6, r3, #25
   32096:	bf48      	it	mi
   32098:	b2ad      	uxthmi	r5, r5
   3209a:	e7e6      	b.n	3206a <_printf_i+0x182>
   3209c:	4616      	mov	r6, r2
   3209e:	e7bb      	b.n	32018 <_printf_i+0x130>
   320a0:	680b      	ldr	r3, [r1, #0]
   320a2:	6826      	ldr	r6, [r4, #0]
   320a4:	1d1d      	adds	r5, r3, #4
   320a6:	6960      	ldr	r0, [r4, #20]
   320a8:	600d      	str	r5, [r1, #0]
   320aa:	0635      	lsls	r5, r6, #24
   320ac:	681b      	ldr	r3, [r3, #0]
   320ae:	d501      	bpl.n	320b4 <_printf_i+0x1cc>
   320b0:	6018      	str	r0, [r3, #0]
   320b2:	e002      	b.n	320ba <_printf_i+0x1d2>
   320b4:	0671      	lsls	r1, r6, #25
   320b6:	d5fb      	bpl.n	320b0 <_printf_i+0x1c8>
   320b8:	8018      	strh	r0, [r3, #0]
   320ba:	2300      	movs	r3, #0
   320bc:	4616      	mov	r6, r2
   320be:	6123      	str	r3, [r4, #16]
   320c0:	e7ba      	b.n	32038 <_printf_i+0x150>
   320c2:	680b      	ldr	r3, [r1, #0]
   320c4:	1d1a      	adds	r2, r3, #4
   320c6:	600a      	str	r2, [r1, #0]
   320c8:	2100      	movs	r1, #0
   320ca:	681e      	ldr	r6, [r3, #0]
   320cc:	6862      	ldr	r2, [r4, #4]
   320ce:	4630      	mov	r0, r6
   320d0:	f003 fcfe 	bl	35ad0 <memchr>
   320d4:	b108      	cbz	r0, 320da <_printf_i+0x1f2>
   320d6:	1b80      	subs	r0, r0, r6
   320d8:	6060      	str	r0, [r4, #4]
   320da:	6863      	ldr	r3, [r4, #4]
   320dc:	6123      	str	r3, [r4, #16]
   320de:	2300      	movs	r3, #0
   320e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   320e4:	e7a8      	b.n	32038 <_printf_i+0x150>
   320e6:	6923      	ldr	r3, [r4, #16]
   320e8:	4632      	mov	r2, r6
   320ea:	4649      	mov	r1, r9
   320ec:	4640      	mov	r0, r8
   320ee:	47d0      	blx	sl
   320f0:	3001      	adds	r0, #1
   320f2:	d0ab      	beq.n	3204c <_printf_i+0x164>
   320f4:	6823      	ldr	r3, [r4, #0]
   320f6:	079b      	lsls	r3, r3, #30
   320f8:	d413      	bmi.n	32122 <_printf_i+0x23a>
   320fa:	68e0      	ldr	r0, [r4, #12]
   320fc:	9b03      	ldr	r3, [sp, #12]
   320fe:	4298      	cmp	r0, r3
   32100:	bfb8      	it	lt
   32102:	4618      	movlt	r0, r3
   32104:	e7a4      	b.n	32050 <_printf_i+0x168>
   32106:	2301      	movs	r3, #1
   32108:	4632      	mov	r2, r6
   3210a:	4649      	mov	r1, r9
   3210c:	4640      	mov	r0, r8
   3210e:	47d0      	blx	sl
   32110:	3001      	adds	r0, #1
   32112:	d09b      	beq.n	3204c <_printf_i+0x164>
   32114:	3501      	adds	r5, #1
   32116:	68e3      	ldr	r3, [r4, #12]
   32118:	9903      	ldr	r1, [sp, #12]
   3211a:	1a5b      	subs	r3, r3, r1
   3211c:	42ab      	cmp	r3, r5
   3211e:	dcf2      	bgt.n	32106 <_printf_i+0x21e>
   32120:	e7eb      	b.n	320fa <_printf_i+0x212>
   32122:	2500      	movs	r5, #0
   32124:	f104 0619 	add.w	r6, r4, #25
   32128:	e7f5      	b.n	32116 <_printf_i+0x22e>
   3212a:	bf00      	nop
   3212c:	0003b4be 	.word	0x0003b4be
   32130:	0003b4cf 	.word	0x0003b4cf

00032134 <realloc>:
   32134:	4b02      	ldr	r3, [pc, #8]	; (32140 <realloc+0xc>)
   32136:	460a      	mov	r2, r1
   32138:	4601      	mov	r1, r0
   3213a:	6818      	ldr	r0, [r3, #0]
   3213c:	f004 bbd2 	b.w	368e4 <_realloc_r>
   32140:	200295bc 	.word	0x200295bc

00032144 <_sbrk_r>:
   32144:	b538      	push	{r3, r4, r5, lr}
   32146:	2300      	movs	r3, #0
   32148:	4d05      	ldr	r5, [pc, #20]	; (32160 <_sbrk_r+0x1c>)
   3214a:	4604      	mov	r4, r0
   3214c:	4608      	mov	r0, r1
   3214e:	602b      	str	r3, [r5, #0]
   32150:	f7ef f820 	bl	21194 <_sbrk>
   32154:	1c43      	adds	r3, r0, #1
   32156:	d102      	bne.n	3215e <_sbrk_r+0x1a>
   32158:	682b      	ldr	r3, [r5, #0]
   3215a:	b103      	cbz	r3, 3215e <_sbrk_r+0x1a>
   3215c:	6023      	str	r3, [r4, #0]
   3215e:	bd38      	pop	{r3, r4, r5, pc}
   32160:	20025cac 	.word	0x20025cac

00032164 <sniprintf>:
   32164:	b40c      	push	{r2, r3}
   32166:	4b18      	ldr	r3, [pc, #96]	; (321c8 <sniprintf+0x64>)
   32168:	b530      	push	{r4, r5, lr}
   3216a:	1e0c      	subs	r4, r1, #0
   3216c:	b09d      	sub	sp, #116	; 0x74
   3216e:	681d      	ldr	r5, [r3, #0]
   32170:	da08      	bge.n	32184 <sniprintf+0x20>
   32172:	238b      	movs	r3, #139	; 0x8b
   32174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   32178:	602b      	str	r3, [r5, #0]
   3217a:	b01d      	add	sp, #116	; 0x74
   3217c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   32180:	b002      	add	sp, #8
   32182:	4770      	bx	lr
   32184:	f44f 7302 	mov.w	r3, #520	; 0x208
   32188:	9002      	str	r0, [sp, #8]
   3218a:	9006      	str	r0, [sp, #24]
   3218c:	a902      	add	r1, sp, #8
   3218e:	f8ad 3014 	strh.w	r3, [sp, #20]
   32192:	bf14      	ite	ne
   32194:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
   32198:	4623      	moveq	r3, r4
   3219a:	9a20      	ldr	r2, [sp, #128]	; 0x80
   3219c:	4628      	mov	r0, r5
   3219e:	9304      	str	r3, [sp, #16]
   321a0:	9307      	str	r3, [sp, #28]
   321a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   321a6:	f8ad 3016 	strh.w	r3, [sp, #22]
   321aa:	ab21      	add	r3, sp, #132	; 0x84
   321ac:	9301      	str	r3, [sp, #4]
   321ae:	f000 ff2d 	bl	3300c <_svfiprintf_r>
   321b2:	1c43      	adds	r3, r0, #1
   321b4:	bfbc      	itt	lt
   321b6:	238b      	movlt	r3, #139	; 0x8b
   321b8:	602b      	strlt	r3, [r5, #0]
   321ba:	2c00      	cmp	r4, #0
   321bc:	d0dd      	beq.n	3217a <sniprintf+0x16>
   321be:	9b02      	ldr	r3, [sp, #8]
   321c0:	2200      	movs	r2, #0
   321c2:	701a      	strb	r2, [r3, #0]
   321c4:	e7d9      	b.n	3217a <sniprintf+0x16>
   321c6:	bf00      	nop
   321c8:	200295bc 	.word	0x200295bc

000321cc <strtod>:
   321cc:	460a      	mov	r2, r1
   321ce:	4601      	mov	r1, r0
   321d0:	4802      	ldr	r0, [pc, #8]	; (321dc <strtod+0x10>)
   321d2:	4b03      	ldr	r3, [pc, #12]	; (321e0 <strtod+0x14>)
   321d4:	6800      	ldr	r0, [r0, #0]
   321d6:	f7eb b91b 	b.w	1d410 <_strtod_l>
   321da:	bf00      	nop
   321dc:	200295bc 	.word	0x200295bc
   321e0:	20029620 	.word	0x20029620

000321e4 <_strtol_l.isra.0>:
   321e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   321e8:	468c      	mov	ip, r1
   321ea:	4686      	mov	lr, r0
   321ec:	4e38      	ldr	r6, [pc, #224]	; (322d0 <_strtol_l.isra.0+0xec>)
   321ee:	4660      	mov	r0, ip
   321f0:	f81c 4b01 	ldrb.w	r4, [ip], #1
   321f4:	5da5      	ldrb	r5, [r4, r6]
   321f6:	f015 0508 	ands.w	r5, r5, #8
   321fa:	d1f8      	bne.n	321ee <_strtol_l.isra.0+0xa>
   321fc:	2c2d      	cmp	r4, #45	; 0x2d
   321fe:	d133      	bne.n	32268 <_strtol_l.isra.0+0x84>
   32200:	f89c 4000 	ldrb.w	r4, [ip]
   32204:	f04f 0801 	mov.w	r8, #1
   32208:	f100 0c02 	add.w	ip, r0, #2
   3220c:	2b00      	cmp	r3, #0
   3220e:	d05b      	beq.n	322c8 <_strtol_l.isra.0+0xe4>
   32210:	2b10      	cmp	r3, #16
   32212:	d10c      	bne.n	3222e <_strtol_l.isra.0+0x4a>
   32214:	2c30      	cmp	r4, #48	; 0x30
   32216:	d10a      	bne.n	3222e <_strtol_l.isra.0+0x4a>
   32218:	f89c 0000 	ldrb.w	r0, [ip]
   3221c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   32220:	2858      	cmp	r0, #88	; 0x58
   32222:	d14c      	bne.n	322be <_strtol_l.isra.0+0xda>
   32224:	f89c 4001 	ldrb.w	r4, [ip, #1]
   32228:	2310      	movs	r3, #16
   3222a:	f10c 0c02 	add.w	ip, ip, #2
   3222e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   32232:	2600      	movs	r6, #0
   32234:	3f01      	subs	r7, #1
   32236:	4630      	mov	r0, r6
   32238:	fbb7 f9f3 	udiv	r9, r7, r3
   3223c:	fb03 7a19 	mls	sl, r3, r9, r7
   32240:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   32244:	2d09      	cmp	r5, #9
   32246:	d817      	bhi.n	32278 <_strtol_l.isra.0+0x94>
   32248:	462c      	mov	r4, r5
   3224a:	42a3      	cmp	r3, r4
   3224c:	dd23      	ble.n	32296 <_strtol_l.isra.0+0xb2>
   3224e:	1c75      	adds	r5, r6, #1
   32250:	d007      	beq.n	32262 <_strtol_l.isra.0+0x7e>
   32252:	4581      	cmp	r9, r0
   32254:	d31c      	bcc.n	32290 <_strtol_l.isra.0+0xac>
   32256:	d101      	bne.n	3225c <_strtol_l.isra.0+0x78>
   32258:	45a2      	cmp	sl, r4
   3225a:	db19      	blt.n	32290 <_strtol_l.isra.0+0xac>
   3225c:	fb00 4003 	mla	r0, r0, r3, r4
   32260:	2601      	movs	r6, #1
   32262:	f81c 4b01 	ldrb.w	r4, [ip], #1
   32266:	e7eb      	b.n	32240 <_strtol_l.isra.0+0x5c>
   32268:	2c2b      	cmp	r4, #43	; 0x2b
   3226a:	46a8      	mov	r8, r5
   3226c:	bf04      	itt	eq
   3226e:	f89c 4000 	ldrbeq.w	r4, [ip]
   32272:	f100 0c02 	addeq.w	ip, r0, #2
   32276:	e7c9      	b.n	3220c <_strtol_l.isra.0+0x28>
   32278:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   3227c:	2d19      	cmp	r5, #25
   3227e:	d801      	bhi.n	32284 <_strtol_l.isra.0+0xa0>
   32280:	3c37      	subs	r4, #55	; 0x37
   32282:	e7e2      	b.n	3224a <_strtol_l.isra.0+0x66>
   32284:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   32288:	2d19      	cmp	r5, #25
   3228a:	d804      	bhi.n	32296 <_strtol_l.isra.0+0xb2>
   3228c:	3c57      	subs	r4, #87	; 0x57
   3228e:	e7dc      	b.n	3224a <_strtol_l.isra.0+0x66>
   32290:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   32294:	e7e5      	b.n	32262 <_strtol_l.isra.0+0x7e>
   32296:	1c73      	adds	r3, r6, #1
   32298:	d106      	bne.n	322a8 <_strtol_l.isra.0+0xc4>
   3229a:	2322      	movs	r3, #34	; 0x22
   3229c:	4638      	mov	r0, r7
   3229e:	f8ce 3000 	str.w	r3, [lr]
   322a2:	b942      	cbnz	r2, 322b6 <_strtol_l.isra.0+0xd2>
   322a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   322a8:	f1b8 0f00 	cmp.w	r8, #0
   322ac:	d000      	beq.n	322b0 <_strtol_l.isra.0+0xcc>
   322ae:	4240      	negs	r0, r0
   322b0:	2a00      	cmp	r2, #0
   322b2:	d0f7      	beq.n	322a4 <_strtol_l.isra.0+0xc0>
   322b4:	b10e      	cbz	r6, 322ba <_strtol_l.isra.0+0xd6>
   322b6:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   322ba:	6011      	str	r1, [r2, #0]
   322bc:	e7f2      	b.n	322a4 <_strtol_l.isra.0+0xc0>
   322be:	2430      	movs	r4, #48	; 0x30
   322c0:	2b00      	cmp	r3, #0
   322c2:	d1b4      	bne.n	3222e <_strtol_l.isra.0+0x4a>
   322c4:	2308      	movs	r3, #8
   322c6:	e7b2      	b.n	3222e <_strtol_l.isra.0+0x4a>
   322c8:	2c30      	cmp	r4, #48	; 0x30
   322ca:	d0a5      	beq.n	32218 <_strtol_l.isra.0+0x34>
   322cc:	230a      	movs	r3, #10
   322ce:	e7ae      	b.n	3222e <_strtol_l.isra.0+0x4a>
   322d0:	0003b3ad 	.word	0x0003b3ad

000322d4 <strtol>:
   322d4:	4613      	mov	r3, r2
   322d6:	460a      	mov	r2, r1
   322d8:	4601      	mov	r1, r0
   322da:	4802      	ldr	r0, [pc, #8]	; (322e4 <strtol+0x10>)
   322dc:	6800      	ldr	r0, [r0, #0]
   322de:	f7ff bf81 	b.w	321e4 <_strtol_l.isra.0>
   322e2:	bf00      	nop
   322e4:	200295bc 	.word	0x200295bc

000322e8 <_strtoul_l.isra.0>:
   322e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   322ec:	468c      	mov	ip, r1
   322ee:	4686      	mov	lr, r0
   322f0:	4e39      	ldr	r6, [pc, #228]	; (323d8 <_strtoul_l.isra.0+0xf0>)
   322f2:	4660      	mov	r0, ip
   322f4:	f81c 4b01 	ldrb.w	r4, [ip], #1
   322f8:	5da5      	ldrb	r5, [r4, r6]
   322fa:	f015 0508 	ands.w	r5, r5, #8
   322fe:	d1f8      	bne.n	322f2 <_strtoul_l.isra.0+0xa>
   32300:	2c2d      	cmp	r4, #45	; 0x2d
   32302:	d134      	bne.n	3236e <_strtoul_l.isra.0+0x86>
   32304:	f89c 4000 	ldrb.w	r4, [ip]
   32308:	f04f 0801 	mov.w	r8, #1
   3230c:	f100 0c02 	add.w	ip, r0, #2
   32310:	2b00      	cmp	r3, #0
   32312:	d05d      	beq.n	323d0 <_strtoul_l.isra.0+0xe8>
   32314:	2b10      	cmp	r3, #16
   32316:	d10c      	bne.n	32332 <_strtoul_l.isra.0+0x4a>
   32318:	2c30      	cmp	r4, #48	; 0x30
   3231a:	d10a      	bne.n	32332 <_strtoul_l.isra.0+0x4a>
   3231c:	f89c 0000 	ldrb.w	r0, [ip]
   32320:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   32324:	2858      	cmp	r0, #88	; 0x58
   32326:	d14e      	bne.n	323c6 <_strtoul_l.isra.0+0xde>
   32328:	f89c 4001 	ldrb.w	r4, [ip, #1]
   3232c:	2310      	movs	r3, #16
   3232e:	f10c 0c02 	add.w	ip, ip, #2
   32332:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   32336:	2500      	movs	r5, #0
   32338:	fbb7 f7f3 	udiv	r7, r7, r3
   3233c:	fb03 f907 	mul.w	r9, r3, r7
   32340:	4628      	mov	r0, r5
   32342:	ea6f 0909 	mvn.w	r9, r9
   32346:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   3234a:	2e09      	cmp	r6, #9
   3234c:	d817      	bhi.n	3237e <_strtoul_l.isra.0+0x96>
   3234e:	4634      	mov	r4, r6
   32350:	42a3      	cmp	r3, r4
   32352:	dd23      	ble.n	3239c <_strtoul_l.isra.0+0xb4>
   32354:	2d00      	cmp	r5, #0
   32356:	db1e      	blt.n	32396 <_strtoul_l.isra.0+0xae>
   32358:	4287      	cmp	r7, r0
   3235a:	d31c      	bcc.n	32396 <_strtoul_l.isra.0+0xae>
   3235c:	d101      	bne.n	32362 <_strtoul_l.isra.0+0x7a>
   3235e:	45a1      	cmp	r9, r4
   32360:	db19      	blt.n	32396 <_strtoul_l.isra.0+0xae>
   32362:	fb00 4003 	mla	r0, r0, r3, r4
   32366:	2501      	movs	r5, #1
   32368:	f81c 4b01 	ldrb.w	r4, [ip], #1
   3236c:	e7eb      	b.n	32346 <_strtoul_l.isra.0+0x5e>
   3236e:	2c2b      	cmp	r4, #43	; 0x2b
   32370:	46a8      	mov	r8, r5
   32372:	bf04      	itt	eq
   32374:	f89c 4000 	ldrbeq.w	r4, [ip]
   32378:	f100 0c02 	addeq.w	ip, r0, #2
   3237c:	e7c8      	b.n	32310 <_strtoul_l.isra.0+0x28>
   3237e:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
   32382:	2e19      	cmp	r6, #25
   32384:	d801      	bhi.n	3238a <_strtoul_l.isra.0+0xa2>
   32386:	3c37      	subs	r4, #55	; 0x37
   32388:	e7e2      	b.n	32350 <_strtoul_l.isra.0+0x68>
   3238a:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
   3238e:	2e19      	cmp	r6, #25
   32390:	d804      	bhi.n	3239c <_strtoul_l.isra.0+0xb4>
   32392:	3c57      	subs	r4, #87	; 0x57
   32394:	e7dc      	b.n	32350 <_strtoul_l.isra.0+0x68>
   32396:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   3239a:	e7e5      	b.n	32368 <_strtoul_l.isra.0+0x80>
   3239c:	2d00      	cmp	r5, #0
   3239e:	da07      	bge.n	323b0 <_strtoul_l.isra.0+0xc8>
   323a0:	2322      	movs	r3, #34	; 0x22
   323a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   323a6:	f8ce 3000 	str.w	r3, [lr]
   323aa:	b942      	cbnz	r2, 323be <_strtoul_l.isra.0+0xd6>
   323ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   323b0:	f1b8 0f00 	cmp.w	r8, #0
   323b4:	d000      	beq.n	323b8 <_strtoul_l.isra.0+0xd0>
   323b6:	4240      	negs	r0, r0
   323b8:	2a00      	cmp	r2, #0
   323ba:	d0f7      	beq.n	323ac <_strtoul_l.isra.0+0xc4>
   323bc:	b10d      	cbz	r5, 323c2 <_strtoul_l.isra.0+0xda>
   323be:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   323c2:	6011      	str	r1, [r2, #0]
   323c4:	e7f2      	b.n	323ac <_strtoul_l.isra.0+0xc4>
   323c6:	2430      	movs	r4, #48	; 0x30
   323c8:	2b00      	cmp	r3, #0
   323ca:	d1b2      	bne.n	32332 <_strtoul_l.isra.0+0x4a>
   323cc:	2308      	movs	r3, #8
   323ce:	e7b0      	b.n	32332 <_strtoul_l.isra.0+0x4a>
   323d0:	2c30      	cmp	r4, #48	; 0x30
   323d2:	d0a3      	beq.n	3231c <_strtoul_l.isra.0+0x34>
   323d4:	230a      	movs	r3, #10
   323d6:	e7ac      	b.n	32332 <_strtoul_l.isra.0+0x4a>
   323d8:	0003b3ad 	.word	0x0003b3ad

000323dc <strtoul>:
   323dc:	4613      	mov	r3, r2
   323de:	460a      	mov	r2, r1
   323e0:	4601      	mov	r1, r0
   323e2:	4802      	ldr	r0, [pc, #8]	; (323ec <strtoul+0x10>)
   323e4:	6800      	ldr	r0, [r0, #0]
   323e6:	f7ff bf7f 	b.w	322e8 <_strtoul_l.isra.0>
   323ea:	bf00      	nop
   323ec:	200295bc 	.word	0x200295bc

000323f0 <vsniprintf>:
   323f0:	b507      	push	{r0, r1, r2, lr}
   323f2:	9300      	str	r3, [sp, #0]
   323f4:	4613      	mov	r3, r2
   323f6:	460a      	mov	r2, r1
   323f8:	4601      	mov	r1, r0
   323fa:	4803      	ldr	r0, [pc, #12]	; (32408 <vsniprintf+0x18>)
   323fc:	6800      	ldr	r0, [r0, #0]
   323fe:	f003 fd04 	bl	35e0a <_vsniprintf_r>
   32402:	b003      	add	sp, #12
   32404:	f85d fb04 	ldr.w	pc, [sp], #4
   32408:	200295bc 	.word	0x200295bc

0003240c <_vsiprintf_r>:
   3240c:	b500      	push	{lr}
   3240e:	b09b      	sub	sp, #108	; 0x6c
   32410:	9100      	str	r1, [sp, #0]
   32412:	9104      	str	r1, [sp, #16]
   32414:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   32418:	9105      	str	r1, [sp, #20]
   3241a:	9102      	str	r1, [sp, #8]
   3241c:	4905      	ldr	r1, [pc, #20]	; (32434 <_vsiprintf_r+0x28>)
   3241e:	9103      	str	r1, [sp, #12]
   32420:	4669      	mov	r1, sp
   32422:	f000 fdf3 	bl	3300c <_svfiprintf_r>
   32426:	9b00      	ldr	r3, [sp, #0]
   32428:	2200      	movs	r2, #0
   3242a:	701a      	strb	r2, [r3, #0]
   3242c:	b01b      	add	sp, #108	; 0x6c
   3242e:	f85d fb04 	ldr.w	pc, [sp], #4
   32432:	bf00      	nop
   32434:	ffff0208 	.word	0xffff0208

00032438 <vsiprintf>:
   32438:	4613      	mov	r3, r2
   3243a:	460a      	mov	r2, r1
   3243c:	4601      	mov	r1, r0
   3243e:	4802      	ldr	r0, [pc, #8]	; (32448 <vsiprintf+0x10>)
   32440:	6800      	ldr	r0, [r0, #0]
   32442:	f7ff bfe3 	b.w	3240c <_vsiprintf_r>
   32446:	bf00      	nop
   32448:	200295bc 	.word	0x200295bc

0003244c <__swbuf_r>:
   3244c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3244e:	460e      	mov	r6, r1
   32450:	4614      	mov	r4, r2
   32452:	4605      	mov	r5, r0
   32454:	b118      	cbz	r0, 3245e <__swbuf_r+0x12>
   32456:	6983      	ldr	r3, [r0, #24]
   32458:	b90b      	cbnz	r3, 3245e <__swbuf_r+0x12>
   3245a:	f000 f9ff 	bl	3285c <__sinit>
   3245e:	4b21      	ldr	r3, [pc, #132]	; (324e4 <__swbuf_r+0x98>)
   32460:	429c      	cmp	r4, r3
   32462:	d12b      	bne.n	324bc <__swbuf_r+0x70>
   32464:	686c      	ldr	r4, [r5, #4]
   32466:	69a3      	ldr	r3, [r4, #24]
   32468:	60a3      	str	r3, [r4, #8]
   3246a:	89a3      	ldrh	r3, [r4, #12]
   3246c:	071a      	lsls	r2, r3, #28
   3246e:	d52f      	bpl.n	324d0 <__swbuf_r+0x84>
   32470:	6923      	ldr	r3, [r4, #16]
   32472:	b36b      	cbz	r3, 324d0 <__swbuf_r+0x84>
   32474:	6923      	ldr	r3, [r4, #16]
   32476:	b2f6      	uxtb	r6, r6
   32478:	6820      	ldr	r0, [r4, #0]
   3247a:	4637      	mov	r7, r6
   3247c:	1ac0      	subs	r0, r0, r3
   3247e:	6963      	ldr	r3, [r4, #20]
   32480:	4283      	cmp	r3, r0
   32482:	dc04      	bgt.n	3248e <__swbuf_r+0x42>
   32484:	4621      	mov	r1, r4
   32486:	4628      	mov	r0, r5
   32488:	f000 f96a 	bl	32760 <_fflush_r>
   3248c:	bb30      	cbnz	r0, 324dc <__swbuf_r+0x90>
   3248e:	68a3      	ldr	r3, [r4, #8]
   32490:	3001      	adds	r0, #1
   32492:	3b01      	subs	r3, #1
   32494:	60a3      	str	r3, [r4, #8]
   32496:	6823      	ldr	r3, [r4, #0]
   32498:	1c5a      	adds	r2, r3, #1
   3249a:	6022      	str	r2, [r4, #0]
   3249c:	701e      	strb	r6, [r3, #0]
   3249e:	6963      	ldr	r3, [r4, #20]
   324a0:	4283      	cmp	r3, r0
   324a2:	d004      	beq.n	324ae <__swbuf_r+0x62>
   324a4:	89a3      	ldrh	r3, [r4, #12]
   324a6:	07db      	lsls	r3, r3, #31
   324a8:	d506      	bpl.n	324b8 <__swbuf_r+0x6c>
   324aa:	2e0a      	cmp	r6, #10
   324ac:	d104      	bne.n	324b8 <__swbuf_r+0x6c>
   324ae:	4621      	mov	r1, r4
   324b0:	4628      	mov	r0, r5
   324b2:	f000 f955 	bl	32760 <_fflush_r>
   324b6:	b988      	cbnz	r0, 324dc <__swbuf_r+0x90>
   324b8:	4638      	mov	r0, r7
   324ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   324bc:	4b0a      	ldr	r3, [pc, #40]	; (324e8 <__swbuf_r+0x9c>)
   324be:	429c      	cmp	r4, r3
   324c0:	d101      	bne.n	324c6 <__swbuf_r+0x7a>
   324c2:	68ac      	ldr	r4, [r5, #8]
   324c4:	e7cf      	b.n	32466 <__swbuf_r+0x1a>
   324c6:	4b09      	ldr	r3, [pc, #36]	; (324ec <__swbuf_r+0xa0>)
   324c8:	429c      	cmp	r4, r3
   324ca:	bf08      	it	eq
   324cc:	68ec      	ldreq	r4, [r5, #12]
   324ce:	e7ca      	b.n	32466 <__swbuf_r+0x1a>
   324d0:	4621      	mov	r1, r4
   324d2:	4628      	mov	r0, r5
   324d4:	f000 f81e 	bl	32514 <__swsetup_r>
   324d8:	2800      	cmp	r0, #0
   324da:	d0cb      	beq.n	32474 <__swbuf_r+0x28>
   324dc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   324e0:	e7ea      	b.n	324b8 <__swbuf_r+0x6c>
   324e2:	bf00      	nop
   324e4:	00037554 	.word	0x00037554
   324e8:	00037574 	.word	0x00037574
   324ec:	00037534 	.word	0x00037534

000324f0 <_write_r>:
   324f0:	b538      	push	{r3, r4, r5, lr}
   324f2:	4604      	mov	r4, r0
   324f4:	4d06      	ldr	r5, [pc, #24]	; (32510 <_write_r+0x20>)
   324f6:	4608      	mov	r0, r1
   324f8:	4611      	mov	r1, r2
   324fa:	2200      	movs	r2, #0
   324fc:	602a      	str	r2, [r5, #0]
   324fe:	461a      	mov	r2, r3
   32500:	f001 fbc3 	bl	33c8a <_write>
   32504:	1c43      	adds	r3, r0, #1
   32506:	d102      	bne.n	3250e <_write_r+0x1e>
   32508:	682b      	ldr	r3, [r5, #0]
   3250a:	b103      	cbz	r3, 3250e <_write_r+0x1e>
   3250c:	6023      	str	r3, [r4, #0]
   3250e:	bd38      	pop	{r3, r4, r5, pc}
   32510:	20025cac 	.word	0x20025cac

00032514 <__swsetup_r>:
   32514:	4b32      	ldr	r3, [pc, #200]	; (325e0 <__swsetup_r+0xcc>)
   32516:	b570      	push	{r4, r5, r6, lr}
   32518:	681d      	ldr	r5, [r3, #0]
   3251a:	4606      	mov	r6, r0
   3251c:	460c      	mov	r4, r1
   3251e:	b125      	cbz	r5, 3252a <__swsetup_r+0x16>
   32520:	69ab      	ldr	r3, [r5, #24]
   32522:	b913      	cbnz	r3, 3252a <__swsetup_r+0x16>
   32524:	4628      	mov	r0, r5
   32526:	f000 f999 	bl	3285c <__sinit>
   3252a:	4b2e      	ldr	r3, [pc, #184]	; (325e4 <__swsetup_r+0xd0>)
   3252c:	429c      	cmp	r4, r3
   3252e:	d10f      	bne.n	32550 <__swsetup_r+0x3c>
   32530:	686c      	ldr	r4, [r5, #4]
   32532:	89a3      	ldrh	r3, [r4, #12]
   32534:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   32538:	0719      	lsls	r1, r3, #28
   3253a:	d42c      	bmi.n	32596 <__swsetup_r+0x82>
   3253c:	06dd      	lsls	r5, r3, #27
   3253e:	d411      	bmi.n	32564 <__swsetup_r+0x50>
   32540:	2309      	movs	r3, #9
   32542:	6033      	str	r3, [r6, #0]
   32544:	f042 0340 	orr.w	r3, r2, #64	; 0x40
   32548:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3254c:	81a3      	strh	r3, [r4, #12]
   3254e:	e03e      	b.n	325ce <__swsetup_r+0xba>
   32550:	4b25      	ldr	r3, [pc, #148]	; (325e8 <__swsetup_r+0xd4>)
   32552:	429c      	cmp	r4, r3
   32554:	d101      	bne.n	3255a <__swsetup_r+0x46>
   32556:	68ac      	ldr	r4, [r5, #8]
   32558:	e7eb      	b.n	32532 <__swsetup_r+0x1e>
   3255a:	4b24      	ldr	r3, [pc, #144]	; (325ec <__swsetup_r+0xd8>)
   3255c:	429c      	cmp	r4, r3
   3255e:	bf08      	it	eq
   32560:	68ec      	ldreq	r4, [r5, #12]
   32562:	e7e6      	b.n	32532 <__swsetup_r+0x1e>
   32564:	0758      	lsls	r0, r3, #29
   32566:	d512      	bpl.n	3258e <__swsetup_r+0x7a>
   32568:	6b61      	ldr	r1, [r4, #52]	; 0x34
   3256a:	b141      	cbz	r1, 3257e <__swsetup_r+0x6a>
   3256c:	f104 0344 	add.w	r3, r4, #68	; 0x44
   32570:	4299      	cmp	r1, r3
   32572:	d002      	beq.n	3257a <__swsetup_r+0x66>
   32574:	4630      	mov	r0, r6
   32576:	f7ff fadd 	bl	31b34 <_free_r>
   3257a:	2300      	movs	r3, #0
   3257c:	6363      	str	r3, [r4, #52]	; 0x34
   3257e:	89a3      	ldrh	r3, [r4, #12]
   32580:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   32584:	81a3      	strh	r3, [r4, #12]
   32586:	2300      	movs	r3, #0
   32588:	6063      	str	r3, [r4, #4]
   3258a:	6923      	ldr	r3, [r4, #16]
   3258c:	6023      	str	r3, [r4, #0]
   3258e:	89a3      	ldrh	r3, [r4, #12]
   32590:	f043 0308 	orr.w	r3, r3, #8
   32594:	81a3      	strh	r3, [r4, #12]
   32596:	6923      	ldr	r3, [r4, #16]
   32598:	b94b      	cbnz	r3, 325ae <__swsetup_r+0x9a>
   3259a:	89a3      	ldrh	r3, [r4, #12]
   3259c:	f403 7320 	and.w	r3, r3, #640	; 0x280
   325a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   325a4:	d003      	beq.n	325ae <__swsetup_r+0x9a>
   325a6:	4621      	mov	r1, r4
   325a8:	4630      	mov	r0, r6
   325aa:	f000 fc1b 	bl	32de4 <__smakebuf_r>
   325ae:	89a0      	ldrh	r0, [r4, #12]
   325b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   325b4:	f010 0301 	ands.w	r3, r0, #1
   325b8:	d00a      	beq.n	325d0 <__swsetup_r+0xbc>
   325ba:	2300      	movs	r3, #0
   325bc:	60a3      	str	r3, [r4, #8]
   325be:	6963      	ldr	r3, [r4, #20]
   325c0:	425b      	negs	r3, r3
   325c2:	61a3      	str	r3, [r4, #24]
   325c4:	6923      	ldr	r3, [r4, #16]
   325c6:	b943      	cbnz	r3, 325da <__swsetup_r+0xc6>
   325c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
   325cc:	d1ba      	bne.n	32544 <__swsetup_r+0x30>
   325ce:	bd70      	pop	{r4, r5, r6, pc}
   325d0:	0781      	lsls	r1, r0, #30
   325d2:	bf58      	it	pl
   325d4:	6963      	ldrpl	r3, [r4, #20]
   325d6:	60a3      	str	r3, [r4, #8]
   325d8:	e7f4      	b.n	325c4 <__swsetup_r+0xb0>
   325da:	2000      	movs	r0, #0
   325dc:	e7f7      	b.n	325ce <__swsetup_r+0xba>
   325de:	bf00      	nop
   325e0:	200295bc 	.word	0x200295bc
   325e4:	00037554 	.word	0x00037554
   325e8:	00037574 	.word	0x00037574
   325ec:	00037534 	.word	0x00037534

000325f0 <__chk_fail>:
   325f0:	b500      	push	{lr}
   325f2:	b08d      	sub	sp, #52	; 0x34
   325f4:	4b0f      	ldr	r3, [pc, #60]	; (32634 <__chk_fail+0x44>)
   325f6:	466a      	mov	r2, sp
   325f8:	f103 0628 	add.w	r6, r3, #40	; 0x28
   325fc:	4615      	mov	r5, r2
   325fe:	6818      	ldr	r0, [r3, #0]
   32600:	3308      	adds	r3, #8
   32602:	f853 1c04 	ldr.w	r1, [r3, #-4]
   32606:	4614      	mov	r4, r2
   32608:	42b3      	cmp	r3, r6
   3260a:	c403      	stmia	r4!, {r0, r1}
   3260c:	4622      	mov	r2, r4
   3260e:	d1f6      	bne.n	325fe <__chk_fail+0xe>
   32610:	6818      	ldr	r0, [r3, #0]
   32612:	889b      	ldrh	r3, [r3, #4]
   32614:	6020      	str	r0, [r4, #0]
   32616:	4628      	mov	r0, r5
   32618:	80a3      	strh	r3, [r4, #4]
   3261a:	f7ea fd69 	bl	1d0f0 <strlen>
   3261e:	4629      	mov	r1, r5
   32620:	4602      	mov	r2, r0
   32622:	2002      	movs	r0, #2
   32624:	f001 fb31 	bl	33c8a <_write>
   32628:	2006      	movs	r0, #6
   3262a:	f000 fe01 	bl	33230 <raise>
   3262e:	207f      	movs	r0, #127	; 0x7f
   32630:	f7ee fda8 	bl	21184 <_exit>
   32634:	0003b4ec 	.word	0x0003b4ec

00032638 <_close_r>:
   32638:	b538      	push	{r3, r4, r5, lr}
   3263a:	2300      	movs	r3, #0
   3263c:	4d05      	ldr	r5, [pc, #20]	; (32654 <_close_r+0x1c>)
   3263e:	4604      	mov	r4, r0
   32640:	4608      	mov	r0, r1
   32642:	602b      	str	r3, [r5, #0]
   32644:	f001 fb25 	bl	33c92 <_close>
   32648:	1c43      	adds	r3, r0, #1
   3264a:	d102      	bne.n	32652 <_close_r+0x1a>
   3264c:	682b      	ldr	r3, [r5, #0]
   3264e:	b103      	cbz	r3, 32652 <_close_r+0x1a>
   32650:	6023      	str	r3, [r4, #0]
   32652:	bd38      	pop	{r3, r4, r5, pc}
   32654:	20025cac 	.word	0x20025cac

00032658 <__sflush_r>:
   32658:	898a      	ldrh	r2, [r1, #12]
   3265a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3265e:	4605      	mov	r5, r0
   32660:	0710      	lsls	r0, r2, #28
   32662:	460c      	mov	r4, r1
   32664:	d458      	bmi.n	32718 <__sflush_r+0xc0>
   32666:	684b      	ldr	r3, [r1, #4]
   32668:	2b00      	cmp	r3, #0
   3266a:	dc05      	bgt.n	32678 <__sflush_r+0x20>
   3266c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   3266e:	2b00      	cmp	r3, #0
   32670:	dc02      	bgt.n	32678 <__sflush_r+0x20>
   32672:	2000      	movs	r0, #0
   32674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   32678:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   3267a:	2e00      	cmp	r6, #0
   3267c:	d0f9      	beq.n	32672 <__sflush_r+0x1a>
   3267e:	2300      	movs	r3, #0
   32680:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   32684:	682f      	ldr	r7, [r5, #0]
   32686:	602b      	str	r3, [r5, #0]
   32688:	d032      	beq.n	326f0 <__sflush_r+0x98>
   3268a:	6d60      	ldr	r0, [r4, #84]	; 0x54
   3268c:	89a3      	ldrh	r3, [r4, #12]
   3268e:	075a      	lsls	r2, r3, #29
   32690:	d505      	bpl.n	3269e <__sflush_r+0x46>
   32692:	6863      	ldr	r3, [r4, #4]
   32694:	1ac0      	subs	r0, r0, r3
   32696:	6b63      	ldr	r3, [r4, #52]	; 0x34
   32698:	b10b      	cbz	r3, 3269e <__sflush_r+0x46>
   3269a:	6c23      	ldr	r3, [r4, #64]	; 0x40
   3269c:	1ac0      	subs	r0, r0, r3
   3269e:	2300      	movs	r3, #0
   326a0:	4602      	mov	r2, r0
   326a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   326a4:	4628      	mov	r0, r5
   326a6:	6a21      	ldr	r1, [r4, #32]
   326a8:	47b0      	blx	r6
   326aa:	1c43      	adds	r3, r0, #1
   326ac:	89a3      	ldrh	r3, [r4, #12]
   326ae:	d106      	bne.n	326be <__sflush_r+0x66>
   326b0:	6829      	ldr	r1, [r5, #0]
   326b2:	291d      	cmp	r1, #29
   326b4:	d82c      	bhi.n	32710 <__sflush_r+0xb8>
   326b6:	4a29      	ldr	r2, [pc, #164]	; (3275c <__sflush_r+0x104>)
   326b8:	40ca      	lsrs	r2, r1
   326ba:	07d6      	lsls	r6, r2, #31
   326bc:	d528      	bpl.n	32710 <__sflush_r+0xb8>
   326be:	2200      	movs	r2, #0
   326c0:	04d9      	lsls	r1, r3, #19
   326c2:	6062      	str	r2, [r4, #4]
   326c4:	6922      	ldr	r2, [r4, #16]
   326c6:	6022      	str	r2, [r4, #0]
   326c8:	d504      	bpl.n	326d4 <__sflush_r+0x7c>
   326ca:	1c42      	adds	r2, r0, #1
   326cc:	d101      	bne.n	326d2 <__sflush_r+0x7a>
   326ce:	682b      	ldr	r3, [r5, #0]
   326d0:	b903      	cbnz	r3, 326d4 <__sflush_r+0x7c>
   326d2:	6560      	str	r0, [r4, #84]	; 0x54
   326d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
   326d6:	602f      	str	r7, [r5, #0]
   326d8:	2900      	cmp	r1, #0
   326da:	d0ca      	beq.n	32672 <__sflush_r+0x1a>
   326dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
   326e0:	4299      	cmp	r1, r3
   326e2:	d002      	beq.n	326ea <__sflush_r+0x92>
   326e4:	4628      	mov	r0, r5
   326e6:	f7ff fa25 	bl	31b34 <_free_r>
   326ea:	2000      	movs	r0, #0
   326ec:	6360      	str	r0, [r4, #52]	; 0x34
   326ee:	e7c1      	b.n	32674 <__sflush_r+0x1c>
   326f0:	6a21      	ldr	r1, [r4, #32]
   326f2:	2301      	movs	r3, #1
   326f4:	4628      	mov	r0, r5
   326f6:	47b0      	blx	r6
   326f8:	1c41      	adds	r1, r0, #1
   326fa:	d1c7      	bne.n	3268c <__sflush_r+0x34>
   326fc:	682b      	ldr	r3, [r5, #0]
   326fe:	2b00      	cmp	r3, #0
   32700:	d0c4      	beq.n	3268c <__sflush_r+0x34>
   32702:	2b1d      	cmp	r3, #29
   32704:	d001      	beq.n	3270a <__sflush_r+0xb2>
   32706:	2b16      	cmp	r3, #22
   32708:	d101      	bne.n	3270e <__sflush_r+0xb6>
   3270a:	602f      	str	r7, [r5, #0]
   3270c:	e7b1      	b.n	32672 <__sflush_r+0x1a>
   3270e:	89a3      	ldrh	r3, [r4, #12]
   32710:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   32714:	81a3      	strh	r3, [r4, #12]
   32716:	e7ad      	b.n	32674 <__sflush_r+0x1c>
   32718:	690f      	ldr	r7, [r1, #16]
   3271a:	2f00      	cmp	r7, #0
   3271c:	d0a9      	beq.n	32672 <__sflush_r+0x1a>
   3271e:	0793      	lsls	r3, r2, #30
   32720:	680e      	ldr	r6, [r1, #0]
   32722:	600f      	str	r7, [r1, #0]
   32724:	bf0c      	ite	eq
   32726:	694b      	ldreq	r3, [r1, #20]
   32728:	2300      	movne	r3, #0
   3272a:	eba6 0807 	sub.w	r8, r6, r7
   3272e:	608b      	str	r3, [r1, #8]
   32730:	f1b8 0f00 	cmp.w	r8, #0
   32734:	dd9d      	ble.n	32672 <__sflush_r+0x1a>
   32736:	4643      	mov	r3, r8
   32738:	463a      	mov	r2, r7
   3273a:	6a21      	ldr	r1, [r4, #32]
   3273c:	4628      	mov	r0, r5
   3273e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   32740:	47b0      	blx	r6
   32742:	2800      	cmp	r0, #0
   32744:	dc06      	bgt.n	32754 <__sflush_r+0xfc>
   32746:	89a3      	ldrh	r3, [r4, #12]
   32748:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3274c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   32750:	81a3      	strh	r3, [r4, #12]
   32752:	e78f      	b.n	32674 <__sflush_r+0x1c>
   32754:	4407      	add	r7, r0
   32756:	eba8 0800 	sub.w	r8, r8, r0
   3275a:	e7e9      	b.n	32730 <__sflush_r+0xd8>
   3275c:	20400001 	.word	0x20400001

00032760 <_fflush_r>:
   32760:	b538      	push	{r3, r4, r5, lr}
   32762:	690b      	ldr	r3, [r1, #16]
   32764:	4605      	mov	r5, r0
   32766:	460c      	mov	r4, r1
   32768:	b913      	cbnz	r3, 32770 <_fflush_r+0x10>
   3276a:	2500      	movs	r5, #0
   3276c:	4628      	mov	r0, r5
   3276e:	bd38      	pop	{r3, r4, r5, pc}
   32770:	b118      	cbz	r0, 3277a <_fflush_r+0x1a>
   32772:	6983      	ldr	r3, [r0, #24]
   32774:	b90b      	cbnz	r3, 3277a <_fflush_r+0x1a>
   32776:	f000 f871 	bl	3285c <__sinit>
   3277a:	4b14      	ldr	r3, [pc, #80]	; (327cc <_fflush_r+0x6c>)
   3277c:	429c      	cmp	r4, r3
   3277e:	d11b      	bne.n	327b8 <_fflush_r+0x58>
   32780:	686c      	ldr	r4, [r5, #4]
   32782:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   32786:	2b00      	cmp	r3, #0
   32788:	d0ef      	beq.n	3276a <_fflush_r+0xa>
   3278a:	6e62      	ldr	r2, [r4, #100]	; 0x64
   3278c:	07d0      	lsls	r0, r2, #31
   3278e:	d404      	bmi.n	3279a <_fflush_r+0x3a>
   32790:	0599      	lsls	r1, r3, #22
   32792:	d402      	bmi.n	3279a <_fflush_r+0x3a>
   32794:	6da0      	ldr	r0, [r4, #88]	; 0x58
   32796:	f003 fcc9 	bl	3612c <__retarget_lock_acquire_recursive>
   3279a:	4628      	mov	r0, r5
   3279c:	4621      	mov	r1, r4
   3279e:	f7ff ff5b 	bl	32658 <__sflush_r>
   327a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
   327a4:	4605      	mov	r5, r0
   327a6:	07da      	lsls	r2, r3, #31
   327a8:	d4e0      	bmi.n	3276c <_fflush_r+0xc>
   327aa:	89a3      	ldrh	r3, [r4, #12]
   327ac:	059b      	lsls	r3, r3, #22
   327ae:	d4dd      	bmi.n	3276c <_fflush_r+0xc>
   327b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   327b2:	f003 fcbc 	bl	3612e <__retarget_lock_release_recursive>
   327b6:	e7d9      	b.n	3276c <_fflush_r+0xc>
   327b8:	4b05      	ldr	r3, [pc, #20]	; (327d0 <_fflush_r+0x70>)
   327ba:	429c      	cmp	r4, r3
   327bc:	d101      	bne.n	327c2 <_fflush_r+0x62>
   327be:	68ac      	ldr	r4, [r5, #8]
   327c0:	e7df      	b.n	32782 <_fflush_r+0x22>
   327c2:	4b04      	ldr	r3, [pc, #16]	; (327d4 <_fflush_r+0x74>)
   327c4:	429c      	cmp	r4, r3
   327c6:	bf08      	it	eq
   327c8:	68ec      	ldreq	r4, [r5, #12]
   327ca:	e7da      	b.n	32782 <_fflush_r+0x22>
   327cc:	00037554 	.word	0x00037554
   327d0:	00037574 	.word	0x00037574
   327d4:	00037534 	.word	0x00037534

000327d8 <std>:
   327d8:	2300      	movs	r3, #0
   327da:	b510      	push	{r4, lr}
   327dc:	4604      	mov	r4, r0
   327de:	6083      	str	r3, [r0, #8]
   327e0:	8181      	strh	r1, [r0, #12]
   327e2:	4619      	mov	r1, r3
   327e4:	6643      	str	r3, [r0, #100]	; 0x64
   327e6:	81c2      	strh	r2, [r0, #14]
   327e8:	2208      	movs	r2, #8
   327ea:	6183      	str	r3, [r0, #24]
   327ec:	e9c0 3300 	strd	r3, r3, [r0]
   327f0:	e9c0 3304 	strd	r3, r3, [r0, #16]
   327f4:	305c      	adds	r0, #92	; 0x5c
   327f6:	f003 f9a7 	bl	35b48 <memset>
   327fa:	4b05      	ldr	r3, [pc, #20]	; (32810 <std+0x38>)
   327fc:	6224      	str	r4, [r4, #32]
   327fe:	6263      	str	r3, [r4, #36]	; 0x24
   32800:	4b04      	ldr	r3, [pc, #16]	; (32814 <std+0x3c>)
   32802:	62a3      	str	r3, [r4, #40]	; 0x28
   32804:	4b04      	ldr	r3, [pc, #16]	; (32818 <std+0x40>)
   32806:	62e3      	str	r3, [r4, #44]	; 0x2c
   32808:	4b04      	ldr	r3, [pc, #16]	; (3281c <std+0x44>)
   3280a:	6323      	str	r3, [r4, #48]	; 0x30
   3280c:	bd10      	pop	{r4, pc}
   3280e:	bf00      	nop
   32810:	00035cd1 	.word	0x00035cd1
   32814:	00035cf3 	.word	0x00035cf3
   32818:	00035d2b 	.word	0x00035d2b
   3281c:	00035d4f 	.word	0x00035d4f

00032820 <_cleanup_r>:
   32820:	4901      	ldr	r1, [pc, #4]	; (32828 <_cleanup_r+0x8>)
   32822:	f003 bb3b 	b.w	35e9c <_fwalk_reent>
   32826:	bf00      	nop
   32828:	00032761 	.word	0x00032761

0003282c <__sfp_lock_acquire>:
   3282c:	4801      	ldr	r0, [pc, #4]	; (32834 <__sfp_lock_acquire+0x8>)
   3282e:	f003 bc7d 	b.w	3612c <__retarget_lock_acquire_recursive>
   32832:	bf00      	nop
   32834:	20025cb8 	.word	0x20025cb8

00032838 <__sfp_lock_release>:
   32838:	4801      	ldr	r0, [pc, #4]	; (32840 <__sfp_lock_release+0x8>)
   3283a:	f003 bc78 	b.w	3612e <__retarget_lock_release_recursive>
   3283e:	bf00      	nop
   32840:	20025cb8 	.word	0x20025cb8

00032844 <__sinit_lock_acquire>:
   32844:	4801      	ldr	r0, [pc, #4]	; (3284c <__sinit_lock_acquire+0x8>)
   32846:	f003 bc71 	b.w	3612c <__retarget_lock_acquire_recursive>
   3284a:	bf00      	nop
   3284c:	20025cb3 	.word	0x20025cb3

00032850 <__sinit_lock_release>:
   32850:	4801      	ldr	r0, [pc, #4]	; (32858 <__sinit_lock_release+0x8>)
   32852:	f003 bc6c 	b.w	3612e <__retarget_lock_release_recursive>
   32856:	bf00      	nop
   32858:	20025cb3 	.word	0x20025cb3

0003285c <__sinit>:
   3285c:	b510      	push	{r4, lr}
   3285e:	4604      	mov	r4, r0
   32860:	f7ff fff0 	bl	32844 <__sinit_lock_acquire>
   32864:	69a3      	ldr	r3, [r4, #24]
   32866:	b11b      	cbz	r3, 32870 <__sinit+0x14>
   32868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3286c:	f7ff bff0 	b.w	32850 <__sinit_lock_release>
   32870:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   32874:	6523      	str	r3, [r4, #80]	; 0x50
   32876:	4620      	mov	r0, r4
   32878:	4b12      	ldr	r3, [pc, #72]	; (328c4 <__sinit+0x68>)
   3287a:	4a13      	ldr	r2, [pc, #76]	; (328c8 <__sinit+0x6c>)
   3287c:	681b      	ldr	r3, [r3, #0]
   3287e:	62a2      	str	r2, [r4, #40]	; 0x28
   32880:	42a3      	cmp	r3, r4
   32882:	bf04      	itt	eq
   32884:	2301      	moveq	r3, #1
   32886:	61a3      	streq	r3, [r4, #24]
   32888:	f000 f820 	bl	328cc <__sfp>
   3288c:	6060      	str	r0, [r4, #4]
   3288e:	4620      	mov	r0, r4
   32890:	f000 f81c 	bl	328cc <__sfp>
   32894:	60a0      	str	r0, [r4, #8]
   32896:	4620      	mov	r0, r4
   32898:	f000 f818 	bl	328cc <__sfp>
   3289c:	2200      	movs	r2, #0
   3289e:	2104      	movs	r1, #4
   328a0:	60e0      	str	r0, [r4, #12]
   328a2:	6860      	ldr	r0, [r4, #4]
   328a4:	f7ff ff98 	bl	327d8 <std>
   328a8:	2201      	movs	r2, #1
   328aa:	2109      	movs	r1, #9
   328ac:	68a0      	ldr	r0, [r4, #8]
   328ae:	f7ff ff93 	bl	327d8 <std>
   328b2:	2202      	movs	r2, #2
   328b4:	2112      	movs	r1, #18
   328b6:	68e0      	ldr	r0, [r4, #12]
   328b8:	f7ff ff8e 	bl	327d8 <std>
   328bc:	2301      	movs	r3, #1
   328be:	61a3      	str	r3, [r4, #24]
   328c0:	e7d2      	b.n	32868 <__sinit+0xc>
   328c2:	bf00      	nop
   328c4:	00037508 	.word	0x00037508
   328c8:	00032821 	.word	0x00032821

000328cc <__sfp>:
   328cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   328ce:	4607      	mov	r7, r0
   328d0:	f7ff ffac 	bl	3282c <__sfp_lock_acquire>
   328d4:	4b1e      	ldr	r3, [pc, #120]	; (32950 <__sfp+0x84>)
   328d6:	681e      	ldr	r6, [r3, #0]
   328d8:	69b3      	ldr	r3, [r6, #24]
   328da:	b913      	cbnz	r3, 328e2 <__sfp+0x16>
   328dc:	4630      	mov	r0, r6
   328de:	f7ff ffbd 	bl	3285c <__sinit>
   328e2:	3648      	adds	r6, #72	; 0x48
   328e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   328e8:	3b01      	subs	r3, #1
   328ea:	d503      	bpl.n	328f4 <__sfp+0x28>
   328ec:	6833      	ldr	r3, [r6, #0]
   328ee:	b30b      	cbz	r3, 32934 <__sfp+0x68>
   328f0:	6836      	ldr	r6, [r6, #0]
   328f2:	e7f7      	b.n	328e4 <__sfp+0x18>
   328f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   328f8:	b9d5      	cbnz	r5, 32930 <__sfp+0x64>
   328fa:	4b16      	ldr	r3, [pc, #88]	; (32954 <__sfp+0x88>)
   328fc:	f104 0058 	add.w	r0, r4, #88	; 0x58
   32900:	6665      	str	r5, [r4, #100]	; 0x64
   32902:	60e3      	str	r3, [r4, #12]
   32904:	f003 fc11 	bl	3612a <__retarget_lock_init_recursive>
   32908:	f7ff ff96 	bl	32838 <__sfp_lock_release>
   3290c:	2208      	movs	r2, #8
   3290e:	4629      	mov	r1, r5
   32910:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   32914:	6025      	str	r5, [r4, #0]
   32916:	61a5      	str	r5, [r4, #24]
   32918:	e9c4 5501 	strd	r5, r5, [r4, #4]
   3291c:	e9c4 5504 	strd	r5, r5, [r4, #16]
   32920:	f003 f912 	bl	35b48 <memset>
   32924:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   32928:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   3292c:	4620      	mov	r0, r4
   3292e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   32930:	3468      	adds	r4, #104	; 0x68
   32932:	e7d9      	b.n	328e8 <__sfp+0x1c>
   32934:	2104      	movs	r1, #4
   32936:	4638      	mov	r0, r7
   32938:	f003 fa9a 	bl	35e70 <__sfmoreglue>
   3293c:	4604      	mov	r4, r0
   3293e:	6030      	str	r0, [r6, #0]
   32940:	2800      	cmp	r0, #0
   32942:	d1d5      	bne.n	328f0 <__sfp+0x24>
   32944:	f7ff ff78 	bl	32838 <__sfp_lock_release>
   32948:	230c      	movs	r3, #12
   3294a:	603b      	str	r3, [r7, #0]
   3294c:	e7ee      	b.n	3292c <__sfp+0x60>
   3294e:	bf00      	nop
   32950:	00037508 	.word	0x00037508
   32954:	ffff0001 	.word	0xffff0001

00032958 <__gethex>:
   32958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3295c:	ed2d 8b02 	vpush	{d8}
   32960:	b089      	sub	sp, #36	; 0x24
   32962:	ee08 0a10 	vmov	s16, r0
   32966:	468b      	mov	fp, r1
   32968:	4690      	mov	r8, r2
   3296a:	9304      	str	r3, [sp, #16]
   3296c:	4bbb      	ldr	r3, [pc, #748]	; (32c5c <__gethex+0x304>)
   3296e:	681b      	ldr	r3, [r3, #0]
   32970:	4618      	mov	r0, r3
   32972:	9301      	str	r3, [sp, #4]
   32974:	f7ea fbbc 	bl	1d0f0 <strlen>
   32978:	9b01      	ldr	r3, [sp, #4]
   3297a:	f8db 2000 	ldr.w	r2, [fp]
   3297e:	4682      	mov	sl, r0
   32980:	4403      	add	r3, r0
   32982:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   32986:	9305      	str	r3, [sp, #20]
   32988:	1c93      	adds	r3, r2, #2
   3298a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   3298e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   32992:	32fe      	adds	r2, #254	; 0xfe
   32994:	18d1      	adds	r1, r2, r3
   32996:	461f      	mov	r7, r3
   32998:	f813 0b01 	ldrb.w	r0, [r3], #1
   3299c:	9100      	str	r1, [sp, #0]
   3299e:	2830      	cmp	r0, #48	; 0x30
   329a0:	d0f8      	beq.n	32994 <__gethex+0x3c>
   329a2:	f003 faeb 	bl	35f7c <__hexdig_fun>
   329a6:	4604      	mov	r4, r0
   329a8:	2800      	cmp	r0, #0
   329aa:	d139      	bne.n	32a20 <__gethex+0xc8>
   329ac:	4652      	mov	r2, sl
   329ae:	9901      	ldr	r1, [sp, #4]
   329b0:	4638      	mov	r0, r7
   329b2:	f003 f9e5 	bl	35d80 <strncmp>
   329b6:	4605      	mov	r5, r0
   329b8:	2800      	cmp	r0, #0
   329ba:	d167      	bne.n	32a8c <__gethex+0x134>
   329bc:	f817 000a 	ldrb.w	r0, [r7, sl]
   329c0:	eb07 060a 	add.w	r6, r7, sl
   329c4:	f003 fada 	bl	35f7c <__hexdig_fun>
   329c8:	2800      	cmp	r0, #0
   329ca:	d061      	beq.n	32a90 <__gethex+0x138>
   329cc:	4633      	mov	r3, r6
   329ce:	7818      	ldrb	r0, [r3, #0]
   329d0:	461f      	mov	r7, r3
   329d2:	3301      	adds	r3, #1
   329d4:	2830      	cmp	r0, #48	; 0x30
   329d6:	d0fa      	beq.n	329ce <__gethex+0x76>
   329d8:	f003 fad0 	bl	35f7c <__hexdig_fun>
   329dc:	fab0 f480 	clz	r4, r0
   329e0:	2301      	movs	r3, #1
   329e2:	4635      	mov	r5, r6
   329e4:	0964      	lsrs	r4, r4, #5
   329e6:	9300      	str	r3, [sp, #0]
   329e8:	463a      	mov	r2, r7
   329ea:	4616      	mov	r6, r2
   329ec:	3201      	adds	r2, #1
   329ee:	7830      	ldrb	r0, [r6, #0]
   329f0:	f003 fac4 	bl	35f7c <__hexdig_fun>
   329f4:	2800      	cmp	r0, #0
   329f6:	d1f8      	bne.n	329ea <__gethex+0x92>
   329f8:	4652      	mov	r2, sl
   329fa:	9901      	ldr	r1, [sp, #4]
   329fc:	4630      	mov	r0, r6
   329fe:	f003 f9bf 	bl	35d80 <strncmp>
   32a02:	b980      	cbnz	r0, 32a26 <__gethex+0xce>
   32a04:	b94d      	cbnz	r5, 32a1a <__gethex+0xc2>
   32a06:	eb06 050a 	add.w	r5, r6, sl
   32a0a:	462a      	mov	r2, r5
   32a0c:	4616      	mov	r6, r2
   32a0e:	3201      	adds	r2, #1
   32a10:	7830      	ldrb	r0, [r6, #0]
   32a12:	f003 fab3 	bl	35f7c <__hexdig_fun>
   32a16:	2800      	cmp	r0, #0
   32a18:	d1f8      	bne.n	32a0c <__gethex+0xb4>
   32a1a:	1bad      	subs	r5, r5, r6
   32a1c:	00ad      	lsls	r5, r5, #2
   32a1e:	e004      	b.n	32a2a <__gethex+0xd2>
   32a20:	2400      	movs	r4, #0
   32a22:	4625      	mov	r5, r4
   32a24:	e7e0      	b.n	329e8 <__gethex+0x90>
   32a26:	2d00      	cmp	r5, #0
   32a28:	d1f7      	bne.n	32a1a <__gethex+0xc2>
   32a2a:	7833      	ldrb	r3, [r6, #0]
   32a2c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   32a30:	2b50      	cmp	r3, #80	; 0x50
   32a32:	d13b      	bne.n	32aac <__gethex+0x154>
   32a34:	7873      	ldrb	r3, [r6, #1]
   32a36:	2b2b      	cmp	r3, #43	; 0x2b
   32a38:	d02c      	beq.n	32a94 <__gethex+0x13c>
   32a3a:	2b2d      	cmp	r3, #45	; 0x2d
   32a3c:	d02e      	beq.n	32a9c <__gethex+0x144>
   32a3e:	1c71      	adds	r1, r6, #1
   32a40:	f04f 0900 	mov.w	r9, #0
   32a44:	7808      	ldrb	r0, [r1, #0]
   32a46:	f003 fa99 	bl	35f7c <__hexdig_fun>
   32a4a:	1e43      	subs	r3, r0, #1
   32a4c:	b2db      	uxtb	r3, r3
   32a4e:	2b18      	cmp	r3, #24
   32a50:	d82c      	bhi.n	32aac <__gethex+0x154>
   32a52:	f1a0 0210 	sub.w	r2, r0, #16
   32a56:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   32a5a:	f003 fa8f 	bl	35f7c <__hexdig_fun>
   32a5e:	1e43      	subs	r3, r0, #1
   32a60:	b2db      	uxtb	r3, r3
   32a62:	2b18      	cmp	r3, #24
   32a64:	d91d      	bls.n	32aa2 <__gethex+0x14a>
   32a66:	f1b9 0f00 	cmp.w	r9, #0
   32a6a:	d000      	beq.n	32a6e <__gethex+0x116>
   32a6c:	4252      	negs	r2, r2
   32a6e:	4415      	add	r5, r2
   32a70:	f8cb 1000 	str.w	r1, [fp]
   32a74:	b1e4      	cbz	r4, 32ab0 <__gethex+0x158>
   32a76:	9b00      	ldr	r3, [sp, #0]
   32a78:	2b00      	cmp	r3, #0
   32a7a:	bf14      	ite	ne
   32a7c:	2700      	movne	r7, #0
   32a7e:	2706      	moveq	r7, #6
   32a80:	4638      	mov	r0, r7
   32a82:	b009      	add	sp, #36	; 0x24
   32a84:	ecbd 8b02 	vpop	{d8}
   32a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32a8c:	463e      	mov	r6, r7
   32a8e:	4625      	mov	r5, r4
   32a90:	2401      	movs	r4, #1
   32a92:	e7ca      	b.n	32a2a <__gethex+0xd2>
   32a94:	f04f 0900 	mov.w	r9, #0
   32a98:	1cb1      	adds	r1, r6, #2
   32a9a:	e7d3      	b.n	32a44 <__gethex+0xec>
   32a9c:	f04f 0901 	mov.w	r9, #1
   32aa0:	e7fa      	b.n	32a98 <__gethex+0x140>
   32aa2:	230a      	movs	r3, #10
   32aa4:	fb03 0202 	mla	r2, r3, r2, r0
   32aa8:	3a10      	subs	r2, #16
   32aaa:	e7d4      	b.n	32a56 <__gethex+0xfe>
   32aac:	4631      	mov	r1, r6
   32aae:	e7df      	b.n	32a70 <__gethex+0x118>
   32ab0:	1bf3      	subs	r3, r6, r7
   32ab2:	4621      	mov	r1, r4
   32ab4:	3b01      	subs	r3, #1
   32ab6:	2b07      	cmp	r3, #7
   32ab8:	dc52      	bgt.n	32b60 <__gethex+0x208>
   32aba:	ee18 0a10 	vmov	r0, s16
   32abe:	f04f 0b00 	mov.w	fp, #0
   32ac2:	f003 fb85 	bl	361d0 <_Balloc>
   32ac6:	f1ca 0301 	rsb	r3, sl, #1
   32aca:	f100 0914 	add.w	r9, r0, #20
   32ace:	4604      	mov	r4, r0
   32ad0:	f8cd b000 	str.w	fp, [sp]
   32ad4:	f8cd 9008 	str.w	r9, [sp, #8]
   32ad8:	9306      	str	r3, [sp, #24]
   32ada:	42b7      	cmp	r7, r6
   32adc:	d343      	bcc.n	32b66 <__gethex+0x20e>
   32ade:	9802      	ldr	r0, [sp, #8]
   32ae0:	9b00      	ldr	r3, [sp, #0]
   32ae2:	f840 3b04 	str.w	r3, [r0], #4
   32ae6:	eba0 0009 	sub.w	r0, r0, r9
   32aea:	1080      	asrs	r0, r0, #2
   32aec:	0146      	lsls	r6, r0, #5
   32aee:	6120      	str	r0, [r4, #16]
   32af0:	4618      	mov	r0, r3
   32af2:	f003 fc35 	bl	36360 <__hi0bits>
   32af6:	1a30      	subs	r0, r6, r0
   32af8:	f8d8 6000 	ldr.w	r6, [r8]
   32afc:	42b0      	cmp	r0, r6
   32afe:	dd66      	ble.n	32bce <__gethex+0x276>
   32b00:	1b87      	subs	r7, r0, r6
   32b02:	4620      	mov	r0, r4
   32b04:	4639      	mov	r1, r7
   32b06:	f003 febd 	bl	36884 <__any_on>
   32b0a:	4682      	mov	sl, r0
   32b0c:	b1a8      	cbz	r0, 32b3a <__gethex+0x1e2>
   32b0e:	1e7b      	subs	r3, r7, #1
   32b10:	f04f 0a01 	mov.w	sl, #1
   32b14:	1159      	asrs	r1, r3, #5
   32b16:	f003 021f 	and.w	r2, r3, #31
   32b1a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   32b1e:	fa0a f202 	lsl.w	r2, sl, r2
   32b22:	420a      	tst	r2, r1
   32b24:	d009      	beq.n	32b3a <__gethex+0x1e2>
   32b26:	4553      	cmp	r3, sl
   32b28:	dd05      	ble.n	32b36 <__gethex+0x1de>
   32b2a:	1eb9      	subs	r1, r7, #2
   32b2c:	4620      	mov	r0, r4
   32b2e:	f003 fea9 	bl	36884 <__any_on>
   32b32:	2800      	cmp	r0, #0
   32b34:	d148      	bne.n	32bc8 <__gethex+0x270>
   32b36:	f04f 0a02 	mov.w	sl, #2
   32b3a:	443d      	add	r5, r7
   32b3c:	4639      	mov	r1, r7
   32b3e:	4620      	mov	r0, r4
   32b40:	f003 f9cb 	bl	35eda <rshift>
   32b44:	f8d8 3008 	ldr.w	r3, [r8, #8]
   32b48:	42ab      	cmp	r3, r5
   32b4a:	da4f      	bge.n	32bec <__gethex+0x294>
   32b4c:	4621      	mov	r1, r4
   32b4e:	ee18 0a10 	vmov	r0, s16
   32b52:	f003 fb71 	bl	36238 <_Bfree>
   32b56:	2300      	movs	r3, #0
   32b58:	9a14      	ldr	r2, [sp, #80]	; 0x50
   32b5a:	27a3      	movs	r7, #163	; 0xa3
   32b5c:	6013      	str	r3, [r2, #0]
   32b5e:	e78f      	b.n	32a80 <__gethex+0x128>
   32b60:	3101      	adds	r1, #1
   32b62:	105b      	asrs	r3, r3, #1
   32b64:	e7a7      	b.n	32ab6 <__gethex+0x15e>
   32b66:	1e73      	subs	r3, r6, #1
   32b68:	9a05      	ldr	r2, [sp, #20]
   32b6a:	9303      	str	r3, [sp, #12]
   32b6c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   32b70:	4293      	cmp	r3, r2
   32b72:	d019      	beq.n	32ba8 <__gethex+0x250>
   32b74:	f1bb 0f20 	cmp.w	fp, #32
   32b78:	d107      	bne.n	32b8a <__gethex+0x232>
   32b7a:	9b02      	ldr	r3, [sp, #8]
   32b7c:	9a00      	ldr	r2, [sp, #0]
   32b7e:	f843 2b04 	str.w	r2, [r3], #4
   32b82:	9302      	str	r3, [sp, #8]
   32b84:	2300      	movs	r3, #0
   32b86:	469b      	mov	fp, r3
   32b88:	9300      	str	r3, [sp, #0]
   32b8a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   32b8e:	f003 f9f5 	bl	35f7c <__hexdig_fun>
   32b92:	f000 000f 	and.w	r0, r0, #15
   32b96:	9b00      	ldr	r3, [sp, #0]
   32b98:	fa00 f00b 	lsl.w	r0, r0, fp
   32b9c:	f10b 0b04 	add.w	fp, fp, #4
   32ba0:	4303      	orrs	r3, r0
   32ba2:	9300      	str	r3, [sp, #0]
   32ba4:	9b03      	ldr	r3, [sp, #12]
   32ba6:	e00d      	b.n	32bc4 <__gethex+0x26c>
   32ba8:	9b03      	ldr	r3, [sp, #12]
   32baa:	9a06      	ldr	r2, [sp, #24]
   32bac:	4413      	add	r3, r2
   32bae:	42bb      	cmp	r3, r7
   32bb0:	d3e0      	bcc.n	32b74 <__gethex+0x21c>
   32bb2:	4618      	mov	r0, r3
   32bb4:	4652      	mov	r2, sl
   32bb6:	9901      	ldr	r1, [sp, #4]
   32bb8:	9307      	str	r3, [sp, #28]
   32bba:	f003 f8e1 	bl	35d80 <strncmp>
   32bbe:	9b07      	ldr	r3, [sp, #28]
   32bc0:	2800      	cmp	r0, #0
   32bc2:	d1d7      	bne.n	32b74 <__gethex+0x21c>
   32bc4:	461e      	mov	r6, r3
   32bc6:	e788      	b.n	32ada <__gethex+0x182>
   32bc8:	f04f 0a03 	mov.w	sl, #3
   32bcc:	e7b5      	b.n	32b3a <__gethex+0x1e2>
   32bce:	da0a      	bge.n	32be6 <__gethex+0x28e>
   32bd0:	1a37      	subs	r7, r6, r0
   32bd2:	4621      	mov	r1, r4
   32bd4:	ee18 0a10 	vmov	r0, s16
   32bd8:	463a      	mov	r2, r7
   32bda:	1bed      	subs	r5, r5, r7
   32bdc:	f003 fcb4 	bl	36548 <__lshift>
   32be0:	4604      	mov	r4, r0
   32be2:	f100 0914 	add.w	r9, r0, #20
   32be6:	f04f 0a00 	mov.w	sl, #0
   32bea:	e7ab      	b.n	32b44 <__gethex+0x1ec>
   32bec:	f8d8 0004 	ldr.w	r0, [r8, #4]
   32bf0:	42a8      	cmp	r0, r5
   32bf2:	dd6f      	ble.n	32cd4 <__gethex+0x37c>
   32bf4:	1b45      	subs	r5, r0, r5
   32bf6:	42ae      	cmp	r6, r5
   32bf8:	dc32      	bgt.n	32c60 <__gethex+0x308>
   32bfa:	f8d8 300c 	ldr.w	r3, [r8, #12]
   32bfe:	2b02      	cmp	r3, #2
   32c00:	d023      	beq.n	32c4a <__gethex+0x2f2>
   32c02:	2b03      	cmp	r3, #3
   32c04:	d025      	beq.n	32c52 <__gethex+0x2fa>
   32c06:	2b01      	cmp	r3, #1
   32c08:	d115      	bne.n	32c36 <__gethex+0x2de>
   32c0a:	42ae      	cmp	r6, r5
   32c0c:	d113      	bne.n	32c36 <__gethex+0x2de>
   32c0e:	2e01      	cmp	r6, #1
   32c10:	d10b      	bne.n	32c2a <__gethex+0x2d2>
   32c12:	f8d8 3004 	ldr.w	r3, [r8, #4]
   32c16:	2762      	movs	r7, #98	; 0x62
   32c18:	9a04      	ldr	r2, [sp, #16]
   32c1a:	6013      	str	r3, [r2, #0]
   32c1c:	2301      	movs	r3, #1
   32c1e:	6123      	str	r3, [r4, #16]
   32c20:	f8c9 3000 	str.w	r3, [r9]
   32c24:	9b14      	ldr	r3, [sp, #80]	; 0x50
   32c26:	601c      	str	r4, [r3, #0]
   32c28:	e72a      	b.n	32a80 <__gethex+0x128>
   32c2a:	1e71      	subs	r1, r6, #1
   32c2c:	4620      	mov	r0, r4
   32c2e:	f003 fe29 	bl	36884 <__any_on>
   32c32:	2800      	cmp	r0, #0
   32c34:	d1ed      	bne.n	32c12 <__gethex+0x2ba>
   32c36:	4621      	mov	r1, r4
   32c38:	ee18 0a10 	vmov	r0, s16
   32c3c:	f003 fafc 	bl	36238 <_Bfree>
   32c40:	2300      	movs	r3, #0
   32c42:	9a14      	ldr	r2, [sp, #80]	; 0x50
   32c44:	2750      	movs	r7, #80	; 0x50
   32c46:	6013      	str	r3, [r2, #0]
   32c48:	e71a      	b.n	32a80 <__gethex+0x128>
   32c4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   32c4c:	2b00      	cmp	r3, #0
   32c4e:	d1f2      	bne.n	32c36 <__gethex+0x2de>
   32c50:	e7df      	b.n	32c12 <__gethex+0x2ba>
   32c52:	9b15      	ldr	r3, [sp, #84]	; 0x54
   32c54:	2b00      	cmp	r3, #0
   32c56:	d1dc      	bne.n	32c12 <__gethex+0x2ba>
   32c58:	e7ed      	b.n	32c36 <__gethex+0x2de>
   32c5a:	bf00      	nop
   32c5c:	00037594 	.word	0x00037594
   32c60:	1e6f      	subs	r7, r5, #1
   32c62:	f1ba 0f00 	cmp.w	sl, #0
   32c66:	d132      	bne.n	32cce <__gethex+0x376>
   32c68:	b127      	cbz	r7, 32c74 <__gethex+0x31c>
   32c6a:	4639      	mov	r1, r7
   32c6c:	4620      	mov	r0, r4
   32c6e:	f003 fe09 	bl	36884 <__any_on>
   32c72:	4682      	mov	sl, r0
   32c74:	117b      	asrs	r3, r7, #5
   32c76:	2101      	movs	r1, #1
   32c78:	f007 071f 	and.w	r7, r7, #31
   32c7c:	4620      	mov	r0, r4
   32c7e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   32c82:	1b76      	subs	r6, r6, r5
   32c84:	fa01 f707 	lsl.w	r7, r1, r7
   32c88:	4629      	mov	r1, r5
   32c8a:	421f      	tst	r7, r3
   32c8c:	f04f 0702 	mov.w	r7, #2
   32c90:	bf18      	it	ne
   32c92:	f04a 0a02 	orrne.w	sl, sl, #2
   32c96:	f003 f920 	bl	35eda <rshift>
   32c9a:	f8d8 5004 	ldr.w	r5, [r8, #4]
   32c9e:	f1ba 0f00 	cmp.w	sl, #0
   32ca2:	d048      	beq.n	32d36 <__gethex+0x3de>
   32ca4:	f8d8 300c 	ldr.w	r3, [r8, #12]
   32ca8:	2b02      	cmp	r3, #2
   32caa:	d015      	beq.n	32cd8 <__gethex+0x380>
   32cac:	2b03      	cmp	r3, #3
   32cae:	d017      	beq.n	32ce0 <__gethex+0x388>
   32cb0:	2b01      	cmp	r3, #1
   32cb2:	d109      	bne.n	32cc8 <__gethex+0x370>
   32cb4:	f01a 0f02 	tst.w	sl, #2
   32cb8:	d006      	beq.n	32cc8 <__gethex+0x370>
   32cba:	f8d9 0000 	ldr.w	r0, [r9]
   32cbe:	ea4a 0a00 	orr.w	sl, sl, r0
   32cc2:	f01a 0f01 	tst.w	sl, #1
   32cc6:	d10e      	bne.n	32ce6 <__gethex+0x38e>
   32cc8:	f047 0710 	orr.w	r7, r7, #16
   32ccc:	e033      	b.n	32d36 <__gethex+0x3de>
   32cce:	f04f 0a01 	mov.w	sl, #1
   32cd2:	e7cf      	b.n	32c74 <__gethex+0x31c>
   32cd4:	2701      	movs	r7, #1
   32cd6:	e7e2      	b.n	32c9e <__gethex+0x346>
   32cd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   32cda:	f1c3 0301 	rsb	r3, r3, #1
   32cde:	9315      	str	r3, [sp, #84]	; 0x54
   32ce0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   32ce2:	2b00      	cmp	r3, #0
   32ce4:	d0f0      	beq.n	32cc8 <__gethex+0x370>
   32ce6:	f8d4 9010 	ldr.w	r9, [r4, #16]
   32cea:	f104 0314 	add.w	r3, r4, #20
   32cee:	f04f 0c00 	mov.w	ip, #0
   32cf2:	ea4f 0b89 	mov.w	fp, r9, lsl #2
   32cf6:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   32cfa:	4618      	mov	r0, r3
   32cfc:	f853 2b04 	ldr.w	r2, [r3], #4
   32d00:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   32d04:	d01c      	beq.n	32d40 <__gethex+0x3e8>
   32d06:	3201      	adds	r2, #1
   32d08:	6002      	str	r2, [r0, #0]
   32d0a:	2f02      	cmp	r7, #2
   32d0c:	f104 0314 	add.w	r3, r4, #20
   32d10:	d13a      	bne.n	32d88 <__gethex+0x430>
   32d12:	f8d8 2000 	ldr.w	r2, [r8]
   32d16:	3a01      	subs	r2, #1
   32d18:	42b2      	cmp	r2, r6
   32d1a:	d10a      	bne.n	32d32 <__gethex+0x3da>
   32d1c:	1171      	asrs	r1, r6, #5
   32d1e:	2201      	movs	r2, #1
   32d20:	f006 061f 	and.w	r6, r6, #31
   32d24:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   32d28:	fa02 f606 	lsl.w	r6, r2, r6
   32d2c:	421e      	tst	r6, r3
   32d2e:	bf18      	it	ne
   32d30:	4617      	movne	r7, r2
   32d32:	f047 0720 	orr.w	r7, r7, #32
   32d36:	9b14      	ldr	r3, [sp, #80]	; 0x50
   32d38:	601c      	str	r4, [r3, #0]
   32d3a:	9b04      	ldr	r3, [sp, #16]
   32d3c:	601d      	str	r5, [r3, #0]
   32d3e:	e69f      	b.n	32a80 <__gethex+0x128>
   32d40:	4299      	cmp	r1, r3
   32d42:	f843 cc04 	str.w	ip, [r3, #-4]
   32d46:	d8d8      	bhi.n	32cfa <__gethex+0x3a2>
   32d48:	68a3      	ldr	r3, [r4, #8]
   32d4a:	4599      	cmp	r9, r3
   32d4c:	db14      	blt.n	32d78 <__gethex+0x420>
   32d4e:	6861      	ldr	r1, [r4, #4]
   32d50:	ee18 0a10 	vmov	r0, s16
   32d54:	3101      	adds	r1, #1
   32d56:	f003 fa3b 	bl	361d0 <_Balloc>
   32d5a:	6922      	ldr	r2, [r4, #16]
   32d5c:	4682      	mov	sl, r0
   32d5e:	f104 010c 	add.w	r1, r4, #12
   32d62:	3202      	adds	r2, #2
   32d64:	300c      	adds	r0, #12
   32d66:	0092      	lsls	r2, r2, #2
   32d68:	f002 fece 	bl	35b08 <memcpy>
   32d6c:	4621      	mov	r1, r4
   32d6e:	4654      	mov	r4, sl
   32d70:	ee18 0a10 	vmov	r0, s16
   32d74:	f003 fa60 	bl	36238 <_Bfree>
   32d78:	6923      	ldr	r3, [r4, #16]
   32d7a:	1c5a      	adds	r2, r3, #1
   32d7c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   32d80:	6122      	str	r2, [r4, #16]
   32d82:	2201      	movs	r2, #1
   32d84:	615a      	str	r2, [r3, #20]
   32d86:	e7c0      	b.n	32d0a <__gethex+0x3b2>
   32d88:	6922      	ldr	r2, [r4, #16]
   32d8a:	454a      	cmp	r2, r9
   32d8c:	dd0b      	ble.n	32da6 <__gethex+0x44e>
   32d8e:	2101      	movs	r1, #1
   32d90:	4620      	mov	r0, r4
   32d92:	f003 f8a2 	bl	35eda <rshift>
   32d96:	3501      	adds	r5, #1
   32d98:	f8d8 3008 	ldr.w	r3, [r8, #8]
   32d9c:	42ab      	cmp	r3, r5
   32d9e:	f6ff aed5 	blt.w	32b4c <__gethex+0x1f4>
   32da2:	2701      	movs	r7, #1
   32da4:	e7c5      	b.n	32d32 <__gethex+0x3da>
   32da6:	f016 061f 	ands.w	r6, r6, #31
   32daa:	d0fa      	beq.n	32da2 <__gethex+0x44a>
   32dac:	449b      	add	fp, r3
   32dae:	f1c6 0620 	rsb	r6, r6, #32
   32db2:	f85b 0c04 	ldr.w	r0, [fp, #-4]
   32db6:	f003 fad3 	bl	36360 <__hi0bits>
   32dba:	42b0      	cmp	r0, r6
   32dbc:	dbe7      	blt.n	32d8e <__gethex+0x436>
   32dbe:	e7f0      	b.n	32da2 <__gethex+0x44a>

00032dc0 <_lseek_r>:
   32dc0:	b538      	push	{r3, r4, r5, lr}
   32dc2:	4604      	mov	r4, r0
   32dc4:	4d06      	ldr	r5, [pc, #24]	; (32de0 <_lseek_r+0x20>)
   32dc6:	4608      	mov	r0, r1
   32dc8:	4611      	mov	r1, r2
   32dca:	2200      	movs	r2, #0
   32dcc:	602a      	str	r2, [r5, #0]
   32dce:	461a      	mov	r2, r3
   32dd0:	f000 ff62 	bl	33c98 <_lseek>
   32dd4:	1c43      	adds	r3, r0, #1
   32dd6:	d102      	bne.n	32dde <_lseek_r+0x1e>
   32dd8:	682b      	ldr	r3, [r5, #0]
   32dda:	b103      	cbz	r3, 32dde <_lseek_r+0x1e>
   32ddc:	6023      	str	r3, [r4, #0]
   32dde:	bd38      	pop	{r3, r4, r5, pc}
   32de0:	20025cac 	.word	0x20025cac

00032de4 <__smakebuf_r>:
   32de4:	898b      	ldrh	r3, [r1, #12]
   32de6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   32de8:	079d      	lsls	r5, r3, #30
   32dea:	4606      	mov	r6, r0
   32dec:	460c      	mov	r4, r1
   32dee:	d507      	bpl.n	32e00 <__smakebuf_r+0x1c>
   32df0:	f104 0347 	add.w	r3, r4, #71	; 0x47
   32df4:	6023      	str	r3, [r4, #0]
   32df6:	6123      	str	r3, [r4, #16]
   32df8:	2301      	movs	r3, #1
   32dfa:	6163      	str	r3, [r4, #20]
   32dfc:	b002      	add	sp, #8
   32dfe:	bd70      	pop	{r4, r5, r6, pc}
   32e00:	ab01      	add	r3, sp, #4
   32e02:	466a      	mov	r2, sp
   32e04:	f003 f994 	bl	36130 <__swhatbuf_r>
   32e08:	9900      	ldr	r1, [sp, #0]
   32e0a:	4605      	mov	r5, r0
   32e0c:	4630      	mov	r0, r6
   32e0e:	f7fe fee1 	bl	31bd4 <_malloc_r>
   32e12:	b948      	cbnz	r0, 32e28 <__smakebuf_r+0x44>
   32e14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   32e18:	059a      	lsls	r2, r3, #22
   32e1a:	d4ef      	bmi.n	32dfc <__smakebuf_r+0x18>
   32e1c:	f023 0303 	bic.w	r3, r3, #3
   32e20:	f043 0302 	orr.w	r3, r3, #2
   32e24:	81a3      	strh	r3, [r4, #12]
   32e26:	e7e3      	b.n	32df0 <__smakebuf_r+0xc>
   32e28:	4b0d      	ldr	r3, [pc, #52]	; (32e60 <__smakebuf_r+0x7c>)
   32e2a:	62b3      	str	r3, [r6, #40]	; 0x28
   32e2c:	89a3      	ldrh	r3, [r4, #12]
   32e2e:	6020      	str	r0, [r4, #0]
   32e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   32e34:	6120      	str	r0, [r4, #16]
   32e36:	81a3      	strh	r3, [r4, #12]
   32e38:	9b00      	ldr	r3, [sp, #0]
   32e3a:	6163      	str	r3, [r4, #20]
   32e3c:	9b01      	ldr	r3, [sp, #4]
   32e3e:	b15b      	cbz	r3, 32e58 <__smakebuf_r+0x74>
   32e40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   32e44:	4630      	mov	r0, r6
   32e46:	f000 fa1f 	bl	33288 <_isatty_r>
   32e4a:	b128      	cbz	r0, 32e58 <__smakebuf_r+0x74>
   32e4c:	89a3      	ldrh	r3, [r4, #12]
   32e4e:	f023 0303 	bic.w	r3, r3, #3
   32e52:	f043 0301 	orr.w	r3, r3, #1
   32e56:	81a3      	strh	r3, [r4, #12]
   32e58:	89a0      	ldrh	r0, [r4, #12]
   32e5a:	4305      	orrs	r5, r0
   32e5c:	81a5      	strh	r5, [r4, #12]
   32e5e:	e7cd      	b.n	32dfc <__smakebuf_r+0x18>
   32e60:	00032821 	.word	0x00032821

00032e64 <__malloc_lock>:
   32e64:	4801      	ldr	r0, [pc, #4]	; (32e6c <__malloc_lock+0x8>)
   32e66:	f003 b961 	b.w	3612c <__retarget_lock_acquire_recursive>
   32e6a:	bf00      	nop
   32e6c:	20025cb4 	.word	0x20025cb4

00032e70 <__malloc_unlock>:
   32e70:	4801      	ldr	r0, [pc, #4]	; (32e78 <__malloc_unlock+0x8>)
   32e72:	f003 b95c 	b.w	3612e <__retarget_lock_release_recursive>
   32e76:	bf00      	nop
   32e78:	20025cb4 	.word	0x20025cb4

00032e7c <__pow5mult>:
   32e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   32e80:	4615      	mov	r5, r2
   32e82:	f012 0203 	ands.w	r2, r2, #3
   32e86:	4606      	mov	r6, r0
   32e88:	460f      	mov	r7, r1
   32e8a:	d007      	beq.n	32e9c <__pow5mult+0x20>
   32e8c:	3a01      	subs	r2, #1
   32e8e:	4c21      	ldr	r4, [pc, #132]	; (32f14 <__pow5mult+0x98>)
   32e90:	2300      	movs	r3, #0
   32e92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   32e96:	f003 f9e6 	bl	36266 <__multadd>
   32e9a:	4607      	mov	r7, r0
   32e9c:	10ad      	asrs	r5, r5, #2
   32e9e:	d035      	beq.n	32f0c <__pow5mult+0x90>
   32ea0:	6a74      	ldr	r4, [r6, #36]	; 0x24
   32ea2:	b93c      	cbnz	r4, 32eb4 <__pow5mult+0x38>
   32ea4:	2010      	movs	r0, #16
   32ea6:	f7fe fe35 	bl	31b14 <malloc>
   32eaa:	6270      	str	r0, [r6, #36]	; 0x24
   32eac:	6004      	str	r4, [r0, #0]
   32eae:	60c4      	str	r4, [r0, #12]
   32eb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
   32eb4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   32eb8:	f8d8 4008 	ldr.w	r4, [r8, #8]
   32ebc:	b94c      	cbnz	r4, 32ed2 <__pow5mult+0x56>
   32ebe:	f240 2171 	movw	r1, #625	; 0x271
   32ec2:	4630      	mov	r0, r6
   32ec4:	f003 fa9c 	bl	36400 <__i2b>
   32ec8:	2300      	movs	r3, #0
   32eca:	4604      	mov	r4, r0
   32ecc:	f8c8 0008 	str.w	r0, [r8, #8]
   32ed0:	6003      	str	r3, [r0, #0]
   32ed2:	f04f 0900 	mov.w	r9, #0
   32ed6:	07eb      	lsls	r3, r5, #31
   32ed8:	d50a      	bpl.n	32ef0 <__pow5mult+0x74>
   32eda:	4639      	mov	r1, r7
   32edc:	4622      	mov	r2, r4
   32ede:	4630      	mov	r0, r6
   32ee0:	f003 fa97 	bl	36412 <__multiply>
   32ee4:	4680      	mov	r8, r0
   32ee6:	4639      	mov	r1, r7
   32ee8:	4630      	mov	r0, r6
   32eea:	4647      	mov	r7, r8
   32eec:	f003 f9a4 	bl	36238 <_Bfree>
   32ef0:	106d      	asrs	r5, r5, #1
   32ef2:	d00b      	beq.n	32f0c <__pow5mult+0x90>
   32ef4:	6820      	ldr	r0, [r4, #0]
   32ef6:	b938      	cbnz	r0, 32f08 <__pow5mult+0x8c>
   32ef8:	4622      	mov	r2, r4
   32efa:	4621      	mov	r1, r4
   32efc:	4630      	mov	r0, r6
   32efe:	f003 fa88 	bl	36412 <__multiply>
   32f02:	6020      	str	r0, [r4, #0]
   32f04:	f8c0 9000 	str.w	r9, [r0]
   32f08:	4604      	mov	r4, r0
   32f0a:	e7e4      	b.n	32ed6 <__pow5mult+0x5a>
   32f0c:	4638      	mov	r0, r7
   32f0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   32f12:	bf00      	nop
   32f14:	000375a0 	.word	0x000375a0

00032f18 <__ulp>:
   32f18:	b082      	sub	sp, #8
   32f1a:	4913      	ldr	r1, [pc, #76]	; (32f68 <__ulp+0x50>)
   32f1c:	ed8d 0b00 	vstr	d0, [sp]
   32f20:	9b01      	ldr	r3, [sp, #4]
   32f22:	4019      	ands	r1, r3
   32f24:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   32f28:	2900      	cmp	r1, #0
   32f2a:	dd05      	ble.n	32f38 <__ulp+0x20>
   32f2c:	2200      	movs	r2, #0
   32f2e:	460b      	mov	r3, r1
   32f30:	ec43 2b10 	vmov	d0, r2, r3
   32f34:	b002      	add	sp, #8
   32f36:	4770      	bx	lr
   32f38:	4249      	negs	r1, r1
   32f3a:	2200      	movs	r2, #0
   32f3c:	2300      	movs	r3, #0
   32f3e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   32f42:	ea4f 5021 	mov.w	r0, r1, asr #20
   32f46:	da04      	bge.n	32f52 <__ulp+0x3a>
   32f48:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   32f4c:	fa41 f300 	asr.w	r3, r1, r0
   32f50:	e7ee      	b.n	32f30 <__ulp+0x18>
   32f52:	f1a0 0114 	sub.w	r1, r0, #20
   32f56:	291e      	cmp	r1, #30
   32f58:	bfd6      	itet	le
   32f5a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   32f5e:	2101      	movgt	r1, #1
   32f60:	fa20 f101 	lsrle.w	r1, r0, r1
   32f64:	460a      	mov	r2, r1
   32f66:	e7e3      	b.n	32f30 <__ulp+0x18>
   32f68:	7ff00000 	.word	0x7ff00000

00032f6c <__b2d>:
   32f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   32f6e:	6905      	ldr	r5, [r0, #16]
   32f70:	f100 0714 	add.w	r7, r0, #20
   32f74:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   32f78:	f855 4c04 	ldr.w	r4, [r5, #-4]
   32f7c:	1f2e      	subs	r6, r5, #4
   32f7e:	4620      	mov	r0, r4
   32f80:	f003 f9ee 	bl	36360 <__hi0bits>
   32f84:	f1c0 0320 	rsb	r3, r0, #32
   32f88:	280a      	cmp	r0, #10
   32f8a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 33008 <__b2d+0x9c>
   32f8e:	600b      	str	r3, [r1, #0]
   32f90:	dc15      	bgt.n	32fbe <__b2d+0x52>
   32f92:	f1c0 0e0b 	rsb	lr, r0, #11
   32f96:	42b7      	cmp	r7, r6
   32f98:	f100 0015 	add.w	r0, r0, #21
   32f9c:	fa24 f10e 	lsr.w	r1, r4, lr
   32fa0:	fa04 f000 	lsl.w	r0, r4, r0
   32fa4:	ea41 030c 	orr.w	r3, r1, ip
   32fa8:	bf34      	ite	cc
   32faa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   32fae:	2100      	movcs	r1, #0
   32fb0:	fa21 f10e 	lsr.w	r1, r1, lr
   32fb4:	ea40 0201 	orr.w	r2, r0, r1
   32fb8:	ec43 2b10 	vmov	d0, r2, r3
   32fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   32fbe:	42b7      	cmp	r7, r6
   32fc0:	bf3a      	itte	cc
   32fc2:	f1a5 0608 	subcc.w	r6, r5, #8
   32fc6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   32fca:	2100      	movcs	r1, #0
   32fcc:	380b      	subs	r0, #11
   32fce:	d017      	beq.n	33000 <__b2d+0x94>
   32fd0:	f1c0 0c20 	rsb	ip, r0, #32
   32fd4:	fa04 f500 	lsl.w	r5, r4, r0
   32fd8:	42be      	cmp	r6, r7
   32fda:	fa01 f000 	lsl.w	r0, r1, r0
   32fde:	fa21 f40c 	lsr.w	r4, r1, ip
   32fe2:	ea45 0504 	orr.w	r5, r5, r4
   32fe6:	bf8c      	ite	hi
   32fe8:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   32fec:	2400      	movls	r4, #0
   32fee:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   32ff2:	fa24 f40c 	lsr.w	r4, r4, ip
   32ff6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   32ffa:	ea40 0204 	orr.w	r2, r0, r4
   32ffe:	e7db      	b.n	32fb8 <__b2d+0x4c>
   33000:	ea44 030c 	orr.w	r3, r4, ip
   33004:	460a      	mov	r2, r1
   33006:	e7d7      	b.n	32fb8 <__b2d+0x4c>
   33008:	3ff00000 	.word	0x3ff00000

0003300c <_svfiprintf_r>:
   3300c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33010:	4698      	mov	r8, r3
   33012:	898b      	ldrh	r3, [r1, #12]
   33014:	b09d      	sub	sp, #116	; 0x74
   33016:	4607      	mov	r7, r0
   33018:	061b      	lsls	r3, r3, #24
   3301a:	460d      	mov	r5, r1
   3301c:	4614      	mov	r4, r2
   3301e:	d50e      	bpl.n	3303e <_svfiprintf_r+0x32>
   33020:	690b      	ldr	r3, [r1, #16]
   33022:	b963      	cbnz	r3, 3303e <_svfiprintf_r+0x32>
   33024:	2140      	movs	r1, #64	; 0x40
   33026:	f7fe fdd5 	bl	31bd4 <_malloc_r>
   3302a:	6028      	str	r0, [r5, #0]
   3302c:	6128      	str	r0, [r5, #16]
   3302e:	b920      	cbnz	r0, 3303a <_svfiprintf_r+0x2e>
   33030:	230c      	movs	r3, #12
   33032:	603b      	str	r3, [r7, #0]
   33034:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   33038:	e0d1      	b.n	331de <_svfiprintf_r+0x1d2>
   3303a:	2340      	movs	r3, #64	; 0x40
   3303c:	616b      	str	r3, [r5, #20]
   3303e:	2300      	movs	r3, #0
   33040:	f8cd 800c 	str.w	r8, [sp, #12]
   33044:	f04f 0901 	mov.w	r9, #1
   33048:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 331f8 <_svfiprintf_r+0x1ec>
   3304c:	9309      	str	r3, [sp, #36]	; 0x24
   3304e:	2320      	movs	r3, #32
   33050:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   33054:	2330      	movs	r3, #48	; 0x30
   33056:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   3305a:	4623      	mov	r3, r4
   3305c:	469a      	mov	sl, r3
   3305e:	f813 2b01 	ldrb.w	r2, [r3], #1
   33062:	b10a      	cbz	r2, 33068 <_svfiprintf_r+0x5c>
   33064:	2a25      	cmp	r2, #37	; 0x25
   33066:	d1f9      	bne.n	3305c <_svfiprintf_r+0x50>
   33068:	ebba 0b04 	subs.w	fp, sl, r4
   3306c:	d00b      	beq.n	33086 <_svfiprintf_r+0x7a>
   3306e:	465b      	mov	r3, fp
   33070:	4622      	mov	r2, r4
   33072:	4629      	mov	r1, r5
   33074:	4638      	mov	r0, r7
   33076:	f003 fc5b 	bl	36930 <__ssputs_r>
   3307a:	3001      	adds	r0, #1
   3307c:	f000 80aa 	beq.w	331d4 <_svfiprintf_r+0x1c8>
   33080:	9a09      	ldr	r2, [sp, #36]	; 0x24
   33082:	445a      	add	r2, fp
   33084:	9209      	str	r2, [sp, #36]	; 0x24
   33086:	f89a 3000 	ldrb.w	r3, [sl]
   3308a:	2b00      	cmp	r3, #0
   3308c:	f000 80a2 	beq.w	331d4 <_svfiprintf_r+0x1c8>
   33090:	2300      	movs	r3, #0
   33092:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   33096:	f10a 0a01 	add.w	sl, sl, #1
   3309a:	9304      	str	r3, [sp, #16]
   3309c:	9307      	str	r3, [sp, #28]
   3309e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   330a2:	931a      	str	r3, [sp, #104]	; 0x68
   330a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
   330a8:	4654      	mov	r4, sl
   330aa:	2205      	movs	r2, #5
   330ac:	4852      	ldr	r0, [pc, #328]	; (331f8 <_svfiprintf_r+0x1ec>)
   330ae:	f814 1b01 	ldrb.w	r1, [r4], #1
   330b2:	f002 fd0d 	bl	35ad0 <memchr>
   330b6:	9a04      	ldr	r2, [sp, #16]
   330b8:	b9d8      	cbnz	r0, 330f2 <_svfiprintf_r+0xe6>
   330ba:	06d0      	lsls	r0, r2, #27
   330bc:	bf44      	itt	mi
   330be:	2320      	movmi	r3, #32
   330c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   330c4:	0711      	lsls	r1, r2, #28
   330c6:	bf44      	itt	mi
   330c8:	232b      	movmi	r3, #43	; 0x2b
   330ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   330ce:	f89a 3000 	ldrb.w	r3, [sl]
   330d2:	2b2a      	cmp	r3, #42	; 0x2a
   330d4:	d015      	beq.n	33102 <_svfiprintf_r+0xf6>
   330d6:	9a07      	ldr	r2, [sp, #28]
   330d8:	4654      	mov	r4, sl
   330da:	2000      	movs	r0, #0
   330dc:	f04f 0c0a 	mov.w	ip, #10
   330e0:	4621      	mov	r1, r4
   330e2:	f811 3b01 	ldrb.w	r3, [r1], #1
   330e6:	3b30      	subs	r3, #48	; 0x30
   330e8:	2b09      	cmp	r3, #9
   330ea:	d94e      	bls.n	3318a <_svfiprintf_r+0x17e>
   330ec:	b1b0      	cbz	r0, 3311c <_svfiprintf_r+0x110>
   330ee:	9207      	str	r2, [sp, #28]
   330f0:	e014      	b.n	3311c <_svfiprintf_r+0x110>
   330f2:	eba0 0308 	sub.w	r3, r0, r8
   330f6:	46a2      	mov	sl, r4
   330f8:	fa09 f303 	lsl.w	r3, r9, r3
   330fc:	4313      	orrs	r3, r2
   330fe:	9304      	str	r3, [sp, #16]
   33100:	e7d2      	b.n	330a8 <_svfiprintf_r+0x9c>
   33102:	9b03      	ldr	r3, [sp, #12]
   33104:	1d19      	adds	r1, r3, #4
   33106:	681b      	ldr	r3, [r3, #0]
   33108:	2b00      	cmp	r3, #0
   3310a:	9103      	str	r1, [sp, #12]
   3310c:	bfbb      	ittet	lt
   3310e:	425b      	neglt	r3, r3
   33110:	f042 0202 	orrlt.w	r2, r2, #2
   33114:	9307      	strge	r3, [sp, #28]
   33116:	9307      	strlt	r3, [sp, #28]
   33118:	bfb8      	it	lt
   3311a:	9204      	strlt	r2, [sp, #16]
   3311c:	7823      	ldrb	r3, [r4, #0]
   3311e:	2b2e      	cmp	r3, #46	; 0x2e
   33120:	d10c      	bne.n	3313c <_svfiprintf_r+0x130>
   33122:	7863      	ldrb	r3, [r4, #1]
   33124:	2b2a      	cmp	r3, #42	; 0x2a
   33126:	d135      	bne.n	33194 <_svfiprintf_r+0x188>
   33128:	9b03      	ldr	r3, [sp, #12]
   3312a:	3402      	adds	r4, #2
   3312c:	1d1a      	adds	r2, r3, #4
   3312e:	681b      	ldr	r3, [r3, #0]
   33130:	2b00      	cmp	r3, #0
   33132:	9203      	str	r2, [sp, #12]
   33134:	bfb8      	it	lt
   33136:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   3313a:	9305      	str	r3, [sp, #20]
   3313c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 33208 <_svfiprintf_r+0x1fc>
   33140:	2203      	movs	r2, #3
   33142:	7821      	ldrb	r1, [r4, #0]
   33144:	4650      	mov	r0, sl
   33146:	f002 fcc3 	bl	35ad0 <memchr>
   3314a:	b140      	cbz	r0, 3315e <_svfiprintf_r+0x152>
   3314c:	2340      	movs	r3, #64	; 0x40
   3314e:	eba0 000a 	sub.w	r0, r0, sl
   33152:	3401      	adds	r4, #1
   33154:	fa03 f000 	lsl.w	r0, r3, r0
   33158:	9b04      	ldr	r3, [sp, #16]
   3315a:	4303      	orrs	r3, r0
   3315c:	9304      	str	r3, [sp, #16]
   3315e:	f814 1b01 	ldrb.w	r1, [r4], #1
   33162:	2206      	movs	r2, #6
   33164:	4825      	ldr	r0, [pc, #148]	; (331fc <_svfiprintf_r+0x1f0>)
   33166:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   3316a:	f002 fcb1 	bl	35ad0 <memchr>
   3316e:	2800      	cmp	r0, #0
   33170:	d038      	beq.n	331e4 <_svfiprintf_r+0x1d8>
   33172:	4b23      	ldr	r3, [pc, #140]	; (33200 <_svfiprintf_r+0x1f4>)
   33174:	bb1b      	cbnz	r3, 331be <_svfiprintf_r+0x1b2>
   33176:	9b03      	ldr	r3, [sp, #12]
   33178:	3307      	adds	r3, #7
   3317a:	f023 0307 	bic.w	r3, r3, #7
   3317e:	3308      	adds	r3, #8
   33180:	9303      	str	r3, [sp, #12]
   33182:	9b09      	ldr	r3, [sp, #36]	; 0x24
   33184:	4433      	add	r3, r6
   33186:	9309      	str	r3, [sp, #36]	; 0x24
   33188:	e767      	b.n	3305a <_svfiprintf_r+0x4e>
   3318a:	fb0c 3202 	mla	r2, ip, r2, r3
   3318e:	460c      	mov	r4, r1
   33190:	2001      	movs	r0, #1
   33192:	e7a5      	b.n	330e0 <_svfiprintf_r+0xd4>
   33194:	2300      	movs	r3, #0
   33196:	3401      	adds	r4, #1
   33198:	f04f 0c0a 	mov.w	ip, #10
   3319c:	4619      	mov	r1, r3
   3319e:	9305      	str	r3, [sp, #20]
   331a0:	4620      	mov	r0, r4
   331a2:	f810 2b01 	ldrb.w	r2, [r0], #1
   331a6:	3a30      	subs	r2, #48	; 0x30
   331a8:	2a09      	cmp	r2, #9
   331aa:	d903      	bls.n	331b4 <_svfiprintf_r+0x1a8>
   331ac:	2b00      	cmp	r3, #0
   331ae:	d0c5      	beq.n	3313c <_svfiprintf_r+0x130>
   331b0:	9105      	str	r1, [sp, #20]
   331b2:	e7c3      	b.n	3313c <_svfiprintf_r+0x130>
   331b4:	fb0c 2101 	mla	r1, ip, r1, r2
   331b8:	4604      	mov	r4, r0
   331ba:	2301      	movs	r3, #1
   331bc:	e7f0      	b.n	331a0 <_svfiprintf_r+0x194>
   331be:	ab03      	add	r3, sp, #12
   331c0:	462a      	mov	r2, r5
   331c2:	a904      	add	r1, sp, #16
   331c4:	4638      	mov	r0, r7
   331c6:	9300      	str	r3, [sp, #0]
   331c8:	4b0e      	ldr	r3, [pc, #56]	; (33204 <_svfiprintf_r+0x1f8>)
   331ca:	e000      	b.n	331ce <_svfiprintf_r+0x1c2>
   331cc:	bf00      	nop
   331ce:	1c42      	adds	r2, r0, #1
   331d0:	4606      	mov	r6, r0
   331d2:	d1d6      	bne.n	33182 <_svfiprintf_r+0x176>
   331d4:	89ab      	ldrh	r3, [r5, #12]
   331d6:	065b      	lsls	r3, r3, #25
   331d8:	f53f af2c 	bmi.w	33034 <_svfiprintf_r+0x28>
   331dc:	9809      	ldr	r0, [sp, #36]	; 0x24
   331de:	b01d      	add	sp, #116	; 0x74
   331e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   331e4:	ab03      	add	r3, sp, #12
   331e6:	462a      	mov	r2, r5
   331e8:	a904      	add	r1, sp, #16
   331ea:	4638      	mov	r0, r7
   331ec:	9300      	str	r3, [sp, #0]
   331ee:	4b05      	ldr	r3, [pc, #20]	; (33204 <_svfiprintf_r+0x1f8>)
   331f0:	f7fe fe7a 	bl	31ee8 <_printf_i>
   331f4:	e7eb      	b.n	331ce <_svfiprintf_r+0x1c2>
   331f6:	bf00      	nop
   331f8:	0003b4ad 	.word	0x0003b4ad
   331fc:	0003b4b7 	.word	0x0003b4b7
   33200:	00000000 	.word	0x00000000
   33204:	00036931 	.word	0x00036931
   33208:	0003b4b3 	.word	0x0003b4b3

0003320c <_read_r>:
   3320c:	b538      	push	{r3, r4, r5, lr}
   3320e:	4604      	mov	r4, r0
   33210:	4d06      	ldr	r5, [pc, #24]	; (3322c <_read_r+0x20>)
   33212:	4608      	mov	r0, r1
   33214:	4611      	mov	r1, r2
   33216:	2200      	movs	r2, #0
   33218:	602a      	str	r2, [r5, #0]
   3321a:	461a      	mov	r2, r3
   3321c:	f000 fd31 	bl	33c82 <_read>
   33220:	1c43      	adds	r3, r0, #1
   33222:	d102      	bne.n	3322a <_read_r+0x1e>
   33224:	682b      	ldr	r3, [r5, #0]
   33226:	b103      	cbz	r3, 3322a <_read_r+0x1e>
   33228:	6023      	str	r3, [r4, #0]
   3322a:	bd38      	pop	{r3, r4, r5, pc}
   3322c:	20025cac 	.word	0x20025cac

00033230 <raise>:
   33230:	4b02      	ldr	r3, [pc, #8]	; (3323c <raise+0xc>)
   33232:	4601      	mov	r1, r0
   33234:	6818      	ldr	r0, [r3, #0]
   33236:	f003 bbd6 	b.w	369e6 <_raise_r>
   3323a:	bf00      	nop
   3323c:	200295bc 	.word	0x200295bc

00033240 <_kill_r>:
   33240:	b538      	push	{r3, r4, r5, lr}
   33242:	2300      	movs	r3, #0
   33244:	4d06      	ldr	r5, [pc, #24]	; (33260 <_kill_r+0x20>)
   33246:	4604      	mov	r4, r0
   33248:	4608      	mov	r0, r1
   3324a:	4611      	mov	r1, r2
   3324c:	602b      	str	r3, [r5, #0]
   3324e:	f000 fd27 	bl	33ca0 <_kill>
   33252:	1c43      	adds	r3, r0, #1
   33254:	d102      	bne.n	3325c <_kill_r+0x1c>
   33256:	682b      	ldr	r3, [r5, #0]
   33258:	b103      	cbz	r3, 3325c <_kill_r+0x1c>
   3325a:	6023      	str	r3, [r4, #0]
   3325c:	bd38      	pop	{r3, r4, r5, pc}
   3325e:	bf00      	nop
   33260:	20025cac 	.word	0x20025cac

00033264 <_fstat_r>:
   33264:	b538      	push	{r3, r4, r5, lr}
   33266:	2300      	movs	r3, #0
   33268:	4d06      	ldr	r5, [pc, #24]	; (33284 <_fstat_r+0x20>)
   3326a:	4604      	mov	r4, r0
   3326c:	4608      	mov	r0, r1
   3326e:	4611      	mov	r1, r2
   33270:	602b      	str	r3, [r5, #0]
   33272:	f000 fd19 	bl	33ca8 <_fstat>
   33276:	1c43      	adds	r3, r0, #1
   33278:	d102      	bne.n	33280 <_fstat_r+0x1c>
   3327a:	682b      	ldr	r3, [r5, #0]
   3327c:	b103      	cbz	r3, 33280 <_fstat_r+0x1c>
   3327e:	6023      	str	r3, [r4, #0]
   33280:	bd38      	pop	{r3, r4, r5, pc}
   33282:	bf00      	nop
   33284:	20025cac 	.word	0x20025cac

00033288 <_isatty_r>:
   33288:	b538      	push	{r3, r4, r5, lr}
   3328a:	2300      	movs	r3, #0
   3328c:	4d05      	ldr	r5, [pc, #20]	; (332a4 <_isatty_r+0x1c>)
   3328e:	4604      	mov	r4, r0
   33290:	4608      	mov	r0, r1
   33292:	602b      	str	r3, [r5, #0]
   33294:	f000 fd02 	bl	33c9c <_isatty>
   33298:	1c43      	adds	r3, r0, #1
   3329a:	d102      	bne.n	332a2 <_isatty_r+0x1a>
   3329c:	682b      	ldr	r3, [r5, #0]
   3329e:	b103      	cbz	r3, 332a2 <_isatty_r+0x1a>
   332a0:	6023      	str	r3, [r4, #0]
   332a2:	bd38      	pop	{r3, r4, r5, pc}
   332a4:	20025cac 	.word	0x20025cac

000332a8 <get_bit_ptr>:
{
   332a8:	b570      	push	{r4, r5, r6, lr}
   332aa:	250c      	movs	r5, #12
   332ac:	68c6      	ldr	r6, [r0, #12]
	u32_t *bitarray = level <= p->max_inline_level ?
   332ae:	f990 000b 	ldrsb.w	r0, [r0, #11]
   332b2:	434d      	muls	r5, r1
		p->levels[level].bits : p->levels[level].bits_p;
   332b4:	4288      	cmp	r0, r1
	*word = &bitarray[bn / 32];
   332b6:	4610      	mov	r0, r2
   332b8:	eb06 0405 	add.w	r4, r6, r5
		p->levels[level].bits : p->levels[level].bits_p;
   332bc:	bfb8      	it	lt
   332be:	5974      	ldrlt	r4, [r6, r5]
	*word = &bitarray[bn / 32];
   332c0:	2a00      	cmp	r2, #0
   332c2:	bfb8      	it	lt
   332c4:	f102 001f 	addlt.w	r0, r2, #31
   332c8:	1140      	asrs	r0, r0, #5
   332ca:	eb04 0180 	add.w	r1, r4, r0, lsl #2
   332ce:	6019      	str	r1, [r3, #0]
}
   332d0:	f002 001f 	and.w	r0, r2, #31
   332d4:	bd70      	pop	{r4, r5, r6, pc}

000332d6 <pool_irq_lock.isra.0.part.0>:
	__asm__ volatile(
   332d6:	f04f 0320 	mov.w	r3, #32
   332da:	f3ef 8011 	mrs	r0, BASEPRI
   332de:	f383 8811 	msr	BASEPRI, r3
   332e2:	f3bf 8f6f 	isb	sy
}
   332e6:	4770      	bx	lr

000332e8 <pool_irq_unlock.isra.0>:
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   332e8:	07c3      	lsls	r3, r0, #31
   332ea:	d503      	bpl.n	332f4 <pool_irq_unlock.isra.0+0xc>
	__asm__ volatile(
   332ec:	f381 8811 	msr	BASEPRI, r1
   332f0:	f3bf 8f6f 	isb	sy
}
   332f4:	4770      	bx	lr

000332f6 <z_sys_mem_pool_base_init>:
	p->max_inline_level = -1;
   332f6:	23ff      	movs	r3, #255	; 0xff
{
   332f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   332fc:	6846      	ldr	r6, [r0, #4]
	p->max_inline_level = -1;
   332fe:	72c3      	strb	r3, [r0, #11]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   33300:	4632      	mov	r2, r6
	for (i = 0; i < p->n_levels; i++) {
   33302:	2300      	movs	r3, #0
		sys_dlist_init(&p->levels[i].free_list);
   33304:	f04f 090c 	mov.w	r9, #12
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   33308:	8907      	ldrh	r7, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   3330a:	6801      	ldr	r1, [r0, #0]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   3330c:	fb06 fc07 	mul.w	ip, r6, r7
	for (i = 0; i < p->n_levels; i++) {
   33310:	f890 800a 	ldrb.w	r8, [r0, #10]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
   33314:	4461      	add	r1, ip
	for (i = 0; i < p->n_levels; i++) {
   33316:	4598      	cmp	r8, r3
   33318:	dc05      	bgt.n	33326 <z_sys_mem_pool_base_init+0x30>
   3331a:	2300      	movs	r3, #0
	for (i = 0; i < p->n_max; i++) {
   3331c:	4619      	mov	r1, r3
   3331e:	428f      	cmp	r7, r1
   33320:	dc20      	bgt.n	33364 <z_sys_mem_pool_base_init+0x6e>
}
   33322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		int nblocks = buflen / sz;
   33326:	fbbc f5f2 	udiv	r5, ip, r2
		sys_dlist_init(&p->levels[i].free_list);
   3332a:	fb09 fe03 	mul.w	lr, r9, r3
   3332e:	f8d0 a00c 	ldr.w	sl, [r0, #12]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   33332:	2d20      	cmp	r5, #32
		sys_dlist_init(&p->levels[i].free_list);
   33334:	eb0a 040e 	add.w	r4, sl, lr
   33338:	f104 0b04 	add.w	fp, r4, #4
	list->tail = (sys_dnode_t *)list;
   3333c:	e9c4 bb01 	strd	fp, fp, [r4, #4]
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
   33340:	d805      	bhi.n	3334e <z_sys_mem_pool_base_init+0x58>
			p->max_inline_level = i;
   33342:	72c3      	strb	r3, [r0, #11]
		sz = WB_DN(sz / 4);
   33344:	0892      	lsrs	r2, r2, #2
   33346:	f022 0203 	bic.w	r2, r2, #3
	for (i = 0; i < p->n_levels; i++) {
   3334a:	3301      	adds	r3, #1
   3334c:	e7e3      	b.n	33316 <z_sys_mem_pool_base_init+0x20>
			bits += (nblocks + 31)/32;
   3334e:	f115 041f 	adds.w	r4, r5, #31
   33352:	bf48      	it	mi
   33354:	f105 043e 	addmi.w	r4, r5, #62	; 0x3e
   33358:	1164      	asrs	r4, r4, #5
			p->levels[i].bits_p = bits;
   3335a:	f84a 100e 	str.w	r1, [sl, lr]
			bits += (nblocks + 31)/32;
   3335e:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   33362:	e7ef      	b.n	33344 <z_sys_mem_pool_base_init+0x4e>
		sys_dlist_append(&p->levels[0].free_list, block);
   33364:	68c2      	ldr	r2, [r0, #12]
	return (u8_t *)p->buf + lsz * block;
   33366:	6805      	ldr	r5, [r0, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
   33368:	f102 0c04 	add.w	ip, r2, #4
	return (u8_t *)p->buf + lsz * block;
   3336c:	18ec      	adds	r4, r5, r3
	node->next = list;
   3336e:	f845 c003 	str.w	ip, [r5, r3]
	node->prev = list->tail;
   33372:	6895      	ldr	r5, [r2, #8]
	for (i = 0; i < p->n_max; i++) {
   33374:	3101      	adds	r1, #1
   33376:	6065      	str	r5, [r4, #4]
	list->tail->next = node;
   33378:	6895      	ldr	r5, [r2, #8]
   3337a:	4433      	add	r3, r6
   3337c:	602c      	str	r4, [r5, #0]
	list->tail = node;
   3337e:	6094      	str	r4, [r2, #8]
   33380:	e7cd      	b.n	3331e <z_sys_mem_pool_base_init+0x28>

00033382 <z_sys_mem_pool_block_alloc>:
{
   33382:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33386:	b087      	sub	sp, #28
   33388:	af00      	add	r7, sp, #0
   3338a:	e9c7 3201 	strd	r3, r2, [r7, #4]
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   3338e:	7a82      	ldrb	r2, [r0, #10]
	for (i = 0; i < p->n_levels; i++) {
   33390:	2400      	movs	r4, #0
	size_t lsizes[LVL_ARRAY_SZ(p->n_levels)];
   33392:	0093      	lsls	r3, r2, #2
   33394:	3307      	adds	r3, #7
   33396:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
   3339a:	ebad 0d03 	sub.w	sp, sp, r3
   3339e:	46ea      	mov	sl, sp
	lsizes[0] = p->max_sz;
   333a0:	4653      	mov	r3, sl
{
   333a2:	4605      	mov	r5, r0
	lsizes[0] = p->max_sz;
   333a4:	6840      	ldr	r0, [r0, #4]
   333a6:	f843 0904 	str.w	r0, [r3], #-4
	for (i = 0; i < p->n_levels; i++) {
   333aa:	42a2      	cmp	r2, r4
   333ac:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
   333b0:	dd09      	ble.n	333c6 <z_sys_mem_pool_block_alloc+0x44>
		if (i > 0) {
   333b2:	b124      	cbz	r4, 333be <z_sys_mem_pool_block_alloc+0x3c>
			lsizes[i] = WB_DN(lsizes[i-1] / 4);
   333b4:	6818      	ldr	r0, [r3, #0]
   333b6:	0880      	lsrs	r0, r0, #2
   333b8:	f020 0003 	bic.w	r0, r0, #3
   333bc:	6058      	str	r0, [r3, #4]
		if (lsizes[i] < size) {
   333be:	f853 0f04 	ldr.w	r0, [r3, #4]!
   333c2:	4288      	cmp	r0, r1
   333c4:	d208      	bcs.n	333d8 <z_sys_mem_pool_block_alloc+0x56>
	if (alloc_l < 0) {
   333c6:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   333ca:	d107      	bne.n	333dc <z_sys_mem_pool_block_alloc+0x5a>
		*data_p = NULL;
   333cc:	2300      	movs	r3, #0
   333ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   333d0:	6013      	str	r3, [r2, #0]
		return -ENOMEM;
   333d2:	f06f 000b 	mvn.w	r0, #11
   333d6:	e02e      	b.n	33436 <z_sys_mem_pool_block_alloc+0xb4>
	for (i = 0; i < p->n_levels; i++) {
   333d8:	3401      	adds	r4, #1
   333da:	e7e6      	b.n	333aa <z_sys_mem_pool_block_alloc+0x28>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   333dc:	7c2e      	ldrb	r6, [r5, #16]
   333de:	f016 0601 	ands.w	r6, r6, #1
   333e2:	d02c      	beq.n	3343e <z_sys_mem_pool_block_alloc+0xbc>
   333e4:	f7ff ff77 	bl	332d6 <pool_irq_lock.isra.0.part.0>
   333e8:	230c      	movs	r3, #12
	key = pool_irq_lock(p);
   333ea:	4606      	mov	r6, r0
	block = sys_dlist_get(&p->levels[l].free_list);
   333ec:	46c8      	mov	r8, r9
   333ee:	68ea      	ldr	r2, [r5, #12]
   333f0:	fb03 2309 	mla	r3, r3, r9, r2
	return list->head == list;
   333f4:	461a      	mov	r2, r3
   333f6:	f852 4f04 	ldr.w	r4, [r2, #4]!

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   333fa:	4294      	cmp	r4, r2
   333fc:	d121      	bne.n	33442 <z_sys_mem_pool_block_alloc+0xc0>
	for (i = alloc_l; i >= 0; i--) {
   333fe:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   33402:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   33406:	f1a3 030c 	sub.w	r3, r3, #12
   3340a:	d1f3      	bne.n	333f4 <z_sys_mem_pool_block_alloc+0x72>
   3340c:	2400      	movs	r4, #0
	pool_irq_unlock(p, key);
   3340e:	4631      	mov	r1, r6
   33410:	7c28      	ldrb	r0, [r5, #16]
   33412:	f7ff ff69 	bl	332e8 <pool_irq_unlock.isra.0>
	*data_p = data;
   33416:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   33418:	601c      	str	r4, [r3, #0]
	if (data == NULL) {
   3341a:	2c00      	cmp	r4, #0
   3341c:	d0d9      	beq.n	333d2 <z_sys_mem_pool_block_alloc+0x50>
	*level_p = alloc_l;
   3341e:	68bb      	ldr	r3, [r7, #8]
	return 0;
   33420:	2000      	movs	r0, #0
	*level_p = alloc_l;
   33422:	f8c3 9000 	str.w	r9, [r3]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   33426:	682b      	ldr	r3, [r5, #0]
   33428:	1ae4      	subs	r4, r4, r3
   3342a:	f85a 3029 	ldr.w	r3, [sl, r9, lsl #2]
   3342e:	fb94 f4f3 	sdiv	r4, r4, r3
	*block_p = block_num(p, data, lsizes[alloc_l]);
   33432:	687b      	ldr	r3, [r7, #4]
   33434:	601c      	str	r4, [r3, #0]
}
   33436:	371c      	adds	r7, #28
   33438:	46bd      	mov	sp, r7
   3343a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 0;
   3343e:	4630      	mov	r0, r6
   33440:	e7d2      	b.n	333e8 <z_sys_mem_pool_block_alloc+0x66>
	node->prev->next = node->next;
   33442:	e9d4 3200 	ldrd	r3, r2, [r4]
   33446:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   33448:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   3344a:	2300      	movs	r3, #0
	node->prev = NULL;
   3344c:	e9c4 3300 	strd	r3, r3, [r4]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   33450:	6829      	ldr	r1, [r5, #0]
		data = block_alloc(p, i, lsizes[i]);
   33452:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   33456:	1a62      	subs	r2, r4, r1
	int bit = get_bit_ptr(p, level, bn, &word);
   33458:	fb92 f2f0 	sdiv	r2, r2, r0
   3345c:	4641      	mov	r1, r8
   3345e:	f107 0314 	add.w	r3, r7, #20
   33462:	4628      	mov	r0, r5
   33464:	f7ff ff20 	bl	332a8 <get_bit_ptr>
	*word |= (1<<bit);
   33468:	2101      	movs	r1, #1
	int bit = get_bit_ptr(p, level, bn, &word);
   3346a:	469b      	mov	fp, r3
	*word |= (1<<bit);
   3346c:	f8d7 c014 	ldr.w	ip, [r7, #20]
   33470:	fa01 f000 	lsl.w	r0, r1, r0
   33474:	f8dc 2000 	ldr.w	r2, [ip]
   33478:	6039      	str	r1, [r7, #0]
   3347a:	4302      	orrs	r2, r0
   3347c:	f8cc 2000 	str.w	r2, [ip]
			for (from_l = i; from_l < alloc_l; from_l++) {
   33480:	45c8      	cmp	r8, r9
   33482:	dac4      	bge.n	3340e <z_sys_mem_pool_block_alloc+0x8c>
	return ((u8_t *)block - (u8_t *)p->buf) / sz;
   33484:	682a      	ldr	r2, [r5, #0]
   33486:	f85a 3028 	ldr.w	r3, [sl, r8, lsl #2]
   3348a:	1aa2      	subs	r2, r4, r2
   3348c:	fb92 f2f3 	sdiv	r2, r2, r3
	set_alloc_bit(p, l + 1, 4*bn);
   33490:	f108 0801 	add.w	r8, r8, #1
	int bit = get_bit_ptr(p, level, bn, &word);
   33494:	465b      	mov	r3, fp
   33496:	4641      	mov	r1, r8
   33498:	0092      	lsls	r2, r2, #2
   3349a:	4628      	mov	r0, r5
   3349c:	f7ff ff04 	bl	332a8 <get_bit_ptr>
	*word |= (1<<bit);
   334a0:	697a      	ldr	r2, [r7, #20]
   334a2:	683b      	ldr	r3, [r7, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   334a4:	68e9      	ldr	r1, [r5, #12]
	*word |= (1<<bit);
   334a6:	fa03 f000 	lsl.w	r0, r3, r0
   334aa:	6813      	ldr	r3, [r2, #0]
   334ac:	4303      	orrs	r3, r0
   334ae:	6013      	str	r3, [r2, #0]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   334b0:	230c      	movs	r3, #12
   334b2:	2203      	movs	r2, #3
   334b4:	fb03 1108 	mla	r1, r3, r8, r1
		int lsz = lsizes[l + 1];
   334b8:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
		sys_dlist_append(&p->levels[l + 1].free_list, block2);
   334bc:	f101 0e04 	add.w	lr, r1, #4
   334c0:	1823      	adds	r3, r4, r0
   334c2:	60fa      	str	r2, [r7, #12]
	node->prev = list->tail;
   334c4:	688a      	ldr	r2, [r1, #8]
	node->next = list;
   334c6:	f8c3 e000 	str.w	lr, [r3]
	node->prev = list->tail;
   334ca:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   334cc:	688a      	ldr	r2, [r1, #8]
   334ce:	6013      	str	r3, [r2, #0]
	for (i = 1; i < 4; i++) {
   334d0:	68fa      	ldr	r2, [r7, #12]
	list->tail = node;
   334d2:	608b      	str	r3, [r1, #8]
   334d4:	3a01      	subs	r2, #1
   334d6:	4403      	add	r3, r0
   334d8:	60fa      	str	r2, [r7, #12]
   334da:	d1f3      	bne.n	334c4 <z_sys_mem_pool_block_alloc+0x142>
				pool_irq_unlock(p, key);
   334dc:	4631      	mov	r1, r6
   334de:	7c28      	ldrb	r0, [r5, #16]
   334e0:	f7ff ff02 	bl	332e8 <pool_irq_unlock.isra.0>
	if (p->flags & SYS_MEM_POOL_KERNEL) {
   334e4:	7c2b      	ldrb	r3, [r5, #16]
   334e6:	07db      	lsls	r3, r3, #31
   334e8:	d503      	bpl.n	334f2 <z_sys_mem_pool_block_alloc+0x170>
   334ea:	f7ff fef4 	bl	332d6 <pool_irq_lock.isra.0.part.0>
				key = pool_irq_lock(p);
   334ee:	4606      	mov	r6, r0
			for (from_l = i; from_l < alloc_l; from_l++) {
   334f0:	e7c6      	b.n	33480 <z_sys_mem_pool_block_alloc+0xfe>
		return 0;
   334f2:	68f8      	ldr	r0, [r7, #12]
   334f4:	e7fb      	b.n	334ee <z_sys_mem_pool_block_alloc+0x16c>

000334f6 <arch_printk_char_out>:
}
   334f6:	2000      	movs	r0, #0
   334f8:	4770      	bx	lr

000334fa <print_err>:
{
   334fa:	b570      	push	{r4, r5, r6, lr}
   334fc:	460d      	mov	r5, r1
   334fe:	4604      	mov	r4, r0
	out('E', ctx);
   33500:	2045      	movs	r0, #69	; 0x45
   33502:	47a0      	blx	r4
	out('R', ctx);
   33504:	4629      	mov	r1, r5
   33506:	2052      	movs	r0, #82	; 0x52
   33508:	47a0      	blx	r4
	out('R', ctx);
   3350a:	4629      	mov	r1, r5
   3350c:	4623      	mov	r3, r4
}
   3350e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
   33512:	2052      	movs	r0, #82	; 0x52
   33514:	4718      	bx	r3

00033516 <printk>:
{
   33516:	b40f      	push	{r0, r1, r2, r3}
   33518:	b507      	push	{r0, r1, r2, lr}
   3351a:	a904      	add	r1, sp, #16
   3351c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   33520:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   33522:	f7eb fbf9 	bl	1ed18 <vprintk>
}
   33526:	b003      	add	sp, #12
   33528:	f85d eb04 	ldr.w	lr, [sp], #4
   3352c:	b004      	add	sp, #16
   3352e:	4770      	bx	lr

00033530 <sys_sem_give>:

	return 0;
}

int sys_sem_give(struct sys_sem *sem)
{
   33530:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   33532:	f7fd f929 	bl	30788 <z_impl_k_sem_give>
	k_sem_give(&sem->kernel_sem);

	return 0;
}
   33536:	2000      	movs	r0, #0
   33538:	bd08      	pop	{r3, pc}

0003353a <sys_sem_take>:

int sys_sem_take(struct sys_sem *sem, s32_t timeout)
{
   3353a:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
   3353c:	f7fd f96e 	bl	3081c <z_impl_k_sem_take>
	int ret_value = 0;

	ret_value = k_sem_take(&sem->kernel_sem, timeout);
	if (ret_value == -EAGAIN || ret_value == -EBUSY) {
   33540:	f110 0f0b 	cmn.w	r0, #11
   33544:	d005      	beq.n	33552 <sys_sem_take+0x18>
   33546:	f110 0f10 	cmn.w	r0, #16
		ret_value = -ETIMEDOUT;
   3354a:	bf08      	it	eq
   3354c:	f06f 0073 	mvneq.w	r0, #115	; 0x73
	}

	return ret_value;
}
   33550:	bd08      	pop	{r3, pc}
		ret_value = -ETIMEDOUT;
   33552:	f06f 0073 	mvn.w	r0, #115	; 0x73
	return ret_value;
   33556:	e7fb      	b.n	33550 <sys_sem_take+0x16>

00033558 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   33558:	4604      	mov	r4, r0
   3355a:	b508      	push	{r3, lr}
   3355c:	4608      	mov	r0, r1
   3355e:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   33560:	461a      	mov	r2, r3
   33562:	47a0      	blx	r4
	return z_impl_k_current_get();
   33564:	f7fd f90a 	bl	3077c <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   33568:	f7ed fb4e 	bl	20c08 <z_impl_k_thread_abort>

0003356c <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   3356c:	b510      	push	{r4, lr}
   3356e:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   33570:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   33574:	4620      	mov	r0, r4
   33576:	f7fb ff03 	bl	2f380 <z_impl_k_queue_get>
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   3357a:	4603      	mov	r3, r0
   3357c:	2800      	cmp	r0, #0
   3357e:	d0f7      	beq.n	33570 <z_work_q_main+0x4>
			continue;
		}

		handler = work->handler;
   33580:	6842      	ldr	r2, [r0, #4]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   33582:	3308      	adds	r3, #8
   33584:	e8d3 1fef 	ldaex	r1, [r3]
   33588:	f021 0c01 	bic.w	ip, r1, #1
   3358c:	e8c3 cfee 	stlex	lr, ip, [r3]
   33590:	f1be 0f00 	cmp.w	lr, #0
   33594:	d1f6      	bne.n	33584 <z_work_q_main+0x18>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   33596:	07cb      	lsls	r3, r1, #31
   33598:	d500      	bpl.n	3359c <z_work_q_main+0x30>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   3359a:	4790      	blx	r2
	z_impl_k_yield();
   3359c:	f7fc ff6e 	bl	3047c <z_impl_k_yield>
}
   335a0:	e7e6      	b.n	33570 <z_work_q_main+0x4>

000335a2 <assert_post_action>:
	if (_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   335a2:	4040      	eors	r0, r0
   335a4:	f380 8811 	msr	BASEPRI, r0
   335a8:	f04f 0004 	mov.w	r0, #4
   335ac:	df02      	svc	2
}
   335ae:	4770      	bx	lr

000335b0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_BOOTLOADER_MCUBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   335b0:	4770      	bx	lr

000335b2 <z_platform_init>:
	nrfx_coredep_delay_us(time_us);
}

void z_platform_init(void)
{
	SystemInit();
   335b2:	f7fa bf6d 	b.w	2e490 <SystemInit>

000335b6 <flash_write_protection_set>:
	return api->write_protection(dev, enable);
   335b6:	6843      	ldr	r3, [r0, #4]
   335b8:	68db      	ldr	r3, [r3, #12]
   335ba:	4718      	bx	r3

000335bc <nvs_flash_rd>:
{
   335bc:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   335be:	6804      	ldr	r4, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   335c0:	8985      	ldrh	r5, [r0, #12]
   335c2:	0c0e      	lsrs	r6, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   335c4:	fa14 f481 	uxtah	r4, r4, r1
   335c8:	fb06 4105 	mla	r1, r6, r5, r4
	rc = flash_read(fs->flash_device, offset, data, len);
   335cc:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return api->read(dev, offset, data, len);
   335ce:	6844      	ldr	r4, [r0, #4]
   335d0:	6824      	ldr	r4, [r4, #0]
   335d2:	46a4      	mov	ip, r4
}
   335d4:	bc70      	pop	{r4, r5, r6}
   335d6:	4760      	bx	ip

000335d8 <nvs_flash_block_cmp>:
{
   335d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   335dc:	4681      	mov	r9, r0
   335de:	460e      	mov	r6, r1
   335e0:	4617      	mov	r7, r2
   335e2:	461c      	mov	r4, r3
	block_size = NVS_BLOCK_SIZE & ~(fs->write_block_size - 1U);
   335e4:	7c05      	ldrb	r5, [r0, #16]
{
   335e6:	b089      	sub	sp, #36	; 0x24
	block_size = NVS_BLOCK_SIZE & ~(fs->write_block_size - 1U);
   335e8:	426d      	negs	r5, r5
   335ea:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   335ee:	b91c      	cbnz	r4, 335f8 <nvs_flash_block_cmp+0x20>
	return 0;
   335f0:	4620      	mov	r0, r4
}
   335f2:	b009      	add	sp, #36	; 0x24
   335f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   335f8:	42ac      	cmp	r4, r5
   335fa:	46a0      	mov	r8, r4
   335fc:	bf28      	it	cs
   335fe:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   33600:	466a      	mov	r2, sp
   33602:	4643      	mov	r3, r8
   33604:	4631      	mov	r1, r6
   33606:	4648      	mov	r0, r9
   33608:	f7ff ffd8 	bl	335bc <nvs_flash_rd>
		if (rc) {
   3360c:	2800      	cmp	r0, #0
   3360e:	d1f0      	bne.n	335f2 <nvs_flash_block_cmp+0x1a>
		rc = memcmp(data8, buf, bytes_to_cmp);
   33610:	4642      	mov	r2, r8
   33612:	4669      	mov	r1, sp
   33614:	4638      	mov	r0, r7
   33616:	f002 fa69 	bl	35aec <memcmp>
		if (rc) {
   3361a:	b920      	cbnz	r0, 33626 <nvs_flash_block_cmp+0x4e>
		len -= bytes_to_cmp;
   3361c:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   33620:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   33622:	4447      	add	r7, r8
   33624:	e7e3      	b.n	335ee <nvs_flash_block_cmp+0x16>
			return 1;
   33626:	2001      	movs	r0, #1
   33628:	e7e3      	b.n	335f2 <nvs_flash_block_cmp+0x1a>

0003362a <nvs_ate_crc8_check>:
{
   3362a:	b510      	push	{r4, lr}
   3362c:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   3362e:	4601      	mov	r1, r0
   33630:	2207      	movs	r2, #7
   33632:	20ff      	movs	r0, #255	; 0xff
   33634:	f7eb f890 	bl	1e758 <crc8_ccitt>
	if (crc8 == entry->crc8) {
   33638:	79e3      	ldrb	r3, [r4, #7]
}
   3363a:	1a18      	subs	r0, r3, r0
   3363c:	bf18      	it	ne
   3363e:	2001      	movne	r0, #1
   33640:	bd10      	pop	{r4, pc}

00033642 <nvs_ate_crc8_update>:
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   33642:	4601      	mov	r1, r0
{
   33644:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   33646:	2207      	movs	r2, #7
{
   33648:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   3364a:	20ff      	movs	r0, #255	; 0xff
   3364c:	f7eb f884 	bl	1e758 <crc8_ccitt>
	entry->crc8 = crc8;
   33650:	71e0      	strb	r0, [r4, #7]
}
   33652:	bd10      	pop	{r4, pc}

00033654 <nvs_al_size.isra.0>:
	if (fs->write_block_size <= 1U) {
   33654:	2801      	cmp	r0, #1
	return (len + (fs->write_block_size - 1U)) & ~(fs->write_block_size - 1U);
   33656:	bf81      	itttt	hi
   33658:	f100 33ff 	addhi.w	r3, r0, #4294967295	; 0xffffffff
   3365c:	18c9      	addhi	r1, r1, r3
   3365e:	4240      	neghi	r0, r0
   33660:	4001      	andhi	r1, r0
}
   33662:	4608      	mov	r0, r1
   33664:	4770      	bx	lr

00033666 <nvs_sector_advance.isra.0>:
	*addr += (1 << ADDR_SECT_SHIFT);
   33666:	680b      	ldr	r3, [r1, #0]
   33668:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   3366c:	0c1a      	lsrs	r2, r3, #16
   3366e:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   33672:	bf08      	it	eq
   33674:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   33678:	600b      	str	r3, [r1, #0]
}
   3367a:	4770      	bx	lr

0003367c <nvs_flash_cmp_const.constprop.0>:
static int nvs_flash_cmp_const(struct nvs_fs *fs, u32_t addr, u8_t value,
   3367c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	block_size = NVS_BLOCK_SIZE & ~(fs->write_block_size - 1U);
   33680:	7c05      	ldrb	r5, [r0, #16]
static int nvs_flash_cmp_const(struct nvs_fs *fs, u32_t addr, u8_t value,
   33682:	b088      	sub	sp, #32
	block_size = NVS_BLOCK_SIZE & ~(fs->write_block_size - 1U);
   33684:	426d      	negs	r5, r5
   33686:	f005 0520 	and.w	r5, r5, #32
static int nvs_flash_cmp_const(struct nvs_fs *fs, u32_t addr, u8_t value,
   3368a:	4607      	mov	r7, r0
   3368c:	460e      	mov	r6, r1
   3368e:	4614      	mov	r4, r2
	(void)memset(cmp, value, block_size);
   33690:	2320      	movs	r3, #32
   33692:	462a      	mov	r2, r5
   33694:	21ff      	movs	r1, #255	; 0xff
   33696:	4668      	mov	r0, sp
   33698:	f002 fa5e 	bl	35b58 <__memset_chk>
	while (len) {
   3369c:	b91c      	cbnz	r4, 336a6 <nvs_flash_cmp_const.constprop.0+0x2a>
	return 0;
   3369e:	4620      	mov	r0, r4
}
   336a0:	b008      	add	sp, #32
   336a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   336a6:	42a5      	cmp	r5, r4
   336a8:	46a8      	mov	r8, r5
   336aa:	bf28      	it	cs
   336ac:	46a0      	movcs	r8, r4
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   336ae:	466a      	mov	r2, sp
   336b0:	4643      	mov	r3, r8
   336b2:	4631      	mov	r1, r6
   336b4:	4638      	mov	r0, r7
   336b6:	f7ff ff8f 	bl	335d8 <nvs_flash_block_cmp>
		if (rc) {
   336ba:	2800      	cmp	r0, #0
   336bc:	d1f0      	bne.n	336a0 <nvs_flash_cmp_const.constprop.0+0x24>
		len -= bytes_to_cmp;
   336be:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   336c2:	4446      	add	r6, r8
   336c4:	e7ea      	b.n	3369c <nvs_flash_cmp_const.constprop.0+0x20>

000336c6 <nvs_flash_erase_sector>:
{
   336c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	addr &= ADDR_SECT_MASK;
   336ca:	0c0e      	lsrs	r6, r1, #16
   336cc:	0436      	lsls	r6, r6, #16
	rc = nvs_flash_cmp_const(fs, addr, 0xff, fs->sector_size);
   336ce:	4631      	mov	r1, r6
   336d0:	8982      	ldrh	r2, [r0, #12]
{
   336d2:	4605      	mov	r5, r0
	rc = nvs_flash_cmp_const(fs, addr, 0xff, fs->sector_size);
   336d4:	f7ff ffd2 	bl	3367c <nvs_flash_cmp_const.constprop.0>
	if (rc <= 0) {
   336d8:	1e04      	subs	r4, r0, #0
   336da:	dd17      	ble.n	3370c <nvs_flash_erase_sector+0x46>
	rc = flash_write_protection_set(fs->flash_device, 0);
   336dc:	2100      	movs	r1, #0
   336de:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	offset = fs->offset;
   336e0:	682f      	ldr	r7, [r5, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   336e2:	f8b5 800c 	ldrh.w	r8, [r5, #12]
	rc = flash_write_protection_set(fs->flash_device, 0);
   336e6:	f7ff ff66 	bl	335b6 <flash_write_protection_set>
	if (rc) {
   336ea:	4604      	mov	r4, r0
   336ec:	b970      	cbnz	r0, 3370c <nvs_flash_erase_sector+0x46>
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   336ee:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   336f0:	89aa      	ldrh	r2, [r5, #12]
	return api->erase(dev, offset, size);
   336f2:	6843      	ldr	r3, [r0, #4]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   336f4:	0c31      	lsrs	r1, r6, #16
   336f6:	fb08 7101 	mla	r1, r8, r1, r7
   336fa:	689b      	ldr	r3, [r3, #8]
   336fc:	4798      	blx	r3
	if (rc) {
   336fe:	4604      	mov	r4, r0
   33700:	b920      	cbnz	r0, 3370c <nvs_flash_erase_sector+0x46>
	(void) flash_write_protection_set(fs->flash_device, 1);
   33702:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	return api->write_protection(dev, enable);
   33704:	6843      	ldr	r3, [r0, #4]
   33706:	2101      	movs	r1, #1
   33708:	68db      	ldr	r3, [r3, #12]
   3370a:	4798      	blx	r3
}
   3370c:	4620      	mov	r0, r4
   3370e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00033712 <nvs_flash_al_wrt.part.0>:
static int nvs_flash_al_wrt(struct nvs_fs *fs, u32_t addr, const void *data,
   33712:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   33716:	4606      	mov	r6, r0
   33718:	460c      	mov	r4, r1
	offset = fs->offset;
   3371a:	f8d0 a000 	ldr.w	sl, [r0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   3371e:	8987      	ldrh	r7, [r0, #12]
static int nvs_flash_al_wrt(struct nvs_fs *fs, u32_t addr, const void *data,
   33720:	b088      	sub	sp, #32
	rc = flash_write_protection_set(fs->flash_device, 0);
   33722:	2100      	movs	r1, #0
   33724:	6a80      	ldr	r0, [r0, #40]	; 0x28
static int nvs_flash_al_wrt(struct nvs_fs *fs, u32_t addr, const void *data,
   33726:	4690      	mov	r8, r2
   33728:	461d      	mov	r5, r3
	rc = flash_write_protection_set(fs->flash_device, 0);
   3372a:	f7ff ff44 	bl	335b6 <flash_write_protection_set>
	if (rc) {
   3372e:	bb80      	cbnz	r0, 33792 <nvs_flash_al_wrt.part.0+0x80>
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   33730:	ea4f 4914 	mov.w	r9, r4, lsr #16
	offset += addr & ADDR_OFFS_MASK;
   33734:	fa1a f484 	uxtah	r4, sl, r4
   33738:	fb07 4909 	mla	r9, r7, r9, r4
	blen = len & ~(fs->write_block_size - 1U);
   3373c:	7c37      	ldrb	r7, [r6, #16]
   3373e:	427f      	negs	r7, r7
	if (blen > 0) {
   33740:	402f      	ands	r7, r5
   33742:	d00b      	beq.n	3375c <nvs_flash_al_wrt.part.0+0x4a>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   33744:	6ab0      	ldr	r0, [r6, #40]	; 0x28
	return api->write(dev, offset, data, len);
   33746:	6843      	ldr	r3, [r0, #4]
   33748:	4642      	mov	r2, r8
   3374a:	685c      	ldr	r4, [r3, #4]
   3374c:	4649      	mov	r1, r9
   3374e:	463b      	mov	r3, r7
   33750:	47a0      	blx	r4
		if (rc) {
   33752:	4604      	mov	r4, r0
   33754:	b9c0      	cbnz	r0, 33788 <nvs_flash_al_wrt.part.0+0x76>
		len -= blen;
   33756:	1bed      	subs	r5, r5, r7
		offset += blen;
   33758:	44b9      	add	r9, r7
		data8 += blen;
   3375a:	44b8      	add	r8, r7
	if (len) {
   3375c:	b1e5      	cbz	r5, 33798 <nvs_flash_al_wrt.part.0+0x86>
		memcpy(buf, data8, len);
   3375e:	2320      	movs	r3, #32
   33760:	462a      	mov	r2, r5
   33762:	4641      	mov	r1, r8
   33764:	4668      	mov	r0, sp
   33766:	f002 f9dc 	bl	35b22 <__memcpy_chk>
		(void)memset(buf + len, 0xff, fs->write_block_size - len);
   3376a:	7c34      	ldrb	r4, [r6, #16]
__ssp_bos_icheck3(memset, void *, int)
   3376c:	21ff      	movs	r1, #255	; 0xff
   3376e:	1b62      	subs	r2, r4, r5
   33770:	eb0d 0005 	add.w	r0, sp, r5
   33774:	f002 f9e8 	bl	35b48 <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   33778:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   3377a:	6843      	ldr	r3, [r0, #4]
   3377c:	466a      	mov	r2, sp
   3377e:	685d      	ldr	r5, [r3, #4]
   33780:	4649      	mov	r1, r9
   33782:	4623      	mov	r3, r4
   33784:	47a8      	blx	r5
   33786:	4604      	mov	r4, r0
	(void) flash_write_protection_set(fs->flash_device, 1);
   33788:	2101      	movs	r1, #1
   3378a:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   3378c:	f7ff ff13 	bl	335b6 <flash_write_protection_set>
	return rc;
   33790:	4620      	mov	r0, r4
}
   33792:	b008      	add	sp, #32
   33794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
end:
   33798:	462c      	mov	r4, r5
   3379a:	e7f5      	b.n	33788 <nvs_flash_al_wrt.part.0+0x76>

0003379c <nvs_flash_ate_wrt>:
{
   3379c:	b510      	push	{r4, lr}
   3379e:	460a      	mov	r2, r1
	if (!len) {
   337a0:	2308      	movs	r3, #8
   337a2:	6841      	ldr	r1, [r0, #4]
{
   337a4:	4604      	mov	r4, r0
   337a6:	f7ff ffb4 	bl	33712 <nvs_flash_al_wrt.part.0>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   337aa:	2108      	movs	r1, #8
   337ac:	4602      	mov	r2, r0
   337ae:	7c20      	ldrb	r0, [r4, #16]
   337b0:	f7ff ff50 	bl	33654 <nvs_al_size.isra.0>
   337b4:	6863      	ldr	r3, [r4, #4]
   337b6:	1a18      	subs	r0, r3, r0
   337b8:	6060      	str	r0, [r4, #4]
}
   337ba:	4610      	mov	r0, r2
   337bc:	bd10      	pop	{r4, pc}

000337be <nvs_delete>:
	return nvs_write(fs, id, NULL, 0);
   337be:	2300      	movs	r3, #0
   337c0:	461a      	mov	r2, r3
   337c2:	f7eb bcff 	b.w	1f1c4 <nvs_write>

000337c6 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, u16_t id, void *data, size_t len)
{
   337c6:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   337c8:	2400      	movs	r4, #0
   337ca:	9400      	str	r4, [sp, #0]
   337cc:	f7eb fdd0 	bl	1f370 <nvs_read_hist>
	return rc;
}
   337d0:	b002      	add	sp, #8
   337d2:	bd10      	pop	{r4, pc}

000337d4 <boot_flag_read.constprop.0>:
static int boot_flag_read(int flag, u8_t bank_id)
   337d4:	b507      	push	{r0, r1, r2, lr}
	rc = flash_area_open(bank_id, &fa);
   337d6:	2002      	movs	r0, #2
   337d8:	a901      	add	r1, sp, #4
   337da:	f7eb ff6f 	bl	1f6bc <flash_area_open>
	if (rc) {
   337de:	b950      	cbnz	r0, 337f6 <boot_flag_read.constprop.0+0x22>
	rc = boot_flag_offs(flag, fa, &offs);
   337e0:	9801      	ldr	r0, [sp, #4]
	rc = flash_area_read(fa, offs, &flag_val, sizeof(flag_val));
   337e2:	2301      	movs	r3, #1
		*offs = IMAGE_OK_OFFS(fa);
   337e4:	6881      	ldr	r1, [r0, #8]
	rc = flash_area_read(fa, offs, &flag_val, sizeof(flag_val));
   337e6:	f10d 0203 	add.w	r2, sp, #3
   337ea:	3918      	subs	r1, #24
   337ec:	f000 f8af 	bl	3394e <flash_area_read>
	if (rc != 0) {
   337f0:	b908      	cbnz	r0, 337f6 <boot_flag_read.constprop.0+0x22>
	return flag_val;
   337f2:	f89d 0003 	ldrb.w	r0, [sp, #3]
}
   337f6:	b003      	add	sp, #12
   337f8:	f85d fb04 	ldr.w	pc, [sp], #4

000337fc <boot_flag_write.constprop.0>:
static int boot_flag_write(int flag, u8_t bank_id)
   337fc:	b513      	push	{r0, r1, r4, lr}
	rc = flash_area_open(bank_id, &fa);
   337fe:	a901      	add	r1, sp, #4
   33800:	f7eb ff5c 	bl	1f6bc <flash_area_open>
	if (rc) {
   33804:	4604      	mov	r4, r0
   33806:	b948      	cbnz	r0, 3381c <boot_flag_write.constprop.0+0x20>
	rc = boot_flag_offs(flag, fa, &offs);
   33808:	9801      	ldr	r0, [sp, #4]
	rc = boot_write_trailer_byte(fa, offs, BOOT_FLAG_SET);
   3380a:	2201      	movs	r2, #1
		*offs = IMAGE_OK_OFFS(fa);
   3380c:	6881      	ldr	r1, [r0, #8]
	rc = boot_write_trailer_byte(fa, offs, BOOT_FLAG_SET);
   3380e:	3918      	subs	r1, #24
   33810:	f7eb fe0c 	bl	1f42c <boot_write_trailer_byte>
   33814:	4604      	mov	r4, r0
	flash_area_close(fa);
   33816:	9801      	ldr	r0, [sp, #4]
   33818:	f000 f898 	bl	3394c <flash_area_close>
}
   3381c:	4620      	mov	r0, r4
   3381e:	b002      	add	sp, #8
   33820:	bd10      	pop	{r4, pc}

00033822 <boot_write_img_confirmed>:
{
	return boot_image_ok_read(FLASH_AREA_IMAGE_PRIMARY) == BOOT_FLAG_SET;
}

int boot_write_img_confirmed(void)
{
   33822:	b513      	push	{r0, r1, r4, lr}
	return boot_flag_read(BOOT_FLAG_IMAGE_OK, bank_id);
   33824:	f7ff ffd6 	bl	337d4 <boot_flag_read.constprop.0>
	rc = flash_area_open(bank_id, &fa);
   33828:	a901      	add	r1, sp, #4
	return boot_flag_read(BOOT_FLAG_IMAGE_OK, bank_id);
   3382a:	4604      	mov	r4, r0
	rc = flash_area_open(bank_id, &fa);
   3382c:	2002      	movs	r0, #2
   3382e:	f7eb ff45 	bl	1f6bc <flash_area_open>
	if (rc) {
   33832:	2800      	cmp	r0, #0
		return -EINVAL;
   33834:	bf0c      	ite	eq
   33836:	23ff      	moveq	r3, #255	; 0xff
   33838:	f06f 0315 	mvnne.w	r3, #21
	int rc;

	if (boot_image_ok_read(FLASH_AREA_IMAGE_PRIMARY) !=
   3383c:	42a3      	cmp	r3, r4
   3383e:	d104      	bne.n	3384a <boot_write_img_confirmed+0x28>
	return boot_flag_write(BOOT_FLAG_IMAGE_OK, bank_id);
   33840:	2002      	movs	r0, #2
   33842:	f7ff ffdb 	bl	337fc <boot_flag_write.constprop.0>
	}

	rc = boot_image_ok_write(FLASH_AREA_IMAGE_PRIMARY);

	return rc;
}
   33846:	b002      	add	sp, #8
   33848:	bd10      	pop	{r4, pc}
		return 0;
   3384a:	2000      	movs	r0, #0
   3384c:	e7fb      	b.n	33846 <boot_write_img_confirmed+0x24>

0003384e <flash_img_buffered_write>:

int flash_img_buffered_write(struct flash_img_context *ctx, u8_t *data,
			     size_t len, bool flush)
{
   3384e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33852:	4604      	mov	r4, r0
   33854:	4689      	mov	r9, r1
   33856:	4616      	mov	r6, r2
   33858:	4698      	mov	r8, r3
	int processed = 0;
   3385a:	2700      	movs	r7, #0
	while ((len - processed) >=
	       (buf_empty_bytes = CONFIG_IMG_BLOCK_BUF_SIZE - ctx->buf_bytes)) {
		memcpy(ctx->buf + ctx->buf_bytes, data + processed,
		       buf_empty_bytes);

		ctx->buf_bytes = CONFIG_IMG_BLOCK_BUF_SIZE;
   3385c:	f44f 7a00 	mov.w	sl, #512	; 0x200
	       (buf_empty_bytes = CONFIG_IMG_BLOCK_BUF_SIZE - ctx->buf_bytes)) {
   33860:	f8b4 0208 	ldrh.w	r0, [r4, #520]	; 0x208
	while ((len - processed) >=
   33864:	1bf2      	subs	r2, r6, r7
	       (buf_empty_bytes = CONFIG_IMG_BLOCK_BUF_SIZE - ctx->buf_bytes)) {
   33866:	f5c0 7b00 	rsb	fp, r0, #512	; 0x200
	while ((len - processed) >=
   3386a:	455a      	cmp	r2, fp
   3386c:	d222      	bcs.n	338b4 <flash_img_buffered_write+0x66>

		processed += buf_empty_bytes;
	}

	/* place rest of the data into ctx->buf */
	if (processed < len) {
   3386e:	42b7      	cmp	r7, r6
   33870:	d20a      	bcs.n	33888 <flash_img_buffered_write+0x3a>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   33872:	eb09 0107 	add.w	r1, r9, r7
   33876:	4420      	add	r0, r4
   33878:	f002 f946 	bl	35b08 <memcpy>
		memcpy(ctx->buf + ctx->buf_bytes,
		       data + processed, len - processed);
		ctx->buf_bytes += len - processed;
   3387c:	f8b4 2208 	ldrh.w	r2, [r4, #520]	; 0x208
   33880:	4416      	add	r6, r2
   33882:	1bf6      	subs	r6, r6, r7
   33884:	f8a4 6208 	strh.w	r6, [r4, #520]	; 0x208
	}

	if (!flush) {
   33888:	f1b8 0f00 	cmp.w	r8, #0
   3388c:	d02a      	beq.n	338e4 <flash_img_buffered_write+0x96>
		return rc;
	}

	if (ctx->buf_bytes > 0) {
   3388e:	f8b4 3208 	ldrh.w	r3, [r4, #520]	; 0x208
   33892:	b9f3      	cbnz	r3, 338d2 <flash_img_buffered_write+0x84>
		}
	}
#ifdef CONFIG_IMG_ERASE_PROGRESSIVELY
	/* erase the image trailer area if it was not erased */
	rc = flash_progressive_erase(ctx,
				BOOT_TRAILER_IMG_STATUS_OFFS(ctx->flash_area));
   33894:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
	rc = flash_progressive_erase(ctx,
   33898:	4620      	mov	r0, r4
				BOOT_TRAILER_IMG_STATUS_OFFS(ctx->flash_area));
   3389a:	6899      	ldr	r1, [r3, #8]
	rc = flash_progressive_erase(ctx,
   3389c:	3920      	subs	r1, #32
   3389e:	f7eb fe1f 	bl	1f4e0 <flash_progressive_erase>
	if (rc) {
   338a2:	4605      	mov	r5, r0
   338a4:	b9d8      	cbnz	r0, 338de <flash_img_buffered_write+0x90>
		return rc;
	}
#endif

	flash_area_close(ctx->flash_area);
   338a6:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
   338aa:	f000 f84f 	bl	3394c <flash_area_close>
	ctx->flash_area = NULL;
   338ae:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200

	return rc;
   338b2:	e014      	b.n	338de <flash_img_buffered_write+0x90>
   338b4:	465a      	mov	r2, fp
   338b6:	eb09 0107 	add.w	r1, r9, r7
   338ba:	4420      	add	r0, r4
   338bc:	f002 f924 	bl	35b08 <memcpy>
		rc = flash_sync(ctx);
   338c0:	4620      	mov	r0, r4
		ctx->buf_bytes = CONFIG_IMG_BLOCK_BUF_SIZE;
   338c2:	f8a4 a208 	strh.w	sl, [r4, #520]	; 0x208
		rc = flash_sync(ctx);
   338c6:	f7eb fe49 	bl	1f55c <flash_sync>
		if (rc) {
   338ca:	4605      	mov	r5, r0
   338cc:	b938      	cbnz	r0, 338de <flash_img_buffered_write+0x90>
		processed += buf_empty_bytes;
   338ce:	445f      	add	r7, fp
   338d0:	e7c6      	b.n	33860 <flash_img_buffered_write+0x12>
		rc = flash_sync(ctx);
   338d2:	4620      	mov	r0, r4
   338d4:	f7eb fe42 	bl	1f55c <flash_sync>
		if (rc) {
   338d8:	4605      	mov	r5, r0
   338da:	2800      	cmp	r0, #0
   338dc:	d0da      	beq.n	33894 <flash_img_buffered_write+0x46>
}
   338de:	4628      	mov	r0, r5
   338e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   338e4:	4645      	mov	r5, r8
   338e6:	e7fa      	b.n	338de <flash_img_buffered_write+0x90>

000338e8 <flash_img_bytes_written>:

size_t flash_img_bytes_written(struct flash_img_context *ctx)
{
	return ctx->bytes_written;
}
   338e8:	f8d0 0204 	ldr.w	r0, [r0, #516]	; 0x204
   338ec:	4770      	bx	lr

000338ee <flash_img_init>:

int flash_img_init(struct flash_img_context *ctx)
{
	ctx->bytes_written = 0;
   338ee:	2300      	movs	r3, #0
   338f0:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
	ctx->buf_bytes = 0U;
   338f4:	f8a0 3208 	strh.w	r3, [r0, #520]	; 0x208
#ifdef CONFIG_IMG_ERASE_PROGRESSIVELY
	ctx->off_last = -1;
   338f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif
	return flash_area_open(FLASH_AREA_IMAGE_SECONDARY,
   338fc:	f500 7100 	add.w	r1, r0, #512	; 0x200
	ctx->off_last = -1;
   33900:	f8c0 320c 	str.w	r3, [r0, #524]	; 0x20c
	return flash_area_open(FLASH_AREA_IMAGE_SECONDARY,
   33904:	2006      	movs	r0, #6
   33906:	f7eb bed9 	b.w	1f6bc <flash_area_open>

0003390a <z_impl_flash_write_protection_set>:
	return api->write_protection(dev, enable);
   3390a:	6843      	ldr	r3, [r0, #4]
   3390c:	68db      	ldr	r3, [r3, #12]
   3390e:	4718      	bx	r3

00033910 <get_sectors_cb>:
{
   33910:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   33912:	6802      	ldr	r2, [r0, #0]
   33914:	684c      	ldr	r4, [r1, #4]
   33916:	42a2      	cmp	r2, r4
   33918:	d316      	bcc.n	33948 <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   3391a:	688b      	ldr	r3, [r1, #8]
   3391c:	4423      	add	r3, r4
   3391e:	429a      	cmp	r2, r3
   33920:	d206      	bcs.n	33930 <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
   33922:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
   33926:	42ab      	cmp	r3, r5
   33928:	d304      	bcc.n	33934 <get_sectors_cb+0x24>
		data->status = -ENOMEM;
   3392a:	f06f 030b 	mvn.w	r3, #11
   3392e:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   33930:	2000      	movs	r0, #0
   33932:	e00a      	b.n	3394a <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   33934:	68cd      	ldr	r5, [r1, #12]
   33936:	1b12      	subs	r2, r2, r4
   33938:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   3393c:	6842      	ldr	r2, [r0, #4]
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   3393e:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
	data->ret_idx++;
   33942:	3301      	adds	r3, #1
	ret[data->ret_idx].fs_size = info->size;
   33944:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   33946:	610b      	str	r3, [r1, #16]
		*bail_value = true;
   33948:	2001      	movs	r0, #1
}
   3394a:	bd70      	pop	{r4, r5, r6, pc}

0003394c <flash_area_close>:
}
   3394c:	4770      	bx	lr

0003394e <flash_area_read>:
#endif /* CONFIG_FLASH_PAGE_LAYOUT */

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
   3394e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   33950:	461e      	mov	r6, r3
	struct device *dev;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   33952:	6883      	ldr	r3, [r0, #8]
{
   33954:	4605      	mov	r5, r0
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   33956:	428b      	cmp	r3, r1
{
   33958:	460c      	mov	r4, r1
   3395a:	9201      	str	r2, [sp, #4]
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   3395c:	d310      	bcc.n	33980 <flash_area_read+0x32>
   3395e:	1871      	adds	r1, r6, r1
   33960:	428b      	cmp	r3, r1
   33962:	d30d      	bcc.n	33980 <flash_area_read+0x32>
		return -EINVAL;
	}

	dev = device_get_binding(fa->fa_dev_name);
   33964:	68c0      	ldr	r0, [r0, #12]
   33966:	f7fa fe17 	bl	2e598 <z_impl_device_get_binding>

	return flash_read(dev, fa->fa_off + off, dst, len);
   3396a:	6869      	ldr	r1, [r5, #4]
   3396c:	4421      	add	r1, r4
	return api->read(dev, offset, data, len);
   3396e:	6843      	ldr	r3, [r0, #4]
   33970:	9a01      	ldr	r2, [sp, #4]
   33972:	681c      	ldr	r4, [r3, #0]
   33974:	4633      	mov	r3, r6
   33976:	46a4      	mov	ip, r4
}
   33978:	b002      	add	sp, #8
   3397a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3397e:	4760      	bx	ip
   33980:	f06f 0015 	mvn.w	r0, #21
   33984:	b002      	add	sp, #8
   33986:	bd70      	pop	{r4, r5, r6, pc}

00033988 <flash_area_write>:

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
   33988:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   3398c:	4698      	mov	r8, r3
	struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   3398e:	6883      	ldr	r3, [r0, #8]
{
   33990:	4607      	mov	r7, r0
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   33992:	428b      	cmp	r3, r1
{
   33994:	460d      	mov	r5, r1
   33996:	9201      	str	r2, [sp, #4]
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   33998:	d31c      	bcc.n	339d4 <flash_area_write+0x4c>
   3399a:	4441      	add	r1, r8
   3399c:	428b      	cmp	r3, r1
   3399e:	d319      	bcc.n	339d4 <flash_area_write+0x4c>
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   339a0:	68c0      	ldr	r0, [r0, #12]
   339a2:	f7fa fdf9 	bl	2e598 <z_impl_device_get_binding>
   339a6:	4606      	mov	r6, r0
	return z_impl_flash_write_protection_set(dev, enable);
   339a8:	2100      	movs	r1, #0
   339aa:	f7ff ffae 	bl	3390a <z_impl_flash_write_protection_set>

	rc = flash_write_protection_set(flash_dev, false);
	if (rc) {
   339ae:	4604      	mov	r4, r0
   339b0:	b960      	cbnz	r0, 339cc <flash_area_write+0x44>
		return rc;
	}

	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
   339b2:	6879      	ldr	r1, [r7, #4]
   339b4:	4429      	add	r1, r5
	return api->write(dev, offset, data, len);
   339b6:	6873      	ldr	r3, [r6, #4]
   339b8:	4630      	mov	r0, r6
   339ba:	685c      	ldr	r4, [r3, #4]
   339bc:	9a01      	ldr	r2, [sp, #4]
   339be:	4643      	mov	r3, r8
   339c0:	47a0      	blx	r4
   339c2:	4604      	mov	r4, r0
   339c4:	2101      	movs	r1, #1
   339c6:	4630      	mov	r0, r6
   339c8:	f7ff ff9f 	bl	3390a <z_impl_flash_write_protection_set>

	/* Ignore errors here - this does not affect write operation */
	(void) flash_write_protection_set(flash_dev, true);

	return rc;
}
   339cc:	4620      	mov	r0, r4
   339ce:	b002      	add	sp, #8
   339d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
   339d4:	f06f 0415 	mvn.w	r4, #21
   339d8:	e7f8      	b.n	339cc <flash_area_write+0x44>

000339da <flash_area_erase>:
int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
	struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   339da:	6883      	ldr	r3, [r0, #8]
{
   339dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   339e0:	428b      	cmp	r3, r1
{
   339e2:	4607      	mov	r7, r0
   339e4:	460d      	mov	r5, r1
   339e6:	4690      	mov	r8, r2
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   339e8:	d31a      	bcc.n	33a20 <flash_area_erase+0x46>
   339ea:	440a      	add	r2, r1
   339ec:	4293      	cmp	r3, r2
   339ee:	d317      	bcc.n	33a20 <flash_area_erase+0x46>
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   339f0:	68c0      	ldr	r0, [r0, #12]
   339f2:	f7fa fdd1 	bl	2e598 <z_impl_device_get_binding>
   339f6:	4606      	mov	r6, r0
   339f8:	2100      	movs	r1, #0
   339fa:	f7ff ff86 	bl	3390a <z_impl_flash_write_protection_set>

	rc = flash_write_protection_set(flash_dev, false);
	if (rc) {
   339fe:	4604      	mov	r4, r0
   33a00:	b958      	cbnz	r0, 33a1a <flash_area_erase+0x40>
		return rc;
	}

	rc = flash_erase(flash_dev, fa->fa_off + off, len);
   33a02:	6879      	ldr	r1, [r7, #4]
   33a04:	4429      	add	r1, r5
	return api->erase(dev, offset, size);
   33a06:	6873      	ldr	r3, [r6, #4]
   33a08:	4642      	mov	r2, r8
   33a0a:	4630      	mov	r0, r6
   33a0c:	689b      	ldr	r3, [r3, #8]
   33a0e:	4798      	blx	r3
   33a10:	4604      	mov	r4, r0
   33a12:	2101      	movs	r1, #1
   33a14:	4630      	mov	r0, r6
   33a16:	f7ff ff78 	bl	3390a <z_impl_flash_write_protection_set>

	/* Ignore errors here - this does not affect write operation */
	(void) flash_write_protection_set(flash_dev, true);

	return rc;
}
   33a1a:	4620      	mov	r0, r4
   33a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
   33a20:	f06f 0415 	mvn.w	r4, #21
   33a24:	e7f9      	b.n	33a1a <flash_area_erase+0x40>

00033a26 <flash_area_align>:

u8_t flash_area_align(const struct flash_area *fa)
{
   33a26:	b508      	push	{r3, lr}
	struct device *dev;

	dev = device_get_binding(fa->fa_dev_name);
   33a28:	68c0      	ldr	r0, [r0, #12]
   33a2a:	f7fa fdb5 	bl	2e598 <z_impl_device_get_binding>
	return api->write_block_size;
   33a2e:	6843      	ldr	r3, [r0, #4]

	return flash_get_write_block_size(dev);
}
   33a30:	7d18      	ldrb	r0, [r3, #20]
   33a32:	bd08      	pop	{r3, pc}

00033a34 <flash_area_get_device>:
	return 1;
}

struct device *flash_area_get_device(const struct flash_area *fa)
{
	return device_get_binding(fa->fa_dev_name);
   33a34:	68c0      	ldr	r0, [r0, #12]
   33a36:	f7fa bdaf 	b.w	2e598 <z_impl_device_get_binding>

00033a3a <settings_load>:
	return settings_load_subtree(NULL);
   33a3a:	2000      	movs	r0, #0
   33a3c:	f7eb bec2 	b.w	1f7c4 <settings_load_subtree>

00033a40 <settings_name_steq>:
{
   33a40:	b530      	push	{r4, r5, lr}
	if (next) {
   33a42:	b10a      	cbz	r2, 33a48 <settings_name_steq+0x8>
		*next = NULL;
   33a44:	2300      	movs	r3, #0
   33a46:	6013      	str	r3, [r2, #0]
	if ((!name) || (!key)) {
   33a48:	b190      	cbz	r0, 33a70 <settings_name_steq+0x30>
   33a4a:	b151      	cbz	r1, 33a62 <settings_name_steq+0x22>
   33a4c:	3901      	subs	r1, #1
	while ((*key != '\0') && (*key == *name) &&
   33a4e:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   33a52:	4604      	mov	r4, r0
   33a54:	f810 3b01 	ldrb.w	r3, [r0], #1
   33a58:	b15d      	cbz	r5, 33a72 <settings_name_steq+0x32>
   33a5a:	429d      	cmp	r5, r3
   33a5c:	d101      	bne.n	33a62 <settings_name_steq+0x22>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   33a5e:	2d3d      	cmp	r5, #61	; 0x3d
   33a60:	d1f5      	bne.n	33a4e <settings_name_steq+0xe>
	return 0;
   33a62:	2000      	movs	r0, #0
   33a64:	e004      	b.n	33a70 <settings_name_steq+0x30>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   33a66:	2b3d      	cmp	r3, #61	; 0x3d
   33a68:	d008      	beq.n	33a7c <settings_name_steq+0x3c>
   33a6a:	fab3 f083 	clz	r0, r3
   33a6e:	0940      	lsrs	r0, r0, #5
}
   33a70:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   33a72:	2b2f      	cmp	r3, #47	; 0x2f
   33a74:	d1f7      	bne.n	33a66 <settings_name_steq+0x26>
		if (next) {
   33a76:	b10a      	cbz	r2, 33a7c <settings_name_steq+0x3c>
			*next = name + 1;
   33a78:	3401      	adds	r4, #1
   33a7a:	6014      	str	r4, [r2, #0]
		return 1;
   33a7c:	2001      	movs	r0, #1
   33a7e:	e7f7      	b.n	33a70 <settings_name_steq+0x30>

00033a80 <settings_nvs_read_fn>:
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   33a80:	4613      	mov	r3, r2
{
   33a82:	b510      	push	{r4, lr}
   33a84:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   33a86:	460a      	mov	r2, r1
   33a88:	8881      	ldrh	r1, [r0, #4]
   33a8a:	6800      	ldr	r0, [r0, #0]
   33a8c:	f7ff fe9b 	bl	337c6 <nvs_read>
}
   33a90:	42a0      	cmp	r0, r4
   33a92:	bfa8      	it	ge
   33a94:	4620      	movge	r0, r4
   33a96:	bd10      	pop	{r4, pc}

00033a98 <settings_nvs_save>:
{
   33a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33a9c:	b097      	sub	sp, #92	; 0x5c
   33a9e:	4604      	mov	r4, r0
   33aa0:	469b      	mov	fp, r3
	if (!name) {
   33aa2:	4689      	mov	r9, r1
{
   33aa4:	9201      	str	r2, [sp, #4]
	if (!name) {
   33aa6:	2900      	cmp	r1, #0
   33aa8:	d067      	beq.n	33b7a <settings_nvs_save+0xe2>
	delete = ((value == NULL) || (val_len == 0));
   33aaa:	b1da      	cbz	r2, 33ae4 <settings_nvs_save+0x4c>
   33aac:	fabb f78b 	clz	r7, fp
   33ab0:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   33ab2:	8ea5      	ldrh	r5, [r4, #52]	; 0x34
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   33ab4:	f104 0a08 	add.w	sl, r4, #8
	name_id = cf->last_name_id + 1;
   33ab8:	3501      	adds	r5, #1
   33aba:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   33abc:	46a8      	mov	r8, r5
		name_id--;
   33abe:	1e6e      	subs	r6, r5, #1
   33ac0:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   33ac2:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   33ac6:	d02e      	beq.n	33b26 <settings_nvs_save+0x8e>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   33ac8:	234a      	movs	r3, #74	; 0x4a
   33aca:	4631      	mov	r1, r6
   33acc:	4650      	mov	r0, sl
   33ace:	aa03      	add	r2, sp, #12
   33ad0:	f7ff fe79 	bl	337c6 <nvs_read>
		if (rc < 0) {
   33ad4:	2800      	cmp	r0, #0
   33ad6:	da07      	bge.n	33ae8 <settings_nvs_save+0x50>
			if (rc == -ENOENT) {
   33ad8:	f110 0f02 	cmn.w	r0, #2
   33adc:	bf08      	it	eq
   33ade:	46b0      	moveq	r8, r6
   33ae0:	4635      	mov	r5, r6
   33ae2:	e7ec      	b.n	33abe <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   33ae4:	2701      	movs	r7, #1
   33ae6:	e7e4      	b.n	33ab2 <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   33ae8:	ab16      	add	r3, sp, #88	; 0x58
   33aea:	4418      	add	r0, r3
   33aec:	2300      	movs	r3, #0
		if (strcmp(name, rdname)) {
   33aee:	a903      	add	r1, sp, #12
		rdname[rc] = '\0';
   33af0:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   33af4:	4648      	mov	r0, r9
   33af6:	f7e9 faf1 	bl	1d0dc <strcmp>
   33afa:	2800      	cmp	r0, #0
   33afc:	d1f0      	bne.n	33ae0 <settings_nvs_save+0x48>
		if ((delete) && (name_id == cf->last_name_id)) {
   33afe:	2f00      	cmp	r7, #0
   33b00:	d039      	beq.n	33b76 <settings_nvs_save+0xde>
   33b02:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   33b04:	42b3      	cmp	r3, r6
   33b06:	d140      	bne.n	33b8a <settings_nvs_save+0xf2>
			cf->last_name_id--;
   33b08:	4622      	mov	r2, r4
   33b0a:	1e73      	subs	r3, r6, #1
   33b0c:	f822 3f34 	strh.w	r3, [r2, #52]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   33b10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   33b14:	2302      	movs	r3, #2
   33b16:	4650      	mov	r0, sl
   33b18:	f7eb fb54 	bl	1f1c4 <nvs_write>
			if (rc < 0) {
   33b1c:	2800      	cmp	r0, #0
   33b1e:	da34      	bge.n	33b8a <settings_nvs_save+0xf2>
}
   33b20:	b017      	add	sp, #92	; 0x5c
   33b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (delete) {
   33b26:	bb5f      	cbnz	r7, 33b80 <settings_nvs_save+0xe8>
	write_name = true;
   33b28:	2701      	movs	r7, #1
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   33b2a:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   33b2e:	d029      	beq.n	33b84 <settings_nvs_save+0xec>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   33b30:	f104 0508 	add.w	r5, r4, #8
   33b34:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   33b38:	465b      	mov	r3, fp
   33b3a:	4628      	mov	r0, r5
   33b3c:	9a01      	ldr	r2, [sp, #4]
   33b3e:	b289      	uxth	r1, r1
   33b40:	f7eb fb40 	bl	1f1c4 <nvs_write>
	if (write_name) {
   33b44:	b157      	cbz	r7, 33b5c <settings_nvs_save+0xc4>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   33b46:	4648      	mov	r0, r9
   33b48:	f7e9 fad2 	bl	1d0f0 <strlen>
   33b4c:	464a      	mov	r2, r9
   33b4e:	4603      	mov	r3, r0
   33b50:	4641      	mov	r1, r8
   33b52:	4628      	mov	r0, r5
   33b54:	f7eb fb36 	bl	1f1c4 <nvs_write>
		if (rc < 0) {
   33b58:	2800      	cmp	r0, #0
   33b5a:	dbe1      	blt.n	33b20 <settings_nvs_save+0x88>
	if (write_name_id > cf->last_name_id) {
   33b5c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   33b5e:	4543      	cmp	r3, r8
   33b60:	d220      	bcs.n	33ba4 <settings_nvs_save+0x10c>
		cf->last_name_id = write_name_id;
   33b62:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   33b64:	2302      	movs	r3, #2
   33b66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   33b6a:	4628      	mov	r0, r5
		cf->last_name_id = write_name_id;
   33b6c:	f822 8f34 	strh.w	r8, [r2, #52]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   33b70:	f7eb fb28 	bl	1f1c4 <nvs_write>
   33b74:	e016      	b.n	33ba4 <settings_nvs_save+0x10c>
   33b76:	46b0      	mov	r8, r6
   33b78:	e7d7      	b.n	33b2a <settings_nvs_save+0x92>
		return -EINVAL;
   33b7a:	f06f 0015 	mvn.w	r0, #21
   33b7e:	e7cf      	b.n	33b20 <settings_nvs_save+0x88>
		return 0;
   33b80:	2000      	movs	r0, #0
   33b82:	e7cd      	b.n	33b20 <settings_nvs_save+0x88>
		return -ENOMEM;
   33b84:	f06f 000b 	mvn.w	r0, #11
   33b88:	e7ca      	b.n	33b20 <settings_nvs_save+0x88>
			rc = nvs_delete(&cf->cf_nvs, name_id);
   33b8a:	4631      	mov	r1, r6
   33b8c:	4650      	mov	r0, sl
   33b8e:	f7ff fe16 	bl	337be <nvs_delete>
			if (rc >= 0) {
   33b92:	2800      	cmp	r0, #0
   33b94:	dbc4      	blt.n	33b20 <settings_nvs_save+0x88>
				rc = nvs_delete(&cf->cf_nvs, name_id +
   33b96:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   33b9a:	313f      	adds	r1, #63	; 0x3f
   33b9c:	4650      	mov	r0, sl
   33b9e:	b289      	uxth	r1, r1
   33ba0:	f7ff fe0d 	bl	337be <nvs_delete>
	if (rc < 0) {
   33ba4:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   33ba8:	e7ba      	b.n	33b20 <settings_nvs_save+0x88>

00033baa <settings_nvs_backend_init>:
{
   33baa:	b573      	push	{r0, r1, r4, r5, r6, lr}
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   33bac:	f100 0608 	add.w	r6, r0, #8
   33bb0:	6b81      	ldr	r1, [r0, #56]	; 0x38
{
   33bb2:	4604      	mov	r4, r0
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   33bb4:	4630      	mov	r0, r6
   33bb6:	f7eb f9e5 	bl	1ef84 <nvs_init>
	if (rc) {
   33bba:	4605      	mov	r5, r0
   33bbc:	b970      	cbnz	r0, 33bdc <settings_nvs_backend_init+0x32>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   33bbe:	2302      	movs	r3, #2
   33bc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   33bc4:	4630      	mov	r0, r6
   33bc6:	f10d 0206 	add.w	r2, sp, #6
   33bca:	f7ff fdfc 	bl	337c6 <nvs_read>
	if (rc < 0) {
   33bce:	2800      	cmp	r0, #0
		cf->last_name_id = NVS_NAMECNT_ID;
   33bd0:	bfb4      	ite	lt
   33bd2:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
		cf->last_name_id = last_name_id;
   33bd6:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
   33bda:	86a3      	strh	r3, [r4, #52]	; 0x34
}
   33bdc:	4628      	mov	r0, r5
   33bde:	b002      	add	sp, #8
   33be0:	bd70      	pop	{r4, r5, r6, pc}

00033be2 <clkstarted_handle>:
{
   33be2:	b538      	push	{r3, r4, r5, lr}
	sub_data->started = true;
   33be4:	230c      	movs	r3, #12
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   33be6:	6884      	ldr	r4, [r0, #8]
{
   33be8:	4605      	mov	r5, r0
	sub_data->started = true;
   33bea:	fb03 4401 	mla	r4, r3, r1, r4
   33bee:	2301      	movs	r3, #1
   33bf0:	7263      	strb	r3, [r4, #9]
	__asm__ volatile(
   33bf2:	f04f 0320 	mov.w	r3, #32
   33bf6:	f3ef 8111 	mrs	r1, BASEPRI
   33bfa:	f383 8811 	msr	BASEPRI, r3
   33bfe:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   33c02:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   33c04:	b12b      	cbz	r3, 33c12 <clkstarted_handle+0x30>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   33c06:	6860      	ldr	r0, [r4, #4]
   33c08:	681a      	ldr	r2, [r3, #0]
   33c0a:	4283      	cmp	r3, r0
	list->head = node;
   33c0c:	6022      	str	r2, [r4, #0]
	list->tail = node;
   33c0e:	bf08      	it	eq
   33c10:	6062      	streq	r2, [r4, #4]
	__asm__ volatile(
   33c12:	f381 8811 	msr	BASEPRI, r1
   33c16:	f3bf 8f6f 	isb	sy
	while ((async_data = list_get(&sub_data->list)) != NULL) {
   33c1a:	b903      	cbnz	r3, 33c1e <clkstarted_handle+0x3c>
}
   33c1c:	bd38      	pop	{r3, r4, r5, pc}
		async_data->cb(dev, async_data->user_data);
   33c1e:	4628      	mov	r0, r5
   33c20:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   33c24:	4790      	blx	r2
   33c26:	e7e4      	b.n	33bf2 <clkstarted_handle+0x10>

00033c28 <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
   33c28:	2200      	movs	r2, #0
   33c2a:	f7ec b88f 	b.w	1fd4c <clock_async_start>

00033c2e <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   33c2e:	4770      	bx	lr

00033c30 <sys_clock_disable>:
   33c30:	4770      	bx	lr

00033c32 <z_irq_spurious>:
	z_arm_reserved();
   33c32:	f7ec bcfd 	b.w	20630 <z_arm_bus_fault>

00033c36 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   33c36:	6d83      	ldr	r3, [r0, #88]	; 0x58
   33c38:	f383 880b 	msr	PSPLIM, r3
}
   33c3c:	4770      	bx	lr

00033c3e <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   33c3e:	4601      	mov	r1, r0
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
   33c40:	6800      	ldr	r0, [r0, #0]
   33c42:	f7ec bcff 	b.w	20644 <z_arm_fatal_error>

00033c46 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   33c46:	b508      	push	{r3, lr}
	handler();
   33c48:	f7ec fd62 	bl	20710 <z_SysNmiOnReset>
	z_arm_exc_exit();
}
   33c4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
   33c50:	f7ec bb78 	b.w	20344 <z_arm_exc_exit>

00033c54 <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   33c54:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
   33c56:	2100      	movs	r1, #0
   33c58:	a801      	add	r0, sp, #4
   33c5a:	f7ed fa25 	bl	210a8 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
   33c5e:	b003      	add	sp, #12
   33c60:	f85d fb04 	ldr.w	pc, [sp], #4

00033c64 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   33c64:	e840 f000 	tt	r0, r0
   33c68:	b2c3      	uxtb	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   33c6a:	f410 3f80 	tst.w	r0, #65536	; 0x10000
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   33c6e:	bf14      	ite	ne
   33c70:	4618      	movne	r0, r3
   33c72:	f06f 0015 	mvneq.w	r0, #21
   33c76:	4770      	bx	lr

00033c78 <_stdout_hook_default>:
}
   33c78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   33c7c:	4770      	bx	lr

00033c7e <_stdin_hook_default>:
}
   33c7e:	2000      	movs	r0, #0
   33c80:	4770      	bx	lr

00033c82 <_read>:
{
   33c82:	4608      	mov	r0, r1
	return z_impl_zephyr_read_stdin(buf, nbytes);
   33c84:	4611      	mov	r1, r2
   33c86:	f7ed ba51 	b.w	2112c <z_impl_zephyr_read_stdin>

00033c8a <_write>:
{
   33c8a:	4608      	mov	r0, r1
	return z_impl_zephyr_write_stdout(buf, nbytes);
   33c8c:	4611      	mov	r1, r2
   33c8e:	f7ed ba61 	b.w	21154 <z_impl_zephyr_write_stdout>

00033c92 <_close>:
   33c92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   33c96:	4770      	bx	lr

00033c98 <_lseek>:
}
   33c98:	2000      	movs	r0, #0
   33c9a:	4770      	bx	lr

00033c9c <_isatty>:
}
   33c9c:	2001      	movs	r0, #1
   33c9e:	4770      	bx	lr

00033ca0 <_kill>:
}
   33ca0:	2000      	movs	r0, #0
   33ca2:	4770      	bx	lr

00033ca4 <_getpid>:
}
   33ca4:	2000      	movs	r0, #0
   33ca6:	4770      	bx	lr

00033ca8 <_fstat>:
	st->st_mode = S_IFCHR;
   33ca8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   33cac:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   33cae:	604b      	str	r3, [r1, #4]
}
   33cb0:	4770      	bx	lr

00033cb2 <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   33cb2:	f7fa bc97 	b.w	2e5e4 <z_impl_z_errno>

00033cb6 <net_init>:

	return status;
}

static int net_init(struct device *unused)
{
   33cb6:	b508      	push	{r3, lr}
	net_if_init();
   33cb8:	f7ed fb12 	bl	212e0 <net_if_init>
	net_if_post_init();
   33cbc:	f7ed fb24 	bl	21308 <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   33cc0:	2000      	movs	r0, #0
   33cc2:	bd08      	pop	{r3, pc}

00033cc4 <net_if_l2>:
	if (!iface || !iface->if_dev) {
   33cc4:	b110      	cbz	r0, 33ccc <net_if_l2+0x8>
   33cc6:	6800      	ldr	r0, [r0, #0]
   33cc8:	b100      	cbz	r0, 33ccc <net_if_l2+0x8>
	return iface->if_dev->l2;
   33cca:	6840      	ldr	r0, [r0, #4]
}
   33ccc:	4770      	bx	lr

00033cce <l2_flags_get>:
{
   33cce:	b510      	push	{r4, lr}
   33cd0:	4603      	mov	r3, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   33cd2:	f7ff fff7 	bl	33cc4 <net_if_l2>
   33cd6:	b128      	cbz	r0, 33ce4 <l2_flags_get+0x16>
   33cd8:	68c2      	ldr	r2, [r0, #12]
   33cda:	b11a      	cbz	r2, 33ce4 <l2_flags_get+0x16>
}
   33cdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   33ce0:	4618      	mov	r0, r3
   33ce2:	4710      	bx	r2
}
   33ce4:	2000      	movs	r0, #0
   33ce6:	bd10      	pop	{r4, pc}

00033ce8 <net_byte_to_hex>:
{
   33ce8:	b530      	push	{r4, r5, lr}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   33cea:	090d      	lsrs	r5, r1, #4
		if (i == 0 && !pad && !val) {
   33cec:	b1bb      	cbz	r3, 33d1e <net_byte_to_hex+0x36>
		if (val < 10) {
   33cee:	2d09      	cmp	r5, #9
			*ptr++ = (char) (val - 10 + base);
   33cf0:	b26b      	sxtb	r3, r5
   33cf2:	bf86      	itte	hi
   33cf4:	f1a2 050a 	subhi.w	r5, r2, #10
   33cf8:	195b      	addhi	r3, r3, r5
			*ptr++ = (char) (val + '0');
   33cfa:	3330      	addls	r3, #48	; 0x30
   33cfc:	1c44      	adds	r4, r0, #1
   33cfe:	7003      	strb	r3, [r0, #0]
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   33d00:	f001 030f 	and.w	r3, r1, #15
		if (val < 10) {
   33d04:	4619      	mov	r1, r3
   33d06:	2b09      	cmp	r3, #9
	*ptr = '\0';
   33d08:	f04f 0300 	mov.w	r3, #0
			*ptr++ = (char) (val - 10 + base);
   33d0c:	bf83      	ittte	hi
   33d0e:	3a0a      	subhi	r2, #10
   33d10:	1889      	addhi	r1, r1, r2
   33d12:	b2c9      	uxtbhi	r1, r1
			*ptr++ = (char) (val + '0');
   33d14:	3130      	addls	r1, #48	; 0x30
   33d16:	7021      	strb	r1, [r4, #0]
	*ptr = '\0';
   33d18:	7063      	strb	r3, [r4, #1]
   33d1a:	1c60      	adds	r0, r4, #1
}
   33d1c:	bd30      	pop	{r4, r5, pc}
		if (i == 0 && !pad && !val) {
   33d1e:	2d00      	cmp	r5, #0
   33d20:	d1e5      	bne.n	33cee <net_byte_to_hex+0x6>
   33d22:	4604      	mov	r4, r0
   33d24:	e7ec      	b.n	33d00 <net_byte_to_hex+0x18>

00033d26 <unpack_uint16>:
 */
static int unpack_uint16(struct buf_ctx *buf, u16_t *val)
{
	MQTT_TRC(">> cur:%p, end:%p", buf->cur, buf->end);

	if ((buf->end - buf->cur) < sizeof(u16_t)) {
   33d26:	e9d0 2300 	ldrd	r2, r3, [r0]
   33d2a:	1a9b      	subs	r3, r3, r2
   33d2c:	2b01      	cmp	r3, #1
{
   33d2e:	b510      	push	{r4, lr}
	if ((buf->end - buf->cur) < sizeof(u16_t)) {
   33d30:	d90c      	bls.n	33d4c <unpack_uint16+0x26>
		return -EINVAL;
	}

	*val = *(buf->cur++) << 8; /* MSB */
   33d32:	4614      	mov	r4, r2
   33d34:	1c53      	adds	r3, r2, #1
   33d36:	6003      	str	r3, [r0, #0]
   33d38:	f814 3b02 	ldrb.w	r3, [r4], #2
   33d3c:	021b      	lsls	r3, r3, #8
   33d3e:	800b      	strh	r3, [r1, #0]
	*val |= *(buf->cur++); /* LSB */
   33d40:	6004      	str	r4, [r0, #0]

	MQTT_TRC("<< val:%04x", *val);

	return 0;
   33d42:	2000      	movs	r0, #0
	*val |= *(buf->cur++); /* LSB */
   33d44:	7852      	ldrb	r2, [r2, #1]
   33d46:	4313      	orrs	r3, r2
   33d48:	800b      	strh	r3, [r1, #0]
}
   33d4a:	bd10      	pop	{r4, pc}
		return -EINVAL;
   33d4c:	f06f 0015 	mvn.w	r0, #21
   33d50:	e7fb      	b.n	33d4a <unpack_uint16+0x24>

00033d52 <packet_length_decode>:
int packet_length_decode(struct buf_ctx *buf, u32_t *length)
{
	u8_t shift = 0U;
	u8_t bytes = 0U;

	*length = 0U;
   33d52:	2300      	movs	r3, #0
{
   33d54:	b5f0      	push	{r4, r5, r6, r7, lr}
	do {
		if (bytes > MQTT_MAX_LENGTH_BYTES) {
			return -EINVAL;
		}

		if (buf->cur >= buf->end) {
   33d56:	6847      	ldr	r7, [r0, #4]
	*length = 0U;
   33d58:	600b      	str	r3, [r1, #0]
		if (buf->cur >= buf->end) {
   33d5a:	6804      	ldr	r4, [r0, #0]
   33d5c:	42bc      	cmp	r4, r7
   33d5e:	d215      	bcs.n	33d8c <packet_length_decode+0x3a>
			return -EAGAIN;
		}

		*length += ((u32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   33d60:	4625      	mov	r5, r4
   33d62:	f815 2b01 	ldrb.w	r2, [r5], #1
   33d66:	680e      	ldr	r6, [r1, #0]
   33d68:	f002 027f 	and.w	r2, r2, #127	; 0x7f
								<< shift;
   33d6c:	409a      	lsls	r2, r3
		*length += ((u32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   33d6e:	4432      	add	r2, r6
   33d70:	600a      	str	r2, [r1, #0]
		shift += MQTT_LENGTH_SHIFT;
		bytes++;
	} while ((*(buf->cur++) & MQTT_LENGTH_CONTINUATION_BIT) != 0U);
   33d72:	6005      	str	r5, [r0, #0]
   33d74:	f994 2000 	ldrsb.w	r2, [r4]
   33d78:	2a00      	cmp	r2, #0
   33d7a:	db01      	blt.n	33d80 <packet_length_decode+0x2e>

	MQTT_TRC("length:0x%08x", *length);

	return 0;
   33d7c:	2000      	movs	r0, #0
}
   33d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (bytes > MQTT_MAX_LENGTH_BYTES) {
   33d80:	3307      	adds	r3, #7
   33d82:	2b23      	cmp	r3, #35	; 0x23
   33d84:	d1e9      	bne.n	33d5a <packet_length_decode+0x8>
			return -EINVAL;
   33d86:	f06f 0015 	mvn.w	r0, #21
   33d8a:	e7f8      	b.n	33d7e <packet_length_decode+0x2c>
			return -EAGAIN;
   33d8c:	f06f 000a 	mvn.w	r0, #10
   33d90:	e7f5      	b.n	33d7e <packet_length_decode+0x2c>

00033d92 <fixed_header_decode>:

int fixed_header_decode(struct buf_ctx *buf, u8_t *type_and_flags,
			u32_t *length)
{
   33d92:	b430      	push	{r4, r5}
   33d94:	460c      	mov	r4, r1
   33d96:	4611      	mov	r1, r2
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   33d98:	e9d0 2500 	ldrd	r2, r5, [r0]
   33d9c:	4295      	cmp	r5, r2
   33d9e:	d006      	beq.n	33dae <fixed_header_decode+0x1c>
	*val = *(buf->cur++);
   33da0:	1c55      	adds	r5, r2, #1
   33da2:	6005      	str	r5, [r0, #0]
   33da4:	7813      	ldrb	r3, [r2, #0]
   33da6:	7023      	strb	r3, [r4, #0]
	if (err_code != 0) {
		return err_code;
	}

	return packet_length_decode(buf, length);
}
   33da8:	bc30      	pop	{r4, r5}
	return packet_length_decode(buf, length);
   33daa:	f7ff bfd2 	b.w	33d52 <packet_length_decode>
}
   33dae:	f06f 0015 	mvn.w	r0, #21
   33db2:	bc30      	pop	{r4, r5}
   33db4:	4770      	bx	lr

00033db6 <connect_ack_decode>:

int connect_ack_decode(const struct mqtt_client *client, struct buf_ctx *buf,
		       struct mqtt_connack_param *param)
{
   33db6:	b530      	push	{r4, r5, lr}
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   33db8:	e9d1 3500 	ldrd	r3, r5, [r1]
   33dbc:	429d      	cmp	r5, r3
   33dbe:	d102      	bne.n	33dc6 <connect_ack_decode+0x10>
		return -EINVAL;
   33dc0:	f06f 0015 	mvn.w	r0, #21
	}

	param->return_code = (enum mqtt_conn_return_code)ret_code;

	return 0;
}
   33dc4:	bd30      	pop	{r4, r5, pc}
	*val = *(buf->cur++);
   33dc6:	1c5c      	adds	r4, r3, #1
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   33dc8:	42a5      	cmp	r5, r4
	*val = *(buf->cur++);
   33dca:	600c      	str	r4, [r1, #0]
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   33dcc:	d0f8      	beq.n	33dc0 <connect_ack_decode+0xa>
	*val = *(buf->cur++);
   33dce:	461d      	mov	r5, r3
   33dd0:	f815 4b02 	ldrb.w	r4, [r5], #2
   33dd4:	600d      	str	r5, [r1, #0]
   33dd6:	7859      	ldrb	r1, [r3, #1]
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   33dd8:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
	return 0;
   33ddc:	2000      	movs	r0, #0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   33dde:	2b04      	cmp	r3, #4
			flags & MQTT_CONNACK_FLAG_SESSION_PRESENT;
   33de0:	bf04      	itt	eq
   33de2:	f004 0301 	andeq.w	r3, r4, #1
		param->session_present_flag =
   33de6:	7013      	strbeq	r3, [r2, #0]
	param->return_code = (enum mqtt_conn_return_code)ret_code;
   33de8:	7051      	strb	r1, [r2, #1]
	return 0;
   33dea:	e7eb      	b.n	33dc4 <connect_ack_decode+0xe>

00033dec <publish_decode>:

int publish_decode(u8_t flags, u32_t var_length, struct buf_ctx *buf,
		   struct mqtt_publish_param *param)
{
   33dec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   33df0:	461c      	mov	r4, r3
   33df2:	4616      	mov	r6, r2
	int err_code;
	u32_t var_header_length;

	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   33df4:	7da2      	ldrb	r2, [r4, #22]
   33df6:	0043      	lsls	r3, r0, #1
   33df8:	f022 0203 	bic.w	r2, r2, #3
   33dfc:	f003 0302 	and.w	r3, r3, #2
   33e00:	4313      	orrs	r3, r2
	param->retain_flag = flags & MQTT_HEADER_RETAIN_MASK;
	param->message.topic.qos = ((flags & MQTT_HEADER_QOS_MASK) >> 1);
   33e02:	f3c0 0041 	ubfx	r0, r0, #1, #2
   33e06:	7220      	strb	r0, [r4, #8]
{
   33e08:	4688      	mov	r8, r1
	err_code = unpack_uint16(buf, &utf8_strlen);
   33e0a:	4630      	mov	r0, r6
	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   33e0c:	75a3      	strb	r3, [r4, #22]
	err_code = unpack_uint16(buf, &utf8_strlen);
   33e0e:	f10d 0106 	add.w	r1, sp, #6
   33e12:	f7ff ff88 	bl	33d26 <unpack_uint16>
	if (err_code != 0) {
   33e16:	4607      	mov	r7, r0
   33e18:	b940      	cbnz	r0, 33e2c <publish_decode+0x40>
	if ((buf->end - buf->cur) < utf8_strlen) {
   33e1a:	6833      	ldr	r3, [r6, #0]
   33e1c:	6872      	ldr	r2, [r6, #4]
   33e1e:	f8bd 5006 	ldrh.w	r5, [sp, #6]
   33e22:	1ad2      	subs	r2, r2, r3
   33e24:	42aa      	cmp	r2, r5
   33e26:	da05      	bge.n	33e34 <publish_decode+0x48>
		return -EINVAL;
   33e28:	f06f 0715 	mvn.w	r7, #21

	param->message.payload.data = NULL;
	param->message.payload.len = var_length - var_header_length;

	return 0;
}
   33e2c:	4638      	mov	r0, r7
   33e2e:	b002      	add	sp, #8
   33e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	str->size = utf8_strlen;
   33e34:	6065      	str	r5, [r4, #4]
	if (utf8_strlen) {
   33e36:	b15d      	cbz	r5, 33e50 <publish_decode+0x64>
		str->utf8 = buf->cur;
   33e38:	6023      	str	r3, [r4, #0]
		buf->cur += utf8_strlen;
   33e3a:	442b      	add	r3, r5
   33e3c:	6033      	str	r3, [r6, #0]
	if (param->message.topic.qos > MQTT_QOS_0_AT_MOST_ONCE) {
   33e3e:	7a23      	ldrb	r3, [r4, #8]
   33e40:	b943      	cbnz	r3, 33e54 <publish_decode+0x68>
	var_header_length = param->message.topic.topic.size + sizeof(u16_t);
   33e42:	3502      	adds	r5, #2
	param->message.payload.data = NULL;
   33e44:	2300      	movs	r3, #0
	param->message.payload.len = var_length - var_header_length;
   33e46:	eba8 0505 	sub.w	r5, r8, r5
	param->message.payload.data = NULL;
   33e4a:	60e3      	str	r3, [r4, #12]
	param->message.payload.len = var_length - var_header_length;
   33e4c:	6125      	str	r5, [r4, #16]
	return 0;
   33e4e:	e7ed      	b.n	33e2c <publish_decode+0x40>
		str->utf8 = NULL;
   33e50:	6025      	str	r5, [r4, #0]
	if (err_code != 0) {
   33e52:	e7f4      	b.n	33e3e <publish_decode+0x52>
		err_code = unpack_uint16(buf, &param->message_id);
   33e54:	4630      	mov	r0, r6
   33e56:	f104 0114 	add.w	r1, r4, #20
   33e5a:	f7ff ff64 	bl	33d26 <unpack_uint16>
		if (err_code != 0) {
   33e5e:	b908      	cbnz	r0, 33e64 <publish_decode+0x78>
		var_header_length += sizeof(u16_t);
   33e60:	3504      	adds	r5, #4
   33e62:	e7ef      	b.n	33e44 <publish_decode+0x58>
   33e64:	4607      	mov	r7, r0
   33e66:	e7e1      	b.n	33e2c <publish_decode+0x40>

00033e68 <publish_ack_decode>:

int publish_ack_decode(struct buf_ctx *buf, struct mqtt_puback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   33e68:	f7ff bf5d 	b.w	33d26 <unpack_uint16>

00033e6c <publish_receive_decode>:
}

int publish_receive_decode(struct buf_ctx *buf, struct mqtt_pubrec_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   33e6c:	f7ff bf5b 	b.w	33d26 <unpack_uint16>

00033e70 <publish_release_decode>:
}

int publish_release_decode(struct buf_ctx *buf, struct mqtt_pubrel_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   33e70:	f7ff bf59 	b.w	33d26 <unpack_uint16>

00033e74 <publish_complete_decode>:
}

int publish_complete_decode(struct buf_ctx *buf,
			    struct mqtt_pubcomp_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   33e74:	f7ff bf57 	b.w	33d26 <unpack_uint16>

00033e78 <subscribe_ack_decode>:
}

int subscribe_ack_decode(struct buf_ctx *buf, struct mqtt_suback_param *param)
{
   33e78:	b538      	push	{r3, r4, r5, lr}
   33e7a:	4605      	mov	r5, r0
   33e7c:	460c      	mov	r4, r1
	int err_code;

	err_code = unpack_uint16(buf, &param->message_id);
   33e7e:	f7ff ff52 	bl	33d26 <unpack_uint16>
	if (err_code != 0) {
   33e82:	b930      	cbnz	r0, 33e92 <subscribe_ack_decode+0x1a>
		return err_code;
	}

	return unpack_data(buf->end - buf->cur, buf, &param->return_codes);
   33e84:	e9d5 2300 	ldrd	r2, r3, [r5]
   33e88:	1a99      	subs	r1, r3, r2
	str->len = length;
   33e8a:	60a1      	str	r1, [r4, #8]
	if (length > 0) {
   33e8c:	b111      	cbz	r1, 33e94 <subscribe_ack_decode+0x1c>
		str->data = buf->cur;
   33e8e:	6062      	str	r2, [r4, #4]
		buf->cur += length;
   33e90:	602b      	str	r3, [r5, #0]
}
   33e92:	bd38      	pop	{r3, r4, r5, pc}
		str->data = NULL;
   33e94:	6060      	str	r0, [r4, #4]
   33e96:	e7fc      	b.n	33e92 <subscribe_ack_decode+0x1a>

00033e98 <unsubscribe_ack_decode>:

int unsubscribe_ack_decode(struct buf_ctx *buf,
			   struct mqtt_unsuback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   33e98:	f7ff bf45 	b.w	33d26 <unpack_uint16>

00033e9c <pack_uint16>:
	if ((buf->end - buf->cur) < sizeof(u16_t)) {
   33e9c:	e9d1 3200 	ldrd	r3, r2, [r1]
   33ea0:	1ad2      	subs	r2, r2, r3
   33ea2:	2a01      	cmp	r2, #1
   33ea4:	d909      	bls.n	33eba <pack_uint16+0x1e>
	*(buf->cur++) = (val >> 8) & 0xFF;
   33ea6:	1c5a      	adds	r2, r3, #1
   33ea8:	600a      	str	r2, [r1, #0]
   33eaa:	0a02      	lsrs	r2, r0, #8
   33eac:	701a      	strb	r2, [r3, #0]
	*(buf->cur++) = val & 0xFF;
   33eae:	680b      	ldr	r3, [r1, #0]
   33eb0:	1c5a      	adds	r2, r3, #1
   33eb2:	600a      	str	r2, [r1, #0]
   33eb4:	7018      	strb	r0, [r3, #0]
	return 0;
   33eb6:	2000      	movs	r0, #0
   33eb8:	4770      	bx	lr
		return -ENOMEM;
   33eba:	f06f 000b 	mvn.w	r0, #11
}
   33ebe:	4770      	bx	lr

00033ec0 <pack_utf8_str>:
{
   33ec0:	b538      	push	{r3, r4, r5, lr}
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   33ec2:	e9d1 2300 	ldrd	r2, r3, [r1]
{
   33ec6:	4605      	mov	r5, r0
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   33ec8:	6840      	ldr	r0, [r0, #4]
   33eca:	1a9b      	subs	r3, r3, r2
   33ecc:	1c82      	adds	r2, r0, #2
   33ece:	4293      	cmp	r3, r2
{
   33ed0:	460c      	mov	r4, r1
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   33ed2:	d30d      	bcc.n	33ef0 <pack_utf8_str+0x30>
	(void)pack_uint16(str->size, buf);
   33ed4:	b280      	uxth	r0, r0
   33ed6:	f7ff ffe1 	bl	33e9c <pack_uint16>
   33eda:	e9d5 1200 	ldrd	r1, r2, [r5]
   33ede:	6820      	ldr	r0, [r4, #0]
   33ee0:	f001 fe12 	bl	35b08 <memcpy>
	return 0;
   33ee4:	2000      	movs	r0, #0
	buf->cur += str->size;
   33ee6:	6823      	ldr	r3, [r4, #0]
   33ee8:	686a      	ldr	r2, [r5, #4]
   33eea:	4413      	add	r3, r2
   33eec:	6023      	str	r3, [r4, #0]
}
   33eee:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   33ef0:	f06f 000b 	mvn.w	r0, #11
   33ef4:	e7fb      	b.n	33eee <pack_utf8_str+0x2e>

00033ef6 <mqtt_encode_fixed_header>:
	u32_t length = buf->cur - start;
   33ef6:	6813      	ldr	r3, [r2, #0]
{
   33ef8:	b570      	push	{r4, r5, r6, lr}
	u32_t length = buf->cur - start;
   33efa:	1a5c      	subs	r4, r3, r1
	if (length > MQTT_MAX_PAYLOAD_SIZE) {
   33efc:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   33f00:	d227      	bcs.n	33f52 <mqtt_encode_fixed_header+0x5c>
   33f02:	4625      	mov	r5, r4
   33f04:	2600      	movs	r6, #0
	} while (length > 0);
   33f06:	09ed      	lsrs	r5, r5, #7
   33f08:	b2f3      	uxtb	r3, r6
   33f0a:	f106 0601 	add.w	r6, r6, #1
   33f0e:	d1fa      	bne.n	33f06 <mqtt_encode_fixed_header+0x10>
	fixed_header_length += sizeof(u8_t);
   33f10:	3302      	adds	r3, #2
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   33f12:	6856      	ldr	r6, [r2, #4]
	buf->cur = start - fixed_header_length;
   33f14:	b2db      	uxtb	r3, r3
   33f16:	425d      	negs	r5, r3
   33f18:	1acb      	subs	r3, r1, r3
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   33f1a:	42b3      	cmp	r3, r6
	buf->cur = start - fixed_header_length;
   33f1c:	6013      	str	r3, [r2, #0]
	*(buf->cur++) = val;
   33f1e:	bf1e      	ittt	ne
   33f20:	3301      	addne	r3, #1
   33f22:	6013      	strne	r3, [r2, #0]
   33f24:	5548      	strbne	r0, [r1, r5]
	return 0;
   33f26:	4620      	mov	r0, r4
			*(buf->cur) = length & MQTT_LENGTH_VALUE_MASK;
   33f28:	6813      	ldr	r3, [r2, #0]
   33f2a:	f000 017f 	and.w	r1, r0, #127	; 0x7f
   33f2e:	7019      	strb	r1, [r3, #0]
			if (length > 0) {
   33f30:	09c0      	lsrs	r0, r0, #7
				*(buf->cur) |= MQTT_LENGTH_CONTINUATION_BIT;
   33f32:	bf1f      	itttt	ne
   33f34:	6811      	ldrne	r1, [r2, #0]
   33f36:	780b      	ldrbne	r3, [r1, #0]
   33f38:	f063 037f 	ornne	r3, r3, #127	; 0x7f
   33f3c:	700b      	strbne	r3, [r1, #0]
			buf->cur++;
   33f3e:	6813      	ldr	r3, [r2, #0]
   33f40:	3301      	adds	r3, #1
   33f42:	6013      	str	r3, [r2, #0]
	} while (length > 0);
   33f44:	2800      	cmp	r0, #0
   33f46:	d1ef      	bne.n	33f28 <mqtt_encode_fixed_header+0x32>
	buf->cur = buf->cur - fixed_header_length;
   33f48:	441d      	add	r5, r3
	buf->end = buf->cur + length + fixed_header_length;
   33f4a:	4423      	add	r3, r4
	buf->cur = buf->cur - fixed_header_length;
   33f4c:	6015      	str	r5, [r2, #0]
	buf->end = buf->cur + length + fixed_header_length;
   33f4e:	6053      	str	r3, [r2, #4]
}
   33f50:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   33f52:	f06f 0079 	mvn.w	r0, #121	; 0x79
   33f56:	e7fb      	b.n	33f50 <mqtt_encode_fixed_header+0x5a>

00033f58 <mqtt_message_id_only_enc>:
{
   33f58:	b570      	push	{r4, r5, r6, lr}
   33f5a:	4606      	mov	r6, r0
   33f5c:	4614      	mov	r4, r2
	if (message_id == 0U) {
   33f5e:	4608      	mov	r0, r1
   33f60:	b169      	cbz	r1, 33f7e <mqtt_message_id_only_enc+0x26>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   33f62:	6815      	ldr	r5, [r2, #0]
	err_code = pack_uint16(message_id, buf);
   33f64:	4611      	mov	r1, r2
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   33f66:	3505      	adds	r5, #5
   33f68:	6015      	str	r5, [r2, #0]
	err_code = pack_uint16(message_id, buf);
   33f6a:	f7ff ff97 	bl	33e9c <pack_uint16>
	if (err_code != 0) {
   33f6e:	b940      	cbnz	r0, 33f82 <mqtt_message_id_only_enc+0x2a>
	return mqtt_encode_fixed_header(message_type, start, buf);
   33f70:	4622      	mov	r2, r4
   33f72:	4629      	mov	r1, r5
   33f74:	4630      	mov	r0, r6
}
   33f76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   33f7a:	f7ff bfbc 	b.w	33ef6 <mqtt_encode_fixed_header>
		return -EINVAL;
   33f7e:	f06f 0015 	mvn.w	r0, #21
}
   33f82:	bd70      	pop	{r4, r5, r6, pc}

00033f84 <publish_encode>:
{
   33f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   33f88:	7d87      	ldrb	r7, [r0, #22]
   33f8a:	7a04      	ldrb	r4, [r0, #8]
   33f8c:	f007 0801 	and.w	r8, r7, #1
{
   33f90:	4605      	mov	r5, r0
   33f92:	4689      	mov	r9, r1
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   33f94:	f3c7 0740 	ubfx	r7, r7, #1, #1
	if ((param->message.topic.qos) && (param->message_id == 0U)) {
   33f98:	b10c      	cbz	r4, 33f9e <publish_encode+0x1a>
   33f9a:	8a83      	ldrh	r3, [r0, #20]
   33f9c:	b383      	cbz	r3, 34000 <publish_encode+0x7c>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   33f9e:	f8d9 6000 	ldr.w	r6, [r9]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   33fa2:	4649      	mov	r1, r9
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   33fa4:	3605      	adds	r6, #5
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   33fa6:	4628      	mov	r0, r5
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   33fa8:	f8c9 6000 	str.w	r6, [r9]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   33fac:	f7ff ff88 	bl	33ec0 <pack_utf8_str>
	if (err_code != 0) {
   33fb0:	b9b0      	cbnz	r0, 33fe0 <publish_encode+0x5c>
	if (param->message.topic.qos) {
   33fb2:	7a2b      	ldrb	r3, [r5, #8]
   33fb4:	b9b3      	cbnz	r3, 33fe4 <publish_encode+0x60>
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   33fb6:	0060      	lsls	r0, r4, #1
   33fb8:	f000 0006 	and.w	r0, r0, #6
	buf->cur += param->message.payload.len;
   33fbc:	692a      	ldr	r2, [r5, #16]
   33fbe:	f8d9 3000 	ldr.w	r3, [r9]
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   33fc2:	4338      	orrs	r0, r7
   33fc4:	ea40 00c8 	orr.w	r0, r0, r8, lsl #3
	buf->cur += param->message.payload.len;
   33fc8:	4413      	add	r3, r2
	const u8_t message_type = MQTT_MESSAGES_OPTIONS(
   33fca:	f040 0030 	orr.w	r0, r0, #48	; 0x30
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   33fce:	464a      	mov	r2, r9
   33fd0:	4631      	mov	r1, r6
	buf->cur += param->message.payload.len;
   33fd2:	f8c9 3000 	str.w	r3, [r9]
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   33fd6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   33fda:	f7ff ff8c 	bl	33ef6 <mqtt_encode_fixed_header>
	if (err_code != 0) {
   33fde:	b140      	cbz	r0, 33ff2 <publish_encode+0x6e>
}
   33fe0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_uint16(param->message_id, buf);
   33fe4:	4649      	mov	r1, r9
   33fe6:	8aa8      	ldrh	r0, [r5, #20]
   33fe8:	f7ff ff58 	bl	33e9c <pack_uint16>
		if (err_code != 0) {
   33fec:	2800      	cmp	r0, #0
   33fee:	d0e2      	beq.n	33fb6 <publish_encode+0x32>
   33ff0:	e7f6      	b.n	33fe0 <publish_encode+0x5c>
	buf->end -= param->message.payload.len;
   33ff2:	f8d9 3004 	ldr.w	r3, [r9, #4]
   33ff6:	692a      	ldr	r2, [r5, #16]
   33ff8:	1a9b      	subs	r3, r3, r2
   33ffa:	f8c9 3004 	str.w	r3, [r9, #4]
	return 0;
   33ffe:	e7ef      	b.n	33fe0 <publish_encode+0x5c>
		return -EINVAL;
   34000:	f06f 0015 	mvn.w	r0, #21
   34004:	e7ec      	b.n	33fe0 <publish_encode+0x5c>

00034006 <publish_ack_encode>:
{
   34006:	460a      	mov	r2, r1
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
   34008:	8801      	ldrh	r1, [r0, #0]
   3400a:	2040      	movs	r0, #64	; 0x40
   3400c:	f7ff bfa4 	b.w	33f58 <mqtt_message_id_only_enc>

00034010 <subscribe_encode>:
{
   34010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   34014:	4606      	mov	r6, r0
	if (param->message_id == 0U) {
   34016:	88c0      	ldrh	r0, [r0, #6]
{
   34018:	460d      	mov	r5, r1
	if (param->message_id == 0U) {
   3401a:	b330      	cbz	r0, 3406a <subscribe_encode+0x5a>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3401c:	680f      	ldr	r7, [r1, #0]
   3401e:	3705      	adds	r7, #5
   34020:	600f      	str	r7, [r1, #0]
	err_code = pack_uint16(param->message_id, buf);
   34022:	f7ff ff3b 	bl	33e9c <pack_uint16>
	if (err_code != 0) {
   34026:	4604      	mov	r4, r0
   34028:	bb08      	cbnz	r0, 3406e <subscribe_encode+0x5e>
   3402a:	f04f 080c 	mov.w	r8, #12
	for (i = 0; i < param->list_count; i++) {
   3402e:	88b3      	ldrh	r3, [r6, #4]
   34030:	42a3      	cmp	r3, r4
   34032:	dc06      	bgt.n	34042 <subscribe_encode+0x32>
	return mqtt_encode_fixed_header(message_type, start, buf);
   34034:	462a      	mov	r2, r5
   34036:	4639      	mov	r1, r7
}
   34038:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   3403c:	2082      	movs	r0, #130	; 0x82
   3403e:	f7ff bf5a 	b.w	33ef6 <mqtt_encode_fixed_header>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   34042:	fb08 f904 	mul.w	r9, r8, r4
   34046:	6830      	ldr	r0, [r6, #0]
   34048:	4629      	mov	r1, r5
   3404a:	4448      	add	r0, r9
   3404c:	f7ff ff38 	bl	33ec0 <pack_utf8_str>
		if (err_code != 0) {
   34050:	b980      	cbnz	r0, 34074 <subscribe_encode+0x64>
		err_code = pack_uint8(param->list[i].qos, buf);
   34052:	6833      	ldr	r3, [r6, #0]
   34054:	444b      	add	r3, r9
   34056:	7a1a      	ldrb	r2, [r3, #8]
	if ((buf->end - buf->cur) < sizeof(u8_t)) {
   34058:	e9d5 3100 	ldrd	r3, r1, [r5]
   3405c:	4299      	cmp	r1, r3
   3405e:	d00b      	beq.n	34078 <subscribe_encode+0x68>
	*(buf->cur++) = val;
   34060:	1c59      	adds	r1, r3, #1
   34062:	6029      	str	r1, [r5, #0]
	for (i = 0; i < param->list_count; i++) {
   34064:	3401      	adds	r4, #1
	*(buf->cur++) = val;
   34066:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < param->list_count; i++) {
   34068:	e7e1      	b.n	3402e <subscribe_encode+0x1e>
		return -EINVAL;
   3406a:	f06f 0415 	mvn.w	r4, #21
}
   3406e:	4620      	mov	r0, r4
   34070:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   34074:	4604      	mov	r4, r0
   34076:	e7fa      	b.n	3406e <subscribe_encode+0x5e>
		return -ENOMEM;
   34078:	f06f 040b 	mvn.w	r4, #11
   3407c:	e7f7      	b.n	3406e <subscribe_encode+0x5e>

0003407e <unsubscribe_encode>:
{
   3407e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   34082:	680f      	ldr	r7, [r1, #0]
{
   34084:	4606      	mov	r6, r0
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   34086:	3705      	adds	r7, #5
	err_code = pack_uint16(param->message_id, buf);
   34088:	88c0      	ldrh	r0, [r0, #6]
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3408a:	600f      	str	r7, [r1, #0]
{
   3408c:	460d      	mov	r5, r1
	err_code = pack_uint16(param->message_id, buf);
   3408e:	f7ff ff05 	bl	33e9c <pack_uint16>
	if (err_code != 0) {
   34092:	4604      	mov	r4, r0
   34094:	b9a8      	cbnz	r0, 340c2 <unsubscribe_encode+0x44>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   34096:	f04f 080c 	mov.w	r8, #12
	for (i = 0; i < param->list_count; i++) {
   3409a:	88b3      	ldrh	r3, [r6, #4]
   3409c:	42a3      	cmp	r3, r4
   3409e:	dc06      	bgt.n	340ae <unsubscribe_encode+0x30>
	return mqtt_encode_fixed_header(message_type, start, buf);
   340a0:	462a      	mov	r2, r5
   340a2:	4639      	mov	r1, r7
}
   340a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   340a8:	20a2      	movs	r0, #162	; 0xa2
   340aa:	f7ff bf24 	b.w	33ef6 <mqtt_encode_fixed_header>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   340ae:	6830      	ldr	r0, [r6, #0]
   340b0:	4629      	mov	r1, r5
   340b2:	fb08 0004 	mla	r0, r8, r4, r0
   340b6:	f7ff ff03 	bl	33ec0 <pack_utf8_str>
		if (err_code != 0) {
   340ba:	b908      	cbnz	r0, 340c0 <unsubscribe_encode+0x42>
	for (i = 0; i < param->list_count; i++) {
   340bc:	3401      	adds	r4, #1
   340be:	e7ec      	b.n	3409a <unsubscribe_encode+0x1c>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   340c0:	4604      	mov	r4, r0
}
   340c2:	4620      	mov	r0, r4
   340c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000340c8 <mqtt_read_message_chunk>:
	return err_code;
}

static int mqtt_read_message_chunk(struct mqtt_client *client,
				   struct buf_ctx *buf, u32_t length)
{
   340c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   340ca:	460d      	mov	r5, r1
	int len;

	/* Calculate how much data we need to read from the transport,
	 * given the already buffered data.
	 */
	remaining = length - (buf->end - buf->cur);
   340cc:	e9d1 3100 	ldrd	r3, r1, [r1]
   340d0:	1acb      	subs	r3, r1, r3
   340d2:	1ad4      	subs	r4, r2, r3
	if (remaining <= 0) {
   340d4:	2c00      	cmp	r4, #0
{
   340d6:	4606      	mov	r6, r0
	if (remaining <= 0) {
   340d8:	dd14      	ble.n	34104 <mqtt_read_message_chunk+0x3c>
		return 0;
	}

	/* Check if read does not exceed the buffer. */
	if (buf->end + remaining > client->rx_buf + client->rx_buf_size) {
   340da:	e9d0 3719 	ldrd	r3, r7, [r0, #100]	; 0x64
   340de:	190a      	adds	r2, r1, r4
   340e0:	443b      	add	r3, r7
   340e2:	429a      	cmp	r2, r3
   340e4:	d810      	bhi.n	34108 <mqtt_read_message_chunk+0x40>
		MQTT_ERR("[CID %p]: Buffer too small to receive the message",
			 client);
		return -ENOMEM;
	}

	len = mqtt_transport_read(client, buf->end, remaining, false);
   340e6:	2300      	movs	r3, #0
   340e8:	4622      	mov	r2, r4
   340ea:	f7ed fbdf 	bl	218ac <mqtt_transport_read>
	if (len < 0) {
   340ee:	2800      	cmp	r0, #0
   340f0:	db09      	blt.n	34106 <mqtt_read_message_chunk+0x3e>
		MQTT_TRC("[CID %p]: Transport read error: %d", client, len);
		return len;
	}

	if (len == 0) {
   340f2:	d00c      	beq.n	3410e <mqtt_read_message_chunk+0x46>
		MQTT_TRC("[CID %p]: Connection closed.", client);
		return -ENOTCONN;
	}

	client->internal.rx_buf_datalen += len;
   340f4:	69f3      	ldr	r3, [r6, #28]
	buf->end += len;

	if (len < remaining) {
   340f6:	42a0      	cmp	r0, r4
	client->internal.rx_buf_datalen += len;
   340f8:	4403      	add	r3, r0
   340fa:	61f3      	str	r3, [r6, #28]
	buf->end += len;
   340fc:	686b      	ldr	r3, [r5, #4]
   340fe:	4403      	add	r3, r0
   34100:	606b      	str	r3, [r5, #4]
	if (len < remaining) {
   34102:	db07      	blt.n	34114 <mqtt_read_message_chunk+0x4c>
		MQTT_TRC("[CID %p]: Message partially received.", client);
		return -EAGAIN;
	}

	return 0;
   34104:	2000      	movs	r0, #0
}
   34106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOMEM;
   34108:	f06f 000b 	mvn.w	r0, #11
   3410c:	e7fb      	b.n	34106 <mqtt_read_message_chunk+0x3e>
		return -ENOTCONN;
   3410e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   34112:	e7f8      	b.n	34106 <mqtt_read_message_chunk+0x3e>
		return -EAGAIN;
   34114:	f06f 000a 	mvn.w	r0, #10
   34118:	e7f5      	b.n	34106 <mqtt_read_message_chunk+0x3e>

0003411a <mqtt_handle_rx>:

	return err_code;
}

int mqtt_handle_rx(struct mqtt_client *client)
{
   3411a:	b570      	push	{r4, r5, r6, lr}
	int err_code;
	u8_t type_and_flags;
	u32_t var_length;
	struct buf_ctx buf;

	buf.cur = client->rx_buf;
   3411c:	6e43      	ldr	r3, [r0, #100]	; 0x64
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   3411e:	69c2      	ldr	r2, [r0, #28]
{
   34120:	b08c      	sub	sp, #48	; 0x30
	buf.cur = client->rx_buf;
   34122:	9302      	str	r3, [sp, #8]
{
   34124:	4605      	mov	r5, r0
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   34126:	4413      	add	r3, r2
	u8_t chunk_size = MQTT_FIXED_HEADER_MIN_SIZE;
   34128:	2202      	movs	r2, #2
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   3412a:	9303      	str	r3, [sp, #12]
		err_code = mqtt_read_message_chunk(client, buf, chunk_size);
   3412c:	4628      	mov	r0, r5
   3412e:	a902      	add	r1, sp, #8
   34130:	f7ff ffca 	bl	340c8 <mqtt_read_message_chunk>
		if (err_code < 0) {
   34134:	1e04      	subs	r4, r0, #0
   34136:	db2d      	blt.n	34194 <mqtt_handle_rx+0x7a>
		buf->cur = client->rx_buf;
   34138:	6e6b      	ldr	r3, [r5, #100]	; 0x64
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   3413a:	aa01      	add	r2, sp, #4
   3413c:	f10d 0103 	add.w	r1, sp, #3
   34140:	a802      	add	r0, sp, #8
		buf->cur = client->rx_buf;
   34142:	9302      	str	r3, [sp, #8]
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   34144:	f7ff fe25 	bl	33d92 <fixed_header_decode>
	} while (err_code == -EAGAIN);
   34148:	f110 0f0b 	cmn.w	r0, #11
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   3414c:	4604      	mov	r4, r0
		chunk_size = 1U;
   3414e:	f04f 0201 	mov.w	r2, #1
	} while (err_code == -EAGAIN);
   34152:	d0eb      	beq.n	3412c <mqtt_handle_rx+0x12>

	err_code = mqtt_read_and_parse_fixed_header(client, &type_and_flags,
						    &var_length, &buf);
	if (err_code < 0) {
   34154:	2800      	cmp	r0, #0
   34156:	db21      	blt.n	3419c <mqtt_handle_rx+0x82>
		return (err_code == -EAGAIN) ? 0 : err_code;
	}

	if ((type_and_flags & 0xF0) == MQTT_PKT_TYPE_PUBLISH) {
   34158:	f89d 6003 	ldrb.w	r6, [sp, #3]
   3415c:	f006 03f0 	and.w	r3, r6, #240	; 0xf0
   34160:	2b30      	cmp	r3, #48	; 0x30
   34162:	d11e      	bne.n	341a2 <mqtt_handle_rx+0x88>
	err_code = mqtt_read_message_chunk(client, buf, sizeof(u16_t));
   34164:	2202      	movs	r2, #2
   34166:	4628      	mov	r0, r5
   34168:	a902      	add	r1, sp, #8
   3416a:	f7ff ffad 	bl	340c8 <mqtt_read_message_chunk>
	if (err_code < 0) {
   3416e:	1e04      	subs	r4, r0, #0
   34170:	db10      	blt.n	34194 <mqtt_handle_rx+0x7a>
	variable_header_length = *buf->cur << 8; /* MSB */
   34172:	9b02      	ldr	r3, [sp, #8]
	if (qos > MQTT_QOS_0_AT_MOST_ONCE) {
   34174:	f016 0f06 	tst.w	r6, #6
   34178:	881a      	ldrh	r2, [r3, #0]
	err_code = mqtt_read_message_chunk(client, buf,
   3417a:	4628      	mov	r0, r5
   3417c:	ba52      	rev16	r2, r2
   3417e:	b292      	uxth	r2, r2
	variable_header_length += sizeof(u16_t);
   34180:	bf0c      	ite	eq
   34182:	3202      	addeq	r2, #2
		variable_header_length += sizeof(u16_t);
   34184:	3204      	addne	r2, #4
	err_code = mqtt_read_message_chunk(client, buf,
   34186:	a902      	add	r1, sp, #8
   34188:	f7ff ff9e 	bl	340c8 <mqtt_read_message_chunk>
	if (err_code < 0) {
   3418c:	ea00 74e0 	and.w	r4, r0, r0, asr #31
							&buf);
	} else {
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
	}

	if (err_code < 0) {
   34190:	2c00      	cmp	r4, #0
   34192:	da0d      	bge.n	341b0 <mqtt_handle_rx+0x96>
		return (err_code == -EAGAIN) ? 0 : err_code;
   34194:	f114 0f0b 	cmn.w	r4, #11
   34198:	d100      	bne.n	3419c <mqtt_handle_rx+0x82>
   3419a:	2400      	movs	r4, #0
	}

	client->internal.rx_buf_datalen = 0U;

	return 0;
}
   3419c:	4620      	mov	r0, r4
   3419e:	b00c      	add	sp, #48	; 0x30
   341a0:	bd70      	pop	{r4, r5, r6, pc}
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
   341a2:	4628      	mov	r0, r5
   341a4:	9a01      	ldr	r2, [sp, #4]
   341a6:	a902      	add	r1, sp, #8
   341a8:	f7ff ff8e 	bl	340c8 <mqtt_read_message_chunk>
   341ac:	4604      	mov	r4, r0
   341ae:	e7ef      	b.n	34190 <mqtt_handle_rx+0x76>
	evt.result = 0;
   341b0:	2200      	movs	r2, #0
	err_code = mqtt_handle_packet(client, type_and_flags, var_length, &buf);
   341b2:	f89d 0003 	ldrb.w	r0, [sp, #3]
   341b6:	9901      	ldr	r1, [sp, #4]
	evt.result = 0;
   341b8:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	switch (type_and_flags & 0xF0) {
   341bc:	2b60      	cmp	r3, #96	; 0x60
	evt.result = 0;
   341be:	920b      	str	r2, [sp, #44]	; 0x2c
	switch (type_and_flags & 0xF0) {
   341c0:	d05e      	beq.n	34280 <mqtt_handle_rx+0x166>
   341c2:	d813      	bhi.n	341ec <mqtt_handle_rx+0xd2>
   341c4:	2b40      	cmp	r3, #64	; 0x40
   341c6:	d051      	beq.n	3426c <mqtt_handle_rx+0x152>
   341c8:	d806      	bhi.n	341d8 <mqtt_handle_rx+0xbe>
   341ca:	2b20      	cmp	r3, #32
   341cc:	d02a      	beq.n	34224 <mqtt_handle_rx+0x10a>
   341ce:	2b30      	cmp	r3, #48	; 0x30
   341d0:	d040      	beq.n	34254 <mqtt_handle_rx+0x13a>
	client->internal.rx_buf_datalen = 0U;
   341d2:	2400      	movs	r4, #0
   341d4:	61ec      	str	r4, [r5, #28]
	return 0;
   341d6:	e7e1      	b.n	3419c <mqtt_handle_rx+0x82>
	switch (type_and_flags & 0xF0) {
   341d8:	2b50      	cmp	r3, #80	; 0x50
   341da:	d1fa      	bne.n	341d2 <mqtt_handle_rx+0xb8>
		evt.type = MQTT_EVT_PUBREC;
   341dc:	2304      	movs	r3, #4
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   341de:	a905      	add	r1, sp, #20
   341e0:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREC;
   341e2:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   341e6:	f7ff fe41 	bl	33e6c <publish_receive_decode>
   341ea:	e046      	b.n	3427a <mqtt_handle_rx+0x160>
	switch (type_and_flags & 0xF0) {
   341ec:	2bb0      	cmp	r3, #176	; 0xb0
   341ee:	d057      	beq.n	342a0 <mqtt_handle_rx+0x186>
   341f0:	d80b      	bhi.n	3420a <mqtt_handle_rx+0xf0>
   341f2:	2b70      	cmp	r3, #112	; 0x70
   341f4:	d04c      	beq.n	34290 <mqtt_handle_rx+0x176>
   341f6:	2b90      	cmp	r3, #144	; 0x90
   341f8:	d1eb      	bne.n	341d2 <mqtt_handle_rx+0xb8>
		evt.type = MQTT_EVT_SUBACK;
   341fa:	2307      	movs	r3, #7
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   341fc:	a905      	add	r1, sp, #20
   341fe:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_SUBACK;
   34200:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   34204:	f7ff fe38 	bl	33e78 <subscribe_ack_decode>
   34208:	e037      	b.n	3427a <mqtt_handle_rx+0x160>
	switch (type_and_flags & 0xF0) {
   3420a:	2bd0      	cmp	r3, #208	; 0xd0
   3420c:	d1e1      	bne.n	341d2 <mqtt_handle_rx+0xb8>
		if (client->unacked_ping <= 0) {
   3420e:	f995 3077 	ldrsb.w	r3, [r5, #119]	; 0x77
   34212:	2b00      	cmp	r3, #0
			client->unacked_ping--;
   34214:	bfca      	itet	gt
   34216:	f103 33ff 	addgt.w	r3, r3, #4294967295	; 0xffffffff
			client->unacked_ping = 0;
   3421a:	f885 2077 	strble.w	r2, [r5, #119]	; 0x77
			client->unacked_ping--;
   3421e:	f885 3077 	strbgt.w	r3, [r5, #119]	; 0x77
	if (err_code < 0) {
   34222:	e7d6      	b.n	341d2 <mqtt_handle_rx+0xb8>
		evt.type = MQTT_EVT_CONNACK;
   34224:	f88d 2010 	strb.w	r2, [sp, #16]
		err_code = connect_ack_decode(client, buf, &evt.param.connack);
   34228:	4628      	mov	r0, r5
   3422a:	aa05      	add	r2, sp, #20
   3422c:	a902      	add	r1, sp, #8
   3422e:	f7ff fdc2 	bl	33db6 <connect_ack_decode>
		if (err_code == 0) {
   34232:	4604      	mov	r4, r0
   34234:	bb10      	cbnz	r0, 3427c <mqtt_handle_rx+0x162>
			if (evt.param.connack.return_code ==
   34236:	f89d 2015 	ldrb.w	r2, [sp, #21]
   3423a:	b91a      	cbnz	r2, 34244 <mqtt_handle_rx+0x12a>
				MQTT_SET_STATE(client, MQTT_STATE_CONNECTED);
   3423c:	69ab      	ldr	r3, [r5, #24]
   3423e:	f043 0304 	orr.w	r3, r3, #4
   34242:	61ab      	str	r3, [r5, #24]
			evt.result = evt.param.connack.return_code;
   34244:	920b      	str	r2, [sp, #44]	; 0x2c
		event_notify(client, &evt);
   34246:	4628      	mov	r0, r5
   34248:	a904      	add	r1, sp, #16
   3424a:	f000 f84d 	bl	342e8 <event_notify>
	if (err_code < 0) {
   3424e:	2c00      	cmp	r4, #0
   34250:	dabf      	bge.n	341d2 <mqtt_handle_rx+0xb8>
   34252:	e7a3      	b.n	3419c <mqtt_handle_rx+0x82>
		evt.type = MQTT_EVT_PUBLISH;
   34254:	2302      	movs	r3, #2
		err_code = publish_decode(type_and_flags, var_length, buf,
   34256:	aa02      	add	r2, sp, #8
		evt.type = MQTT_EVT_PUBLISH;
   34258:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_decode(type_and_flags, var_length, buf,
   3425c:	ab05      	add	r3, sp, #20
   3425e:	f7ff fdc5 	bl	33dec <publish_decode>
		client->internal.remaining_payload =
   34262:	9b09      	ldr	r3, [sp, #36]	; 0x24
		err_code = publish_decode(type_and_flags, var_length, buf,
   34264:	4604      	mov	r4, r0
		evt.result = err_code;
   34266:	900b      	str	r0, [sp, #44]	; 0x2c
		client->internal.remaining_payload =
   34268:	622b      	str	r3, [r5, #32]
	if (notify_event == true) {
   3426a:	e7ec      	b.n	34246 <mqtt_handle_rx+0x12c>
		evt.type = MQTT_EVT_PUBACK;
   3426c:	2303      	movs	r3, #3
		err_code = publish_ack_decode(buf, &evt.param.puback);
   3426e:	a905      	add	r1, sp, #20
   34270:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBACK;
   34272:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_ack_decode(buf, &evt.param.puback);
   34276:	f7ff fdf7 	bl	33e68 <publish_ack_decode>
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   3427a:	4604      	mov	r4, r0
		evt.result = err_code;
   3427c:	940b      	str	r4, [sp, #44]	; 0x2c
	if (notify_event == true) {
   3427e:	e7e2      	b.n	34246 <mqtt_handle_rx+0x12c>
		evt.type = MQTT_EVT_PUBREL;
   34280:	2305      	movs	r3, #5
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   34282:	a905      	add	r1, sp, #20
   34284:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREL;
   34286:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   3428a:	f7ff fdf1 	bl	33e70 <publish_release_decode>
   3428e:	e7f4      	b.n	3427a <mqtt_handle_rx+0x160>
		evt.type = MQTT_EVT_PUBCOMP;
   34290:	2306      	movs	r3, #6
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   34292:	a905      	add	r1, sp, #20
   34294:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBCOMP;
   34296:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   3429a:	f7ff fdeb 	bl	33e74 <publish_complete_decode>
   3429e:	e7ec      	b.n	3427a <mqtt_handle_rx+0x160>
		evt.type = MQTT_EVT_UNSUBACK;
   342a0:	2308      	movs	r3, #8
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   342a2:	a905      	add	r1, sp, #20
   342a4:	eb0d 0003 	add.w	r0, sp, r3
		evt.type = MQTT_EVT_UNSUBACK;
   342a8:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   342ac:	f7ff fdf4 	bl	33e98 <unsubscribe_ack_decode>
   342b0:	e7e3      	b.n	3427a <mqtt_handle_rx+0x160>

000342b2 <mqtt_client_tcp_disconnect>:

int mqtt_client_tcp_disconnect(struct mqtt_client *client)
{
   342b2:	b508      	push	{r3, lr}
	int ret;

	MQTT_TRC("Closing socket %d", client->transport.tcp.sock);

	ret = close(client->transport.tcp.sock);
   342b4:	6a80      	ldr	r0, [r0, #40]	; 0x28
   342b6:	f7ed f9c5 	bl	21644 <close>
	if (ret < 0) {
   342ba:	2800      	cmp	r0, #0
   342bc:	da04      	bge.n	342c8 <mqtt_client_tcp_disconnect+0x16>
		return -errno;
   342be:	f7ff fcf8 	bl	33cb2 <__errno>
   342c2:	6800      	ldr	r0, [r0, #0]
   342c4:	4240      	negs	r0, r0
	}

	return 0;
}
   342c6:	bd08      	pop	{r3, pc}
	return 0;
   342c8:	2000      	movs	r0, #0
   342ca:	e7fc      	b.n	342c6 <mqtt_client_tcp_disconnect+0x14>

000342cc <tx_buf_init>:
	client->internal.remaining_payload = 0U;
}

/** @brief Initialize tx buffer. */
static void tx_buf_init(struct mqtt_client *client, struct buf_ctx *buf)
{
   342cc:	b538      	push	{r3, r4, r5, lr}
   342ce:	4604      	mov	r4, r0
   342d0:	460d      	mov	r5, r1
__ssp_bos_icheck3(memset, void *, int)
   342d2:	6f02      	ldr	r2, [r0, #112]	; 0x70
   342d4:	2100      	movs	r1, #0
   342d6:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
   342d8:	f001 fc36 	bl	35b48 <memset>
	memset(client->tx_buf, 0, client->tx_buf_size);
	buf->cur = client->tx_buf;
   342dc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	buf->end = client->tx_buf + client->tx_buf_size;
   342de:	6f22      	ldr	r2, [r4, #112]	; 0x70
	buf->cur = client->tx_buf;
   342e0:	602b      	str	r3, [r5, #0]
	buf->end = client->tx_buf + client->tx_buf_size;
   342e2:	4413      	add	r3, r2
   342e4:	606b      	str	r3, [r5, #4]
}
   342e6:	bd38      	pop	{r3, r4, r5, pc}

000342e8 <event_notify>:
	/* Reset internal state. */
	client_reset(client);
}

void event_notify(struct mqtt_client *client, const struct mqtt_evt *evt)
{
   342e8:	b513      	push	{r0, r1, r4, lr}
	if (client->evt_cb != NULL) {
   342ea:	6e03      	ldr	r3, [r0, #96]	; 0x60
{
   342ec:	4604      	mov	r4, r0
   342ee:	9101      	str	r1, [sp, #4]
	if (client->evt_cb != NULL) {
   342f0:	b15b      	cbz	r3, 3430a <event_notify+0x22>
		mqtt_mutex_unlock(client);
   342f2:	f7ed faf1 	bl	218d8 <mqtt_mutex_unlock>

		client->evt_cb(client, evt);
   342f6:	4620      	mov	r0, r4
   342f8:	6e23      	ldr	r3, [r4, #96]	; 0x60
   342fa:	9901      	ldr	r1, [sp, #4]
   342fc:	4798      	blx	r3

		mqtt_mutex_lock(client);
   342fe:	4620      	mov	r0, r4
	}
}
   34300:	b002      	add	sp, #8
   34302:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mqtt_mutex_lock(client);
   34306:	f7ed bb13 	b.w	21930 <mqtt_mutex_lock>
}
   3430a:	b002      	add	sp, #8
   3430c:	bd10      	pop	{r4, pc}

0003430e <client_disconnect>:

static void client_disconnect(struct mqtt_client *client, int result)
{
   3430e:	b530      	push	{r4, r5, lr}
   34310:	4604      	mov	r4, r0
   34312:	b089      	sub	sp, #36	; 0x24
   34314:	460d      	mov	r5, r1
	int err_code;

	err_code = mqtt_transport_disconnect(client);
   34316:	f7ed fad5 	bl	218c4 <mqtt_transport_disconnect>
	if (MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   3431a:	69a3      	ldr	r3, [r4, #24]
	event_notify(client, &evt);
   3431c:	4669      	mov	r1, sp
	if (MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   3431e:	f013 0304 	ands.w	r3, r3, #4
		evt.type = MQTT_EVT_DISCONNECT;
   34322:	bf12      	itee	ne
   34324:	2301      	movne	r3, #1
		evt.type = MQTT_EVT_CONNACK;
   34326:	f88d 3000 	strbeq.w	r3, [sp]
		evt.result = -ECONNREFUSED;
   3432a:	f06f 036e 	mvneq.w	r3, #110	; 0x6e
	event_notify(client, &evt);
   3432e:	4620      	mov	r0, r4
		evt.type = MQTT_EVT_DISCONNECT;
   34330:	bf16      	itet	ne
   34332:	f88d 3000 	strbne.w	r3, [sp]
		evt.result = -ECONNREFUSED;
   34336:	9307      	streq	r3, [sp, #28]
		evt.result = result;
   34338:	9507      	strne	r5, [sp, #28]
	event_notify(client, &evt);
   3433a:	f7ff ffd5 	bl	342e8 <event_notify>
	MQTT_STATE_INIT(client);
   3433e:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   34340:	e9c4 3305 	strd	r3, r3, [r4, #20]
	client->internal.remaining_payload = 0U;
   34344:	e9c4 3307 	strd	r3, r3, [r4, #28]
	if (err_code < 0) {
		MQTT_ERR("Failed to disconnect transport!");
	}

	disconnect_event_notify(client, result);
}
   34348:	b009      	add	sp, #36	; 0x24
   3434a:	bd30      	pop	{r4, r5, pc}

0003434c <client_write>:
	return err_code;
}

static int client_write(struct mqtt_client *client, const u8_t *data,
			u32_t datalen)
{
   3434c:	b538      	push	{r3, r4, r5, lr}
   3434e:	4605      	mov	r5, r0
	int err_code;

	MQTT_TRC("[%p]: Transport writing %d bytes.", client, datalen);

	err_code = mqtt_transport_write(client, data, datalen);
   34350:	f7ed faa0 	bl	21894 <mqtt_transport_write>
	if (err_code < 0) {
   34354:	1e04      	subs	r4, r0, #0
   34356:	da05      	bge.n	34364 <client_write+0x18>
		MQTT_TRC("TCP write failed, errno = %d, "
			 "closing connection", errno);
		client_disconnect(client, err_code);
   34358:	4621      	mov	r1, r4
   3435a:	4628      	mov	r0, r5
   3435c:	f7ff ffd7 	bl	3430e <client_disconnect>

	MQTT_TRC("[%p]: Transport write complete.", client);
	client->internal.last_activity = mqtt_sys_tick_in_ms_get();

	return 0;
}
   34360:	4620      	mov	r0, r4
   34362:	bd38      	pop	{r3, r4, r5, pc}
	return z_impl_k_uptime_get();
   34364:	f001 fb47 	bl	359f6 <z_impl_k_uptime_get>
	return 0;
   34368:	2400      	movs	r4, #0
	return (u32_t)k_uptime_get();
   3436a:	6168      	str	r0, [r5, #20]
   3436c:	e7f8      	b.n	34360 <client_write+0x14>

0003436e <read_publish_payload>:
	return err_code;
}

static int read_publish_payload(struct mqtt_client *client, void *buffer,
				size_t length, bool shall_block)
{
   3436e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   34370:	4617      	mov	r7, r2
   34372:	461e      	mov	r6, r3
	int ret;

	NULL_PARAM_CHECK(client);
   34374:	4605      	mov	r5, r0
{
   34376:	9101      	str	r1, [sp, #4]
	NULL_PARAM_CHECK(client);
   34378:	b320      	cbz	r0, 343c4 <read_publish_payload+0x56>

	mqtt_mutex_lock(client);
   3437a:	f7ed fad9 	bl	21930 <mqtt_mutex_lock>

	if (client->internal.remaining_payload == 0U) {
   3437e:	6a2c      	ldr	r4, [r5, #32]
   34380:	b1b4      	cbz	r4, 343b0 <read_publish_payload+0x42>

	if (client->internal.remaining_payload < length) {
		length = client->internal.remaining_payload;
	}

	ret = mqtt_transport_read(client, buffer, length, shall_block);
   34382:	42bc      	cmp	r4, r7
   34384:	4622      	mov	r2, r4
   34386:	4633      	mov	r3, r6
   34388:	bf28      	it	cs
   3438a:	463a      	movcs	r2, r7
   3438c:	4628      	mov	r0, r5
   3438e:	9901      	ldr	r1, [sp, #4]
   34390:	f7ed fa8c 	bl	218ac <mqtt_transport_read>
   34394:	4604      	mov	r4, r0
	if (!shall_block && ret == -EAGAIN) {
   34396:	b916      	cbnz	r6, 3439e <read_publish_payload+0x30>
   34398:	f110 0f0b 	cmn.w	r0, #11
   3439c:	d008      	beq.n	343b0 <read_publish_payload+0x42>
		goto exit;
	}

	if (ret <= 0) {
   3439e:	2c00      	cmp	r4, #0
   343a0:	dc0c      	bgt.n	343bc <read_publish_payload+0x4e>
		if (ret == 0) {
			ret = -ENOTCONN;
   343a2:	bf08      	it	eq
   343a4:	f06f 047f 	mvneq.w	r4, #127	; 0x7f
		}

		client_disconnect(client, ret);
   343a8:	4628      	mov	r0, r5
   343aa:	4621      	mov	r1, r4
   343ac:	f7ff ffaf 	bl	3430e <client_disconnect>
	}

	client->internal.remaining_payload -= ret;

exit:
	mqtt_mutex_unlock(client);
   343b0:	4628      	mov	r0, r5
   343b2:	f7ed fa91 	bl	218d8 <mqtt_mutex_unlock>

	return ret;
}
   343b6:	4620      	mov	r0, r4
   343b8:	b003      	add	sp, #12
   343ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	client->internal.remaining_payload -= ret;
   343bc:	6a2b      	ldr	r3, [r5, #32]
   343be:	1b1b      	subs	r3, r3, r4
   343c0:	622b      	str	r3, [r5, #32]
   343c2:	e7f5      	b.n	343b0 <read_publish_payload+0x42>
	NULL_PARAM_CHECK(client);
   343c4:	f06f 0415 	mvn.w	r4, #21
   343c8:	e7f5      	b.n	343b6 <read_publish_payload+0x48>

000343ca <mqtt_client_init>:
{
   343ca:	b510      	push	{r4, lr}
	NULL_PARAM_CHECK_VOID(client);
   343cc:	4604      	mov	r4, r0
   343ce:	b1a0      	cbz	r0, 343fa <mqtt_client_init+0x30>
   343d0:	227c      	movs	r2, #124	; 0x7c
   343d2:	2100      	movs	r1, #0
   343d4:	f001 fbb8 	bl	35b48 <memset>
	MQTT_STATE_INIT(client);
   343d8:	2300      	movs	r3, #0
   343da:	61a3      	str	r3, [r4, #24]
	return z_impl_k_mutex_init(mutex);
   343dc:	4620      	mov	r0, r4
   343de:	f001 fa05 	bl	357ec <z_impl_k_mutex_init>
	client->protocol_version = MQTT_VERSION_3_1_1;
   343e2:	2304      	movs	r3, #4
   343e4:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
	client->clean_session = 1U;
   343e8:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   343ec:	f043 0302 	orr.w	r3, r3, #2
   343f0:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
	client->keepalive = MQTT_KEEPALIVE;
   343f4:	233c      	movs	r3, #60	; 0x3c
   343f6:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
}
   343fa:	bd10      	pop	{r4, pc}

000343fc <mqtt_connect>:
{
   343fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   343fe:	4605      	mov	r5, r0
   34400:	2800      	cmp	r0, #0
   34402:	d03c      	beq.n	3447e <mqtt_connect+0x82>
	NULL_PARAM_CHECK(client->client_id.utf8);
   34404:	6c43      	ldr	r3, [r0, #68]	; 0x44
   34406:	2b00      	cmp	r3, #0
   34408:	d039      	beq.n	3447e <mqtt_connect+0x82>
	mqtt_mutex_lock(client);
   3440a:	f7ed fa91 	bl	21930 <mqtt_mutex_lock>
	if ((client->tx_buf == NULL) || (client->rx_buf == NULL)) {
   3440e:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
   34410:	b393      	cbz	r3, 34478 <mqtt_connect+0x7c>
   34412:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   34414:	b383      	cbz	r3, 34478 <mqtt_connect+0x7c>
	err_code = mqtt_transport_connect(client);
   34416:	4628      	mov	r0, r5
   34418:	f7ed fa34 	bl	21884 <mqtt_transport_connect>
	if (err_code < 0) {
   3441c:	1e04      	subs	r4, r0, #0
   3441e:	db25      	blt.n	3446c <mqtt_connect+0x70>
	tx_buf_init(client, &packet);
   34420:	4669      	mov	r1, sp
   34422:	4628      	mov	r0, r5
   34424:	f7ff ff52 	bl	342cc <tx_buf_init>
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   34428:	69ab      	ldr	r3, [r5, #24]
	err_code = connect_request_encode(client, &packet);
   3442a:	4669      	mov	r1, sp
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   3442c:	f043 0302 	orr.w	r3, r3, #2
	err_code = connect_request_encode(client, &packet);
   34430:	4628      	mov	r0, r5
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   34432:	61ab      	str	r3, [r5, #24]
	err_code = connect_request_encode(client, &packet);
   34434:	f7ed f862 	bl	214fc <connect_request_encode>
	if (err_code < 0) {
   34438:	1e04      	subs	r4, r0, #0
   3443a:	db13      	blt.n	34464 <mqtt_connect+0x68>
	err_code = mqtt_transport_write(client, packet.cur,
   3443c:	e9dd 1200 	ldrd	r1, r2, [sp]
   34440:	4628      	mov	r0, r5
   34442:	1a52      	subs	r2, r2, r1
   34444:	f7ed fa26 	bl	21894 <mqtt_transport_write>
	if (err_code < 0) {
   34448:	1e04      	subs	r4, r0, #0
   3444a:	db0b      	blt.n	34464 <mqtt_connect+0x68>
	return z_impl_k_uptime_get();
   3444c:	f001 fad3 	bl	359f6 <z_impl_k_uptime_get>
	client->unacked_ping = 0;
   34450:	2400      	movs	r4, #0
   34452:	6168      	str	r0, [r5, #20]
   34454:	f885 4077 	strb.w	r4, [r5, #119]	; 0x77
	mqtt_mutex_unlock(client);
   34458:	4628      	mov	r0, r5
   3445a:	f7ed fa3d 	bl	218d8 <mqtt_mutex_unlock>
}
   3445e:	4620      	mov	r0, r4
   34460:	b003      	add	sp, #12
   34462:	bd30      	pop	{r4, r5, pc}
	client_disconnect(client, err_code);
   34464:	4621      	mov	r1, r4
   34466:	4628      	mov	r0, r5
   34468:	f7ff ff51 	bl	3430e <client_disconnect>
	MQTT_STATE_INIT(client);
   3446c:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   3446e:	e9c5 3305 	strd	r3, r3, [r5, #20]
	client->internal.remaining_payload = 0U;
   34472:	e9c5 3307 	strd	r3, r3, [r5, #28]
}
   34476:	e7ef      	b.n	34458 <mqtt_connect+0x5c>
		err_code = -ENOMEM;
   34478:	f06f 040b 	mvn.w	r4, #11
   3447c:	e7f6      	b.n	3446c <mqtt_connect+0x70>
	NULL_PARAM_CHECK(client);
   3447e:	f06f 0415 	mvn.w	r4, #21
   34482:	e7ec      	b.n	3445e <mqtt_connect+0x62>

00034484 <mqtt_publish>:
{
   34484:	b573      	push	{r0, r1, r4, r5, r6, lr}
   34486:	460e      	mov	r6, r1
	NULL_PARAM_CHECK(client);
   34488:	4605      	mov	r5, r0
   3448a:	b330      	cbz	r0, 344da <mqtt_publish+0x56>
	NULL_PARAM_CHECK(param);
   3448c:	b329      	cbz	r1, 344da <mqtt_publish+0x56>
	mqtt_mutex_lock(client);
   3448e:	f7ed fa4f 	bl	21930 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   34492:	4669      	mov	r1, sp
   34494:	4628      	mov	r0, r5
   34496:	f7ff ff19 	bl	342cc <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   3449a:	69ab      	ldr	r3, [r5, #24]
   3449c:	075b      	lsls	r3, r3, #29
   3449e:	d519      	bpl.n	344d4 <mqtt_publish+0x50>
	err_code = publish_encode(param, &packet);
   344a0:	4669      	mov	r1, sp
   344a2:	4630      	mov	r0, r6
   344a4:	f7ff fd6e 	bl	33f84 <publish_encode>
	if (err_code < 0) {
   344a8:	1e04      	subs	r4, r0, #0
   344aa:	db0d      	blt.n	344c8 <mqtt_publish+0x44>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   344ac:	e9dd 1200 	ldrd	r1, r2, [sp]
   344b0:	4628      	mov	r0, r5
   344b2:	1a52      	subs	r2, r2, r1
   344b4:	f7ff ff4a 	bl	3434c <client_write>
	if (err_code < 0) {
   344b8:	1e04      	subs	r4, r0, #0
   344ba:	db05      	blt.n	344c8 <mqtt_publish+0x44>
	err_code = client_write(client, param->message.payload.data,
   344bc:	e9d6 1203 	ldrd	r1, r2, [r6, #12]
   344c0:	4628      	mov	r0, r5
   344c2:	f7ff ff43 	bl	3434c <client_write>
   344c6:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   344c8:	4628      	mov	r0, r5
   344ca:	f7ed fa05 	bl	218d8 <mqtt_mutex_unlock>
}
   344ce:	4620      	mov	r0, r4
   344d0:	b002      	add	sp, #8
   344d2:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTCONN;
   344d4:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   344d8:	e7f6      	b.n	344c8 <mqtt_publish+0x44>
	NULL_PARAM_CHECK(client);
   344da:	f06f 0415 	mvn.w	r4, #21
   344de:	e7f6      	b.n	344ce <mqtt_publish+0x4a>

000344e0 <mqtt_publish_qos1_ack>:
{
   344e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   344e2:	460c      	mov	r4, r1
	NULL_PARAM_CHECK(client);
   344e4:	4605      	mov	r5, r0
   344e6:	b1f8      	cbz	r0, 34528 <mqtt_publish_qos1_ack+0x48>
	NULL_PARAM_CHECK(param);
   344e8:	b1f1      	cbz	r1, 34528 <mqtt_publish_qos1_ack+0x48>
	mqtt_mutex_lock(client);
   344ea:	f7ed fa21 	bl	21930 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   344ee:	4669      	mov	r1, sp
   344f0:	4628      	mov	r0, r5
   344f2:	f7ff feeb 	bl	342cc <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   344f6:	69ab      	ldr	r3, [r5, #24]
   344f8:	075b      	lsls	r3, r3, #29
   344fa:	d512      	bpl.n	34522 <mqtt_publish_qos1_ack+0x42>
	err_code = publish_ack_encode(param, &packet);
   344fc:	4620      	mov	r0, r4
   344fe:	4669      	mov	r1, sp
   34500:	f7ff fd81 	bl	34006 <publish_ack_encode>
	if (err_code < 0) {
   34504:	1e04      	subs	r4, r0, #0
   34506:	db06      	blt.n	34516 <mqtt_publish_qos1_ack+0x36>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   34508:	e9dd 1200 	ldrd	r1, r2, [sp]
   3450c:	4628      	mov	r0, r5
   3450e:	1a52      	subs	r2, r2, r1
   34510:	f7ff ff1c 	bl	3434c <client_write>
   34514:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   34516:	4628      	mov	r0, r5
   34518:	f7ed f9de 	bl	218d8 <mqtt_mutex_unlock>
}
   3451c:	4620      	mov	r0, r4
   3451e:	b003      	add	sp, #12
   34520:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   34522:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   34526:	e7f6      	b.n	34516 <mqtt_publish_qos1_ack+0x36>
	NULL_PARAM_CHECK(client);
   34528:	f06f 0415 	mvn.w	r4, #21
   3452c:	e7f6      	b.n	3451c <mqtt_publish_qos1_ack+0x3c>

0003452e <mqtt_disconnect>:
{
   3452e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   34530:	4605      	mov	r5, r0
   34532:	b310      	cbz	r0, 3457a <mqtt_disconnect+0x4c>
	mqtt_mutex_lock(client);
   34534:	f7ed f9fc 	bl	21930 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   34538:	4669      	mov	r1, sp
   3453a:	4628      	mov	r0, r5
   3453c:	f7ff fec6 	bl	342cc <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   34540:	69ab      	ldr	r3, [r5, #24]
   34542:	075b      	lsls	r3, r3, #29
   34544:	d516      	bpl.n	34574 <mqtt_disconnect+0x46>
	err_code = disconnect_encode(&packet);
   34546:	4668      	mov	r0, sp
   34548:	f7ed f858 	bl	215fc <disconnect_encode>
	if (err_code < 0) {
   3454c:	1e04      	subs	r4, r0, #0
   3454e:	db0b      	blt.n	34568 <mqtt_disconnect+0x3a>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   34550:	e9dd 1200 	ldrd	r1, r2, [sp]
   34554:	4628      	mov	r0, r5
   34556:	1a52      	subs	r2, r2, r1
   34558:	f7ff fef8 	bl	3434c <client_write>
	if (err_code < 0) {
   3455c:	1e04      	subs	r4, r0, #0
   3455e:	db03      	blt.n	34568 <mqtt_disconnect+0x3a>
	client_disconnect(client, 0);
   34560:	2100      	movs	r1, #0
   34562:	4628      	mov	r0, r5
   34564:	f7ff fed3 	bl	3430e <client_disconnect>
	mqtt_mutex_unlock(client);
   34568:	4628      	mov	r0, r5
   3456a:	f7ed f9b5 	bl	218d8 <mqtt_mutex_unlock>
}
   3456e:	4620      	mov	r0, r4
   34570:	b003      	add	sp, #12
   34572:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   34574:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   34578:	e7f6      	b.n	34568 <mqtt_disconnect+0x3a>
	NULL_PARAM_CHECK(client);
   3457a:	f06f 0415 	mvn.w	r4, #21
   3457e:	e7f6      	b.n	3456e <mqtt_disconnect+0x40>

00034580 <mqtt_subscribe>:
{
   34580:	b537      	push	{r0, r1, r2, r4, r5, lr}
   34582:	460c      	mov	r4, r1
	NULL_PARAM_CHECK(client);
   34584:	4605      	mov	r5, r0
   34586:	b1f8      	cbz	r0, 345c8 <mqtt_subscribe+0x48>
	NULL_PARAM_CHECK(param);
   34588:	b1f1      	cbz	r1, 345c8 <mqtt_subscribe+0x48>
	mqtt_mutex_lock(client);
   3458a:	f7ed f9d1 	bl	21930 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   3458e:	4669      	mov	r1, sp
   34590:	4628      	mov	r0, r5
   34592:	f7ff fe9b 	bl	342cc <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   34596:	69ab      	ldr	r3, [r5, #24]
   34598:	075b      	lsls	r3, r3, #29
   3459a:	d512      	bpl.n	345c2 <mqtt_subscribe+0x42>
	err_code = subscribe_encode(param, &packet);
   3459c:	4620      	mov	r0, r4
   3459e:	4669      	mov	r1, sp
   345a0:	f7ff fd36 	bl	34010 <subscribe_encode>
	if (err_code < 0) {
   345a4:	1e04      	subs	r4, r0, #0
   345a6:	db06      	blt.n	345b6 <mqtt_subscribe+0x36>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   345a8:	e9dd 1200 	ldrd	r1, r2, [sp]
   345ac:	4628      	mov	r0, r5
   345ae:	1a52      	subs	r2, r2, r1
   345b0:	f7ff fecc 	bl	3434c <client_write>
   345b4:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   345b6:	4628      	mov	r0, r5
   345b8:	f7ed f98e 	bl	218d8 <mqtt_mutex_unlock>
}
   345bc:	4620      	mov	r0, r4
   345be:	b003      	add	sp, #12
   345c0:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   345c2:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   345c6:	e7f6      	b.n	345b6 <mqtt_subscribe+0x36>
	NULL_PARAM_CHECK(client);
   345c8:	f06f 0415 	mvn.w	r4, #21
   345cc:	e7f6      	b.n	345bc <mqtt_subscribe+0x3c>

000345ce <mqtt_unsubscribe>:
{
   345ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
   345d0:	460c      	mov	r4, r1
	NULL_PARAM_CHECK(client);
   345d2:	4605      	mov	r5, r0
   345d4:	b1f8      	cbz	r0, 34616 <mqtt_unsubscribe+0x48>
	NULL_PARAM_CHECK(param);
   345d6:	b1f1      	cbz	r1, 34616 <mqtt_unsubscribe+0x48>
	mqtt_mutex_lock(client);
   345d8:	f7ed f9aa 	bl	21930 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   345dc:	4669      	mov	r1, sp
   345de:	4628      	mov	r0, r5
   345e0:	f7ff fe74 	bl	342cc <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   345e4:	69ab      	ldr	r3, [r5, #24]
   345e6:	075b      	lsls	r3, r3, #29
   345e8:	d512      	bpl.n	34610 <mqtt_unsubscribe+0x42>
	err_code = unsubscribe_encode(param, &packet);
   345ea:	4620      	mov	r0, r4
   345ec:	4669      	mov	r1, sp
   345ee:	f7ff fd46 	bl	3407e <unsubscribe_encode>
	if (err_code < 0) {
   345f2:	1e04      	subs	r4, r0, #0
   345f4:	db06      	blt.n	34604 <mqtt_unsubscribe+0x36>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   345f6:	e9dd 1200 	ldrd	r1, r2, [sp]
   345fa:	4628      	mov	r0, r5
   345fc:	1a52      	subs	r2, r2, r1
   345fe:	f7ff fea5 	bl	3434c <client_write>
   34602:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   34604:	4628      	mov	r0, r5
   34606:	f7ed f967 	bl	218d8 <mqtt_mutex_unlock>
}
   3460a:	4620      	mov	r0, r4
   3460c:	b003      	add	sp, #12
   3460e:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   34610:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   34614:	e7f6      	b.n	34604 <mqtt_unsubscribe+0x36>
	NULL_PARAM_CHECK(client);
   34616:	f06f 0415 	mvn.w	r4, #21
   3461a:	e7f6      	b.n	3460a <mqtt_unsubscribe+0x3c>

0003461c <mqtt_ping>:
{
   3461c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   3461e:	4605      	mov	r5, r0
   34620:	b320      	cbz	r0, 3466c <mqtt_ping+0x50>
	mqtt_mutex_lock(client);
   34622:	f7ed f985 	bl	21930 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   34626:	4669      	mov	r1, sp
   34628:	4628      	mov	r0, r5
   3462a:	f7ff fe4f 	bl	342cc <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   3462e:	69ab      	ldr	r3, [r5, #24]
   34630:	075b      	lsls	r3, r3, #29
   34632:	d518      	bpl.n	34666 <mqtt_ping+0x4a>
	err_code = ping_request_encode(&packet);
   34634:	4668      	mov	r0, sp
   34636:	f7ec fff3 	bl	21620 <ping_request_encode>
	if (err_code < 0) {
   3463a:	1e04      	subs	r4, r0, #0
   3463c:	db0d      	blt.n	3465a <mqtt_ping+0x3e>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   3463e:	e9dd 1200 	ldrd	r1, r2, [sp]
   34642:	4628      	mov	r0, r5
   34644:	1a52      	subs	r2, r2, r1
   34646:	f7ff fe81 	bl	3434c <client_write>
	if (client->unacked_ping >= INT8_MAX) {
   3464a:	f995 3077 	ldrsb.w	r3, [r5, #119]	; 0x77
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   3464e:	4604      	mov	r4, r0
	if (client->unacked_ping >= INT8_MAX) {
   34650:	2b7f      	cmp	r3, #127	; 0x7f
   34652:	d002      	beq.n	3465a <mqtt_ping+0x3e>
		client->unacked_ping++;
   34654:	3301      	adds	r3, #1
   34656:	f885 3077 	strb.w	r3, [r5, #119]	; 0x77
	mqtt_mutex_unlock(client);
   3465a:	4628      	mov	r0, r5
   3465c:	f7ed f93c 	bl	218d8 <mqtt_mutex_unlock>
}
   34660:	4620      	mov	r0, r4
   34662:	b003      	add	sp, #12
   34664:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   34666:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   3466a:	e7f6      	b.n	3465a <mqtt_ping+0x3e>
	NULL_PARAM_CHECK(client);
   3466c:	f06f 0415 	mvn.w	r4, #21
   34670:	e7f6      	b.n	34660 <mqtt_ping+0x44>

00034672 <mqtt_live>:
{
   34672:	b570      	push	{r4, r5, r6, lr}
	NULL_PARAM_CHECK(client);
   34674:	4606      	mov	r6, r0
   34676:	b300      	cbz	r0, 346ba <mqtt_live+0x48>
	mqtt_mutex_lock(client);
   34678:	f7ed f95a 	bl	21930 <mqtt_mutex_lock>
	elapsed_time = mqtt_elapsed_time_in_ms_get(
   3467c:	6974      	ldr	r4, [r6, #20]
   3467e:	f001 f9ba 	bl	359f6 <z_impl_k_uptime_get>
 *
 * @retval Time elapsed since last_activity time.
 */
static inline u32_t mqtt_elapsed_time_in_ms_get(u32_t last_activity)
{
	s32_t diff = k_uptime_get_32() - last_activity;
   34682:	1b00      	subs	r0, r0, r4
	if ((client->keepalive > 0) &&
   34684:	f8b6 4074 	ldrh.w	r4, [r6, #116]	; 0x74

	if (diff < 0) {
		return 0;
   34688:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   3468c:	b19c      	cbz	r4, 346b6 <mqtt_live+0x44>
	    (elapsed_time >= (client->keepalive * 1000))) {
   3468e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   34692:	435c      	muls	r4, r3
	if ((client->keepalive > 0) &&
   34694:	4284      	cmp	r4, r0
   34696:	d80d      	bhi.n	346b4 <mqtt_live+0x42>
		err_code = mqtt_ping(client);
   34698:	4630      	mov	r0, r6
   3469a:	f7ff ffbf 	bl	3461c <mqtt_ping>
		ping_sent = true;
   3469e:	2401      	movs	r4, #1
		err_code = mqtt_ping(client);
   346a0:	4605      	mov	r5, r0
	mqtt_mutex_unlock(client);
   346a2:	4630      	mov	r0, r6
   346a4:	f7ed f918 	bl	218d8 <mqtt_mutex_unlock>
		return -EAGAIN;
   346a8:	2c00      	cmp	r4, #0
   346aa:	bf08      	it	eq
   346ac:	f06f 050a 	mvneq.w	r5, #10
}
   346b0:	4628      	mov	r0, r5
   346b2:	bd70      	pop	{r4, r5, r6, pc}
	bool ping_sent = false;
   346b4:	2400      	movs	r4, #0
	int err_code = 0;
   346b6:	4625      	mov	r5, r4
   346b8:	e7f3      	b.n	346a2 <mqtt_live+0x30>
	NULL_PARAM_CHECK(client);
   346ba:	f06f 0515 	mvn.w	r5, #21
   346be:	e7f7      	b.n	346b0 <mqtt_live+0x3e>

000346c0 <mqtt_input>:
{
   346c0:	b538      	push	{r3, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   346c2:	4605      	mov	r5, r0
   346c4:	b1d0      	cbz	r0, 346fc <mqtt_input+0x3c>
	mqtt_mutex_lock(client);
   346c6:	f7ed f933 	bl	21930 <mqtt_mutex_lock>
	if (MQTT_HAS_STATE(client, MQTT_STATE_TCP_CONNECTED)) {
   346ca:	69ab      	ldr	r3, [r5, #24]
   346cc:	079b      	lsls	r3, r3, #30
   346ce:	d50f      	bpl.n	346f0 <mqtt_input+0x30>
	if (client->internal.remaining_payload > 0) {
   346d0:	6a2b      	ldr	r3, [r5, #32]
   346d2:	b983      	cbnz	r3, 346f6 <mqtt_input+0x36>
	err_code = mqtt_handle_rx(client);
   346d4:	4628      	mov	r0, r5
   346d6:	f7ff fd20 	bl	3411a <mqtt_handle_rx>
	if (err_code < 0) {
   346da:	1e04      	subs	r4, r0, #0
   346dc:	da03      	bge.n	346e6 <mqtt_input+0x26>
		client_disconnect(client, err_code);
   346de:	4621      	mov	r1, r4
   346e0:	4628      	mov	r0, r5
   346e2:	f7ff fe14 	bl	3430e <client_disconnect>
	mqtt_mutex_unlock(client);
   346e6:	4628      	mov	r0, r5
   346e8:	f7ed f8f6 	bl	218d8 <mqtt_mutex_unlock>
}
   346ec:	4620      	mov	r0, r4
   346ee:	bd38      	pop	{r3, r4, r5, pc}
		err_code = -EACCES;
   346f0:	f06f 040c 	mvn.w	r4, #12
   346f4:	e7f7      	b.n	346e6 <mqtt_input+0x26>
		return -EBUSY;
   346f6:	f06f 040f 	mvn.w	r4, #15
   346fa:	e7f4      	b.n	346e6 <mqtt_input+0x26>
	NULL_PARAM_CHECK(client);
   346fc:	f06f 0415 	mvn.w	r4, #21
   34700:	e7f4      	b.n	346ec <mqtt_input+0x2c>

00034702 <mqtt_read_publish_payload_blocking>:
}

int mqtt_read_publish_payload_blocking(struct mqtt_client *client, void *buffer,
				       size_t length)
{
	return read_publish_payload(client, buffer, length, true);
   34702:	2301      	movs	r3, #1
   34704:	f7ff be33 	b.w	3436e <read_publish_payload>

00034708 <mqtt_client_tls_disconnect>:

int mqtt_client_tls_disconnect(struct mqtt_client *client)
{
   34708:	b508      	push	{r3, lr}
	int ret;

	MQTT_TRC("Closing socket %d", client->transport.tls.sock);
	ret = close(client->transport.tls.sock);
   3470a:	6a80      	ldr	r0, [r0, #40]	; 0x28
   3470c:	f7ed f930 	bl	21970 <close>
	if (ret < 0) {
   34710:	2800      	cmp	r0, #0
   34712:	da04      	bge.n	3471e <mqtt_client_tls_disconnect+0x16>
		return -errno;
   34714:	f7ff facd 	bl	33cb2 <__errno>
   34718:	6800      	ldr	r0, [r0, #0]
   3471a:	4240      	negs	r0, r0
	}

	return 0;
}
   3471c:	bd08      	pop	{r3, pc}
	return 0;
   3471e:	2000      	movs	r0, #0
   34720:	e7fc      	b.n	3471c <mqtt_client_tls_disconnect+0x14>

00034722 <gpio_nrfx_write>:
{
   34722:	b510      	push	{r4, lr}
	return port->config->config_info;
   34724:	6804      	ldr	r4, [r0, #0]
   34726:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   34728:	68a4      	ldr	r4, [r4, #8]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   3472a:	2901      	cmp	r1, #1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3472c:	6824      	ldr	r4, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   3472e:	69c0      	ldr	r0, [r0, #28]
   34730:	d103      	bne.n	3473a <gpio_nrfx_write+0x18>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
   34732:	4043      	eors	r3, r0
    p_reg->OUT = value;
   34734:	6063      	str	r3, [r4, #4]
}
   34736:	2000      	movs	r0, #0
   34738:	bd10      	pop	{r4, pc}
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
   3473a:	2101      	movs	r1, #1
   3473c:	3b00      	subs	r3, #0
   3473e:	bf18      	it	ne
   34740:	2301      	movne	r3, #1
   34742:	4091      	lsls	r1, r2
   34744:	fa20 f202 	lsr.w	r2, r0, r2
   34748:	f002 0001 	and.w	r0, r2, #1
   3474c:	4283      	cmp	r3, r0
    p_reg->OUTSET = set_mask;
   3474e:	bf14      	ite	ne
   34750:	60a1      	strne	r1, [r4, #8]
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   34752:	60e1      	streq	r1, [r4, #12]
}
   34754:	e7ef      	b.n	34736 <gpio_nrfx_write+0x14>

00034756 <gpio_nrfx_read>:
{
   34756:	b570      	push	{r4, r5, r6, lr}
   34758:	4604      	mov	r4, r0
	return port->config->config_info;
   3475a:	6800      	ldr	r0, [r0, #0]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   3475c:	68a4      	ldr	r4, [r4, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3475e:	6880      	ldr	r0, [r0, #8]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   34760:	69e4      	ldr	r4, [r4, #28]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   34762:	6806      	ldr	r6, [r0, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
   34764:	2901      	cmp	r1, #1
    return p_reg->DIR;
   34766:	6970      	ldr	r0, [r6, #20]
    return p_reg->IN;
   34768:	6935      	ldr	r5, [r6, #16]
    return p_reg->OUT;
   3476a:	6876      	ldr	r6, [r6, #4]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
   3476c:	ea84 0405 	eor.w	r4, r4, r5
   34770:	ea85 0506 	eor.w	r5, r5, r6
   34774:	ea05 0500 	and.w	r5, r5, r0
   34778:	ea84 0405 	eor.w	r4, r4, r5
		*value = (port_val & BIT(pin)) ? 1 : 0;
   3477c:	bf1c      	itt	ne
   3477e:	fa24 f202 	lsrne.w	r2, r4, r2
   34782:	f002 0401 	andne.w	r4, r2, #1
}
   34786:	2000      	movs	r0, #0
   34788:	601c      	str	r4, [r3, #0]
   3478a:	bd70      	pop	{r4, r5, r6, pc}

0003478c <gpio_nrfx_pin_disable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   3478c:	2901      	cmp	r1, #1
{
   3478e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   34792:	bf18      	it	ne
   34794:	b2d4      	uxtbne	r4, r2
{
   34796:	4605      	mov	r5, r0
		to_pin   = pin;
   34798:	bf12      	itee	ne
   3479a:	4626      	movne	r6, r4
		to_pin   = 31U;
   3479c:	261f      	moveq	r6, #31
		from_pin = 0U;
   3479e:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   347a0:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   347a4:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   347a6:	42b4      	cmp	r4, r6
   347a8:	d902      	bls.n	347b0 <gpio_nrfx_pin_disable_callback+0x24>
	return res;
   347aa:	2000      	movs	r0, #0
}
   347ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   347b0:	68fb      	ldr	r3, [r7, #12]
   347b2:	fa08 f204 	lsl.w	r2, r8, r4
   347b6:	ea23 0302 	bic.w	r3, r3, r2
		res = gpiote_pin_int_cfg(port, curr_pin);
   347ba:	4621      	mov	r1, r4
   347bc:	4628      	mov	r0, r5
		WRITE_BIT(data->int_en, curr_pin, enable);
   347be:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   347c0:	f7ed fb4c 	bl	21e5c <gpiote_pin_int_cfg>
		if (res != 0) {
   347c4:	2800      	cmp	r0, #0
   347c6:	d1f1      	bne.n	347ac <gpio_nrfx_pin_disable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   347c8:	3401      	adds	r4, #1
   347ca:	b2e4      	uxtb	r4, r4
   347cc:	e7eb      	b.n	347a6 <gpio_nrfx_pin_disable_callback+0x1a>

000347ce <gpio_nrfx_pin_enable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
   347ce:	2901      	cmp	r1, #1
{
   347d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
   347d4:	bf18      	it	ne
   347d6:	b2d4      	uxtbne	r4, r2
{
   347d8:	4605      	mov	r5, r0
		to_pin   = pin;
   347da:	bf12      	itee	ne
   347dc:	4626      	movne	r6, r4
		to_pin   = 31U;
   347de:	261f      	moveq	r6, #31
		from_pin = 0U;
   347e0:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
   347e2:	f04f 0801 	mov.w	r8, #1
	struct gpio_nrfx_data *data = get_port_data(port);
   347e6:	6887      	ldr	r7, [r0, #8]
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   347e8:	42b4      	cmp	r4, r6
   347ea:	d902      	bls.n	347f2 <gpio_nrfx_pin_enable_callback+0x24>
	return res;
   347ec:	2000      	movs	r0, #0
}
   347ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
   347f2:	68fb      	ldr	r3, [r7, #12]
   347f4:	fa08 f204 	lsl.w	r2, r8, r4
   347f8:	4313      	orrs	r3, r2
		res = gpiote_pin_int_cfg(port, curr_pin);
   347fa:	4621      	mov	r1, r4
   347fc:	4628      	mov	r0, r5
		WRITE_BIT(data->int_en, curr_pin, enable);
   347fe:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
   34800:	f7ed fb2c 	bl	21e5c <gpiote_pin_int_cfg>
		if (res != 0) {
   34804:	2800      	cmp	r0, #0
   34806:	d1f2      	bne.n	347ee <gpio_nrfx_pin_enable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
   34808:	3401      	adds	r4, #1
   3480a:	b2e4      	uxtb	r4, r4
   3480c:	e7ec      	b.n	347e8 <gpio_nrfx_pin_enable_callback+0x1a>

0003480e <flash_nrf_write_protection>:
}
   3480e:	2000      	movs	r0, #0
   34810:	4770      	bx	lr

00034812 <is_regular_addr_valid>:
{
   34812:	b538      	push	{r3, r4, r5, lr}
   34814:	4604      	mov	r4, r0
   34816:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
   34818:	f000 ffae 	bl	35778 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   3481c:	4284      	cmp	r4, r0
   3481e:	d209      	bcs.n	34834 <is_regular_addr_valid+0x22>
   34820:	2c00      	cmp	r4, #0
   34822:	db07      	blt.n	34834 <is_regular_addr_valid+0x22>
	    addr < 0 ||
   34824:	42a8      	cmp	r0, r5
   34826:	d305      	bcc.n	34834 <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
   34828:	1961      	adds	r1, r4, r5
	    len > flash_size ||
   3482a:	4281      	cmp	r1, r0
   3482c:	bf8c      	ite	hi
   3482e:	2000      	movhi	r0, #0
   34830:	2001      	movls	r0, #1
}
   34832:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   34834:	2000      	movs	r0, #0
   34836:	e7fc      	b.n	34832 <is_regular_addr_valid+0x20>

00034838 <flash_nrf_read>:
{
   34838:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3483a:	460c      	mov	r4, r1
	if (is_regular_addr_valid(addr, len)) {
   3483c:	4619      	mov	r1, r3
   3483e:	4620      	mov	r0, r4
{
   34840:	4615      	mov	r5, r2
	if (is_regular_addr_valid(addr, len)) {
   34842:	9301      	str	r3, [sp, #4]
   34844:	f7ff ffe5 	bl	34812 <is_regular_addr_valid>
   34848:	b180      	cbz	r0, 3486c <flash_nrf_read+0x34>
	if (!len) {
   3484a:	9a01      	ldr	r2, [sp, #4]
   3484c:	b18a      	cbz	r2, 34872 <flash_nrf_read+0x3a>
	if (addr < PM_APP_ADDRESS) {
   3484e:	f5b4 3fe1 	cmp.w	r4, #115200	; 0x1c200
		return spm_request_read(data, addr, len);
   34852:	4621      	mov	r1, r4
   34854:	4628      	mov	r0, r5
	if (addr < PM_APP_ADDRESS) {
   34856:	da04      	bge.n	34862 <flash_nrf_read+0x2a>
}
   34858:	b003      	add	sp, #12
   3485a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		return spm_request_read(data, addr, len);
   3485e:	f7e3 bbbf 	b.w	17fe0 <spm_request_read>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   34862:	f001 f951 	bl	35b08 <memcpy>
   34866:	2000      	movs	r0, #0
}
   34868:	b003      	add	sp, #12
   3486a:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   3486c:	f06f 0015 	mvn.w	r0, #21
   34870:	e7fa      	b.n	34868 <flash_nrf_read+0x30>
		return 0;
   34872:	4610      	mov	r0, r2
   34874:	e7f8      	b.n	34868 <flash_nrf_read+0x30>

00034876 <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(struct device *dev, off_t offs,
				   bool use_addr, struct flash_pages_info *info)
{
   34876:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   3487a:	461e      	mov	r6, r3
	off_t group_offs = 0;
	u32_t num_in_group;
	off_t end = 0;
	size_t layout_size;

	api->page_layout(dev, &layout, &layout_size);
   3487c:	6843      	ldr	r3, [r0, #4]
{
   3487e:	460c      	mov	r4, r1
	api->page_layout(dev, &layout, &layout_size);
   34880:	691b      	ldr	r3, [r3, #16]
   34882:	4669      	mov	r1, sp
{
   34884:	4617      	mov	r7, r2
	api->page_layout(dev, &layout, &layout_size);
   34886:	aa01      	add	r2, sp, #4
   34888:	4798      	blx	r3

	while (layout_size--) {
   3488a:	e9dd 1000 	ldrd	r1, r0, [sp]
   3488e:	2300      	movs	r3, #0
	off_t end = 0;
   34890:	461d      	mov	r5, r3
	off_t group_offs = 0;
   34892:	469e      	mov	lr, r3
	size_t page_count = 0;
   34894:	469c      	mov	ip, r3
   34896:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
	while (layout_size--) {
   3489a:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   3489e:	d102      	bne.n	348a6 <flash_get_page_info+0x30>
		page_count += layout->pages_count;

		layout++;
	}

	return -EINVAL; /* page of the index doesn't exist */
   348a0:	f06f 0015 	mvn.w	r0, #21
   348a4:	e018      	b.n	348d8 <flash_get_page_info+0x62>
		if (use_addr) {
   348a6:	680a      	ldr	r2, [r1, #0]
   348a8:	b1cf      	cbz	r7, 348de <flash_get_page_info+0x68>
			end += layout->pages_count * layout->pages_size;
   348aa:	6848      	ldr	r0, [r1, #4]
   348ac:	fb00 5502 	mla	r5, r0, r2, r5
		if (offs < end) {
   348b0:	42a5      	cmp	r5, r4
   348b2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   348b6:	dd17      	ble.n	348e8 <flash_get_page_info+0x72>
   348b8:	b103      	cbz	r3, 348bc <flash_get_page_info+0x46>
   348ba:	9100      	str	r1, [sp, #0]
			info->size = layout->pages_size;
   348bc:	9b00      	ldr	r3, [sp, #0]
   348be:	685b      	ldr	r3, [r3, #4]
   348c0:	6073      	str	r3, [r6, #4]
			if (use_addr) {
   348c2:	b177      	cbz	r7, 348e2 <flash_get_page_info+0x6c>
				num_in_group = (offs - group_offs) /
   348c4:	eba4 040e 	sub.w	r4, r4, lr
   348c8:	fbb4 f4f3 	udiv	r4, r4, r3
			return 0;
   348cc:	2000      	movs	r0, #0
			info->start_offset = group_offs +
   348ce:	fb04 e303 	mla	r3, r4, r3, lr
			info->index = page_count + num_in_group;
   348d2:	4464      	add	r4, ip
			info->start_offset = group_offs +
   348d4:	6033      	str	r3, [r6, #0]
			info->index = page_count + num_in_group;
   348d6:	60b4      	str	r4, [r6, #8]
}
   348d8:	b002      	add	sp, #8
   348da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			end += layout->pages_count;
   348de:	4415      	add	r5, r2
   348e0:	e7e6      	b.n	348b0 <flash_get_page_info+0x3a>
				num_in_group = offs - page_count;
   348e2:	eba4 040c 	sub.w	r4, r4, ip
   348e6:	e7f1      	b.n	348cc <flash_get_page_info+0x56>
		group_offs += layout->pages_count * layout->pages_size;
   348e8:	684b      	ldr	r3, [r1, #4]
		page_count += layout->pages_count;
   348ea:	4494      	add	ip, r2
		group_offs += layout->pages_count * layout->pages_size;
   348ec:	fb03 ee02 	mla	lr, r3, r2, lr
		layout++;
   348f0:	3108      	adds	r1, #8
   348f2:	2301      	movs	r3, #1
   348f4:	e7d1      	b.n	3489a <flash_get_page_info+0x24>

000348f6 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(struct device *dev, off_t offs,
				      struct flash_pages_info *info)
{
   348f6:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, true, info);
   348f8:	2201      	movs	r2, #1
   348fa:	f7ff bfbc 	b.w	34876 <flash_get_page_info>

000348fe <flash_page_foreach>:

	return count;
}

void flash_page_foreach(struct device *dev, flash_page_cb cb, void *data)
{
   348fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_driver_api *api = dev->driver_api;
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;
   34902:	2400      	movs	r4, #0

	api->page_layout(dev, &layout, &num_blocks);
   34904:	6843      	ldr	r3, [r0, #4]
{
   34906:	b086      	sub	sp, #24
   34908:	4688      	mov	r8, r1
   3490a:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   3490c:	691b      	ldr	r3, [r3, #16]
   3490e:	aa02      	add	r2, sp, #8
   34910:	a901      	add	r1, sp, #4
   34912:	4798      	blx	r3
	size_t block, num_blocks, page = 0, i;
   34914:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   34916:	4625      	mov	r5, r4
   34918:	9b02      	ldr	r3, [sp, #8]
   3491a:	42ab      	cmp	r3, r5
   3491c:	d802      	bhi.n	34924 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   3491e:	b006      	add	sp, #24
   34920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = 0; i < l->pages_count; i++) {
   34924:	2600      	movs	r6, #0
		const struct flash_pages_layout *l = &layout[block];
   34926:	9f01      	ldr	r7, [sp, #4]
   34928:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		page_info.size = l->pages_size;
   3492c:	687b      	ldr	r3, [r7, #4]
   3492e:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   34930:	683a      	ldr	r2, [r7, #0]
   34932:	eb0a 0306 	add.w	r3, sl, r6
   34936:	42b2      	cmp	r2, r6
   34938:	d802      	bhi.n	34940 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   3493a:	469a      	mov	sl, r3
   3493c:	3501      	adds	r5, #1
   3493e:	e7eb      	b.n	34918 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   34940:	4649      	mov	r1, r9
   34942:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   34944:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   34946:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   34948:	47c0      	blx	r8
   3494a:	2800      	cmp	r0, #0
   3494c:	d0e7      	beq.n	3491e <flash_page_foreach+0x20>
			off += page_info.size;
   3494e:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   34950:	3601      	adds	r6, #1
			off += page_info.size;
   34952:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   34954:	e7ec      	b.n	34930 <flash_page_foreach+0x32>

00034956 <uarte_nrfx_isr_int>:
	if (data->int_driven->disable_tx_irq &&
   34956:	6882      	ldr	r2, [r0, #8]
	return dev->config->config_info;
   34958:	6803      	ldr	r3, [r0, #0]
	if (data->int_driven->disable_tx_irq &&
   3495a:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   3495c:	689b      	ldr	r3, [r3, #8]
	if (data->int_driven->disable_tx_irq &&
   3495e:	7b91      	ldrb	r1, [r2, #14]
	return config->uarte_regs;
   34960:	681b      	ldr	r3, [r3, #0]
	if (data->int_driven->disable_tx_irq &&
   34962:	b159      	cbz	r1, 3497c <uarte_nrfx_isr_int+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   34964:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   34968:	b141      	cbz	r1, 3497c <uarte_nrfx_isr_int+0x26>
    p_reg->INTENCLR = mask;
   3496a:	f44f 7180 	mov.w	r1, #256	; 0x100
   3496e:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   34972:	2101      	movs	r1, #1
   34974:	60d9      	str	r1, [r3, #12]
		data->int_driven->disable_tx_irq = false;
   34976:	2300      	movs	r3, #0
   34978:	7393      	strb	r3, [r2, #14]
		return;
   3497a:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3497c:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   34980:	b111      	cbz	r1, 34988 <uarte_nrfx_isr_int+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   34982:	2100      	movs	r1, #0
   34984:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   34988:	6813      	ldr	r3, [r2, #0]
   3498a:	b10b      	cbz	r3, 34990 <uarte_nrfx_isr_int+0x3a>
		data->int_driven->cb(data->int_driven->cb_data);
   3498c:	6850      	ldr	r0, [r2, #4]
   3498e:	4718      	bx	r3
}
   34990:	4770      	bx	lr

00034992 <uarte_nrfx_config_get>:
{
   34992:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   34994:	6882      	ldr	r2, [r0, #8]
   34996:	e892 0003 	ldmia.w	r2, {r0, r1}
   3499a:	e883 0003 	stmia.w	r3, {r0, r1}
}
   3499e:	2000      	movs	r0, #0
   349a0:	4770      	bx	lr

000349a2 <uarte_nrfx_err_check>:
	return dev->config->config_info;
   349a2:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   349a4:	689b      	ldr	r3, [r3, #8]
   349a6:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   349a8:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   349ac:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   349b0:	4770      	bx	lr

000349b2 <uarte_nrfx_poll_in>:
	return dev->config->config_info;
   349b2:	6803      	ldr	r3, [r0, #0]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   349b4:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
   349b6:	689b      	ldr	r3, [r3, #8]
   349b8:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   349ba:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   349be:	b138      	cbz	r0, 349d0 <uarte_nrfx_poll_in+0x1e>
	*c = data->rx_data;
   349c0:	7b12      	ldrb	r2, [r2, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   349c2:	2000      	movs	r0, #0
   349c4:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   349c6:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   349c8:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   349cc:	601a      	str	r2, [r3, #0]
	return 0;
   349ce:	4770      	bx	lr
		return -1;
   349d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   349d4:	4770      	bx	lr

000349d6 <uarte_nrfx_poll_out>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   349d6:	2200      	movs	r2, #0
	return dev->config->config_info;
   349d8:	6803      	ldr	r3, [r0, #0]
{
   349da:	b082      	sub	sp, #8
	return config->uarte_regs;
   349dc:	689b      	ldr	r3, [r3, #8]
{
   349de:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
   349e2:	681b      	ldr	r3, [r3, #0]
   349e4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   349e8:	f10d 0207 	add.w	r2, sp, #7
   349ec:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   349f0:	2201      	movs	r2, #1
   349f2:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   349f6:	609a      	str	r2, [r3, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   349f8:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   349fc:	2900      	cmp	r1, #0
   349fe:	d0fb      	beq.n	349f8 <uarte_nrfx_poll_out+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   34a00:	60da      	str	r2, [r3, #12]
}
   34a02:	b002      	add	sp, #8
   34a04:	4770      	bx	lr

00034a06 <uarte_nrfx_fifo_fill>:
	return dev->config->config_info;
   34a06:	6803      	ldr	r3, [r0, #0]
{
   34a08:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   34a0a:	689b      	ldr	r3, [r3, #8]
{
   34a0c:	4605      	mov	r5, r0
	return config->uarte_regs;
   34a0e:	681c      	ldr	r4, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   34a10:	f8d4 0120 	ldr.w	r0, [r4, #288]	; 0x120
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   34a14:	b190      	cbz	r0, 34a3c <uarte_nrfx_fifo_fill+0x36>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   34a16:	68ad      	ldr	r5, [r5, #8]
	if (len > data->int_driven->tx_buff_size) {
   34a18:	68ab      	ldr	r3, [r5, #8]
   34a1a:	8998      	ldrh	r0, [r3, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   34a1c:	2300      	movs	r3, #0
   34a1e:	4290      	cmp	r0, r2
   34a20:	bfa8      	it	ge
   34a22:	4610      	movge	r0, r2
   34a24:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
	for (int i = 0; i < len; i++) {
   34a28:	68aa      	ldr	r2, [r5, #8]
   34a2a:	4283      	cmp	r3, r0
   34a2c:	6892      	ldr	r2, [r2, #8]
   34a2e:	db06      	blt.n	34a3e <uarte_nrfx_fifo_fill+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   34a30:	2301      	movs	r3, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   34a32:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   34a36:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   34a3a:	60a3      	str	r3, [r4, #8]
}
   34a3c:	bd70      	pop	{r4, r5, r6, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   34a3e:	5cce      	ldrb	r6, [r1, r3]
   34a40:	54d6      	strb	r6, [r2, r3]
	for (int i = 0; i < len; i++) {
   34a42:	3301      	adds	r3, #1
   34a44:	e7f0      	b.n	34a28 <uarte_nrfx_fifo_fill+0x22>

00034a46 <uarte_nrfx_fifo_read>:
	return dev->config->config_info;
   34a46:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   34a48:	689b      	ldr	r3, [r3, #8]
   34a4a:	681a      	ldr	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   34a4c:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   34a50:	b143      	cbz	r3, 34a64 <uarte_nrfx_fifo_read+0x1e>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   34a52:	6883      	ldr	r3, [r0, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   34a54:	2000      	movs	r0, #0
   34a56:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   34a5a:	2001      	movs	r0, #1
		rx_data[num_rx++] = (u8_t)data->rx_data;
   34a5c:	7b1b      	ldrb	r3, [r3, #12]
   34a5e:	700b      	strb	r3, [r1, #0]
   34a60:	6010      	str	r0, [r2, #0]
}
   34a62:	4770      	bx	lr
	int num_rx = 0;
   34a64:	4618      	mov	r0, r3
}
   34a66:	4770      	bx	lr

00034a68 <uarte_nrfx_irq_tx_enable>:
	data->int_driven->disable_tx_irq = false;
   34a68:	2100      	movs	r1, #0
	return dev->config->config_info;
   34a6a:	6803      	ldr	r3, [r0, #0]
	data->int_driven->disable_tx_irq = false;
   34a6c:	6882      	ldr	r2, [r0, #8]
	return config->uarte_regs;
   34a6e:	689b      	ldr	r3, [r3, #8]
	data->int_driven->disable_tx_irq = false;
   34a70:	6892      	ldr	r2, [r2, #8]
	return config->uarte_regs;
   34a72:	681b      	ldr	r3, [r3, #0]
	data->int_driven->disable_tx_irq = false;
   34a74:	7391      	strb	r1, [r2, #14]
    p_reg->INTENSET = mask;
   34a76:	f44f 7280 	mov.w	r2, #256	; 0x100
   34a7a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   34a7e:	4770      	bx	lr

00034a80 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   34a80:	2201      	movs	r2, #1
   34a82:	6883      	ldr	r3, [r0, #8]
   34a84:	689b      	ldr	r3, [r3, #8]
   34a86:	739a      	strb	r2, [r3, #14]
}
   34a88:	4770      	bx	lr

00034a8a <uarte_nrfx_irq_tx_ready_complete>:
	return dev->config->config_info;
   34a8a:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   34a8c:	689b      	ldr	r3, [r3, #8]
   34a8e:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   34a90:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   34a94:	b118      	cbz	r0, 34a9e <uarte_nrfx_irq_tx_ready_complete+0x14>
    return p_reg->INTENSET & mask;
   34a96:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
   34a9a:	f3c0 2000 	ubfx	r0, r0, #8, #1
}
   34a9e:	4770      	bx	lr

00034aa0 <uarte_nrfx_irq_rx_ready>:
	return dev->config->config_info;
   34aa0:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   34aa2:	689b      	ldr	r3, [r3, #8]
   34aa4:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   34aa6:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   34aaa:	3800      	subs	r0, #0
   34aac:	bf18      	it	ne
   34aae:	2001      	movne	r0, #1
   34ab0:	4770      	bx	lr

00034ab2 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   34ab2:	2210      	movs	r2, #16
	return dev->config->config_info;
   34ab4:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   34ab6:	689b      	ldr	r3, [r3, #8]
   34ab8:	681b      	ldr	r3, [r3, #0]
   34aba:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   34abe:	4770      	bx	lr

00034ac0 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   34ac0:	2210      	movs	r2, #16
	return dev->config->config_info;
   34ac2:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   34ac4:	689b      	ldr	r3, [r3, #8]
   34ac6:	681b      	ldr	r3, [r3, #0]
   34ac8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   34acc:	4770      	bx	lr

00034ace <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   34ace:	f44f 7200 	mov.w	r2, #512	; 0x200
	return dev->config->config_info;
   34ad2:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   34ad4:	689b      	ldr	r3, [r3, #8]
   34ad6:	681b      	ldr	r3, [r3, #0]
   34ad8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   34adc:	4770      	bx	lr

00034ade <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   34ade:	f44f 7200 	mov.w	r2, #512	; 0x200
	return dev->config->config_info;
   34ae2:	6803      	ldr	r3, [r0, #0]
	return config->uarte_regs;
   34ae4:	689b      	ldr	r3, [r3, #8]
   34ae6:	681b      	ldr	r3, [r3, #0]
   34ae8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   34aec:	4770      	bx	lr

00034aee <uarte_nrfx_irq_update>:
}
   34aee:	2001      	movs	r0, #1
   34af0:	4770      	bx	lr

00034af2 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   34af2:	6883      	ldr	r3, [r0, #8]
   34af4:	689b      	ldr	r3, [r3, #8]
	data->int_driven->cb_data = cb_data;
   34af6:	e9c3 1200 	strd	r1, r2, [r3]
}
   34afa:	4770      	bx	lr

00034afc <uarte_nrfx_irq_is_pending>:
{
   34afc:	b508      	push	{r3, lr}
	return dev->config->config_info;
   34afe:	6803      	ldr	r3, [r0, #0]
{
   34b00:	4602      	mov	r2, r0
	return config->uarte_regs;
   34b02:	689b      	ldr	r3, [r3, #8]
   34b04:	6819      	ldr	r1, [r3, #0]
    return p_reg->INTENSET & mask;
   34b06:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
		||
   34b0a:	05db      	lsls	r3, r3, #23
   34b0c:	d405      	bmi.n	34b1a <uarte_nrfx_irq_is_pending+0x1e>
   34b0e:	f8d1 0304 	ldr.w	r0, [r1, #772]	; 0x304
   34b12:	f010 0010 	ands.w	r0, r0, #16
   34b16:	d106      	bne.n	34b26 <uarte_nrfx_irq_is_pending+0x2a>
}
   34b18:	bd08      	pop	{r3, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   34b1a:	f7ff ffb6 	bl	34a8a <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_ENDTX_MASK) &&
   34b1e:	2800      	cmp	r0, #0
   34b20:	d0f5      	beq.n	34b0e <uarte_nrfx_irq_is_pending+0x12>
		||
   34b22:	2001      	movs	r0, #1
   34b24:	e7f8      	b.n	34b18 <uarte_nrfx_irq_is_pending+0x1c>
		 uarte_nrfx_irq_rx_ready(dev)));
   34b26:	4610      	mov	r0, r2
   34b28:	f7ff ffba 	bl	34aa0 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   34b2c:	3800      	subs	r0, #0
   34b2e:	bf18      	it	ne
   34b30:	2001      	movne	r0, #1
   34b32:	e7f1      	b.n	34b18 <uarte_nrfx_irq_is_pending+0x1c>

00034b34 <entropy_cc310_rng_init>:
{
	/* No initialization is required */
	(void)dev;

	return 0;
}
   34b34:	2000      	movs	r0, #0
   34b36:	4770      	bx	lr

00034b38 <parse_hex4>:
    for (i = 0; i < 4; i++)
   34b38:	2200      	movs	r2, #0
{
   34b3a:	b510      	push	{r4, lr}
   34b3c:	4604      	mov	r4, r0
    unsigned int h = 0;
   34b3e:	4610      	mov	r0, r2
        if ((input[i] >= '0') && (input[i] <= '9'))
   34b40:	5ca1      	ldrb	r1, [r4, r2]
   34b42:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   34b46:	2b09      	cmp	r3, #9
   34b48:	d80b      	bhi.n	34b62 <parse_hex4+0x2a>
            h += (unsigned int) input[i] - '0';
   34b4a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
        if (i < 3)
   34b4e:	2a03      	cmp	r2, #3
            h += (unsigned int) 10 + input[i] - 'a';
   34b50:	eb01 0003 	add.w	r0, r1, r3
    for (i = 0; i < 4; i++)
   34b54:	f102 0201 	add.w	r2, r2, #1
            h = h << 4;
   34b58:	bf18      	it	ne
   34b5a:	0100      	lslne	r0, r0, #4
    for (i = 0; i < 4; i++)
   34b5c:	2a04      	cmp	r2, #4
   34b5e:	d1ef      	bne.n	34b40 <parse_hex4+0x8>
}
   34b60:	bd10      	pop	{r4, pc}
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
   34b62:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
   34b66:	2b05      	cmp	r3, #5
   34b68:	d802      	bhi.n	34b70 <parse_hex4+0x38>
            h += (unsigned int) 10 + input[i] - 'A';
   34b6a:	f1a0 0337 	sub.w	r3, r0, #55	; 0x37
   34b6e:	e7ee      	b.n	34b4e <parse_hex4+0x16>
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
   34b70:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
   34b74:	2b05      	cmp	r3, #5
   34b76:	d802      	bhi.n	34b7e <parse_hex4+0x46>
            h += (unsigned int) 10 + input[i] - 'a';
   34b78:	f1a0 0357 	sub.w	r3, r0, #87	; 0x57
   34b7c:	e7e7      	b.n	34b4e <parse_hex4+0x16>
            return 0;
   34b7e:	2000      	movs	r0, #0
   34b80:	e7ee      	b.n	34b60 <parse_hex4+0x28>

00034b82 <buffer_skip_whitespace>:
{
   34b82:	b510      	push	{r4, lr}
    if ((buffer == NULL) || (buffer->content == NULL))
   34b84:	b140      	cbz	r0, 34b98 <buffer_skip_whitespace+0x16>
   34b86:	6801      	ldr	r1, [r0, #0]
   34b88:	b171      	cbz	r1, 34ba8 <buffer_skip_whitespace+0x26>
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
   34b8a:	6842      	ldr	r2, [r0, #4]
   34b8c:	6883      	ldr	r3, [r0, #8]
   34b8e:	4293      	cmp	r3, r2
   34b90:	d206      	bcs.n	34ba0 <buffer_skip_whitespace+0x1e>
   34b92:	5ccc      	ldrb	r4, [r1, r3]
   34b94:	2c20      	cmp	r4, #32
   34b96:	d900      	bls.n	34b9a <buffer_skip_whitespace+0x18>
}
   34b98:	bd10      	pop	{r4, pc}
       buffer->offset++;
   34b9a:	3301      	adds	r3, #1
   34b9c:	6083      	str	r3, [r0, #8]
   34b9e:	e7f5      	b.n	34b8c <buffer_skip_whitespace+0xa>
    if (buffer->offset == buffer->length)
   34ba0:	d1fa      	bne.n	34b98 <buffer_skip_whitespace+0x16>
        buffer->offset--;
   34ba2:	3a01      	subs	r2, #1
   34ba4:	6082      	str	r2, [r0, #8]
   34ba6:	e7f7      	b.n	34b98 <buffer_skip_whitespace+0x16>
        return NULL;
   34ba8:	4608      	mov	r0, r1
   34baa:	e7f5      	b.n	34b98 <buffer_skip_whitespace+0x16>

00034bac <cJSON_New_Item.isra.0>:
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
   34bac:	4603      	mov	r3, r0
   34bae:	b510      	push	{r4, lr}
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
   34bb0:	2028      	movs	r0, #40	; 0x28
   34bb2:	4798      	blx	r3
    if (node)
   34bb4:	4604      	mov	r4, r0
   34bb6:	b118      	cbz	r0, 34bc0 <cJSON_New_Item.isra.0+0x14>
__ssp_bos_icheck3(memset, void *, int)
   34bb8:	2228      	movs	r2, #40	; 0x28
   34bba:	2100      	movs	r1, #0
   34bbc:	f000 ffc4 	bl	35b48 <memset>
}
   34bc0:	4620      	mov	r0, r4
   34bc2:	bd10      	pop	{r4, pc}

00034bc4 <cJSON_Parse>:
    return cJSON_ParseWithOpts(value, 0, 0);
   34bc4:	2200      	movs	r2, #0
   34bc6:	4611      	mov	r1, r2
   34bc8:	f7ed be3e 	b.w	22848 <cJSON_ParseWithOpts>

00034bcc <cJSON_GetObjectItemCaseSensitive>:
    return get_object_item(object, string, false);
}

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string)
{
    return get_object_item(object, string, true);
   34bcc:	2201      	movs	r2, #1
   34bce:	f7ed bddf 	b.w	22790 <get_object_item>

00034bd2 <cJSON_IsNumber>:
    return (item->type & 0xFF) == cJSON_NULL;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
    if (item == NULL)
   34bd2:	b120      	cbz	r0, 34bde <cJSON_IsNumber+0xc>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_Number;
   34bd4:	7b00      	ldrb	r0, [r0, #12]
   34bd6:	f1a0 0308 	sub.w	r3, r0, #8
   34bda:	4258      	negs	r0, r3
   34bdc:	4158      	adcs	r0, r3
}
   34bde:	4770      	bx	lr

00034be0 <cJSON_IsString>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item)
{
    if (item == NULL)
   34be0:	b120      	cbz	r0, 34bec <cJSON_IsString+0xc>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_String;
   34be2:	7b00      	ldrb	r0, [r0, #12]
   34be4:	f1a0 0310 	sub.w	r3, r0, #16
   34be8:	4258      	negs	r0, r3
   34bea:	4158      	adcs	r0, r3
}
   34bec:	4770      	bx	lr

00034bee <cJSON_GetStringValue>:
CJSON_PUBLIC(char *) cJSON_GetStringValue(cJSON *item) {
   34bee:	b508      	push	{r3, lr}
   34bf0:	4602      	mov	r2, r0
    if (!cJSON_IsString(item)) {
   34bf2:	f7ff fff5 	bl	34be0 <cJSON_IsString>
   34bf6:	b100      	cbz	r0, 34bfa <cJSON_GetStringValue+0xc>
    return item->valuestring;
   34bf8:	6910      	ldr	r0, [r2, #16]
}
   34bfa:	bd08      	pop	{r3, pc}

00034bfc <cJSON_IsObject>:
    return (item->type & 0xFF) == cJSON_Array;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsObject(const cJSON * const item)
{
    if (item == NULL)
   34bfc:	b120      	cbz	r0, 34c08 <cJSON_IsObject+0xc>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_Object;
   34bfe:	7b00      	ldrb	r0, [r0, #12]
   34c00:	f1a0 0340 	sub.w	r3, r0, #64	; 0x40
   34c04:	4258      	negs	r0, r3
   34c06:	4158      	adcs	r0, r3
}
   34c08:	4770      	bx	lr

00034c0a <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   34c0a:	4668      	mov	r0, sp
   34c0c:	f020 0107 	bic.w	r1, r0, #7
   34c10:	468d      	mov	sp, r1
   34c12:	b501      	push	{r0, lr}
	bsd_os_trace_irq_handler();
   34c14:	f7f3 fcea 	bl	285ec <bsd_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   34c18:	f7eb fc70 	bl	204fc <_arch_isr_direct_pm>
   34c1c:	f7eb fb92 	bl	20344 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   34c20:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   34c24:	4685      	mov	sp, r0
   34c26:	4770      	bx	lr

00034c28 <ipc_proxy_irq_handler>:
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   34c28:	4668      	mov	r0, sp
   34c2a:	f020 0107 	bic.w	r1, r0, #7
   34c2e:	468d      	mov	sp, r1
   34c30:	b501      	push	{r0, lr}
	IPC_IRQHandler();
   34c32:	f7f4 f8d3 	bl	28ddc <IPC_IRQHandler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   34c36:	f7eb fc61 	bl	204fc <_arch_isr_direct_pm>
   34c3a:	f7eb fb83 	bl	20344 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   34c3e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   34c42:	4685      	mov	sp, r0
   34c44:	4770      	bx	lr

00034c46 <trace_task_create>:
{
   34c46:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   34c48:	201d      	movs	r0, #29
   34c4a:	2200      	movs	r2, #0
   34c4c:	2106      	movs	r1, #6
   34c4e:	f7eb fc23 	bl	20498 <z_arm_irq_priority_set>
}
   34c52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(TRACE_IRQ);
   34c56:	201d      	movs	r0, #29
   34c58:	f7eb bc0e 	b.w	20478 <arch_irq_enable>

00034c5c <read_task_create>:
{
   34c5c:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_APPLICATION_IRQ, BSD_APPLICATION_IRQ_PRIORITY,
   34c5e:	201c      	movs	r0, #28
   34c60:	2200      	movs	r2, #0
   34c62:	2106      	movs	r1, #6
   34c64:	f7eb fc18 	bl	20498 <z_arm_irq_priority_set>
}
   34c68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(BSD_APPLICATION_IRQ);
   34c6c:	201c      	movs	r0, #28
   34c6e:	f7eb bc03 	b.w	20478 <arch_irq_enable>

00034c72 <bsd_os_trace_put>:
		remaining_bytes -= transfer_len;
	}
#endif

	return 0;
}
   34c72:	2000      	movs	r0, #0
   34c74:	4770      	bx	lr

00034c76 <z_to_nrf_flags>:
{
   34c76:	4603      	mov	r3, r0
		nrf_flags |= NRF_MSG_DONTWAIT;
   34c78:	f010 0040 	ands.w	r0, r0, #64	; 0x40
   34c7c:	bf18      	it	ne
   34c7e:	2002      	movne	r0, #2
	if (z_flags & MSG_PEEK) {
   34c80:	079b      	lsls	r3, r3, #30
		nrf_flags |= NRF_MSG_PEEK;
   34c82:	bf48      	it	mi
   34c84:	f040 0008 	orrmi.w	r0, r0, #8
}
   34c88:	4770      	bx	lr

00034c8a <z_to_nrf_family>:
	switch (z_family) {
   34c8a:	2803      	cmp	r0, #3
   34c8c:	d010      	beq.n	34cb0 <z_to_nrf_family+0x26>
   34c8e:	d807      	bhi.n	34ca0 <z_to_nrf_family+0x16>
   34c90:	2801      	cmp	r0, #1
   34c92:	d00f      	beq.n	34cb4 <z_to_nrf_family+0x2a>
   34c94:	2802      	cmp	r0, #2
   34c96:	bf14      	ite	ne
   34c98:	f06f 0069 	mvnne.w	r0, #105	; 0x69
   34c9c:	200a      	moveq	r0, #10
   34c9e:	4770      	bx	lr
   34ca0:	2866      	cmp	r0, #102	; 0x66
   34ca2:	d008      	beq.n	34cb6 <z_to_nrf_family+0x2c>
   34ca4:	2867      	cmp	r0, #103	; 0x67
		return NRF_AF_LOCAL;
   34ca6:	bf14      	ite	ne
   34ca8:	f06f 0069 	mvnne.w	r0, #105	; 0x69
   34cac:	2001      	moveq	r0, #1
   34cae:	4770      	bx	lr
		return NRF_AF_PACKET;
   34cb0:	2005      	movs	r0, #5
   34cb2:	4770      	bx	lr
		return NRF_AF_INET;
   34cb4:	2002      	movs	r0, #2
}
   34cb6:	4770      	bx	lr

00034cb8 <z_to_nrf_protocol>:
	switch (proto) {
   34cb8:	f240 1311 	movw	r3, #273	; 0x111
   34cbc:	4298      	cmp	r0, r3
   34cbe:	d023      	beq.n	34d08 <z_to_nrf_protocol+0x50>
   34cc0:	f5b0 7f89 	cmp.w	r0, #274	; 0x112
   34cc4:	da11      	bge.n	34cea <z_to_nrf_protocol+0x32>
   34cc6:	2811      	cmp	r0, #17
   34cc8:	d021      	beq.n	34d0e <z_to_nrf_protocol+0x56>
   34cca:	dc06      	bgt.n	34cda <z_to_nrf_protocol+0x22>
   34ccc:	b300      	cbz	r0, 34d10 <z_to_nrf_protocol+0x58>
		return NRF_IPPROTO_TCP;
   34cce:	2806      	cmp	r0, #6
   34cd0:	bf14      	ite	ne
   34cd2:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   34cd6:	2001      	moveq	r0, #1
   34cd8:	4770      	bx	lr
		return NRF_SPROTO_TLS1v2;
   34cda:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   34cde:	bf14      	ite	ne
   34ce0:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   34ce4:	f44f 7082 	moveq.w	r0, #260	; 0x104
   34ce8:	4770      	bx	lr
	switch (proto) {
   34cea:	f240 2302 	movw	r3, #514	; 0x202
   34cee:	4298      	cmp	r0, r3
   34cf0:	d00e      	beq.n	34d10 <z_to_nrf_protocol+0x58>
   34cf2:	f240 2303 	movw	r3, #515	; 0x203
   34cf6:	4298      	cmp	r0, r3
   34cf8:	d00a      	beq.n	34d10 <z_to_nrf_protocol+0x58>
   34cfa:	f240 2301 	movw	r3, #513	; 0x201
		return -EPROTONOSUPPORT;
   34cfe:	4298      	cmp	r0, r3
   34d00:	bf18      	it	ne
   34d02:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   34d06:	4770      	bx	lr
		return NRF_SPROTO_DTLS1v2;
   34d08:	f44f 7087 	mov.w	r0, #270	; 0x10e
   34d0c:	4770      	bx	lr
	switch (proto) {
   34d0e:	2002      	movs	r0, #2
}
   34d10:	4770      	bx	lr

00034d12 <nrf91_bsdlib_socket_offload_init>:
}
   34d12:	2000      	movs	r0, #0
   34d14:	4770      	bx	lr

00034d16 <nrf91_socket_offload_freeaddrinfo>:
{
   34d16:	b538      	push	{r3, r4, r5, lr}
   34d18:	4604      	mov	r4, r0
	while (next != NULL) {
   34d1a:	b904      	cbnz	r4, 34d1e <nrf91_socket_offload_freeaddrinfo+0x8>
}
   34d1c:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   34d1e:	6960      	ldr	r0, [r4, #20]
		next = next->ai_next;
   34d20:	69e5      	ldr	r5, [r4, #28]
		k_free(this->ai_addr);
   34d22:	f000 fd47 	bl	357b4 <k_free>
		k_free(this);
   34d26:	4620      	mov	r0, r4
   34d28:	f000 fd44 	bl	357b4 <k_free>
		next = next->ai_next;
   34d2c:	462c      	mov	r4, r5
   34d2e:	e7f4      	b.n	34d1a <nrf91_socket_offload_freeaddrinfo+0x4>

00034d30 <z_to_nrf_addrinfo_hints>:
{
   34d30:	b538      	push	{r3, r4, r5, lr}
   34d32:	460c      	mov	r4, r1
   34d34:	4605      	mov	r5, r0
   34d36:	221c      	movs	r2, #28
   34d38:	2100      	movs	r1, #0
   34d3a:	1d20      	adds	r0, r4, #4
   34d3c:	f000 ff04 	bl	35b48 <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   34d40:	2300      	movs	r3, #0
   34d42:	6023      	str	r3, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   34d44:	68ab      	ldr	r3, [r5, #8]
	switch (socktype) {
   34d46:	2b03      	cmp	r3, #3
   34d48:	d003      	beq.n	34d52 <z_to_nrf_addrinfo_hints+0x22>
   34d4a:	2b04      	cmp	r3, #4
   34d4c:	bf08      	it	eq
   34d4e:	f44f 7300 	moveq.w	r3, #512	; 0x200
	family = z_to_nrf_family(z_in->ai_family);
   34d52:	88a8      	ldrh	r0, [r5, #4]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   34d54:	60a3      	str	r3, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   34d56:	f7ff ff98 	bl	34c8a <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   34d5a:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
   34d5e:	d00b      	beq.n	34d78 <z_to_nrf_addrinfo_hints+0x48>
	nrf_out->ai_family = family;
   34d60:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   34d62:	68e8      	ldr	r0, [r5, #12]
   34d64:	f7ff ffa8 	bl	34cb8 <z_to_nrf_protocol>
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   34d68:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   34d6c:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   34d6e:	d003      	beq.n	34d78 <z_to_nrf_addrinfo_hints+0x48>
	if (z_in->ai_canonname != NULL) {
   34d70:	69a8      	ldr	r0, [r5, #24]
   34d72:	b108      	cbz	r0, 34d78 <z_to_nrf_addrinfo_hints+0x48>
		nrf_out->ai_canonname = z_in->ai_canonname;
   34d74:	61a0      	str	r0, [r4, #24]
	return 0;
   34d76:	2000      	movs	r0, #0
}
   34d78:	bd38      	pop	{r3, r4, r5, pc}

00034d7a <nrf91_socket_offload_send>:
{
   34d7a:	b510      	push	{r4, lr}
   34d7c:	4604      	mov	r4, r0
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   34d7e:	4618      	mov	r0, r3
   34d80:	f7ff ff79 	bl	34c76 <z_to_nrf_flags>
   34d84:	4603      	mov	r3, r0
   34d86:	4620      	mov	r0, r4
}
   34d88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return nrf_send(sd, buf, len, z_to_nrf_flags(flags));
   34d8c:	f7f5 bd6e 	b.w	2a86c <nrf_send>

00034d90 <nrf91_socket_offload_recv>:
{
   34d90:	b510      	push	{r4, lr}
   34d92:	4604      	mov	r4, r0
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   34d94:	4618      	mov	r0, r3
   34d96:	f7ff ff6e 	bl	34c76 <z_to_nrf_flags>
   34d9a:	4603      	mov	r3, r0
   34d9c:	4620      	mov	r0, r4
}
   34d9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return nrf_recv(sd, buf, max_len, z_to_nrf_flags(flags));
   34da2:	f7f5 bd99 	b.w	2a8d8 <nrf_recv>

00034da6 <nrf91_socket_offload_getsockopt>:
{
   34da6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   34daa:	461d      	mov	r5, r3
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   34dac:	2300      	movs	r3, #0
{
   34dae:	b086      	sub	sp, #24
   34db0:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_rcvtimeo = {0, 0};
   34db4:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   34db8:	f8d8 3000 	ldr.w	r3, [r8]
{
   34dbc:	4607      	mov	r7, r0
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   34dbe:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   34dc0:	f240 2302 	movw	r3, #514	; 0x202
   34dc4:	4299      	cmp	r1, r3
{
   34dc6:	460c      	mov	r4, r1
   34dc8:	4616      	mov	r6, r2
	switch (z_in_level) {
   34dca:	d005      	beq.n	34dd8 <nrf91_socket_offload_getsockopt+0x32>
   34dcc:	dc2e      	bgt.n	34e2c <nrf91_socket_offload_getsockopt+0x86>
   34dce:	2901      	cmp	r1, #1
   34dd0:	d002      	beq.n	34dd8 <nrf91_socket_offload_getsockopt+0x32>
   34dd2:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   34dd6:	d139      	bne.n	34e4c <nrf91_socket_offload_getsockopt+0xa6>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   34dd8:	4631      	mov	r1, r6
   34dda:	4620      	mov	r0, r4
   34ddc:	aa02      	add	r2, sp, #8
   34dde:	f7ee f841 	bl	22e64 <z_to_nrf_optname>
   34de2:	2800      	cmp	r0, #0
   34de4:	db32      	blt.n	34e4c <nrf91_socket_offload_getsockopt+0xa6>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   34de6:	2c01      	cmp	r4, #1
   34de8:	d124      	bne.n	34e34 <nrf91_socket_offload_getsockopt+0x8e>
   34dea:	2e14      	cmp	r6, #20
   34dec:	d122      	bne.n	34e34 <nrf91_socket_offload_getsockopt+0x8e>
		nrf_optlen = sizeof(struct nrf_timeval);
   34dee:	2308      	movs	r3, #8
   34df0:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_rcvtimeo;
   34df2:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   34df4:	aa03      	add	r2, sp, #12
   34df6:	4638      	mov	r0, r7
   34df8:	9200      	str	r2, [sp, #0]
   34dfa:	4621      	mov	r1, r4
   34dfc:	9a02      	ldr	r2, [sp, #8]
   34dfe:	f7f5 fdeb 	bl	2a9d8 <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   34e02:	4607      	mov	r7, r0
   34e04:	b970      	cbnz	r0, 34e24 <nrf91_socket_offload_getsockopt+0x7e>
   34e06:	b16d      	cbz	r5, 34e24 <nrf91_socket_offload_getsockopt+0x7e>
		*optlen = nrf_optlen;
   34e08:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   34e0a:	2c01      	cmp	r4, #1
		*optlen = nrf_optlen;
   34e0c:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   34e10:	d108      	bne.n	34e24 <nrf91_socket_offload_getsockopt+0x7e>
			if (optname == SO_ERROR) {
   34e12:	2e04      	cmp	r6, #4
   34e14:	d110      	bne.n	34e38 <nrf91_socket_offload_getsockopt+0x92>
				bsd_os_errno_set(*(int *)optval);
   34e16:	6828      	ldr	r0, [r5, #0]
   34e18:	f7ed fe70 	bl	22afc <bsd_os_errno_set>
				*(int *)optval = errno;
   34e1c:	f7fe ff49 	bl	33cb2 <__errno>
   34e20:	6803      	ldr	r3, [r0, #0]
   34e22:	602b      	str	r3, [r5, #0]
}
   34e24:	4638      	mov	r0, r7
   34e26:	b006      	add	sp, #24
   34e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   34e2c:	f240 2303 	movw	r3, #515	; 0x203
   34e30:	4299      	cmp	r1, r3
   34e32:	e7d0      	b.n	34dd6 <nrf91_socket_offload_getsockopt+0x30>
   34e34:	462b      	mov	r3, r5
   34e36:	e7dd      	b.n	34df4 <nrf91_socket_offload_getsockopt+0x4e>
			} else if (optname == SO_RCVTIMEO) {
   34e38:	2e14      	cmp	r6, #20
   34e3a:	d1f3      	bne.n	34e24 <nrf91_socket_offload_getsockopt+0x7e>
				((struct timeval *)optval)->tv_sec =
   34e3c:	9b04      	ldr	r3, [sp, #16]
   34e3e:	602b      	str	r3, [r5, #0]
				((struct timeval *)optval)->tv_usec =
   34e40:	9b05      	ldr	r3, [sp, #20]
   34e42:	606b      	str	r3, [r5, #4]
				*optlen = sizeof(struct timeval);
   34e44:	2308      	movs	r3, #8
   34e46:	f8c8 3000 	str.w	r3, [r8]
   34e4a:	e7eb      	b.n	34e24 <nrf91_socket_offload_getsockopt+0x7e>
	errno = ENOPROTOOPT;
   34e4c:	f7fe ff31 	bl	33cb2 <__errno>
   34e50:	236d      	movs	r3, #109	; 0x6d
	return retval;
   34e52:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	errno = ENOPROTOOPT;
   34e56:	6003      	str	r3, [r0, #0]
	return retval;
   34e58:	e7e4      	b.n	34e24 <nrf91_socket_offload_getsockopt+0x7e>

00034e5a <nrf91_socket_offload_poll>:
{
   34e5a:	b5f0      	push	{r4, r5, r6, r7, lr}
   34e5c:	b091      	sub	sp, #68	; 0x44
   34e5e:	4605      	mov	r5, r0
   34e60:	460e      	mov	r6, r1
   34e62:	4617      	mov	r7, r2
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = {0};
   34e64:	2100      	movs	r1, #0
   34e66:	2240      	movs	r2, #64	; 0x40
   34e68:	4668      	mov	r0, sp
   34e6a:	f000 fe6d 	bl	35b48 <memset>
	for (int i = 0; i < nfds; i++) {
   34e6e:	466c      	mov	r4, sp
   34e70:	2300      	movs	r3, #0
		if (fds[i].events & POLLIN) {
   34e72:	1d28      	adds	r0, r5, #4
	for (int i = 0; i < nfds; i++) {
   34e74:	42b3      	cmp	r3, r6
   34e76:	db0c      	blt.n	34e92 <nrf91_socket_offload_poll+0x38>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   34e78:	463a      	mov	r2, r7
   34e7a:	4631      	mov	r1, r6
   34e7c:	4668      	mov	r0, sp
   34e7e:	f7f5 fdcb 	bl	2aa18 <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   34e82:	2200      	movs	r2, #0
   34e84:	462b      	mov	r3, r5
			fds[i].revents |= POLLIN;
   34e86:	2701      	movs	r7, #1
		fds[i].revents = 0;
   34e88:	4615      	mov	r5, r2
	for (int i = 0; i < nfds; i++) {
   34e8a:	42b2      	cmp	r2, r6
   34e8c:	db1a      	blt.n	34ec4 <nrf91_socket_offload_poll+0x6a>
}
   34e8e:	b011      	add	sp, #68	; 0x44
   34e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tmp[i].handle = fds[i].fd;
   34e92:	f855 2033 	ldr.w	r2, [r5, r3, lsl #3]
		if (fds[i].events & POLLIN) {
   34e96:	f830 1033 	ldrh.w	r1, [r0, r3, lsl #3]
		tmp[i].handle = fds[i].fd;
   34e9a:	6022      	str	r2, [r4, #0]
		if (fds[i].events & POLLIN) {
   34e9c:	07ca      	lsls	r2, r1, #31
			tmp[i].requested |= NRF_POLLIN;
   34e9e:	bf48      	it	mi
   34ea0:	88a2      	ldrhmi	r2, [r4, #4]
	for (int i = 0; i < nfds; i++) {
   34ea2:	f103 0301 	add.w	r3, r3, #1
			tmp[i].requested |= NRF_POLLIN;
   34ea6:	bf44      	itt	mi
   34ea8:	f042 0201 	orrmi.w	r2, r2, #1
   34eac:	80a2      	strhmi	r2, [r4, #4]
		if (fds[i].events & POLLOUT) {
   34eae:	074a      	lsls	r2, r1, #29
			tmp[i].requested |= NRF_POLLOUT;
   34eb0:	bf48      	it	mi
   34eb2:	88a2      	ldrhmi	r2, [r4, #4]
   34eb4:	f104 0408 	add.w	r4, r4, #8
   34eb8:	bf44      	itt	mi
   34eba:	f042 0202 	orrmi.w	r2, r2, #2
   34ebe:	f824 2c04 	strhmi.w	r2, [r4, #-4]
	for (int i = 0; i < nfds; i++) {
   34ec2:	e7d7      	b.n	34e74 <nrf91_socket_offload_poll+0x1a>
		if (tmp[i].returned & NRF_POLLIN) {
   34ec4:	eb0d 01c2 	add.w	r1, sp, r2, lsl #3
   34ec8:	88cc      	ldrh	r4, [r1, #6]
		fds[i].revents = 0;
   34eca:	80dd      	strh	r5, [r3, #6]
		if (tmp[i].returned & NRF_POLLIN) {
   34ecc:	07e1      	lsls	r1, r4, #31
			fds[i].revents |= POLLIN;
   34ece:	bf48      	it	mi
   34ed0:	80df      	strhmi	r7, [r3, #6]
		if (tmp[i].returned & NRF_POLLOUT) {
   34ed2:	07a1      	lsls	r1, r4, #30
			fds[i].revents |= POLLOUT;
   34ed4:	bf48      	it	mi
   34ed6:	88d9      	ldrhmi	r1, [r3, #6]
	for (int i = 0; i < nfds; i++) {
   34ed8:	f102 0201 	add.w	r2, r2, #1
			fds[i].revents |= POLLOUT;
   34edc:	bf44      	itt	mi
   34ede:	f041 0104 	orrmi.w	r1, r1, #4
   34ee2:	80d9      	strhmi	r1, [r3, #6]
		if (tmp[i].returned & NRF_POLLERR) {
   34ee4:	0761      	lsls	r1, r4, #29
			fds[i].revents |= POLLERR;
   34ee6:	bf48      	it	mi
   34ee8:	88d9      	ldrhmi	r1, [r3, #6]
   34eea:	f103 0308 	add.w	r3, r3, #8
   34eee:	bf44      	itt	mi
   34ef0:	f041 0108 	orrmi.w	r1, r1, #8
   34ef4:	f823 1c02 	strhmi.w	r1, [r3, #-2]
		if (tmp[i].returned & NRF_POLLNVAL) {
   34ef8:	06e1      	lsls	r1, r4, #27
			fds[i].revents |= POLLNVAL;
   34efa:	bf42      	ittt	mi
   34efc:	f833 1c02 	ldrhmi.w	r1, [r3, #-2]
   34f00:	f041 0120 	orrmi.w	r1, r1, #32
   34f04:	f823 1c02 	strhmi.w	r1, [r3, #-2]
		if (tmp[i].returned & NRF_POLLHUP) {
   34f08:	0721      	lsls	r1, r4, #28
			fds[i].revents |= POLLHUP;
   34f0a:	bf42      	ittt	mi
   34f0c:	f833 1c02 	ldrhmi.w	r1, [r3, #-2]
   34f10:	f041 0110 	orrmi.w	r1, r1, #16
   34f14:	f823 1c02 	strhmi.w	r1, [r3, #-2]
	for (int i = 0; i < nfds; i++) {
   34f18:	e7b7      	b.n	34e8a <nrf91_socket_offload_poll+0x30>

00034f1a <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   34f1a:	f7f5 bd09 	b.w	2a930 <nrf_listen>

00034f1e <nrf91_socket_offload_close>:
	return nrf_close(sd);
   34f1e:	f7f5 bc7b 	b.w	2a818 <nrf_close>

00034f22 <nrf91_socket_offload_fcntl>:
	switch (cmd) {
   34f22:	2903      	cmp	r1, #3
{
   34f24:	b508      	push	{r3, lr}
	switch (cmd) {
   34f26:	d00b      	beq.n	34f40 <nrf91_socket_offload_fcntl+0x1e>
   34f28:	2904      	cmp	r1, #4
   34f2a:	d111      	bne.n	34f50 <nrf91_socket_offload_fcntl+0x2e>
		flags = va_arg(args, int);
   34f2c:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   34f2e:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   34f32:	d10d      	bne.n	34f50 <nrf91_socket_offload_fcntl+0x2e>
}
   34f34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   34f38:	2101      	movs	r1, #1
   34f3a:	1392      	asrs	r2, r2, #14
   34f3c:	f7f5 bd6e 	b.w	2aa1c <nrf_fcntl>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   34f40:	2200      	movs	r2, #0
   34f42:	2102      	movs	r1, #2
   34f44:	f7f5 fd6a 	bl	2aa1c <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   34f48:	0380      	lsls	r0, r0, #14
   34f4a:	f400 4080 	and.w	r0, r0, #16384	; 0x4000
}
   34f4e:	bd08      	pop	{r3, pc}
	errno = EINVAL;
   34f50:	f7fe feaf 	bl	33cb2 <__errno>
   34f54:	2316      	movs	r3, #22
   34f56:	6003      	str	r3, [r0, #0]
	return retval;
   34f58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   34f5c:	e7f7      	b.n	34f4e <nrf91_socket_offload_fcntl+0x2c>

00034f5e <nrf_to_z_ipv6>:
	ptr->sin6_port = nrf_in->sin6_port;
   34f5e:	890b      	ldrh	r3, [r1, #8]
	ptr->sin6_family = AF_INET6;
   34f60:	2202      	movs	r2, #2
	ptr->sin6_port = nrf_in->sin6_port;
   34f62:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   34f64:	4603      	mov	r3, r0
{
   34f66:	b530      	push	{r4, r5, lr}
	ptr->sin6_family = AF_INET6;
   34f68:	f823 2b04 	strh.w	r2, [r3], #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   34f6c:	f101 0420 	add.w	r4, r1, #32
   34f70:	f101 0210 	add.w	r2, r1, #16
   34f74:	f852 5b04 	ldr.w	r5, [r2], #4
   34f78:	42a2      	cmp	r2, r4
   34f7a:	f843 5b04 	str.w	r5, [r3], #4
   34f7e:	d1f9      	bne.n	34f74 <nrf_to_z_ipv6+0x16>
	ptr->sin6_scope_id = (u8_t)nrf_in->sin6_scope_id;
   34f80:	6a0b      	ldr	r3, [r1, #32]
   34f82:	7503      	strb	r3, [r0, #20]
}
   34f84:	bd30      	pop	{r4, r5, pc}

00034f86 <nrf91_socket_offload_getaddrinfo>:
{
   34f86:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   34f8a:	4614      	mov	r4, r2
   34f8c:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   34f8e:	2100      	movs	r1, #0
{
   34f90:	b093      	sub	sp, #76	; 0x4c
   34f92:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   34f94:	2220      	movs	r2, #32
   34f96:	a802      	add	r0, sp, #8
{
   34f98:	461f      	mov	r7, r3
	struct nrf_addrinfo *nrf_res = NULL;
   34f9a:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   34f9c:	f000 fdd4 	bl	35b48 <memset>
	if (hints != NULL) {
   34fa0:	b194      	cbz	r4, 34fc8 <nrf91_socket_offload_getaddrinfo+0x42>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   34fa2:	4620      	mov	r0, r4
   34fa4:	a902      	add	r1, sp, #8
   34fa6:	f7ff fec3 	bl	34d30 <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   34faa:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   34fae:	f000 80c4 	beq.w	3513a <nrf91_socket_offload_getaddrinfo+0x1b4>
		} else if (error == -EAFNOSUPPORT) {
   34fb2:	306a      	adds	r0, #106	; 0x6a
   34fb4:	f000 80c4 	beq.w	35140 <nrf91_socket_offload_getaddrinfo+0x1ba>
		if (hints->ai_next != NULL) {
   34fb8:	69e0      	ldr	r0, [r4, #28]
   34fba:	b120      	cbz	r0, 34fc6 <nrf91_socket_offload_getaddrinfo+0x40>
			z_to_nrf_addrinfo_hints(hints->ai_next, &nrf_hints_pdn);
   34fbc:	ac0a      	add	r4, sp, #40	; 0x28
   34fbe:	4621      	mov	r1, r4
   34fc0:	f7ff feb6 	bl	34d30 <z_to_nrf_addrinfo_hints>
			nrf_hints.ai_next = &nrf_hints_pdn;
   34fc4:	9409      	str	r4, [sp, #36]	; 0x24
		nrf_hints_ptr = &nrf_hints;
   34fc6:	ac02      	add	r4, sp, #8
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   34fc8:	4628      	mov	r0, r5
   34fca:	4622      	mov	r2, r4
   34fcc:	4631      	mov	r1, r6
   34fce:	ab01      	add	r3, sp, #4
   34fd0:	f7f5 fd1e 	bl	2aa10 <nrf_getaddrinfo>
	if (retval != 0) {
   34fd4:	4605      	mov	r5, r0
   34fd6:	b1b8      	cbz	r0, 35008 <nrf91_socket_offload_getaddrinfo+0x82>
	switch (nrf_error) {
   34fd8:	282f      	cmp	r0, #47	; 0x2f
   34fda:	f000 80b4 	beq.w	35146 <nrf91_socket_offload_getaddrinfo+0x1c0>
   34fde:	dc0c      	bgt.n	34ffa <nrf91_socket_offload_getaddrinfo+0x74>
   34fe0:	280c      	cmp	r0, #12
   34fe2:	f000 80b3 	beq.w	3514c <nrf91_socket_offload_getaddrinfo+0x1c6>
   34fe6:	2823      	cmp	r0, #35	; 0x23
   34fe8:	bf14      	ite	ne
   34fea:	f06f 050a 	mvnne.w	r5, #10
   34fee:	f06f 0502 	mvneq.w	r5, #2
}
   34ff2:	4628      	mov	r0, r5
   34ff4:	b013      	add	sp, #76	; 0x4c
   34ff6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return DNS_EAI_INPROGRESS;
   34ffa:	2873      	cmp	r0, #115	; 0x73
   34ffc:	bf14      	ite	ne
   34ffe:	f06f 050a 	mvnne.w	r5, #10
   35002:	f06f 0563 	mvneq.w	r5, #99	; 0x63
   35006:	e7f4      	b.n	34ff2 <nrf91_socket_offload_getaddrinfo+0x6c>
	struct addrinfo *latest_z_res = NULL;
   35008:	4680      	mov	r8, r0
	z_out->ai_next = NULL;
   3500a:	4681      	mov	r9, r0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   3500c:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   3500e:	6038      	str	r0, [r7, #0]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   35010:	b91e      	cbnz	r6, 3501a <nrf91_socket_offload_getaddrinfo+0x94>
	nrf_freeaddrinfo(nrf_res);
   35012:	9801      	ldr	r0, [sp, #4]
   35014:	f7f5 fcfe 	bl	2aa14 <nrf_freeaddrinfo>
	return retval;
   35018:	e7eb      	b.n	34ff2 <nrf91_socket_offload_getaddrinfo+0x6c>
		struct addrinfo *next_z_res = k_malloc(sizeof(struct addrinfo));
   3501a:	2020      	movs	r0, #32
   3501c:	f7f9 fe20 	bl	2ec60 <k_malloc>
		if (next_z_res == NULL) {
   35020:	4604      	mov	r4, r0
   35022:	2800      	cmp	r0, #0
   35024:	d07e      	beq.n	35124 <nrf91_socket_offload_getaddrinfo+0x19e>
	family = nrf_to_z_family(nrf_in->ai_family);
   35026:	6871      	ldr	r1, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   35028:	68b3      	ldr	r3, [r6, #8]
	switch (nrf_family) {
   3502a:	290a      	cmp	r1, #10
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   3502c:	e9c0 9906 	strd	r9, r9, [r0, #24]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   35030:	f8c0 9000 	str.w	r9, [r0]
	z_out->ai_socktype = nrf_in->ai_socktype;
   35034:	6083      	str	r3, [r0, #8]
	switch (nrf_family) {
   35036:	dc23      	bgt.n	35080 <nrf91_socket_offload_getaddrinfo+0xfa>
   35038:	2900      	cmp	r1, #0
   3503a:	dd23      	ble.n	35084 <nrf91_socket_offload_getaddrinfo+0xfe>
   3503c:	1e4b      	subs	r3, r1, #1
   3503e:	2b09      	cmp	r3, #9
   35040:	d820      	bhi.n	35084 <nrf91_socket_offload_getaddrinfo+0xfe>
   35042:	e8df f003 	tbb	[pc, r3]
   35046:	2905      	.short	0x2905
   35048:	1f251f1f 	.word	0x1f251f1f
   3504c:	271f1f1f 	.word	0x271f1f1f
		return AF_LOCAL;
   35050:	2367      	movs	r3, #103	; 0x67
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   35052:	68f2      	ldr	r2, [r6, #12]
	z_out->ai_family = family;
   35054:	6063      	str	r3, [r4, #4]
	switch (proto) {
   35056:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   3505a:	d04b      	beq.n	350f4 <nrf91_socket_offload_getaddrinfo+0x16e>
   3505c:	dc26      	bgt.n	350ac <nrf91_socket_offload_getaddrinfo+0x126>
   3505e:	2a02      	cmp	r2, #2
   35060:	d04c      	beq.n	350fc <nrf91_socket_offload_getaddrinfo+0x176>
   35062:	dc1d      	bgt.n	350a0 <nrf91_socket_offload_getaddrinfo+0x11a>
   35064:	b372      	cbz	r2, 350c4 <nrf91_socket_offload_getaddrinfo+0x13e>
   35066:	2a01      	cmp	r2, #1
   35068:	d04a      	beq.n	35100 <nrf91_socket_offload_getaddrinfo+0x17a>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   3506a:	f06f 037a 	mvn.w	r3, #122	; 0x7a
   3506e:	60e3      	str	r3, [r4, #12]
		z_out->ai_addr = NULL;
   35070:	2300      	movs	r3, #0
   35072:	6163      	str	r3, [r4, #20]
			k_free(next_z_res);
   35074:	4620      	mov	r0, r4
   35076:	f000 fb9d 	bl	357b4 <k_free>
			retval = DNS_EAI_SOCKTYPE;
   3507a:	f06f 0506 	mvn.w	r5, #6
   3507e:	e053      	b.n	35128 <nrf91_socket_offload_getaddrinfo+0x1a2>
	switch (nrf_family) {
   35080:	2966      	cmp	r1, #102	; 0x66
   35082:	d00b      	beq.n	3509c <nrf91_socket_offload_getaddrinfo+0x116>
			k_free(next_z_res);
   35084:	4620      	mov	r0, r4
   35086:	f000 fb95 	bl	357b4 <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   3508a:	f06f 0508 	mvn.w	r5, #8
   3508e:	e04b      	b.n	35128 <nrf91_socket_offload_getaddrinfo+0x1a2>
		return AF_PACKET;
   35090:	2303      	movs	r3, #3
   35092:	e7de      	b.n	35052 <nrf91_socket_offload_getaddrinfo+0xcc>
		return AF_INET6;
   35094:	2302      	movs	r3, #2
   35096:	e7dc      	b.n	35052 <nrf91_socket_offload_getaddrinfo+0xcc>
	switch (nrf_family) {
   35098:	2301      	movs	r3, #1
   3509a:	e7da      	b.n	35052 <nrf91_socket_offload_getaddrinfo+0xcc>
		return AF_LTE;
   3509c:	460b      	mov	r3, r1
   3509e:	e7d8      	b.n	35052 <nrf91_socket_offload_getaddrinfo+0xcc>
	switch (proto) {
   350a0:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   350a4:	d1e1      	bne.n	3506a <nrf91_socket_offload_getaddrinfo+0xe4>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   350a6:	f44f 7381 	mov.w	r3, #258	; 0x102
   350aa:	e025      	b.n	350f8 <nrf91_socket_offload_getaddrinfo+0x172>
	switch (proto) {
   350ac:	f240 2302 	movw	r3, #514	; 0x202
   350b0:	429a      	cmp	r2, r3
   350b2:	d007      	beq.n	350c4 <nrf91_socket_offload_getaddrinfo+0x13e>
   350b4:	f240 2303 	movw	r3, #515	; 0x203
   350b8:	429a      	cmp	r2, r3
   350ba:	d003      	beq.n	350c4 <nrf91_socket_offload_getaddrinfo+0x13e>
   350bc:	f240 2301 	movw	r3, #513	; 0x201
   350c0:	429a      	cmp	r2, r3
   350c2:	d1d2      	bne.n	3506a <nrf91_socket_offload_getaddrinfo+0xe4>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   350c4:	60e2      	str	r2, [r4, #12]
	if (nrf_in->ai_family == NRF_AF_INET) {
   350c6:	2902      	cmp	r1, #2
   350c8:	d11c      	bne.n	35104 <nrf91_socket_offload_getaddrinfo+0x17e>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   350ca:	2008      	movs	r0, #8
   350cc:	f7f9 fdc8 	bl	2ec60 <k_malloc>
   350d0:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   350d2:	b320      	cbz	r0, 3511e <nrf91_socket_offload_getaddrinfo+0x198>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   350d4:	2308      	movs	r3, #8
   350d6:	6123      	str	r3, [r4, #16]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   350d8:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   350da:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   350dc:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   350de:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   350e0:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   350e2:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   350e4:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   350e6:	f1b8 0f00 	cmp.w	r8, #0
   350ea:	d123      	bne.n	35134 <nrf91_socket_offload_getaddrinfo+0x1ae>
			*res = next_z_res;
   350ec:	603c      	str	r4, [r7, #0]
		next_nrf_res = next_nrf_res->ai_next;
   350ee:	46a0      	mov	r8, r4
   350f0:	69f6      	ldr	r6, [r6, #28]
   350f2:	e78d      	b.n	35010 <nrf91_socket_offload_getaddrinfo+0x8a>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   350f4:	f240 1311 	movw	r3, #273	; 0x111
   350f8:	60e3      	str	r3, [r4, #12]
	if (z_out->ai_protocol == -EPROTONOSUPPORT) {
   350fa:	e7e4      	b.n	350c6 <nrf91_socket_offload_getaddrinfo+0x140>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   350fc:	2311      	movs	r3, #17
   350fe:	e7fb      	b.n	350f8 <nrf91_socket_offload_getaddrinfo+0x172>
   35100:	2306      	movs	r3, #6
   35102:	e7f9      	b.n	350f8 <nrf91_socket_offload_getaddrinfo+0x172>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   35104:	290a      	cmp	r1, #10
   35106:	d1b5      	bne.n	35074 <nrf91_socket_offload_getaddrinfo+0xee>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   35108:	2018      	movs	r0, #24
   3510a:	f7f9 fda9 	bl	2ec60 <k_malloc>
   3510e:	6160      	str	r0, [r4, #20]
		if (z_out->ai_addr == NULL) {
   35110:	b128      	cbz	r0, 3511e <nrf91_socket_offload_getaddrinfo+0x198>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   35112:	2318      	movs	r3, #24
		nrf_to_z_ipv6(z_out->ai_addr,
   35114:	6971      	ldr	r1, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   35116:	6123      	str	r3, [r4, #16]
		nrf_to_z_ipv6(z_out->ai_addr,
   35118:	f7ff ff21 	bl	34f5e <nrf_to_z_ipv6>
		} else if (error == -EAFNOSUPPORT) {
   3511c:	e7e3      	b.n	350e6 <nrf91_socket_offload_getaddrinfo+0x160>
			k_free(next_z_res);
   3511e:	4620      	mov	r0, r4
   35120:	f000 fb48 	bl	357b4 <k_free>
			retval = DNS_EAI_MEMORY;
   35124:	f06f 0509 	mvn.w	r5, #9
		nrf91_socket_offload_freeaddrinfo(*res);
   35128:	6838      	ldr	r0, [r7, #0]
   3512a:	f7ff fdf4 	bl	34d16 <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   3512e:	2300      	movs	r3, #0
   35130:	603b      	str	r3, [r7, #0]
   35132:	e76e      	b.n	35012 <nrf91_socket_offload_getaddrinfo+0x8c>
			latest_z_res->ai_next = next_z_res;
   35134:	f8c8 401c 	str.w	r4, [r8, #28]
   35138:	e7d9      	b.n	350ee <nrf91_socket_offload_getaddrinfo+0x168>
			return DNS_EAI_SOCKTYPE;
   3513a:	f06f 0506 	mvn.w	r5, #6
   3513e:	e758      	b.n	34ff2 <nrf91_socket_offload_getaddrinfo+0x6c>
			return DNS_EAI_ADDRFAMILY;
   35140:	f06f 0508 	mvn.w	r5, #8
   35144:	e755      	b.n	34ff2 <nrf91_socket_offload_getaddrinfo+0x6c>
		return DNS_EAI_NONAME;
   35146:	f06f 0501 	mvn.w	r5, #1
   3514a:	e752      	b.n	34ff2 <nrf91_socket_offload_getaddrinfo+0x6c>
		return DNS_EAI_MEMORY;
   3514c:	f06f 0509 	mvn.w	r5, #9
   35150:	e74f      	b.n	34ff2 <nrf91_socket_offload_getaddrinfo+0x6c>

00035152 <z_to_nrf_ipv6>:
{
   35152:	460b      	mov	r3, r1
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   35154:	2124      	movs	r1, #36	; 0x24
   35156:	7019      	strb	r1, [r3, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   35158:	8841      	ldrh	r1, [r0, #2]
{
   3515a:	4602      	mov	r2, r0
	nrf_out->sin6_port = ptr->sin6_port;
   3515c:	8119      	strh	r1, [r3, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   3515e:	210a      	movs	r1, #10
{
   35160:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_out->sin6_family = NRF_AF_INET6;
   35162:	6059      	str	r1, [r3, #4]
   35164:	1d04      	adds	r4, r0, #4
   35166:	f103 0610 	add.w	r6, r3, #16
   3516a:	f100 0714 	add.w	r7, r0, #20
   3516e:	4635      	mov	r5, r6
   35170:	6820      	ldr	r0, [r4, #0]
   35172:	6861      	ldr	r1, [r4, #4]
   35174:	3408      	adds	r4, #8
   35176:	c503      	stmia	r5!, {r0, r1}
   35178:	42bc      	cmp	r4, r7
   3517a:	462e      	mov	r6, r5
   3517c:	d1f7      	bne.n	3516e <z_to_nrf_ipv6+0x1c>
	nrf_out->sin6_scope_id = (u32_t)ptr->sin6_scope_id;
   3517e:	7d12      	ldrb	r2, [r2, #20]
   35180:	621a      	str	r2, [r3, #32]
}
   35182:	bdf0      	pop	{r4, r5, r6, r7, pc}

00035184 <nrf91_socket_offload_sendto>:
{
   35184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   35188:	b08e      	sub	sp, #56	; 0x38
   3518a:	9c14      	ldr	r4, [sp, #80]	; 0x50
   3518c:	4605      	mov	r5, r0
   3518e:	460e      	mov	r6, r1
   35190:	461f      	mov	r7, r3
	if (to == NULL) {
   35192:	b974      	cbnz	r4, 351b2 <nrf91_socket_offload_sendto+0x2e>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   35194:	4618      	mov	r0, r3
   35196:	9203      	str	r2, [sp, #12]
   35198:	f7ff fd6d 	bl	34c76 <z_to_nrf_flags>
   3519c:	4603      	mov	r3, r0
   3519e:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   351a2:	4631      	mov	r1, r6
   351a4:	4628      	mov	r0, r5
   351a6:	9a03      	ldr	r2, [sp, #12]
   351a8:	f7f5 fb44 	bl	2a834 <nrf_sendto>
}
   351ac:	b00e      	add	sp, #56	; 0x38
   351ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (to->sa_family == AF_INET) {
   351b2:	8823      	ldrh	r3, [r4, #0]
   351b4:	9203      	str	r2, [sp, #12]
   351b6:	2b01      	cmp	r3, #1
   351b8:	d111      	bne.n	351de <nrf91_socket_offload_sendto+0x5a>
	nrf_out->sin_port = ptr->sin_port;
   351ba:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   351bc:	2110      	movs	r1, #16
	nrf_out->sin_port = ptr->sin_port;
   351be:	f8ad 301c 	strh.w	r3, [sp, #28]
	nrf_out->sin_family = NRF_AF_INET;
   351c2:	2302      	movs	r3, #2
   351c4:	9306      	str	r3, [sp, #24]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   351c6:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   351c8:	4638      	mov	r0, r7
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   351ca:	f88d 1014 	strb.w	r1, [sp, #20]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   351ce:	9308      	str	r3, [sp, #32]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   351d0:	f7ff fd51 	bl	34c76 <z_to_nrf_flags>
   351d4:	9101      	str	r1, [sp, #4]
   351d6:	a905      	add	r1, sp, #20
   351d8:	4603      	mov	r3, r0
   351da:	9100      	str	r1, [sp, #0]
   351dc:	e7e1      	b.n	351a2 <nrf91_socket_offload_sendto+0x1e>
	} else if (to->sa_family == AF_INET6) {
   351de:	2b02      	cmp	r3, #2
   351e0:	d10d      	bne.n	351fe <nrf91_socket_offload_sendto+0x7a>
		z_to_nrf_ipv6(to, &ipv6);
   351e2:	f10d 0814 	add.w	r8, sp, #20
   351e6:	4641      	mov	r1, r8
   351e8:	4620      	mov	r0, r4
   351ea:	f7ff ffb2 	bl	35152 <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   351ee:	4638      	mov	r0, r7
   351f0:	f7ff fd41 	bl	34c76 <z_to_nrf_flags>
   351f4:	2124      	movs	r1, #36	; 0x24
   351f6:	4603      	mov	r3, r0
   351f8:	e9cd 8100 	strd	r8, r1, [sp]
   351fc:	e7d1      	b.n	351a2 <nrf91_socket_offload_sendto+0x1e>
	errno = ENOTSUP;
   351fe:	f7fe fd58 	bl	33cb2 <__errno>
   35202:	2386      	movs	r3, #134	; 0x86
   35204:	6003      	str	r3, [r0, #0]
	return retval;
   35206:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3520a:	e7cf      	b.n	351ac <nrf91_socket_offload_sendto+0x28>

0003520c <nrf91_socket_offload_recvfrom>:
{
   3520c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3520e:	4605      	mov	r5, r0
   35210:	b08d      	sub	sp, #52	; 0x34
   35212:	4618      	mov	r0, r3
   35214:	e9dd 4612 	ldrd	r4, r6, [sp, #72]	; 0x48
   35218:	f7ff fd2d 	bl	34c76 <z_to_nrf_flags>
   3521c:	4603      	mov	r3, r0
	if (from == NULL) {
   3521e:	b944      	cbnz	r4, 35232 <nrf91_socket_offload_recvfrom+0x26>
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags), NULL,
   35220:	4628      	mov	r0, r5
   35222:	e9cd 4400 	strd	r4, r4, [sp]
   35226:	f7f5 fb3b 	bl	2a8a0 <nrf_recvfrom>
   3522a:	4605      	mov	r5, r0
}
   3522c:	4628      	mov	r0, r5
   3522e:	b00d      	add	sp, #52	; 0x34
   35230:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   35232:	2024      	movs	r0, #36	; 0x24
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   35234:	af03      	add	r7, sp, #12
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   35236:	9002      	str	r0, [sp, #8]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   35238:	a802      	add	r0, sp, #8
   3523a:	9001      	str	r0, [sp, #4]
   3523c:	9700      	str	r7, [sp, #0]
   3523e:	4628      	mov	r0, r5
   35240:	f7f5 fb2e 	bl	2a8a0 <nrf_recvfrom>
		if (cliaddr->sa_family == NRF_AF_INET) {
   35244:	9b04      	ldr	r3, [sp, #16]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   35246:	4605      	mov	r5, r0
		if (cliaddr->sa_family == NRF_AF_INET) {
   35248:	2b02      	cmp	r3, #2
   3524a:	d109      	bne.n	35260 <nrf91_socket_offload_recvfrom+0x54>
	ptr->sin_port = nrf_in->sin_port;
   3524c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   35250:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   35252:	2301      	movs	r3, #1
   35254:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   35256:	9b06      	ldr	r3, [sp, #24]
   35258:	6063      	str	r3, [r4, #4]
			*fromlen = sizeof(struct sockaddr_in);
   3525a:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   3525c:	6033      	str	r3, [r6, #0]
	return retval;
   3525e:	e7e5      	b.n	3522c <nrf91_socket_offload_recvfrom+0x20>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   35260:	2b0a      	cmp	r3, #10
   35262:	d1e3      	bne.n	3522c <nrf91_socket_offload_recvfrom+0x20>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   35264:	4639      	mov	r1, r7
   35266:	4620      	mov	r0, r4
   35268:	f7ff fe79 	bl	34f5e <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   3526c:	2318      	movs	r3, #24
   3526e:	e7f5      	b.n	3525c <nrf91_socket_offload_recvfrom+0x50>

00035270 <nrf91_socket_offload_connect>:
{
   35270:	b530      	push	{r4, r5, lr}
	if (addr->sa_family == AF_INET) {
   35272:	880d      	ldrh	r5, [r1, #0]
{
   35274:	4604      	mov	r4, r0
	if (addr->sa_family == AF_INET) {
   35276:	2d01      	cmp	r5, #1
{
   35278:	460b      	mov	r3, r1
   3527a:	b08b      	sub	sp, #44	; 0x2c
	if (addr->sa_family == AF_INET) {
   3527c:	d10e      	bne.n	3529c <nrf91_socket_offload_connect+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   3527e:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   35280:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   35282:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   35286:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   35288:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_family = NRF_AF_INET;
   3528a:	9102      	str	r1, [sp, #8]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3528c:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   35290:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr_in *)&ipv4,
   35292:	a901      	add	r1, sp, #4
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   35294:	f7f5 fb3a 	bl	2a90c <nrf_connect>
}
   35298:	b00b      	add	sp, #44	; 0x2c
   3529a:	bd30      	pop	{r4, r5, pc}
	} else if (addr->sa_family == AF_INET6) {
   3529c:	2d02      	cmp	r5, #2
   3529e:	d107      	bne.n	352b0 <nrf91_socket_offload_connect+0x40>
		z_to_nrf_ipv6(addr, &ipv6);
   352a0:	4618      	mov	r0, r3
   352a2:	a901      	add	r1, sp, #4
   352a4:	f7ff ff55 	bl	35152 <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   352a8:	2224      	movs	r2, #36	; 0x24
   352aa:	4620      	mov	r0, r4
   352ac:	a901      	add	r1, sp, #4
   352ae:	e7f1      	b.n	35294 <nrf91_socket_offload_connect+0x24>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   352b0:	f7f5 fb2c 	bl	2a90c <nrf_connect>
		if (retval < 0) {
   352b4:	2800      	cmp	r0, #0
   352b6:	daef      	bge.n	35298 <nrf91_socket_offload_connect+0x28>
	errno = ENOTSUP;
   352b8:	f7fe fcfb 	bl	33cb2 <__errno>
   352bc:	2386      	movs	r3, #134	; 0x86
   352be:	6003      	str	r3, [r0, #0]
   352c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   352c4:	e7e8      	b.n	35298 <nrf91_socket_offload_connect+0x28>

000352c6 <nrf91_socket_offload_accept>:
{
   352c6:	b5f0      	push	{r4, r5, r6, r7, lr}
   352c8:	4615      	mov	r5, r2
	if ((addr != NULL) && (addrlen != NULL)) {
   352ca:	460c      	mov	r4, r1
{
   352cc:	b08b      	sub	sp, #44	; 0x2c
	if ((addr != NULL) && (addrlen != NULL)) {
   352ce:	b1f1      	cbz	r1, 3530e <nrf91_socket_offload_accept+0x48>
   352d0:	b302      	cbz	r2, 35314 <nrf91_socket_offload_accept+0x4e>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   352d2:	6813      	ldr	r3, [r2, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   352d4:	466a      	mov	r2, sp
		if (*addrlen == sizeof(struct sockaddr_in)) {
   352d6:	2b08      	cmp	r3, #8
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   352d8:	bf0c      	ite	eq
   352da:	2310      	moveq	r3, #16
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   352dc:	2324      	movne	r3, #36	; 0x24
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   352de:	ae01      	add	r6, sp, #4
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   352e0:	9300      	str	r3, [sp, #0]
	retval = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   352e2:	4631      	mov	r1, r6
   352e4:	f7f5 fb34 	bl	2a950 <nrf_accept>
	if (retval < 0) {
   352e8:	1e07      	subs	r7, r0, #0
   352ea:	db22      	blt.n	35332 <nrf91_socket_offload_accept+0x6c>
	if ((addr != NULL) && (addrlen != NULL)) {
   352ec:	b164      	cbz	r4, 35308 <nrf91_socket_offload_accept+0x42>
   352ee:	b15d      	cbz	r5, 35308 <nrf91_socket_offload_accept+0x42>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   352f0:	6873      	ldr	r3, [r6, #4]
   352f2:	2b02      	cmp	r3, #2
   352f4:	d110      	bne.n	35318 <nrf91_socket_offload_accept+0x52>
			*addrlen = sizeof(struct sockaddr_in);
   352f6:	2308      	movs	r3, #8
   352f8:	602b      	str	r3, [r5, #0]
	ptr->sin_port = nrf_in->sin_port;
   352fa:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   352fe:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   35300:	2301      	movs	r3, #1
   35302:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   35304:	9b04      	ldr	r3, [sp, #16]
   35306:	6063      	str	r3, [r4, #4]
}
   35308:	4638      	mov	r0, r7
   3530a:	b00b      	add	sp, #44	; 0x2c
   3530c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   3530e:	460a      	mov	r2, r1
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   35310:	460e      	mov	r6, r1
   35312:	e7e6      	b.n	352e2 <nrf91_socket_offload_accept+0x1c>
   35314:	4616      	mov	r6, r2
   35316:	e7e4      	b.n	352e2 <nrf91_socket_offload_accept+0x1c>
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   35318:	2b0a      	cmp	r3, #10
   3531a:	d106      	bne.n	3532a <nrf91_socket_offload_accept+0x64>
			*addrlen = sizeof(struct sockaddr_in6);
   3531c:	2318      	movs	r3, #24
			nrf_to_z_ipv6(
   3531e:	4620      	mov	r0, r4
			*addrlen = sizeof(struct sockaddr_in6);
   35320:	602b      	str	r3, [r5, #0]
			nrf_to_z_ipv6(
   35322:	a901      	add	r1, sp, #4
   35324:	f7ff fe1b 	bl	34f5e <nrf_to_z_ipv6>
   35328:	e7ee      	b.n	35308 <nrf91_socket_offload_accept+0x42>
	errno = ENOTSUP;
   3532a:	f7fe fcc2 	bl	33cb2 <__errno>
   3532e:	2386      	movs	r3, #134	; 0x86
   35330:	6003      	str	r3, [r0, #0]
		return -1;
   35332:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   35336:	e7e7      	b.n	35308 <nrf91_socket_offload_accept+0x42>

00035338 <nrf91_socket_offload_socket>:
{
   35338:	b510      	push	{r4, lr}
	family = z_to_nrf_family(family);
   3533a:	b280      	uxth	r0, r0
   3533c:	f7ff fca5 	bl	34c8a <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   35340:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
	family = z_to_nrf_family(family);
   35344:	4604      	mov	r4, r0
	if (family == -EAFNOSUPPORT) {
   35346:	d106      	bne.n	35356 <nrf91_socket_offload_socket+0x1e>
		errno = EAFNOSUPPORT;
   35348:	f7fe fcb3 	bl	33cb2 <__errno>
   3534c:	236a      	movs	r3, #106	; 0x6a
		errno = EPROTONOSUPPORT;
   3534e:	6003      	str	r3, [r0, #0]
}
   35350:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   35354:	bd10      	pop	{r4, pc}
	switch (socktype) {
   35356:	2903      	cmp	r1, #3
   35358:	d003      	beq.n	35362 <nrf91_socket_offload_socket+0x2a>
   3535a:	2904      	cmp	r1, #4
   3535c:	bf08      	it	eq
   3535e:	f44f 7100 	moveq.w	r1, #512	; 0x200
	proto = z_to_nrf_protocol(proto);
   35362:	4610      	mov	r0, r2
   35364:	f7ff fca8 	bl	34cb8 <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   35368:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	proto = z_to_nrf_protocol(proto);
   3536c:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   3536e:	d103      	bne.n	35378 <nrf91_socket_offload_socket+0x40>
		errno = EPROTONOSUPPORT;
   35370:	f7fe fc9f 	bl	33cb2 <__errno>
   35374:	237b      	movs	r3, #123	; 0x7b
   35376:	e7ea      	b.n	3534e <nrf91_socket_offload_socket+0x16>
	retval = nrf_socket(family, type, proto);
   35378:	4620      	mov	r0, r4
}
   3537a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	retval = nrf_socket(family, type, proto);
   3537e:	f7f5 ba39 	b.w	2a7f4 <nrf_socket>

00035382 <nrf91_socket_offload_setsockopt>:
{
   35382:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   35386:	461d      	mov	r5, r3
	switch (z_in_level) {
   35388:	f240 2302 	movw	r3, #514	; 0x202
{
   3538c:	b086      	sub	sp, #24
	switch (z_in_level) {
   3538e:	4299      	cmp	r1, r3
{
   35390:	4607      	mov	r7, r0
   35392:	460c      	mov	r4, r1
   35394:	4616      	mov	r6, r2
   35396:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	switch (z_in_level) {
   3539a:	d005      	beq.n	353a8 <nrf91_socket_offload_setsockopt+0x26>
   3539c:	dc21      	bgt.n	353e2 <nrf91_socket_offload_setsockopt+0x60>
   3539e:	2901      	cmp	r1, #1
   353a0:	d002      	beq.n	353a8 <nrf91_socket_offload_setsockopt+0x26>
   353a2:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   353a6:	d120      	bne.n	353ea <nrf91_socket_offload_setsockopt+0x68>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   353a8:	4631      	mov	r1, r6
   353aa:	4620      	mov	r0, r4
   353ac:	aa03      	add	r2, sp, #12
   353ae:	f7ed fd59 	bl	22e64 <z_to_nrf_optname>
   353b2:	2800      	cmp	r0, #0
   353b4:	db19      	blt.n	353ea <nrf91_socket_offload_setsockopt+0x68>
	if ((level == SOL_SOCKET) && (optname == SO_RCVTIMEO)) {
   353b6:	2c01      	cmp	r4, #1
   353b8:	d108      	bne.n	353cc <nrf91_socket_offload_setsockopt+0x4a>
   353ba:	2e14      	cmp	r6, #20
   353bc:	d106      	bne.n	353cc <nrf91_socket_offload_setsockopt+0x4a>
		nrf_optlen = sizeof(struct nrf_timeval);
   353be:	f04f 0808 	mov.w	r8, #8
		nrf_rcvtimeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   353c2:	682b      	ldr	r3, [r5, #0]
   353c4:	9304      	str	r3, [sp, #16]
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   353c6:	686b      	ldr	r3, [r5, #4]
		nrf_optval = &nrf_rcvtimeo;
   353c8:	ad04      	add	r5, sp, #16
		nrf_rcvtimeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   353ca:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   353cc:	462b      	mov	r3, r5
   353ce:	4621      	mov	r1, r4
   353d0:	4638      	mov	r0, r7
   353d2:	9a03      	ldr	r2, [sp, #12]
   353d4:	f8cd 8000 	str.w	r8, [sp]
   353d8:	f7f5 fae2 	bl	2a9a0 <nrf_setsockopt>
}
   353dc:	b006      	add	sp, #24
   353de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   353e2:	f240 2303 	movw	r3, #515	; 0x203
   353e6:	4299      	cmp	r1, r3
   353e8:	e7dd      	b.n	353a6 <nrf91_socket_offload_setsockopt+0x24>
	errno = ENOPROTOOPT;
   353ea:	f7fe fc62 	bl	33cb2 <__errno>
   353ee:	236d      	movs	r3, #109	; 0x6d
   353f0:	6003      	str	r3, [r0, #0]
   353f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   353f6:	e7f1      	b.n	353dc <nrf91_socket_offload_setsockopt+0x5a>

000353f8 <nrf91_socket_offload_bind>:
{
   353f8:	b510      	push	{r4, lr}
	if (addr->sa_family == AF_INET) {
   353fa:	880a      	ldrh	r2, [r1, #0]
{
   353fc:	4604      	mov	r4, r0
	if (addr->sa_family == AF_INET) {
   353fe:	2a01      	cmp	r2, #1
{
   35400:	460b      	mov	r3, r1
   35402:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   35404:	d10e      	bne.n	35424 <nrf91_socket_offload_bind+0x2c>
	nrf_out->sin_port = ptr->sin_port;
   35406:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   35408:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   3540a:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   3540e:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   35410:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_family = NRF_AF_INET;
   35412:	9102      	str	r1, [sp, #8]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   35414:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   35418:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv4,
   3541a:	a901      	add	r1, sp, #4
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   3541c:	f7f5 faae 	bl	2a97c <nrf_bind>
}
   35420:	b00a      	add	sp, #40	; 0x28
   35422:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   35424:	2a02      	cmp	r2, #2
   35426:	d107      	bne.n	35438 <nrf91_socket_offload_bind+0x40>
		z_to_nrf_ipv6(addr, &ipv6);
   35428:	4618      	mov	r0, r3
   3542a:	a901      	add	r1, sp, #4
   3542c:	f7ff fe91 	bl	35152 <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   35430:	2224      	movs	r2, #36	; 0x24
   35432:	4620      	mov	r0, r4
   35434:	a901      	add	r1, sp, #4
   35436:	e7f1      	b.n	3541c <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   35438:	f7fe fc3b 	bl	33cb2 <__errno>
   3543c:	2386      	movs	r3, #134	; 0x86
   3543e:	6003      	str	r3, [r0, #0]
   35440:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   35444:	e7ec      	b.n	35420 <nrf91_socket_offload_bind+0x28>

00035446 <z_impl_uart_irq_rx_enable>:
	if (api->irq_rx_enable) {
   35446:	6843      	ldr	r3, [r0, #4]
   35448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   3544a:	b103      	cbz	r3, 3544e <z_impl_uart_irq_rx_enable+0x8>
		api->irq_rx_enable(dev);
   3544c:	4718      	bx	r3
}
   3544e:	4770      	bx	lr

00035450 <response_handler>:
	write_uart_string(response);
   35450:	4608      	mov	r0, r1
   35452:	f7ee b8e5 	b.w	23620 <write_uart_string>

00035456 <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   35456:	280d      	cmp	r0, #13
   35458:	d004      	beq.n	35464 <is_lfcr+0xe>
   3545a:	f1a0 030a 	sub.w	r3, r0, #10
   3545e:	4258      	negs	r0, r3
   35460:	4158      	adcs	r0, r3
   35462:	4770      	bx	lr
		return true;
   35464:	2001      	movs	r0, #1
}
   35466:	4770      	bx	lr

00035468 <skip_command_prefix>:
{
   35468:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   3546a:	6801      	ldr	r1, [r0, #0]
{
   3546c:	4602      	mov	r2, r0
	*cmd += sizeof("AT") - 1;
   3546e:	1c8b      	adds	r3, r1, #2
   35470:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   35472:	788c      	ldrb	r4, [r1, #2]
   35474:	4620      	mov	r0, r4
   35476:	f7ff ffee 	bl	35456 <is_lfcr>
   3547a:	b910      	cbnz	r0, 35482 <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   3547c:	b10c      	cbz	r4, 35482 <skip_command_prefix+0x1a>
	(*cmd)++;
   3547e:	3103      	adds	r1, #3
   35480:	6011      	str	r1, [r2, #0]
}
   35482:	bd10      	pop	{r4, pc}

00035484 <at_params_list_init>:
{
   35484:	b538      	push	{r3, r4, r5, lr}
   35486:	460d      	mov	r5, r1
	if (list == NULL) {
   35488:	4604      	mov	r4, r0
   3548a:	b140      	cbz	r0, 3549e <at_params_list_init+0x1a>
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   3548c:	210c      	movs	r1, #12
   3548e:	4628      	mov	r0, r5
   35490:	f000 f995 	bl	357be <k_calloc>
   35494:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   35496:	b128      	cbz	r0, 354a4 <at_params_list_init+0x20>
	return 0;
   35498:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   3549a:	6025      	str	r5, [r4, #0]
}
   3549c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   3549e:	f06f 0015 	mvn.w	r0, #21
   354a2:	e7fb      	b.n	3549c <at_params_list_init+0x18>
		return -ENOMEM;
   354a4:	f06f 000b 	mvn.w	r0, #11
   354a8:	e7f8      	b.n	3549c <at_params_list_init+0x18>

000354aa <at_params_list_free>:

void at_params_list_free(struct at_param_list *list)
{
   354aa:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   354ac:	4604      	mov	r4, r0
   354ae:	b148      	cbz	r0, 354c4 <at_params_list_free+0x1a>
   354b0:	6843      	ldr	r3, [r0, #4]
   354b2:	b13b      	cbz	r3, 354c4 <at_params_list_free+0x1a>
		return;
	}

	at_params_list_clear(list);

	list->param_count = 0;
   354b4:	2500      	movs	r5, #0
	at_params_list_clear(list);
   354b6:	f7ee fc9b 	bl	23df0 <at_params_list_clear>
	k_free(list->params);
   354ba:	6860      	ldr	r0, [r4, #4]
	list->param_count = 0;
   354bc:	6025      	str	r5, [r4, #0]
	k_free(list->params);
   354be:	f000 f979 	bl	357b4 <k_free>
	list->params = NULL;
   354c2:	6065      	str	r5, [r4, #4]
}
   354c4:	bd38      	pop	{r3, r4, r5, pc}

000354c6 <at_params_short_put>:

int at_params_short_put(const struct at_param_list *list, size_t index,
			u16_t value)
{
   354c6:	b538      	push	{r3, r4, r5, lr}
   354c8:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   354ca:	b910      	cbnz	r0, 354d2 <at_params_short_put+0xc>
		return -EINVAL;
   354cc:	f06f 0015 	mvn.w	r0, #21
	at_param_clear(param);

	param->type = AT_PARAM_TYPE_NUM_SHORT;
	param->value.int_val = (u32_t)(value & USHRT_MAX);
	return 0;
}
   354d0:	bd38      	pop	{r3, r4, r5, pc}
	if (list == NULL || list->params == NULL) {
   354d2:	6843      	ldr	r3, [r0, #4]
   354d4:	2b00      	cmp	r3, #0
   354d6:	d0f9      	beq.n	354cc <at_params_short_put+0x6>
	struct at_param *param = at_params_get(list, index);
   354d8:	f7ee fc1e 	bl	23d18 <at_params_get>
	if (param == NULL) {
   354dc:	4604      	mov	r4, r0
   354de:	2800      	cmp	r0, #0
   354e0:	d0f4      	beq.n	354cc <at_params_short_put+0x6>
	at_param_clear(param);
   354e2:	f7ee fc63 	bl	23dac <at_param_clear>
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   354e6:	2301      	movs	r3, #1
	return 0;
   354e8:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   354ea:	7023      	strb	r3, [r4, #0]
	param->value.int_val = (u32_t)(value & USHRT_MAX);
   354ec:	60a5      	str	r5, [r4, #8]
	return 0;
   354ee:	e7ef      	b.n	354d0 <at_params_short_put+0xa>

000354f0 <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   354f0:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   354f2:	b910      	cbnz	r0, 354fa <at_params_empty_put+0xa>
		return -EINVAL;
   354f4:	f06f 0015 	mvn.w	r0, #21

	param->type = AT_PARAM_TYPE_EMPTY;
	param->value.int_val = 0;

	return 0;
}
   354f8:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL) {
   354fa:	6843      	ldr	r3, [r0, #4]
   354fc:	2b00      	cmp	r3, #0
   354fe:	d0f9      	beq.n	354f4 <at_params_empty_put+0x4>
	struct at_param *param = at_params_get(list, index);
   35500:	f7ee fc0a 	bl	23d18 <at_params_get>
	if (param == NULL) {
   35504:	4604      	mov	r4, r0
   35506:	2800      	cmp	r0, #0
   35508:	d0f4      	beq.n	354f4 <at_params_empty_put+0x4>
	at_param_clear(param);
   3550a:	f7ee fc4f 	bl	23dac <at_param_clear>
	param->type = AT_PARAM_TYPE_EMPTY;
   3550e:	2305      	movs	r3, #5
	param->value.int_val = 0;
   35510:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   35512:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   35514:	60a0      	str	r0, [r4, #8]
	return 0;
   35516:	e7ef      	b.n	354f8 <at_params_empty_put+0x8>

00035518 <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index,
		      u32_t value)
{
   35518:	b538      	push	{r3, r4, r5, lr}
   3551a:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   3551c:	b910      	cbnz	r0, 35524 <at_params_int_put+0xc>
		return -EINVAL;
   3551e:	f06f 0015 	mvn.w	r0, #21
	at_param_clear(param);

	param->type = AT_PARAM_TYPE_NUM_INT;
	param->value.int_val = value;
	return 0;
}
   35522:	bd38      	pop	{r3, r4, r5, pc}
	if (list == NULL || list->params == NULL) {
   35524:	6843      	ldr	r3, [r0, #4]
   35526:	2b00      	cmp	r3, #0
   35528:	d0f9      	beq.n	3551e <at_params_int_put+0x6>
	struct at_param *param = at_params_get(list, index);
   3552a:	f7ee fbf5 	bl	23d18 <at_params_get>
	if (param == NULL) {
   3552e:	4604      	mov	r4, r0
   35530:	2800      	cmp	r0, #0
   35532:	d0f4      	beq.n	3551e <at_params_int_put+0x6>
	at_param_clear(param);
   35534:	f7ee fc3a 	bl	23dac <at_param_clear>
	param->type = AT_PARAM_TYPE_NUM_INT;
   35538:	2302      	movs	r3, #2
	return 0;
   3553a:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_NUM_INT;
   3553c:	7023      	strb	r3, [r4, #0]
	param->value.int_val = value;
   3553e:	60a5      	str	r5, [r4, #8]
	return 0;
   35540:	e7ef      	b.n	35522 <at_params_int_put+0xa>

00035542 <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   35542:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35544:	4617      	mov	r7, r2
   35546:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   35548:	b910      	cbnz	r0, 35550 <at_params_string_put+0xe>
		return -EINVAL;
   3554a:	f06f 0015 	mvn.w	r0, #21
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
	param->value.str_val = param_value;

	return 0;
}
   3554e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || str == NULL) {
   35550:	6843      	ldr	r3, [r0, #4]
   35552:	2b00      	cmp	r3, #0
   35554:	d0f9      	beq.n	3554a <at_params_string_put+0x8>
   35556:	2a00      	cmp	r2, #0
   35558:	d0f7      	beq.n	3554a <at_params_string_put+0x8>
	struct at_param *param = at_params_get(list, index);
   3555a:	f7ee fbdd 	bl	23d18 <at_params_get>
	if (param == NULL) {
   3555e:	4604      	mov	r4, r0
   35560:	2800      	cmp	r0, #0
   35562:	d0f2      	beq.n	3554a <at_params_string_put+0x8>
	char *param_value = (char *)k_malloc(str_len + 1);
   35564:	1c68      	adds	r0, r5, #1
   35566:	f7f9 fb7b 	bl	2ec60 <k_malloc>
	if (param_value == NULL) {
   3556a:	4606      	mov	r6, r0
   3556c:	b160      	cbz	r0, 35588 <at_params_string_put+0x46>
   3556e:	462a      	mov	r2, r5
   35570:	4639      	mov	r1, r7
   35572:	f000 fac9 	bl	35b08 <memcpy>
	at_param_clear(param);
   35576:	4620      	mov	r0, r4
   35578:	f7ee fc18 	bl	23dac <at_param_clear>
	param->type = AT_PARAM_TYPE_STRING;
   3557c:	2303      	movs	r3, #3
	return 0;
   3557e:	2000      	movs	r0, #0
	param->size = str_len;
   35580:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   35582:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   35584:	60a6      	str	r6, [r4, #8]
	return 0;
   35586:	e7e2      	b.n	3554e <at_params_string_put+0xc>
		return -ENOMEM;
   35588:	f06f 000b 	mvn.w	r0, #11
   3558c:	e7df      	b.n	3554e <at_params_string_put+0xc>

0003558e <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const u32_t *array, size_t array_len)
{
   3558e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35590:	4617      	mov	r7, r2
   35592:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   35594:	b910      	cbnz	r0, 3559c <at_params_array_put+0xe>
		return -EINVAL;
   35596:	f06f 0015 	mvn.w	r0, #21
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
	param->value.array_val = param_value;

	return 0;
}
   3559a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || array == NULL) {
   3559c:	6843      	ldr	r3, [r0, #4]
   3559e:	2b00      	cmp	r3, #0
   355a0:	d0f9      	beq.n	35596 <at_params_array_put+0x8>
   355a2:	2a00      	cmp	r2, #0
   355a4:	d0f7      	beq.n	35596 <at_params_array_put+0x8>
	struct at_param *param = at_params_get(list, index);
   355a6:	f7ee fbb7 	bl	23d18 <at_params_get>
	if (param == NULL) {
   355aa:	4604      	mov	r4, r0
   355ac:	2800      	cmp	r0, #0
   355ae:	d0f2      	beq.n	35596 <at_params_array_put+0x8>
	u32_t *param_value = (u32_t *)k_malloc(array_len);
   355b0:	4628      	mov	r0, r5
   355b2:	f7f9 fb55 	bl	2ec60 <k_malloc>
	if (param_value == NULL) {
   355b6:	4606      	mov	r6, r0
   355b8:	b160      	cbz	r0, 355d4 <at_params_array_put+0x46>
   355ba:	462a      	mov	r2, r5
   355bc:	4639      	mov	r1, r7
   355be:	f000 faa3 	bl	35b08 <memcpy>
	at_param_clear(param);
   355c2:	4620      	mov	r0, r4
   355c4:	f7ee fbf2 	bl	23dac <at_param_clear>
	param->type = AT_PARAM_TYPE_ARRAY;
   355c8:	2304      	movs	r3, #4
	return 0;
   355ca:	2000      	movs	r0, #0
	param->size = array_len;
   355cc:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   355ce:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   355d0:	60a6      	str	r6, [r4, #8]
	return 0;
   355d2:	e7e2      	b.n	3559a <at_params_array_put+0xc>
		return -ENOMEM;
   355d4:	f06f 000b 	mvn.w	r0, #11
   355d8:	e7df      	b.n	3559a <at_params_array_put+0xc>

000355da <at_params_int_get>:
	return 0;
}

int at_params_int_get(const struct at_param_list *list, size_t index,
		      u32_t *value)
{
   355da:	b510      	push	{r4, lr}
   355dc:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   355de:	b910      	cbnz	r0, 355e6 <at_params_int_get+0xc>
		return -EINVAL;
   355e0:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = param->value.int_val;
	return 0;
}
   355e4:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   355e6:	6843      	ldr	r3, [r0, #4]
   355e8:	2b00      	cmp	r3, #0
   355ea:	d0f9      	beq.n	355e0 <at_params_int_get+0x6>
   355ec:	2a00      	cmp	r2, #0
   355ee:	d0f7      	beq.n	355e0 <at_params_int_get+0x6>
	struct at_param *param = at_params_get(list, index);
   355f0:	f7ee fb92 	bl	23d18 <at_params_get>
	if (param == NULL) {
   355f4:	2800      	cmp	r0, #0
   355f6:	d0f3      	beq.n	355e0 <at_params_int_get+0x6>
	if ((param->type != AT_PARAM_TYPE_NUM_INT) &&
   355f8:	7803      	ldrb	r3, [r0, #0]
   355fa:	3b01      	subs	r3, #1
   355fc:	2b01      	cmp	r3, #1
   355fe:	d8ef      	bhi.n	355e0 <at_params_int_get+0x6>
	*value = param->value.int_val;
   35600:	6883      	ldr	r3, [r0, #8]
	return 0;
   35602:	2000      	movs	r0, #0
	*value = param->value.int_val;
   35604:	6023      	str	r3, [r4, #0]
	return 0;
   35606:	e7ed      	b.n	355e4 <at_params_int_get+0xa>

00035608 <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   35608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3560a:	4617      	mov	r7, r2
   3560c:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL ||
   3560e:	b910      	cbnz	r0, 35616 <at_params_string_get+0xe>
	    value == NULL || len == NULL) {
		return -EINVAL;
   35610:	f06f 0015 	mvn.w	r0, #21

	memcpy(value, param->value.str_val, param_len);
	*len = param_len;

	return 0;
}
   35614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || value == NULL ||
   35616:	6843      	ldr	r3, [r0, #4]
   35618:	2b00      	cmp	r3, #0
   3561a:	d0f9      	beq.n	35610 <at_params_string_get+0x8>
   3561c:	2a00      	cmp	r2, #0
   3561e:	d0f7      	beq.n	35610 <at_params_string_get+0x8>
	    value == NULL || len == NULL) {
   35620:	2c00      	cmp	r4, #0
   35622:	d0f5      	beq.n	35610 <at_params_string_get+0x8>
	struct at_param *param = at_params_get(list, index);
   35624:	f7ee fb78 	bl	23d18 <at_params_get>
	if (param == NULL) {
   35628:	4606      	mov	r6, r0
   3562a:	2800      	cmp	r0, #0
   3562c:	d0f0      	beq.n	35610 <at_params_string_get+0x8>
	if (param->type != AT_PARAM_TYPE_STRING) {
   3562e:	7803      	ldrb	r3, [r0, #0]
   35630:	2b03      	cmp	r3, #3
   35632:	d1ed      	bne.n	35610 <at_params_string_get+0x8>
	size_t param_len = at_param_size(param);
   35634:	f7ee fb92 	bl	23d5c <at_param_size>
	if (*len < param_len) {
   35638:	6823      	ldr	r3, [r4, #0]
	size_t param_len = at_param_size(param);
   3563a:	4605      	mov	r5, r0
	if (*len < param_len) {
   3563c:	4283      	cmp	r3, r0
   3563e:	d307      	bcc.n	35650 <at_params_string_get+0x48>
   35640:	4602      	mov	r2, r0
   35642:	68b1      	ldr	r1, [r6, #8]
   35644:	4638      	mov	r0, r7
   35646:	f000 fa5f 	bl	35b08 <memcpy>
	return 0;
   3564a:	2000      	movs	r0, #0
	*len = param_len;
   3564c:	6025      	str	r5, [r4, #0]
	return 0;
   3564e:	e7e1      	b.n	35614 <at_params_string_get+0xc>
		return -ENOMEM;
   35650:	f06f 000b 	mvn.w	r0, #11
   35654:	e7de      	b.n	35614 <at_params_string_get+0xc>

00035656 <response_is_valid>:
{
   35656:	b537      	push	{r0, r1, r2, r4, r5, lr}
   35658:	4605      	mov	r5, r0
	if ((response_len < strlen(check)) ||
   3565a:	4610      	mov	r0, r2
{
   3565c:	460c      	mov	r4, r1
	if ((response_len < strlen(check)) ||
   3565e:	9201      	str	r2, [sp, #4]
   35660:	f7e7 fd46 	bl	1d0f0 <strlen>
   35664:	42a0      	cmp	r0, r4
   35666:	d809      	bhi.n	3567c <response_is_valid+0x26>
	    (memcmp(response, check, response_len) != 0)) {
   35668:	4622      	mov	r2, r4
   3566a:	4628      	mov	r0, r5
   3566c:	9901      	ldr	r1, [sp, #4]
   3566e:	f000 fa3d 	bl	35aec <memcmp>
	if ((response_len < strlen(check)) ||
   35672:	fab0 f080 	clz	r0, r0
   35676:	0940      	lsrs	r0, r0, #5
}
   35678:	b003      	add	sp, #12
   3567a:	bd30      	pop	{r4, r5, pc}
		return false;
   3567c:	2000      	movs	r0, #0
   3567e:	e7fb      	b.n	35678 <response_is_valid+0x22>

00035680 <lte_lc_connect>:
	return w_lte_lc_connect();
   35680:	f7ee bc98 	b.w	23fb4 <w_lte_lc_connect>

00035684 <lte_lc_init_and_connect>:
{
   35684:	b508      	push	{r3, lr}
	ret = w_lte_lc_init();
   35686:	f7ee fbeb 	bl	23e60 <w_lte_lc_init>
	if (ret) {
   3568a:	b918      	cbnz	r0, 35694 <lte_lc_init_and_connect+0x10>
}
   3568c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return w_lte_lc_connect();
   35690:	f7ee bc90 	b.w	23fb4 <w_lte_lc_connect>
}
   35694:	bd08      	pop	{r3, pc}

00035696 <error_evt_send.isra.0>:
static int error_evt_send(const struct download_client *dl, int error)
   35696:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct download_client_evt evt = {
   35698:	2300      	movs	r3, #0
   3569a:	9301      	str	r3, [sp, #4]
   3569c:	9303      	str	r3, [sp, #12]
   3569e:	2301      	movs	r3, #1
		.error = -error
   356a0:	4249      	negs	r1, r1
	const struct download_client_evt evt = {
   356a2:	f88d 3004 	strb.w	r3, [sp, #4]
   356a6:	9102      	str	r1, [sp, #8]
	return dl->callback(&evt);
   356a8:	6803      	ldr	r3, [r0, #0]
   356aa:	a801      	add	r0, sp, #4
   356ac:	4798      	blx	r3
}
   356ae:	b005      	add	sp, #20
   356b0:	f85d fb04 	ldr.w	pc, [sp], #4

000356b4 <download_client_file_size_get>:
	k_thread_resume(client->tid);
}

int download_client_file_size_get(struct download_client *client, size_t *size)
{
	if (!client || !size) {
   356b4:	b130      	cbz	r0, 356c4 <download_client_file_size_get+0x10>
   356b6:	b129      	cbz	r1, 356c4 <download_client_file_size_get+0x10>
		return -EINVAL;
	}

	*size = client->file_size;
   356b8:	f241 0308 	movw	r3, #4104	; 0x1008
   356bc:	58c3      	ldr	r3, [r0, r3]

	return 0;
   356be:	2000      	movs	r0, #0
	*size = client->file_size;
   356c0:	600b      	str	r3, [r1, #0]
	return 0;
   356c2:	4770      	bx	lr
		return -EINVAL;
   356c4:	f06f 0015 	mvn.w	r0, #21
}
   356c8:	4770      	bx	lr

000356ca <dfu_target_callback_handler>:
	switch (evt) {
   356ca:	b118      	cbz	r0, 356d4 <dfu_target_callback_handler+0xa>
   356cc:	2801      	cmp	r0, #1
   356ce:	d004      	beq.n	356da <dfu_target_callback_handler+0x10>
		send_evt(FOTA_DOWNLOAD_EVT_ERROR);
   356d0:	2004      	movs	r0, #4
   356d2:	e000      	b.n	356d6 <dfu_target_callback_handler+0xc>
		send_evt(FOTA_DOWNLOAD_EVT_ERASE_PENDING);
   356d4:	2002      	movs	r0, #2
		send_evt(FOTA_DOWNLOAD_EVT_ERROR);
   356d6:	f7ef ba47 	b.w	24b68 <send_evt>
		send_evt(FOTA_DOWNLOAD_EVT_ERASE_DONE);
   356da:	2003      	movs	r0, #3
   356dc:	e7fb      	b.n	356d6 <dfu_target_callback_handler+0xc>

000356de <aws_jobs_cmp>:

bool aws_jobs_cmp(const char *sub, const char *pub, size_t pub_len,
		 const u8_t *suffix)
{
   356de:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   356e2:	460d      	mov	r5, r1
   356e4:	4690      	mov	r8, r2
   356e6:	461f      	mov	r7, r3
	int ret;

	if (sub == NULL || pub == NULL || suffix == NULL ||
   356e8:	4606      	mov	r6, r0
   356ea:	b328      	cbz	r0, 35738 <aws_jobs_cmp+0x5a>
   356ec:	b331      	cbz	r1, 3573c <aws_jobs_cmp+0x5e>
   356ee:	b33b      	cbz	r3, 35740 <aws_jobs_cmp+0x62>
   356f0:	7804      	ldrb	r4, [r0, #0]
   356f2:	b33c      	cbz	r4, 35744 <aws_jobs_cmp+0x66>
	    sub[0] == '\0' || pub[0] == '\0') {
   356f4:	780c      	ldrb	r4, [r1, #0]
   356f6:	b32c      	cbz	r4, 35744 <aws_jobs_cmp+0x66>
		return false;
	}

	size_t sub_len = strlen(sub);
   356f8:	f7e7 fcfa 	bl	1d0f0 <strlen>
   356fc:	4604      	mov	r4, r0
	size_t suff_len = strlen(suffix);
   356fe:	4638      	mov	r0, r7
   35700:	f7e7 fcf6 	bl	1d0f0 <strlen>

	if (sub[sub_len - 1] == '#') {
   35704:	1933      	adds	r3, r6, r4
   35706:	f813 3c01 	ldrb.w	r3, [r3, #-1]
	size_t suff_len = strlen(suffix);
   3570a:	4681      	mov	r9, r0
	if (sub[sub_len - 1] == '#') {
   3570c:	2b23      	cmp	r3, #35	; 0x23
		/* Strip trailing '/#' */
		sub_len -= 2;
   3570e:	bf08      	it	eq
   35710:	3c02      	subeq	r4, #2
	}

	ret = strncmp(sub, pub, sub_len);
   35712:	4622      	mov	r2, r4
   35714:	4629      	mov	r1, r5
   35716:	4630      	mov	r0, r6
   35718:	f000 fb32 	bl	35d80 <strncmp>
	if (ret == 0 && suff_len > 0) {
   3571c:	b948      	cbnz	r0, 35732 <aws_jobs_cmp+0x54>
   3571e:	f1b9 0f00 	cmp.w	r9, #0
   35722:	d006      	beq.n	35732 <aws_jobs_cmp+0x54>
		/* Everything up until suffix is correct, check suffix */
		return strncmp(&pub[pub_len - suff_len], suffix, suff_len) == 0;
   35724:	eba8 0009 	sub.w	r0, r8, r9
   35728:	464a      	mov	r2, r9
   3572a:	4639      	mov	r1, r7
   3572c:	4428      	add	r0, r5
   3572e:	f000 fb27 	bl	35d80 <strncmp>
	} else {
		return ret == 0;
   35732:	fab0 f080 	clz	r0, r0
   35736:	0940      	lsrs	r0, r0, #5
	}
}
   35738:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return false;
   3573c:	4608      	mov	r0, r1
   3573e:	e7fb      	b.n	35738 <aws_jobs_cmp+0x5a>
   35740:	4618      	mov	r0, r3
   35742:	e7f9      	b.n	35738 <aws_jobs_cmp+0x5a>
   35744:	4620      	mov	r0, r4
   35746:	e7f7      	b.n	35738 <aws_jobs_cmp+0x5a>

00035748 <strncpy_nullterm>:
{
   35748:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3574a:	4604      	mov	r4, r0
	size_t len = strlen(src) + 1;
   3574c:	4608      	mov	r0, r1
{
   3574e:	4615      	mov	r5, r2
	size_t len = strlen(src) + 1;
   35750:	9101      	str	r1, [sp, #4]
   35752:	f7e7 fccd 	bl	1d0f0 <strlen>
   35756:	1c46      	adds	r6, r0, #1
   35758:	42ae      	cmp	r6, r5
   3575a:	4632      	mov	r2, r6
   3575c:	4620      	mov	r0, r4
   3575e:	bf28      	it	cs
   35760:	462a      	movcs	r2, r5
   35762:	9901      	ldr	r1, [sp, #4]
   35764:	f000 f9d0 	bl	35b08 <memcpy>
	if (len > maxlen) {
   35768:	42ae      	cmp	r6, r5
		dst[maxlen - 1] = '\0';
   3576a:	bf82      	ittt	hi
   3576c:	2300      	movhi	r3, #0
   3576e:	1964      	addhi	r4, r4, r5
   35770:	f804 3c01 	strbhi.w	r3, [r4, #-1]
}
   35774:	b002      	add	sp, #8
   35776:	bd70      	pop	{r4, r5, r6, pc}

00035778 <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   35778:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   3577c:	4770      	bx	lr

0003577e <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   3577e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   35782:	4770      	bx	lr

00035784 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   35784:	f44f 7080 	mov.w	r0, #256	; 0x100
   35788:	4770      	bx	lr

0003578a <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   3578a:	f7fe ba50 	b.w	33c2e <z_clock_idle_exit>

0003578e <k_mem_pool_malloc>:
{
   3578e:	b507      	push	{r0, r1, r2, lr}
   35790:	2204      	movs	r2, #4
   35792:	188a      	adds	r2, r1, r2
   35794:	d204      	bcs.n	357a0 <k_mem_pool_malloc+0x12>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   35796:	2300      	movs	r3, #0
   35798:	4669      	mov	r1, sp
   3579a:	f7f9 f99b 	bl	2ead4 <k_mem_pool_alloc>
   3579e:	b118      	cbz	r0, 357a8 <k_mem_pool_malloc+0x1a>
		return NULL;
   357a0:	2000      	movs	r0, #0
}
   357a2:	b003      	add	sp, #12
   357a4:	f85d fb04 	ldr.w	pc, [sp], #4
   357a8:	e9dd 3200 	ldrd	r3, r2, [sp]
   357ac:	601a      	str	r2, [r3, #0]
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   357ae:	9800      	ldr	r0, [sp, #0]
   357b0:	3004      	adds	r0, #4
   357b2:	e7f6      	b.n	357a2 <k_mem_pool_malloc+0x14>

000357b4 <k_free>:
	if (ptr != NULL) {
   357b4:	b110      	cbz	r0, 357bc <k_free+0x8>
		k_mem_pool_free_id(ptr);
   357b6:	3804      	subs	r0, #4
   357b8:	f7f9 b9f2 	b.w	2eba0 <k_mem_pool_free_id>
}
   357bc:	4770      	bx	lr

000357be <k_calloc>:
{
   357be:	b513      	push	{r0, r1, r4, lr}
	return a != 0 && (c / a) != b;
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a * b;
   357c0:	fb01 f200 	mul.w	r2, r1, r0

	*result = c;

	return a != 0 && (c / a) != b;
   357c4:	b118      	cbz	r0, 357ce <k_calloc+0x10>
   357c6:	fbb2 f0f0 	udiv	r0, r2, r0
   357ca:	4281      	cmp	r1, r0
   357cc:	d10c      	bne.n	357e8 <k_calloc+0x2a>
	ret = k_malloc(bounds);
   357ce:	4610      	mov	r0, r2
   357d0:	9201      	str	r2, [sp, #4]
   357d2:	f7f9 fa45 	bl	2ec60 <k_malloc>
	if (ret != NULL) {
   357d6:	4604      	mov	r4, r0
   357d8:	b118      	cbz	r0, 357e2 <k_calloc+0x24>
__ssp_bos_icheck3(memset, void *, int)
   357da:	2100      	movs	r1, #0
   357dc:	9a01      	ldr	r2, [sp, #4]
   357de:	f000 f9b3 	bl	35b48 <memset>
}
   357e2:	4620      	mov	r0, r4
   357e4:	b002      	add	sp, #8
   357e6:	bd10      	pop	{r4, pc}
		return NULL;
   357e8:	2400      	movs	r4, #0
   357ea:	e7fa      	b.n	357e2 <k_calloc+0x24>

000357ec <z_impl_k_mutex_init>:
	mutex->owner = NULL;
   357ec:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   357ee:	e9c0 0000 	strd	r0, r0, [r0]
	mutex->lock_count = 0U;
   357f2:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   357f6:	4618      	mov	r0, r3
   357f8:	4770      	bx	lr

000357fa <z_queue_node_peek>:
{
   357fa:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (u8_t)0)) {
   357fc:	4604      	mov	r4, r0
   357fe:	b130      	cbz	r0, 3580e <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   35800:	6802      	ldr	r2, [r0, #0]
   35802:	0793      	lsls	r3, r2, #30
   35804:	d003      	beq.n	3580e <z_queue_node_peek+0x14>
		ret = anode->data;
   35806:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   35808:	b109      	cbz	r1, 3580e <z_queue_node_peek+0x14>
			k_free(anode);
   3580a:	f7ff ffd3 	bl	357b4 <k_free>
}
   3580e:	4620      	mov	r0, r4
   35810:	bd10      	pop	{r4, pc}

00035812 <z_impl_k_queue_init>:
	list->head = NULL;
   35812:	2300      	movs	r3, #0
	list->tail = NULL;
   35814:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   35818:	6083      	str	r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   3581a:	f100 030c 	add.w	r3, r0, #12
   3581e:	e9c0 3303 	strd	r3, r3, [r0, #12]
}
   35822:	4770      	bx	lr

00035824 <k_queue_append>:
{
   35824:	460a      	mov	r2, r1
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   35826:	2300      	movs	r3, #0
   35828:	6841      	ldr	r1, [r0, #4]
   3582a:	f7f9 bd21 	b.w	2f270 <queue_insert>

0003582e <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   3582e:	7b43      	ldrb	r3, [r0, #13]
   35830:	06db      	lsls	r3, r3, #27
   35832:	bf03      	ittte	eq
   35834:	6980      	ldreq	r0, [r0, #24]
   35836:	fab0 f080 	clzeq	r0, r0
   3583a:	0940      	lsreq	r0, r0, #5
   3583c:	2000      	movne	r0, #0
}
   3583e:	4770      	bx	lr

00035840 <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   35840:	f990 000e 	ldrsb.w	r0, [r0, #14]
   35844:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   35848:	4298      	cmp	r0, r3
   3584a:	bfac      	ite	ge
   3584c:	2000      	movge	r0, #0
   3584e:	2001      	movlt	r0, #1
   35850:	4770      	bx	lr

00035852 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   35852:	4603      	mov	r3, r0
   35854:	b920      	cbnz	r0, 35860 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   35856:	f3ef 8205 	mrs	r2, IPSR
   3585a:	b90a      	cbnz	r2, 35860 <z_reschedule_irqlock+0xe>
   3585c:	f7ea bd80 	b.w	20360 <arch_swap>
   35860:	f383 8811 	msr	BASEPRI, r3
   35864:	f3bf 8f6f 	isb	sy
}
   35868:	4770      	bx	lr

0003586a <z_reschedule_unlocked>:
	__asm__ volatile(
   3586a:	f04f 0320 	mov.w	r3, #32
   3586e:	f3ef 8011 	mrs	r0, BASEPRI
   35872:	f383 8811 	msr	BASEPRI, r3
   35876:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   3587a:	f7ff bfea 	b.w	35852 <z_reschedule_irqlock>

0003587e <z_priq_dumb_best>:
	return list->head == list;
   3587e:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   35880:	4298      	cmp	r0, r3
   35882:	d004      	beq.n	3588e <z_priq_dumb_best+0x10>
	if (n != NULL) {
   35884:	2b00      	cmp	r3, #0
   35886:	bf38      	it	cc
   35888:	2300      	movcc	r3, #0
   3588a:	4618      	mov	r0, r3
   3588c:	4770      	bx	lr
	struct k_thread *thread = NULL;
   3588e:	2000      	movs	r0, #0
}
   35890:	4770      	bx	lr

00035892 <z_unpend_all>:
{
   35892:	b570      	push	{r4, r5, r6, lr}
   35894:	4605      	mov	r5, r0
	int need_sched = 0;
   35896:	2600      	movs	r6, #0
	return list->head == list;
   35898:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3589a:	42a5      	cmp	r5, r4
   3589c:	d000      	beq.n	358a0 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   3589e:	b90c      	cbnz	r4, 358a4 <z_unpend_all+0x12>
}
   358a0:	4630      	mov	r0, r6
   358a2:	bd70      	pop	{r4, r5, r6, pc}
		z_unpend_thread(thread);
   358a4:	4620      	mov	r0, r4
   358a6:	f7f9 ffbf 	bl	2f828 <z_unpend_thread>
	if (z_is_thread_ready(thread)) {
   358aa:	4620      	mov	r0, r4
   358ac:	f7ff ffbf 	bl	3582e <z_is_thread_ready>
		need_sched = 1;
   358b0:	2601      	movs	r6, #1
   358b2:	2800      	cmp	r0, #0
   358b4:	d0f0      	beq.n	35898 <z_unpend_all+0x6>
		z_add_thread_to_ready_q(thread);
   358b6:	4620      	mov	r0, r4
   358b8:	f7fa f8be 	bl	2fa38 <z_add_thread_to_ready_q>
   358bc:	e7ec      	b.n	35898 <z_unpend_all+0x6>

000358be <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   358be:	b15a      	cbz	r2, 358d8 <z_impl_k_sem_init+0x1a>
   358c0:	428a      	cmp	r2, r1
   358c2:	d309      	bcc.n	358d8 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   358c4:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   358c8:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   358cc:	e9c0 0000 	strd	r0, r0, [r0]
   358d0:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   358d4:	2000      	movs	r0, #0
   358d6:	4770      	bx	lr
		return -EINVAL;
   358d8:	f06f 0015 	mvn.w	r0, #21
}
   358dc:	4770      	bx	lr

000358de <k_is_in_isr>:
   358de:	f3ef 8005 	mrs	r0, IPSR
}
   358e2:	3800      	subs	r0, #0
   358e4:	bf18      	it	ne
   358e6:	2001      	movne	r0, #1
   358e8:	4770      	bx	lr

000358ea <z_impl_k_thread_name_set>:
}
   358ea:	f06f 0057 	mvn.w	r0, #87	; 0x57
   358ee:	4770      	bx	lr

000358f0 <k_thread_name_get>:
}
   358f0:	2000      	movs	r0, #0
   358f2:	4770      	bx	lr

000358f4 <z_new_thread_init>:
{
   358f4:	b510      	push	{r4, lr}
	thread_base->user_options = (u8_t)options;
   358f6:	9c02      	ldr	r4, [sp, #8]
	thread_base->prio = priority;
   358f8:	7383      	strb	r3, [r0, #14]
	thread_base->user_options = (u8_t)options;
   358fa:	7304      	strb	r4, [r0, #12]
	thread_base->sched_locked = 0U;
   358fc:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
   358fe:	2404      	movs	r4, #4
	node->prev = NULL;
   35900:	e9c0 3306 	strd	r3, r3, [r0, #24]
	thread->fn_abort = NULL;
   35904:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
	thread->stack_info.size = (u32_t)stackSize;
   35908:	e9c0 1216 	strd	r1, r2, [r0, #88]	; 0x58
	thread_base->thread_state = (u8_t)initial_state;
   3590c:	7344      	strb	r4, [r0, #13]
	thread_base->sched_locked = 0U;
   3590e:	73c3      	strb	r3, [r0, #15]
}
   35910:	bd10      	pop	{r4, pc}

00035912 <z_thread_single_resume>:
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   35912:	7b42      	ldrb	r2, [r0, #13]
   35914:	f022 0110 	bic.w	r1, r2, #16
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   35918:	0712      	lsls	r2, r2, #28
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   3591a:	7341      	strb	r1, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   3591c:	d103      	bne.n	35926 <z_thread_single_resume+0x14>
	if (z_is_thread_ready(thread)) {
   3591e:	6983      	ldr	r3, [r0, #24]
   35920:	b90b      	cbnz	r3, 35926 <z_thread_single_resume+0x14>
		z_add_thread_to_ready_q(thread);
   35922:	f7fa b889 	b.w	2fa38 <z_add_thread_to_ready_q>
}
   35926:	4770      	bx	lr

00035928 <k_work_submit_to_queue>:
{
   35928:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   3592a:	f101 0308 	add.w	r3, r1, #8
   3592e:	e8d3 2fef 	ldaex	r2, [r3]
   35932:	f042 0c01 	orr.w	ip, r2, #1
   35936:	e8c3 cfee 	stlex	lr, ip, [r3]
   3593a:	f1be 0f00 	cmp.w	lr, #0
   3593e:	d1f6      	bne.n	3592e <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   35940:	07d3      	lsls	r3, r2, #31
   35942:	d403      	bmi.n	3594c <k_work_submit_to_queue+0x24>
}
   35944:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   35948:	f7ff bf6c 	b.w	35824 <k_queue_append>
}
   3594c:	f85d fb04 	ldr.w	pc, [sp], #4

00035950 <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   35950:	f1a0 010c 	sub.w	r1, r0, #12
   35954:	6900      	ldr	r0, [r0, #16]
   35956:	f7ff bfe7 	b.w	35928 <k_work_submit_to_queue>

0003595a <work_cancel>:
	CHECKIF(work->work_q == NULL) {
   3595a:	69c3      	ldr	r3, [r0, #28]
{
   3595c:	b570      	push	{r4, r5, r6, lr}
   3595e:	4604      	mov	r4, r0
	CHECKIF(work->work_q == NULL) {
   35960:	2b00      	cmp	r3, #0
   35962:	d039      	beq.n	359d8 <work_cancel+0x7e>
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   35964:	f100 0508 	add.w	r5, r0, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   35968:	e8d5 3faf 	lda	r3, [r5]
	if (k_work_pending(&work->work)) {
   3596c:	07db      	lsls	r3, r3, #31
   3596e:	d52f      	bpl.n	359d0 <work_cancel+0x76>
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   35970:	2100      	movs	r1, #0
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   35972:	69c2      	ldr	r2, [r0, #28]
   35974:	6813      	ldr	r3, [r2, #0]
   35976:	b913      	cbnz	r3, 3597e <work_cancel+0x24>
			return -EINVAL;
   35978:	f06f 0015 	mvn.w	r0, #21
}
   3597c:	bd70      	pop	{r4, r5, r6, pc}
   3597e:	429c      	cmp	r4, r3
   35980:	d121      	bne.n	359c6 <work_cancel+0x6c>
Z_GENLIST_REMOVE(sflist, sfnode)
   35982:	6823      	ldr	r3, [r4, #0]
   35984:	6856      	ldr	r6, [r2, #4]
   35986:	f023 0003 	bic.w	r0, r3, #3
   3598a:	b991      	cbnz	r1, 359b2 <work_cancel+0x58>
   3598c:	42b4      	cmp	r4, r6
	list->head = node;
   3598e:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   35990:	d100      	bne.n	35994 <work_cancel+0x3a>
	list->tail = node;
   35992:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   35994:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   35996:	f003 0303 	and.w	r3, r3, #3
   3599a:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   3599c:	2000      	movs	r0, #0
   3599e:	61e0      	str	r0, [r4, #28]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   359a0:	e8d5 3fef 	ldaex	r3, [r5]
   359a4:	f023 0301 	bic.w	r3, r3, #1
   359a8:	e8c5 3fe2 	stlex	r2, r3, [r5]
   359ac:	2a00      	cmp	r2, #0
   359ae:	d0e5      	beq.n	3597c <work_cancel+0x22>
   359b0:	e7f6      	b.n	359a0 <work_cancel+0x46>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   359b2:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   359b4:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   359b6:	f003 0303 	and.w	r3, r3, #3
   359ba:	ea43 0300 	orr.w	r3, r3, r0
   359be:	600b      	str	r3, [r1, #0]
	list->tail = node;
   359c0:	bf08      	it	eq
   359c2:	6051      	streq	r1, [r2, #4]
}
   359c4:	e7e6      	b.n	35994 <work_cancel+0x3a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   359c6:	6818      	ldr	r0, [r3, #0]
   359c8:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   359ca:	f020 0303 	bic.w	r3, r0, #3
   359ce:	e7d2      	b.n	35976 <work_cancel+0x1c>
		(void)z_abort_timeout(&work->timeout);
   359d0:	300c      	adds	r0, #12
   359d2:	f7fb fb47 	bl	31064 <z_abort_timeout>
   359d6:	e7e1      	b.n	3599c <work_cancel+0x42>
		return -EAGAIN;
   359d8:	f06f 000a 	mvn.w	r0, #10
   359dc:	e7ce      	b.n	3597c <work_cancel+0x22>

000359de <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   359de:	2300      	movs	r3, #0
   359e0:	e9c0 3100 	strd	r3, r1, [r0]
	node->next = NULL;
   359e4:	e9c0 3302 	strd	r3, r3, [r0, #8]
	node->prev = NULL;
   359e8:	6103      	str	r3, [r0, #16]
	work->work_q = NULL;
   359ea:	61c3      	str	r3, [r0, #28]
}
   359ec:	4770      	bx	lr

000359ee <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
   359ee:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
   359f0:	f7fb fcce 	bl	31390 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
   359f4:	bd08      	pop	{r3, pc}

000359f6 <z_impl_k_uptime_get>:

s64_t z_impl_k_uptime_get(void)
{
   359f6:	b510      	push	{r4, lr}
	return k_ticks_to_ms_floor64(z_tick_get());
   359f8:	f7fb fcca 	bl	31390 <z_tick_get>
			return (t * to_hz + off) / from_hz;
   359fc:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   35a00:	fba0 2304 	umull	r2, r3, r0, r4
   35a04:	fb04 3301 	mla	r3, r4, r1, r3
   35a08:	0bd0      	lsrs	r0, r2, #15
}
   35a0a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   35a0e:	0bd9      	lsrs	r1, r3, #15
   35a10:	bd10      	pop	{r4, pc}

00035a12 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state)
{
   35a12:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   35a14:	6884      	ldr	r4, [r0, #8]
{
   35a16:	4605      	mov	r5, r0
   35a18:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller) {
   35a1a:	b19c      	cbz	r4, 35a44 <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   35a1c:	68a3      	ldr	r3, [r4, #8]
   35a1e:	b95b      	cbnz	r3, 35a38 <signal_poll_event+0x26>
	int retcode = 0;
   35a20:	4618      	mov	r0, r3
			retcode = poller->cb(event, state);
		}

		poller->is_polling = false;
   35a22:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   35a24:	2300      	movs	r3, #0
   35a26:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   35a28:	68eb      	ldr	r3, [r5, #12]
   35a2a:	f3c3 3104 	ubfx	r1, r3, #12, #5
   35a2e:	430e      	orrs	r6, r1
   35a30:	f366 3310 	bfi	r3, r6, #12, #5
   35a34:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   35a36:	e004      	b.n	35a42 <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   35a38:	4798      	blx	r3
		poller->is_polling = false;
   35a3a:	2300      	movs	r3, #0
		if (retcode < 0) {
   35a3c:	2800      	cmp	r0, #0
		poller->is_polling = false;
   35a3e:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   35a40:	daf0      	bge.n	35a24 <signal_poll_event+0x12>
}
   35a42:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   35a44:	4620      	mov	r0, r4
   35a46:	e7ed      	b.n	35a24 <signal_poll_event+0x12>

00035a48 <add_event>:
{
   35a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35a4a:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   35a4c:	e9d0 2300 	ldrd	r2, r3, [r0]
   35a50:	4290      	cmp	r0, r2
   35a52:	4604      	mov	r4, r0
   35a54:	460d      	mov	r5, r1
   35a56:	d106      	bne.n	35a66 <add_event+0x1e>
	node->prev = list->tail;
   35a58:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   35a5a:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   35a5c:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   35a5e:	6863      	ldr	r3, [r4, #4]
   35a60:	601d      	str	r5, [r3, #0]
	list->tail = node;
   35a62:	6065      	str	r5, [r4, #4]
}
   35a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   35a66:	2b00      	cmp	r3, #0
   35a68:	d0f6      	beq.n	35a58 <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   35a6a:	689b      	ldr	r3, [r3, #8]
   35a6c:	6879      	ldr	r1, [r7, #4]
   35a6e:	6858      	ldr	r0, [r3, #4]
   35a70:	f7ff fee6 	bl	35840 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   35a74:	2800      	cmp	r0, #0
   35a76:	d1ef      	bne.n	35a58 <add_event+0x10>
	return list->head == list;
   35a78:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   35a7a:	42b4      	cmp	r4, r6
   35a7c:	d0ec      	beq.n	35a58 <add_event+0x10>
   35a7e:	2e00      	cmp	r6, #0
   35a80:	bf38      	it	cc
   35a82:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   35a84:	2e00      	cmp	r6, #0
   35a86:	d0e7      	beq.n	35a58 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   35a88:	68b3      	ldr	r3, [r6, #8]
   35a8a:	6878      	ldr	r0, [r7, #4]
   35a8c:	6859      	ldr	r1, [r3, #4]
   35a8e:	f7ff fed7 	bl	35840 <z_is_t1_higher_prio_than_t2>
   35a92:	b128      	cbz	r0, 35aa0 <add_event+0x58>
	node->prev = successor->prev;
   35a94:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   35a96:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   35a9a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   35a9c:	6075      	str	r5, [r6, #4]
			return;
   35a9e:	e7e1      	b.n	35a64 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   35aa0:	6863      	ldr	r3, [r4, #4]
   35aa2:	42b3      	cmp	r3, r6
   35aa4:	d0d8      	beq.n	35a58 <add_event+0x10>
   35aa6:	6836      	ldr	r6, [r6, #0]
   35aa8:	e7ec      	b.n	35a84 <add_event+0x3c>

00035aaa <z_handle_obj_poll_events>:

void z_handle_obj_poll_events(sys_dlist_t *events, u32_t state)
{
   35aaa:	4603      	mov	r3, r0
	return list->head == list;
   35aac:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   35aae:	4283      	cmp	r3, r0
   35ab0:	d008      	beq.n	35ac4 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   35ab2:	e9d0 3200 	ldrd	r3, r2, [r0]
   35ab6:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   35ab8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   35aba:	2300      	movs	r3, #0
	node->prev = NULL;
   35abc:	e9c0 3300 	strd	r3, r3, [r0]
	struct k_poll_event *poll_event;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (poll_event != NULL) {
		(void) signal_poll_event(poll_event, state);
   35ac0:	f7ff bfa7 	b.w	35a12 <signal_poll_event>
	}
}
   35ac4:	4770      	bx	lr

00035ac6 <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
   35ac6:	4770      	bx	lr

00035ac8 <atoi>:
   35ac8:	220a      	movs	r2, #10
   35aca:	2100      	movs	r1, #0
   35acc:	f7fc bc02 	b.w	322d4 <strtol>

00035ad0 <memchr>:
   35ad0:	b2c9      	uxtb	r1, r1
   35ad2:	4402      	add	r2, r0
   35ad4:	b510      	push	{r4, lr}
   35ad6:	4290      	cmp	r0, r2
   35ad8:	4603      	mov	r3, r0
   35ada:	d101      	bne.n	35ae0 <memchr+0x10>
   35adc:	2300      	movs	r3, #0
   35ade:	e003      	b.n	35ae8 <memchr+0x18>
   35ae0:	781c      	ldrb	r4, [r3, #0]
   35ae2:	3001      	adds	r0, #1
   35ae4:	428c      	cmp	r4, r1
   35ae6:	d1f6      	bne.n	35ad6 <memchr+0x6>
   35ae8:	4618      	mov	r0, r3
   35aea:	bd10      	pop	{r4, pc}

00035aec <memcmp>:
   35aec:	b530      	push	{r4, r5, lr}
   35aee:	3901      	subs	r1, #1
   35af0:	2400      	movs	r4, #0
   35af2:	42a2      	cmp	r2, r4
   35af4:	d101      	bne.n	35afa <memcmp+0xe>
   35af6:	2000      	movs	r0, #0
   35af8:	e005      	b.n	35b06 <memcmp+0x1a>
   35afa:	5d03      	ldrb	r3, [r0, r4]
   35afc:	3401      	adds	r4, #1
   35afe:	5d0d      	ldrb	r5, [r1, r4]
   35b00:	42ab      	cmp	r3, r5
   35b02:	d0f6      	beq.n	35af2 <memcmp+0x6>
   35b04:	1b58      	subs	r0, r3, r5
   35b06:	bd30      	pop	{r4, r5, pc}

00035b08 <memcpy>:
   35b08:	440a      	add	r2, r1
   35b0a:	1e43      	subs	r3, r0, #1
   35b0c:	4291      	cmp	r1, r2
   35b0e:	d100      	bne.n	35b12 <memcpy+0xa>
   35b10:	4770      	bx	lr
   35b12:	b510      	push	{r4, lr}
   35b14:	f811 4b01 	ldrb.w	r4, [r1], #1
   35b18:	4291      	cmp	r1, r2
   35b1a:	f803 4f01 	strb.w	r4, [r3, #1]!
   35b1e:	d1f9      	bne.n	35b14 <memcpy+0xc>
   35b20:	bd10      	pop	{r4, pc}

00035b22 <__memcpy_chk>:
   35b22:	429a      	cmp	r2, r3
   35b24:	b508      	push	{r3, lr}
   35b26:	d901      	bls.n	35b2c <__memcpy_chk+0xa>
   35b28:	f7fc fd62 	bl	325f0 <__chk_fail>
   35b2c:	4281      	cmp	r1, r0
   35b2e:	d804      	bhi.n	35b3a <__memcpy_chk+0x18>
   35b30:	188b      	adds	r3, r1, r2
   35b32:	4298      	cmp	r0, r3
   35b34:	d3f8      	bcc.n	35b28 <__memcpy_chk+0x6>
   35b36:	4281      	cmp	r1, r0
   35b38:	d102      	bne.n	35b40 <__memcpy_chk+0x1e>
   35b3a:	1883      	adds	r3, r0, r2
   35b3c:	4299      	cmp	r1, r3
   35b3e:	d3f3      	bcc.n	35b28 <__memcpy_chk+0x6>
   35b40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   35b44:	f7ff bfe0 	b.w	35b08 <memcpy>

00035b48 <memset>:
   35b48:	4402      	add	r2, r0
   35b4a:	4603      	mov	r3, r0
   35b4c:	4293      	cmp	r3, r2
   35b4e:	d100      	bne.n	35b52 <memset+0xa>
   35b50:	4770      	bx	lr
   35b52:	f803 1b01 	strb.w	r1, [r3], #1
   35b56:	e7f9      	b.n	35b4c <memset+0x4>

00035b58 <__memset_chk>:
   35b58:	429a      	cmp	r2, r3
   35b5a:	b508      	push	{r3, lr}
   35b5c:	d901      	bls.n	35b62 <__memset_chk+0xa>
   35b5e:	f7fc fd47 	bl	325f0 <__chk_fail>
   35b62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   35b66:	f7ff bfef 	b.w	35b48 <memset>

00035b6a <__sfputc_r>:
   35b6a:	6893      	ldr	r3, [r2, #8]
   35b6c:	3b01      	subs	r3, #1
   35b6e:	2b00      	cmp	r3, #0
   35b70:	6093      	str	r3, [r2, #8]
   35b72:	b410      	push	{r4}
   35b74:	da08      	bge.n	35b88 <__sfputc_r+0x1e>
   35b76:	6994      	ldr	r4, [r2, #24]
   35b78:	42a3      	cmp	r3, r4
   35b7a:	db01      	blt.n	35b80 <__sfputc_r+0x16>
   35b7c:	290a      	cmp	r1, #10
   35b7e:	d103      	bne.n	35b88 <__sfputc_r+0x1e>
   35b80:	f85d 4b04 	ldr.w	r4, [sp], #4
   35b84:	f7fc bc62 	b.w	3244c <__swbuf_r>
   35b88:	6813      	ldr	r3, [r2, #0]
   35b8a:	1c58      	adds	r0, r3, #1
   35b8c:	6010      	str	r0, [r2, #0]
   35b8e:	4608      	mov	r0, r1
   35b90:	7019      	strb	r1, [r3, #0]
   35b92:	f85d 4b04 	ldr.w	r4, [sp], #4
   35b96:	4770      	bx	lr

00035b98 <__sfputs_r>:
   35b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35b9a:	4606      	mov	r6, r0
   35b9c:	460f      	mov	r7, r1
   35b9e:	4614      	mov	r4, r2
   35ba0:	18d5      	adds	r5, r2, r3
   35ba2:	42ac      	cmp	r4, r5
   35ba4:	d101      	bne.n	35baa <__sfputs_r+0x12>
   35ba6:	2000      	movs	r0, #0
   35ba8:	e007      	b.n	35bba <__sfputs_r+0x22>
   35baa:	463a      	mov	r2, r7
   35bac:	f814 1b01 	ldrb.w	r1, [r4], #1
   35bb0:	4630      	mov	r0, r6
   35bb2:	f7ff ffda 	bl	35b6a <__sfputc_r>
   35bb6:	1c43      	adds	r3, r0, #1
   35bb8:	d1f3      	bne.n	35ba2 <__sfputs_r+0xa>
   35bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00035bbc <_printf_common>:
   35bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   35bc0:	4616      	mov	r6, r2
   35bc2:	4699      	mov	r9, r3
   35bc4:	688a      	ldr	r2, [r1, #8]
   35bc6:	4607      	mov	r7, r0
   35bc8:	690b      	ldr	r3, [r1, #16]
   35bca:	460c      	mov	r4, r1
   35bcc:	f8dd 8020 	ldr.w	r8, [sp, #32]
   35bd0:	4293      	cmp	r3, r2
   35bd2:	bfb8      	it	lt
   35bd4:	4613      	movlt	r3, r2
   35bd6:	6033      	str	r3, [r6, #0]
   35bd8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   35bdc:	b10a      	cbz	r2, 35be2 <_printf_common+0x26>
   35bde:	3301      	adds	r3, #1
   35be0:	6033      	str	r3, [r6, #0]
   35be2:	6823      	ldr	r3, [r4, #0]
   35be4:	0699      	lsls	r1, r3, #26
   35be6:	bf42      	ittt	mi
   35be8:	6833      	ldrmi	r3, [r6, #0]
   35bea:	3302      	addmi	r3, #2
   35bec:	6033      	strmi	r3, [r6, #0]
   35bee:	6825      	ldr	r5, [r4, #0]
   35bf0:	f015 0506 	ands.w	r5, r5, #6
   35bf4:	d106      	bne.n	35c04 <_printf_common+0x48>
   35bf6:	f104 0a19 	add.w	sl, r4, #25
   35bfa:	68e3      	ldr	r3, [r4, #12]
   35bfc:	6832      	ldr	r2, [r6, #0]
   35bfe:	1a9b      	subs	r3, r3, r2
   35c00:	42ab      	cmp	r3, r5
   35c02:	dc29      	bgt.n	35c58 <_printf_common+0x9c>
   35c04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   35c08:	1e13      	subs	r3, r2, #0
   35c0a:	6822      	ldr	r2, [r4, #0]
   35c0c:	bf18      	it	ne
   35c0e:	2301      	movne	r3, #1
   35c10:	0692      	lsls	r2, r2, #26
   35c12:	d42e      	bmi.n	35c72 <_printf_common+0xb6>
   35c14:	f104 0243 	add.w	r2, r4, #67	; 0x43
   35c18:	4649      	mov	r1, r9
   35c1a:	4638      	mov	r0, r7
   35c1c:	47c0      	blx	r8
   35c1e:	3001      	adds	r0, #1
   35c20:	d021      	beq.n	35c66 <_printf_common+0xaa>
   35c22:	6823      	ldr	r3, [r4, #0]
   35c24:	341a      	adds	r4, #26
   35c26:	f854 5c0e 	ldr.w	r5, [r4, #-14]
   35c2a:	f003 0306 	and.w	r3, r3, #6
   35c2e:	6832      	ldr	r2, [r6, #0]
   35c30:	2600      	movs	r6, #0
   35c32:	2b04      	cmp	r3, #4
   35c34:	f854 3c12 	ldr.w	r3, [r4, #-18]
   35c38:	bf08      	it	eq
   35c3a:	1aad      	subeq	r5, r5, r2
   35c3c:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   35c40:	bf14      	ite	ne
   35c42:	2500      	movne	r5, #0
   35c44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   35c48:	4293      	cmp	r3, r2
   35c4a:	bfc4      	itt	gt
   35c4c:	1a9b      	subgt	r3, r3, r2
   35c4e:	18ed      	addgt	r5, r5, r3
   35c50:	42b5      	cmp	r5, r6
   35c52:	d11a      	bne.n	35c8a <_printf_common+0xce>
   35c54:	2000      	movs	r0, #0
   35c56:	e008      	b.n	35c6a <_printf_common+0xae>
   35c58:	2301      	movs	r3, #1
   35c5a:	4652      	mov	r2, sl
   35c5c:	4649      	mov	r1, r9
   35c5e:	4638      	mov	r0, r7
   35c60:	47c0      	blx	r8
   35c62:	3001      	adds	r0, #1
   35c64:	d103      	bne.n	35c6e <_printf_common+0xb2>
   35c66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   35c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   35c6e:	3501      	adds	r5, #1
   35c70:	e7c3      	b.n	35bfa <_printf_common+0x3e>
   35c72:	18e1      	adds	r1, r4, r3
   35c74:	1c5a      	adds	r2, r3, #1
   35c76:	2030      	movs	r0, #48	; 0x30
   35c78:	3302      	adds	r3, #2
   35c7a:	4422      	add	r2, r4
   35c7c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   35c80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   35c84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   35c88:	e7c4      	b.n	35c14 <_printf_common+0x58>
   35c8a:	2301      	movs	r3, #1
   35c8c:	4622      	mov	r2, r4
   35c8e:	4649      	mov	r1, r9
   35c90:	4638      	mov	r0, r7
   35c92:	47c0      	blx	r8
   35c94:	3001      	adds	r0, #1
   35c96:	d0e6      	beq.n	35c66 <_printf_common+0xaa>
   35c98:	3601      	adds	r6, #1
   35c9a:	e7d9      	b.n	35c50 <_printf_common+0x94>

00035c9c <__sprintf_chk>:
   35c9c:	b408      	push	{r3}
   35c9e:	b517      	push	{r0, r1, r2, r4, lr}
   35ca0:	ab05      	add	r3, sp, #20
   35ca2:	1e14      	subs	r4, r2, #0
   35ca4:	f853 1b04 	ldr.w	r1, [r3], #4
   35ca8:	9301      	str	r3, [sp, #4]
   35caa:	da07      	bge.n	35cbc <__sprintf_chk+0x20>
   35cac:	461a      	mov	r2, r3
   35cae:	f7fc fbc3 	bl	32438 <vsiprintf>
   35cb2:	b003      	add	sp, #12
   35cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   35cb8:	b001      	add	sp, #4
   35cba:	4770      	bx	lr
   35cbc:	460a      	mov	r2, r1
   35cbe:	4621      	mov	r1, r4
   35cc0:	f7fc fb96 	bl	323f0 <vsniprintf>
   35cc4:	2800      	cmp	r0, #0
   35cc6:	dbf4      	blt.n	35cb2 <__sprintf_chk+0x16>
   35cc8:	42a0      	cmp	r0, r4
   35cca:	d3f2      	bcc.n	35cb2 <__sprintf_chk+0x16>
   35ccc:	f7fc fc90 	bl	325f0 <__chk_fail>

00035cd0 <__sread>:
   35cd0:	b510      	push	{r4, lr}
   35cd2:	460c      	mov	r4, r1
   35cd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   35cd8:	f7fd fa98 	bl	3320c <_read_r>
   35cdc:	2800      	cmp	r0, #0
   35cde:	bfab      	itete	ge
   35ce0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   35ce2:	89a3      	ldrhlt	r3, [r4, #12]
   35ce4:	181b      	addge	r3, r3, r0
   35ce6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   35cea:	bfac      	ite	ge
   35cec:	6563      	strge	r3, [r4, #84]	; 0x54
   35cee:	81a3      	strhlt	r3, [r4, #12]
   35cf0:	bd10      	pop	{r4, pc}

00035cf2 <__swrite>:
   35cf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   35cf6:	461f      	mov	r7, r3
   35cf8:	898b      	ldrh	r3, [r1, #12]
   35cfa:	4605      	mov	r5, r0
   35cfc:	460c      	mov	r4, r1
   35cfe:	05db      	lsls	r3, r3, #23
   35d00:	4616      	mov	r6, r2
   35d02:	d505      	bpl.n	35d10 <__swrite+0x1e>
   35d04:	2302      	movs	r3, #2
   35d06:	2200      	movs	r2, #0
   35d08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   35d0c:	f7fd f858 	bl	32dc0 <_lseek_r>
   35d10:	89a3      	ldrh	r3, [r4, #12]
   35d12:	4632      	mov	r2, r6
   35d14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   35d18:	4628      	mov	r0, r5
   35d1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   35d1e:	81a3      	strh	r3, [r4, #12]
   35d20:	463b      	mov	r3, r7
   35d22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   35d26:	f7fc bbe3 	b.w	324f0 <_write_r>

00035d2a <__sseek>:
   35d2a:	b510      	push	{r4, lr}
   35d2c:	460c      	mov	r4, r1
   35d2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   35d32:	f7fd f845 	bl	32dc0 <_lseek_r>
   35d36:	1c43      	adds	r3, r0, #1
   35d38:	89a3      	ldrh	r3, [r4, #12]
   35d3a:	bf15      	itete	ne
   35d3c:	6560      	strne	r0, [r4, #84]	; 0x54
   35d3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   35d42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   35d46:	81a3      	strheq	r3, [r4, #12]
   35d48:	bf18      	it	ne
   35d4a:	81a3      	strhne	r3, [r4, #12]
   35d4c:	bd10      	pop	{r4, pc}

00035d4e <__sclose>:
   35d4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   35d52:	f7fc bc71 	b.w	32638 <_close_r>

00035d56 <strchr>:
   35d56:	b2c9      	uxtb	r1, r1
   35d58:	4603      	mov	r3, r0
   35d5a:	f810 2b01 	ldrb.w	r2, [r0], #1
   35d5e:	b11a      	cbz	r2, 35d68 <strchr+0x12>
   35d60:	428a      	cmp	r2, r1
   35d62:	d1f9      	bne.n	35d58 <strchr+0x2>
   35d64:	4618      	mov	r0, r3
   35d66:	4770      	bx	lr
   35d68:	2900      	cmp	r1, #0
   35d6a:	bf18      	it	ne
   35d6c:	2300      	movne	r3, #0
   35d6e:	e7f9      	b.n	35d64 <strchr+0xe>

00035d70 <strcpy>:
   35d70:	4603      	mov	r3, r0
   35d72:	f811 2b01 	ldrb.w	r2, [r1], #1
   35d76:	f803 2b01 	strb.w	r2, [r3], #1
   35d7a:	2a00      	cmp	r2, #0
   35d7c:	d1f9      	bne.n	35d72 <strcpy+0x2>
   35d7e:	4770      	bx	lr

00035d80 <strncmp>:
   35d80:	b510      	push	{r4, lr}
   35d82:	b16a      	cbz	r2, 35da0 <strncmp+0x20>
   35d84:	3901      	subs	r1, #1
   35d86:	1884      	adds	r4, r0, r2
   35d88:	f810 3b01 	ldrb.w	r3, [r0], #1
   35d8c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   35d90:	4293      	cmp	r3, r2
   35d92:	d103      	bne.n	35d9c <strncmp+0x1c>
   35d94:	42a0      	cmp	r0, r4
   35d96:	d001      	beq.n	35d9c <strncmp+0x1c>
   35d98:	2b00      	cmp	r3, #0
   35d9a:	d1f5      	bne.n	35d88 <strncmp+0x8>
   35d9c:	1a98      	subs	r0, r3, r2
   35d9e:	bd10      	pop	{r4, pc}
   35da0:	4610      	mov	r0, r2
   35da2:	e7fc      	b.n	35d9e <strncmp+0x1e>

00035da4 <strstr>:
   35da4:	b5f0      	push	{r4, r5, r6, r7, lr}
   35da6:	780c      	ldrb	r4, [r1, #0]
   35da8:	b164      	cbz	r4, 35dc4 <strstr+0x20>
   35daa:	4603      	mov	r3, r0
   35dac:	781a      	ldrb	r2, [r3, #0]
   35dae:	4618      	mov	r0, r3
   35db0:	1c5e      	adds	r6, r3, #1
   35db2:	b90a      	cbnz	r2, 35db8 <strstr+0x14>
   35db4:	4610      	mov	r0, r2
   35db6:	e005      	b.n	35dc4 <strstr+0x20>
   35db8:	4294      	cmp	r4, r2
   35dba:	d108      	bne.n	35dce <strstr+0x2a>
   35dbc:	460d      	mov	r5, r1
   35dbe:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   35dc2:	b902      	cbnz	r2, 35dc6 <strstr+0x22>
   35dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35dc6:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   35dca:	4297      	cmp	r7, r2
   35dcc:	d0f7      	beq.n	35dbe <strstr+0x1a>
   35dce:	4633      	mov	r3, r6
   35dd0:	e7ec      	b.n	35dac <strstr+0x8>

00035dd2 <sulp>:
   35dd2:	b570      	push	{r4, r5, r6, lr}
   35dd4:	4604      	mov	r4, r0
   35dd6:	460d      	mov	r5, r1
   35dd8:	4616      	mov	r6, r2
   35dda:	ec45 4b10 	vmov	d0, r4, r5
   35dde:	f7fd f89b 	bl	32f18 <__ulp>
   35de2:	ec51 0b10 	vmov	r0, r1, d0
   35de6:	b17e      	cbz	r6, 35e08 <sulp+0x36>
   35de8:	f3c5 530a 	ubfx	r3, r5, #20, #11
   35dec:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   35df0:	2b00      	cmp	r3, #0
   35df2:	dd09      	ble.n	35e08 <sulp+0x36>
   35df4:	051b      	lsls	r3, r3, #20
   35df6:	2400      	movs	r4, #0
   35df8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   35dfc:	4622      	mov	r2, r4
   35dfe:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   35e02:	462b      	mov	r3, r5
   35e04:	f7e6 ff02 	bl	1cc0c <__aeabi_dmul>
   35e08:	bd70      	pop	{r4, r5, r6, pc}

00035e0a <_vsniprintf_r>:
   35e0a:	b530      	push	{r4, r5, lr}
   35e0c:	1e14      	subs	r4, r2, #0
   35e0e:	4605      	mov	r5, r0
   35e10:	b09b      	sub	sp, #108	; 0x6c
   35e12:	4618      	mov	r0, r3
   35e14:	da05      	bge.n	35e22 <_vsniprintf_r+0x18>
   35e16:	238b      	movs	r3, #139	; 0x8b
   35e18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   35e1c:	602b      	str	r3, [r5, #0]
   35e1e:	b01b      	add	sp, #108	; 0x6c
   35e20:	bd30      	pop	{r4, r5, pc}
   35e22:	f44f 7302 	mov.w	r3, #520	; 0x208
   35e26:	4602      	mov	r2, r0
   35e28:	9100      	str	r1, [sp, #0]
   35e2a:	4628      	mov	r0, r5
   35e2c:	f8ad 300c 	strh.w	r3, [sp, #12]
   35e30:	bf14      	ite	ne
   35e32:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
   35e36:	4623      	moveq	r3, r4
   35e38:	9104      	str	r1, [sp, #16]
   35e3a:	4669      	mov	r1, sp
   35e3c:	9302      	str	r3, [sp, #8]
   35e3e:	9305      	str	r3, [sp, #20]
   35e40:	f64f 73ff 	movw	r3, #65535	; 0xffff
   35e44:	f8ad 300e 	strh.w	r3, [sp, #14]
   35e48:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   35e4a:	f7fd f8df 	bl	3300c <_svfiprintf_r>
   35e4e:	1c43      	adds	r3, r0, #1
   35e50:	bfbc      	itt	lt
   35e52:	238b      	movlt	r3, #139	; 0x8b
   35e54:	602b      	strlt	r3, [r5, #0]
   35e56:	2c00      	cmp	r4, #0
   35e58:	d0e1      	beq.n	35e1e <_vsniprintf_r+0x14>
   35e5a:	9b00      	ldr	r3, [sp, #0]
   35e5c:	2200      	movs	r2, #0
   35e5e:	701a      	strb	r2, [r3, #0]
   35e60:	e7dd      	b.n	35e1e <_vsniprintf_r+0x14>

00035e62 <abort>:
   35e62:	2006      	movs	r0, #6
   35e64:	b508      	push	{r3, lr}
   35e66:	f7fd f9e3 	bl	33230 <raise>
   35e6a:	2001      	movs	r0, #1
   35e6c:	f7eb f98a 	bl	21184 <_exit>

00035e70 <__sfmoreglue>:
   35e70:	b570      	push	{r4, r5, r6, lr}
   35e72:	1e4a      	subs	r2, r1, #1
   35e74:	2568      	movs	r5, #104	; 0x68
   35e76:	460e      	mov	r6, r1
   35e78:	4355      	muls	r5, r2
   35e7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
   35e7e:	f7fb fea9 	bl	31bd4 <_malloc_r>
   35e82:	4604      	mov	r4, r0
   35e84:	b140      	cbz	r0, 35e98 <__sfmoreglue+0x28>
   35e86:	2100      	movs	r1, #0
   35e88:	f105 0268 	add.w	r2, r5, #104	; 0x68
   35e8c:	e9c0 1600 	strd	r1, r6, [r0]
   35e90:	300c      	adds	r0, #12
   35e92:	60a0      	str	r0, [r4, #8]
   35e94:	f7ff fe58 	bl	35b48 <memset>
   35e98:	4620      	mov	r0, r4
   35e9a:	bd70      	pop	{r4, r5, r6, pc}

00035e9c <_fwalk_reent>:
   35e9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   35ea0:	4606      	mov	r6, r0
   35ea2:	4688      	mov	r8, r1
   35ea4:	f100 0448 	add.w	r4, r0, #72	; 0x48
   35ea8:	2700      	movs	r7, #0
   35eaa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   35eae:	f1b9 0901 	subs.w	r9, r9, #1
   35eb2:	d505      	bpl.n	35ec0 <_fwalk_reent+0x24>
   35eb4:	6824      	ldr	r4, [r4, #0]
   35eb6:	2c00      	cmp	r4, #0
   35eb8:	d1f7      	bne.n	35eaa <_fwalk_reent+0xe>
   35eba:	4638      	mov	r0, r7
   35ebc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   35ec0:	89ab      	ldrh	r3, [r5, #12]
   35ec2:	2b01      	cmp	r3, #1
   35ec4:	d907      	bls.n	35ed6 <_fwalk_reent+0x3a>
   35ec6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   35eca:	3301      	adds	r3, #1
   35ecc:	d003      	beq.n	35ed6 <_fwalk_reent+0x3a>
   35ece:	4629      	mov	r1, r5
   35ed0:	4630      	mov	r0, r6
   35ed2:	47c0      	blx	r8
   35ed4:	4307      	orrs	r7, r0
   35ed6:	3568      	adds	r5, #104	; 0x68
   35ed8:	e7e9      	b.n	35eae <_fwalk_reent+0x12>

00035eda <rshift>:
   35eda:	6903      	ldr	r3, [r0, #16]
   35edc:	114a      	asrs	r2, r1, #5
   35ede:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   35ee2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   35ee6:	f100 0414 	add.w	r4, r0, #20
   35eea:	dd45      	ble.n	35f78 <rshift+0x9e>
   35eec:	f011 011f 	ands.w	r1, r1, #31
   35ef0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   35ef4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   35ef8:	d10c      	bne.n	35f14 <rshift+0x3a>
   35efa:	f100 0710 	add.w	r7, r0, #16
   35efe:	4629      	mov	r1, r5
   35f00:	42b1      	cmp	r1, r6
   35f02:	d334      	bcc.n	35f6e <rshift+0x94>
   35f04:	1a9b      	subs	r3, r3, r2
   35f06:	1eea      	subs	r2, r5, #3
   35f08:	009b      	lsls	r3, r3, #2
   35f0a:	4296      	cmp	r6, r2
   35f0c:	bf38      	it	cc
   35f0e:	2300      	movcc	r3, #0
   35f10:	4423      	add	r3, r4
   35f12:	e015      	b.n	35f40 <rshift+0x66>
   35f14:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   35f18:	f1c1 0820 	rsb	r8, r1, #32
   35f1c:	f105 0e04 	add.w	lr, r5, #4
   35f20:	46a1      	mov	r9, r4
   35f22:	40cf      	lsrs	r7, r1
   35f24:	4576      	cmp	r6, lr
   35f26:	46f4      	mov	ip, lr
   35f28:	d815      	bhi.n	35f56 <rshift+0x7c>
   35f2a:	1a9b      	subs	r3, r3, r2
   35f2c:	3501      	adds	r5, #1
   35f2e:	009a      	lsls	r2, r3, #2
   35f30:	3a04      	subs	r2, #4
   35f32:	42ae      	cmp	r6, r5
   35f34:	bf38      	it	cc
   35f36:	2200      	movcc	r2, #0
   35f38:	18a3      	adds	r3, r4, r2
   35f3a:	50a7      	str	r7, [r4, r2]
   35f3c:	b107      	cbz	r7, 35f40 <rshift+0x66>
   35f3e:	3304      	adds	r3, #4
   35f40:	1b1a      	subs	r2, r3, r4
   35f42:	42a3      	cmp	r3, r4
   35f44:	ea4f 02a2 	mov.w	r2, r2, asr #2
   35f48:	bf08      	it	eq
   35f4a:	2300      	moveq	r3, #0
   35f4c:	6102      	str	r2, [r0, #16]
   35f4e:	bf08      	it	eq
   35f50:	6143      	streq	r3, [r0, #20]
   35f52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   35f56:	f8dc c000 	ldr.w	ip, [ip]
   35f5a:	fa0c fc08 	lsl.w	ip, ip, r8
   35f5e:	ea4c 0707 	orr.w	r7, ip, r7
   35f62:	f849 7b04 	str.w	r7, [r9], #4
   35f66:	f85e 7b04 	ldr.w	r7, [lr], #4
   35f6a:	40cf      	lsrs	r7, r1
   35f6c:	e7da      	b.n	35f24 <rshift+0x4a>
   35f6e:	f851 cb04 	ldr.w	ip, [r1], #4
   35f72:	f847 cf04 	str.w	ip, [r7, #4]!
   35f76:	e7c3      	b.n	35f00 <rshift+0x26>
   35f78:	4623      	mov	r3, r4
   35f7a:	e7e1      	b.n	35f40 <rshift+0x66>

00035f7c <__hexdig_fun>:
   35f7c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   35f80:	2b09      	cmp	r3, #9
   35f82:	d802      	bhi.n	35f8a <__hexdig_fun+0xe>
   35f84:	3820      	subs	r0, #32
   35f86:	b2c0      	uxtb	r0, r0
   35f88:	4770      	bx	lr
   35f8a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   35f8e:	2b05      	cmp	r3, #5
   35f90:	d801      	bhi.n	35f96 <__hexdig_fun+0x1a>
   35f92:	3847      	subs	r0, #71	; 0x47
   35f94:	e7f7      	b.n	35f86 <__hexdig_fun+0xa>
   35f96:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   35f9a:	2b05      	cmp	r3, #5
   35f9c:	d801      	bhi.n	35fa2 <__hexdig_fun+0x26>
   35f9e:	3827      	subs	r0, #39	; 0x27
   35fa0:	e7f1      	b.n	35f86 <__hexdig_fun+0xa>
   35fa2:	2000      	movs	r0, #0
   35fa4:	4770      	bx	lr

00035fa6 <L_shift>:
   35fa6:	f1c2 0208 	rsb	r2, r2, #8
   35faa:	0092      	lsls	r2, r2, #2
   35fac:	b570      	push	{r4, r5, r6, lr}
   35fae:	f1c2 0620 	rsb	r6, r2, #32
   35fb2:	6843      	ldr	r3, [r0, #4]
   35fb4:	6804      	ldr	r4, [r0, #0]
   35fb6:	fa03 f506 	lsl.w	r5, r3, r6
   35fba:	40d3      	lsrs	r3, r2
   35fbc:	432c      	orrs	r4, r5
   35fbe:	6004      	str	r4, [r0, #0]
   35fc0:	f840 3f04 	str.w	r3, [r0, #4]!
   35fc4:	4288      	cmp	r0, r1
   35fc6:	d3f4      	bcc.n	35fb2 <L_shift+0xc>
   35fc8:	bd70      	pop	{r4, r5, r6, pc}

00035fca <__match>:
   35fca:	6803      	ldr	r3, [r0, #0]
   35fcc:	3301      	adds	r3, #1
   35fce:	b530      	push	{r4, r5, lr}
   35fd0:	f811 4b01 	ldrb.w	r4, [r1], #1
   35fd4:	b914      	cbnz	r4, 35fdc <__match+0x12>
   35fd6:	6003      	str	r3, [r0, #0]
   35fd8:	2001      	movs	r0, #1
   35fda:	bd30      	pop	{r4, r5, pc}
   35fdc:	f813 2b01 	ldrb.w	r2, [r3], #1
   35fe0:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   35fe4:	2d19      	cmp	r5, #25
   35fe6:	bf98      	it	ls
   35fe8:	3220      	addls	r2, #32
   35fea:	42a2      	cmp	r2, r4
   35fec:	d0f0      	beq.n	35fd0 <__match+0x6>
   35fee:	2000      	movs	r0, #0
   35ff0:	e7f3      	b.n	35fda <__match+0x10>

00035ff2 <__hexnan>:
   35ff2:	680b      	ldr	r3, [r1, #0]
   35ff4:	6801      	ldr	r1, [r0, #0]
   35ff6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35ffa:	115e      	asrs	r6, r3, #5
   35ffc:	f013 031f 	ands.w	r3, r3, #31
   36000:	f04f 0500 	mov.w	r5, #0
   36004:	b087      	sub	sp, #28
   36006:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   3600a:	4682      	mov	sl, r0
   3600c:	4690      	mov	r8, r2
   3600e:	46ab      	mov	fp, r5
   36010:	bf18      	it	ne
   36012:	3604      	addne	r6, #4
   36014:	9301      	str	r3, [sp, #4]
   36016:	9502      	str	r5, [sp, #8]
   36018:	1f37      	subs	r7, r6, #4
   3601a:	f846 5c04 	str.w	r5, [r6, #-4]
   3601e:	46b9      	mov	r9, r7
   36020:	463c      	mov	r4, r7
   36022:	1c4b      	adds	r3, r1, #1
   36024:	784a      	ldrb	r2, [r1, #1]
   36026:	9303      	str	r3, [sp, #12]
   36028:	b342      	cbz	r2, 3607c <__hexnan+0x8a>
   3602a:	4610      	mov	r0, r2
   3602c:	9105      	str	r1, [sp, #20]
   3602e:	9204      	str	r2, [sp, #16]
   36030:	f7ff ffa4 	bl	35f7c <__hexdig_fun>
   36034:	2800      	cmp	r0, #0
   36036:	d14f      	bne.n	360d8 <__hexnan+0xe6>
   36038:	9a04      	ldr	r2, [sp, #16]
   3603a:	9905      	ldr	r1, [sp, #20]
   3603c:	2a20      	cmp	r2, #32
   3603e:	d818      	bhi.n	36072 <__hexnan+0x80>
   36040:	9b02      	ldr	r3, [sp, #8]
   36042:	459b      	cmp	fp, r3
   36044:	dd13      	ble.n	3606e <__hexnan+0x7c>
   36046:	454c      	cmp	r4, r9
   36048:	d206      	bcs.n	36058 <__hexnan+0x66>
   3604a:	2d07      	cmp	r5, #7
   3604c:	dc04      	bgt.n	36058 <__hexnan+0x66>
   3604e:	462a      	mov	r2, r5
   36050:	4649      	mov	r1, r9
   36052:	4620      	mov	r0, r4
   36054:	f7ff ffa7 	bl	35fa6 <L_shift>
   36058:	4544      	cmp	r4, r8
   3605a:	d94f      	bls.n	360fc <__hexnan+0x10a>
   3605c:	2300      	movs	r3, #0
   3605e:	f1a4 0904 	sub.w	r9, r4, #4
   36062:	f8cd b008 	str.w	fp, [sp, #8]
   36066:	f844 3c04 	str.w	r3, [r4, #-4]
   3606a:	461d      	mov	r5, r3
   3606c:	464c      	mov	r4, r9
   3606e:	9903      	ldr	r1, [sp, #12]
   36070:	e7d7      	b.n	36022 <__hexnan+0x30>
   36072:	2a29      	cmp	r2, #41	; 0x29
   36074:	d155      	bne.n	36122 <__hexnan+0x130>
   36076:	3102      	adds	r1, #2
   36078:	f8ca 1000 	str.w	r1, [sl]
   3607c:	f1bb 0f00 	cmp.w	fp, #0
   36080:	d04f      	beq.n	36122 <__hexnan+0x130>
   36082:	454c      	cmp	r4, r9
   36084:	d206      	bcs.n	36094 <__hexnan+0xa2>
   36086:	2d07      	cmp	r5, #7
   36088:	dc04      	bgt.n	36094 <__hexnan+0xa2>
   3608a:	462a      	mov	r2, r5
   3608c:	4649      	mov	r1, r9
   3608e:	4620      	mov	r0, r4
   36090:	f7ff ff89 	bl	35fa6 <L_shift>
   36094:	4544      	cmp	r4, r8
   36096:	d933      	bls.n	36100 <__hexnan+0x10e>
   36098:	f1a8 0204 	sub.w	r2, r8, #4
   3609c:	4623      	mov	r3, r4
   3609e:	f853 1b04 	ldr.w	r1, [r3], #4
   360a2:	429f      	cmp	r7, r3
   360a4:	f842 1f04 	str.w	r1, [r2, #4]!
   360a8:	d2f9      	bcs.n	3609e <__hexnan+0xac>
   360aa:	1b3b      	subs	r3, r7, r4
   360ac:	3e03      	subs	r6, #3
   360ae:	3401      	adds	r4, #1
   360b0:	2200      	movs	r2, #0
   360b2:	f023 0303 	bic.w	r3, r3, #3
   360b6:	3304      	adds	r3, #4
   360b8:	42b4      	cmp	r4, r6
   360ba:	bf88      	it	hi
   360bc:	2304      	movhi	r3, #4
   360be:	4443      	add	r3, r8
   360c0:	f843 2b04 	str.w	r2, [r3], #4
   360c4:	429f      	cmp	r7, r3
   360c6:	d2fb      	bcs.n	360c0 <__hexnan+0xce>
   360c8:	683b      	ldr	r3, [r7, #0]
   360ca:	b91b      	cbnz	r3, 360d4 <__hexnan+0xe2>
   360cc:	4547      	cmp	r7, r8
   360ce:	d126      	bne.n	3611e <__hexnan+0x12c>
   360d0:	2301      	movs	r3, #1
   360d2:	603b      	str	r3, [r7, #0]
   360d4:	2005      	movs	r0, #5
   360d6:	e025      	b.n	36124 <__hexnan+0x132>
   360d8:	3501      	adds	r5, #1
   360da:	f10b 0b01 	add.w	fp, fp, #1
   360de:	2d08      	cmp	r5, #8
   360e0:	dd05      	ble.n	360ee <__hexnan+0xfc>
   360e2:	4544      	cmp	r4, r8
   360e4:	d9c3      	bls.n	3606e <__hexnan+0x7c>
   360e6:	2300      	movs	r3, #0
   360e8:	3c04      	subs	r4, #4
   360ea:	2501      	movs	r5, #1
   360ec:	6023      	str	r3, [r4, #0]
   360ee:	6822      	ldr	r2, [r4, #0]
   360f0:	f000 000f 	and.w	r0, r0, #15
   360f4:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   360f8:	6022      	str	r2, [r4, #0]
   360fa:	e7b8      	b.n	3606e <__hexnan+0x7c>
   360fc:	2508      	movs	r5, #8
   360fe:	e7b6      	b.n	3606e <__hexnan+0x7c>
   36100:	9b01      	ldr	r3, [sp, #4]
   36102:	2b00      	cmp	r3, #0
   36104:	d0e0      	beq.n	360c8 <__hexnan+0xd6>
   36106:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3610a:	f1c3 0320 	rsb	r3, r3, #32
   3610e:	fa22 f303 	lsr.w	r3, r2, r3
   36112:	f856 2c04 	ldr.w	r2, [r6, #-4]
   36116:	401a      	ands	r2, r3
   36118:	f846 2c04 	str.w	r2, [r6, #-4]
   3611c:	e7d4      	b.n	360c8 <__hexnan+0xd6>
   3611e:	3f04      	subs	r7, #4
   36120:	e7d2      	b.n	360c8 <__hexnan+0xd6>
   36122:	2004      	movs	r0, #4
   36124:	b007      	add	sp, #28
   36126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0003612a <__retarget_lock_init_recursive>:
   3612a:	4770      	bx	lr

0003612c <__retarget_lock_acquire_recursive>:
   3612c:	4770      	bx	lr

0003612e <__retarget_lock_release_recursive>:
   3612e:	4770      	bx	lr

00036130 <__swhatbuf_r>:
   36130:	b570      	push	{r4, r5, r6, lr}
   36132:	460e      	mov	r6, r1
   36134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   36138:	b096      	sub	sp, #88	; 0x58
   3613a:	4614      	mov	r4, r2
   3613c:	2900      	cmp	r1, #0
   3613e:	461d      	mov	r5, r3
   36140:	da07      	bge.n	36152 <__swhatbuf_r+0x22>
   36142:	2300      	movs	r3, #0
   36144:	602b      	str	r3, [r5, #0]
   36146:	89b3      	ldrh	r3, [r6, #12]
   36148:	061a      	lsls	r2, r3, #24
   3614a:	d410      	bmi.n	3616e <__swhatbuf_r+0x3e>
   3614c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   36150:	e00e      	b.n	36170 <__swhatbuf_r+0x40>
   36152:	466a      	mov	r2, sp
   36154:	f7fd f886 	bl	33264 <_fstat_r>
   36158:	2800      	cmp	r0, #0
   3615a:	dbf2      	blt.n	36142 <__swhatbuf_r+0x12>
   3615c:	9a01      	ldr	r2, [sp, #4]
   3615e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   36162:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   36166:	425a      	negs	r2, r3
   36168:	415a      	adcs	r2, r3
   3616a:	602a      	str	r2, [r5, #0]
   3616c:	e7ee      	b.n	3614c <__swhatbuf_r+0x1c>
   3616e:	2340      	movs	r3, #64	; 0x40
   36170:	2000      	movs	r0, #0
   36172:	6023      	str	r3, [r4, #0]
   36174:	b016      	add	sp, #88	; 0x58
   36176:	bd70      	pop	{r4, r5, r6, pc}

00036178 <__ascii_mbtowc>:
   36178:	b082      	sub	sp, #8
   3617a:	b901      	cbnz	r1, 3617e <__ascii_mbtowc+0x6>
   3617c:	a901      	add	r1, sp, #4
   3617e:	b142      	cbz	r2, 36192 <__ascii_mbtowc+0x1a>
   36180:	b14b      	cbz	r3, 36196 <__ascii_mbtowc+0x1e>
   36182:	7813      	ldrb	r3, [r2, #0]
   36184:	600b      	str	r3, [r1, #0]
   36186:	7812      	ldrb	r2, [r2, #0]
   36188:	1e10      	subs	r0, r2, #0
   3618a:	bf18      	it	ne
   3618c:	2001      	movne	r0, #1
   3618e:	b002      	add	sp, #8
   36190:	4770      	bx	lr
   36192:	4610      	mov	r0, r2
   36194:	e7fb      	b.n	3618e <__ascii_mbtowc+0x16>
   36196:	f06f 0001 	mvn.w	r0, #1
   3619a:	e7f8      	b.n	3618e <__ascii_mbtowc+0x16>

0003619c <memmove>:
   3619c:	4288      	cmp	r0, r1
   3619e:	b510      	push	{r4, lr}
   361a0:	eb01 0402 	add.w	r4, r1, r2
   361a4:	d902      	bls.n	361ac <memmove+0x10>
   361a6:	4284      	cmp	r4, r0
   361a8:	4623      	mov	r3, r4
   361aa:	d807      	bhi.n	361bc <memmove+0x20>
   361ac:	1e43      	subs	r3, r0, #1
   361ae:	42a1      	cmp	r1, r4
   361b0:	d008      	beq.n	361c4 <memmove+0x28>
   361b2:	f811 2b01 	ldrb.w	r2, [r1], #1
   361b6:	f803 2f01 	strb.w	r2, [r3, #1]!
   361ba:	e7f8      	b.n	361ae <memmove+0x12>
   361bc:	4402      	add	r2, r0
   361be:	4601      	mov	r1, r0
   361c0:	428a      	cmp	r2, r1
   361c2:	d100      	bne.n	361c6 <memmove+0x2a>
   361c4:	bd10      	pop	{r4, pc}
   361c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   361ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
   361ce:	e7f7      	b.n	361c0 <memmove+0x24>

000361d0 <_Balloc>:
   361d0:	b570      	push	{r4, r5, r6, lr}
   361d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
   361d4:	4604      	mov	r4, r0
   361d6:	460d      	mov	r5, r1
   361d8:	b93e      	cbnz	r6, 361ea <_Balloc+0x1a>
   361da:	2010      	movs	r0, #16
   361dc:	f7fb fc9a 	bl	31b14 <malloc>
   361e0:	6260      	str	r0, [r4, #36]	; 0x24
   361e2:	6006      	str	r6, [r0, #0]
   361e4:	60c6      	str	r6, [r0, #12]
   361e6:	e9c0 6601 	strd	r6, r6, [r0, #4]
   361ea:	6a66      	ldr	r6, [r4, #36]	; 0x24
   361ec:	68f3      	ldr	r3, [r6, #12]
   361ee:	b183      	cbz	r3, 36212 <_Balloc+0x42>
   361f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   361f2:	68db      	ldr	r3, [r3, #12]
   361f4:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   361f8:	b9b8      	cbnz	r0, 3622a <_Balloc+0x5a>
   361fa:	2101      	movs	r1, #1
   361fc:	4620      	mov	r0, r4
   361fe:	fa01 f605 	lsl.w	r6, r1, r5
   36202:	1d72      	adds	r2, r6, #5
   36204:	0092      	lsls	r2, r2, #2
   36206:	f000 fb5e 	bl	368c6 <_calloc_r>
   3620a:	b160      	cbz	r0, 36226 <_Balloc+0x56>
   3620c:	e9c0 5601 	strd	r5, r6, [r0, #4]
   36210:	e00e      	b.n	36230 <_Balloc+0x60>
   36212:	2221      	movs	r2, #33	; 0x21
   36214:	2104      	movs	r1, #4
   36216:	4620      	mov	r0, r4
   36218:	f000 fb55 	bl	368c6 <_calloc_r>
   3621c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3621e:	60f0      	str	r0, [r6, #12]
   36220:	68db      	ldr	r3, [r3, #12]
   36222:	2b00      	cmp	r3, #0
   36224:	d1e4      	bne.n	361f0 <_Balloc+0x20>
   36226:	2000      	movs	r0, #0
   36228:	bd70      	pop	{r4, r5, r6, pc}
   3622a:	6802      	ldr	r2, [r0, #0]
   3622c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   36230:	2300      	movs	r3, #0
   36232:	e9c0 3303 	strd	r3, r3, [r0, #12]
   36236:	e7f7      	b.n	36228 <_Balloc+0x58>

00036238 <_Bfree>:
   36238:	b570      	push	{r4, r5, r6, lr}
   3623a:	6a46      	ldr	r6, [r0, #36]	; 0x24
   3623c:	4605      	mov	r5, r0
   3623e:	460c      	mov	r4, r1
   36240:	b93e      	cbnz	r6, 36252 <_Bfree+0x1a>
   36242:	2010      	movs	r0, #16
   36244:	f7fb fc66 	bl	31b14 <malloc>
   36248:	6268      	str	r0, [r5, #36]	; 0x24
   3624a:	6006      	str	r6, [r0, #0]
   3624c:	60c6      	str	r6, [r0, #12]
   3624e:	e9c0 6601 	strd	r6, r6, [r0, #4]
   36252:	b13c      	cbz	r4, 36264 <_Bfree+0x2c>
   36254:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   36256:	6862      	ldr	r2, [r4, #4]
   36258:	68db      	ldr	r3, [r3, #12]
   3625a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   3625e:	6021      	str	r1, [r4, #0]
   36260:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   36264:	bd70      	pop	{r4, r5, r6, pc}

00036266 <__multadd>:
   36266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3626a:	4607      	mov	r7, r0
   3626c:	4698      	mov	r8, r3
   3626e:	460c      	mov	r4, r1
   36270:	690e      	ldr	r6, [r1, #16]
   36272:	f101 0014 	add.w	r0, r1, #20
   36276:	2300      	movs	r3, #0
   36278:	6805      	ldr	r5, [r0, #0]
   3627a:	3301      	adds	r3, #1
   3627c:	b2a9      	uxth	r1, r5
   3627e:	429e      	cmp	r6, r3
   36280:	ea4f 4515 	mov.w	r5, r5, lsr #16
   36284:	fb02 8101 	mla	r1, r2, r1, r8
   36288:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   3628c:	b289      	uxth	r1, r1
   3628e:	fb02 c505 	mla	r5, r2, r5, ip
   36292:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   36296:	ea4f 4815 	mov.w	r8, r5, lsr #16
   3629a:	f840 1b04 	str.w	r1, [r0], #4
   3629e:	dceb      	bgt.n	36278 <__multadd+0x12>
   362a0:	f1b8 0f00 	cmp.w	r8, #0
   362a4:	d01b      	beq.n	362de <__multadd+0x78>
   362a6:	68a3      	ldr	r3, [r4, #8]
   362a8:	42b3      	cmp	r3, r6
   362aa:	dc12      	bgt.n	362d2 <__multadd+0x6c>
   362ac:	6861      	ldr	r1, [r4, #4]
   362ae:	4638      	mov	r0, r7
   362b0:	3101      	adds	r1, #1
   362b2:	f7ff ff8d 	bl	361d0 <_Balloc>
   362b6:	6922      	ldr	r2, [r4, #16]
   362b8:	4605      	mov	r5, r0
   362ba:	f104 010c 	add.w	r1, r4, #12
   362be:	3202      	adds	r2, #2
   362c0:	300c      	adds	r0, #12
   362c2:	0092      	lsls	r2, r2, #2
   362c4:	f7ff fc20 	bl	35b08 <memcpy>
   362c8:	4621      	mov	r1, r4
   362ca:	462c      	mov	r4, r5
   362cc:	4638      	mov	r0, r7
   362ce:	f7ff ffb3 	bl	36238 <_Bfree>
   362d2:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   362d6:	3601      	adds	r6, #1
   362d8:	f8c3 8014 	str.w	r8, [r3, #20]
   362dc:	6126      	str	r6, [r4, #16]
   362de:	4620      	mov	r0, r4
   362e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000362e4 <__s2b>:
   362e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   362e8:	4615      	mov	r5, r2
   362ea:	461f      	mov	r7, r3
   362ec:	2209      	movs	r2, #9
   362ee:	3308      	adds	r3, #8
   362f0:	460c      	mov	r4, r1
   362f2:	4606      	mov	r6, r0
   362f4:	2100      	movs	r1, #0
   362f6:	fb93 f3f2 	sdiv	r3, r3, r2
   362fa:	2201      	movs	r2, #1
   362fc:	429a      	cmp	r2, r3
   362fe:	db20      	blt.n	36342 <__s2b+0x5e>
   36300:	4630      	mov	r0, r6
   36302:	f7ff ff65 	bl	361d0 <_Balloc>
   36306:	9b08      	ldr	r3, [sp, #32]
   36308:	2d09      	cmp	r5, #9
   3630a:	6143      	str	r3, [r0, #20]
   3630c:	f04f 0301 	mov.w	r3, #1
   36310:	6103      	str	r3, [r0, #16]
   36312:	dd19      	ble.n	36348 <__s2b+0x64>
   36314:	f104 0909 	add.w	r9, r4, #9
   36318:	442c      	add	r4, r5
   3631a:	46c8      	mov	r8, r9
   3631c:	f818 3b01 	ldrb.w	r3, [r8], #1
   36320:	4601      	mov	r1, r0
   36322:	220a      	movs	r2, #10
   36324:	4630      	mov	r0, r6
   36326:	3b30      	subs	r3, #48	; 0x30
   36328:	f7ff ff9d 	bl	36266 <__multadd>
   3632c:	45a0      	cmp	r8, r4
   3632e:	d1f5      	bne.n	3631c <__s2b+0x38>
   36330:	f1a5 0408 	sub.w	r4, r5, #8
   36334:	444c      	add	r4, r9
   36336:	1b2d      	subs	r5, r5, r4
   36338:	1963      	adds	r3, r4, r5
   3633a:	42bb      	cmp	r3, r7
   3633c:	db07      	blt.n	3634e <__s2b+0x6a>
   3633e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   36342:	0052      	lsls	r2, r2, #1
   36344:	3101      	adds	r1, #1
   36346:	e7d9      	b.n	362fc <__s2b+0x18>
   36348:	340a      	adds	r4, #10
   3634a:	2509      	movs	r5, #9
   3634c:	e7f3      	b.n	36336 <__s2b+0x52>
   3634e:	f814 3b01 	ldrb.w	r3, [r4], #1
   36352:	4601      	mov	r1, r0
   36354:	220a      	movs	r2, #10
   36356:	4630      	mov	r0, r6
   36358:	3b30      	subs	r3, #48	; 0x30
   3635a:	f7ff ff84 	bl	36266 <__multadd>
   3635e:	e7eb      	b.n	36338 <__s2b+0x54>

00036360 <__hi0bits>:
   36360:	0c03      	lsrs	r3, r0, #16
   36362:	041b      	lsls	r3, r3, #16
   36364:	b9d3      	cbnz	r3, 3639c <__hi0bits+0x3c>
   36366:	0400      	lsls	r0, r0, #16
   36368:	2310      	movs	r3, #16
   3636a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   3636e:	bf04      	itt	eq
   36370:	0200      	lsleq	r0, r0, #8
   36372:	3308      	addeq	r3, #8
   36374:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   36378:	bf04      	itt	eq
   3637a:	0100      	lsleq	r0, r0, #4
   3637c:	3304      	addeq	r3, #4
   3637e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   36382:	bf04      	itt	eq
   36384:	0080      	lsleq	r0, r0, #2
   36386:	3302      	addeq	r3, #2
   36388:	2800      	cmp	r0, #0
   3638a:	db05      	blt.n	36398 <__hi0bits+0x38>
   3638c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   36390:	f103 0301 	add.w	r3, r3, #1
   36394:	bf08      	it	eq
   36396:	2320      	moveq	r3, #32
   36398:	4618      	mov	r0, r3
   3639a:	4770      	bx	lr
   3639c:	2300      	movs	r3, #0
   3639e:	e7e4      	b.n	3636a <__hi0bits+0xa>

000363a0 <__lo0bits>:
   363a0:	6803      	ldr	r3, [r0, #0]
   363a2:	4601      	mov	r1, r0
   363a4:	f013 0207 	ands.w	r2, r3, #7
   363a8:	d00b      	beq.n	363c2 <__lo0bits+0x22>
   363aa:	07da      	lsls	r2, r3, #31
   363ac:	d424      	bmi.n	363f8 <__lo0bits+0x58>
   363ae:	0798      	lsls	r0, r3, #30
   363b0:	bf47      	ittee	mi
   363b2:	085b      	lsrmi	r3, r3, #1
   363b4:	2001      	movmi	r0, #1
   363b6:	089b      	lsrpl	r3, r3, #2
   363b8:	2002      	movpl	r0, #2
   363ba:	bf4c      	ite	mi
   363bc:	600b      	strmi	r3, [r1, #0]
   363be:	600b      	strpl	r3, [r1, #0]
   363c0:	4770      	bx	lr
   363c2:	b298      	uxth	r0, r3
   363c4:	b9b0      	cbnz	r0, 363f4 <__lo0bits+0x54>
   363c6:	0c1b      	lsrs	r3, r3, #16
   363c8:	2010      	movs	r0, #16
   363ca:	f013 0fff 	tst.w	r3, #255	; 0xff
   363ce:	bf04      	itt	eq
   363d0:	0a1b      	lsreq	r3, r3, #8
   363d2:	3008      	addeq	r0, #8
   363d4:	071a      	lsls	r2, r3, #28
   363d6:	bf04      	itt	eq
   363d8:	091b      	lsreq	r3, r3, #4
   363da:	3004      	addeq	r0, #4
   363dc:	079a      	lsls	r2, r3, #30
   363de:	bf04      	itt	eq
   363e0:	089b      	lsreq	r3, r3, #2
   363e2:	3002      	addeq	r0, #2
   363e4:	07da      	lsls	r2, r3, #31
   363e6:	d403      	bmi.n	363f0 <__lo0bits+0x50>
   363e8:	085b      	lsrs	r3, r3, #1
   363ea:	f100 0001 	add.w	r0, r0, #1
   363ee:	d005      	beq.n	363fc <__lo0bits+0x5c>
   363f0:	600b      	str	r3, [r1, #0]
   363f2:	4770      	bx	lr
   363f4:	4610      	mov	r0, r2
   363f6:	e7e8      	b.n	363ca <__lo0bits+0x2a>
   363f8:	2000      	movs	r0, #0
   363fa:	4770      	bx	lr
   363fc:	2020      	movs	r0, #32
   363fe:	4770      	bx	lr

00036400 <__i2b>:
   36400:	b510      	push	{r4, lr}
   36402:	460c      	mov	r4, r1
   36404:	2101      	movs	r1, #1
   36406:	f7ff fee3 	bl	361d0 <_Balloc>
   3640a:	2201      	movs	r2, #1
   3640c:	6144      	str	r4, [r0, #20]
   3640e:	6102      	str	r2, [r0, #16]
   36410:	bd10      	pop	{r4, pc}

00036412 <__multiply>:
   36412:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36416:	4615      	mov	r5, r2
   36418:	690a      	ldr	r2, [r1, #16]
   3641a:	460c      	mov	r4, r1
   3641c:	b085      	sub	sp, #20
   3641e:	692b      	ldr	r3, [r5, #16]
   36420:	429a      	cmp	r2, r3
   36422:	bfbe      	ittt	lt
   36424:	460b      	movlt	r3, r1
   36426:	462c      	movlt	r4, r5
   36428:	461d      	movlt	r5, r3
   3642a:	6927      	ldr	r7, [r4, #16]
   3642c:	68a3      	ldr	r3, [r4, #8]
   3642e:	f8d5 9010 	ldr.w	r9, [r5, #16]
   36432:	6861      	ldr	r1, [r4, #4]
   36434:	eb07 0609 	add.w	r6, r7, r9
   36438:	42b3      	cmp	r3, r6
   3643a:	bfb8      	it	lt
   3643c:	3101      	addlt	r1, #1
   3643e:	f7ff fec7 	bl	361d0 <_Balloc>
   36442:	f100 0114 	add.w	r1, r0, #20
   36446:	2200      	movs	r2, #0
   36448:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   3644c:	460b      	mov	r3, r1
   3644e:	4543      	cmp	r3, r8
   36450:	d31d      	bcc.n	3648e <__multiply+0x7c>
   36452:	f104 0314 	add.w	r3, r4, #20
   36456:	f105 0214 	add.w	r2, r5, #20
   3645a:	f104 0515 	add.w	r5, r4, #21
   3645e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   36462:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   36466:	9302      	str	r3, [sp, #8]
   36468:	1b3b      	subs	r3, r7, r4
   3646a:	3b15      	subs	r3, #21
   3646c:	f023 0303 	bic.w	r3, r3, #3
   36470:	3304      	adds	r3, #4
   36472:	42af      	cmp	r7, r5
   36474:	bf38      	it	cc
   36476:	2304      	movcc	r3, #4
   36478:	9301      	str	r3, [sp, #4]
   3647a:	9b02      	ldr	r3, [sp, #8]
   3647c:	9203      	str	r2, [sp, #12]
   3647e:	4293      	cmp	r3, r2
   36480:	d808      	bhi.n	36494 <__multiply+0x82>
   36482:	2e00      	cmp	r6, #0
   36484:	dc5a      	bgt.n	3653c <__multiply+0x12a>
   36486:	6106      	str	r6, [r0, #16]
   36488:	b005      	add	sp, #20
   3648a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3648e:	f843 2b04 	str.w	r2, [r3], #4
   36492:	e7dc      	b.n	3644e <__multiply+0x3c>
   36494:	f8b2 a000 	ldrh.w	sl, [r2]
   36498:	f1ba 0f00 	cmp.w	sl, #0
   3649c:	d024      	beq.n	364e8 <__multiply+0xd6>
   3649e:	f104 0e14 	add.w	lr, r4, #20
   364a2:	4689      	mov	r9, r1
   364a4:	f04f 0c00 	mov.w	ip, #0
   364a8:	f85e 5b04 	ldr.w	r5, [lr], #4
   364ac:	f8d9 b000 	ldr.w	fp, [r9]
   364b0:	b2ab      	uxth	r3, r5
   364b2:	4577      	cmp	r7, lr
   364b4:	fa1f fb8b 	uxth.w	fp, fp
   364b8:	fb0a b303 	mla	r3, sl, r3, fp
   364bc:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   364c0:	f8d9 5000 	ldr.w	r5, [r9]
   364c4:	4463      	add	r3, ip
   364c6:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   364ca:	fb0a c50b 	mla	r5, sl, fp, ip
   364ce:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   364d2:	b29b      	uxth	r3, r3
   364d4:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   364d8:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   364dc:	f849 3b04 	str.w	r3, [r9], #4
   364e0:	d8e2      	bhi.n	364a8 <__multiply+0x96>
   364e2:	9b01      	ldr	r3, [sp, #4]
   364e4:	f841 c003 	str.w	ip, [r1, r3]
   364e8:	9b03      	ldr	r3, [sp, #12]
   364ea:	3204      	adds	r2, #4
   364ec:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   364f0:	f1b9 0f00 	cmp.w	r9, #0
   364f4:	d020      	beq.n	36538 <__multiply+0x126>
   364f6:	680b      	ldr	r3, [r1, #0]
   364f8:	f104 0c14 	add.w	ip, r4, #20
   364fc:	468e      	mov	lr, r1
   364fe:	f04f 0a00 	mov.w	sl, #0
   36502:	f8bc 5000 	ldrh.w	r5, [ip]
   36506:	b29b      	uxth	r3, r3
   36508:	f8be b002 	ldrh.w	fp, [lr, #2]
   3650c:	fb09 b505 	mla	r5, r9, r5, fp
   36510:	44aa      	add	sl, r5
   36512:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   36516:	f84e 3b04 	str.w	r3, [lr], #4
   3651a:	f85c 3b04 	ldr.w	r3, [ip], #4
   3651e:	f8be 5000 	ldrh.w	r5, [lr]
   36522:	0c1b      	lsrs	r3, r3, #16
   36524:	4567      	cmp	r7, ip
   36526:	fb09 5303 	mla	r3, r9, r3, r5
   3652a:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   3652e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   36532:	d8e6      	bhi.n	36502 <__multiply+0xf0>
   36534:	9d01      	ldr	r5, [sp, #4]
   36536:	514b      	str	r3, [r1, r5]
   36538:	3104      	adds	r1, #4
   3653a:	e79e      	b.n	3647a <__multiply+0x68>
   3653c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   36540:	2b00      	cmp	r3, #0
   36542:	d1a0      	bne.n	36486 <__multiply+0x74>
   36544:	3e01      	subs	r6, #1
   36546:	e79c      	b.n	36482 <__multiply+0x70>

00036548 <__lshift>:
   36548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3654c:	460c      	mov	r4, r1
   3654e:	4607      	mov	r7, r0
   36550:	4691      	mov	r9, r2
   36552:	ea4f 1a62 	mov.w	sl, r2, asr #5
   36556:	6923      	ldr	r3, [r4, #16]
   36558:	6849      	ldr	r1, [r1, #4]
   3655a:	eb03 1862 	add.w	r8, r3, r2, asr #5
   3655e:	68a3      	ldr	r3, [r4, #8]
   36560:	f108 0601 	add.w	r6, r8, #1
   36564:	42b3      	cmp	r3, r6
   36566:	db3f      	blt.n	365e8 <__lshift+0xa0>
   36568:	4638      	mov	r0, r7
   3656a:	f7ff fe31 	bl	361d0 <_Balloc>
   3656e:	2300      	movs	r3, #0
   36570:	4605      	mov	r5, r0
   36572:	f100 0114 	add.w	r1, r0, #20
   36576:	f100 0210 	add.w	r2, r0, #16
   3657a:	4618      	mov	r0, r3
   3657c:	4553      	cmp	r3, sl
   3657e:	db36      	blt.n	365ee <__lshift+0xa6>
   36580:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   36584:	f104 0314 	add.w	r3, r4, #20
   36588:	6920      	ldr	r0, [r4, #16]
   3658a:	f019 091f 	ands.w	r9, r9, #31
   3658e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   36592:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   36596:	d02e      	beq.n	365f6 <__lshift+0xae>
   36598:	f1c9 0e20 	rsb	lr, r9, #32
   3659c:	468a      	mov	sl, r1
   3659e:	2200      	movs	r2, #0
   365a0:	6818      	ldr	r0, [r3, #0]
   365a2:	fa00 f009 	lsl.w	r0, r0, r9
   365a6:	4302      	orrs	r2, r0
   365a8:	f84a 2b04 	str.w	r2, [sl], #4
   365ac:	f853 2b04 	ldr.w	r2, [r3], #4
   365b0:	459c      	cmp	ip, r3
   365b2:	fa22 f20e 	lsr.w	r2, r2, lr
   365b6:	d8f3      	bhi.n	365a0 <__lshift+0x58>
   365b8:	ebac 0304 	sub.w	r3, ip, r4
   365bc:	f104 0015 	add.w	r0, r4, #21
   365c0:	3b15      	subs	r3, #21
   365c2:	f023 0303 	bic.w	r3, r3, #3
   365c6:	3304      	adds	r3, #4
   365c8:	4560      	cmp	r0, ip
   365ca:	bf88      	it	hi
   365cc:	2304      	movhi	r3, #4
   365ce:	50ca      	str	r2, [r1, r3]
   365d0:	b10a      	cbz	r2, 365d6 <__lshift+0x8e>
   365d2:	f108 0602 	add.w	r6, r8, #2
   365d6:	3e01      	subs	r6, #1
   365d8:	4638      	mov	r0, r7
   365da:	4621      	mov	r1, r4
   365dc:	612e      	str	r6, [r5, #16]
   365de:	f7ff fe2b 	bl	36238 <_Bfree>
   365e2:	4628      	mov	r0, r5
   365e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   365e8:	3101      	adds	r1, #1
   365ea:	005b      	lsls	r3, r3, #1
   365ec:	e7ba      	b.n	36564 <__lshift+0x1c>
   365ee:	3301      	adds	r3, #1
   365f0:	f842 0f04 	str.w	r0, [r2, #4]!
   365f4:	e7c2      	b.n	3657c <__lshift+0x34>
   365f6:	3904      	subs	r1, #4
   365f8:	f853 2b04 	ldr.w	r2, [r3], #4
   365fc:	459c      	cmp	ip, r3
   365fe:	f841 2f04 	str.w	r2, [r1, #4]!
   36602:	d8f9      	bhi.n	365f8 <__lshift+0xb0>
   36604:	e7e7      	b.n	365d6 <__lshift+0x8e>

00036606 <__mcmp>:
   36606:	6902      	ldr	r2, [r0, #16]
   36608:	b530      	push	{r4, r5, lr}
   3660a:	690c      	ldr	r4, [r1, #16]
   3660c:	1b12      	subs	r2, r2, r4
   3660e:	d10e      	bne.n	3662e <__mcmp+0x28>
   36610:	f100 0314 	add.w	r3, r0, #20
   36614:	3114      	adds	r1, #20
   36616:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   3661a:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   3661e:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   36622:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   36626:	42a5      	cmp	r5, r4
   36628:	d003      	beq.n	36632 <__mcmp+0x2c>
   3662a:	d305      	bcc.n	36638 <__mcmp+0x32>
   3662c:	2201      	movs	r2, #1
   3662e:	4610      	mov	r0, r2
   36630:	bd30      	pop	{r4, r5, pc}
   36632:	4283      	cmp	r3, r0
   36634:	d3f3      	bcc.n	3661e <__mcmp+0x18>
   36636:	e7fa      	b.n	3662e <__mcmp+0x28>
   36638:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3663c:	e7f7      	b.n	3662e <__mcmp+0x28>

0003663e <__mdiff>:
   3663e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36642:	460c      	mov	r4, r1
   36644:	4606      	mov	r6, r0
   36646:	4611      	mov	r1, r2
   36648:	4692      	mov	sl, r2
   3664a:	4620      	mov	r0, r4
   3664c:	f7ff ffdb 	bl	36606 <__mcmp>
   36650:	1e05      	subs	r5, r0, #0
   36652:	d108      	bne.n	36666 <__mdiff+0x28>
   36654:	4629      	mov	r1, r5
   36656:	4630      	mov	r0, r6
   36658:	f7ff fdba 	bl	361d0 <_Balloc>
   3665c:	2301      	movs	r3, #1
   3665e:	e9c0 3504 	strd	r3, r5, [r0, #16]
   36662:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36666:	bfa3      	ittte	ge
   36668:	4653      	movge	r3, sl
   3666a:	46a2      	movge	sl, r4
   3666c:	2500      	movge	r5, #0
   3666e:	2501      	movlt	r5, #1
   36670:	bfa8      	it	ge
   36672:	461c      	movge	r4, r3
   36674:	f8da 1004 	ldr.w	r1, [sl, #4]
   36678:	4630      	mov	r0, r6
   3667a:	f7ff fda9 	bl	361d0 <_Balloc>
   3667e:	f104 0914 	add.w	r9, r4, #20
   36682:	f8da 7010 	ldr.w	r7, [sl, #16]
   36686:	f100 0814 	add.w	r8, r0, #20
   3668a:	6926      	ldr	r6, [r4, #16]
   3668c:	f10a 0210 	add.w	r2, sl, #16
   36690:	60c5      	str	r5, [r0, #12]
   36692:	f10a 0514 	add.w	r5, sl, #20
   36696:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   3669a:	46c2      	mov	sl, r8
   3669c:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
   366a0:	f04f 0c00 	mov.w	ip, #0
   366a4:	f852 bf04 	ldr.w	fp, [r2, #4]!
   366a8:	f859 3b04 	ldr.w	r3, [r9], #4
   366ac:	fa1f f18b 	uxth.w	r1, fp
   366b0:	454e      	cmp	r6, r9
   366b2:	4461      	add	r1, ip
   366b4:	fa1f fc83 	uxth.w	ip, r3
   366b8:	ea4f 4313 	mov.w	r3, r3, lsr #16
   366bc:	eba1 010c 	sub.w	r1, r1, ip
   366c0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   366c4:	eb03 4321 	add.w	r3, r3, r1, asr #16
   366c8:	b289      	uxth	r1, r1
   366ca:	ea4f 4c23 	mov.w	ip, r3, asr #16
   366ce:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   366d2:	f84a 3b04 	str.w	r3, [sl], #4
   366d6:	d8e5      	bhi.n	366a4 <__mdiff+0x66>
   366d8:	1b33      	subs	r3, r6, r4
   366da:	3415      	adds	r4, #21
   366dc:	3b15      	subs	r3, #21
   366de:	f023 0303 	bic.w	r3, r3, #3
   366e2:	3304      	adds	r3, #4
   366e4:	42a6      	cmp	r6, r4
   366e6:	bf38      	it	cc
   366e8:	2304      	movcc	r3, #4
   366ea:	441d      	add	r5, r3
   366ec:	4443      	add	r3, r8
   366ee:	462c      	mov	r4, r5
   366f0:	461e      	mov	r6, r3
   366f2:	4574      	cmp	r4, lr
   366f4:	d30e      	bcc.n	36714 <__mdiff+0xd6>
   366f6:	f10e 0203 	add.w	r2, lr, #3
   366fa:	1b52      	subs	r2, r2, r5
   366fc:	3d03      	subs	r5, #3
   366fe:	f022 0203 	bic.w	r2, r2, #3
   36702:	45ae      	cmp	lr, r5
   36704:	bf38      	it	cc
   36706:	2200      	movcc	r2, #0
   36708:	441a      	add	r2, r3
   3670a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   3670e:	b18b      	cbz	r3, 36734 <__mdiff+0xf6>
   36710:	6107      	str	r7, [r0, #16]
   36712:	e7a6      	b.n	36662 <__mdiff+0x24>
   36714:	f854 8b04 	ldr.w	r8, [r4], #4
   36718:	fa1f f288 	uxth.w	r2, r8
   3671c:	4462      	add	r2, ip
   3671e:	1411      	asrs	r1, r2, #16
   36720:	b292      	uxth	r2, r2
   36722:	eb01 4118 	add.w	r1, r1, r8, lsr #16
   36726:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   3672a:	ea4f 4c21 	mov.w	ip, r1, asr #16
   3672e:	f846 2b04 	str.w	r2, [r6], #4
   36732:	e7de      	b.n	366f2 <__mdiff+0xb4>
   36734:	3f01      	subs	r7, #1
   36736:	e7e8      	b.n	3670a <__mdiff+0xcc>

00036738 <__d2b>:
   36738:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   3673c:	ec57 6b10 	vmov	r6, r7, d0
   36740:	f3c7 550a 	ubfx	r5, r7, #20, #11
   36744:	4689      	mov	r9, r1
   36746:	2101      	movs	r1, #1
   36748:	4690      	mov	r8, r2
   3674a:	f7ff fd41 	bl	361d0 <_Balloc>
   3674e:	f3c7 0313 	ubfx	r3, r7, #0, #20
   36752:	4604      	mov	r4, r0
   36754:	bb35      	cbnz	r5, 367a4 <__d2b+0x6c>
   36756:	2e00      	cmp	r6, #0
   36758:	9301      	str	r3, [sp, #4]
   3675a:	d028      	beq.n	367ae <__d2b+0x76>
   3675c:	4668      	mov	r0, sp
   3675e:	9600      	str	r6, [sp, #0]
   36760:	f7ff fe1e 	bl	363a0 <__lo0bits>
   36764:	9900      	ldr	r1, [sp, #0]
   36766:	b300      	cbz	r0, 367aa <__d2b+0x72>
   36768:	9a01      	ldr	r2, [sp, #4]
   3676a:	f1c0 0320 	rsb	r3, r0, #32
   3676e:	fa02 f303 	lsl.w	r3, r2, r3
   36772:	40c2      	lsrs	r2, r0
   36774:	430b      	orrs	r3, r1
   36776:	9201      	str	r2, [sp, #4]
   36778:	6163      	str	r3, [r4, #20]
   3677a:	9b01      	ldr	r3, [sp, #4]
   3677c:	2b00      	cmp	r3, #0
   3677e:	61a3      	str	r3, [r4, #24]
   36780:	bf14      	ite	ne
   36782:	2202      	movne	r2, #2
   36784:	2201      	moveq	r2, #1
   36786:	6122      	str	r2, [r4, #16]
   36788:	b1d5      	cbz	r5, 367c0 <__d2b+0x88>
   3678a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   3678e:	4405      	add	r5, r0
   36790:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   36794:	f8c9 5000 	str.w	r5, [r9]
   36798:	f8c8 0000 	str.w	r0, [r8]
   3679c:	4620      	mov	r0, r4
   3679e:	b003      	add	sp, #12
   367a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   367a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   367a8:	e7d5      	b.n	36756 <__d2b+0x1e>
   367aa:	6161      	str	r1, [r4, #20]
   367ac:	e7e5      	b.n	3677a <__d2b+0x42>
   367ae:	a801      	add	r0, sp, #4
   367b0:	f7ff fdf6 	bl	363a0 <__lo0bits>
   367b4:	9b01      	ldr	r3, [sp, #4]
   367b6:	2201      	movs	r2, #1
   367b8:	3020      	adds	r0, #32
   367ba:	6163      	str	r3, [r4, #20]
   367bc:	6122      	str	r2, [r4, #16]
   367be:	e7e3      	b.n	36788 <__d2b+0x50>
   367c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   367c4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   367c8:	f8c9 0000 	str.w	r0, [r9]
   367cc:	6918      	ldr	r0, [r3, #16]
   367ce:	f7ff fdc7 	bl	36360 <__hi0bits>
   367d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   367d6:	e7df      	b.n	36798 <__d2b+0x60>

000367d8 <__ratio>:
   367d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   367dc:	4688      	mov	r8, r1
   367de:	4681      	mov	r9, r0
   367e0:	4669      	mov	r1, sp
   367e2:	f7fc fbc3 	bl	32f6c <__b2d>
   367e6:	a901      	add	r1, sp, #4
   367e8:	4640      	mov	r0, r8
   367ea:	ec55 4b10 	vmov	r4, r5, d0
   367ee:	f7fc fbbd 	bl	32f6c <__b2d>
   367f2:	f8d9 3010 	ldr.w	r3, [r9, #16]
   367f6:	f8d8 2010 	ldr.w	r2, [r8, #16]
   367fa:	462f      	mov	r7, r5
   367fc:	eba3 0c02 	sub.w	ip, r3, r2
   36800:	e9dd 3200 	ldrd	r3, r2, [sp]
   36804:	ec51 0b10 	vmov	r0, r1, d0
   36808:	1a9b      	subs	r3, r3, r2
   3680a:	468b      	mov	fp, r1
   3680c:	4620      	mov	r0, r4
   3680e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   36812:	2b00      	cmp	r3, #0
   36814:	bfd5      	itete	le
   36816:	460a      	movle	r2, r1
   36818:	462a      	movgt	r2, r5
   3681a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   3681e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   36822:	bfd8      	it	le
   36824:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   36828:	ee10 2a10 	vmov	r2, s0
   3682c:	4639      	mov	r1, r7
   3682e:	465b      	mov	r3, fp
   36830:	f7e6 fb16 	bl	1ce60 <__aeabi_ddiv>
   36834:	ec41 0b10 	vmov	d0, r0, r1
   36838:	b003      	add	sp, #12
   3683a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0003683e <__copybits>:
   3683e:	3901      	subs	r1, #1
   36840:	f102 0314 	add.w	r3, r2, #20
   36844:	1149      	asrs	r1, r1, #5
   36846:	b570      	push	{r4, r5, r6, lr}
   36848:	3101      	adds	r1, #1
   3684a:	6914      	ldr	r4, [r2, #16]
   3684c:	1f05      	subs	r5, r0, #4
   3684e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   36852:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   36856:	42a3      	cmp	r3, r4
   36858:	d30c      	bcc.n	36874 <__copybits+0x36>
   3685a:	1aa3      	subs	r3, r4, r2
   3685c:	3211      	adds	r2, #17
   3685e:	3b11      	subs	r3, #17
   36860:	f023 0303 	bic.w	r3, r3, #3
   36864:	42a2      	cmp	r2, r4
   36866:	bf88      	it	hi
   36868:	2300      	movhi	r3, #0
   3686a:	4418      	add	r0, r3
   3686c:	2300      	movs	r3, #0
   3686e:	4288      	cmp	r0, r1
   36870:	d305      	bcc.n	3687e <__copybits+0x40>
   36872:	bd70      	pop	{r4, r5, r6, pc}
   36874:	f853 6b04 	ldr.w	r6, [r3], #4
   36878:	f845 6f04 	str.w	r6, [r5, #4]!
   3687c:	e7eb      	b.n	36856 <__copybits+0x18>
   3687e:	f840 3b04 	str.w	r3, [r0], #4
   36882:	e7f4      	b.n	3686e <__copybits+0x30>

00036884 <__any_on>:
   36884:	f100 0214 	add.w	r2, r0, #20
   36888:	114b      	asrs	r3, r1, #5
   3688a:	6900      	ldr	r0, [r0, #16]
   3688c:	4298      	cmp	r0, r3
   3688e:	b510      	push	{r4, lr}
   36890:	db11      	blt.n	368b6 <__any_on+0x32>
   36892:	dd0a      	ble.n	368aa <__any_on+0x26>
   36894:	f011 011f 	ands.w	r1, r1, #31
   36898:	d007      	beq.n	368aa <__any_on+0x26>
   3689a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   3689e:	fa24 f001 	lsr.w	r0, r4, r1
   368a2:	fa00 f101 	lsl.w	r1, r0, r1
   368a6:	428c      	cmp	r4, r1
   368a8:	d10b      	bne.n	368c2 <__any_on+0x3e>
   368aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   368ae:	4293      	cmp	r3, r2
   368b0:	d803      	bhi.n	368ba <__any_on+0x36>
   368b2:	2000      	movs	r0, #0
   368b4:	bd10      	pop	{r4, pc}
   368b6:	4603      	mov	r3, r0
   368b8:	e7f7      	b.n	368aa <__any_on+0x26>
   368ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   368be:	2900      	cmp	r1, #0
   368c0:	d0f5      	beq.n	368ae <__any_on+0x2a>
   368c2:	2001      	movs	r0, #1
   368c4:	e7f6      	b.n	368b4 <__any_on+0x30>

000368c6 <_calloc_r>:
   368c6:	434a      	muls	r2, r1
   368c8:	b513      	push	{r0, r1, r4, lr}
   368ca:	4611      	mov	r1, r2
   368cc:	9201      	str	r2, [sp, #4]
   368ce:	f7fb f981 	bl	31bd4 <_malloc_r>
   368d2:	4604      	mov	r4, r0
   368d4:	b118      	cbz	r0, 368de <_calloc_r+0x18>
   368d6:	9a01      	ldr	r2, [sp, #4]
   368d8:	2100      	movs	r1, #0
   368da:	f7ff f935 	bl	35b48 <memset>
   368de:	4620      	mov	r0, r4
   368e0:	b002      	add	sp, #8
   368e2:	bd10      	pop	{r4, pc}

000368e4 <_realloc_r>:
   368e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   368e6:	4607      	mov	r7, r0
   368e8:	4614      	mov	r4, r2
   368ea:	460e      	mov	r6, r1
   368ec:	b921      	cbnz	r1, 368f8 <_realloc_r+0x14>
   368ee:	4611      	mov	r1, r2
   368f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   368f4:	f7fb b96e 	b.w	31bd4 <_malloc_r>
   368f8:	b922      	cbnz	r2, 36904 <_realloc_r+0x20>
   368fa:	4625      	mov	r5, r4
   368fc:	f7fb f91a 	bl	31b34 <_free_r>
   36900:	4628      	mov	r0, r5
   36902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   36904:	f000 f8a6 	bl	36a54 <_malloc_usable_size_r>
   36908:	42a0      	cmp	r0, r4
   3690a:	d20f      	bcs.n	3692c <_realloc_r+0x48>
   3690c:	4621      	mov	r1, r4
   3690e:	4638      	mov	r0, r7
   36910:	f7fb f960 	bl	31bd4 <_malloc_r>
   36914:	4605      	mov	r5, r0
   36916:	2800      	cmp	r0, #0
   36918:	d0f2      	beq.n	36900 <_realloc_r+0x1c>
   3691a:	4631      	mov	r1, r6
   3691c:	4622      	mov	r2, r4
   3691e:	f7ff f8f3 	bl	35b08 <memcpy>
   36922:	4631      	mov	r1, r6
   36924:	4638      	mov	r0, r7
   36926:	f7fb f905 	bl	31b34 <_free_r>
   3692a:	e7e9      	b.n	36900 <_realloc_r+0x1c>
   3692c:	4635      	mov	r5, r6
   3692e:	e7e7      	b.n	36900 <_realloc_r+0x1c>

00036930 <__ssputs_r>:
   36930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   36934:	688e      	ldr	r6, [r1, #8]
   36936:	4682      	mov	sl, r0
   36938:	460c      	mov	r4, r1
   3693a:	4690      	mov	r8, r2
   3693c:	429e      	cmp	r6, r3
   3693e:	461f      	mov	r7, r3
   36940:	d838      	bhi.n	369b4 <__ssputs_r+0x84>
   36942:	898a      	ldrh	r2, [r1, #12]
   36944:	f412 6f90 	tst.w	r2, #1152	; 0x480
   36948:	d032      	beq.n	369b0 <__ssputs_r+0x80>
   3694a:	6825      	ldr	r5, [r4, #0]
   3694c:	3301      	adds	r3, #1
   3694e:	6909      	ldr	r1, [r1, #16]
   36950:	eba5 0901 	sub.w	r9, r5, r1
   36954:	6965      	ldr	r5, [r4, #20]
   36956:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   3695a:	444b      	add	r3, r9
   3695c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   36960:	106d      	asrs	r5, r5, #1
   36962:	429d      	cmp	r5, r3
   36964:	bf38      	it	cc
   36966:	461d      	movcc	r5, r3
   36968:	0553      	lsls	r3, r2, #21
   3696a:	d531      	bpl.n	369d0 <__ssputs_r+0xa0>
   3696c:	4629      	mov	r1, r5
   3696e:	f7fb f931 	bl	31bd4 <_malloc_r>
   36972:	4606      	mov	r6, r0
   36974:	b950      	cbnz	r0, 3698c <__ssputs_r+0x5c>
   36976:	230c      	movs	r3, #12
   36978:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3697c:	f8ca 3000 	str.w	r3, [sl]
   36980:	89a3      	ldrh	r3, [r4, #12]
   36982:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   36986:	81a3      	strh	r3, [r4, #12]
   36988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3698c:	464a      	mov	r2, r9
   3698e:	6921      	ldr	r1, [r4, #16]
   36990:	f7ff f8ba 	bl	35b08 <memcpy>
   36994:	89a3      	ldrh	r3, [r4, #12]
   36996:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   3699a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   3699e:	81a3      	strh	r3, [r4, #12]
   369a0:	6126      	str	r6, [r4, #16]
   369a2:	444e      	add	r6, r9
   369a4:	6165      	str	r5, [r4, #20]
   369a6:	eba5 0509 	sub.w	r5, r5, r9
   369aa:	6026      	str	r6, [r4, #0]
   369ac:	463e      	mov	r6, r7
   369ae:	60a5      	str	r5, [r4, #8]
   369b0:	42be      	cmp	r6, r7
   369b2:	d900      	bls.n	369b6 <__ssputs_r+0x86>
   369b4:	463e      	mov	r6, r7
   369b6:	4632      	mov	r2, r6
   369b8:	4641      	mov	r1, r8
   369ba:	6820      	ldr	r0, [r4, #0]
   369bc:	f7ff fbee 	bl	3619c <memmove>
   369c0:	68a3      	ldr	r3, [r4, #8]
   369c2:	6822      	ldr	r2, [r4, #0]
   369c4:	2000      	movs	r0, #0
   369c6:	1b9b      	subs	r3, r3, r6
   369c8:	4432      	add	r2, r6
   369ca:	60a3      	str	r3, [r4, #8]
   369cc:	6022      	str	r2, [r4, #0]
   369ce:	e7db      	b.n	36988 <__ssputs_r+0x58>
   369d0:	462a      	mov	r2, r5
   369d2:	f7ff ff87 	bl	368e4 <_realloc_r>
   369d6:	4606      	mov	r6, r0
   369d8:	2800      	cmp	r0, #0
   369da:	d1e1      	bne.n	369a0 <__ssputs_r+0x70>
   369dc:	6921      	ldr	r1, [r4, #16]
   369de:	4650      	mov	r0, sl
   369e0:	f7fb f8a8 	bl	31b34 <_free_r>
   369e4:	e7c7      	b.n	36976 <__ssputs_r+0x46>

000369e6 <_raise_r>:
   369e6:	291f      	cmp	r1, #31
   369e8:	b538      	push	{r3, r4, r5, lr}
   369ea:	4604      	mov	r4, r0
   369ec:	460d      	mov	r5, r1
   369ee:	d904      	bls.n	369fa <_raise_r+0x14>
   369f0:	2316      	movs	r3, #22
   369f2:	6003      	str	r3, [r0, #0]
   369f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   369f8:	bd38      	pop	{r3, r4, r5, pc}
   369fa:	6c42      	ldr	r2, [r0, #68]	; 0x44
   369fc:	b112      	cbz	r2, 36a04 <_raise_r+0x1e>
   369fe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   36a02:	b94b      	cbnz	r3, 36a18 <_raise_r+0x32>
   36a04:	4620      	mov	r0, r4
   36a06:	f000 f816 	bl	36a36 <_getpid_r>
   36a0a:	462a      	mov	r2, r5
   36a0c:	4601      	mov	r1, r0
   36a0e:	4620      	mov	r0, r4
   36a10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   36a14:	f7fc bc14 	b.w	33240 <_kill_r>
   36a18:	2b01      	cmp	r3, #1
   36a1a:	d00a      	beq.n	36a32 <_raise_r+0x4c>
   36a1c:	1c59      	adds	r1, r3, #1
   36a1e:	d103      	bne.n	36a28 <_raise_r+0x42>
   36a20:	2316      	movs	r3, #22
   36a22:	6003      	str	r3, [r0, #0]
   36a24:	2001      	movs	r0, #1
   36a26:	e7e7      	b.n	369f8 <_raise_r+0x12>
   36a28:	2400      	movs	r4, #0
   36a2a:	4628      	mov	r0, r5
   36a2c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   36a30:	4798      	blx	r3
   36a32:	2000      	movs	r0, #0
   36a34:	e7e0      	b.n	369f8 <_raise_r+0x12>

00036a36 <_getpid_r>:
   36a36:	f7fd b935 	b.w	33ca4 <_getpid>

00036a3a <__ascii_wctomb>:
   36a3a:	b149      	cbz	r1, 36a50 <__ascii_wctomb+0x16>
   36a3c:	2aff      	cmp	r2, #255	; 0xff
   36a3e:	bf8d      	iteet	hi
   36a40:	238a      	movhi	r3, #138	; 0x8a
   36a42:	2001      	movls	r0, #1
   36a44:	700a      	strbls	r2, [r1, #0]
   36a46:	6003      	strhi	r3, [r0, #0]
   36a48:	bf88      	it	hi
   36a4a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   36a4e:	4770      	bx	lr
   36a50:	4608      	mov	r0, r1
   36a52:	4770      	bx	lr

00036a54 <_malloc_usable_size_r>:
   36a54:	f851 3c04 	ldr.w	r3, [r1, #-4]
   36a58:	1f18      	subs	r0, r3, #4
   36a5a:	2b00      	cmp	r3, #0
   36a5c:	bfbc      	itt	lt
   36a5e:	580b      	ldrlt	r3, [r1, r0]
   36a60:	18c0      	addlt	r0, r0, r3
   36a62:	4770      	bx	lr
